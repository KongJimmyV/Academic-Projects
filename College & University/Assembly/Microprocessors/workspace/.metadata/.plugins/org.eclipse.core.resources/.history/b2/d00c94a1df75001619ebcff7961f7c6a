			.text               # Instructions follow

      		.global main        # makes label "main" globally known

main:  							# Execution of the program starts here

	RegistryDefinitions:
			movia	r2,0x10000030		# 	set address from Slider Switches...		--> ...to R2
			movia	r3,0x10000000		# 	set address from Red LEDS...			--> ...to R3
			movia	r4,0x10000010		# 	set address from Green LEDS...			--> ...to R4

			movia	r5,0x10000020		# 	set address from Push Buttons...		--> ...to R5

	RegistryVariables:
			movi	r10,0				# 	set value 0 to R10	(Note = Constant zero)
			movi	r9, 0				# 	set value 0	to R9	(Note = used for green LED and Switches)
			movi	r11, 0				# 	set value 0	to R11	(Note = used for red LED and Switches)


turnOnAllLeds:					# TURN ON ALL LEDS
			movi	r3,0b1111111111		# copy binary value to R3 (Red LEDS)
			movi	r4,0b0011111111		# copy binary value to R4 (Green LEDS)
			stw		r4,0(r11)			# turn on Green LEDS
			stw		r3,0(r12)			# turn on Red LEDS


turnOffAllLeds:					# TURN OFF ALL LEDS
			movi	r10,0				# sets r10 to a constant 	--> 0
			stw		r10,0(r11)			# resets green leds 		--> 0
			stw		r10,0(r12)			# resets red leds 			--> 0


loop:   						# THIS LOOP CHECKS LEDS, SWITCHES, AND BUTTONS AND DOES THE FOLLOWING.
			nop							# The beginning of the main loop

			ldw		r9,0(r2)			# read from address in R2 (switches) and store value in R9
			addi	r9,r9,1			# Set R9 to be equal to the sum of R9 + 1
			stw		r9,0(r4)			# store the value in R9 to the address in R4 (green lights)

			addi	r11,r11,0			# Set R11 to be equal to the sum of R9 + 0
			stw		r11,0(r3)			# store the value in R9 to the address in R3 (red lights)

			movi 	r10,0					# reset R10 ---> 0
			ldw		r4,0(r2)				# reads from R2 addresses (buttons)
			bne		r10,r5,turnOnAllLeds	# if the Push Buttons are pressed, branch to turnOnAllLeds

			br      loop        # Branch to loop



       		.end                  		# The assembler will stop here





