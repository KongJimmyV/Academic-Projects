
lab9.elf:     file format elf32-littlenios2
lab9.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0000d2e0 memsz 0x0000d2e0 flags r-x
    LOAD off    0x0000e300 vaddr 0x0000d300 paddr 0x0000eee4 align 2**12
         filesz 0x00001be4 memsz 0x00001be4 flags rw-
    LOAD off    0x00010ac8 vaddr 0x00010ac8 paddr 0x00010ac8 align 2**12
         filesz 0x00000000 memsz 0x000002ec flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000cd0c  000001b4  000001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000440  0000cec0  0000cec0  0000dec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001be4  0000d300  0000eee4  0000e300  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002ec  00010ac8  00010ac8  00010ac8  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  0000fee4  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000cd8  00000000  00000000  0000ff08  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 0000141d  00000000  00000000  00010be0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002331b  00000000  00000000  00011ffd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00007c27  00000000  00000000  00035318  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00013e25  00000000  00000000  0003cf3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000195c  00000000  00000000  00050d64  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000215c  00000000  00000000  000526c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000bead  00000000  00000000  0005481c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  000606cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000990  00000000  00000000  000606f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00064157  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0006415a  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0006415d  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0006415e  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0006415f  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00064163  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00064167  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0006416b  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00064174  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0006417d  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000008  00000000  00000000  00064186  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000001c  00000000  00000000  0006418e  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     000b989e  00000000  00000000  000641aa  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001b4 l    d  .text	00000000 .text
0000cec0 l    d  .rodata	00000000 .rodata
0000d300 l    d  .rwdata	00000000 .rwdata
00010ac8 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000001ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 lab9.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
000003e4 l     F .text	00000058 __sprint_r
0000d00e l     O .rodata	00000010 blanks.3452
0000cffe l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00002448 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00003e44 l     F .text	00000058 std
00003f50 l     F .text	00000008 __fp_lock
00003f58 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0000d300 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
0000eeb0 l     O .rwdata	00000004 charset
0000d044 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0000d18c l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00008158 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00009284 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
00009af8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00009b58 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00009c58 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00009d78 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00009e58 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00009fb4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000a1e0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0000eed4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0000a47c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000dcbc l     O .rwdata	00001060 jtag_uart
0000ed1c l     O .rwdata	000000c4 Serial_port0
0000ede0 l     O .rwdata	000000c4 Serial_port1
0000a5ac l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000a7ec l     F .text	00000228 altera_avalon_jtag_uart_irq
0000aa14 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000b090 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
0000b350 l     F .text	0000009c altera_avalon_uart_irq
0000b3ec l     F .text	000000e0 altera_avalon_uart_rxirq
0000b4cc l     F .text	0000015c altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
0000b8b8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
0000bae0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000bd64 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000c188 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0000c2c4 l     F .text	000000dc alt_file_locked
0000c528 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0000cc3c l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0000cdf0 l     F .text	00000040 alt_sim_halt
00005c00 g     F .text	00000094 _mprec_log10
00005cec g     F .text	00000088 __any_on
0000746c g     F .text	00000070 _isatty_r
0000d164 g     O .rodata	00000028 __mprec_tinytens
0000a014 g     F .text	0000006c alt_main
00010b24 g     O .bss	00000100 alt_irq
000074dc g     F .text	00000078 _lseek_r
0000eee4 g       *ABS*	00000000 __flash_rwdata_start
00008c78 g     F .text	00000088 __eqdf2
00010db4 g       *ABS*	00000000 __alt_heap_start
0000036c g     F .text	00000044 printf
00006ec4 g     F .text	00000068 __sseek
00003eac g     F .text	000000a4 __sinit
00004b84 g     F .text	00000084 _setlocale_r
00003fac g     F .text	00000068 __sfmoreglue
0000a0a0 g     F .text	00000020 __malloc_unlock
0000567c g     F .text	000000e0 memmove
00003f9c g     F .text	00000010 _cleanup
00005d74 g     F .text	000000bc _Balloc
00008d88 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
000073f8 g     F .text	00000074 _fstat_r
00010ae0 g     O .bss	00000004 errno
00010ae8 g     O .bss	00000004 alt_argv
00016ea4 g       *ABS*	00000000 _gp
0000db3c g     O .rwdata	00000180 alt_fd_list
0000c74c g     F .text	00000094 alt_find_dev
000055dc g     F .text	000000a0 memcpy
00003f90 g     F .text	0000000c _cleanup_r
00008f20 g     F .text	000000f8 __floatsidf
0000c24c g     F .text	00000078 alt_io_redirect
00008e98 g     F .text	00000088 __ltdf2
0000cec0 g       *ABS*	00000000 __DTOR_END__
00005b50 g     F .text	000000b0 __ratio
0000ac2c g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
000003b0 g     F .text	00000034 _printf_r
000093c0 g     F .text	00000008 __udivsi3
00009cb8 g     F .text	000000c0 isatty
0000d074 g     O .rodata	000000c8 __mprec_tens
00004b60 g     F .text	00000008 __locale_charset
0000c9b8 g     F .text	00000090 alt_icache_flush
00010ad4 g     O .bss	00000004 __malloc_top_pad
0000eeac g     O .rwdata	00000004 __mb_cur_max
00004b68 g     F .text	0000000c _localeconv_r
0000646c g     F .text	0000003c __i2b
00004544 g     F .text	0000049c __sfvwrite_r
00006e4c g     F .text	00000070 _sbrk_r
00007554 g     F .text	00000078 _read_r
0000d700 g     O .rwdata	0000000c __lc_ctype
0000eecc g     O .rwdata	00000004 alt_max_fd
000097fc g     F .text	00000138 __unpack_d
000072d4 g     F .text	00000110 _fclose_r
00003e10 g     F .text	00000034 fflush
00010ad8 g     O .bss	00000004 __malloc_max_sbrked_mem
000085e8 g     F .text	00000074 __adddf3
00005a30 g     F .text	00000120 __b2d
00007ba8 g     F .text	000005b0 __umoddi3
00009ec4 g     F .text	000000f0 lseek
0000eea8 g     O .rwdata	00000004 _global_impure_ptr
000067e8 g     F .text	000005f4 _realloc_r
00010db4 g       *ABS*	00000000 __bss_end
0000c090 g     F .text	000000f8 alt_iic_isr_register
0000c620 g     F .text	0000010c alt_tick
000075cc g     F .text	000005dc __udivdi3
0000d13c g     O .rodata	00000028 __mprec_bigtens
000066c8 g     F .text	00000120 __s2b
000090f0 g     F .text	00000194 __floatunsidf
00005950 g     F .text	00000060 __mcmp
0000b288 g     F .text	000000c8 altera_avalon_uart_init
00003f78 g     F .text	00000018 __fp_lock_all
0000c048 g     F .text	00000048 alt_ic_irq_enabled
0000c588 g     F .text	00000098 alt_alarm_stop
00010af0 g     O .bss	00000004 alt_irq_active
000000ec g     F .exceptions	000000c8 alt_irq_handler
0000db14 g     O .rwdata	00000028 alt_dev_null
0000bc94 g     F .text	0000001c alt_dcache_flush_all
0000581c g     F .text	00000070 __hi0bits
00009018 g     F .text	000000d8 __fixdfsi
0000eee4 g       *ABS*	00000000 __ram_rwdata_end
0000eec4 g     O .rwdata	00000008 alt_dev_list
0000a35c g     F .text	00000120 write
0000d300 g       *ABS*	00000000 __ram_rodata_end
00009b84 g     F .text	000000d4 fstat
000065a8 g     F .text	00000120 __pow5mult
00010ac8 g     O .bss	00000004 __nlocale_changed
000093c8 g     F .text	00000008 __umodsi3
00010db4 g       *ABS*	00000000 end
0000b918 g     F .text	000001c8 altera_avalon_uart_write
0000a72c g     F .text	000000c0 altera_avalon_jtag_uart_init
0000cebc g       *ABS*	00000000 __CTOR_LIST__
00800000 g       *ABS*	00000000 __alt_stack_pointer
0000b100 g     F .text	00000090 alt_avalon_timer_sc_init
0000b1e8 g     F .text	00000058 altera_avalon_uart_write_fd
00009468 g     F .text	00000080 __clzsi2
0000b240 g     F .text	00000048 altera_avalon_uart_close_fd
0000ae50 g     F .text	00000240 altera_avalon_jtag_uart_write
00003e9c g     F .text	00000004 __sfp_lock_acquire
000054f8 g     F .text	000000e4 memchr
0000043c g     F .text	00001eac ___vfprintf_internal_r
00004230 g     F .text	00000314 _free_r
0000cc40 g     F .text	000001b0 __call_exitprocs
00010acc g     O .bss	00000004 __mlocale_changed
0000eeb8 g     O .rwdata	00000004 __malloc_sbrk_base
000001b4 g     F .text	0000003c _start
00010af4 g     O .bss	00000004 _alt_tick_rate
00006138 g     F .text	0000014c __lshift
00010af8 g     O .bss	00000004 _alt_nticks
0000a0c0 g     F .text	00000120 read
0000a510 g     F .text	0000009c alt_sys_init
0000cb08 g     F .text	00000134 __register_exitproc
00006284 g     F .text	000001e8 __multiply
0000aac4 g     F .text	00000074 altera_avalon_jtag_uart_close
0000d300 g       *ABS*	00000000 __ram_rwdata_start
0000cec0 g       *ABS*	00000000 __ram_rodata_start
00010afc g     O .bss	00000028 __malloc_current_mallinfo
00005e30 g     F .text	0000017c __d2b
0000a5e4 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0000c900 g     F .text	000000b8 alt_get_fd
00009934 g     F .text	000000c8 __fpcmp_parts_d
00007264 g     F .text	00000070 _close_r
0000ca94 g     F .text	00000074 memcmp
0000a694 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00010db4 g       *ABS*	00000000 __alt_stack_base
0000a6dc g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
0000230c g     F .text	0000013c __swsetup_r
00008a20 g     F .text	00000258 __divdf3
00004014 g     F .text	000000f0 __sfp
00005c94 g     F .text	00000058 __copybits
0000d70c g     O .rwdata	00000408 __malloc_av_
00003ea8 g     F .text	00000004 __sinit_lock_release
0000865c g     F .text	000003c4 __muldf3
00006fa8 g     F .text	00000060 __sread
0000c7e0 g     F .text	00000120 alt_find_file
0000bcb0 g     F .text	000000b4 alt_dev_llist_insert
0000a080 g     F .text	00000020 __malloc_lock
0000a2a0 g     F .text	000000bc sbrk
00003c14 g     F .text	000001fc _fflush_r
000071b0 g     F .text	000000b4 _calloc_r
00010ac8 g       *ABS*	00000000 __bss_start
0000575c g     F .text	00000098 memset
000001f0 g     F .text	0000017c main
00010aec g     O .bss	00000004 alt_envp
00010adc g     O .bss	00000004 __malloc_max_total_mem
0000a63c g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00006ebc g     F .text	00000008 __sclose
00800000 g       *ABS*	00000000 __alt_heap_limit
000073e4 g     F .text	00000014 fclose
00010c24 g     O .bss	00000190 _atexit0
00002660 g     F .text	000015b4 _dtoa_r
00004db8 g     F .text	00000740 _malloc_r
0000eed0 g     O .rwdata	00000004 alt_errno
00004aa8 g     F .text	000000b8 _fwalk
00009300 g     F .text	00000060 __divsi3
0000d198 g     O .rodata	00000014 __thenan_df
00004104 g     F .text	0000012c _malloc_trim_r
0000cec0 g       *ABS*	00000000 __CTOR_END__
00007008 g     F .text	000000bc strcmp
0000cec0 g       *ABS*	00000000 __flash_rodata_start
0000cec0 g       *ABS*	00000000 __DTOR_LIST__
00008d00 g     F .text	00000088 __nedf2
0000a4dc g     F .text	00000034 alt_irq_init
0000a240 g     F .text	00000060 alt_release_fd
0000d1ac g     O .rodata	00000100 __clz_tab
00010ad0 g     O .bss	00000004 _PathLocale
0000ca48 g     F .text	00000014 atexit
00007138 g     F .text	00000078 _write_r
00004c08 g     F .text	0000001c setlocale
0000eea4 g     O .rwdata	00000004 _impure_ptr
00010ae4 g     O .bss	00000004 alt_argc
0000be28 g     F .text	00000064 _do_dtors
00000020 g       .exceptions	00000000 alt_irq_entry
000059b0 g     F .text	00000080 __ulp
00006ddc g     F .text	00000040 __isinfd
00003f60 g     F .text	00000018 __fp_unlock_all
0000eebc g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
00004b74 g     F .text	00000010 localeconv
0000bebc g     F .text	00000050 alt_ic_isr_register
0000eee4 g       *ABS*	00000000 _edata
0000b190 g     F .text	00000058 altera_avalon_uart_read_fd
00010db4 g       *ABS*	00000000 _end
000001b4 g       *ABS*	00000000 __ram_exceptions_end
0000ab38 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0000bfa8 g     F .text	000000a0 alt_ic_irq_disable
00006f2c g     F .text	0000007c __swrite
0000eeb4 g     O .rwdata	00000004 __malloc_trim_threshold
0000c72c g     F .text	00000020 altera_nios2_qsys_irq_init
0000ca5c g     F .text	00000038 exit
000049e0 g     F .text	000000c8 _fwalk_reent
00005fac g     F .text	0000018c __mdiff
00009360 g     F .text	00000060 __modsi3
00800000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00003ea0 g     F .text	00000004 __sfp_lock_release
00000000 g       *ABS*	00000000 __alt_mem_sdram
0000b628 g     F .text	00000060 altera_avalon_uart_close
0000ce30 g     F .text	00000020 _exit
00006e1c g     F .text	00000030 __isnand
0000bb40 g     F .text	00000154 alt_alarm_start
000093d0 g     F .text	00000098 __muldi3
00004c24 g     F .text	00000194 __smakebuf_r
000070c4 g     F .text	00000074 strlen
0000c3a0 g     F .text	00000188 open
00008e10 g     F .text	00000088 __gedf2
0000be8c g     F .text	00000030 alt_icache_flush_all
0000eed8 g     O .rwdata	00000004 alt_priority_mask
0000bf0c g     F .text	0000009c alt_ic_irq_enable
000022e8 g     F .text	00000024 __vfprintf_internal
0000b688 g     F .text	00000230 altera_avalon_uart_read
00008568 g     F .text	00000080 __subdf3
0000588c g     F .text	000000c4 __lo0bits
0000eedc g     O .rwdata	00000008 alt_alarm_list
0000bdc4 g     F .text	00000064 _do_ctors
000099fc g     F .text	000000fc close
00009dd8 g     F .text	00000080 alt_load
000094e8 g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
00003ea4 g     F .text	00000004 __sinit_lock_acquire
000064a8 g     F .text	00000100 __multadd
000057f4 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00880014 	movui	r2,8192
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08406d14 	ori	at,at,436
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  44:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  fc:	0005313a 	rdctl	r2,ipending
 100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 10c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 110:	00800044 	movi	r2,1
 114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 118:	e0ffff17 	ldw	r3,-4(fp)
 11c:	e0bffe17 	ldw	r2,-8(fp)
 120:	1884703a 	and	r2,r3,r2
 124:	1005003a 	cmpeq	r2,r2,zero
 128:	1000161e 	bne	r2,zero,184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 12c:	e0bffd17 	ldw	r2,-12(fp)
 130:	00c00074 	movhi	r3,1
 134:	18c2c904 	addi	r3,r3,2852
 138:	100490fa 	slli	r2,r2,3
 13c:	10c5883a 	add	r2,r2,r3
 140:	11400017 	ldw	r5,0(r2)
 144:	e0bffd17 	ldw	r2,-12(fp)
 148:	00c00074 	movhi	r3,1
 14c:	18c2c904 	addi	r3,r3,2852
 150:	100490fa 	slli	r2,r2,3
 154:	10c5883a 	add	r2,r2,r3
 158:	10800104 	addi	r2,r2,4
 15c:	11000017 	ldw	r4,0(r2)
 160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 164:	0005313a 	rdctl	r2,ipending
 168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 16c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 174:	e0bfff17 	ldw	r2,-4(fp)
 178:	1004c03a 	cmpne	r2,r2,zero
 17c:	103fe31e 	bne	r2,zero,10c <alt_irq_handler+0x20>
 180:	00000706 	br	1a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 184:	e0bffe17 	ldw	r2,-8(fp)
 188:	1085883a 	add	r2,r2,r2
 18c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 190:	e0bffd17 	ldw	r2,-12(fp)
 194:	10800044 	addi	r2,r2,1
 198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 19c:	003fde06 	br	118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 1a0:	e037883a 	mov	sp,fp
 1a4:	dfc00117 	ldw	ra,4(sp)
 1a8:	df000017 	ldw	fp,0(sp)
 1ac:	dec00204 	addi	sp,sp,8
 1b0:	f800283a 	ret

Disassembly of section .text:

000001b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1b4:	06c02034 	movhi	sp,128
    ori sp, sp, %lo(__alt_stack_pointer)
     1b8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     1bc:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     1c0:	d69ba914 	ori	gp,gp,28324
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1c4:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     1c8:	1082b214 	ori	r2,r2,2760

    movhi r3, %hi(__bss_end)
     1cc:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     1d0:	18c36d14 	ori	r3,r3,3508

    beq r2, r3, 1f
     1d4:	10c00326 	beq	r2,r3,1e4 <_start+0x30>

0:
    stw zero, (r2)
     1d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1e0:	10fffd36 	bltu	r2,r3,1d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1e4:	0009dd80 	call	9dd8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1e8:	000a0140 	call	a014 <alt_main>

000001ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1ec:	003fff06 	br	1ec <alt_after_alt_main>

000001f0 <main>:
#include <altera_avalon_pio_regs.h>
#include <system.h>


int main()
{
     1f0:	defffa04 	addi	sp,sp,-24
     1f4:	dfc00515 	stw	ra,20(sp)
     1f8:	df000415 	stw	fp,16(sp)
     1fc:	df000404 	addi	fp,sp,16
	// Declare your variables here
	int buttons 	= 0;
     200:	e03fff15 	stw	zero,-4(fp)
	int switches 	= 0;
     204:	e03ffe15 	stw	zero,-8(fp)
	int result 		= 0;
     208:	e03ffd15 	stw	zero,-12(fp)
	int stored 		= 0;
     20c:	e03ffc15 	stw	zero,-16(fp)
	// Wait for a BUTTON to be PRESSED.
	while(1)
	{
		/*** main loop ***/
		// read SWITCHES value
		switches = IORD_ALTERA_AVALON_PIO_DATA (SLIDER_SWITCHES_BASE);
     210:	00840034 	movhi	r2,4096
     214:	10800c04 	addi	r2,r2,48
     218:	10800037 	ldwio	r2,0(r2)
     21c:	e0bffe15 	stw	r2,-8(fp)

		// wait for BUTTON PRESS
		do {
			// update SWITCHES and BUTTONS
			switches = IORD_ALTERA_AVALON_PIO_DATA (SLIDER_SWITCHES_BASE);
     220:	00840034 	movhi	r2,4096
     224:	10800c04 	addi	r2,r2,48
     228:	10800037 	ldwio	r2,0(r2)
     22c:	e0bffe15 	stw	r2,-8(fp)
			buttons = IORD_ALTERA_AVALON_PIO_DATA (PUSHBUTTONS_BASE);
     230:	00840034 	movhi	r2,4096
     234:	10800804 	addi	r2,r2,32
     238:	10800037 	ldwio	r2,0(r2)
     23c:	e0bfff15 	stw	r2,-4(fp)
		} while (buttons == 0);
     240:	e0bfff17 	ldw	r2,-4(fp)
     244:	1005003a 	cmpeq	r2,r2,zero
     248:	103ff51e 	bne	r2,zero,220 <main+0x30>

		/*** Use Bit-masking with powers of 2. ***/
		// Set STORAGE number to equal the slider SWITCHES value.
		if		(buttons & 1)
     24c:	e0bfff17 	ldw	r2,-4(fp)
     250:	1080004c 	andi	r2,r2,1
     254:	10803fcc 	andi	r2,r2,255
     258:	1005003a 	cmpeq	r2,r2,zero
     25c:	1000071e 	bne	r2,zero,27c <main+0x8c>
		{
			stored = switches;
     260:	e0bffe17 	ldw	r2,-8(fp)
     264:	e0bffc15 	stw	r2,-16(fp)
			printf ("\n---------------\n"
     268:	01000074 	movhi	r4,1
     26c:	2133b004 	addi	r4,r4,-12608
     270:	e17ffc17 	ldw	r5,-16(fp)
     274:	000036c0 	call	36c <printf>
     278:	00002c06 	br	32c <main+0x13c>
					"STORED:	=  %d", stored);
		}
		// Add the value from the SWITCHES with the STORAGE value.
		else if	(buttons & 2)
     27c:	e0bfff17 	ldw	r2,-4(fp)
     280:	1080008c 	andi	r2,r2,2
     284:	1005003a 	cmpeq	r2,r2,zero
     288:	10000b1e 	bne	r2,zero,2b8 <main+0xc8>
		{
			result = stored + switches;
     28c:	e0bffc17 	ldw	r2,-16(fp)
     290:	e0fffe17 	ldw	r3,-8(fp)
     294:	10c5883a 	add	r2,r2,r3
     298:	e0bffd15 	stw	r2,-12(fp)
			// Update Console:
			printf ("\n---------------\n"
     29c:	01000074 	movhi	r4,1
     2a0:	2133b804 	addi	r4,r4,-12576
     2a4:	e17ffc17 	ldw	r5,-16(fp)
     2a8:	e1bffe17 	ldw	r6,-8(fp)
     2ac:	e1fffd17 	ldw	r7,-12(fp)
     2b0:	000036c0 	call	36c <printf>
     2b4:	00001d06 	br	32c <main+0x13c>
					"STORED:	   %d\n"
					"SWITCHES:	+  %d\n"
					"RESULT:	   %d", stored, switches, result);
		}
		// Logically AND the values of the SWITCHES with the STORAGE value.
		else if	(buttons & 4)
     2b8:	e0bfff17 	ldw	r2,-4(fp)
     2bc:	1080010c 	andi	r2,r2,4
     2c0:	1005003a 	cmpeq	r2,r2,zero
     2c4:	10000b1e 	bne	r2,zero,2f4 <main+0x104>
		{
			result = stored & switches;
     2c8:	e0bffc17 	ldw	r2,-16(fp)
     2cc:	e0fffe17 	ldw	r3,-8(fp)
     2d0:	10c4703a 	and	r2,r2,r3
     2d4:	e0bffd15 	stw	r2,-12(fp)
			// Update Console:
			printf ("\n---------------\n"
     2d8:	01000074 	movhi	r4,1
     2dc:	2133c804 	addi	r4,r4,-12512
     2e0:	e17ffc17 	ldw	r5,-16(fp)
     2e4:	e1bffe17 	ldw	r6,-8(fp)
     2e8:	e1fffd17 	ldw	r7,-12(fp)
     2ec:	000036c0 	call	36c <printf>
     2f0:	00000e06 	br	32c <main+0x13c>
					"STORED:	   %d\n"
					"SWITCHES:	&& %d\n"
					"RESULT:	   %d", stored, switches, result);
		}
		// Multiply the value of the SWITCHES with the STORAGE value.
		else if	(buttons & 8)
     2f4:	e0bfff17 	ldw	r2,-4(fp)
     2f8:	1080020c 	andi	r2,r2,8
     2fc:	1005003a 	cmpeq	r2,r2,zero
     300:	10000a1e 	bne	r2,zero,32c <main+0x13c>
		{
			result = stored * switches;
     304:	e0bffc17 	ldw	r2,-16(fp)
     308:	e0fffe17 	ldw	r3,-8(fp)
     30c:	10c5383a 	mul	r2,r2,r3
     310:	e0bffd15 	stw	r2,-12(fp)
			// Update Console:
			printf ("\n---------------\n"
     314:	01000074 	movhi	r4,1
     318:	2133d804 	addi	r4,r4,-12448
     31c:	e17ffc17 	ldw	r5,-16(fp)
     320:	e1bffe17 	ldw	r6,-8(fp)
     324:	e1fffd17 	ldw	r7,-12(fp)
     328:	000036c0 	call	36c <printf>
					"SWITCHES:	*  %d\n"
					"RESULT:	   %d", stored, switches, result);
		}

		// Show RESULTS on RED_LEDS.
		IOWR_ALTERA_AVALON_PIO_DATA (RED_LEDS_BASE, result);
     32c:	00c40034 	movhi	r3,4096
     330:	18c00404 	addi	r3,r3,16
     334:	e0bffd17 	ldw	r2,-12(fp)
     338:	18800035 	stwio	r2,0(r3)
		//printf ("TOTAL RESULTS = result \"%d\" ", result);

		// wait for BUTTON RELEASE
		do {
			// update switches and buttons
			switches = IORD_ALTERA_AVALON_PIO_DATA (SLIDER_SWITCHES_BASE);
     33c:	00840034 	movhi	r2,4096
     340:	10800c04 	addi	r2,r2,48
     344:	10800037 	ldwio	r2,0(r2)
     348:	e0bffe15 	stw	r2,-8(fp)
			buttons = IORD_ALTERA_AVALON_PIO_DATA (PUSHBUTTONS_BASE);
     34c:	00840034 	movhi	r2,4096
     350:	10800804 	addi	r2,r2,32
     354:	10800037 	ldwio	r2,0(r2)
     358:	e0bfff15 	stw	r2,-4(fp)
		} while (buttons != 0);
     35c:	e0bfff17 	ldw	r2,-4(fp)
     360:	1004c03a 	cmpne	r2,r2,zero
     364:	103ff51e 	bne	r2,zero,33c <main+0x14c>
	}
     368:	003fa906 	br	210 <main+0x20>

0000036c <printf>:
     36c:	defffb04 	addi	sp,sp,-20
     370:	dfc00115 	stw	ra,4(sp)
     374:	d9400215 	stw	r5,8(sp)
     378:	d9800315 	stw	r6,12(sp)
     37c:	d9c00415 	stw	r7,16(sp)
     380:	00800074 	movhi	r2,1
     384:	10bba904 	addi	r2,r2,-4444
     388:	10c00017 	ldw	r3,0(r2)
     38c:	200b883a 	mov	r5,r4
     390:	d8800204 	addi	r2,sp,8
     394:	19000217 	ldw	r4,8(r3)
     398:	100d883a 	mov	r6,r2
     39c:	d8800015 	stw	r2,0(sp)
     3a0:	00022e80 	call	22e8 <__vfprintf_internal>
     3a4:	dfc00117 	ldw	ra,4(sp)
     3a8:	dec00504 	addi	sp,sp,20
     3ac:	f800283a 	ret

000003b0 <_printf_r>:
     3b0:	defffc04 	addi	sp,sp,-16
     3b4:	dfc00115 	stw	ra,4(sp)
     3b8:	d9800215 	stw	r6,8(sp)
     3bc:	d9c00315 	stw	r7,12(sp)
     3c0:	280d883a 	mov	r6,r5
     3c4:	21400217 	ldw	r5,8(r4)
     3c8:	d8c00204 	addi	r3,sp,8
     3cc:	180f883a 	mov	r7,r3
     3d0:	d8c00015 	stw	r3,0(sp)
     3d4:	000043c0 	call	43c <___vfprintf_internal_r>
     3d8:	dfc00117 	ldw	ra,4(sp)
     3dc:	dec00404 	addi	sp,sp,16
     3e0:	f800283a 	ret

000003e4 <__sprint_r>:
     3e4:	30800217 	ldw	r2,8(r6)
     3e8:	defffe04 	addi	sp,sp,-8
     3ec:	dc000015 	stw	r16,0(sp)
     3f0:	dfc00115 	stw	ra,4(sp)
     3f4:	3021883a 	mov	r16,r6
     3f8:	0007883a 	mov	r3,zero
     3fc:	1000061e 	bne	r2,zero,418 <__sprint_r+0x34>
     400:	1805883a 	mov	r2,r3
     404:	30000115 	stw	zero,4(r6)
     408:	dfc00117 	ldw	ra,4(sp)
     40c:	dc000017 	ldw	r16,0(sp)
     410:	dec00204 	addi	sp,sp,8
     414:	f800283a 	ret
     418:	00045440 	call	4544 <__sfvwrite_r>
     41c:	1007883a 	mov	r3,r2
     420:	1805883a 	mov	r2,r3
     424:	80000115 	stw	zero,4(r16)
     428:	80000215 	stw	zero,8(r16)
     42c:	dfc00117 	ldw	ra,4(sp)
     430:	dc000017 	ldw	r16,0(sp)
     434:	dec00204 	addi	sp,sp,8
     438:	f800283a 	ret

0000043c <___vfprintf_internal_r>:
     43c:	defea404 	addi	sp,sp,-1392
     440:	dd815815 	stw	r22,1376(sp)
     444:	dc015215 	stw	r16,1352(sp)
     448:	d9c15115 	stw	r7,1348(sp)
     44c:	dfc15b15 	stw	ra,1388(sp)
     450:	df015a15 	stw	fp,1384(sp)
     454:	ddc15915 	stw	r23,1380(sp)
     458:	dd415715 	stw	r21,1372(sp)
     45c:	dd015615 	stw	r20,1368(sp)
     460:	dcc15515 	stw	r19,1364(sp)
     464:	dc815415 	stw	r18,1360(sp)
     468:	dc415315 	stw	r17,1356(sp)
     46c:	282d883a 	mov	r22,r5
     470:	3021883a 	mov	r16,r6
     474:	d9014f15 	stw	r4,1340(sp)
     478:	0004b680 	call	4b68 <_localeconv_r>
     47c:	10800017 	ldw	r2,0(r2)
     480:	d9c15117 	ldw	r7,1348(sp)
     484:	d8814915 	stw	r2,1316(sp)
     488:	d8814f17 	ldw	r2,1340(sp)
     48c:	10000226 	beq	r2,zero,498 <___vfprintf_internal_r+0x5c>
     490:	10800e17 	ldw	r2,56(r2)
     494:	10020d26 	beq	r2,zero,ccc <___vfprintf_internal_r+0x890>
     498:	b080030b 	ldhu	r2,12(r22)
     49c:	1080020c 	andi	r2,r2,8
     4a0:	10020e26 	beq	r2,zero,cdc <___vfprintf_internal_r+0x8a0>
     4a4:	b0800417 	ldw	r2,16(r22)
     4a8:	10020c26 	beq	r2,zero,cdc <___vfprintf_internal_r+0x8a0>
     4ac:	b200030b 	ldhu	r8,12(r22)
     4b0:	00800284 	movi	r2,10
     4b4:	40c0068c 	andi	r3,r8,26
     4b8:	18802f1e 	bne	r3,r2,578 <___vfprintf_internal_r+0x13c>
     4bc:	b080038f 	ldh	r2,14(r22)
     4c0:	10002d16 	blt	r2,zero,578 <___vfprintf_internal_r+0x13c>
     4c4:	b240038b 	ldhu	r9,14(r22)
     4c8:	b2800717 	ldw	r10,28(r22)
     4cc:	b2c00917 	ldw	r11,36(r22)
     4d0:	d9014f17 	ldw	r4,1340(sp)
     4d4:	dc402904 	addi	r17,sp,164
     4d8:	d8804004 	addi	r2,sp,256
     4dc:	00c10004 	movi	r3,1024
     4e0:	423fff4c 	andi	r8,r8,65533
     4e4:	800d883a 	mov	r6,r16
     4e8:	880b883a 	mov	r5,r17
     4ec:	da002c0d 	sth	r8,176(sp)
     4f0:	da402c8d 	sth	r9,178(sp)
     4f4:	da803015 	stw	r10,192(sp)
     4f8:	dac03215 	stw	r11,200(sp)
     4fc:	d8802d15 	stw	r2,180(sp)
     500:	d8c02e15 	stw	r3,184(sp)
     504:	d8802915 	stw	r2,164(sp)
     508:	d8c02b15 	stw	r3,172(sp)
     50c:	d8002f15 	stw	zero,188(sp)
     510:	000043c0 	call	43c <___vfprintf_internal_r>
     514:	d8814b15 	stw	r2,1324(sp)
     518:	10000416 	blt	r2,zero,52c <___vfprintf_internal_r+0xf0>
     51c:	d9014f17 	ldw	r4,1340(sp)
     520:	880b883a 	mov	r5,r17
     524:	0003c140 	call	3c14 <_fflush_r>
     528:	1002321e 	bne	r2,zero,df4 <___vfprintf_internal_r+0x9b8>
     52c:	d8802c0b 	ldhu	r2,176(sp)
     530:	1080100c 	andi	r2,r2,64
     534:	10000326 	beq	r2,zero,544 <___vfprintf_internal_r+0x108>
     538:	b080030b 	ldhu	r2,12(r22)
     53c:	10801014 	ori	r2,r2,64
     540:	b080030d 	sth	r2,12(r22)
     544:	d8814b17 	ldw	r2,1324(sp)
     548:	dfc15b17 	ldw	ra,1388(sp)
     54c:	df015a17 	ldw	fp,1384(sp)
     550:	ddc15917 	ldw	r23,1380(sp)
     554:	dd815817 	ldw	r22,1376(sp)
     558:	dd415717 	ldw	r21,1372(sp)
     55c:	dd015617 	ldw	r20,1368(sp)
     560:	dcc15517 	ldw	r19,1364(sp)
     564:	dc815417 	ldw	r18,1360(sp)
     568:	dc415317 	ldw	r17,1356(sp)
     56c:	dc015217 	ldw	r16,1352(sp)
     570:	dec15c04 	addi	sp,sp,1392
     574:	f800283a 	ret
     578:	0005883a 	mov	r2,zero
     57c:	0007883a 	mov	r3,zero
     580:	dd401904 	addi	r21,sp,100
     584:	d8814215 	stw	r2,1288(sp)
     588:	802f883a 	mov	r23,r16
     58c:	d8c14315 	stw	r3,1292(sp)
     590:	d8014b15 	stw	zero,1324(sp)
     594:	d8014815 	stw	zero,1312(sp)
     598:	d8014415 	stw	zero,1296(sp)
     59c:	d8014715 	stw	zero,1308(sp)
     5a0:	dd400c15 	stw	r21,48(sp)
     5a4:	d8000e15 	stw	zero,56(sp)
     5a8:	d8000d15 	stw	zero,52(sp)
     5ac:	b8800007 	ldb	r2,0(r23)
     5b0:	10001926 	beq	r2,zero,618 <___vfprintf_internal_r+0x1dc>
     5b4:	00c00944 	movi	r3,37
     5b8:	10c01726 	beq	r2,r3,618 <___vfprintf_internal_r+0x1dc>
     5bc:	b821883a 	mov	r16,r23
     5c0:	00000106 	br	5c8 <___vfprintf_internal_r+0x18c>
     5c4:	10c00326 	beq	r2,r3,5d4 <___vfprintf_internal_r+0x198>
     5c8:	84000044 	addi	r16,r16,1
     5cc:	80800007 	ldb	r2,0(r16)
     5d0:	103ffc1e 	bne	r2,zero,5c4 <___vfprintf_internal_r+0x188>
     5d4:	85e7c83a 	sub	r19,r16,r23
     5d8:	98000e26 	beq	r19,zero,614 <___vfprintf_internal_r+0x1d8>
     5dc:	dc800e17 	ldw	r18,56(sp)
     5e0:	dc400d17 	ldw	r17,52(sp)
     5e4:	008001c4 	movi	r2,7
     5e8:	94e5883a 	add	r18,r18,r19
     5ec:	8c400044 	addi	r17,r17,1
     5f0:	adc00015 	stw	r23,0(r21)
     5f4:	dc800e15 	stw	r18,56(sp)
     5f8:	acc00115 	stw	r19,4(r21)
     5fc:	dc400d15 	stw	r17,52(sp)
     600:	14428b16 	blt	r2,r17,1030 <___vfprintf_internal_r+0xbf4>
     604:	ad400204 	addi	r21,r21,8
     608:	d9014b17 	ldw	r4,1324(sp)
     60c:	24c9883a 	add	r4,r4,r19
     610:	d9014b15 	stw	r4,1324(sp)
     614:	802f883a 	mov	r23,r16
     618:	b8800007 	ldb	r2,0(r23)
     61c:	10013c26 	beq	r2,zero,b10 <___vfprintf_internal_r+0x6d4>
     620:	bdc00044 	addi	r23,r23,1
     624:	d8000405 	stb	zero,16(sp)
     628:	b8c00007 	ldb	r3,0(r23)
     62c:	04ffffc4 	movi	r19,-1
     630:	d8014c15 	stw	zero,1328(sp)
     634:	d8014a15 	stw	zero,1320(sp)
     638:	d8c14d15 	stw	r3,1332(sp)
     63c:	bdc00044 	addi	r23,r23,1
     640:	d9414d17 	ldw	r5,1332(sp)
     644:	00801604 	movi	r2,88
     648:	28fff804 	addi	r3,r5,-32
     64c:	10c06036 	bltu	r2,r3,7d0 <___vfprintf_internal_r+0x394>
     650:	18c5883a 	add	r2,r3,r3
     654:	1085883a 	add	r2,r2,r2
     658:	00c00034 	movhi	r3,0
     65c:	18c19b04 	addi	r3,r3,1644
     660:	10c5883a 	add	r2,r2,r3
     664:	11000017 	ldw	r4,0(r2)
     668:	2000683a 	jmp	r4
     66c:	000015e0 	cmpeqi	zero,zero,87
     670:	000007d0 	cmplti	zero,zero,31
     674:	000007d0 	cmplti	zero,zero,31
     678:	000015cc 	andi	zero,zero,87
     67c:	000007d0 	cmplti	zero,zero,31
     680:	000007d0 	cmplti	zero,zero,31
     684:	000007d0 	cmplti	zero,zero,31
     688:	000007d0 	cmplti	zero,zero,31
     68c:	000007d0 	cmplti	zero,zero,31
     690:	000007d0 	cmplti	zero,zero,31
     694:	000013ac 	andhi	zero,zero,78
     698:	000015bc 	xorhi	zero,zero,86
     69c:	000007d0 	cmplti	zero,zero,31
     6a0:	000013c4 	movi	zero,79
     6a4:	00001658 	cmpnei	zero,zero,89
     6a8:	000007d0 	cmplti	zero,zero,31
     6ac:	00001644 	movi	zero,89
     6b0:	0000160c 	andi	zero,zero,88
     6b4:	0000160c 	andi	zero,zero,88
     6b8:	0000160c 	andi	zero,zero,88
     6bc:	0000160c 	andi	zero,zero,88
     6c0:	0000160c 	andi	zero,zero,88
     6c4:	0000160c 	andi	zero,zero,88
     6c8:	0000160c 	andi	zero,zero,88
     6cc:	0000160c 	andi	zero,zero,88
     6d0:	0000160c 	andi	zero,zero,88
     6d4:	000007d0 	cmplti	zero,zero,31
     6d8:	000007d0 	cmplti	zero,zero,31
     6dc:	000007d0 	cmplti	zero,zero,31
     6e0:	000007d0 	cmplti	zero,zero,31
     6e4:	000007d0 	cmplti	zero,zero,31
     6e8:	000007d0 	cmplti	zero,zero,31
     6ec:	000007d0 	cmplti	zero,zero,31
     6f0:	000007d0 	cmplti	zero,zero,31
     6f4:	000007d0 	cmplti	zero,zero,31
     6f8:	000007d0 	cmplti	zero,zero,31
     6fc:	00000e28 	cmpgeui	zero,zero,56
     700:	00001494 	movui	zero,82
     704:	000007d0 	cmplti	zero,zero,31
     708:	00001494 	movui	zero,82
     70c:	000007d0 	cmplti	zero,zero,31
     710:	000007d0 	cmplti	zero,zero,31
     714:	000007d0 	cmplti	zero,zero,31
     718:	000007d0 	cmplti	zero,zero,31
     71c:	000015f8 	rdprs	zero,zero,87
     720:	000007d0 	cmplti	zero,zero,31
     724:	000007d0 	cmplti	zero,zero,31
     728:	00000edc 	xori	zero,zero,59
     72c:	000007d0 	cmplti	zero,zero,31
     730:	000007d0 	cmplti	zero,zero,31
     734:	000007d0 	cmplti	zero,zero,31
     738:	000007d0 	cmplti	zero,zero,31
     73c:	000007d0 	cmplti	zero,zero,31
     740:	00000f28 	cmpgeui	zero,zero,60
     744:	000007d0 	cmplti	zero,zero,31
     748:	000007d0 	cmplti	zero,zero,31
     74c:	00001548 	cmpgei	zero,zero,85
     750:	000007d0 	cmplti	zero,zero,31
     754:	000007d0 	cmplti	zero,zero,31
     758:	000007d0 	cmplti	zero,zero,31
     75c:	000007d0 	cmplti	zero,zero,31
     760:	000007d0 	cmplti	zero,zero,31
     764:	000007d0 	cmplti	zero,zero,31
     768:	000007d0 	cmplti	zero,zero,31
     76c:	000007d0 	cmplti	zero,zero,31
     770:	000007d0 	cmplti	zero,zero,31
     774:	000007d0 	cmplti	zero,zero,31
     778:	0000151c 	xori	zero,zero,84
     77c:	00000e34 	movhi	zero,56
     780:	00001494 	movui	zero,82
     784:	00001494 	movui	zero,82
     788:	00001494 	movui	zero,82
     78c:	00001480 	call	148 <alt_irq_handler+0x5c>
     790:	00000e34 	movhi	zero,56
     794:	000007d0 	cmplti	zero,zero,31
     798:	000007d0 	cmplti	zero,zero,31
     79c:	00001408 	cmpgei	zero,zero,80
     7a0:	000007d0 	cmplti	zero,zero,31
     7a4:	000013d8 	cmpnei	zero,zero,79
     7a8:	00000ee8 	cmpgeui	zero,zero,59
     7ac:	00001438 	rdprs	zero,zero,80
     7b0:	00001424 	muli	zero,zero,80
     7b4:	000007d0 	cmplti	zero,zero,31
     7b8:	000016b4 	movhi	zero,90
     7bc:	000007d0 	cmplti	zero,zero,31
     7c0:	00000f34 	movhi	zero,60
     7c4:	000007d0 	cmplti	zero,zero,31
     7c8:	000007d0 	cmplti	zero,zero,31
     7cc:	000015ac 	andhi	zero,zero,86
     7d0:	d9014d17 	ldw	r4,1332(sp)
     7d4:	2000ce26 	beq	r4,zero,b10 <___vfprintf_internal_r+0x6d4>
     7d8:	01400044 	movi	r5,1
     7dc:	d9800f04 	addi	r6,sp,60
     7e0:	d9c14015 	stw	r7,1280(sp)
     7e4:	d9414515 	stw	r5,1300(sp)
     7e8:	d9814115 	stw	r6,1284(sp)
     7ec:	280f883a 	mov	r7,r5
     7f0:	d9000f05 	stb	r4,60(sp)
     7f4:	d8000405 	stb	zero,16(sp)
     7f8:	d8014615 	stw	zero,1304(sp)
     7fc:	d8c14c17 	ldw	r3,1328(sp)
     800:	1880008c 	andi	r2,r3,2
     804:	1005003a 	cmpeq	r2,r2,zero
     808:	d8815015 	stw	r2,1344(sp)
     80c:	1000031e 	bne	r2,zero,81c <___vfprintf_internal_r+0x3e0>
     810:	d9014517 	ldw	r4,1300(sp)
     814:	21000084 	addi	r4,r4,2
     818:	d9014515 	stw	r4,1300(sp)
     81c:	d9414c17 	ldw	r5,1328(sp)
     820:	2940210c 	andi	r5,r5,132
     824:	d9414e15 	stw	r5,1336(sp)
     828:	28002d1e 	bne	r5,zero,8e0 <___vfprintf_internal_r+0x4a4>
     82c:	d9814a17 	ldw	r6,1320(sp)
     830:	d8814517 	ldw	r2,1300(sp)
     834:	30a1c83a 	sub	r16,r6,r2
     838:	0400290e 	bge	zero,r16,8e0 <___vfprintf_internal_r+0x4a4>
     83c:	00800404 	movi	r2,16
     840:	1404580e 	bge	r2,r16,19a4 <___vfprintf_internal_r+0x1568>
     844:	dc800e17 	ldw	r18,56(sp)
     848:	dc400d17 	ldw	r17,52(sp)
     84c:	1027883a 	mov	r19,r2
     850:	07000074 	movhi	fp,1
     854:	e7340384 	addi	fp,fp,-12274
     858:	050001c4 	movi	r20,7
     85c:	00000306 	br	86c <___vfprintf_internal_r+0x430>
     860:	843ffc04 	addi	r16,r16,-16
     864:	ad400204 	addi	r21,r21,8
     868:	9c00130e 	bge	r19,r16,8b8 <___vfprintf_internal_r+0x47c>
     86c:	94800404 	addi	r18,r18,16
     870:	8c400044 	addi	r17,r17,1
     874:	af000015 	stw	fp,0(r21)
     878:	acc00115 	stw	r19,4(r21)
     87c:	dc800e15 	stw	r18,56(sp)
     880:	dc400d15 	stw	r17,52(sp)
     884:	a47ff60e 	bge	r20,r17,860 <___vfprintf_internal_r+0x424>
     888:	d9014f17 	ldw	r4,1340(sp)
     88c:	b00b883a 	mov	r5,r22
     890:	d9800c04 	addi	r6,sp,48
     894:	d9c15115 	stw	r7,1348(sp)
     898:	00003e40 	call	3e4 <__sprint_r>
     89c:	d9c15117 	ldw	r7,1348(sp)
     8a0:	10009e1e 	bne	r2,zero,b1c <___vfprintf_internal_r+0x6e0>
     8a4:	843ffc04 	addi	r16,r16,-16
     8a8:	dc800e17 	ldw	r18,56(sp)
     8ac:	dc400d17 	ldw	r17,52(sp)
     8b0:	dd401904 	addi	r21,sp,100
     8b4:	9c3fed16 	blt	r19,r16,86c <___vfprintf_internal_r+0x430>
     8b8:	9425883a 	add	r18,r18,r16
     8bc:	8c400044 	addi	r17,r17,1
     8c0:	008001c4 	movi	r2,7
     8c4:	af000015 	stw	fp,0(r21)
     8c8:	ac000115 	stw	r16,4(r21)
     8cc:	dc800e15 	stw	r18,56(sp)
     8d0:	dc400d15 	stw	r17,52(sp)
     8d4:	1441f516 	blt	r2,r17,10ac <___vfprintf_internal_r+0xc70>
     8d8:	ad400204 	addi	r21,r21,8
     8dc:	00000206 	br	8e8 <___vfprintf_internal_r+0x4ac>
     8e0:	dc800e17 	ldw	r18,56(sp)
     8e4:	dc400d17 	ldw	r17,52(sp)
     8e8:	d8800407 	ldb	r2,16(sp)
     8ec:	10000b26 	beq	r2,zero,91c <___vfprintf_internal_r+0x4e0>
     8f0:	00800044 	movi	r2,1
     8f4:	94800044 	addi	r18,r18,1
     8f8:	8c400044 	addi	r17,r17,1
     8fc:	a8800115 	stw	r2,4(r21)
     900:	d8c00404 	addi	r3,sp,16
     904:	008001c4 	movi	r2,7
     908:	a8c00015 	stw	r3,0(r21)
     90c:	dc800e15 	stw	r18,56(sp)
     910:	dc400d15 	stw	r17,52(sp)
     914:	1441da16 	blt	r2,r17,1080 <___vfprintf_internal_r+0xc44>
     918:	ad400204 	addi	r21,r21,8
     91c:	d9015017 	ldw	r4,1344(sp)
     920:	20000b1e 	bne	r4,zero,950 <___vfprintf_internal_r+0x514>
     924:	d8800444 	addi	r2,sp,17
     928:	94800084 	addi	r18,r18,2
     92c:	8c400044 	addi	r17,r17,1
     930:	a8800015 	stw	r2,0(r21)
     934:	00c00084 	movi	r3,2
     938:	008001c4 	movi	r2,7
     93c:	a8c00115 	stw	r3,4(r21)
     940:	dc800e15 	stw	r18,56(sp)
     944:	dc400d15 	stw	r17,52(sp)
     948:	1441c216 	blt	r2,r17,1054 <___vfprintf_internal_r+0xc18>
     94c:	ad400204 	addi	r21,r21,8
     950:	d9414e17 	ldw	r5,1336(sp)
     954:	00802004 	movi	r2,128
     958:	2880b126 	beq	r5,r2,c20 <___vfprintf_internal_r+0x7e4>
     95c:	d8c14617 	ldw	r3,1304(sp)
     960:	19e1c83a 	sub	r16,r3,r7
     964:	0400260e 	bge	zero,r16,a00 <___vfprintf_internal_r+0x5c4>
     968:	00800404 	movi	r2,16
     96c:	1403c90e 	bge	r2,r16,1894 <___vfprintf_internal_r+0x1458>
     970:	1027883a 	mov	r19,r2
     974:	07000074 	movhi	fp,1
     978:	e733ff84 	addi	fp,fp,-12290
     97c:	050001c4 	movi	r20,7
     980:	00000306 	br	990 <___vfprintf_internal_r+0x554>
     984:	843ffc04 	addi	r16,r16,-16
     988:	ad400204 	addi	r21,r21,8
     98c:	9c00130e 	bge	r19,r16,9dc <___vfprintf_internal_r+0x5a0>
     990:	94800404 	addi	r18,r18,16
     994:	8c400044 	addi	r17,r17,1
     998:	af000015 	stw	fp,0(r21)
     99c:	acc00115 	stw	r19,4(r21)
     9a0:	dc800e15 	stw	r18,56(sp)
     9a4:	dc400d15 	stw	r17,52(sp)
     9a8:	a47ff60e 	bge	r20,r17,984 <___vfprintf_internal_r+0x548>
     9ac:	d9014f17 	ldw	r4,1340(sp)
     9b0:	b00b883a 	mov	r5,r22
     9b4:	d9800c04 	addi	r6,sp,48
     9b8:	d9c15115 	stw	r7,1348(sp)
     9bc:	00003e40 	call	3e4 <__sprint_r>
     9c0:	d9c15117 	ldw	r7,1348(sp)
     9c4:	1000551e 	bne	r2,zero,b1c <___vfprintf_internal_r+0x6e0>
     9c8:	843ffc04 	addi	r16,r16,-16
     9cc:	dc800e17 	ldw	r18,56(sp)
     9d0:	dc400d17 	ldw	r17,52(sp)
     9d4:	dd401904 	addi	r21,sp,100
     9d8:	9c3fed16 	blt	r19,r16,990 <___vfprintf_internal_r+0x554>
     9dc:	9425883a 	add	r18,r18,r16
     9e0:	8c400044 	addi	r17,r17,1
     9e4:	008001c4 	movi	r2,7
     9e8:	af000015 	stw	fp,0(r21)
     9ec:	ac000115 	stw	r16,4(r21)
     9f0:	dc800e15 	stw	r18,56(sp)
     9f4:	dc400d15 	stw	r17,52(sp)
     9f8:	14418216 	blt	r2,r17,1004 <___vfprintf_internal_r+0xbc8>
     9fc:	ad400204 	addi	r21,r21,8
     a00:	d9014c17 	ldw	r4,1328(sp)
     a04:	2080400c 	andi	r2,r4,256
     a08:	10004a1e 	bne	r2,zero,b34 <___vfprintf_internal_r+0x6f8>
     a0c:	d9414117 	ldw	r5,1284(sp)
     a10:	91e5883a 	add	r18,r18,r7
     a14:	8c400044 	addi	r17,r17,1
     a18:	008001c4 	movi	r2,7
     a1c:	a9400015 	stw	r5,0(r21)
     a20:	a9c00115 	stw	r7,4(r21)
     a24:	dc800e15 	stw	r18,56(sp)
     a28:	dc400d15 	stw	r17,52(sp)
     a2c:	14416716 	blt	r2,r17,fcc <___vfprintf_internal_r+0xb90>
     a30:	a8c00204 	addi	r3,r21,8
     a34:	d9814c17 	ldw	r6,1328(sp)
     a38:	3080010c 	andi	r2,r6,4
     a3c:	10002826 	beq	r2,zero,ae0 <___vfprintf_internal_r+0x6a4>
     a40:	d8814a17 	ldw	r2,1320(sp)
     a44:	d9014517 	ldw	r4,1300(sp)
     a48:	1121c83a 	sub	r16,r2,r4
     a4c:	0400240e 	bge	zero,r16,ae0 <___vfprintf_internal_r+0x6a4>
     a50:	00800404 	movi	r2,16
     a54:	14044f0e 	bge	r2,r16,1b94 <___vfprintf_internal_r+0x1758>
     a58:	dc400d17 	ldw	r17,52(sp)
     a5c:	1027883a 	mov	r19,r2
     a60:	07000074 	movhi	fp,1
     a64:	e7340384 	addi	fp,fp,-12274
     a68:	050001c4 	movi	r20,7
     a6c:	00000306 	br	a7c <___vfprintf_internal_r+0x640>
     a70:	843ffc04 	addi	r16,r16,-16
     a74:	18c00204 	addi	r3,r3,8
     a78:	9c00110e 	bge	r19,r16,ac0 <___vfprintf_internal_r+0x684>
     a7c:	94800404 	addi	r18,r18,16
     a80:	8c400044 	addi	r17,r17,1
     a84:	1f000015 	stw	fp,0(r3)
     a88:	1cc00115 	stw	r19,4(r3)
     a8c:	dc800e15 	stw	r18,56(sp)
     a90:	dc400d15 	stw	r17,52(sp)
     a94:	a47ff60e 	bge	r20,r17,a70 <___vfprintf_internal_r+0x634>
     a98:	d9014f17 	ldw	r4,1340(sp)
     a9c:	b00b883a 	mov	r5,r22
     aa0:	d9800c04 	addi	r6,sp,48
     aa4:	00003e40 	call	3e4 <__sprint_r>
     aa8:	10001c1e 	bne	r2,zero,b1c <___vfprintf_internal_r+0x6e0>
     aac:	843ffc04 	addi	r16,r16,-16
     ab0:	dc800e17 	ldw	r18,56(sp)
     ab4:	dc400d17 	ldw	r17,52(sp)
     ab8:	d8c01904 	addi	r3,sp,100
     abc:	9c3fef16 	blt	r19,r16,a7c <___vfprintf_internal_r+0x640>
     ac0:	9425883a 	add	r18,r18,r16
     ac4:	8c400044 	addi	r17,r17,1
     ac8:	008001c4 	movi	r2,7
     acc:	1f000015 	stw	fp,0(r3)
     ad0:	1c000115 	stw	r16,4(r3)
     ad4:	dc800e15 	stw	r18,56(sp)
     ad8:	dc400d15 	stw	r17,52(sp)
     adc:	1440cb16 	blt	r2,r17,e0c <___vfprintf_internal_r+0x9d0>
     ae0:	d8814a17 	ldw	r2,1320(sp)
     ae4:	d9414517 	ldw	r5,1300(sp)
     ae8:	1140010e 	bge	r2,r5,af0 <___vfprintf_internal_r+0x6b4>
     aec:	2805883a 	mov	r2,r5
     af0:	d9814b17 	ldw	r6,1324(sp)
     af4:	308d883a 	add	r6,r6,r2
     af8:	d9814b15 	stw	r6,1324(sp)
     afc:	90013b1e 	bne	r18,zero,fec <___vfprintf_internal_r+0xbb0>
     b00:	d9c14017 	ldw	r7,1280(sp)
     b04:	dd401904 	addi	r21,sp,100
     b08:	d8000d15 	stw	zero,52(sp)
     b0c:	003ea706 	br	5ac <___vfprintf_internal_r+0x170>
     b10:	d8800e17 	ldw	r2,56(sp)
     b14:	10053f1e 	bne	r2,zero,2014 <___vfprintf_internal_r+0x1bd8>
     b18:	d8000d15 	stw	zero,52(sp)
     b1c:	b080030b 	ldhu	r2,12(r22)
     b20:	1080100c 	andi	r2,r2,64
     b24:	103e8726 	beq	r2,zero,544 <___vfprintf_internal_r+0x108>
     b28:	00bfffc4 	movi	r2,-1
     b2c:	d8814b15 	stw	r2,1324(sp)
     b30:	003e8406 	br	544 <___vfprintf_internal_r+0x108>
     b34:	d9814d17 	ldw	r6,1332(sp)
     b38:	00801944 	movi	r2,101
     b3c:	11806e16 	blt	r2,r6,cf8 <___vfprintf_internal_r+0x8bc>
     b40:	d9414717 	ldw	r5,1308(sp)
     b44:	00c00044 	movi	r3,1
     b48:	1943430e 	bge	r3,r5,1858 <___vfprintf_internal_r+0x141c>
     b4c:	d8814117 	ldw	r2,1284(sp)
     b50:	94800044 	addi	r18,r18,1
     b54:	8c400044 	addi	r17,r17,1
     b58:	a8800015 	stw	r2,0(r21)
     b5c:	008001c4 	movi	r2,7
     b60:	a8c00115 	stw	r3,4(r21)
     b64:	dc800e15 	stw	r18,56(sp)
     b68:	dc400d15 	stw	r17,52(sp)
     b6c:	1441ca16 	blt	r2,r17,1298 <___vfprintf_internal_r+0xe5c>
     b70:	a8c00204 	addi	r3,r21,8
     b74:	d9014917 	ldw	r4,1316(sp)
     b78:	00800044 	movi	r2,1
     b7c:	94800044 	addi	r18,r18,1
     b80:	8c400044 	addi	r17,r17,1
     b84:	18800115 	stw	r2,4(r3)
     b88:	008001c4 	movi	r2,7
     b8c:	19000015 	stw	r4,0(r3)
     b90:	dc800e15 	stw	r18,56(sp)
     b94:	dc400d15 	stw	r17,52(sp)
     b98:	1441b616 	blt	r2,r17,1274 <___vfprintf_internal_r+0xe38>
     b9c:	1cc00204 	addi	r19,r3,8
     ba0:	d9014217 	ldw	r4,1288(sp)
     ba4:	d9414317 	ldw	r5,1292(sp)
     ba8:	000d883a 	mov	r6,zero
     bac:	000f883a 	mov	r7,zero
     bb0:	0008d000 	call	8d00 <__nedf2>
     bb4:	10017426 	beq	r2,zero,1188 <___vfprintf_internal_r+0xd4c>
     bb8:	d9414717 	ldw	r5,1308(sp)
     bbc:	d9814117 	ldw	r6,1284(sp)
     bc0:	8c400044 	addi	r17,r17,1
     bc4:	2c85883a 	add	r2,r5,r18
     bc8:	14bfffc4 	addi	r18,r2,-1
     bcc:	28bfffc4 	addi	r2,r5,-1
     bd0:	30c00044 	addi	r3,r6,1
     bd4:	98800115 	stw	r2,4(r19)
     bd8:	008001c4 	movi	r2,7
     bdc:	98c00015 	stw	r3,0(r19)
     be0:	dc800e15 	stw	r18,56(sp)
     be4:	dc400d15 	stw	r17,52(sp)
     be8:	14418e16 	blt	r2,r17,1224 <___vfprintf_internal_r+0xde8>
     bec:	9cc00204 	addi	r19,r19,8
     bf0:	d9414817 	ldw	r5,1312(sp)
     bf4:	d8800804 	addi	r2,sp,32
     bf8:	8c400044 	addi	r17,r17,1
     bfc:	9165883a 	add	r18,r18,r5
     c00:	98800015 	stw	r2,0(r19)
     c04:	008001c4 	movi	r2,7
     c08:	99400115 	stw	r5,4(r19)
     c0c:	dc800e15 	stw	r18,56(sp)
     c10:	dc400d15 	stw	r17,52(sp)
     c14:	1440ed16 	blt	r2,r17,fcc <___vfprintf_internal_r+0xb90>
     c18:	98c00204 	addi	r3,r19,8
     c1c:	003f8506 	br	a34 <___vfprintf_internal_r+0x5f8>
     c20:	d9814a17 	ldw	r6,1320(sp)
     c24:	d8814517 	ldw	r2,1300(sp)
     c28:	30a1c83a 	sub	r16,r6,r2
     c2c:	043f4b0e 	bge	zero,r16,95c <___vfprintf_internal_r+0x520>
     c30:	00800404 	movi	r2,16
     c34:	1404340e 	bge	r2,r16,1d08 <___vfprintf_internal_r+0x18cc>
     c38:	1027883a 	mov	r19,r2
     c3c:	07000074 	movhi	fp,1
     c40:	e733ff84 	addi	fp,fp,-12290
     c44:	050001c4 	movi	r20,7
     c48:	00000306 	br	c58 <___vfprintf_internal_r+0x81c>
     c4c:	843ffc04 	addi	r16,r16,-16
     c50:	ad400204 	addi	r21,r21,8
     c54:	9c00130e 	bge	r19,r16,ca4 <___vfprintf_internal_r+0x868>
     c58:	94800404 	addi	r18,r18,16
     c5c:	8c400044 	addi	r17,r17,1
     c60:	af000015 	stw	fp,0(r21)
     c64:	acc00115 	stw	r19,4(r21)
     c68:	dc800e15 	stw	r18,56(sp)
     c6c:	dc400d15 	stw	r17,52(sp)
     c70:	a47ff60e 	bge	r20,r17,c4c <___vfprintf_internal_r+0x810>
     c74:	d9014f17 	ldw	r4,1340(sp)
     c78:	b00b883a 	mov	r5,r22
     c7c:	d9800c04 	addi	r6,sp,48
     c80:	d9c15115 	stw	r7,1348(sp)
     c84:	00003e40 	call	3e4 <__sprint_r>
     c88:	d9c15117 	ldw	r7,1348(sp)
     c8c:	103fa31e 	bne	r2,zero,b1c <___vfprintf_internal_r+0x6e0>
     c90:	843ffc04 	addi	r16,r16,-16
     c94:	dc800e17 	ldw	r18,56(sp)
     c98:	dc400d17 	ldw	r17,52(sp)
     c9c:	dd401904 	addi	r21,sp,100
     ca0:	9c3fed16 	blt	r19,r16,c58 <___vfprintf_internal_r+0x81c>
     ca4:	9425883a 	add	r18,r18,r16
     ca8:	8c400044 	addi	r17,r17,1
     cac:	008001c4 	movi	r2,7
     cb0:	af000015 	stw	fp,0(r21)
     cb4:	ac000115 	stw	r16,4(r21)
     cb8:	dc800e15 	stw	r18,56(sp)
     cbc:	dc400d15 	stw	r17,52(sp)
     cc0:	14416116 	blt	r2,r17,1248 <___vfprintf_internal_r+0xe0c>
     cc4:	ad400204 	addi	r21,r21,8
     cc8:	003f2406 	br	95c <___vfprintf_internal_r+0x520>
     ccc:	d9014f17 	ldw	r4,1340(sp)
     cd0:	0003eac0 	call	3eac <__sinit>
     cd4:	d9c15117 	ldw	r7,1348(sp)
     cd8:	003def06 	br	498 <___vfprintf_internal_r+0x5c>
     cdc:	d9014f17 	ldw	r4,1340(sp)
     ce0:	b00b883a 	mov	r5,r22
     ce4:	d9c15115 	stw	r7,1348(sp)
     ce8:	000230c0 	call	230c <__swsetup_r>
     cec:	d9c15117 	ldw	r7,1348(sp)
     cf0:	103dee26 	beq	r2,zero,4ac <___vfprintf_internal_r+0x70>
     cf4:	003f8c06 	br	b28 <___vfprintf_internal_r+0x6ec>
     cf8:	d9014217 	ldw	r4,1288(sp)
     cfc:	d9414317 	ldw	r5,1292(sp)
     d00:	000d883a 	mov	r6,zero
     d04:	000f883a 	mov	r7,zero
     d08:	0008c780 	call	8c78 <__eqdf2>
     d0c:	1000f21e 	bne	r2,zero,10d8 <___vfprintf_internal_r+0xc9c>
     d10:	00800074 	movhi	r2,1
     d14:	10b3ff04 	addi	r2,r2,-12292
     d18:	94800044 	addi	r18,r18,1
     d1c:	8c400044 	addi	r17,r17,1
     d20:	a8800015 	stw	r2,0(r21)
     d24:	00c00044 	movi	r3,1
     d28:	008001c4 	movi	r2,7
     d2c:	a8c00115 	stw	r3,4(r21)
     d30:	dc800e15 	stw	r18,56(sp)
     d34:	dc400d15 	stw	r17,52(sp)
     d38:	1442fa16 	blt	r2,r17,1924 <___vfprintf_internal_r+0x14e8>
     d3c:	a8c00204 	addi	r3,r21,8
     d40:	d8800517 	ldw	r2,20(sp)
     d44:	d9014717 	ldw	r4,1308(sp)
     d48:	11015c0e 	bge	r2,r4,12bc <___vfprintf_internal_r+0xe80>
     d4c:	dc400d17 	ldw	r17,52(sp)
     d50:	d9814917 	ldw	r6,1316(sp)
     d54:	00800044 	movi	r2,1
     d58:	94800044 	addi	r18,r18,1
     d5c:	8c400044 	addi	r17,r17,1
     d60:	18800115 	stw	r2,4(r3)
     d64:	008001c4 	movi	r2,7
     d68:	19800015 	stw	r6,0(r3)
     d6c:	dc800e15 	stw	r18,56(sp)
     d70:	dc400d15 	stw	r17,52(sp)
     d74:	14431016 	blt	r2,r17,19b8 <___vfprintf_internal_r+0x157c>
     d78:	18c00204 	addi	r3,r3,8
     d7c:	d8814717 	ldw	r2,1308(sp)
     d80:	143fffc4 	addi	r16,r2,-1
     d84:	043f2b0e 	bge	zero,r16,a34 <___vfprintf_internal_r+0x5f8>
     d88:	00800404 	movi	r2,16
     d8c:	1402a20e 	bge	r2,r16,1818 <___vfprintf_internal_r+0x13dc>
     d90:	dc400d17 	ldw	r17,52(sp)
     d94:	1027883a 	mov	r19,r2
     d98:	07000074 	movhi	fp,1
     d9c:	e733ff84 	addi	fp,fp,-12290
     da0:	050001c4 	movi	r20,7
     da4:	00000306 	br	db4 <___vfprintf_internal_r+0x978>
     da8:	18c00204 	addi	r3,r3,8
     dac:	843ffc04 	addi	r16,r16,-16
     db0:	9c029c0e 	bge	r19,r16,1824 <___vfprintf_internal_r+0x13e8>
     db4:	94800404 	addi	r18,r18,16
     db8:	8c400044 	addi	r17,r17,1
     dbc:	1f000015 	stw	fp,0(r3)
     dc0:	1cc00115 	stw	r19,4(r3)
     dc4:	dc800e15 	stw	r18,56(sp)
     dc8:	dc400d15 	stw	r17,52(sp)
     dcc:	a47ff60e 	bge	r20,r17,da8 <___vfprintf_internal_r+0x96c>
     dd0:	d9014f17 	ldw	r4,1340(sp)
     dd4:	b00b883a 	mov	r5,r22
     dd8:	d9800c04 	addi	r6,sp,48
     ddc:	00003e40 	call	3e4 <__sprint_r>
     de0:	103f4e1e 	bne	r2,zero,b1c <___vfprintf_internal_r+0x6e0>
     de4:	dc800e17 	ldw	r18,56(sp)
     de8:	dc400d17 	ldw	r17,52(sp)
     dec:	d8c01904 	addi	r3,sp,100
     df0:	003fee06 	br	dac <___vfprintf_internal_r+0x970>
     df4:	d8802c0b 	ldhu	r2,176(sp)
     df8:	00ffffc4 	movi	r3,-1
     dfc:	d8c14b15 	stw	r3,1324(sp)
     e00:	1080100c 	andi	r2,r2,64
     e04:	103dcc1e 	bne	r2,zero,538 <___vfprintf_internal_r+0xfc>
     e08:	003dce06 	br	544 <___vfprintf_internal_r+0x108>
     e0c:	d9014f17 	ldw	r4,1340(sp)
     e10:	b00b883a 	mov	r5,r22
     e14:	d9800c04 	addi	r6,sp,48
     e18:	00003e40 	call	3e4 <__sprint_r>
     e1c:	103f3f1e 	bne	r2,zero,b1c <___vfprintf_internal_r+0x6e0>
     e20:	dc800e17 	ldw	r18,56(sp)
     e24:	003f2e06 	br	ae0 <___vfprintf_internal_r+0x6a4>
     e28:	d9414c17 	ldw	r5,1328(sp)
     e2c:	29400414 	ori	r5,r5,16
     e30:	d9414c15 	stw	r5,1328(sp)
     e34:	d9814c17 	ldw	r6,1328(sp)
     e38:	3080080c 	andi	r2,r6,32
     e3c:	10014f1e 	bne	r2,zero,137c <___vfprintf_internal_r+0xf40>
     e40:	d8c14c17 	ldw	r3,1328(sp)
     e44:	1880040c 	andi	r2,r3,16
     e48:	1002ea1e 	bne	r2,zero,19f4 <___vfprintf_internal_r+0x15b8>
     e4c:	d9014c17 	ldw	r4,1328(sp)
     e50:	2080100c 	andi	r2,r4,64
     e54:	1002e726 	beq	r2,zero,19f4 <___vfprintf_internal_r+0x15b8>
     e58:	3880000f 	ldh	r2,0(r7)
     e5c:	39c00104 	addi	r7,r7,4
     e60:	d9c14015 	stw	r7,1280(sp)
     e64:	1023d7fa 	srai	r17,r2,31
     e68:	1021883a 	mov	r16,r2
     e6c:	88037216 	blt	r17,zero,1c38 <___vfprintf_internal_r+0x17fc>
     e70:	01000044 	movi	r4,1
     e74:	98000416 	blt	r19,zero,e88 <___vfprintf_internal_r+0xa4c>
     e78:	d8c14c17 	ldw	r3,1328(sp)
     e7c:	00bfdfc4 	movi	r2,-129
     e80:	1886703a 	and	r3,r3,r2
     e84:	d8c14c15 	stw	r3,1328(sp)
     e88:	8444b03a 	or	r2,r16,r17
     e8c:	1002261e 	bne	r2,zero,1728 <___vfprintf_internal_r+0x12ec>
     e90:	9802251e 	bne	r19,zero,1728 <___vfprintf_internal_r+0x12ec>
     e94:	20803fcc 	andi	r2,r4,255
     e98:	10029b26 	beq	r2,zero,1908 <___vfprintf_internal_r+0x14cc>
     e9c:	d8c01904 	addi	r3,sp,100
     ea0:	dd000f04 	addi	r20,sp,60
     ea4:	d8c14115 	stw	r3,1284(sp)
     ea8:	d8c14117 	ldw	r3,1284(sp)
     eac:	dcc14515 	stw	r19,1300(sp)
     eb0:	a0c5c83a 	sub	r2,r20,r3
     eb4:	11c00a04 	addi	r7,r2,40
     eb8:	99c0010e 	bge	r19,r7,ec0 <___vfprintf_internal_r+0xa84>
     ebc:	d9c14515 	stw	r7,1300(sp)
     ec0:	dcc14615 	stw	r19,1304(sp)
     ec4:	d8800407 	ldb	r2,16(sp)
     ec8:	103e4c26 	beq	r2,zero,7fc <___vfprintf_internal_r+0x3c0>
     ecc:	d8814517 	ldw	r2,1300(sp)
     ed0:	10800044 	addi	r2,r2,1
     ed4:	d8814515 	stw	r2,1300(sp)
     ed8:	003e4806 	br	7fc <___vfprintf_internal_r+0x3c0>
     edc:	d9814c17 	ldw	r6,1328(sp)
     ee0:	31800414 	ori	r6,r6,16
     ee4:	d9814c15 	stw	r6,1328(sp)
     ee8:	d8c14c17 	ldw	r3,1328(sp)
     eec:	1880080c 	andi	r2,r3,32
     ef0:	1001271e 	bne	r2,zero,1390 <___vfprintf_internal_r+0xf54>
     ef4:	d9414c17 	ldw	r5,1328(sp)
     ef8:	2880040c 	andi	r2,r5,16
     efc:	1002b61e 	bne	r2,zero,19d8 <___vfprintf_internal_r+0x159c>
     f00:	d9814c17 	ldw	r6,1328(sp)
     f04:	3080100c 	andi	r2,r6,64
     f08:	1002b326 	beq	r2,zero,19d8 <___vfprintf_internal_r+0x159c>
     f0c:	3c00000b 	ldhu	r16,0(r7)
     f10:	0009883a 	mov	r4,zero
     f14:	39c00104 	addi	r7,r7,4
     f18:	0023883a 	mov	r17,zero
     f1c:	d9c14015 	stw	r7,1280(sp)
     f20:	d8000405 	stb	zero,16(sp)
     f24:	003fd306 	br	e74 <___vfprintf_internal_r+0xa38>
     f28:	d9014c17 	ldw	r4,1328(sp)
     f2c:	21000414 	ori	r4,r4,16
     f30:	d9014c15 	stw	r4,1328(sp)
     f34:	d9414c17 	ldw	r5,1328(sp)
     f38:	2880080c 	andi	r2,r5,32
     f3c:	1001081e 	bne	r2,zero,1360 <___vfprintf_internal_r+0xf24>
     f40:	d8c14c17 	ldw	r3,1328(sp)
     f44:	1880040c 	andi	r2,r3,16
     f48:	1002b01e 	bne	r2,zero,1a0c <___vfprintf_internal_r+0x15d0>
     f4c:	d9014c17 	ldw	r4,1328(sp)
     f50:	2080100c 	andi	r2,r4,64
     f54:	1002ad26 	beq	r2,zero,1a0c <___vfprintf_internal_r+0x15d0>
     f58:	3c00000b 	ldhu	r16,0(r7)
     f5c:	01000044 	movi	r4,1
     f60:	39c00104 	addi	r7,r7,4
     f64:	0023883a 	mov	r17,zero
     f68:	d9c14015 	stw	r7,1280(sp)
     f6c:	d8000405 	stb	zero,16(sp)
     f70:	003fc006 	br	e74 <___vfprintf_internal_r+0xa38>
     f74:	d9014f17 	ldw	r4,1340(sp)
     f78:	b00b883a 	mov	r5,r22
     f7c:	d9800c04 	addi	r6,sp,48
     f80:	00003e40 	call	3e4 <__sprint_r>
     f84:	103ee51e 	bne	r2,zero,b1c <___vfprintf_internal_r+0x6e0>
     f88:	dc800e17 	ldw	r18,56(sp)
     f8c:	d8c01904 	addi	r3,sp,100
     f90:	d9814c17 	ldw	r6,1328(sp)
     f94:	3080004c 	andi	r2,r6,1
     f98:	1005003a 	cmpeq	r2,r2,zero
     f9c:	103ea51e 	bne	r2,zero,a34 <___vfprintf_internal_r+0x5f8>
     fa0:	00800044 	movi	r2,1
     fa4:	dc400d17 	ldw	r17,52(sp)
     fa8:	18800115 	stw	r2,4(r3)
     fac:	d8814917 	ldw	r2,1316(sp)
     fb0:	94800044 	addi	r18,r18,1
     fb4:	8c400044 	addi	r17,r17,1
     fb8:	18800015 	stw	r2,0(r3)
     fbc:	008001c4 	movi	r2,7
     fc0:	dc800e15 	stw	r18,56(sp)
     fc4:	dc400d15 	stw	r17,52(sp)
     fc8:	14421e0e 	bge	r2,r17,1844 <___vfprintf_internal_r+0x1408>
     fcc:	d9014f17 	ldw	r4,1340(sp)
     fd0:	b00b883a 	mov	r5,r22
     fd4:	d9800c04 	addi	r6,sp,48
     fd8:	00003e40 	call	3e4 <__sprint_r>
     fdc:	103ecf1e 	bne	r2,zero,b1c <___vfprintf_internal_r+0x6e0>
     fe0:	dc800e17 	ldw	r18,56(sp)
     fe4:	d8c01904 	addi	r3,sp,100
     fe8:	003e9206 	br	a34 <___vfprintf_internal_r+0x5f8>
     fec:	d9014f17 	ldw	r4,1340(sp)
     ff0:	b00b883a 	mov	r5,r22
     ff4:	d9800c04 	addi	r6,sp,48
     ff8:	00003e40 	call	3e4 <__sprint_r>
     ffc:	103ec026 	beq	r2,zero,b00 <___vfprintf_internal_r+0x6c4>
    1000:	003ec606 	br	b1c <___vfprintf_internal_r+0x6e0>
    1004:	d9014f17 	ldw	r4,1340(sp)
    1008:	b00b883a 	mov	r5,r22
    100c:	d9800c04 	addi	r6,sp,48
    1010:	d9c15115 	stw	r7,1348(sp)
    1014:	00003e40 	call	3e4 <__sprint_r>
    1018:	d9c15117 	ldw	r7,1348(sp)
    101c:	103ebf1e 	bne	r2,zero,b1c <___vfprintf_internal_r+0x6e0>
    1020:	dc800e17 	ldw	r18,56(sp)
    1024:	dc400d17 	ldw	r17,52(sp)
    1028:	dd401904 	addi	r21,sp,100
    102c:	003e7406 	br	a00 <___vfprintf_internal_r+0x5c4>
    1030:	d9014f17 	ldw	r4,1340(sp)
    1034:	b00b883a 	mov	r5,r22
    1038:	d9800c04 	addi	r6,sp,48
    103c:	d9c15115 	stw	r7,1348(sp)
    1040:	00003e40 	call	3e4 <__sprint_r>
    1044:	d9c15117 	ldw	r7,1348(sp)
    1048:	103eb41e 	bne	r2,zero,b1c <___vfprintf_internal_r+0x6e0>
    104c:	dd401904 	addi	r21,sp,100
    1050:	003d6d06 	br	608 <___vfprintf_internal_r+0x1cc>
    1054:	d9014f17 	ldw	r4,1340(sp)
    1058:	b00b883a 	mov	r5,r22
    105c:	d9800c04 	addi	r6,sp,48
    1060:	d9c15115 	stw	r7,1348(sp)
    1064:	00003e40 	call	3e4 <__sprint_r>
    1068:	d9c15117 	ldw	r7,1348(sp)
    106c:	103eab1e 	bne	r2,zero,b1c <___vfprintf_internal_r+0x6e0>
    1070:	dc800e17 	ldw	r18,56(sp)
    1074:	dc400d17 	ldw	r17,52(sp)
    1078:	dd401904 	addi	r21,sp,100
    107c:	003e3406 	br	950 <___vfprintf_internal_r+0x514>
    1080:	d9014f17 	ldw	r4,1340(sp)
    1084:	b00b883a 	mov	r5,r22
    1088:	d9800c04 	addi	r6,sp,48
    108c:	d9c15115 	stw	r7,1348(sp)
    1090:	00003e40 	call	3e4 <__sprint_r>
    1094:	d9c15117 	ldw	r7,1348(sp)
    1098:	103ea01e 	bne	r2,zero,b1c <___vfprintf_internal_r+0x6e0>
    109c:	dc800e17 	ldw	r18,56(sp)
    10a0:	dc400d17 	ldw	r17,52(sp)
    10a4:	dd401904 	addi	r21,sp,100
    10a8:	003e1c06 	br	91c <___vfprintf_internal_r+0x4e0>
    10ac:	d9014f17 	ldw	r4,1340(sp)
    10b0:	b00b883a 	mov	r5,r22
    10b4:	d9800c04 	addi	r6,sp,48
    10b8:	d9c15115 	stw	r7,1348(sp)
    10bc:	00003e40 	call	3e4 <__sprint_r>
    10c0:	d9c15117 	ldw	r7,1348(sp)
    10c4:	103e951e 	bne	r2,zero,b1c <___vfprintf_internal_r+0x6e0>
    10c8:	dc800e17 	ldw	r18,56(sp)
    10cc:	dc400d17 	ldw	r17,52(sp)
    10d0:	dd401904 	addi	r21,sp,100
    10d4:	003e0406 	br	8e8 <___vfprintf_internal_r+0x4ac>
    10d8:	d9000517 	ldw	r4,20(sp)
    10dc:	0102520e 	bge	zero,r4,1a28 <___vfprintf_internal_r+0x15ec>
    10e0:	d9814717 	ldw	r6,1308(sp)
    10e4:	21807a16 	blt	r4,r6,12d0 <___vfprintf_internal_r+0xe94>
    10e8:	d8814117 	ldw	r2,1284(sp)
    10ec:	91a5883a 	add	r18,r18,r6
    10f0:	8c400044 	addi	r17,r17,1
    10f4:	a8800015 	stw	r2,0(r21)
    10f8:	008001c4 	movi	r2,7
    10fc:	a9800115 	stw	r6,4(r21)
    1100:	dc800e15 	stw	r18,56(sp)
    1104:	dc400d15 	stw	r17,52(sp)
    1108:	1442f616 	blt	r2,r17,1ce4 <___vfprintf_internal_r+0x18a8>
    110c:	a8c00204 	addi	r3,r21,8
    1110:	d9414717 	ldw	r5,1308(sp)
    1114:	2161c83a 	sub	r16,r4,r5
    1118:	043f9d0e 	bge	zero,r16,f90 <___vfprintf_internal_r+0xb54>
    111c:	00800404 	movi	r2,16
    1120:	1402130e 	bge	r2,r16,1970 <___vfprintf_internal_r+0x1534>
    1124:	dc400d17 	ldw	r17,52(sp)
    1128:	1027883a 	mov	r19,r2
    112c:	07000074 	movhi	fp,1
    1130:	e733ff84 	addi	fp,fp,-12290
    1134:	050001c4 	movi	r20,7
    1138:	00000306 	br	1148 <___vfprintf_internal_r+0xd0c>
    113c:	18c00204 	addi	r3,r3,8
    1140:	843ffc04 	addi	r16,r16,-16
    1144:	9c020d0e 	bge	r19,r16,197c <___vfprintf_internal_r+0x1540>
    1148:	94800404 	addi	r18,r18,16
    114c:	8c400044 	addi	r17,r17,1
    1150:	1f000015 	stw	fp,0(r3)
    1154:	1cc00115 	stw	r19,4(r3)
    1158:	dc800e15 	stw	r18,56(sp)
    115c:	dc400d15 	stw	r17,52(sp)
    1160:	a47ff60e 	bge	r20,r17,113c <___vfprintf_internal_r+0xd00>
    1164:	d9014f17 	ldw	r4,1340(sp)
    1168:	b00b883a 	mov	r5,r22
    116c:	d9800c04 	addi	r6,sp,48
    1170:	00003e40 	call	3e4 <__sprint_r>
    1174:	103e691e 	bne	r2,zero,b1c <___vfprintf_internal_r+0x6e0>
    1178:	dc800e17 	ldw	r18,56(sp)
    117c:	dc400d17 	ldw	r17,52(sp)
    1180:	d8c01904 	addi	r3,sp,100
    1184:	003fee06 	br	1140 <___vfprintf_internal_r+0xd04>
    1188:	d8814717 	ldw	r2,1308(sp)
    118c:	143fffc4 	addi	r16,r2,-1
    1190:	043e970e 	bge	zero,r16,bf0 <___vfprintf_internal_r+0x7b4>
    1194:	00800404 	movi	r2,16
    1198:	1400180e 	bge	r2,r16,11fc <___vfprintf_internal_r+0xdc0>
    119c:	1029883a 	mov	r20,r2
    11a0:	07000074 	movhi	fp,1
    11a4:	e733ff84 	addi	fp,fp,-12290
    11a8:	054001c4 	movi	r21,7
    11ac:	00000306 	br	11bc <___vfprintf_internal_r+0xd80>
    11b0:	9cc00204 	addi	r19,r19,8
    11b4:	843ffc04 	addi	r16,r16,-16
    11b8:	a400120e 	bge	r20,r16,1204 <___vfprintf_internal_r+0xdc8>
    11bc:	94800404 	addi	r18,r18,16
    11c0:	8c400044 	addi	r17,r17,1
    11c4:	9f000015 	stw	fp,0(r19)
    11c8:	9d000115 	stw	r20,4(r19)
    11cc:	dc800e15 	stw	r18,56(sp)
    11d0:	dc400d15 	stw	r17,52(sp)
    11d4:	ac7ff60e 	bge	r21,r17,11b0 <___vfprintf_internal_r+0xd74>
    11d8:	d9014f17 	ldw	r4,1340(sp)
    11dc:	b00b883a 	mov	r5,r22
    11e0:	d9800c04 	addi	r6,sp,48
    11e4:	00003e40 	call	3e4 <__sprint_r>
    11e8:	103e4c1e 	bne	r2,zero,b1c <___vfprintf_internal_r+0x6e0>
    11ec:	dc800e17 	ldw	r18,56(sp)
    11f0:	dc400d17 	ldw	r17,52(sp)
    11f4:	dcc01904 	addi	r19,sp,100
    11f8:	003fee06 	br	11b4 <___vfprintf_internal_r+0xd78>
    11fc:	07000074 	movhi	fp,1
    1200:	e733ff84 	addi	fp,fp,-12290
    1204:	9425883a 	add	r18,r18,r16
    1208:	8c400044 	addi	r17,r17,1
    120c:	008001c4 	movi	r2,7
    1210:	9f000015 	stw	fp,0(r19)
    1214:	9c000115 	stw	r16,4(r19)
    1218:	dc800e15 	stw	r18,56(sp)
    121c:	dc400d15 	stw	r17,52(sp)
    1220:	147e720e 	bge	r2,r17,bec <___vfprintf_internal_r+0x7b0>
    1224:	d9014f17 	ldw	r4,1340(sp)
    1228:	b00b883a 	mov	r5,r22
    122c:	d9800c04 	addi	r6,sp,48
    1230:	00003e40 	call	3e4 <__sprint_r>
    1234:	103e391e 	bne	r2,zero,b1c <___vfprintf_internal_r+0x6e0>
    1238:	dc800e17 	ldw	r18,56(sp)
    123c:	dc400d17 	ldw	r17,52(sp)
    1240:	dcc01904 	addi	r19,sp,100
    1244:	003e6a06 	br	bf0 <___vfprintf_internal_r+0x7b4>
    1248:	d9014f17 	ldw	r4,1340(sp)
    124c:	b00b883a 	mov	r5,r22
    1250:	d9800c04 	addi	r6,sp,48
    1254:	d9c15115 	stw	r7,1348(sp)
    1258:	00003e40 	call	3e4 <__sprint_r>
    125c:	d9c15117 	ldw	r7,1348(sp)
    1260:	103e2e1e 	bne	r2,zero,b1c <___vfprintf_internal_r+0x6e0>
    1264:	dc800e17 	ldw	r18,56(sp)
    1268:	dc400d17 	ldw	r17,52(sp)
    126c:	dd401904 	addi	r21,sp,100
    1270:	003dba06 	br	95c <___vfprintf_internal_r+0x520>
    1274:	d9014f17 	ldw	r4,1340(sp)
    1278:	b00b883a 	mov	r5,r22
    127c:	d9800c04 	addi	r6,sp,48
    1280:	00003e40 	call	3e4 <__sprint_r>
    1284:	103e251e 	bne	r2,zero,b1c <___vfprintf_internal_r+0x6e0>
    1288:	dc800e17 	ldw	r18,56(sp)
    128c:	dc400d17 	ldw	r17,52(sp)
    1290:	dcc01904 	addi	r19,sp,100
    1294:	003e4206 	br	ba0 <___vfprintf_internal_r+0x764>
    1298:	d9014f17 	ldw	r4,1340(sp)
    129c:	b00b883a 	mov	r5,r22
    12a0:	d9800c04 	addi	r6,sp,48
    12a4:	00003e40 	call	3e4 <__sprint_r>
    12a8:	103e1c1e 	bne	r2,zero,b1c <___vfprintf_internal_r+0x6e0>
    12ac:	dc800e17 	ldw	r18,56(sp)
    12b0:	dc400d17 	ldw	r17,52(sp)
    12b4:	d8c01904 	addi	r3,sp,100
    12b8:	003e2e06 	br	b74 <___vfprintf_internal_r+0x738>
    12bc:	d9414c17 	ldw	r5,1328(sp)
    12c0:	2880004c 	andi	r2,r5,1
    12c4:	1005003a 	cmpeq	r2,r2,zero
    12c8:	103dda1e 	bne	r2,zero,a34 <___vfprintf_internal_r+0x5f8>
    12cc:	003e9f06 	br	d4c <___vfprintf_internal_r+0x910>
    12d0:	d8c14117 	ldw	r3,1284(sp)
    12d4:	9125883a 	add	r18,r18,r4
    12d8:	8c400044 	addi	r17,r17,1
    12dc:	008001c4 	movi	r2,7
    12e0:	a8c00015 	stw	r3,0(r21)
    12e4:	a9000115 	stw	r4,4(r21)
    12e8:	dc800e15 	stw	r18,56(sp)
    12ec:	dc400d15 	stw	r17,52(sp)
    12f0:	14426616 	blt	r2,r17,1c8c <___vfprintf_internal_r+0x1850>
    12f4:	a8c00204 	addi	r3,r21,8
    12f8:	d9414917 	ldw	r5,1316(sp)
    12fc:	00800044 	movi	r2,1
    1300:	94800044 	addi	r18,r18,1
    1304:	8c400044 	addi	r17,r17,1
    1308:	18800115 	stw	r2,4(r3)
    130c:	008001c4 	movi	r2,7
    1310:	19400015 	stw	r5,0(r3)
    1314:	dc800e15 	stw	r18,56(sp)
    1318:	dc400d15 	stw	r17,52(sp)
    131c:	2021883a 	mov	r16,r4
    1320:	14425016 	blt	r2,r17,1c64 <___vfprintf_internal_r+0x1828>
    1324:	19400204 	addi	r5,r3,8
    1328:	d9814717 	ldw	r6,1308(sp)
    132c:	8c400044 	addi	r17,r17,1
    1330:	dc400d15 	stw	r17,52(sp)
    1334:	3107c83a 	sub	r3,r6,r4
    1338:	d9014117 	ldw	r4,1284(sp)
    133c:	90e5883a 	add	r18,r18,r3
    1340:	28c00115 	stw	r3,4(r5)
    1344:	8105883a 	add	r2,r16,r4
    1348:	28800015 	stw	r2,0(r5)
    134c:	008001c4 	movi	r2,7
    1350:	dc800e15 	stw	r18,56(sp)
    1354:	147f1d16 	blt	r2,r17,fcc <___vfprintf_internal_r+0xb90>
    1358:	28c00204 	addi	r3,r5,8
    135c:	003db506 	br	a34 <___vfprintf_internal_r+0x5f8>
    1360:	3c000017 	ldw	r16,0(r7)
    1364:	3c400117 	ldw	r17,4(r7)
    1368:	39800204 	addi	r6,r7,8
    136c:	01000044 	movi	r4,1
    1370:	d9814015 	stw	r6,1280(sp)
    1374:	d8000405 	stb	zero,16(sp)
    1378:	003ebe06 	br	e74 <___vfprintf_internal_r+0xa38>
    137c:	3c000017 	ldw	r16,0(r7)
    1380:	3c400117 	ldw	r17,4(r7)
    1384:	38800204 	addi	r2,r7,8
    1388:	d8814015 	stw	r2,1280(sp)
    138c:	003eb706 	br	e6c <___vfprintf_internal_r+0xa30>
    1390:	3c000017 	ldw	r16,0(r7)
    1394:	3c400117 	ldw	r17,4(r7)
    1398:	39000204 	addi	r4,r7,8
    139c:	d9014015 	stw	r4,1280(sp)
    13a0:	0009883a 	mov	r4,zero
    13a4:	d8000405 	stb	zero,16(sp)
    13a8:	003eb206 	br	e74 <___vfprintf_internal_r+0xa38>
    13ac:	38c00017 	ldw	r3,0(r7)
    13b0:	39c00104 	addi	r7,r7,4
    13b4:	d8c14a15 	stw	r3,1320(sp)
    13b8:	1800d10e 	bge	r3,zero,1700 <___vfprintf_internal_r+0x12c4>
    13bc:	00c7c83a 	sub	r3,zero,r3
    13c0:	d8c14a15 	stw	r3,1320(sp)
    13c4:	d9014c17 	ldw	r4,1328(sp)
    13c8:	b8c00007 	ldb	r3,0(r23)
    13cc:	21000114 	ori	r4,r4,4
    13d0:	d9014c15 	stw	r4,1328(sp)
    13d4:	003c9806 	br	638 <___vfprintf_internal_r+0x1fc>
    13d8:	d9814c17 	ldw	r6,1328(sp)
    13dc:	3080080c 	andi	r2,r6,32
    13e0:	1001f026 	beq	r2,zero,1ba4 <___vfprintf_internal_r+0x1768>
    13e4:	d9014b17 	ldw	r4,1324(sp)
    13e8:	38800017 	ldw	r2,0(r7)
    13ec:	39c00104 	addi	r7,r7,4
    13f0:	d9c14015 	stw	r7,1280(sp)
    13f4:	2007d7fa 	srai	r3,r4,31
    13f8:	d9c14017 	ldw	r7,1280(sp)
    13fc:	11000015 	stw	r4,0(r2)
    1400:	10c00115 	stw	r3,4(r2)
    1404:	003c6906 	br	5ac <___vfprintf_internal_r+0x170>
    1408:	b8c00007 	ldb	r3,0(r23)
    140c:	00801b04 	movi	r2,108
    1410:	18824f26 	beq	r3,r2,1d50 <___vfprintf_internal_r+0x1914>
    1414:	d9414c17 	ldw	r5,1328(sp)
    1418:	29400414 	ori	r5,r5,16
    141c:	d9414c15 	stw	r5,1328(sp)
    1420:	003c8506 	br	638 <___vfprintf_internal_r+0x1fc>
    1424:	d9814c17 	ldw	r6,1328(sp)
    1428:	b8c00007 	ldb	r3,0(r23)
    142c:	31800814 	ori	r6,r6,32
    1430:	d9814c15 	stw	r6,1328(sp)
    1434:	003c8006 	br	638 <___vfprintf_internal_r+0x1fc>
    1438:	d8814c17 	ldw	r2,1328(sp)
    143c:	3c000017 	ldw	r16,0(r7)
    1440:	00c01e04 	movi	r3,120
    1444:	10800094 	ori	r2,r2,2
    1448:	d8814c15 	stw	r2,1328(sp)
    144c:	39c00104 	addi	r7,r7,4
    1450:	01400074 	movhi	r5,1
    1454:	2973e804 	addi	r5,r5,-12384
    1458:	00800c04 	movi	r2,48
    145c:	0023883a 	mov	r17,zero
    1460:	01000084 	movi	r4,2
    1464:	d9c14015 	stw	r7,1280(sp)
    1468:	d8c14d15 	stw	r3,1332(sp)
    146c:	d9414415 	stw	r5,1296(sp)
    1470:	d8800445 	stb	r2,17(sp)
    1474:	d8c00485 	stb	r3,18(sp)
    1478:	d8000405 	stb	zero,16(sp)
    147c:	003e7d06 	br	e74 <___vfprintf_internal_r+0xa38>
    1480:	d8814c17 	ldw	r2,1328(sp)
    1484:	b8c00007 	ldb	r3,0(r23)
    1488:	10801014 	ori	r2,r2,64
    148c:	d8814c15 	stw	r2,1328(sp)
    1490:	003c6906 	br	638 <___vfprintf_internal_r+0x1fc>
    1494:	d9414c17 	ldw	r5,1328(sp)
    1498:	2880020c 	andi	r2,r5,8
    149c:	1001df26 	beq	r2,zero,1c1c <___vfprintf_internal_r+0x17e0>
    14a0:	39800017 	ldw	r6,0(r7)
    14a4:	38800204 	addi	r2,r7,8
    14a8:	d8814015 	stw	r2,1280(sp)
    14ac:	d9814215 	stw	r6,1288(sp)
    14b0:	39c00117 	ldw	r7,4(r7)
    14b4:	d9c14315 	stw	r7,1292(sp)
    14b8:	d9014217 	ldw	r4,1288(sp)
    14bc:	d9414317 	ldw	r5,1292(sp)
    14c0:	0006ddc0 	call	6ddc <__isinfd>
    14c4:	10021726 	beq	r2,zero,1d24 <___vfprintf_internal_r+0x18e8>
    14c8:	d9014217 	ldw	r4,1288(sp)
    14cc:	d9414317 	ldw	r5,1292(sp)
    14d0:	000d883a 	mov	r6,zero
    14d4:	000f883a 	mov	r7,zero
    14d8:	0008e980 	call	8e98 <__ltdf2>
    14dc:	1002ca16 	blt	r2,zero,2008 <___vfprintf_internal_r+0x1bcc>
    14e0:	d9414d17 	ldw	r5,1332(sp)
    14e4:	008011c4 	movi	r2,71
    14e8:	11420a16 	blt	r2,r5,1d14 <___vfprintf_internal_r+0x18d8>
    14ec:	01800074 	movhi	r6,1
    14f0:	31b3ed04 	addi	r6,r6,-12364
    14f4:	d9814115 	stw	r6,1284(sp)
    14f8:	d9014c17 	ldw	r4,1328(sp)
    14fc:	00c000c4 	movi	r3,3
    1500:	00bfdfc4 	movi	r2,-129
    1504:	2088703a 	and	r4,r4,r2
    1508:	180f883a 	mov	r7,r3
    150c:	d8c14515 	stw	r3,1300(sp)
    1510:	d9014c15 	stw	r4,1328(sp)
    1514:	d8014615 	stw	zero,1304(sp)
    1518:	003e6a06 	br	ec4 <___vfprintf_internal_r+0xa88>
    151c:	38800017 	ldw	r2,0(r7)
    1520:	00c00044 	movi	r3,1
    1524:	39c00104 	addi	r7,r7,4
    1528:	d9c14015 	stw	r7,1280(sp)
    152c:	d9000f04 	addi	r4,sp,60
    1530:	180f883a 	mov	r7,r3
    1534:	d8c14515 	stw	r3,1300(sp)
    1538:	d9014115 	stw	r4,1284(sp)
    153c:	d8800f05 	stb	r2,60(sp)
    1540:	d8000405 	stb	zero,16(sp)
    1544:	003cac06 	br	7f8 <___vfprintf_internal_r+0x3bc>
    1548:	01400074 	movhi	r5,1
    154c:	2973f304 	addi	r5,r5,-12340
    1550:	d9414415 	stw	r5,1296(sp)
    1554:	d9814c17 	ldw	r6,1328(sp)
    1558:	3080080c 	andi	r2,r6,32
    155c:	1000f926 	beq	r2,zero,1944 <___vfprintf_internal_r+0x1508>
    1560:	3c000017 	ldw	r16,0(r7)
    1564:	3c400117 	ldw	r17,4(r7)
    1568:	38800204 	addi	r2,r7,8
    156c:	d8814015 	stw	r2,1280(sp)
    1570:	d9414c17 	ldw	r5,1328(sp)
    1574:	2880004c 	andi	r2,r5,1
    1578:	1005003a 	cmpeq	r2,r2,zero
    157c:	1000b31e 	bne	r2,zero,184c <___vfprintf_internal_r+0x1410>
    1580:	8444b03a 	or	r2,r16,r17
    1584:	1000b126 	beq	r2,zero,184c <___vfprintf_internal_r+0x1410>
    1588:	d9814d17 	ldw	r6,1332(sp)
    158c:	29400094 	ori	r5,r5,2
    1590:	00800c04 	movi	r2,48
    1594:	01000084 	movi	r4,2
    1598:	d9414c15 	stw	r5,1328(sp)
    159c:	d8800445 	stb	r2,17(sp)
    15a0:	d9800485 	stb	r6,18(sp)
    15a4:	d8000405 	stb	zero,16(sp)
    15a8:	003e3206 	br	e74 <___vfprintf_internal_r+0xa38>
    15ac:	01800074 	movhi	r6,1
    15b0:	31b3e804 	addi	r6,r6,-12384
    15b4:	d9814415 	stw	r6,1296(sp)
    15b8:	003fe606 	br	1554 <___vfprintf_internal_r+0x1118>
    15bc:	00800ac4 	movi	r2,43
    15c0:	d8800405 	stb	r2,16(sp)
    15c4:	b8c00007 	ldb	r3,0(r23)
    15c8:	003c1b06 	br	638 <___vfprintf_internal_r+0x1fc>
    15cc:	d8814c17 	ldw	r2,1328(sp)
    15d0:	b8c00007 	ldb	r3,0(r23)
    15d4:	10800054 	ori	r2,r2,1
    15d8:	d8814c15 	stw	r2,1328(sp)
    15dc:	003c1606 	br	638 <___vfprintf_internal_r+0x1fc>
    15e0:	d8800407 	ldb	r2,16(sp)
    15e4:	1000461e 	bne	r2,zero,1700 <___vfprintf_internal_r+0x12c4>
    15e8:	00800804 	movi	r2,32
    15ec:	d8800405 	stb	r2,16(sp)
    15f0:	b8c00007 	ldb	r3,0(r23)
    15f4:	003c1006 	br	638 <___vfprintf_internal_r+0x1fc>
    15f8:	d9814c17 	ldw	r6,1328(sp)
    15fc:	b8c00007 	ldb	r3,0(r23)
    1600:	31800214 	ori	r6,r6,8
    1604:	d9814c15 	stw	r6,1328(sp)
    1608:	003c0b06 	br	638 <___vfprintf_internal_r+0x1fc>
    160c:	0007883a 	mov	r3,zero
    1610:	01000244 	movi	r4,9
    1614:	188002a4 	muli	r2,r3,10
    1618:	b8c00007 	ldb	r3,0(r23)
    161c:	d9814d17 	ldw	r6,1332(sp)
    1620:	bdc00044 	addi	r23,r23,1
    1624:	d8c14d15 	stw	r3,1332(sp)
    1628:	d9414d17 	ldw	r5,1332(sp)
    162c:	3085883a 	add	r2,r6,r2
    1630:	10fff404 	addi	r3,r2,-48
    1634:	28bff404 	addi	r2,r5,-48
    1638:	20bff62e 	bgeu	r4,r2,1614 <___vfprintf_internal_r+0x11d8>
    163c:	d8c14a15 	stw	r3,1320(sp)
    1640:	003bff06 	br	640 <___vfprintf_internal_r+0x204>
    1644:	d9414c17 	ldw	r5,1328(sp)
    1648:	b8c00007 	ldb	r3,0(r23)
    164c:	29402014 	ori	r5,r5,128
    1650:	d9414c15 	stw	r5,1328(sp)
    1654:	003bf806 	br	638 <___vfprintf_internal_r+0x1fc>
    1658:	b8c00007 	ldb	r3,0(r23)
    165c:	00800a84 	movi	r2,42
    1660:	bdc00044 	addi	r23,r23,1
    1664:	18831526 	beq	r3,r2,22bc <___vfprintf_internal_r+0x1e80>
    1668:	d8c14d15 	stw	r3,1332(sp)
    166c:	18bff404 	addi	r2,r3,-48
    1670:	00c00244 	movi	r3,9
    1674:	18827836 	bltu	r3,r2,2058 <___vfprintf_internal_r+0x1c1c>
    1678:	000d883a 	mov	r6,zero
    167c:	308002a4 	muli	r2,r6,10
    1680:	b9800007 	ldb	r6,0(r23)
    1684:	d9414d17 	ldw	r5,1332(sp)
    1688:	bdc00044 	addi	r23,r23,1
    168c:	d9814d15 	stw	r6,1332(sp)
    1690:	d9014d17 	ldw	r4,1332(sp)
    1694:	1145883a 	add	r2,r2,r5
    1698:	11bff404 	addi	r6,r2,-48
    169c:	20bff404 	addi	r2,r4,-48
    16a0:	18bff62e 	bgeu	r3,r2,167c <___vfprintf_internal_r+0x1240>
    16a4:	3027883a 	mov	r19,r6
    16a8:	303be50e 	bge	r6,zero,640 <___vfprintf_internal_r+0x204>
    16ac:	04ffffc4 	movi	r19,-1
    16b0:	003be306 	br	640 <___vfprintf_internal_r+0x204>
    16b4:	d8000405 	stb	zero,16(sp)
    16b8:	39800017 	ldw	r6,0(r7)
    16bc:	39c00104 	addi	r7,r7,4
    16c0:	d9c14015 	stw	r7,1280(sp)
    16c4:	d9814115 	stw	r6,1284(sp)
    16c8:	3001c926 	beq	r6,zero,1df0 <___vfprintf_internal_r+0x19b4>
    16cc:	98000e16 	blt	r19,zero,1708 <___vfprintf_internal_r+0x12cc>
    16d0:	d9014117 	ldw	r4,1284(sp)
    16d4:	000b883a 	mov	r5,zero
    16d8:	980d883a 	mov	r6,r19
    16dc:	00054f80 	call	54f8 <memchr>
    16e0:	10025926 	beq	r2,zero,2048 <___vfprintf_internal_r+0x1c0c>
    16e4:	d8c14117 	ldw	r3,1284(sp)
    16e8:	10cfc83a 	sub	r7,r2,r3
    16ec:	99c19e16 	blt	r19,r7,1d68 <___vfprintf_internal_r+0x192c>
    16f0:	d9c14515 	stw	r7,1300(sp)
    16f4:	38000916 	blt	r7,zero,171c <___vfprintf_internal_r+0x12e0>
    16f8:	d8014615 	stw	zero,1304(sp)
    16fc:	003df106 	br	ec4 <___vfprintf_internal_r+0xa88>
    1700:	b8c00007 	ldb	r3,0(r23)
    1704:	003bcc06 	br	638 <___vfprintf_internal_r+0x1fc>
    1708:	d9014117 	ldw	r4,1284(sp)
    170c:	00070c40 	call	70c4 <strlen>
    1710:	d8814515 	stw	r2,1300(sp)
    1714:	100f883a 	mov	r7,r2
    1718:	103ff70e 	bge	r2,zero,16f8 <___vfprintf_internal_r+0x12bc>
    171c:	d8014515 	stw	zero,1300(sp)
    1720:	d8014615 	stw	zero,1304(sp)
    1724:	003de706 	br	ec4 <___vfprintf_internal_r+0xa88>
    1728:	20c03fcc 	andi	r3,r4,255
    172c:	00800044 	movi	r2,1
    1730:	18802d26 	beq	r3,r2,17e8 <___vfprintf_internal_r+0x13ac>
    1734:	18800e36 	bltu	r3,r2,1770 <___vfprintf_internal_r+0x1334>
    1738:	00800084 	movi	r2,2
    173c:	1880fa26 	beq	r3,r2,1b28 <___vfprintf_internal_r+0x16ec>
    1740:	01000074 	movhi	r4,1
    1744:	2133f804 	addi	r4,r4,-12320
    1748:	00070c40 	call	70c4 <strlen>
    174c:	100f883a 	mov	r7,r2
    1750:	dcc14515 	stw	r19,1300(sp)
    1754:	9880010e 	bge	r19,r2,175c <___vfprintf_internal_r+0x1320>
    1758:	d8814515 	stw	r2,1300(sp)
    175c:	00800074 	movhi	r2,1
    1760:	10b3f804 	addi	r2,r2,-12320
    1764:	dcc14615 	stw	r19,1304(sp)
    1768:	d8814115 	stw	r2,1284(sp)
    176c:	003dd506 	br	ec4 <___vfprintf_internal_r+0xa88>
    1770:	d9401904 	addi	r5,sp,100
    1774:	dd000f04 	addi	r20,sp,60
    1778:	d9414115 	stw	r5,1284(sp)
    177c:	880a977a 	slli	r5,r17,29
    1780:	d9814117 	ldw	r6,1284(sp)
    1784:	8004d0fa 	srli	r2,r16,3
    1788:	8806d0fa 	srli	r3,r17,3
    178c:	810001cc 	andi	r4,r16,7
    1790:	2884b03a 	or	r2,r5,r2
    1794:	31bfffc4 	addi	r6,r6,-1
    1798:	21000c04 	addi	r4,r4,48
    179c:	d9814115 	stw	r6,1284(sp)
    17a0:	10cab03a 	or	r5,r2,r3
    17a4:	31000005 	stb	r4,0(r6)
    17a8:	1021883a 	mov	r16,r2
    17ac:	1823883a 	mov	r17,r3
    17b0:	283ff21e 	bne	r5,zero,177c <___vfprintf_internal_r+0x1340>
    17b4:	d8c14c17 	ldw	r3,1328(sp)
    17b8:	1880004c 	andi	r2,r3,1
    17bc:	1005003a 	cmpeq	r2,r2,zero
    17c0:	103db91e 	bne	r2,zero,ea8 <___vfprintf_internal_r+0xa6c>
    17c4:	20803fcc 	andi	r2,r4,255
    17c8:	1080201c 	xori	r2,r2,128
    17cc:	10bfe004 	addi	r2,r2,-128
    17d0:	00c00c04 	movi	r3,48
    17d4:	10fdb426 	beq	r2,r3,ea8 <___vfprintf_internal_r+0xa6c>
    17d8:	31bfffc4 	addi	r6,r6,-1
    17dc:	d9814115 	stw	r6,1284(sp)
    17e0:	30c00005 	stb	r3,0(r6)
    17e4:	003db006 	br	ea8 <___vfprintf_internal_r+0xa6c>
    17e8:	88800068 	cmpgeui	r2,r17,1
    17ec:	10002c1e 	bne	r2,zero,18a0 <___vfprintf_internal_r+0x1464>
    17f0:	8800021e 	bne	r17,zero,17fc <___vfprintf_internal_r+0x13c0>
    17f4:	00800244 	movi	r2,9
    17f8:	14002936 	bltu	r2,r16,18a0 <___vfprintf_internal_r+0x1464>
    17fc:	d90018c4 	addi	r4,sp,99
    1800:	dd000f04 	addi	r20,sp,60
    1804:	d9014115 	stw	r4,1284(sp)
    1808:	d9014117 	ldw	r4,1284(sp)
    180c:	80800c04 	addi	r2,r16,48
    1810:	20800005 	stb	r2,0(r4)
    1814:	003da406 	br	ea8 <___vfprintf_internal_r+0xa6c>
    1818:	dc400d17 	ldw	r17,52(sp)
    181c:	07000074 	movhi	fp,1
    1820:	e733ff84 	addi	fp,fp,-12290
    1824:	9425883a 	add	r18,r18,r16
    1828:	8c400044 	addi	r17,r17,1
    182c:	008001c4 	movi	r2,7
    1830:	1f000015 	stw	fp,0(r3)
    1834:	1c000115 	stw	r16,4(r3)
    1838:	dc800e15 	stw	r18,56(sp)
    183c:	dc400d15 	stw	r17,52(sp)
    1840:	147de216 	blt	r2,r17,fcc <___vfprintf_internal_r+0xb90>
    1844:	18c00204 	addi	r3,r3,8
    1848:	003c7a06 	br	a34 <___vfprintf_internal_r+0x5f8>
    184c:	01000084 	movi	r4,2
    1850:	d8000405 	stb	zero,16(sp)
    1854:	003d8706 	br	e74 <___vfprintf_internal_r+0xa38>
    1858:	d9814c17 	ldw	r6,1328(sp)
    185c:	30c4703a 	and	r2,r6,r3
    1860:	1005003a 	cmpeq	r2,r2,zero
    1864:	103cb926 	beq	r2,zero,b4c <___vfprintf_internal_r+0x710>
    1868:	d9014117 	ldw	r4,1284(sp)
    186c:	94800044 	addi	r18,r18,1
    1870:	8c400044 	addi	r17,r17,1
    1874:	008001c4 	movi	r2,7
    1878:	a9000015 	stw	r4,0(r21)
    187c:	a8c00115 	stw	r3,4(r21)
    1880:	dc800e15 	stw	r18,56(sp)
    1884:	dc400d15 	stw	r17,52(sp)
    1888:	147e6616 	blt	r2,r17,1224 <___vfprintf_internal_r+0xde8>
    188c:	acc00204 	addi	r19,r21,8
    1890:	003cd706 	br	bf0 <___vfprintf_internal_r+0x7b4>
    1894:	07000074 	movhi	fp,1
    1898:	e733ff84 	addi	fp,fp,-12290
    189c:	003c4f06 	br	9dc <___vfprintf_internal_r+0x5a0>
    18a0:	dd000f04 	addi	r20,sp,60
    18a4:	dc801904 	addi	r18,sp,100
    18a8:	8009883a 	mov	r4,r16
    18ac:	880b883a 	mov	r5,r17
    18b0:	01800284 	movi	r6,10
    18b4:	000f883a 	mov	r7,zero
    18b8:	0007ba80 	call	7ba8 <__umoddi3>
    18bc:	12000c04 	addi	r8,r2,48
    18c0:	94bfffc4 	addi	r18,r18,-1
    18c4:	8009883a 	mov	r4,r16
    18c8:	880b883a 	mov	r5,r17
    18cc:	01800284 	movi	r6,10
    18d0:	000f883a 	mov	r7,zero
    18d4:	92000005 	stb	r8,0(r18)
    18d8:	00075cc0 	call	75cc <__udivdi3>
    18dc:	1009883a 	mov	r4,r2
    18e0:	1021883a 	mov	r16,r2
    18e4:	18800068 	cmpgeui	r2,r3,1
    18e8:	1823883a 	mov	r17,r3
    18ec:	103fee1e 	bne	r2,zero,18a8 <___vfprintf_internal_r+0x146c>
    18f0:	1800021e 	bne	r3,zero,18fc <___vfprintf_internal_r+0x14c0>
    18f4:	00800244 	movi	r2,9
    18f8:	113feb36 	bltu	r2,r4,18a8 <___vfprintf_internal_r+0x146c>
    18fc:	94bfffc4 	addi	r18,r18,-1
    1900:	dc814115 	stw	r18,1284(sp)
    1904:	003fc006 	br	1808 <___vfprintf_internal_r+0x13cc>
    1908:	d9014c17 	ldw	r4,1328(sp)
    190c:	2080004c 	andi	r2,r4,1
    1910:	10009a1e 	bne	r2,zero,1b7c <___vfprintf_internal_r+0x1740>
    1914:	d9401904 	addi	r5,sp,100
    1918:	dd000f04 	addi	r20,sp,60
    191c:	d9414115 	stw	r5,1284(sp)
    1920:	003d6106 	br	ea8 <___vfprintf_internal_r+0xa6c>
    1924:	d9014f17 	ldw	r4,1340(sp)
    1928:	b00b883a 	mov	r5,r22
    192c:	d9800c04 	addi	r6,sp,48
    1930:	00003e40 	call	3e4 <__sprint_r>
    1934:	103c791e 	bne	r2,zero,b1c <___vfprintf_internal_r+0x6e0>
    1938:	dc800e17 	ldw	r18,56(sp)
    193c:	d8c01904 	addi	r3,sp,100
    1940:	003cff06 	br	d40 <___vfprintf_internal_r+0x904>
    1944:	d8c14c17 	ldw	r3,1328(sp)
    1948:	1880040c 	andi	r2,r3,16
    194c:	1000711e 	bne	r2,zero,1b14 <___vfprintf_internal_r+0x16d8>
    1950:	d9014c17 	ldw	r4,1328(sp)
    1954:	2080100c 	andi	r2,r4,64
    1958:	10006e26 	beq	r2,zero,1b14 <___vfprintf_internal_r+0x16d8>
    195c:	3c00000b 	ldhu	r16,0(r7)
    1960:	0023883a 	mov	r17,zero
    1964:	39c00104 	addi	r7,r7,4
    1968:	d9c14015 	stw	r7,1280(sp)
    196c:	003f0006 	br	1570 <___vfprintf_internal_r+0x1134>
    1970:	dc400d17 	ldw	r17,52(sp)
    1974:	07000074 	movhi	fp,1
    1978:	e733ff84 	addi	fp,fp,-12290
    197c:	9425883a 	add	r18,r18,r16
    1980:	8c400044 	addi	r17,r17,1
    1984:	008001c4 	movi	r2,7
    1988:	1f000015 	stw	fp,0(r3)
    198c:	1c000115 	stw	r16,4(r3)
    1990:	dc800e15 	stw	r18,56(sp)
    1994:	dc400d15 	stw	r17,52(sp)
    1998:	147d7616 	blt	r2,r17,f74 <___vfprintf_internal_r+0xb38>
    199c:	18c00204 	addi	r3,r3,8
    19a0:	003d7b06 	br	f90 <___vfprintf_internal_r+0xb54>
    19a4:	dc800e17 	ldw	r18,56(sp)
    19a8:	dc400d17 	ldw	r17,52(sp)
    19ac:	07000074 	movhi	fp,1
    19b0:	e7340384 	addi	fp,fp,-12274
    19b4:	003bc006 	br	8b8 <___vfprintf_internal_r+0x47c>
    19b8:	d9014f17 	ldw	r4,1340(sp)
    19bc:	b00b883a 	mov	r5,r22
    19c0:	d9800c04 	addi	r6,sp,48
    19c4:	00003e40 	call	3e4 <__sprint_r>
    19c8:	103c541e 	bne	r2,zero,b1c <___vfprintf_internal_r+0x6e0>
    19cc:	dc800e17 	ldw	r18,56(sp)
    19d0:	d8c01904 	addi	r3,sp,100
    19d4:	003ce906 	br	d7c <___vfprintf_internal_r+0x940>
    19d8:	3c000017 	ldw	r16,0(r7)
    19dc:	0009883a 	mov	r4,zero
    19e0:	39c00104 	addi	r7,r7,4
    19e4:	0023883a 	mov	r17,zero
    19e8:	d9c14015 	stw	r7,1280(sp)
    19ec:	d8000405 	stb	zero,16(sp)
    19f0:	003d2006 	br	e74 <___vfprintf_internal_r+0xa38>
    19f4:	38800017 	ldw	r2,0(r7)
    19f8:	39c00104 	addi	r7,r7,4
    19fc:	d9c14015 	stw	r7,1280(sp)
    1a00:	1023d7fa 	srai	r17,r2,31
    1a04:	1021883a 	mov	r16,r2
    1a08:	003d1806 	br	e6c <___vfprintf_internal_r+0xa30>
    1a0c:	3c000017 	ldw	r16,0(r7)
    1a10:	01000044 	movi	r4,1
    1a14:	39c00104 	addi	r7,r7,4
    1a18:	0023883a 	mov	r17,zero
    1a1c:	d9c14015 	stw	r7,1280(sp)
    1a20:	d8000405 	stb	zero,16(sp)
    1a24:	003d1306 	br	e74 <___vfprintf_internal_r+0xa38>
    1a28:	00800074 	movhi	r2,1
    1a2c:	10b3ff04 	addi	r2,r2,-12292
    1a30:	94800044 	addi	r18,r18,1
    1a34:	8c400044 	addi	r17,r17,1
    1a38:	a8800015 	stw	r2,0(r21)
    1a3c:	00c00044 	movi	r3,1
    1a40:	008001c4 	movi	r2,7
    1a44:	a8c00115 	stw	r3,4(r21)
    1a48:	dc800e15 	stw	r18,56(sp)
    1a4c:	dc400d15 	stw	r17,52(sp)
    1a50:	1440ca16 	blt	r2,r17,1d7c <___vfprintf_internal_r+0x1940>
    1a54:	a8c00204 	addi	r3,r21,8
    1a58:	2000061e 	bne	r4,zero,1a74 <___vfprintf_internal_r+0x1638>
    1a5c:	d9414717 	ldw	r5,1308(sp)
    1a60:	2800041e 	bne	r5,zero,1a74 <___vfprintf_internal_r+0x1638>
    1a64:	d9814c17 	ldw	r6,1328(sp)
    1a68:	3080004c 	andi	r2,r6,1
    1a6c:	1005003a 	cmpeq	r2,r2,zero
    1a70:	103bf01e 	bne	r2,zero,a34 <___vfprintf_internal_r+0x5f8>
    1a74:	00800044 	movi	r2,1
    1a78:	dc400d17 	ldw	r17,52(sp)
    1a7c:	18800115 	stw	r2,4(r3)
    1a80:	d8814917 	ldw	r2,1316(sp)
    1a84:	94800044 	addi	r18,r18,1
    1a88:	8c400044 	addi	r17,r17,1
    1a8c:	18800015 	stw	r2,0(r3)
    1a90:	008001c4 	movi	r2,7
    1a94:	dc800e15 	stw	r18,56(sp)
    1a98:	dc400d15 	stw	r17,52(sp)
    1a9c:	1440ca16 	blt	r2,r17,1dc8 <___vfprintf_internal_r+0x198c>
    1aa0:	18c00204 	addi	r3,r3,8
    1aa4:	0121c83a 	sub	r16,zero,r4
    1aa8:	0400500e 	bge	zero,r16,1bec <___vfprintf_internal_r+0x17b0>
    1aac:	00800404 	movi	r2,16
    1ab0:	1400800e 	bge	r2,r16,1cb4 <___vfprintf_internal_r+0x1878>
    1ab4:	1027883a 	mov	r19,r2
    1ab8:	07000074 	movhi	fp,1
    1abc:	e733ff84 	addi	fp,fp,-12290
    1ac0:	050001c4 	movi	r20,7
    1ac4:	00000306 	br	1ad4 <___vfprintf_internal_r+0x1698>
    1ac8:	18c00204 	addi	r3,r3,8
    1acc:	843ffc04 	addi	r16,r16,-16
    1ad0:	9c007a0e 	bge	r19,r16,1cbc <___vfprintf_internal_r+0x1880>
    1ad4:	94800404 	addi	r18,r18,16
    1ad8:	8c400044 	addi	r17,r17,1
    1adc:	1f000015 	stw	fp,0(r3)
    1ae0:	1cc00115 	stw	r19,4(r3)
    1ae4:	dc800e15 	stw	r18,56(sp)
    1ae8:	dc400d15 	stw	r17,52(sp)
    1aec:	a47ff60e 	bge	r20,r17,1ac8 <___vfprintf_internal_r+0x168c>
    1af0:	d9014f17 	ldw	r4,1340(sp)
    1af4:	b00b883a 	mov	r5,r22
    1af8:	d9800c04 	addi	r6,sp,48
    1afc:	00003e40 	call	3e4 <__sprint_r>
    1b00:	103c061e 	bne	r2,zero,b1c <___vfprintf_internal_r+0x6e0>
    1b04:	dc800e17 	ldw	r18,56(sp)
    1b08:	dc400d17 	ldw	r17,52(sp)
    1b0c:	d8c01904 	addi	r3,sp,100
    1b10:	003fee06 	br	1acc <___vfprintf_internal_r+0x1690>
    1b14:	3c000017 	ldw	r16,0(r7)
    1b18:	0023883a 	mov	r17,zero
    1b1c:	39c00104 	addi	r7,r7,4
    1b20:	d9c14015 	stw	r7,1280(sp)
    1b24:	003e9206 	br	1570 <___vfprintf_internal_r+0x1134>
    1b28:	d9401904 	addi	r5,sp,100
    1b2c:	dd000f04 	addi	r20,sp,60
    1b30:	d9414115 	stw	r5,1284(sp)
    1b34:	d9814417 	ldw	r6,1296(sp)
    1b38:	880a973a 	slli	r5,r17,28
    1b3c:	8004d13a 	srli	r2,r16,4
    1b40:	810003cc 	andi	r4,r16,15
    1b44:	3109883a 	add	r4,r6,r4
    1b48:	2884b03a 	or	r2,r5,r2
    1b4c:	21400003 	ldbu	r5,0(r4)
    1b50:	d9014117 	ldw	r4,1284(sp)
    1b54:	8806d13a 	srli	r3,r17,4
    1b58:	1021883a 	mov	r16,r2
    1b5c:	213fffc4 	addi	r4,r4,-1
    1b60:	d9014115 	stw	r4,1284(sp)
    1b64:	d9814117 	ldw	r6,1284(sp)
    1b68:	10c8b03a 	or	r4,r2,r3
    1b6c:	1823883a 	mov	r17,r3
    1b70:	31400005 	stb	r5,0(r6)
    1b74:	203fef1e 	bne	r4,zero,1b34 <___vfprintf_internal_r+0x16f8>
    1b78:	003ccb06 	br	ea8 <___vfprintf_internal_r+0xa6c>
    1b7c:	00800c04 	movi	r2,48
    1b80:	d98018c4 	addi	r6,sp,99
    1b84:	dd000f04 	addi	r20,sp,60
    1b88:	d88018c5 	stb	r2,99(sp)
    1b8c:	d9814115 	stw	r6,1284(sp)
    1b90:	003cc506 	br	ea8 <___vfprintf_internal_r+0xa6c>
    1b94:	dc400d17 	ldw	r17,52(sp)
    1b98:	07000074 	movhi	fp,1
    1b9c:	e7340384 	addi	fp,fp,-12274
    1ba0:	003bc706 	br	ac0 <___vfprintf_internal_r+0x684>
    1ba4:	d9414c17 	ldw	r5,1328(sp)
    1ba8:	2880040c 	andi	r2,r5,16
    1bac:	10007c26 	beq	r2,zero,1da0 <___vfprintf_internal_r+0x1964>
    1bb0:	38800017 	ldw	r2,0(r7)
    1bb4:	39c00104 	addi	r7,r7,4
    1bb8:	d9c14015 	stw	r7,1280(sp)
    1bbc:	d9814b17 	ldw	r6,1324(sp)
    1bc0:	d9c14017 	ldw	r7,1280(sp)
    1bc4:	11800015 	stw	r6,0(r2)
    1bc8:	003a7806 	br	5ac <___vfprintf_internal_r+0x170>
    1bcc:	d9014f17 	ldw	r4,1340(sp)
    1bd0:	b00b883a 	mov	r5,r22
    1bd4:	d9800c04 	addi	r6,sp,48
    1bd8:	00003e40 	call	3e4 <__sprint_r>
    1bdc:	103bcf1e 	bne	r2,zero,b1c <___vfprintf_internal_r+0x6e0>
    1be0:	dc800e17 	ldw	r18,56(sp)
    1be4:	dc400d17 	ldw	r17,52(sp)
    1be8:	d8c01904 	addi	r3,sp,100
    1bec:	d9014717 	ldw	r4,1308(sp)
    1bf0:	d9414117 	ldw	r5,1284(sp)
    1bf4:	8c400044 	addi	r17,r17,1
    1bf8:	9125883a 	add	r18,r18,r4
    1bfc:	008001c4 	movi	r2,7
    1c00:	19400015 	stw	r5,0(r3)
    1c04:	19000115 	stw	r4,4(r3)
    1c08:	dc800e15 	stw	r18,56(sp)
    1c0c:	dc400d15 	stw	r17,52(sp)
    1c10:	147cee16 	blt	r2,r17,fcc <___vfprintf_internal_r+0xb90>
    1c14:	18c00204 	addi	r3,r3,8
    1c18:	003b8606 	br	a34 <___vfprintf_internal_r+0x5f8>
    1c1c:	38c00017 	ldw	r3,0(r7)
    1c20:	39000204 	addi	r4,r7,8
    1c24:	d9014015 	stw	r4,1280(sp)
    1c28:	d8c14215 	stw	r3,1288(sp)
    1c2c:	39c00117 	ldw	r7,4(r7)
    1c30:	d9c14315 	stw	r7,1292(sp)
    1c34:	003e2006 	br	14b8 <___vfprintf_internal_r+0x107c>
    1c38:	0005883a 	mov	r2,zero
    1c3c:	1409c83a 	sub	r4,r2,r16
    1c40:	1105803a 	cmpltu	r2,r2,r4
    1c44:	044bc83a 	sub	r5,zero,r17
    1c48:	2885c83a 	sub	r2,r5,r2
    1c4c:	2021883a 	mov	r16,r4
    1c50:	1023883a 	mov	r17,r2
    1c54:	01000044 	movi	r4,1
    1c58:	00800b44 	movi	r2,45
    1c5c:	d8800405 	stb	r2,16(sp)
    1c60:	003c8406 	br	e74 <___vfprintf_internal_r+0xa38>
    1c64:	d9014f17 	ldw	r4,1340(sp)
    1c68:	b00b883a 	mov	r5,r22
    1c6c:	d9800c04 	addi	r6,sp,48
    1c70:	00003e40 	call	3e4 <__sprint_r>
    1c74:	103ba91e 	bne	r2,zero,b1c <___vfprintf_internal_r+0x6e0>
    1c78:	dc800e17 	ldw	r18,56(sp)
    1c7c:	dc400d17 	ldw	r17,52(sp)
    1c80:	d9000517 	ldw	r4,20(sp)
    1c84:	d9401904 	addi	r5,sp,100
    1c88:	003da706 	br	1328 <___vfprintf_internal_r+0xeec>
    1c8c:	d9014f17 	ldw	r4,1340(sp)
    1c90:	b00b883a 	mov	r5,r22
    1c94:	d9800c04 	addi	r6,sp,48
    1c98:	00003e40 	call	3e4 <__sprint_r>
    1c9c:	103b9f1e 	bne	r2,zero,b1c <___vfprintf_internal_r+0x6e0>
    1ca0:	dc800e17 	ldw	r18,56(sp)
    1ca4:	dc400d17 	ldw	r17,52(sp)
    1ca8:	d9000517 	ldw	r4,20(sp)
    1cac:	d8c01904 	addi	r3,sp,100
    1cb0:	003d9106 	br	12f8 <___vfprintf_internal_r+0xebc>
    1cb4:	07000074 	movhi	fp,1
    1cb8:	e733ff84 	addi	fp,fp,-12290
    1cbc:	9425883a 	add	r18,r18,r16
    1cc0:	8c400044 	addi	r17,r17,1
    1cc4:	008001c4 	movi	r2,7
    1cc8:	1f000015 	stw	fp,0(r3)
    1ccc:	1c000115 	stw	r16,4(r3)
    1cd0:	dc800e15 	stw	r18,56(sp)
    1cd4:	dc400d15 	stw	r17,52(sp)
    1cd8:	147fbc16 	blt	r2,r17,1bcc <___vfprintf_internal_r+0x1790>
    1cdc:	18c00204 	addi	r3,r3,8
    1ce0:	003fc206 	br	1bec <___vfprintf_internal_r+0x17b0>
    1ce4:	d9014f17 	ldw	r4,1340(sp)
    1ce8:	b00b883a 	mov	r5,r22
    1cec:	d9800c04 	addi	r6,sp,48
    1cf0:	00003e40 	call	3e4 <__sprint_r>
    1cf4:	103b891e 	bne	r2,zero,b1c <___vfprintf_internal_r+0x6e0>
    1cf8:	dc800e17 	ldw	r18,56(sp)
    1cfc:	d9000517 	ldw	r4,20(sp)
    1d00:	d8c01904 	addi	r3,sp,100
    1d04:	003d0206 	br	1110 <___vfprintf_internal_r+0xcd4>
    1d08:	07000074 	movhi	fp,1
    1d0c:	e733ff84 	addi	fp,fp,-12290
    1d10:	003be406 	br	ca4 <___vfprintf_internal_r+0x868>
    1d14:	00800074 	movhi	r2,1
    1d18:	10b3ee04 	addi	r2,r2,-12360
    1d1c:	d8814115 	stw	r2,1284(sp)
    1d20:	003df506 	br	14f8 <___vfprintf_internal_r+0x10bc>
    1d24:	d9014217 	ldw	r4,1288(sp)
    1d28:	d9414317 	ldw	r5,1292(sp)
    1d2c:	0006e1c0 	call	6e1c <__isnand>
    1d30:	10003926 	beq	r2,zero,1e18 <___vfprintf_internal_r+0x19dc>
    1d34:	d9414d17 	ldw	r5,1332(sp)
    1d38:	008011c4 	movi	r2,71
    1d3c:	1140ce16 	blt	r2,r5,2078 <___vfprintf_internal_r+0x1c3c>
    1d40:	01800074 	movhi	r6,1
    1d44:	31b3ef04 	addi	r6,r6,-12356
    1d48:	d9814115 	stw	r6,1284(sp)
    1d4c:	003dea06 	br	14f8 <___vfprintf_internal_r+0x10bc>
    1d50:	d9014c17 	ldw	r4,1328(sp)
    1d54:	bdc00044 	addi	r23,r23,1
    1d58:	b8c00007 	ldb	r3,0(r23)
    1d5c:	21000814 	ori	r4,r4,32
    1d60:	d9014c15 	stw	r4,1328(sp)
    1d64:	003a3406 	br	638 <___vfprintf_internal_r+0x1fc>
    1d68:	dcc14515 	stw	r19,1300(sp)
    1d6c:	98011016 	blt	r19,zero,21b0 <___vfprintf_internal_r+0x1d74>
    1d70:	980f883a 	mov	r7,r19
    1d74:	d8014615 	stw	zero,1304(sp)
    1d78:	003c5206 	br	ec4 <___vfprintf_internal_r+0xa88>
    1d7c:	d9014f17 	ldw	r4,1340(sp)
    1d80:	b00b883a 	mov	r5,r22
    1d84:	d9800c04 	addi	r6,sp,48
    1d88:	00003e40 	call	3e4 <__sprint_r>
    1d8c:	103b631e 	bne	r2,zero,b1c <___vfprintf_internal_r+0x6e0>
    1d90:	dc800e17 	ldw	r18,56(sp)
    1d94:	d9000517 	ldw	r4,20(sp)
    1d98:	d8c01904 	addi	r3,sp,100
    1d9c:	003f2e06 	br	1a58 <___vfprintf_internal_r+0x161c>
    1da0:	d8c14c17 	ldw	r3,1328(sp)
    1da4:	1880100c 	andi	r2,r3,64
    1da8:	1000a026 	beq	r2,zero,202c <___vfprintf_internal_r+0x1bf0>
    1dac:	38800017 	ldw	r2,0(r7)
    1db0:	39c00104 	addi	r7,r7,4
    1db4:	d9c14015 	stw	r7,1280(sp)
    1db8:	d9014b17 	ldw	r4,1324(sp)
    1dbc:	d9c14017 	ldw	r7,1280(sp)
    1dc0:	1100000d 	sth	r4,0(r2)
    1dc4:	0039f906 	br	5ac <___vfprintf_internal_r+0x170>
    1dc8:	d9014f17 	ldw	r4,1340(sp)
    1dcc:	b00b883a 	mov	r5,r22
    1dd0:	d9800c04 	addi	r6,sp,48
    1dd4:	00003e40 	call	3e4 <__sprint_r>
    1dd8:	103b501e 	bne	r2,zero,b1c <___vfprintf_internal_r+0x6e0>
    1ddc:	dc800e17 	ldw	r18,56(sp)
    1de0:	dc400d17 	ldw	r17,52(sp)
    1de4:	d9000517 	ldw	r4,20(sp)
    1de8:	d8c01904 	addi	r3,sp,100
    1dec:	003f2d06 	br	1aa4 <___vfprintf_internal_r+0x1668>
    1df0:	00800184 	movi	r2,6
    1df4:	14c09a36 	bltu	r2,r19,2060 <___vfprintf_internal_r+0x1c24>
    1df8:	dcc14515 	stw	r19,1300(sp)
    1dfc:	9800010e 	bge	r19,zero,1e04 <___vfprintf_internal_r+0x19c8>
    1e00:	d8014515 	stw	zero,1300(sp)
    1e04:	00800074 	movhi	r2,1
    1e08:	10b3f104 	addi	r2,r2,-12348
    1e0c:	980f883a 	mov	r7,r19
    1e10:	d8814115 	stw	r2,1284(sp)
    1e14:	003a7806 	br	7f8 <___vfprintf_internal_r+0x3bc>
    1e18:	00bfffc4 	movi	r2,-1
    1e1c:	9880e226 	beq	r19,r2,21a8 <___vfprintf_internal_r+0x1d6c>
    1e20:	d9414d17 	ldw	r5,1332(sp)
    1e24:	008019c4 	movi	r2,103
    1e28:	2880dc26 	beq	r5,r2,219c <___vfprintf_internal_r+0x1d60>
    1e2c:	008011c4 	movi	r2,71
    1e30:	2880da26 	beq	r5,r2,219c <___vfprintf_internal_r+0x1d60>
    1e34:	d9414c17 	ldw	r5,1328(sp)
    1e38:	d9014317 	ldw	r4,1292(sp)
    1e3c:	d9814217 	ldw	r6,1288(sp)
    1e40:	29404014 	ori	r5,r5,256
    1e44:	d9414c15 	stw	r5,1328(sp)
    1e48:	2000cc16 	blt	r4,zero,217c <___vfprintf_internal_r+0x1d40>
    1e4c:	3021883a 	mov	r16,r6
    1e50:	2023883a 	mov	r17,r4
    1e54:	0039883a 	mov	fp,zero
    1e58:	d9414d17 	ldw	r5,1332(sp)
    1e5c:	00801984 	movi	r2,102
    1e60:	2880b726 	beq	r5,r2,2140 <___vfprintf_internal_r+0x1d04>
    1e64:	00801184 	movi	r2,70
    1e68:	2880b526 	beq	r5,r2,2140 <___vfprintf_internal_r+0x1d04>
    1e6c:	00801944 	movi	r2,101
    1e70:	2880c826 	beq	r5,r2,2194 <___vfprintf_internal_r+0x1d58>
    1e74:	00801144 	movi	r2,69
    1e78:	2880c626 	beq	r5,r2,2194 <___vfprintf_internal_r+0x1d58>
    1e7c:	9829883a 	mov	r20,r19
    1e80:	d9014f17 	ldw	r4,1340(sp)
    1e84:	d8800504 	addi	r2,sp,20
    1e88:	880d883a 	mov	r6,r17
    1e8c:	d8800115 	stw	r2,4(sp)
    1e90:	d8c00604 	addi	r3,sp,24
    1e94:	d8800704 	addi	r2,sp,28
    1e98:	800b883a 	mov	r5,r16
    1e9c:	01c00084 	movi	r7,2
    1ea0:	d8c00215 	stw	r3,8(sp)
    1ea4:	d8800315 	stw	r2,12(sp)
    1ea8:	dd000015 	stw	r20,0(sp)
    1eac:	00026600 	call	2660 <_dtoa_r>
    1eb0:	d9814d17 	ldw	r6,1332(sp)
    1eb4:	d8814115 	stw	r2,1284(sp)
    1eb8:	008019c4 	movi	r2,103
    1ebc:	30809526 	beq	r6,r2,2114 <___vfprintf_internal_r+0x1cd8>
    1ec0:	d8c14d17 	ldw	r3,1332(sp)
    1ec4:	008011c4 	movi	r2,71
    1ec8:	18809226 	beq	r3,r2,2114 <___vfprintf_internal_r+0x1cd8>
    1ecc:	d9414117 	ldw	r5,1284(sp)
    1ed0:	d9814d17 	ldw	r6,1332(sp)
    1ed4:	00801984 	movi	r2,102
    1ed8:	2d25883a 	add	r18,r5,r20
    1edc:	30808626 	beq	r6,r2,20f8 <___vfprintf_internal_r+0x1cbc>
    1ee0:	00801184 	movi	r2,70
    1ee4:	30808426 	beq	r6,r2,20f8 <___vfprintf_internal_r+0x1cbc>
    1ee8:	000d883a 	mov	r6,zero
    1eec:	000f883a 	mov	r7,zero
    1ef0:	880b883a 	mov	r5,r17
    1ef4:	8009883a 	mov	r4,r16
    1ef8:	0008c780 	call	8c78 <__eqdf2>
    1efc:	1000751e 	bne	r2,zero,20d4 <___vfprintf_internal_r+0x1c98>
    1f00:	9005883a 	mov	r2,r18
    1f04:	dc800715 	stw	r18,28(sp)
    1f08:	d9014117 	ldw	r4,1284(sp)
    1f0c:	d9414d17 	ldw	r5,1332(sp)
    1f10:	00c019c4 	movi	r3,103
    1f14:	1125c83a 	sub	r18,r2,r4
    1f18:	28c06826 	beq	r5,r3,20bc <___vfprintf_internal_r+0x1c80>
    1f1c:	008011c4 	movi	r2,71
    1f20:	28806626 	beq	r5,r2,20bc <___vfprintf_internal_r+0x1c80>
    1f24:	d9000517 	ldw	r4,20(sp)
    1f28:	d8c14d17 	ldw	r3,1332(sp)
    1f2c:	00801944 	movi	r2,101
    1f30:	10c05516 	blt	r2,r3,2088 <___vfprintf_internal_r+0x1c4c>
    1f34:	213fffc4 	addi	r4,r4,-1
    1f38:	d9000515 	stw	r4,20(sp)
    1f3c:	d8c00805 	stb	r3,32(sp)
    1f40:	2021883a 	mov	r16,r4
    1f44:	2000c116 	blt	r4,zero,224c <___vfprintf_internal_r+0x1e10>
    1f48:	00800ac4 	movi	r2,43
    1f4c:	d8800845 	stb	r2,33(sp)
    1f50:	00800244 	movi	r2,9
    1f54:	1400af0e 	bge	r2,r16,2214 <___vfprintf_internal_r+0x1dd8>
    1f58:	1027883a 	mov	r19,r2
    1f5c:	dc400b84 	addi	r17,sp,46
    1f60:	8009883a 	mov	r4,r16
    1f64:	01400284 	movi	r5,10
    1f68:	00093600 	call	9360 <__modsi3>
    1f6c:	10800c04 	addi	r2,r2,48
    1f70:	8c7fffc4 	addi	r17,r17,-1
    1f74:	8009883a 	mov	r4,r16
    1f78:	01400284 	movi	r5,10
    1f7c:	88800005 	stb	r2,0(r17)
    1f80:	00093000 	call	9300 <__divsi3>
    1f84:	1021883a 	mov	r16,r2
    1f88:	98bff516 	blt	r19,r2,1f60 <___vfprintf_internal_r+0x1b24>
    1f8c:	10c00c04 	addi	r3,r2,48
    1f90:	d88009c4 	addi	r2,sp,39
    1f94:	108001c4 	addi	r2,r2,7
    1f98:	897fffc4 	addi	r5,r17,-1
    1f9c:	88ffffc5 	stb	r3,-1(r17)
    1fa0:	2880a72e 	bgeu	r5,r2,2240 <___vfprintf_internal_r+0x1e04>
    1fa4:	1009883a 	mov	r4,r2
    1fa8:	d9800804 	addi	r6,sp,32
    1fac:	d8c00884 	addi	r3,sp,34
    1fb0:	28800003 	ldbu	r2,0(r5)
    1fb4:	29400044 	addi	r5,r5,1
    1fb8:	18800005 	stb	r2,0(r3)
    1fbc:	18c00044 	addi	r3,r3,1
    1fc0:	293ffb36 	bltu	r5,r4,1fb0 <___vfprintf_internal_r+0x1b74>
    1fc4:	1987c83a 	sub	r3,r3,r6
    1fc8:	00800044 	movi	r2,1
    1fcc:	d8c14815 	stw	r3,1312(sp)
    1fd0:	90cf883a 	add	r7,r18,r3
    1fd4:	1480960e 	bge	r2,r18,2230 <___vfprintf_internal_r+0x1df4>
    1fd8:	39c00044 	addi	r7,r7,1
    1fdc:	d9c14515 	stw	r7,1300(sp)
    1fe0:	38003416 	blt	r7,zero,20b4 <___vfprintf_internal_r+0x1c78>
    1fe4:	e0803fcc 	andi	r2,fp,255
    1fe8:	1080201c 	xori	r2,r2,128
    1fec:	10bfe004 	addi	r2,r2,-128
    1ff0:	10004e26 	beq	r2,zero,212c <___vfprintf_internal_r+0x1cf0>
    1ff4:	00800b44 	movi	r2,45
    1ff8:	dc814715 	stw	r18,1308(sp)
    1ffc:	d8014615 	stw	zero,1304(sp)
    2000:	d8800405 	stb	r2,16(sp)
    2004:	003bb106 	br	ecc <___vfprintf_internal_r+0xa90>
    2008:	00800b44 	movi	r2,45
    200c:	d8800405 	stb	r2,16(sp)
    2010:	003d3306 	br	14e0 <___vfprintf_internal_r+0x10a4>
    2014:	d9014f17 	ldw	r4,1340(sp)
    2018:	b00b883a 	mov	r5,r22
    201c:	d9800c04 	addi	r6,sp,48
    2020:	00003e40 	call	3e4 <__sprint_r>
    2024:	103abd1e 	bne	r2,zero,b1c <___vfprintf_internal_r+0x6e0>
    2028:	003abb06 	br	b18 <___vfprintf_internal_r+0x6dc>
    202c:	38800017 	ldw	r2,0(r7)
    2030:	39c00104 	addi	r7,r7,4
    2034:	d9c14015 	stw	r7,1280(sp)
    2038:	d9414b17 	ldw	r5,1324(sp)
    203c:	d9c14017 	ldw	r7,1280(sp)
    2040:	11400015 	stw	r5,0(r2)
    2044:	00395906 	br	5ac <___vfprintf_internal_r+0x170>
    2048:	980f883a 	mov	r7,r19
    204c:	dcc14515 	stw	r19,1300(sp)
    2050:	d8014615 	stw	zero,1304(sp)
    2054:	003b9b06 	br	ec4 <___vfprintf_internal_r+0xa88>
    2058:	0027883a 	mov	r19,zero
    205c:	00397806 	br	640 <___vfprintf_internal_r+0x204>
    2060:	00c00074 	movhi	r3,1
    2064:	18f3f104 	addi	r3,r3,-12348
    2068:	100f883a 	mov	r7,r2
    206c:	d8814515 	stw	r2,1300(sp)
    2070:	d8c14115 	stw	r3,1284(sp)
    2074:	0039e006 	br	7f8 <___vfprintf_internal_r+0x3bc>
    2078:	00800074 	movhi	r2,1
    207c:	10b3f004 	addi	r2,r2,-12352
    2080:	d8814115 	stw	r2,1284(sp)
    2084:	003d1c06 	br	14f8 <___vfprintf_internal_r+0x10bc>
    2088:	d9414d17 	ldw	r5,1332(sp)
    208c:	00801984 	movi	r2,102
    2090:	28804926 	beq	r5,r2,21b8 <___vfprintf_internal_r+0x1d7c>
    2094:	200f883a 	mov	r7,r4
    2098:	24805716 	blt	r4,r18,21f8 <___vfprintf_internal_r+0x1dbc>
    209c:	d9414c17 	ldw	r5,1328(sp)
    20a0:	2880004c 	andi	r2,r5,1
    20a4:	10000126 	beq	r2,zero,20ac <___vfprintf_internal_r+0x1c70>
    20a8:	21c00044 	addi	r7,r4,1
    20ac:	d9c14515 	stw	r7,1300(sp)
    20b0:	383fcc0e 	bge	r7,zero,1fe4 <___vfprintf_internal_r+0x1ba8>
    20b4:	d8014515 	stw	zero,1300(sp)
    20b8:	003fca06 	br	1fe4 <___vfprintf_internal_r+0x1ba8>
    20bc:	d9000517 	ldw	r4,20(sp)
    20c0:	00bfff04 	movi	r2,-4
    20c4:	1100480e 	bge	r2,r4,21e8 <___vfprintf_internal_r+0x1dac>
    20c8:	99004716 	blt	r19,r4,21e8 <___vfprintf_internal_r+0x1dac>
    20cc:	d8c14d15 	stw	r3,1332(sp)
    20d0:	003ff006 	br	2094 <___vfprintf_internal_r+0x1c58>
    20d4:	d8800717 	ldw	r2,28(sp)
    20d8:	14bf8b2e 	bgeu	r2,r18,1f08 <___vfprintf_internal_r+0x1acc>
    20dc:	9007883a 	mov	r3,r18
    20e0:	01000c04 	movi	r4,48
    20e4:	11000005 	stb	r4,0(r2)
    20e8:	10800044 	addi	r2,r2,1
    20ec:	d8800715 	stw	r2,28(sp)
    20f0:	18bffc1e 	bne	r3,r2,20e4 <___vfprintf_internal_r+0x1ca8>
    20f4:	003f8406 	br	1f08 <___vfprintf_internal_r+0x1acc>
    20f8:	d8814117 	ldw	r2,1284(sp)
    20fc:	10c00007 	ldb	r3,0(r2)
    2100:	00800c04 	movi	r2,48
    2104:	18805b26 	beq	r3,r2,2274 <___vfprintf_internal_r+0x1e38>
    2108:	d9000517 	ldw	r4,20(sp)
    210c:	9125883a 	add	r18,r18,r4
    2110:	003f7506 	br	1ee8 <___vfprintf_internal_r+0x1aac>
    2114:	d9014c17 	ldw	r4,1328(sp)
    2118:	2080004c 	andi	r2,r4,1
    211c:	1005003a 	cmpeq	r2,r2,zero
    2120:	103f6a26 	beq	r2,zero,1ecc <___vfprintf_internal_r+0x1a90>
    2124:	d8800717 	ldw	r2,28(sp)
    2128:	003f7706 	br	1f08 <___vfprintf_internal_r+0x1acc>
    212c:	d9c14515 	stw	r7,1300(sp)
    2130:	38004d16 	blt	r7,zero,2268 <___vfprintf_internal_r+0x1e2c>
    2134:	dc814715 	stw	r18,1308(sp)
    2138:	d8014615 	stw	zero,1304(sp)
    213c:	003b6106 	br	ec4 <___vfprintf_internal_r+0xa88>
    2140:	d9014f17 	ldw	r4,1340(sp)
    2144:	d8800504 	addi	r2,sp,20
    2148:	d8800115 	stw	r2,4(sp)
    214c:	d8c00604 	addi	r3,sp,24
    2150:	d8800704 	addi	r2,sp,28
    2154:	800b883a 	mov	r5,r16
    2158:	880d883a 	mov	r6,r17
    215c:	01c000c4 	movi	r7,3
    2160:	d8c00215 	stw	r3,8(sp)
    2164:	d8800315 	stw	r2,12(sp)
    2168:	dcc00015 	stw	r19,0(sp)
    216c:	9829883a 	mov	r20,r19
    2170:	00026600 	call	2660 <_dtoa_r>
    2174:	d8814115 	stw	r2,1284(sp)
    2178:	003f5106 	br	1ec0 <___vfprintf_internal_r+0x1a84>
    217c:	d8c14217 	ldw	r3,1288(sp)
    2180:	d9014317 	ldw	r4,1292(sp)
    2184:	07000b44 	movi	fp,45
    2188:	1821883a 	mov	r16,r3
    218c:	2460003c 	xorhi	r17,r4,32768
    2190:	003f3106 	br	1e58 <___vfprintf_internal_r+0x1a1c>
    2194:	9d000044 	addi	r20,r19,1
    2198:	003f3906 	br	1e80 <___vfprintf_internal_r+0x1a44>
    219c:	983f251e 	bne	r19,zero,1e34 <___vfprintf_internal_r+0x19f8>
    21a0:	04c00044 	movi	r19,1
    21a4:	003f2306 	br	1e34 <___vfprintf_internal_r+0x19f8>
    21a8:	04c00184 	movi	r19,6
    21ac:	003f2106 	br	1e34 <___vfprintf_internal_r+0x19f8>
    21b0:	d8014515 	stw	zero,1300(sp)
    21b4:	003eee06 	br	1d70 <___vfprintf_internal_r+0x1934>
    21b8:	200f883a 	mov	r7,r4
    21bc:	0100370e 	bge	zero,r4,229c <___vfprintf_internal_r+0x1e60>
    21c0:	9800031e 	bne	r19,zero,21d0 <___vfprintf_internal_r+0x1d94>
    21c4:	d9814c17 	ldw	r6,1328(sp)
    21c8:	3080004c 	andi	r2,r6,1
    21cc:	103fb726 	beq	r2,zero,20ac <___vfprintf_internal_r+0x1c70>
    21d0:	20800044 	addi	r2,r4,1
    21d4:	98a7883a 	add	r19,r19,r2
    21d8:	dcc14515 	stw	r19,1300(sp)
    21dc:	980f883a 	mov	r7,r19
    21e0:	983f800e 	bge	r19,zero,1fe4 <___vfprintf_internal_r+0x1ba8>
    21e4:	003fb306 	br	20b4 <___vfprintf_internal_r+0x1c78>
    21e8:	d9814d17 	ldw	r6,1332(sp)
    21ec:	31bfff84 	addi	r6,r6,-2
    21f0:	d9814d15 	stw	r6,1332(sp)
    21f4:	003f4c06 	br	1f28 <___vfprintf_internal_r+0x1aec>
    21f8:	0100180e 	bge	zero,r4,225c <___vfprintf_internal_r+0x1e20>
    21fc:	00800044 	movi	r2,1
    2200:	1485883a 	add	r2,r2,r18
    2204:	d8814515 	stw	r2,1300(sp)
    2208:	100f883a 	mov	r7,r2
    220c:	103f750e 	bge	r2,zero,1fe4 <___vfprintf_internal_r+0x1ba8>
    2210:	003fa806 	br	20b4 <___vfprintf_internal_r+0x1c78>
    2214:	80c00c04 	addi	r3,r16,48
    2218:	00800c04 	movi	r2,48
    221c:	d8c008c5 	stb	r3,35(sp)
    2220:	d9800804 	addi	r6,sp,32
    2224:	d8c00904 	addi	r3,sp,36
    2228:	d8800885 	stb	r2,34(sp)
    222c:	003f6506 	br	1fc4 <___vfprintf_internal_r+0x1b88>
    2230:	d9014c17 	ldw	r4,1328(sp)
    2234:	2084703a 	and	r2,r4,r2
    2238:	103f9c26 	beq	r2,zero,20ac <___vfprintf_internal_r+0x1c70>
    223c:	003f6606 	br	1fd8 <___vfprintf_internal_r+0x1b9c>
    2240:	d9800804 	addi	r6,sp,32
    2244:	d8c00884 	addi	r3,sp,34
    2248:	003f5e06 	br	1fc4 <___vfprintf_internal_r+0x1b88>
    224c:	00800b44 	movi	r2,45
    2250:	0121c83a 	sub	r16,zero,r4
    2254:	d8800845 	stb	r2,33(sp)
    2258:	003f3d06 	br	1f50 <___vfprintf_internal_r+0x1b14>
    225c:	00800084 	movi	r2,2
    2260:	1105c83a 	sub	r2,r2,r4
    2264:	003fe606 	br	2200 <___vfprintf_internal_r+0x1dc4>
    2268:	d8014515 	stw	zero,1300(sp)
    226c:	dc814715 	stw	r18,1308(sp)
    2270:	003fb106 	br	2138 <___vfprintf_internal_r+0x1cfc>
    2274:	000d883a 	mov	r6,zero
    2278:	000f883a 	mov	r7,zero
    227c:	8009883a 	mov	r4,r16
    2280:	880b883a 	mov	r5,r17
    2284:	0008d000 	call	8d00 <__nedf2>
    2288:	103f9f26 	beq	r2,zero,2108 <___vfprintf_internal_r+0x1ccc>
    228c:	00800044 	movi	r2,1
    2290:	1509c83a 	sub	r4,r2,r20
    2294:	d9000515 	stw	r4,20(sp)
    2298:	003f9b06 	br	2108 <___vfprintf_internal_r+0x1ccc>
    229c:	98000d1e 	bne	r19,zero,22d4 <___vfprintf_internal_r+0x1e98>
    22a0:	d8c14c17 	ldw	r3,1328(sp)
    22a4:	1880004c 	andi	r2,r3,1
    22a8:	10000a1e 	bne	r2,zero,22d4 <___vfprintf_internal_r+0x1e98>
    22ac:	01000044 	movi	r4,1
    22b0:	200f883a 	mov	r7,r4
    22b4:	d9014515 	stw	r4,1300(sp)
    22b8:	003f4a06 	br	1fe4 <___vfprintf_internal_r+0x1ba8>
    22bc:	3cc00017 	ldw	r19,0(r7)
    22c0:	39c00104 	addi	r7,r7,4
    22c4:	983d0e0e 	bge	r19,zero,1700 <___vfprintf_internal_r+0x12c4>
    22c8:	b8c00007 	ldb	r3,0(r23)
    22cc:	04ffffc4 	movi	r19,-1
    22d0:	0038d906 	br	638 <___vfprintf_internal_r+0x1fc>
    22d4:	9cc00084 	addi	r19,r19,2
    22d8:	dcc14515 	stw	r19,1300(sp)
    22dc:	980f883a 	mov	r7,r19
    22e0:	983f400e 	bge	r19,zero,1fe4 <___vfprintf_internal_r+0x1ba8>
    22e4:	003f7306 	br	20b4 <___vfprintf_internal_r+0x1c78>

000022e8 <__vfprintf_internal>:
    22e8:	00800074 	movhi	r2,1
    22ec:	10bba904 	addi	r2,r2,-4444
    22f0:	2013883a 	mov	r9,r4
    22f4:	11000017 	ldw	r4,0(r2)
    22f8:	2805883a 	mov	r2,r5
    22fc:	300f883a 	mov	r7,r6
    2300:	480b883a 	mov	r5,r9
    2304:	100d883a 	mov	r6,r2
    2308:	000043c1 	jmpi	43c <___vfprintf_internal_r>

0000230c <__swsetup_r>:
    230c:	00800074 	movhi	r2,1
    2310:	10bba904 	addi	r2,r2,-4444
    2314:	10c00017 	ldw	r3,0(r2)
    2318:	defffd04 	addi	sp,sp,-12
    231c:	dc400115 	stw	r17,4(sp)
    2320:	dc000015 	stw	r16,0(sp)
    2324:	dfc00215 	stw	ra,8(sp)
    2328:	2023883a 	mov	r17,r4
    232c:	2821883a 	mov	r16,r5
    2330:	18000226 	beq	r3,zero,233c <__swsetup_r+0x30>
    2334:	18800e17 	ldw	r2,56(r3)
    2338:	10001f26 	beq	r2,zero,23b8 <__swsetup_r+0xac>
    233c:	8100030b 	ldhu	r4,12(r16)
    2340:	2080020c 	andi	r2,r4,8
    2344:	10002826 	beq	r2,zero,23e8 <__swsetup_r+0xdc>
    2348:	81400417 	ldw	r5,16(r16)
    234c:	28001d26 	beq	r5,zero,23c4 <__swsetup_r+0xb8>
    2350:	2080004c 	andi	r2,r4,1
    2354:	1005003a 	cmpeq	r2,r2,zero
    2358:	10000b26 	beq	r2,zero,2388 <__swsetup_r+0x7c>
    235c:	2080008c 	andi	r2,r4,2
    2360:	10001226 	beq	r2,zero,23ac <__swsetup_r+0xa0>
    2364:	0005883a 	mov	r2,zero
    2368:	80800215 	stw	r2,8(r16)
    236c:	28000b26 	beq	r5,zero,239c <__swsetup_r+0x90>
    2370:	0005883a 	mov	r2,zero
    2374:	dfc00217 	ldw	ra,8(sp)
    2378:	dc400117 	ldw	r17,4(sp)
    237c:	dc000017 	ldw	r16,0(sp)
    2380:	dec00304 	addi	sp,sp,12
    2384:	f800283a 	ret
    2388:	80800517 	ldw	r2,20(r16)
    238c:	80000215 	stw	zero,8(r16)
    2390:	0085c83a 	sub	r2,zero,r2
    2394:	80800615 	stw	r2,24(r16)
    2398:	283ff51e 	bne	r5,zero,2370 <__swsetup_r+0x64>
    239c:	2080200c 	andi	r2,r4,128
    23a0:	103ff326 	beq	r2,zero,2370 <__swsetup_r+0x64>
    23a4:	00bfffc4 	movi	r2,-1
    23a8:	003ff206 	br	2374 <__swsetup_r+0x68>
    23ac:	80800517 	ldw	r2,20(r16)
    23b0:	80800215 	stw	r2,8(r16)
    23b4:	003fed06 	br	236c <__swsetup_r+0x60>
    23b8:	1809883a 	mov	r4,r3
    23bc:	0003eac0 	call	3eac <__sinit>
    23c0:	003fde06 	br	233c <__swsetup_r+0x30>
    23c4:	20c0a00c 	andi	r3,r4,640
    23c8:	00808004 	movi	r2,512
    23cc:	18bfe026 	beq	r3,r2,2350 <__swsetup_r+0x44>
    23d0:	8809883a 	mov	r4,r17
    23d4:	800b883a 	mov	r5,r16
    23d8:	0004c240 	call	4c24 <__smakebuf_r>
    23dc:	8100030b 	ldhu	r4,12(r16)
    23e0:	81400417 	ldw	r5,16(r16)
    23e4:	003fda06 	br	2350 <__swsetup_r+0x44>
    23e8:	2080040c 	andi	r2,r4,16
    23ec:	103fed26 	beq	r2,zero,23a4 <__swsetup_r+0x98>
    23f0:	2080010c 	andi	r2,r4,4
    23f4:	10001226 	beq	r2,zero,2440 <__swsetup_r+0x134>
    23f8:	81400c17 	ldw	r5,48(r16)
    23fc:	28000526 	beq	r5,zero,2414 <__swsetup_r+0x108>
    2400:	80801004 	addi	r2,r16,64
    2404:	28800226 	beq	r5,r2,2410 <__swsetup_r+0x104>
    2408:	8809883a 	mov	r4,r17
    240c:	00042300 	call	4230 <_free_r>
    2410:	80000c15 	stw	zero,48(r16)
    2414:	8080030b 	ldhu	r2,12(r16)
    2418:	81400417 	ldw	r5,16(r16)
    241c:	80000115 	stw	zero,4(r16)
    2420:	10bff6cc 	andi	r2,r2,65499
    2424:	8080030d 	sth	r2,12(r16)
    2428:	81400015 	stw	r5,0(r16)
    242c:	8080030b 	ldhu	r2,12(r16)
    2430:	10800214 	ori	r2,r2,8
    2434:	113fffcc 	andi	r4,r2,65535
    2438:	8080030d 	sth	r2,12(r16)
    243c:	003fc306 	br	234c <__swsetup_r+0x40>
    2440:	81400417 	ldw	r5,16(r16)
    2444:	003ff906 	br	242c <__swsetup_r+0x120>

00002448 <quorem>:
    2448:	28c00417 	ldw	r3,16(r5)
    244c:	20800417 	ldw	r2,16(r4)
    2450:	defff604 	addi	sp,sp,-40
    2454:	ddc00715 	stw	r23,28(sp)
    2458:	dd400515 	stw	r21,20(sp)
    245c:	dfc00915 	stw	ra,36(sp)
    2460:	df000815 	stw	fp,32(sp)
    2464:	dd800615 	stw	r22,24(sp)
    2468:	dd000415 	stw	r20,16(sp)
    246c:	dcc00315 	stw	r19,12(sp)
    2470:	dc800215 	stw	r18,8(sp)
    2474:	dc400115 	stw	r17,4(sp)
    2478:	dc000015 	stw	r16,0(sp)
    247c:	202f883a 	mov	r23,r4
    2480:	282b883a 	mov	r21,r5
    2484:	10c07416 	blt	r2,r3,2658 <quorem+0x210>
    2488:	1c7fffc4 	addi	r17,r3,-1
    248c:	8c45883a 	add	r2,r17,r17
    2490:	1085883a 	add	r2,r2,r2
    2494:	2c000504 	addi	r16,r5,20
    2498:	24c00504 	addi	r19,r4,20
    249c:	14ed883a 	add	r22,r2,r19
    24a0:	80a5883a 	add	r18,r16,r2
    24a4:	b7000017 	ldw	fp,0(r22)
    24a8:	91400017 	ldw	r5,0(r18)
    24ac:	e009883a 	mov	r4,fp
    24b0:	29400044 	addi	r5,r5,1
    24b4:	00093c00 	call	93c0 <__udivsi3>
    24b8:	1029883a 	mov	r20,r2
    24bc:	10003c1e 	bne	r2,zero,25b0 <quorem+0x168>
    24c0:	a80b883a 	mov	r5,r21
    24c4:	b809883a 	mov	r4,r23
    24c8:	00059500 	call	5950 <__mcmp>
    24cc:	10002b16 	blt	r2,zero,257c <quorem+0x134>
    24d0:	a5000044 	addi	r20,r20,1
    24d4:	980f883a 	mov	r7,r19
    24d8:	0011883a 	mov	r8,zero
    24dc:	0009883a 	mov	r4,zero
    24e0:	81400017 	ldw	r5,0(r16)
    24e4:	38c00017 	ldw	r3,0(r7)
    24e8:	84000104 	addi	r16,r16,4
    24ec:	28bfffcc 	andi	r2,r5,65535
    24f0:	2085883a 	add	r2,r4,r2
    24f4:	11bfffcc 	andi	r6,r2,65535
    24f8:	193fffcc 	andi	r4,r3,65535
    24fc:	1004d43a 	srli	r2,r2,16
    2500:	280ad43a 	srli	r5,r5,16
    2504:	2189c83a 	sub	r4,r4,r6
    2508:	2209883a 	add	r4,r4,r8
    250c:	1806d43a 	srli	r3,r3,16
    2510:	288b883a 	add	r5,r5,r2
    2514:	200dd43a 	srai	r6,r4,16
    2518:	28bfffcc 	andi	r2,r5,65535
    251c:	1887c83a 	sub	r3,r3,r2
    2520:	1987883a 	add	r3,r3,r6
    2524:	3900000d 	sth	r4,0(r7)
    2528:	38c0008d 	sth	r3,2(r7)
    252c:	2808d43a 	srli	r4,r5,16
    2530:	39c00104 	addi	r7,r7,4
    2534:	1811d43a 	srai	r8,r3,16
    2538:	943fe92e 	bgeu	r18,r16,24e0 <quorem+0x98>
    253c:	8c45883a 	add	r2,r17,r17
    2540:	1085883a 	add	r2,r2,r2
    2544:	9885883a 	add	r2,r19,r2
    2548:	10c00017 	ldw	r3,0(r2)
    254c:	18000b1e 	bne	r3,zero,257c <quorem+0x134>
    2550:	113fff04 	addi	r4,r2,-4
    2554:	9900082e 	bgeu	r19,r4,2578 <quorem+0x130>
    2558:	10bfff17 	ldw	r2,-4(r2)
    255c:	10000326 	beq	r2,zero,256c <quorem+0x124>
    2560:	00000506 	br	2578 <quorem+0x130>
    2564:	20800017 	ldw	r2,0(r4)
    2568:	1000031e 	bne	r2,zero,2578 <quorem+0x130>
    256c:	213fff04 	addi	r4,r4,-4
    2570:	8c7fffc4 	addi	r17,r17,-1
    2574:	993ffb36 	bltu	r19,r4,2564 <quorem+0x11c>
    2578:	bc400415 	stw	r17,16(r23)
    257c:	a005883a 	mov	r2,r20
    2580:	dfc00917 	ldw	ra,36(sp)
    2584:	df000817 	ldw	fp,32(sp)
    2588:	ddc00717 	ldw	r23,28(sp)
    258c:	dd800617 	ldw	r22,24(sp)
    2590:	dd400517 	ldw	r21,20(sp)
    2594:	dd000417 	ldw	r20,16(sp)
    2598:	dcc00317 	ldw	r19,12(sp)
    259c:	dc800217 	ldw	r18,8(sp)
    25a0:	dc400117 	ldw	r17,4(sp)
    25a4:	dc000017 	ldw	r16,0(sp)
    25a8:	dec00a04 	addi	sp,sp,40
    25ac:	f800283a 	ret
    25b0:	980f883a 	mov	r7,r19
    25b4:	8011883a 	mov	r8,r16
    25b8:	0013883a 	mov	r9,zero
    25bc:	000d883a 	mov	r6,zero
    25c0:	40c00017 	ldw	r3,0(r8)
    25c4:	39000017 	ldw	r4,0(r7)
    25c8:	42000104 	addi	r8,r8,4
    25cc:	18bfffcc 	andi	r2,r3,65535
    25d0:	a085383a 	mul	r2,r20,r2
    25d4:	1806d43a 	srli	r3,r3,16
    25d8:	217fffcc 	andi	r5,r4,65535
    25dc:	3085883a 	add	r2,r6,r2
    25e0:	11bfffcc 	andi	r6,r2,65535
    25e4:	a0c7383a 	mul	r3,r20,r3
    25e8:	1004d43a 	srli	r2,r2,16
    25ec:	298bc83a 	sub	r5,r5,r6
    25f0:	2a4b883a 	add	r5,r5,r9
    25f4:	2008d43a 	srli	r4,r4,16
    25f8:	1887883a 	add	r3,r3,r2
    25fc:	280dd43a 	srai	r6,r5,16
    2600:	18bfffcc 	andi	r2,r3,65535
    2604:	2089c83a 	sub	r4,r4,r2
    2608:	2189883a 	add	r4,r4,r6
    260c:	3900008d 	sth	r4,2(r7)
    2610:	3940000d 	sth	r5,0(r7)
    2614:	180cd43a 	srli	r6,r3,16
    2618:	39c00104 	addi	r7,r7,4
    261c:	2013d43a 	srai	r9,r4,16
    2620:	923fe72e 	bgeu	r18,r8,25c0 <quorem+0x178>
    2624:	e03fa61e 	bne	fp,zero,24c0 <quorem+0x78>
    2628:	b0ffff04 	addi	r3,r22,-4
    262c:	98c0082e 	bgeu	r19,r3,2650 <quorem+0x208>
    2630:	b0bfff17 	ldw	r2,-4(r22)
    2634:	10000326 	beq	r2,zero,2644 <quorem+0x1fc>
    2638:	00000506 	br	2650 <quorem+0x208>
    263c:	18800017 	ldw	r2,0(r3)
    2640:	1000031e 	bne	r2,zero,2650 <quorem+0x208>
    2644:	18ffff04 	addi	r3,r3,-4
    2648:	8c7fffc4 	addi	r17,r17,-1
    264c:	98fffb36 	bltu	r19,r3,263c <quorem+0x1f4>
    2650:	bc400415 	stw	r17,16(r23)
    2654:	003f9a06 	br	24c0 <quorem+0x78>
    2658:	0005883a 	mov	r2,zero
    265c:	003fc806 	br	2580 <quorem+0x138>

00002660 <_dtoa_r>:
    2660:	22001017 	ldw	r8,64(r4)
    2664:	deffda04 	addi	sp,sp,-152
    2668:	dd402115 	stw	r21,132(sp)
    266c:	dd002015 	stw	r20,128(sp)
    2670:	dc801e15 	stw	r18,120(sp)
    2674:	dc401d15 	stw	r17,116(sp)
    2678:	dfc02515 	stw	ra,148(sp)
    267c:	df002415 	stw	fp,144(sp)
    2680:	ddc02315 	stw	r23,140(sp)
    2684:	dd802215 	stw	r22,136(sp)
    2688:	dcc01f15 	stw	r19,124(sp)
    268c:	dc001c15 	stw	r16,112(sp)
    2690:	d9001615 	stw	r4,88(sp)
    2694:	3023883a 	mov	r17,r6
    2698:	2829883a 	mov	r20,r5
    269c:	d9c01715 	stw	r7,92(sp)
    26a0:	dc802817 	ldw	r18,160(sp)
    26a4:	302b883a 	mov	r21,r6
    26a8:	40000a26 	beq	r8,zero,26d4 <_dtoa_r+0x74>
    26ac:	20801117 	ldw	r2,68(r4)
    26b0:	400b883a 	mov	r5,r8
    26b4:	40800115 	stw	r2,4(r8)
    26b8:	20c01117 	ldw	r3,68(r4)
    26bc:	00800044 	movi	r2,1
    26c0:	10c4983a 	sll	r2,r2,r3
    26c4:	40800215 	stw	r2,8(r8)
    26c8:	00057f40 	call	57f4 <_Bfree>
    26cc:	d8c01617 	ldw	r3,88(sp)
    26d0:	18001015 	stw	zero,64(r3)
    26d4:	8800a316 	blt	r17,zero,2964 <_dtoa_r+0x304>
    26d8:	90000015 	stw	zero,0(r18)
    26dc:	a8dffc2c 	andhi	r3,r21,32752
    26e0:	009ffc34 	movhi	r2,32752
    26e4:	18809126 	beq	r3,r2,292c <_dtoa_r+0x2cc>
    26e8:	000d883a 	mov	r6,zero
    26ec:	000f883a 	mov	r7,zero
    26f0:	a009883a 	mov	r4,r20
    26f4:	a80b883a 	mov	r5,r21
    26f8:	dd001215 	stw	r20,72(sp)
    26fc:	dd401315 	stw	r21,76(sp)
    2700:	0008d000 	call	8d00 <__nedf2>
    2704:	1000171e 	bne	r2,zero,2764 <_dtoa_r+0x104>
    2708:	d9802717 	ldw	r6,156(sp)
    270c:	00800044 	movi	r2,1
    2710:	30800015 	stw	r2,0(r6)
    2714:	d8802917 	ldw	r2,164(sp)
    2718:	10029b26 	beq	r2,zero,3188 <_dtoa_r+0xb28>
    271c:	d9002917 	ldw	r4,164(sp)
    2720:	00800074 	movhi	r2,1
    2724:	10b3ff44 	addi	r2,r2,-12291
    2728:	10ffffc4 	addi	r3,r2,-1
    272c:	20800015 	stw	r2,0(r4)
    2730:	1805883a 	mov	r2,r3
    2734:	dfc02517 	ldw	ra,148(sp)
    2738:	df002417 	ldw	fp,144(sp)
    273c:	ddc02317 	ldw	r23,140(sp)
    2740:	dd802217 	ldw	r22,136(sp)
    2744:	dd402117 	ldw	r21,132(sp)
    2748:	dd002017 	ldw	r20,128(sp)
    274c:	dcc01f17 	ldw	r19,124(sp)
    2750:	dc801e17 	ldw	r18,120(sp)
    2754:	dc401d17 	ldw	r17,116(sp)
    2758:	dc001c17 	ldw	r16,112(sp)
    275c:	dec02604 	addi	sp,sp,152
    2760:	f800283a 	ret
    2764:	d9001617 	ldw	r4,88(sp)
    2768:	d9401217 	ldw	r5,72(sp)
    276c:	d8800104 	addi	r2,sp,4
    2770:	a80d883a 	mov	r6,r21
    2774:	d9c00204 	addi	r7,sp,8
    2778:	d8800015 	stw	r2,0(sp)
    277c:	0005e300 	call	5e30 <__d2b>
    2780:	d8800715 	stw	r2,28(sp)
    2784:	a804d53a 	srli	r2,r21,20
    2788:	1101ffcc 	andi	r4,r2,2047
    278c:	20008626 	beq	r4,zero,29a8 <_dtoa_r+0x348>
    2790:	d8c01217 	ldw	r3,72(sp)
    2794:	00800434 	movhi	r2,16
    2798:	10bfffc4 	addi	r2,r2,-1
    279c:	ddc00117 	ldw	r23,4(sp)
    27a0:	a884703a 	and	r2,r21,r2
    27a4:	1811883a 	mov	r8,r3
    27a8:	124ffc34 	orhi	r9,r2,16368
    27ac:	25bf0044 	addi	r22,r4,-1023
    27b0:	d8000815 	stw	zero,32(sp)
    27b4:	0005883a 	mov	r2,zero
    27b8:	00cffe34 	movhi	r3,16376
    27bc:	480b883a 	mov	r5,r9
    27c0:	4009883a 	mov	r4,r8
    27c4:	180f883a 	mov	r7,r3
    27c8:	100d883a 	mov	r6,r2
    27cc:	00085680 	call	8568 <__subdf3>
    27d0:	0218dbf4 	movhi	r8,25455
    27d4:	4210d844 	addi	r8,r8,17249
    27d8:	024ff4f4 	movhi	r9,16339
    27dc:	4a61e9c4 	addi	r9,r9,-30809
    27e0:	480f883a 	mov	r7,r9
    27e4:	400d883a 	mov	r6,r8
    27e8:	180b883a 	mov	r5,r3
    27ec:	1009883a 	mov	r4,r2
    27f0:	000865c0 	call	865c <__muldf3>
    27f4:	0222d874 	movhi	r8,35681
    27f8:	42322cc4 	addi	r8,r8,-14157
    27fc:	024ff1f4 	movhi	r9,16327
    2800:	4a628a04 	addi	r9,r9,-30168
    2804:	480f883a 	mov	r7,r9
    2808:	400d883a 	mov	r6,r8
    280c:	180b883a 	mov	r5,r3
    2810:	1009883a 	mov	r4,r2
    2814:	00085e80 	call	85e8 <__adddf3>
    2818:	b009883a 	mov	r4,r22
    281c:	1021883a 	mov	r16,r2
    2820:	1823883a 	mov	r17,r3
    2824:	0008f200 	call	8f20 <__floatsidf>
    2828:	021427f4 	movhi	r8,20639
    282c:	421e7ec4 	addi	r8,r8,31227
    2830:	024ff4f4 	movhi	r9,16339
    2834:	4a5104c4 	addi	r9,r9,17427
    2838:	480f883a 	mov	r7,r9
    283c:	400d883a 	mov	r6,r8
    2840:	180b883a 	mov	r5,r3
    2844:	1009883a 	mov	r4,r2
    2848:	000865c0 	call	865c <__muldf3>
    284c:	180f883a 	mov	r7,r3
    2850:	880b883a 	mov	r5,r17
    2854:	100d883a 	mov	r6,r2
    2858:	8009883a 	mov	r4,r16
    285c:	00085e80 	call	85e8 <__adddf3>
    2860:	1009883a 	mov	r4,r2
    2864:	180b883a 	mov	r5,r3
    2868:	1021883a 	mov	r16,r2
    286c:	1823883a 	mov	r17,r3
    2870:	00090180 	call	9018 <__fixdfsi>
    2874:	000d883a 	mov	r6,zero
    2878:	000f883a 	mov	r7,zero
    287c:	8009883a 	mov	r4,r16
    2880:	880b883a 	mov	r5,r17
    2884:	d8800d15 	stw	r2,52(sp)
    2888:	0008e980 	call	8e98 <__ltdf2>
    288c:	10031716 	blt	r2,zero,34ec <_dtoa_r+0xe8c>
    2890:	d8c00d17 	ldw	r3,52(sp)
    2894:	00800584 	movi	r2,22
    2898:	10c1482e 	bgeu	r2,r3,2dbc <_dtoa_r+0x75c>
    289c:	01000044 	movi	r4,1
    28a0:	d9000c15 	stw	r4,48(sp)
    28a4:	bd85c83a 	sub	r2,r23,r22
    28a8:	11bfffc4 	addi	r6,r2,-1
    28ac:	30030b16 	blt	r6,zero,34dc <_dtoa_r+0xe7c>
    28b0:	d9800a15 	stw	r6,40(sp)
    28b4:	d8001115 	stw	zero,68(sp)
    28b8:	d8c00d17 	ldw	r3,52(sp)
    28bc:	1802ff16 	blt	r3,zero,34bc <_dtoa_r+0xe5c>
    28c0:	d9000a17 	ldw	r4,40(sp)
    28c4:	d8c00915 	stw	r3,36(sp)
    28c8:	d8001015 	stw	zero,64(sp)
    28cc:	20c9883a 	add	r4,r4,r3
    28d0:	d9000a15 	stw	r4,40(sp)
    28d4:	d9001717 	ldw	r4,92(sp)
    28d8:	00800244 	movi	r2,9
    28dc:	11004636 	bltu	r2,r4,29f8 <_dtoa_r+0x398>
    28e0:	00800144 	movi	r2,5
    28e4:	11020416 	blt	r2,r4,30f8 <_dtoa_r+0xa98>
    28e8:	04400044 	movi	r17,1
    28ec:	d8c01717 	ldw	r3,92(sp)
    28f0:	00800144 	movi	r2,5
    28f4:	10c1ed36 	bltu	r2,r3,30ac <_dtoa_r+0xa4c>
    28f8:	18c5883a 	add	r2,r3,r3
    28fc:	1085883a 	add	r2,r2,r2
    2900:	00c00034 	movhi	r3,0
    2904:	18ca4504 	addi	r3,r3,10516
    2908:	10c5883a 	add	r2,r2,r3
    290c:	11000017 	ldw	r4,0(r2)
    2910:	2000683a 	jmp	r4
    2914:	00002a00 	call	2a0 <main+0xb0>
    2918:	00002a00 	call	2a0 <main+0xb0>
    291c:	00003400 	call	340 <main+0x150>
    2920:	000033d8 	cmpnei	zero,zero,207
    2924:	0000341c 	xori	zero,zero,208
    2928:	00003428 	cmpgeui	zero,zero,208
    292c:	d9002717 	ldw	r4,156(sp)
    2930:	0089c3c4 	movi	r2,9999
    2934:	20800015 	stw	r2,0(r4)
    2938:	a0001026 	beq	r20,zero,297c <_dtoa_r+0x31c>
    293c:	00c00074 	movhi	r3,1
    2940:	18f40b04 	addi	r3,r3,-12244
    2944:	d9802917 	ldw	r6,164(sp)
    2948:	303f7926 	beq	r6,zero,2730 <_dtoa_r+0xd0>
    294c:	188000c7 	ldb	r2,3(r3)
    2950:	190000c4 	addi	r4,r3,3
    2954:	1000101e 	bne	r2,zero,2998 <_dtoa_r+0x338>
    2958:	d8802917 	ldw	r2,164(sp)
    295c:	11000015 	stw	r4,0(r2)
    2960:	003f7306 	br	2730 <_dtoa_r+0xd0>
    2964:	00a00034 	movhi	r2,32768
    2968:	10bfffc4 	addi	r2,r2,-1
    296c:	00c00044 	movi	r3,1
    2970:	88aa703a 	and	r21,r17,r2
    2974:	90c00015 	stw	r3,0(r18)
    2978:	003f5806 	br	26dc <_dtoa_r+0x7c>
    297c:	00800434 	movhi	r2,16
    2980:	10bfffc4 	addi	r2,r2,-1
    2984:	a884703a 	and	r2,r21,r2
    2988:	103fec1e 	bne	r2,zero,293c <_dtoa_r+0x2dc>
    298c:	00c00074 	movhi	r3,1
    2990:	18f40804 	addi	r3,r3,-12256
    2994:	003feb06 	br	2944 <_dtoa_r+0x2e4>
    2998:	d8802917 	ldw	r2,164(sp)
    299c:	19000204 	addi	r4,r3,8
    29a0:	11000015 	stw	r4,0(r2)
    29a4:	003f6206 	br	2730 <_dtoa_r+0xd0>
    29a8:	ddc00117 	ldw	r23,4(sp)
    29ac:	d8800217 	ldw	r2,8(sp)
    29b0:	01000804 	movi	r4,32
    29b4:	b8c10c84 	addi	r3,r23,1074
    29b8:	18a3883a 	add	r17,r3,r2
    29bc:	2441b80e 	bge	r4,r17,30a0 <_dtoa_r+0xa40>
    29c0:	00c01004 	movi	r3,64
    29c4:	1c47c83a 	sub	r3,r3,r17
    29c8:	88bff804 	addi	r2,r17,-32
    29cc:	a8c6983a 	sll	r3,r21,r3
    29d0:	a084d83a 	srl	r2,r20,r2
    29d4:	1888b03a 	or	r4,r3,r2
    29d8:	00090f00 	call	90f0 <__floatunsidf>
    29dc:	1011883a 	mov	r8,r2
    29e0:	00bf8434 	movhi	r2,65040
    29e4:	01000044 	movi	r4,1
    29e8:	10d3883a 	add	r9,r2,r3
    29ec:	8dbef344 	addi	r22,r17,-1075
    29f0:	d9000815 	stw	r4,32(sp)
    29f4:	003f6f06 	br	27b4 <_dtoa_r+0x154>
    29f8:	d8001715 	stw	zero,92(sp)
    29fc:	04400044 	movi	r17,1
    2a00:	00bfffc4 	movi	r2,-1
    2a04:	00c00044 	movi	r3,1
    2a08:	d8800e15 	stw	r2,56(sp)
    2a0c:	d8002615 	stw	zero,152(sp)
    2a10:	d8800f15 	stw	r2,60(sp)
    2a14:	d8c00b15 	stw	r3,44(sp)
    2a18:	1021883a 	mov	r16,r2
    2a1c:	d8801617 	ldw	r2,88(sp)
    2a20:	10001115 	stw	zero,68(r2)
    2a24:	d8801617 	ldw	r2,88(sp)
    2a28:	11401117 	ldw	r5,68(r2)
    2a2c:	1009883a 	mov	r4,r2
    2a30:	0005d740 	call	5d74 <_Balloc>
    2a34:	d8c01617 	ldw	r3,88(sp)
    2a38:	d8800515 	stw	r2,20(sp)
    2a3c:	18801015 	stw	r2,64(r3)
    2a40:	00800384 	movi	r2,14
    2a44:	14006836 	bltu	r2,r16,2be8 <_dtoa_r+0x588>
    2a48:	8805003a 	cmpeq	r2,r17,zero
    2a4c:	1000661e 	bne	r2,zero,2be8 <_dtoa_r+0x588>
    2a50:	d9000d17 	ldw	r4,52(sp)
    2a54:	0102300e 	bge	zero,r4,3318 <_dtoa_r+0xcb8>
    2a58:	208003cc 	andi	r2,r4,15
    2a5c:	100490fa 	slli	r2,r2,3
    2a60:	2025d13a 	srai	r18,r4,4
    2a64:	00c00074 	movhi	r3,1
    2a68:	18f41d04 	addi	r3,r3,-12172
    2a6c:	10c5883a 	add	r2,r2,r3
    2a70:	90c0040c 	andi	r3,r18,16
    2a74:	14000017 	ldw	r16,0(r2)
    2a78:	14400117 	ldw	r17,4(r2)
    2a7c:	18036a1e 	bne	r3,zero,3828 <_dtoa_r+0x11c8>
    2a80:	05800084 	movi	r22,2
    2a84:	90001026 	beq	r18,zero,2ac8 <_dtoa_r+0x468>
    2a88:	04c00074 	movhi	r19,1
    2a8c:	9cf44f04 	addi	r19,r19,-11972
    2a90:	9080004c 	andi	r2,r18,1
    2a94:	1005003a 	cmpeq	r2,r2,zero
    2a98:	1000081e 	bne	r2,zero,2abc <_dtoa_r+0x45c>
    2a9c:	99800017 	ldw	r6,0(r19)
    2aa0:	99c00117 	ldw	r7,4(r19)
    2aa4:	880b883a 	mov	r5,r17
    2aa8:	8009883a 	mov	r4,r16
    2aac:	000865c0 	call	865c <__muldf3>
    2ab0:	1021883a 	mov	r16,r2
    2ab4:	b5800044 	addi	r22,r22,1
    2ab8:	1823883a 	mov	r17,r3
    2abc:	9025d07a 	srai	r18,r18,1
    2ac0:	9cc00204 	addi	r19,r19,8
    2ac4:	903ff21e 	bne	r18,zero,2a90 <_dtoa_r+0x430>
    2ac8:	a80b883a 	mov	r5,r21
    2acc:	a009883a 	mov	r4,r20
    2ad0:	880f883a 	mov	r7,r17
    2ad4:	800d883a 	mov	r6,r16
    2ad8:	0008a200 	call	8a20 <__divdf3>
    2adc:	1029883a 	mov	r20,r2
    2ae0:	182b883a 	mov	r21,r3
    2ae4:	d8c00c17 	ldw	r3,48(sp)
    2ae8:	1805003a 	cmpeq	r2,r3,zero
    2aec:	1000081e 	bne	r2,zero,2b10 <_dtoa_r+0x4b0>
    2af0:	0005883a 	mov	r2,zero
    2af4:	00cffc34 	movhi	r3,16368
    2af8:	180f883a 	mov	r7,r3
    2afc:	a009883a 	mov	r4,r20
    2b00:	a80b883a 	mov	r5,r21
    2b04:	100d883a 	mov	r6,r2
    2b08:	0008e980 	call	8e98 <__ltdf2>
    2b0c:	1003fe16 	blt	r2,zero,3b08 <_dtoa_r+0x14a8>
    2b10:	b009883a 	mov	r4,r22
    2b14:	0008f200 	call	8f20 <__floatsidf>
    2b18:	180b883a 	mov	r5,r3
    2b1c:	1009883a 	mov	r4,r2
    2b20:	a00d883a 	mov	r6,r20
    2b24:	a80f883a 	mov	r7,r21
    2b28:	000865c0 	call	865c <__muldf3>
    2b2c:	0011883a 	mov	r8,zero
    2b30:	02500734 	movhi	r9,16412
    2b34:	1009883a 	mov	r4,r2
    2b38:	180b883a 	mov	r5,r3
    2b3c:	480f883a 	mov	r7,r9
    2b40:	400d883a 	mov	r6,r8
    2b44:	00085e80 	call	85e8 <__adddf3>
    2b48:	d9000f17 	ldw	r4,60(sp)
    2b4c:	102d883a 	mov	r22,r2
    2b50:	00bf3034 	movhi	r2,64704
    2b54:	18b9883a 	add	fp,r3,r2
    2b58:	e02f883a 	mov	r23,fp
    2b5c:	20028f1e 	bne	r4,zero,359c <_dtoa_r+0xf3c>
    2b60:	0005883a 	mov	r2,zero
    2b64:	00d00534 	movhi	r3,16404
    2b68:	a009883a 	mov	r4,r20
    2b6c:	a80b883a 	mov	r5,r21
    2b70:	180f883a 	mov	r7,r3
    2b74:	100d883a 	mov	r6,r2
    2b78:	00085680 	call	8568 <__subdf3>
    2b7c:	1009883a 	mov	r4,r2
    2b80:	e00f883a 	mov	r7,fp
    2b84:	180b883a 	mov	r5,r3
    2b88:	b00d883a 	mov	r6,r22
    2b8c:	1025883a 	mov	r18,r2
    2b90:	1827883a 	mov	r19,r3
    2b94:	0008d880 	call	8d88 <__gtdf2>
    2b98:	00834f16 	blt	zero,r2,38d8 <_dtoa_r+0x1278>
    2b9c:	e0e0003c 	xorhi	r3,fp,32768
    2ba0:	9009883a 	mov	r4,r18
    2ba4:	980b883a 	mov	r5,r19
    2ba8:	180f883a 	mov	r7,r3
    2bac:	b00d883a 	mov	r6,r22
    2bb0:	0008e980 	call	8e98 <__ltdf2>
    2bb4:	1000080e 	bge	r2,zero,2bd8 <_dtoa_r+0x578>
    2bb8:	0027883a 	mov	r19,zero
    2bbc:	0025883a 	mov	r18,zero
    2bc0:	d8802617 	ldw	r2,152(sp)
    2bc4:	df000517 	ldw	fp,20(sp)
    2bc8:	d8000615 	stw	zero,24(sp)
    2bcc:	0084303a 	nor	r2,zero,r2
    2bd0:	d8800d15 	stw	r2,52(sp)
    2bd4:	00019b06 	br	3244 <_dtoa_r+0xbe4>
    2bd8:	d9801217 	ldw	r6,72(sp)
    2bdc:	d8801317 	ldw	r2,76(sp)
    2be0:	3029883a 	mov	r20,r6
    2be4:	102b883a 	mov	r21,r2
    2be8:	d8c00217 	ldw	r3,8(sp)
    2bec:	18008516 	blt	r3,zero,2e04 <_dtoa_r+0x7a4>
    2bf0:	d9000d17 	ldw	r4,52(sp)
    2bf4:	00800384 	movi	r2,14
    2bf8:	11008216 	blt	r2,r4,2e04 <_dtoa_r+0x7a4>
    2bfc:	200490fa 	slli	r2,r4,3
    2c00:	d9802617 	ldw	r6,152(sp)
    2c04:	00c00074 	movhi	r3,1
    2c08:	18f41d04 	addi	r3,r3,-12172
    2c0c:	10c5883a 	add	r2,r2,r3
    2c10:	14800017 	ldw	r18,0(r2)
    2c14:	14c00117 	ldw	r19,4(r2)
    2c18:	30031e16 	blt	r6,zero,3894 <_dtoa_r+0x1234>
    2c1c:	d9000517 	ldw	r4,20(sp)
    2c20:	d8c00f17 	ldw	r3,60(sp)
    2c24:	a823883a 	mov	r17,r21
    2c28:	a021883a 	mov	r16,r20
    2c2c:	192b883a 	add	r21,r3,r4
    2c30:	2039883a 	mov	fp,r4
    2c34:	00000f06 	br	2c74 <_dtoa_r+0x614>
    2c38:	0005883a 	mov	r2,zero
    2c3c:	00d00934 	movhi	r3,16420
    2c40:	5009883a 	mov	r4,r10
    2c44:	580b883a 	mov	r5,r11
    2c48:	180f883a 	mov	r7,r3
    2c4c:	100d883a 	mov	r6,r2
    2c50:	000865c0 	call	865c <__muldf3>
    2c54:	180b883a 	mov	r5,r3
    2c58:	000d883a 	mov	r6,zero
    2c5c:	000f883a 	mov	r7,zero
    2c60:	1009883a 	mov	r4,r2
    2c64:	1021883a 	mov	r16,r2
    2c68:	1823883a 	mov	r17,r3
    2c6c:	0008d000 	call	8d00 <__nedf2>
    2c70:	10004526 	beq	r2,zero,2d88 <_dtoa_r+0x728>
    2c74:	900d883a 	mov	r6,r18
    2c78:	980f883a 	mov	r7,r19
    2c7c:	8009883a 	mov	r4,r16
    2c80:	880b883a 	mov	r5,r17
    2c84:	0008a200 	call	8a20 <__divdf3>
    2c88:	180b883a 	mov	r5,r3
    2c8c:	1009883a 	mov	r4,r2
    2c90:	00090180 	call	9018 <__fixdfsi>
    2c94:	1009883a 	mov	r4,r2
    2c98:	1029883a 	mov	r20,r2
    2c9c:	0008f200 	call	8f20 <__floatsidf>
    2ca0:	180f883a 	mov	r7,r3
    2ca4:	9009883a 	mov	r4,r18
    2ca8:	980b883a 	mov	r5,r19
    2cac:	100d883a 	mov	r6,r2
    2cb0:	000865c0 	call	865c <__muldf3>
    2cb4:	180f883a 	mov	r7,r3
    2cb8:	880b883a 	mov	r5,r17
    2cbc:	8009883a 	mov	r4,r16
    2cc0:	100d883a 	mov	r6,r2
    2cc4:	00085680 	call	8568 <__subdf3>
    2cc8:	1015883a 	mov	r10,r2
    2ccc:	a0800c04 	addi	r2,r20,48
    2cd0:	e0800005 	stb	r2,0(fp)
    2cd4:	e7000044 	addi	fp,fp,1
    2cd8:	1817883a 	mov	r11,r3
    2cdc:	e57fd61e 	bne	fp,r21,2c38 <_dtoa_r+0x5d8>
    2ce0:	500d883a 	mov	r6,r10
    2ce4:	180f883a 	mov	r7,r3
    2ce8:	5009883a 	mov	r4,r10
    2cec:	180b883a 	mov	r5,r3
    2cf0:	00085e80 	call	85e8 <__adddf3>
    2cf4:	100d883a 	mov	r6,r2
    2cf8:	9009883a 	mov	r4,r18
    2cfc:	980b883a 	mov	r5,r19
    2d00:	180f883a 	mov	r7,r3
    2d04:	1021883a 	mov	r16,r2
    2d08:	1823883a 	mov	r17,r3
    2d0c:	0008e980 	call	8e98 <__ltdf2>
    2d10:	10000816 	blt	r2,zero,2d34 <_dtoa_r+0x6d4>
    2d14:	980b883a 	mov	r5,r19
    2d18:	800d883a 	mov	r6,r16
    2d1c:	880f883a 	mov	r7,r17
    2d20:	9009883a 	mov	r4,r18
    2d24:	0008c780 	call	8c78 <__eqdf2>
    2d28:	1000171e 	bne	r2,zero,2d88 <_dtoa_r+0x728>
    2d2c:	a080004c 	andi	r2,r20,1
    2d30:	10001526 	beq	r2,zero,2d88 <_dtoa_r+0x728>
    2d34:	d8800d17 	ldw	r2,52(sp)
    2d38:	d8800415 	stw	r2,16(sp)
    2d3c:	e009883a 	mov	r4,fp
    2d40:	213fffc4 	addi	r4,r4,-1
    2d44:	20c00007 	ldb	r3,0(r4)
    2d48:	00800e44 	movi	r2,57
    2d4c:	1880081e 	bne	r3,r2,2d70 <_dtoa_r+0x710>
    2d50:	d8800517 	ldw	r2,20(sp)
    2d54:	113ffa1e 	bne	r2,r4,2d40 <_dtoa_r+0x6e0>
    2d58:	d8c00417 	ldw	r3,16(sp)
    2d5c:	d9800517 	ldw	r6,20(sp)
    2d60:	00800c04 	movi	r2,48
    2d64:	18c00044 	addi	r3,r3,1
    2d68:	d8c00415 	stw	r3,16(sp)
    2d6c:	30800005 	stb	r2,0(r6)
    2d70:	20800003 	ldbu	r2,0(r4)
    2d74:	d8c00417 	ldw	r3,16(sp)
    2d78:	27000044 	addi	fp,r4,1
    2d7c:	10800044 	addi	r2,r2,1
    2d80:	d8c00d15 	stw	r3,52(sp)
    2d84:	20800005 	stb	r2,0(r4)
    2d88:	d9001617 	ldw	r4,88(sp)
    2d8c:	d9400717 	ldw	r5,28(sp)
    2d90:	00057f40 	call	57f4 <_Bfree>
    2d94:	e0000005 	stb	zero,0(fp)
    2d98:	d9800d17 	ldw	r6,52(sp)
    2d9c:	d8c02717 	ldw	r3,156(sp)
    2da0:	d9002917 	ldw	r4,164(sp)
    2da4:	30800044 	addi	r2,r6,1
    2da8:	18800015 	stw	r2,0(r3)
    2dac:	20029c26 	beq	r4,zero,3820 <_dtoa_r+0x11c0>
    2db0:	d8c00517 	ldw	r3,20(sp)
    2db4:	27000015 	stw	fp,0(r4)
    2db8:	003e5d06 	br	2730 <_dtoa_r+0xd0>
    2dbc:	d9800d17 	ldw	r6,52(sp)
    2dc0:	00c00074 	movhi	r3,1
    2dc4:	18f41d04 	addi	r3,r3,-12172
    2dc8:	d9001217 	ldw	r4,72(sp)
    2dcc:	300490fa 	slli	r2,r6,3
    2dd0:	d9401317 	ldw	r5,76(sp)
    2dd4:	10c5883a 	add	r2,r2,r3
    2dd8:	12000017 	ldw	r8,0(r2)
    2ddc:	12400117 	ldw	r9,4(r2)
    2de0:	400d883a 	mov	r6,r8
    2de4:	480f883a 	mov	r7,r9
    2de8:	0008e980 	call	8e98 <__ltdf2>
    2dec:	1000030e 	bge	r2,zero,2dfc <_dtoa_r+0x79c>
    2df0:	d8800d17 	ldw	r2,52(sp)
    2df4:	10bfffc4 	addi	r2,r2,-1
    2df8:	d8800d15 	stw	r2,52(sp)
    2dfc:	d8000c15 	stw	zero,48(sp)
    2e00:	003ea806 	br	28a4 <_dtoa_r+0x244>
    2e04:	d9000b17 	ldw	r4,44(sp)
    2e08:	202cc03a 	cmpne	r22,r4,zero
    2e0c:	b000c71e 	bne	r22,zero,312c <_dtoa_r+0xacc>
    2e10:	dc001117 	ldw	r16,68(sp)
    2e14:	dc801017 	ldw	r18,64(sp)
    2e18:	0027883a 	mov	r19,zero
    2e1c:	04000b0e 	bge	zero,r16,2e4c <_dtoa_r+0x7ec>
    2e20:	d8c00a17 	ldw	r3,40(sp)
    2e24:	00c0090e 	bge	zero,r3,2e4c <_dtoa_r+0x7ec>
    2e28:	8005883a 	mov	r2,r16
    2e2c:	1c011316 	blt	r3,r16,327c <_dtoa_r+0xc1c>
    2e30:	d9000a17 	ldw	r4,40(sp)
    2e34:	d9801117 	ldw	r6,68(sp)
    2e38:	80a1c83a 	sub	r16,r16,r2
    2e3c:	2089c83a 	sub	r4,r4,r2
    2e40:	308dc83a 	sub	r6,r6,r2
    2e44:	d9000a15 	stw	r4,40(sp)
    2e48:	d9801115 	stw	r6,68(sp)
    2e4c:	d8801017 	ldw	r2,64(sp)
    2e50:	0080150e 	bge	zero,r2,2ea8 <_dtoa_r+0x848>
    2e54:	d8c00b17 	ldw	r3,44(sp)
    2e58:	1805003a 	cmpeq	r2,r3,zero
    2e5c:	1001c91e 	bne	r2,zero,3584 <_dtoa_r+0xf24>
    2e60:	04800e0e 	bge	zero,r18,2e9c <_dtoa_r+0x83c>
    2e64:	d9001617 	ldw	r4,88(sp)
    2e68:	980b883a 	mov	r5,r19
    2e6c:	900d883a 	mov	r6,r18
    2e70:	00065a80 	call	65a8 <__pow5mult>
    2e74:	d9001617 	ldw	r4,88(sp)
    2e78:	d9800717 	ldw	r6,28(sp)
    2e7c:	100b883a 	mov	r5,r2
    2e80:	1027883a 	mov	r19,r2
    2e84:	00062840 	call	6284 <__multiply>
    2e88:	d9001617 	ldw	r4,88(sp)
    2e8c:	d9400717 	ldw	r5,28(sp)
    2e90:	1023883a 	mov	r17,r2
    2e94:	00057f40 	call	57f4 <_Bfree>
    2e98:	dc400715 	stw	r17,28(sp)
    2e9c:	d9001017 	ldw	r4,64(sp)
    2ea0:	248dc83a 	sub	r6,r4,r18
    2ea4:	30010e1e 	bne	r6,zero,32e0 <_dtoa_r+0xc80>
    2ea8:	d9001617 	ldw	r4,88(sp)
    2eac:	04400044 	movi	r17,1
    2eb0:	880b883a 	mov	r5,r17
    2eb4:	000646c0 	call	646c <__i2b>
    2eb8:	d9800917 	ldw	r6,36(sp)
    2ebc:	1025883a 	mov	r18,r2
    2ec0:	0180040e 	bge	zero,r6,2ed4 <_dtoa_r+0x874>
    2ec4:	d9001617 	ldw	r4,88(sp)
    2ec8:	100b883a 	mov	r5,r2
    2ecc:	00065a80 	call	65a8 <__pow5mult>
    2ed0:	1025883a 	mov	r18,r2
    2ed4:	d8801717 	ldw	r2,92(sp)
    2ed8:	8880f30e 	bge	r17,r2,32a8 <_dtoa_r+0xc48>
    2edc:	0023883a 	mov	r17,zero
    2ee0:	d9800917 	ldw	r6,36(sp)
    2ee4:	30019e1e 	bne	r6,zero,3560 <_dtoa_r+0xf00>
    2ee8:	00c00044 	movi	r3,1
    2eec:	d9000a17 	ldw	r4,40(sp)
    2ef0:	20c5883a 	add	r2,r4,r3
    2ef4:	10c007cc 	andi	r3,r2,31
    2ef8:	1800841e 	bne	r3,zero,310c <_dtoa_r+0xaac>
    2efc:	00800704 	movi	r2,28
    2f00:	d9000a17 	ldw	r4,40(sp)
    2f04:	d9801117 	ldw	r6,68(sp)
    2f08:	80a1883a 	add	r16,r16,r2
    2f0c:	2089883a 	add	r4,r4,r2
    2f10:	308d883a 	add	r6,r6,r2
    2f14:	d9000a15 	stw	r4,40(sp)
    2f18:	d9801115 	stw	r6,68(sp)
    2f1c:	d8801117 	ldw	r2,68(sp)
    2f20:	0080050e 	bge	zero,r2,2f38 <_dtoa_r+0x8d8>
    2f24:	d9400717 	ldw	r5,28(sp)
    2f28:	d9001617 	ldw	r4,88(sp)
    2f2c:	100d883a 	mov	r6,r2
    2f30:	00061380 	call	6138 <__lshift>
    2f34:	d8800715 	stw	r2,28(sp)
    2f38:	d8c00a17 	ldw	r3,40(sp)
    2f3c:	00c0050e 	bge	zero,r3,2f54 <_dtoa_r+0x8f4>
    2f40:	d9001617 	ldw	r4,88(sp)
    2f44:	900b883a 	mov	r5,r18
    2f48:	180d883a 	mov	r6,r3
    2f4c:	00061380 	call	6138 <__lshift>
    2f50:	1025883a 	mov	r18,r2
    2f54:	d9000c17 	ldw	r4,48(sp)
    2f58:	2005003a 	cmpeq	r2,r4,zero
    2f5c:	10016f26 	beq	r2,zero,351c <_dtoa_r+0xebc>
    2f60:	d9000f17 	ldw	r4,60(sp)
    2f64:	0102170e 	bge	zero,r4,37c4 <_dtoa_r+0x1164>
    2f68:	d9800b17 	ldw	r6,44(sp)
    2f6c:	3005003a 	cmpeq	r2,r6,zero
    2f70:	1000881e 	bne	r2,zero,3194 <_dtoa_r+0xb34>
    2f74:	0400050e 	bge	zero,r16,2f8c <_dtoa_r+0x92c>
    2f78:	d9001617 	ldw	r4,88(sp)
    2f7c:	980b883a 	mov	r5,r19
    2f80:	800d883a 	mov	r6,r16
    2f84:	00061380 	call	6138 <__lshift>
    2f88:	1027883a 	mov	r19,r2
    2f8c:	8804c03a 	cmpne	r2,r17,zero
    2f90:	1002541e 	bne	r2,zero,38e4 <_dtoa_r+0x1284>
    2f94:	980b883a 	mov	r5,r19
    2f98:	dd800517 	ldw	r22,20(sp)
    2f9c:	dcc00615 	stw	r19,24(sp)
    2fa0:	a700004c 	andi	fp,r20,1
    2fa4:	2827883a 	mov	r19,r5
    2fa8:	d9000717 	ldw	r4,28(sp)
    2fac:	900b883a 	mov	r5,r18
    2fb0:	00024480 	call	2448 <quorem>
    2fb4:	d9000717 	ldw	r4,28(sp)
    2fb8:	d9400617 	ldw	r5,24(sp)
    2fbc:	1023883a 	mov	r17,r2
    2fc0:	8dc00c04 	addi	r23,r17,48
    2fc4:	00059500 	call	5950 <__mcmp>
    2fc8:	d9001617 	ldw	r4,88(sp)
    2fcc:	900b883a 	mov	r5,r18
    2fd0:	980d883a 	mov	r6,r19
    2fd4:	1029883a 	mov	r20,r2
    2fd8:	0005fac0 	call	5fac <__mdiff>
    2fdc:	102b883a 	mov	r21,r2
    2fe0:	10800317 	ldw	r2,12(r2)
    2fe4:	1001281e 	bne	r2,zero,3488 <_dtoa_r+0xe28>
    2fe8:	d9000717 	ldw	r4,28(sp)
    2fec:	a80b883a 	mov	r5,r21
    2ff0:	00059500 	call	5950 <__mcmp>
    2ff4:	d9001617 	ldw	r4,88(sp)
    2ff8:	1021883a 	mov	r16,r2
    2ffc:	a80b883a 	mov	r5,r21
    3000:	00057f40 	call	57f4 <_Bfree>
    3004:	8000041e 	bne	r16,zero,3018 <_dtoa_r+0x9b8>
    3008:	d8801717 	ldw	r2,92(sp)
    300c:	1000021e 	bne	r2,zero,3018 <_dtoa_r+0x9b8>
    3010:	e004c03a 	cmpne	r2,fp,zero
    3014:	10011726 	beq	r2,zero,3474 <_dtoa_r+0xe14>
    3018:	a0010616 	blt	r20,zero,3434 <_dtoa_r+0xdd4>
    301c:	a000041e 	bne	r20,zero,3030 <_dtoa_r+0x9d0>
    3020:	d8c01717 	ldw	r3,92(sp)
    3024:	1800021e 	bne	r3,zero,3030 <_dtoa_r+0x9d0>
    3028:	e004c03a 	cmpne	r2,fp,zero
    302c:	10010126 	beq	r2,zero,3434 <_dtoa_r+0xdd4>
    3030:	04023d16 	blt	zero,r16,3928 <_dtoa_r+0x12c8>
    3034:	b5c00005 	stb	r23,0(r22)
    3038:	d9800517 	ldw	r6,20(sp)
    303c:	d9000f17 	ldw	r4,60(sp)
    3040:	b5800044 	addi	r22,r22,1
    3044:	3105883a 	add	r2,r6,r4
    3048:	b0806526 	beq	r22,r2,31e0 <_dtoa_r+0xb80>
    304c:	d9400717 	ldw	r5,28(sp)
    3050:	d9001617 	ldw	r4,88(sp)
    3054:	01800284 	movi	r6,10
    3058:	000f883a 	mov	r7,zero
    305c:	00064a80 	call	64a8 <__multadd>
    3060:	d8800715 	stw	r2,28(sp)
    3064:	d8800617 	ldw	r2,24(sp)
    3068:	14c10c26 	beq	r2,r19,349c <_dtoa_r+0xe3c>
    306c:	d9400617 	ldw	r5,24(sp)
    3070:	d9001617 	ldw	r4,88(sp)
    3074:	01800284 	movi	r6,10
    3078:	000f883a 	mov	r7,zero
    307c:	00064a80 	call	64a8 <__multadd>
    3080:	d9001617 	ldw	r4,88(sp)
    3084:	980b883a 	mov	r5,r19
    3088:	01800284 	movi	r6,10
    308c:	000f883a 	mov	r7,zero
    3090:	d8800615 	stw	r2,24(sp)
    3094:	00064a80 	call	64a8 <__multadd>
    3098:	1027883a 	mov	r19,r2
    309c:	003fc206 	br	2fa8 <_dtoa_r+0x948>
    30a0:	2445c83a 	sub	r2,r4,r17
    30a4:	a088983a 	sll	r4,r20,r2
    30a8:	003e4b06 	br	29d8 <_dtoa_r+0x378>
    30ac:	01bfffc4 	movi	r6,-1
    30b0:	00800044 	movi	r2,1
    30b4:	d9800e15 	stw	r6,56(sp)
    30b8:	d9800f15 	stw	r6,60(sp)
    30bc:	d8800b15 	stw	r2,44(sp)
    30c0:	d8c01617 	ldw	r3,88(sp)
    30c4:	008005c4 	movi	r2,23
    30c8:	18001115 	stw	zero,68(r3)
    30cc:	1580082e 	bgeu	r2,r22,30f0 <_dtoa_r+0xa90>
    30d0:	00c00104 	movi	r3,4
    30d4:	0009883a 	mov	r4,zero
    30d8:	18c7883a 	add	r3,r3,r3
    30dc:	18800504 	addi	r2,r3,20
    30e0:	21000044 	addi	r4,r4,1
    30e4:	b0bffc2e 	bgeu	r22,r2,30d8 <_dtoa_r+0xa78>
    30e8:	d9801617 	ldw	r6,88(sp)
    30ec:	31001115 	stw	r4,68(r6)
    30f0:	dc000f17 	ldw	r16,60(sp)
    30f4:	003e4b06 	br	2a24 <_dtoa_r+0x3c4>
    30f8:	d9801717 	ldw	r6,92(sp)
    30fc:	0023883a 	mov	r17,zero
    3100:	31bfff04 	addi	r6,r6,-4
    3104:	d9801715 	stw	r6,92(sp)
    3108:	003df806 	br	28ec <_dtoa_r+0x28c>
    310c:	00800804 	movi	r2,32
    3110:	10c9c83a 	sub	r4,r2,r3
    3114:	00c00104 	movi	r3,4
    3118:	19005a16 	blt	r3,r4,3284 <_dtoa_r+0xc24>
    311c:	008000c4 	movi	r2,3
    3120:	113f7e16 	blt	r2,r4,2f1c <_dtoa_r+0x8bc>
    3124:	20800704 	addi	r2,r4,28
    3128:	003f7506 	br	2f00 <_dtoa_r+0x8a0>
    312c:	d9801717 	ldw	r6,92(sp)
    3130:	00800044 	movi	r2,1
    3134:	1180a10e 	bge	r2,r6,33bc <_dtoa_r+0xd5c>
    3138:	d9800f17 	ldw	r6,60(sp)
    313c:	d8c01017 	ldw	r3,64(sp)
    3140:	30bfffc4 	addi	r2,r6,-1
    3144:	1881c616 	blt	r3,r2,3860 <_dtoa_r+0x1200>
    3148:	18a5c83a 	sub	r18,r3,r2
    314c:	d8800f17 	ldw	r2,60(sp)
    3150:	10026216 	blt	r2,zero,3adc <_dtoa_r+0x147c>
    3154:	dc001117 	ldw	r16,68(sp)
    3158:	1007883a 	mov	r3,r2
    315c:	d9800a17 	ldw	r6,40(sp)
    3160:	d8801117 	ldw	r2,68(sp)
    3164:	d9001617 	ldw	r4,88(sp)
    3168:	30cd883a 	add	r6,r6,r3
    316c:	10c5883a 	add	r2,r2,r3
    3170:	01400044 	movi	r5,1
    3174:	d9800a15 	stw	r6,40(sp)
    3178:	d8801115 	stw	r2,68(sp)
    317c:	000646c0 	call	646c <__i2b>
    3180:	1027883a 	mov	r19,r2
    3184:	003f2506 	br	2e1c <_dtoa_r+0x7bc>
    3188:	00c00074 	movhi	r3,1
    318c:	18f3ff04 	addi	r3,r3,-12292
    3190:	003d6706 	br	2730 <_dtoa_r+0xd0>
    3194:	dd800517 	ldw	r22,20(sp)
    3198:	04000044 	movi	r16,1
    319c:	00000706 	br	31bc <_dtoa_r+0xb5c>
    31a0:	d9400717 	ldw	r5,28(sp)
    31a4:	d9001617 	ldw	r4,88(sp)
    31a8:	01800284 	movi	r6,10
    31ac:	000f883a 	mov	r7,zero
    31b0:	00064a80 	call	64a8 <__multadd>
    31b4:	d8800715 	stw	r2,28(sp)
    31b8:	84000044 	addi	r16,r16,1
    31bc:	d9000717 	ldw	r4,28(sp)
    31c0:	900b883a 	mov	r5,r18
    31c4:	00024480 	call	2448 <quorem>
    31c8:	15c00c04 	addi	r23,r2,48
    31cc:	b5c00005 	stb	r23,0(r22)
    31d0:	d8c00f17 	ldw	r3,60(sp)
    31d4:	b5800044 	addi	r22,r22,1
    31d8:	80fff116 	blt	r16,r3,31a0 <_dtoa_r+0xb40>
    31dc:	d8000615 	stw	zero,24(sp)
    31e0:	d9400717 	ldw	r5,28(sp)
    31e4:	d9001617 	ldw	r4,88(sp)
    31e8:	01800044 	movi	r6,1
    31ec:	00061380 	call	6138 <__lshift>
    31f0:	1009883a 	mov	r4,r2
    31f4:	900b883a 	mov	r5,r18
    31f8:	d8800715 	stw	r2,28(sp)
    31fc:	00059500 	call	5950 <__mcmp>
    3200:	00803c0e 	bge	zero,r2,32f4 <_dtoa_r+0xc94>
    3204:	b009883a 	mov	r4,r22
    3208:	213fffc4 	addi	r4,r4,-1
    320c:	21400003 	ldbu	r5,0(r4)
    3210:	00800e44 	movi	r2,57
    3214:	28c03fcc 	andi	r3,r5,255
    3218:	18c0201c 	xori	r3,r3,128
    321c:	18ffe004 	addi	r3,r3,-128
    3220:	1881981e 	bne	r3,r2,3884 <_dtoa_r+0x1224>
    3224:	d9800517 	ldw	r6,20(sp)
    3228:	21bff71e 	bne	r4,r6,3208 <_dtoa_r+0xba8>
    322c:	d8800d17 	ldw	r2,52(sp)
    3230:	37000044 	addi	fp,r6,1
    3234:	10800044 	addi	r2,r2,1
    3238:	d8800d15 	stw	r2,52(sp)
    323c:	00800c44 	movi	r2,49
    3240:	30800005 	stb	r2,0(r6)
    3244:	d9001617 	ldw	r4,88(sp)
    3248:	900b883a 	mov	r5,r18
    324c:	00057f40 	call	57f4 <_Bfree>
    3250:	983ecd26 	beq	r19,zero,2d88 <_dtoa_r+0x728>
    3254:	d8c00617 	ldw	r3,24(sp)
    3258:	18000426 	beq	r3,zero,326c <_dtoa_r+0xc0c>
    325c:	1cc00326 	beq	r3,r19,326c <_dtoa_r+0xc0c>
    3260:	d9001617 	ldw	r4,88(sp)
    3264:	180b883a 	mov	r5,r3
    3268:	00057f40 	call	57f4 <_Bfree>
    326c:	d9001617 	ldw	r4,88(sp)
    3270:	980b883a 	mov	r5,r19
    3274:	00057f40 	call	57f4 <_Bfree>
    3278:	003ec306 	br	2d88 <_dtoa_r+0x728>
    327c:	1805883a 	mov	r2,r3
    3280:	003eeb06 	br	2e30 <_dtoa_r+0x7d0>
    3284:	d9800a17 	ldw	r6,40(sp)
    3288:	d8c01117 	ldw	r3,68(sp)
    328c:	20bfff04 	addi	r2,r4,-4
    3290:	308d883a 	add	r6,r6,r2
    3294:	1887883a 	add	r3,r3,r2
    3298:	80a1883a 	add	r16,r16,r2
    329c:	d9800a15 	stw	r6,40(sp)
    32a0:	d8c01115 	stw	r3,68(sp)
    32a4:	003f1d06 	br	2f1c <_dtoa_r+0x8bc>
    32a8:	a03f0c1e 	bne	r20,zero,2edc <_dtoa_r+0x87c>
    32ac:	00800434 	movhi	r2,16
    32b0:	10bfffc4 	addi	r2,r2,-1
    32b4:	a884703a 	and	r2,r21,r2
    32b8:	103f081e 	bne	r2,zero,2edc <_dtoa_r+0x87c>
    32bc:	a89ffc2c 	andhi	r2,r21,32752
    32c0:	103f0626 	beq	r2,zero,2edc <_dtoa_r+0x87c>
    32c4:	d8c01117 	ldw	r3,68(sp)
    32c8:	d9000a17 	ldw	r4,40(sp)
    32cc:	18c00044 	addi	r3,r3,1
    32d0:	21000044 	addi	r4,r4,1
    32d4:	d8c01115 	stw	r3,68(sp)
    32d8:	d9000a15 	stw	r4,40(sp)
    32dc:	003f0006 	br	2ee0 <_dtoa_r+0x880>
    32e0:	d9400717 	ldw	r5,28(sp)
    32e4:	d9001617 	ldw	r4,88(sp)
    32e8:	00065a80 	call	65a8 <__pow5mult>
    32ec:	d8800715 	stw	r2,28(sp)
    32f0:	003eed06 	br	2ea8 <_dtoa_r+0x848>
    32f4:	1000021e 	bne	r2,zero,3300 <_dtoa_r+0xca0>
    32f8:	b880004c 	andi	r2,r23,1
    32fc:	103fc11e 	bne	r2,zero,3204 <_dtoa_r+0xba4>
    3300:	b5bfffc4 	addi	r22,r22,-1
    3304:	b0c00007 	ldb	r3,0(r22)
    3308:	00800c04 	movi	r2,48
    330c:	18bffc26 	beq	r3,r2,3300 <_dtoa_r+0xca0>
    3310:	b7000044 	addi	fp,r22,1
    3314:	003fcb06 	br	3244 <_dtoa_r+0xbe4>
    3318:	d9800d17 	ldw	r6,52(sp)
    331c:	018fc83a 	sub	r7,zero,r6
    3320:	3801f726 	beq	r7,zero,3b00 <_dtoa_r+0x14a0>
    3324:	398003cc 	andi	r6,r7,15
    3328:	300c90fa 	slli	r6,r6,3
    332c:	01400074 	movhi	r5,1
    3330:	29741d04 	addi	r5,r5,-12172
    3334:	d9001217 	ldw	r4,72(sp)
    3338:	314d883a 	add	r6,r6,r5
    333c:	30c00117 	ldw	r3,4(r6)
    3340:	30800017 	ldw	r2,0(r6)
    3344:	d9401317 	ldw	r5,76(sp)
    3348:	3821d13a 	srai	r16,r7,4
    334c:	100d883a 	mov	r6,r2
    3350:	180f883a 	mov	r7,r3
    3354:	000865c0 	call	865c <__muldf3>
    3358:	1011883a 	mov	r8,r2
    335c:	1813883a 	mov	r9,r3
    3360:	1029883a 	mov	r20,r2
    3364:	182b883a 	mov	r21,r3
    3368:	8001e526 	beq	r16,zero,3b00 <_dtoa_r+0x14a0>
    336c:	05800084 	movi	r22,2
    3370:	04400074 	movhi	r17,1
    3374:	8c744f04 	addi	r17,r17,-11972
    3378:	8080004c 	andi	r2,r16,1
    337c:	1005003a 	cmpeq	r2,r2,zero
    3380:	1000081e 	bne	r2,zero,33a4 <_dtoa_r+0xd44>
    3384:	89800017 	ldw	r6,0(r17)
    3388:	89c00117 	ldw	r7,4(r17)
    338c:	480b883a 	mov	r5,r9
    3390:	4009883a 	mov	r4,r8
    3394:	000865c0 	call	865c <__muldf3>
    3398:	1011883a 	mov	r8,r2
    339c:	b5800044 	addi	r22,r22,1
    33a0:	1813883a 	mov	r9,r3
    33a4:	8021d07a 	srai	r16,r16,1
    33a8:	8c400204 	addi	r17,r17,8
    33ac:	803ff21e 	bne	r16,zero,3378 <_dtoa_r+0xd18>
    33b0:	4029883a 	mov	r20,r8
    33b4:	482b883a 	mov	r21,r9
    33b8:	003dca06 	br	2ae4 <_dtoa_r+0x484>
    33bc:	d9000817 	ldw	r4,32(sp)
    33c0:	2005003a 	cmpeq	r2,r4,zero
    33c4:	1001f61e 	bne	r2,zero,3ba0 <_dtoa_r+0x1540>
    33c8:	dc001117 	ldw	r16,68(sp)
    33cc:	dc801017 	ldw	r18,64(sp)
    33d0:	18c10cc4 	addi	r3,r3,1075
    33d4:	003f6106 	br	315c <_dtoa_r+0xafc>
    33d8:	d8000b15 	stw	zero,44(sp)
    33dc:	d9802617 	ldw	r6,152(sp)
    33e0:	d8c00d17 	ldw	r3,52(sp)
    33e4:	30800044 	addi	r2,r6,1
    33e8:	18ad883a 	add	r22,r3,r2
    33ec:	b13fffc4 	addi	r4,r22,-1
    33f0:	d9000e15 	stw	r4,56(sp)
    33f4:	0581f60e 	bge	zero,r22,3bd0 <_dtoa_r+0x1570>
    33f8:	dd800f15 	stw	r22,60(sp)
    33fc:	003f3006 	br	30c0 <_dtoa_r+0xa60>
    3400:	d8000b15 	stw	zero,44(sp)
    3404:	d9002617 	ldw	r4,152(sp)
    3408:	0101eb0e 	bge	zero,r4,3bb8 <_dtoa_r+0x1558>
    340c:	202d883a 	mov	r22,r4
    3410:	d9000e15 	stw	r4,56(sp)
    3414:	d9000f15 	stw	r4,60(sp)
    3418:	003f2906 	br	30c0 <_dtoa_r+0xa60>
    341c:	01800044 	movi	r6,1
    3420:	d9800b15 	stw	r6,44(sp)
    3424:	003ff706 	br	3404 <_dtoa_r+0xda4>
    3428:	01000044 	movi	r4,1
    342c:	d9000b15 	stw	r4,44(sp)
    3430:	003fea06 	br	33dc <_dtoa_r+0xd7c>
    3434:	04000c0e 	bge	zero,r16,3468 <_dtoa_r+0xe08>
    3438:	d9400717 	ldw	r5,28(sp)
    343c:	d9001617 	ldw	r4,88(sp)
    3440:	01800044 	movi	r6,1
    3444:	00061380 	call	6138 <__lshift>
    3448:	1009883a 	mov	r4,r2
    344c:	900b883a 	mov	r5,r18
    3450:	d8800715 	stw	r2,28(sp)
    3454:	00059500 	call	5950 <__mcmp>
    3458:	0081e00e 	bge	zero,r2,3bdc <_dtoa_r+0x157c>
    345c:	bdc00044 	addi	r23,r23,1
    3460:	00800e84 	movi	r2,58
    3464:	b881a226 	beq	r23,r2,3af0 <_dtoa_r+0x1490>
    3468:	b7000044 	addi	fp,r22,1
    346c:	b5c00005 	stb	r23,0(r22)
    3470:	003f7406 	br	3244 <_dtoa_r+0xbe4>
    3474:	00800e44 	movi	r2,57
    3478:	b8819d26 	beq	r23,r2,3af0 <_dtoa_r+0x1490>
    347c:	053ffa0e 	bge	zero,r20,3468 <_dtoa_r+0xe08>
    3480:	8dc00c44 	addi	r23,r17,49
    3484:	003ff806 	br	3468 <_dtoa_r+0xe08>
    3488:	d9001617 	ldw	r4,88(sp)
    348c:	a80b883a 	mov	r5,r21
    3490:	04000044 	movi	r16,1
    3494:	00057f40 	call	57f4 <_Bfree>
    3498:	003edf06 	br	3018 <_dtoa_r+0x9b8>
    349c:	d9001617 	ldw	r4,88(sp)
    34a0:	980b883a 	mov	r5,r19
    34a4:	01800284 	movi	r6,10
    34a8:	000f883a 	mov	r7,zero
    34ac:	00064a80 	call	64a8 <__multadd>
    34b0:	1027883a 	mov	r19,r2
    34b4:	d8800615 	stw	r2,24(sp)
    34b8:	003ebb06 	br	2fa8 <_dtoa_r+0x948>
    34bc:	d9801117 	ldw	r6,68(sp)
    34c0:	d8800d17 	ldw	r2,52(sp)
    34c4:	d8000915 	stw	zero,36(sp)
    34c8:	308dc83a 	sub	r6,r6,r2
    34cc:	0087c83a 	sub	r3,zero,r2
    34d0:	d9801115 	stw	r6,68(sp)
    34d4:	d8c01015 	stw	r3,64(sp)
    34d8:	003cfe06 	br	28d4 <_dtoa_r+0x274>
    34dc:	018dc83a 	sub	r6,zero,r6
    34e0:	d9801115 	stw	r6,68(sp)
    34e4:	d8000a15 	stw	zero,40(sp)
    34e8:	003cf306 	br	28b8 <_dtoa_r+0x258>
    34ec:	d9000d17 	ldw	r4,52(sp)
    34f0:	0008f200 	call	8f20 <__floatsidf>
    34f4:	880b883a 	mov	r5,r17
    34f8:	8009883a 	mov	r4,r16
    34fc:	180f883a 	mov	r7,r3
    3500:	100d883a 	mov	r6,r2
    3504:	0008d000 	call	8d00 <__nedf2>
    3508:	103ce126 	beq	r2,zero,2890 <_dtoa_r+0x230>
    350c:	d9800d17 	ldw	r6,52(sp)
    3510:	31bfffc4 	addi	r6,r6,-1
    3514:	d9800d15 	stw	r6,52(sp)
    3518:	003cdd06 	br	2890 <_dtoa_r+0x230>
    351c:	d9000717 	ldw	r4,28(sp)
    3520:	900b883a 	mov	r5,r18
    3524:	00059500 	call	5950 <__mcmp>
    3528:	103e8d0e 	bge	r2,zero,2f60 <_dtoa_r+0x900>
    352c:	d9400717 	ldw	r5,28(sp)
    3530:	d9001617 	ldw	r4,88(sp)
    3534:	01800284 	movi	r6,10
    3538:	000f883a 	mov	r7,zero
    353c:	00064a80 	call	64a8 <__multadd>
    3540:	d9800d17 	ldw	r6,52(sp)
    3544:	d8800715 	stw	r2,28(sp)
    3548:	31bfffc4 	addi	r6,r6,-1
    354c:	d9800d15 	stw	r6,52(sp)
    3550:	b001a71e 	bne	r22,zero,3bf0 <_dtoa_r+0x1590>
    3554:	d8800e17 	ldw	r2,56(sp)
    3558:	d8800f15 	stw	r2,60(sp)
    355c:	003e8006 	br	2f60 <_dtoa_r+0x900>
    3560:	90800417 	ldw	r2,16(r18)
    3564:	1085883a 	add	r2,r2,r2
    3568:	1085883a 	add	r2,r2,r2
    356c:	1485883a 	add	r2,r2,r18
    3570:	11000417 	ldw	r4,16(r2)
    3574:	000581c0 	call	581c <__hi0bits>
    3578:	00c00804 	movi	r3,32
    357c:	1887c83a 	sub	r3,r3,r2
    3580:	003e5a06 	br	2eec <_dtoa_r+0x88c>
    3584:	d9400717 	ldw	r5,28(sp)
    3588:	d9801017 	ldw	r6,64(sp)
    358c:	d9001617 	ldw	r4,88(sp)
    3590:	00065a80 	call	65a8 <__pow5mult>
    3594:	d8800715 	stw	r2,28(sp)
    3598:	003e4306 	br	2ea8 <_dtoa_r+0x848>
    359c:	d9800f17 	ldw	r6,60(sp)
    35a0:	d8800d17 	ldw	r2,52(sp)
    35a4:	d9800315 	stw	r6,12(sp)
    35a8:	d8800415 	stw	r2,16(sp)
    35ac:	d8c00b17 	ldw	r3,44(sp)
    35b0:	1805003a 	cmpeq	r2,r3,zero
    35b4:	1000e21e 	bne	r2,zero,3940 <_dtoa_r+0x12e0>
    35b8:	d9000317 	ldw	r4,12(sp)
    35bc:	0005883a 	mov	r2,zero
    35c0:	00cff834 	movhi	r3,16352
    35c4:	200c90fa 	slli	r6,r4,3
    35c8:	01000074 	movhi	r4,1
    35cc:	21341d04 	addi	r4,r4,-12172
    35d0:	180b883a 	mov	r5,r3
    35d4:	310d883a 	add	r6,r6,r4
    35d8:	327fff17 	ldw	r9,-4(r6)
    35dc:	323ffe17 	ldw	r8,-8(r6)
    35e0:	1009883a 	mov	r4,r2
    35e4:	480f883a 	mov	r7,r9
    35e8:	400d883a 	mov	r6,r8
    35ec:	0008a200 	call	8a20 <__divdf3>
    35f0:	180b883a 	mov	r5,r3
    35f4:	b00d883a 	mov	r6,r22
    35f8:	b80f883a 	mov	r7,r23
    35fc:	1009883a 	mov	r4,r2
    3600:	00085680 	call	8568 <__subdf3>
    3604:	a80b883a 	mov	r5,r21
    3608:	a009883a 	mov	r4,r20
    360c:	d8c01915 	stw	r3,100(sp)
    3610:	d8801815 	stw	r2,96(sp)
    3614:	00090180 	call	9018 <__fixdfsi>
    3618:	1009883a 	mov	r4,r2
    361c:	1027883a 	mov	r19,r2
    3620:	0008f200 	call	8f20 <__floatsidf>
    3624:	a80b883a 	mov	r5,r21
    3628:	a009883a 	mov	r4,r20
    362c:	180f883a 	mov	r7,r3
    3630:	100d883a 	mov	r6,r2
    3634:	00085680 	call	8568 <__subdf3>
    3638:	d9801817 	ldw	r6,96(sp)
    363c:	1823883a 	mov	r17,r3
    3640:	d8801415 	stw	r2,80(sp)
    3644:	302d883a 	mov	r22,r6
    3648:	d9800517 	ldw	r6,20(sp)
    364c:	9cc00c04 	addi	r19,r19,48
    3650:	dc401515 	stw	r17,84(sp)
    3654:	d8c01917 	ldw	r3,100(sp)
    3658:	34c00005 	stb	r19,0(r6)
    365c:	d8800517 	ldw	r2,20(sp)
    3660:	d9401917 	ldw	r5,100(sp)
    3664:	d9801417 	ldw	r6,80(sp)
    3668:	b009883a 	mov	r4,r22
    366c:	880f883a 	mov	r7,r17
    3670:	182f883a 	mov	r23,r3
    3674:	17000044 	addi	fp,r2,1
    3678:	0008d880 	call	8d88 <__gtdf2>
    367c:	00804e16 	blt	zero,r2,37b8 <_dtoa_r+0x1158>
    3680:	d9801417 	ldw	r6,80(sp)
    3684:	0005883a 	mov	r2,zero
    3688:	00cffc34 	movhi	r3,16368
    368c:	180b883a 	mov	r5,r3
    3690:	880f883a 	mov	r7,r17
    3694:	1009883a 	mov	r4,r2
    3698:	00085680 	call	8568 <__subdf3>
    369c:	d9401917 	ldw	r5,100(sp)
    36a0:	180f883a 	mov	r7,r3
    36a4:	b009883a 	mov	r4,r22
    36a8:	100d883a 	mov	r6,r2
    36ac:	0008d880 	call	8d88 <__gtdf2>
    36b0:	00bda216 	blt	zero,r2,2d3c <_dtoa_r+0x6dc>
    36b4:	d8c00317 	ldw	r3,12(sp)
    36b8:	00800044 	movi	r2,1
    36bc:	10c01216 	blt	r2,r3,3708 <_dtoa_r+0x10a8>
    36c0:	003d4506 	br	2bd8 <_dtoa_r+0x578>
    36c4:	d9801417 	ldw	r6,80(sp)
    36c8:	0005883a 	mov	r2,zero
    36cc:	00cffc34 	movhi	r3,16368
    36d0:	180b883a 	mov	r5,r3
    36d4:	880f883a 	mov	r7,r17
    36d8:	1009883a 	mov	r4,r2
    36dc:	00085680 	call	8568 <__subdf3>
    36e0:	d9c01b17 	ldw	r7,108(sp)
    36e4:	180b883a 	mov	r5,r3
    36e8:	1009883a 	mov	r4,r2
    36ec:	b00d883a 	mov	r6,r22
    36f0:	0008e980 	call	8e98 <__ltdf2>
    36f4:	103d9116 	blt	r2,zero,2d3c <_dtoa_r+0x6dc>
    36f8:	d9800517 	ldw	r6,20(sp)
    36fc:	d9000317 	ldw	r4,12(sp)
    3700:	3105883a 	add	r2,r6,r4
    3704:	e0bd3426 	beq	fp,r2,2bd8 <_dtoa_r+0x578>
    3708:	04500934 	movhi	r17,16420
    370c:	0021883a 	mov	r16,zero
    3710:	b80b883a 	mov	r5,r23
    3714:	b009883a 	mov	r4,r22
    3718:	800d883a 	mov	r6,r16
    371c:	880f883a 	mov	r7,r17
    3720:	000865c0 	call	865c <__muldf3>
    3724:	d9401517 	ldw	r5,84(sp)
    3728:	d9001417 	ldw	r4,80(sp)
    372c:	880f883a 	mov	r7,r17
    3730:	000d883a 	mov	r6,zero
    3734:	d8801a15 	stw	r2,104(sp)
    3738:	d8c01b15 	stw	r3,108(sp)
    373c:	000865c0 	call	865c <__muldf3>
    3740:	180b883a 	mov	r5,r3
    3744:	1009883a 	mov	r4,r2
    3748:	1823883a 	mov	r17,r3
    374c:	1021883a 	mov	r16,r2
    3750:	00090180 	call	9018 <__fixdfsi>
    3754:	1009883a 	mov	r4,r2
    3758:	102b883a 	mov	r21,r2
    375c:	0008f200 	call	8f20 <__floatsidf>
    3760:	880b883a 	mov	r5,r17
    3764:	8009883a 	mov	r4,r16
    3768:	180f883a 	mov	r7,r3
    376c:	100d883a 	mov	r6,r2
    3770:	00085680 	call	8568 <__subdf3>
    3774:	1021883a 	mov	r16,r2
    3778:	d9001b17 	ldw	r4,108(sp)
    377c:	1823883a 	mov	r17,r3
    3780:	dc001415 	stw	r16,80(sp)
    3784:	ad400c04 	addi	r21,r21,48
    3788:	dc401515 	stw	r17,84(sp)
    378c:	d8801a17 	ldw	r2,104(sp)
    3790:	e5400005 	stb	r21,0(fp)
    3794:	202f883a 	mov	r23,r4
    3798:	d9c01b17 	ldw	r7,108(sp)
    379c:	d9001417 	ldw	r4,80(sp)
    37a0:	880b883a 	mov	r5,r17
    37a4:	100d883a 	mov	r6,r2
    37a8:	102d883a 	mov	r22,r2
    37ac:	e7000044 	addi	fp,fp,1
    37b0:	0008e980 	call	8e98 <__ltdf2>
    37b4:	103fc30e 	bge	r2,zero,36c4 <_dtoa_r+0x1064>
    37b8:	d9000417 	ldw	r4,16(sp)
    37bc:	d9000d15 	stw	r4,52(sp)
    37c0:	003d7106 	br	2d88 <_dtoa_r+0x728>
    37c4:	d9801717 	ldw	r6,92(sp)
    37c8:	00800084 	movi	r2,2
    37cc:	11bde60e 	bge	r2,r6,2f68 <_dtoa_r+0x908>
    37d0:	203cfb1e 	bne	r4,zero,2bc0 <_dtoa_r+0x560>
    37d4:	d9001617 	ldw	r4,88(sp)
    37d8:	900b883a 	mov	r5,r18
    37dc:	01800144 	movi	r6,5
    37e0:	000f883a 	mov	r7,zero
    37e4:	00064a80 	call	64a8 <__multadd>
    37e8:	d9000717 	ldw	r4,28(sp)
    37ec:	100b883a 	mov	r5,r2
    37f0:	1025883a 	mov	r18,r2
    37f4:	00059500 	call	5950 <__mcmp>
    37f8:	00bcf10e 	bge	zero,r2,2bc0 <_dtoa_r+0x560>
    37fc:	d8c00d17 	ldw	r3,52(sp)
    3800:	d9000517 	ldw	r4,20(sp)
    3804:	d8000615 	stw	zero,24(sp)
    3808:	18c00044 	addi	r3,r3,1
    380c:	d8c00d15 	stw	r3,52(sp)
    3810:	00800c44 	movi	r2,49
    3814:	27000044 	addi	fp,r4,1
    3818:	20800005 	stb	r2,0(r4)
    381c:	003e8906 	br	3244 <_dtoa_r+0xbe4>
    3820:	d8c00517 	ldw	r3,20(sp)
    3824:	003bc206 	br	2730 <_dtoa_r+0xd0>
    3828:	01800074 	movhi	r6,1
    382c:	31b44f04 	addi	r6,r6,-11972
    3830:	30c00917 	ldw	r3,36(r6)
    3834:	30800817 	ldw	r2,32(r6)
    3838:	d9001217 	ldw	r4,72(sp)
    383c:	d9401317 	ldw	r5,76(sp)
    3840:	180f883a 	mov	r7,r3
    3844:	100d883a 	mov	r6,r2
    3848:	0008a200 	call	8a20 <__divdf3>
    384c:	948003cc 	andi	r18,r18,15
    3850:	058000c4 	movi	r22,3
    3854:	1029883a 	mov	r20,r2
    3858:	182b883a 	mov	r21,r3
    385c:	003c8906 	br	2a84 <_dtoa_r+0x424>
    3860:	d9001017 	ldw	r4,64(sp)
    3864:	d9800917 	ldw	r6,36(sp)
    3868:	0025883a 	mov	r18,zero
    386c:	1105c83a 	sub	r2,r2,r4
    3870:	2089883a 	add	r4,r4,r2
    3874:	308d883a 	add	r6,r6,r2
    3878:	d9001015 	stw	r4,64(sp)
    387c:	d9800915 	stw	r6,36(sp)
    3880:	003e3206 	br	314c <_dtoa_r+0xaec>
    3884:	28800044 	addi	r2,r5,1
    3888:	27000044 	addi	fp,r4,1
    388c:	20800005 	stb	r2,0(r4)
    3890:	003e6c06 	br	3244 <_dtoa_r+0xbe4>
    3894:	d8800f17 	ldw	r2,60(sp)
    3898:	00bce016 	blt	zero,r2,2c1c <_dtoa_r+0x5bc>
    389c:	d9800f17 	ldw	r6,60(sp)
    38a0:	303cc51e 	bne	r6,zero,2bb8 <_dtoa_r+0x558>
    38a4:	0005883a 	mov	r2,zero
    38a8:	00d00534 	movhi	r3,16404
    38ac:	980b883a 	mov	r5,r19
    38b0:	180f883a 	mov	r7,r3
    38b4:	9009883a 	mov	r4,r18
    38b8:	100d883a 	mov	r6,r2
    38bc:	000865c0 	call	865c <__muldf3>
    38c0:	180b883a 	mov	r5,r3
    38c4:	a80f883a 	mov	r7,r21
    38c8:	1009883a 	mov	r4,r2
    38cc:	a00d883a 	mov	r6,r20
    38d0:	0008e100 	call	8e10 <__gedf2>
    38d4:	103cb80e 	bge	r2,zero,2bb8 <_dtoa_r+0x558>
    38d8:	0027883a 	mov	r19,zero
    38dc:	0025883a 	mov	r18,zero
    38e0:	003fc606 	br	37fc <_dtoa_r+0x119c>
    38e4:	99400117 	ldw	r5,4(r19)
    38e8:	d9001617 	ldw	r4,88(sp)
    38ec:	0005d740 	call	5d74 <_Balloc>
    38f0:	99800417 	ldw	r6,16(r19)
    38f4:	11000304 	addi	r4,r2,12
    38f8:	99400304 	addi	r5,r19,12
    38fc:	318d883a 	add	r6,r6,r6
    3900:	318d883a 	add	r6,r6,r6
    3904:	31800204 	addi	r6,r6,8
    3908:	1023883a 	mov	r17,r2
    390c:	00055dc0 	call	55dc <memcpy>
    3910:	d9001617 	ldw	r4,88(sp)
    3914:	880b883a 	mov	r5,r17
    3918:	01800044 	movi	r6,1
    391c:	00061380 	call	6138 <__lshift>
    3920:	100b883a 	mov	r5,r2
    3924:	003d9c06 	br	2f98 <_dtoa_r+0x938>
    3928:	00800e44 	movi	r2,57
    392c:	b8807026 	beq	r23,r2,3af0 <_dtoa_r+0x1490>
    3930:	b8800044 	addi	r2,r23,1
    3934:	b7000044 	addi	fp,r22,1
    3938:	b0800005 	stb	r2,0(r22)
    393c:	003e4106 	br	3244 <_dtoa_r+0xbe4>
    3940:	d8800317 	ldw	r2,12(sp)
    3944:	01800074 	movhi	r6,1
    3948:	31b41d04 	addi	r6,r6,-12172
    394c:	b009883a 	mov	r4,r22
    3950:	100e90fa 	slli	r7,r2,3
    3954:	b80b883a 	mov	r5,r23
    3958:	398f883a 	add	r7,r7,r6
    395c:	38bffe17 	ldw	r2,-8(r7)
    3960:	d9800517 	ldw	r6,20(sp)
    3964:	38ffff17 	ldw	r3,-4(r7)
    3968:	37000044 	addi	fp,r6,1
    396c:	180f883a 	mov	r7,r3
    3970:	100d883a 	mov	r6,r2
    3974:	000865c0 	call	865c <__muldf3>
    3978:	a80b883a 	mov	r5,r21
    397c:	a009883a 	mov	r4,r20
    3980:	182f883a 	mov	r23,r3
    3984:	102d883a 	mov	r22,r2
    3988:	00090180 	call	9018 <__fixdfsi>
    398c:	1009883a 	mov	r4,r2
    3990:	1027883a 	mov	r19,r2
    3994:	0008f200 	call	8f20 <__floatsidf>
    3998:	a80b883a 	mov	r5,r21
    399c:	a009883a 	mov	r4,r20
    39a0:	180f883a 	mov	r7,r3
    39a4:	100d883a 	mov	r6,r2
    39a8:	00085680 	call	8568 <__subdf3>
    39ac:	180b883a 	mov	r5,r3
    39b0:	d8c00517 	ldw	r3,20(sp)
    39b4:	9cc00c04 	addi	r19,r19,48
    39b8:	1009883a 	mov	r4,r2
    39bc:	1cc00005 	stb	r19,0(r3)
    39c0:	2021883a 	mov	r16,r4
    39c4:	d9000317 	ldw	r4,12(sp)
    39c8:	00800044 	movi	r2,1
    39cc:	2823883a 	mov	r17,r5
    39d0:	20802226 	beq	r4,r2,3a5c <_dtoa_r+0x13fc>
    39d4:	1029883a 	mov	r20,r2
    39d8:	0005883a 	mov	r2,zero
    39dc:	00d00934 	movhi	r3,16420
    39e0:	180f883a 	mov	r7,r3
    39e4:	100d883a 	mov	r6,r2
    39e8:	880b883a 	mov	r5,r17
    39ec:	8009883a 	mov	r4,r16
    39f0:	000865c0 	call	865c <__muldf3>
    39f4:	180b883a 	mov	r5,r3
    39f8:	1009883a 	mov	r4,r2
    39fc:	1823883a 	mov	r17,r3
    3a00:	1021883a 	mov	r16,r2
    3a04:	00090180 	call	9018 <__fixdfsi>
    3a08:	1009883a 	mov	r4,r2
    3a0c:	102b883a 	mov	r21,r2
    3a10:	0008f200 	call	8f20 <__floatsidf>
    3a14:	880b883a 	mov	r5,r17
    3a18:	8009883a 	mov	r4,r16
    3a1c:	180f883a 	mov	r7,r3
    3a20:	100d883a 	mov	r6,r2
    3a24:	00085680 	call	8568 <__subdf3>
    3a28:	180b883a 	mov	r5,r3
    3a2c:	d8c00517 	ldw	r3,20(sp)
    3a30:	1009883a 	mov	r4,r2
    3a34:	ad400c04 	addi	r21,r21,48
    3a38:	1d05883a 	add	r2,r3,r20
    3a3c:	15400005 	stb	r21,0(r2)
    3a40:	2021883a 	mov	r16,r4
    3a44:	d9000317 	ldw	r4,12(sp)
    3a48:	a5000044 	addi	r20,r20,1
    3a4c:	2823883a 	mov	r17,r5
    3a50:	a13fe11e 	bne	r20,r4,39d8 <_dtoa_r+0x1378>
    3a54:	e505883a 	add	r2,fp,r20
    3a58:	173fffc4 	addi	fp,r2,-1
    3a5c:	0025883a 	mov	r18,zero
    3a60:	04cff834 	movhi	r19,16352
    3a64:	b009883a 	mov	r4,r22
    3a68:	b80b883a 	mov	r5,r23
    3a6c:	900d883a 	mov	r6,r18
    3a70:	980f883a 	mov	r7,r19
    3a74:	00085e80 	call	85e8 <__adddf3>
    3a78:	180b883a 	mov	r5,r3
    3a7c:	1009883a 	mov	r4,r2
    3a80:	800d883a 	mov	r6,r16
    3a84:	880f883a 	mov	r7,r17
    3a88:	0008e980 	call	8e98 <__ltdf2>
    3a8c:	103cab16 	blt	r2,zero,2d3c <_dtoa_r+0x6dc>
    3a90:	0009883a 	mov	r4,zero
    3a94:	980b883a 	mov	r5,r19
    3a98:	b80f883a 	mov	r7,r23
    3a9c:	b00d883a 	mov	r6,r22
    3aa0:	00085680 	call	8568 <__subdf3>
    3aa4:	180b883a 	mov	r5,r3
    3aa8:	880f883a 	mov	r7,r17
    3aac:	1009883a 	mov	r4,r2
    3ab0:	800d883a 	mov	r6,r16
    3ab4:	0008d880 	call	8d88 <__gtdf2>
    3ab8:	00bc470e 	bge	zero,r2,2bd8 <_dtoa_r+0x578>
    3abc:	00c00c04 	movi	r3,48
    3ac0:	e73fffc4 	addi	fp,fp,-1
    3ac4:	e0800007 	ldb	r2,0(fp)
    3ac8:	10fffd26 	beq	r2,r3,3ac0 <_dtoa_r+0x1460>
    3acc:	d9800417 	ldw	r6,16(sp)
    3ad0:	e7000044 	addi	fp,fp,1
    3ad4:	d9800d15 	stw	r6,52(sp)
    3ad8:	003cab06 	br	2d88 <_dtoa_r+0x728>
    3adc:	d8c00f17 	ldw	r3,60(sp)
    3ae0:	d9001117 	ldw	r4,68(sp)
    3ae4:	20e1c83a 	sub	r16,r4,r3
    3ae8:	0007883a 	mov	r3,zero
    3aec:	003d9b06 	br	315c <_dtoa_r+0xafc>
    3af0:	00800e44 	movi	r2,57
    3af4:	b0800005 	stb	r2,0(r22)
    3af8:	b5800044 	addi	r22,r22,1
    3afc:	003dc106 	br	3204 <_dtoa_r+0xba4>
    3b00:	05800084 	movi	r22,2
    3b04:	003bf706 	br	2ae4 <_dtoa_r+0x484>
    3b08:	d9000f17 	ldw	r4,60(sp)
    3b0c:	013c000e 	bge	zero,r4,2b10 <_dtoa_r+0x4b0>
    3b10:	d9800e17 	ldw	r6,56(sp)
    3b14:	01bc300e 	bge	zero,r6,2bd8 <_dtoa_r+0x578>
    3b18:	0005883a 	mov	r2,zero
    3b1c:	00d00934 	movhi	r3,16420
    3b20:	a80b883a 	mov	r5,r21
    3b24:	180f883a 	mov	r7,r3
    3b28:	a009883a 	mov	r4,r20
    3b2c:	100d883a 	mov	r6,r2
    3b30:	000865c0 	call	865c <__muldf3>
    3b34:	b1000044 	addi	r4,r22,1
    3b38:	1021883a 	mov	r16,r2
    3b3c:	1823883a 	mov	r17,r3
    3b40:	0008f200 	call	8f20 <__floatsidf>
    3b44:	880b883a 	mov	r5,r17
    3b48:	8009883a 	mov	r4,r16
    3b4c:	180f883a 	mov	r7,r3
    3b50:	100d883a 	mov	r6,r2
    3b54:	000865c0 	call	865c <__muldf3>
    3b58:	0011883a 	mov	r8,zero
    3b5c:	02500734 	movhi	r9,16412
    3b60:	180b883a 	mov	r5,r3
    3b64:	480f883a 	mov	r7,r9
    3b68:	1009883a 	mov	r4,r2
    3b6c:	400d883a 	mov	r6,r8
    3b70:	00085e80 	call	85e8 <__adddf3>
    3b74:	102d883a 	mov	r22,r2
    3b78:	00bf3034 	movhi	r2,64704
    3b7c:	10ef883a 	add	r23,r2,r3
    3b80:	d8800d17 	ldw	r2,52(sp)
    3b84:	d8c00e17 	ldw	r3,56(sp)
    3b88:	8029883a 	mov	r20,r16
    3b8c:	10bfffc4 	addi	r2,r2,-1
    3b90:	882b883a 	mov	r21,r17
    3b94:	d8800415 	stw	r2,16(sp)
    3b98:	d8c00315 	stw	r3,12(sp)
    3b9c:	003e8306 	br	35ac <_dtoa_r+0xf4c>
    3ba0:	d8800117 	ldw	r2,4(sp)
    3ba4:	dc001117 	ldw	r16,68(sp)
    3ba8:	dc801017 	ldw	r18,64(sp)
    3bac:	00c00d84 	movi	r3,54
    3bb0:	1887c83a 	sub	r3,r3,r2
    3bb4:	003d6906 	br	315c <_dtoa_r+0xafc>
    3bb8:	01800044 	movi	r6,1
    3bbc:	3021883a 	mov	r16,r6
    3bc0:	d9800f15 	stw	r6,60(sp)
    3bc4:	d9802615 	stw	r6,152(sp)
    3bc8:	d9800e15 	stw	r6,56(sp)
    3bcc:	003b9306 	br	2a1c <_dtoa_r+0x3bc>
    3bd0:	b021883a 	mov	r16,r22
    3bd4:	dd800f15 	stw	r22,60(sp)
    3bd8:	003b9006 	br	2a1c <_dtoa_r+0x3bc>
    3bdc:	103e221e 	bne	r2,zero,3468 <_dtoa_r+0xe08>
    3be0:	b880004c 	andi	r2,r23,1
    3be4:	1005003a 	cmpeq	r2,r2,zero
    3be8:	103e1f1e 	bne	r2,zero,3468 <_dtoa_r+0xe08>
    3bec:	003e1b06 	br	345c <_dtoa_r+0xdfc>
    3bf0:	d9001617 	ldw	r4,88(sp)
    3bf4:	980b883a 	mov	r5,r19
    3bf8:	01800284 	movi	r6,10
    3bfc:	000f883a 	mov	r7,zero
    3c00:	00064a80 	call	64a8 <__multadd>
    3c04:	d8c00e17 	ldw	r3,56(sp)
    3c08:	1027883a 	mov	r19,r2
    3c0c:	d8c00f15 	stw	r3,60(sp)
    3c10:	003cd306 	br	2f60 <_dtoa_r+0x900>

00003c14 <_fflush_r>:
    3c14:	defffb04 	addi	sp,sp,-20
    3c18:	dcc00315 	stw	r19,12(sp)
    3c1c:	dc800215 	stw	r18,8(sp)
    3c20:	dfc00415 	stw	ra,16(sp)
    3c24:	dc400115 	stw	r17,4(sp)
    3c28:	dc000015 	stw	r16,0(sp)
    3c2c:	2027883a 	mov	r19,r4
    3c30:	2825883a 	mov	r18,r5
    3c34:	20000226 	beq	r4,zero,3c40 <_fflush_r+0x2c>
    3c38:	20800e17 	ldw	r2,56(r4)
    3c3c:	10005626 	beq	r2,zero,3d98 <_fflush_r+0x184>
    3c40:	9100030b 	ldhu	r4,12(r18)
    3c44:	20ffffcc 	andi	r3,r4,65535
    3c48:	18e0001c 	xori	r3,r3,32768
    3c4c:	18e00004 	addi	r3,r3,-32768
    3c50:	1880020c 	andi	r2,r3,8
    3c54:	1000261e 	bne	r2,zero,3cf0 <_fflush_r+0xdc>
    3c58:	90c00117 	ldw	r3,4(r18)
    3c5c:	20820014 	ori	r2,r4,2048
    3c60:	9080030d 	sth	r2,12(r18)
    3c64:	1009883a 	mov	r4,r2
    3c68:	00c0400e 	bge	zero,r3,3d6c <_fflush_r+0x158>
    3c6c:	92000a17 	ldw	r8,40(r18)
    3c70:	40004026 	beq	r8,zero,3d74 <_fflush_r+0x160>
    3c74:	2084000c 	andi	r2,r4,4096
    3c78:	10005326 	beq	r2,zero,3dc8 <_fflush_r+0x1b4>
    3c7c:	94001417 	ldw	r16,80(r18)
    3c80:	9080030b 	ldhu	r2,12(r18)
    3c84:	1080010c 	andi	r2,r2,4
    3c88:	1000481e 	bne	r2,zero,3dac <_fflush_r+0x198>
    3c8c:	91400717 	ldw	r5,28(r18)
    3c90:	9809883a 	mov	r4,r19
    3c94:	800d883a 	mov	r6,r16
    3c98:	000f883a 	mov	r7,zero
    3c9c:	403ee83a 	callr	r8
    3ca0:	8080261e 	bne	r16,r2,3d3c <_fflush_r+0x128>
    3ca4:	9080030b 	ldhu	r2,12(r18)
    3ca8:	91000417 	ldw	r4,16(r18)
    3cac:	90000115 	stw	zero,4(r18)
    3cb0:	10bdffcc 	andi	r2,r2,63487
    3cb4:	10ffffcc 	andi	r3,r2,65535
    3cb8:	18c4000c 	andi	r3,r3,4096
    3cbc:	9080030d 	sth	r2,12(r18)
    3cc0:	91000015 	stw	r4,0(r18)
    3cc4:	18002b26 	beq	r3,zero,3d74 <_fflush_r+0x160>
    3cc8:	0007883a 	mov	r3,zero
    3ccc:	1805883a 	mov	r2,r3
    3cd0:	94001415 	stw	r16,80(r18)
    3cd4:	dfc00417 	ldw	ra,16(sp)
    3cd8:	dcc00317 	ldw	r19,12(sp)
    3cdc:	dc800217 	ldw	r18,8(sp)
    3ce0:	dc400117 	ldw	r17,4(sp)
    3ce4:	dc000017 	ldw	r16,0(sp)
    3ce8:	dec00504 	addi	sp,sp,20
    3cec:	f800283a 	ret
    3cf0:	94400417 	ldw	r17,16(r18)
    3cf4:	88001f26 	beq	r17,zero,3d74 <_fflush_r+0x160>
    3cf8:	90800017 	ldw	r2,0(r18)
    3cfc:	18c000cc 	andi	r3,r3,3
    3d00:	94400015 	stw	r17,0(r18)
    3d04:	1461c83a 	sub	r16,r2,r17
    3d08:	18002526 	beq	r3,zero,3da0 <_fflush_r+0x18c>
    3d0c:	0005883a 	mov	r2,zero
    3d10:	90800215 	stw	r2,8(r18)
    3d14:	0400170e 	bge	zero,r16,3d74 <_fflush_r+0x160>
    3d18:	90c00917 	ldw	r3,36(r18)
    3d1c:	91400717 	ldw	r5,28(r18)
    3d20:	880d883a 	mov	r6,r17
    3d24:	800f883a 	mov	r7,r16
    3d28:	9809883a 	mov	r4,r19
    3d2c:	183ee83a 	callr	r3
    3d30:	88a3883a 	add	r17,r17,r2
    3d34:	80a1c83a 	sub	r16,r16,r2
    3d38:	00bff616 	blt	zero,r2,3d14 <_fflush_r+0x100>
    3d3c:	9080030b 	ldhu	r2,12(r18)
    3d40:	00ffffc4 	movi	r3,-1
    3d44:	10801014 	ori	r2,r2,64
    3d48:	9080030d 	sth	r2,12(r18)
    3d4c:	1805883a 	mov	r2,r3
    3d50:	dfc00417 	ldw	ra,16(sp)
    3d54:	dcc00317 	ldw	r19,12(sp)
    3d58:	dc800217 	ldw	r18,8(sp)
    3d5c:	dc400117 	ldw	r17,4(sp)
    3d60:	dc000017 	ldw	r16,0(sp)
    3d64:	dec00504 	addi	sp,sp,20
    3d68:	f800283a 	ret
    3d6c:	90800f17 	ldw	r2,60(r18)
    3d70:	00bfbe16 	blt	zero,r2,3c6c <_fflush_r+0x58>
    3d74:	0007883a 	mov	r3,zero
    3d78:	1805883a 	mov	r2,r3
    3d7c:	dfc00417 	ldw	ra,16(sp)
    3d80:	dcc00317 	ldw	r19,12(sp)
    3d84:	dc800217 	ldw	r18,8(sp)
    3d88:	dc400117 	ldw	r17,4(sp)
    3d8c:	dc000017 	ldw	r16,0(sp)
    3d90:	dec00504 	addi	sp,sp,20
    3d94:	f800283a 	ret
    3d98:	0003eac0 	call	3eac <__sinit>
    3d9c:	003fa806 	br	3c40 <_fflush_r+0x2c>
    3da0:	90800517 	ldw	r2,20(r18)
    3da4:	90800215 	stw	r2,8(r18)
    3da8:	003fda06 	br	3d14 <_fflush_r+0x100>
    3dac:	90800117 	ldw	r2,4(r18)
    3db0:	90c00c17 	ldw	r3,48(r18)
    3db4:	80a1c83a 	sub	r16,r16,r2
    3db8:	183fb426 	beq	r3,zero,3c8c <_fflush_r+0x78>
    3dbc:	90800f17 	ldw	r2,60(r18)
    3dc0:	80a1c83a 	sub	r16,r16,r2
    3dc4:	003fb106 	br	3c8c <_fflush_r+0x78>
    3dc8:	91400717 	ldw	r5,28(r18)
    3dcc:	9809883a 	mov	r4,r19
    3dd0:	000d883a 	mov	r6,zero
    3dd4:	01c00044 	movi	r7,1
    3dd8:	403ee83a 	callr	r8
    3ddc:	1021883a 	mov	r16,r2
    3de0:	00bfffc4 	movi	r2,-1
    3de4:	80800226 	beq	r16,r2,3df0 <_fflush_r+0x1dc>
    3de8:	92000a17 	ldw	r8,40(r18)
    3dec:	003fa406 	br	3c80 <_fflush_r+0x6c>
    3df0:	98c00017 	ldw	r3,0(r19)
    3df4:	00800744 	movi	r2,29
    3df8:	18bfde26 	beq	r3,r2,3d74 <_fflush_r+0x160>
    3dfc:	9080030b 	ldhu	r2,12(r18)
    3e00:	8007883a 	mov	r3,r16
    3e04:	10801014 	ori	r2,r2,64
    3e08:	9080030d 	sth	r2,12(r18)
    3e0c:	003fcf06 	br	3d4c <_fflush_r+0x138>

00003e10 <fflush>:
    3e10:	01400034 	movhi	r5,0
    3e14:	294f0504 	addi	r5,r5,15380
    3e18:	2007883a 	mov	r3,r4
    3e1c:	20000526 	beq	r4,zero,3e34 <fflush+0x24>
    3e20:	00800074 	movhi	r2,1
    3e24:	10bba904 	addi	r2,r2,-4444
    3e28:	11000017 	ldw	r4,0(r2)
    3e2c:	180b883a 	mov	r5,r3
    3e30:	0003c141 	jmpi	3c14 <_fflush_r>
    3e34:	00800074 	movhi	r2,1
    3e38:	10bbaa04 	addi	r2,r2,-4440
    3e3c:	11000017 	ldw	r4,0(r2)
    3e40:	00049e01 	jmpi	49e0 <_fwalk_reent>

00003e44 <std>:
    3e44:	00800034 	movhi	r2,0
    3e48:	109baf04 	addi	r2,r2,28348
    3e4c:	20800b15 	stw	r2,44(r4)
    3e50:	00800034 	movhi	r2,0
    3e54:	109bea04 	addi	r2,r2,28584
    3e58:	20800815 	stw	r2,32(r4)
    3e5c:	00c00034 	movhi	r3,0
    3e60:	18dbcb04 	addi	r3,r3,28460
    3e64:	00800034 	movhi	r2,0
    3e68:	109bb104 	addi	r2,r2,28356
    3e6c:	2140030d 	sth	r5,12(r4)
    3e70:	2180038d 	sth	r6,14(r4)
    3e74:	20c00915 	stw	r3,36(r4)
    3e78:	20800a15 	stw	r2,40(r4)
    3e7c:	20000015 	stw	zero,0(r4)
    3e80:	20000115 	stw	zero,4(r4)
    3e84:	20000215 	stw	zero,8(r4)
    3e88:	20000415 	stw	zero,16(r4)
    3e8c:	20000515 	stw	zero,20(r4)
    3e90:	20000615 	stw	zero,24(r4)
    3e94:	21000715 	stw	r4,28(r4)
    3e98:	f800283a 	ret

00003e9c <__sfp_lock_acquire>:
    3e9c:	f800283a 	ret

00003ea0 <__sfp_lock_release>:
    3ea0:	f800283a 	ret

00003ea4 <__sinit_lock_acquire>:
    3ea4:	f800283a 	ret

00003ea8 <__sinit_lock_release>:
    3ea8:	f800283a 	ret

00003eac <__sinit>:
    3eac:	20800e17 	ldw	r2,56(r4)
    3eb0:	defffd04 	addi	sp,sp,-12
    3eb4:	dc400115 	stw	r17,4(sp)
    3eb8:	dc000015 	stw	r16,0(sp)
    3ebc:	dfc00215 	stw	ra,8(sp)
    3ec0:	04400044 	movi	r17,1
    3ec4:	01400104 	movi	r5,4
    3ec8:	000d883a 	mov	r6,zero
    3ecc:	2021883a 	mov	r16,r4
    3ed0:	2200bb04 	addi	r8,r4,748
    3ed4:	200f883a 	mov	r7,r4
    3ed8:	10000526 	beq	r2,zero,3ef0 <__sinit+0x44>
    3edc:	dfc00217 	ldw	ra,8(sp)
    3ee0:	dc400117 	ldw	r17,4(sp)
    3ee4:	dc000017 	ldw	r16,0(sp)
    3ee8:	dec00304 	addi	sp,sp,12
    3eec:	f800283a 	ret
    3ef0:	21000117 	ldw	r4,4(r4)
    3ef4:	00800034 	movhi	r2,0
    3ef8:	108fe404 	addi	r2,r2,16272
    3efc:	00c000c4 	movi	r3,3
    3f00:	80800f15 	stw	r2,60(r16)
    3f04:	80c0b915 	stw	r3,740(r16)
    3f08:	8200ba15 	stw	r8,744(r16)
    3f0c:	84400e15 	stw	r17,56(r16)
    3f10:	8000b815 	stw	zero,736(r16)
    3f14:	0003e440 	call	3e44 <std>
    3f18:	81000217 	ldw	r4,8(r16)
    3f1c:	880d883a 	mov	r6,r17
    3f20:	800f883a 	mov	r7,r16
    3f24:	01400284 	movi	r5,10
    3f28:	0003e440 	call	3e44 <std>
    3f2c:	81000317 	ldw	r4,12(r16)
    3f30:	800f883a 	mov	r7,r16
    3f34:	01400484 	movi	r5,18
    3f38:	01800084 	movi	r6,2
    3f3c:	dfc00217 	ldw	ra,8(sp)
    3f40:	dc400117 	ldw	r17,4(sp)
    3f44:	dc000017 	ldw	r16,0(sp)
    3f48:	dec00304 	addi	sp,sp,12
    3f4c:	0003e441 	jmpi	3e44 <std>

00003f50 <__fp_lock>:
    3f50:	0005883a 	mov	r2,zero
    3f54:	f800283a 	ret

00003f58 <__fp_unlock>:
    3f58:	0005883a 	mov	r2,zero
    3f5c:	f800283a 	ret

00003f60 <__fp_unlock_all>:
    3f60:	00800074 	movhi	r2,1
    3f64:	10bba904 	addi	r2,r2,-4444
    3f68:	11000017 	ldw	r4,0(r2)
    3f6c:	01400034 	movhi	r5,0
    3f70:	294fd604 	addi	r5,r5,16216
    3f74:	0004aa81 	jmpi	4aa8 <_fwalk>

00003f78 <__fp_lock_all>:
    3f78:	00800074 	movhi	r2,1
    3f7c:	10bba904 	addi	r2,r2,-4444
    3f80:	11000017 	ldw	r4,0(r2)
    3f84:	01400034 	movhi	r5,0
    3f88:	294fd404 	addi	r5,r5,16208
    3f8c:	0004aa81 	jmpi	4aa8 <_fwalk>

00003f90 <_cleanup_r>:
    3f90:	01400034 	movhi	r5,0
    3f94:	295cf904 	addi	r5,r5,29668
    3f98:	0004aa81 	jmpi	4aa8 <_fwalk>

00003f9c <_cleanup>:
    3f9c:	00800074 	movhi	r2,1
    3fa0:	10bbaa04 	addi	r2,r2,-4440
    3fa4:	11000017 	ldw	r4,0(r2)
    3fa8:	0003f901 	jmpi	3f90 <_cleanup_r>

00003fac <__sfmoreglue>:
    3fac:	defffc04 	addi	sp,sp,-16
    3fb0:	dc400115 	stw	r17,4(sp)
    3fb4:	2c401724 	muli	r17,r5,92
    3fb8:	dc800215 	stw	r18,8(sp)
    3fbc:	2825883a 	mov	r18,r5
    3fc0:	89400304 	addi	r5,r17,12
    3fc4:	dc000015 	stw	r16,0(sp)
    3fc8:	dfc00315 	stw	ra,12(sp)
    3fcc:	0004db80 	call	4db8 <_malloc_r>
    3fd0:	0021883a 	mov	r16,zero
    3fd4:	880d883a 	mov	r6,r17
    3fd8:	000b883a 	mov	r5,zero
    3fdc:	10000626 	beq	r2,zero,3ff8 <__sfmoreglue+0x4c>
    3fe0:	11000304 	addi	r4,r2,12
    3fe4:	14800115 	stw	r18,4(r2)
    3fe8:	10000015 	stw	zero,0(r2)
    3fec:	11000215 	stw	r4,8(r2)
    3ff0:	1021883a 	mov	r16,r2
    3ff4:	000575c0 	call	575c <memset>
    3ff8:	8005883a 	mov	r2,r16
    3ffc:	dfc00317 	ldw	ra,12(sp)
    4000:	dc800217 	ldw	r18,8(sp)
    4004:	dc400117 	ldw	r17,4(sp)
    4008:	dc000017 	ldw	r16,0(sp)
    400c:	dec00404 	addi	sp,sp,16
    4010:	f800283a 	ret

00004014 <__sfp>:
    4014:	defffd04 	addi	sp,sp,-12
    4018:	00800074 	movhi	r2,1
    401c:	10bbaa04 	addi	r2,r2,-4440
    4020:	dc000015 	stw	r16,0(sp)
    4024:	14000017 	ldw	r16,0(r2)
    4028:	dc400115 	stw	r17,4(sp)
    402c:	dfc00215 	stw	ra,8(sp)
    4030:	80800e17 	ldw	r2,56(r16)
    4034:	2023883a 	mov	r17,r4
    4038:	10002626 	beq	r2,zero,40d4 <__sfp+0xc0>
    403c:	8400b804 	addi	r16,r16,736
    4040:	80800117 	ldw	r2,4(r16)
    4044:	81000217 	ldw	r4,8(r16)
    4048:	10ffffc4 	addi	r3,r2,-1
    404c:	18000916 	blt	r3,zero,4074 <__sfp+0x60>
    4050:	2080030f 	ldh	r2,12(r4)
    4054:	10000b26 	beq	r2,zero,4084 <__sfp+0x70>
    4058:	017fffc4 	movi	r5,-1
    405c:	00000206 	br	4068 <__sfp+0x54>
    4060:	2080030f 	ldh	r2,12(r4)
    4064:	10000726 	beq	r2,zero,4084 <__sfp+0x70>
    4068:	18ffffc4 	addi	r3,r3,-1
    406c:	21001704 	addi	r4,r4,92
    4070:	197ffb1e 	bne	r3,r5,4060 <__sfp+0x4c>
    4074:	80800017 	ldw	r2,0(r16)
    4078:	10001926 	beq	r2,zero,40e0 <__sfp+0xcc>
    407c:	1021883a 	mov	r16,r2
    4080:	003fef06 	br	4040 <__sfp+0x2c>
    4084:	00bfffc4 	movi	r2,-1
    4088:	00c00044 	movi	r3,1
    408c:	2080038d 	sth	r2,14(r4)
    4090:	20c0030d 	sth	r3,12(r4)
    4094:	20000015 	stw	zero,0(r4)
    4098:	20000215 	stw	zero,8(r4)
    409c:	20000115 	stw	zero,4(r4)
    40a0:	20000415 	stw	zero,16(r4)
    40a4:	20000515 	stw	zero,20(r4)
    40a8:	20000615 	stw	zero,24(r4)
    40ac:	20000c15 	stw	zero,48(r4)
    40b0:	20000d15 	stw	zero,52(r4)
    40b4:	20001115 	stw	zero,68(r4)
    40b8:	20001215 	stw	zero,72(r4)
    40bc:	2005883a 	mov	r2,r4
    40c0:	dfc00217 	ldw	ra,8(sp)
    40c4:	dc400117 	ldw	r17,4(sp)
    40c8:	dc000017 	ldw	r16,0(sp)
    40cc:	dec00304 	addi	sp,sp,12
    40d0:	f800283a 	ret
    40d4:	8009883a 	mov	r4,r16
    40d8:	0003eac0 	call	3eac <__sinit>
    40dc:	003fd706 	br	403c <__sfp+0x28>
    40e0:	8809883a 	mov	r4,r17
    40e4:	01400104 	movi	r5,4
    40e8:	0003fac0 	call	3fac <__sfmoreglue>
    40ec:	80800015 	stw	r2,0(r16)
    40f0:	103fe21e 	bne	r2,zero,407c <__sfp+0x68>
    40f4:	00800304 	movi	r2,12
    40f8:	0009883a 	mov	r4,zero
    40fc:	88800015 	stw	r2,0(r17)
    4100:	003fee06 	br	40bc <__sfp+0xa8>

00004104 <_malloc_trim_r>:
    4104:	defffb04 	addi	sp,sp,-20
    4108:	dcc00315 	stw	r19,12(sp)
    410c:	04c00074 	movhi	r19,1
    4110:	9cf5c304 	addi	r19,r19,-10484
    4114:	dc800215 	stw	r18,8(sp)
    4118:	dc400115 	stw	r17,4(sp)
    411c:	dc000015 	stw	r16,0(sp)
    4120:	2823883a 	mov	r17,r5
    4124:	2025883a 	mov	r18,r4
    4128:	dfc00415 	stw	ra,16(sp)
    412c:	000a0800 	call	a080 <__malloc_lock>
    4130:	98800217 	ldw	r2,8(r19)
    4134:	9009883a 	mov	r4,r18
    4138:	000b883a 	mov	r5,zero
    413c:	10c00117 	ldw	r3,4(r2)
    4140:	00bfff04 	movi	r2,-4
    4144:	18a0703a 	and	r16,r3,r2
    4148:	8463c83a 	sub	r17,r16,r17
    414c:	8c43fbc4 	addi	r17,r17,4079
    4150:	8822d33a 	srli	r17,r17,12
    4154:	0083ffc4 	movi	r2,4095
    4158:	8c7fffc4 	addi	r17,r17,-1
    415c:	8822933a 	slli	r17,r17,12
    4160:	1440060e 	bge	r2,r17,417c <_malloc_trim_r+0x78>
    4164:	0006e4c0 	call	6e4c <_sbrk_r>
    4168:	98c00217 	ldw	r3,8(r19)
    416c:	9009883a 	mov	r4,r18
    4170:	044bc83a 	sub	r5,zero,r17
    4174:	80c7883a 	add	r3,r16,r3
    4178:	10c00926 	beq	r2,r3,41a0 <_malloc_trim_r+0x9c>
    417c:	000a0a00 	call	a0a0 <__malloc_unlock>
    4180:	0005883a 	mov	r2,zero
    4184:	dfc00417 	ldw	ra,16(sp)
    4188:	dcc00317 	ldw	r19,12(sp)
    418c:	dc800217 	ldw	r18,8(sp)
    4190:	dc400117 	ldw	r17,4(sp)
    4194:	dc000017 	ldw	r16,0(sp)
    4198:	dec00504 	addi	sp,sp,20
    419c:	f800283a 	ret
    41a0:	9009883a 	mov	r4,r18
    41a4:	0006e4c0 	call	6e4c <_sbrk_r>
    41a8:	844dc83a 	sub	r6,r16,r17
    41ac:	00ffffc4 	movi	r3,-1
    41b0:	9009883a 	mov	r4,r18
    41b4:	000b883a 	mov	r5,zero
    41b8:	01c00074 	movhi	r7,1
    41bc:	39c2bf04 	addi	r7,r7,2812
    41c0:	31800054 	ori	r6,r6,1
    41c4:	10c00926 	beq	r2,r3,41ec <_malloc_trim_r+0xe8>
    41c8:	38800017 	ldw	r2,0(r7)
    41cc:	98c00217 	ldw	r3,8(r19)
    41d0:	9009883a 	mov	r4,r18
    41d4:	1445c83a 	sub	r2,r2,r17
    41d8:	38800015 	stw	r2,0(r7)
    41dc:	19800115 	stw	r6,4(r3)
    41e0:	000a0a00 	call	a0a0 <__malloc_unlock>
    41e4:	00800044 	movi	r2,1
    41e8:	003fe606 	br	4184 <_malloc_trim_r+0x80>
    41ec:	0006e4c0 	call	6e4c <_sbrk_r>
    41f0:	99800217 	ldw	r6,8(r19)
    41f4:	100f883a 	mov	r7,r2
    41f8:	9009883a 	mov	r4,r18
    41fc:	1187c83a 	sub	r3,r2,r6
    4200:	008003c4 	movi	r2,15
    4204:	19400054 	ori	r5,r3,1
    4208:	10ffdc0e 	bge	r2,r3,417c <_malloc_trim_r+0x78>
    420c:	00800074 	movhi	r2,1
    4210:	10bbae04 	addi	r2,r2,-4424
    4214:	10c00017 	ldw	r3,0(r2)
    4218:	00800074 	movhi	r2,1
    421c:	1082bf04 	addi	r2,r2,2812
    4220:	31400115 	stw	r5,4(r6)
    4224:	38c7c83a 	sub	r3,r7,r3
    4228:	10c00015 	stw	r3,0(r2)
    422c:	003fd306 	br	417c <_malloc_trim_r+0x78>

00004230 <_free_r>:
    4230:	defffd04 	addi	sp,sp,-12
    4234:	dc400115 	stw	r17,4(sp)
    4238:	dc000015 	stw	r16,0(sp)
    423c:	dfc00215 	stw	ra,8(sp)
    4240:	2821883a 	mov	r16,r5
    4244:	2023883a 	mov	r17,r4
    4248:	28005a26 	beq	r5,zero,43b4 <_free_r+0x184>
    424c:	000a0800 	call	a080 <__malloc_lock>
    4250:	823ffe04 	addi	r8,r16,-8
    4254:	41400117 	ldw	r5,4(r8)
    4258:	00bfff84 	movi	r2,-2
    425c:	02800074 	movhi	r10,1
    4260:	52b5c304 	addi	r10,r10,-10484
    4264:	288e703a 	and	r7,r5,r2
    4268:	41cd883a 	add	r6,r8,r7
    426c:	30c00117 	ldw	r3,4(r6)
    4270:	51000217 	ldw	r4,8(r10)
    4274:	00bfff04 	movi	r2,-4
    4278:	1892703a 	and	r9,r3,r2
    427c:	5017883a 	mov	r11,r10
    4280:	31006726 	beq	r6,r4,4420 <_free_r+0x1f0>
    4284:	2880004c 	andi	r2,r5,1
    4288:	1005003a 	cmpeq	r2,r2,zero
    428c:	32400115 	stw	r9,4(r6)
    4290:	10001a1e 	bne	r2,zero,42fc <_free_r+0xcc>
    4294:	000b883a 	mov	r5,zero
    4298:	3247883a 	add	r3,r6,r9
    429c:	18800117 	ldw	r2,4(r3)
    42a0:	1080004c 	andi	r2,r2,1
    42a4:	1000231e 	bne	r2,zero,4334 <_free_r+0x104>
    42a8:	280ac03a 	cmpne	r5,r5,zero
    42ac:	3a4f883a 	add	r7,r7,r9
    42b0:	2800451e 	bne	r5,zero,43c8 <_free_r+0x198>
    42b4:	31000217 	ldw	r4,8(r6)
    42b8:	00800074 	movhi	r2,1
    42bc:	10b5c504 	addi	r2,r2,-10476
    42c0:	20807b26 	beq	r4,r2,44b0 <_free_r+0x280>
    42c4:	30800317 	ldw	r2,12(r6)
    42c8:	3a07883a 	add	r3,r7,r8
    42cc:	19c00015 	stw	r7,0(r3)
    42d0:	11000215 	stw	r4,8(r2)
    42d4:	20800315 	stw	r2,12(r4)
    42d8:	38800054 	ori	r2,r7,1
    42dc:	40800115 	stw	r2,4(r8)
    42e0:	28001a26 	beq	r5,zero,434c <_free_r+0x11c>
    42e4:	8809883a 	mov	r4,r17
    42e8:	dfc00217 	ldw	ra,8(sp)
    42ec:	dc400117 	ldw	r17,4(sp)
    42f0:	dc000017 	ldw	r16,0(sp)
    42f4:	dec00304 	addi	sp,sp,12
    42f8:	000a0a01 	jmpi	a0a0 <__malloc_unlock>
    42fc:	80bffe17 	ldw	r2,-8(r16)
    4300:	50c00204 	addi	r3,r10,8
    4304:	4091c83a 	sub	r8,r8,r2
    4308:	41000217 	ldw	r4,8(r8)
    430c:	388f883a 	add	r7,r7,r2
    4310:	20c06126 	beq	r4,r3,4498 <_free_r+0x268>
    4314:	40800317 	ldw	r2,12(r8)
    4318:	3247883a 	add	r3,r6,r9
    431c:	000b883a 	mov	r5,zero
    4320:	11000215 	stw	r4,8(r2)
    4324:	20800315 	stw	r2,12(r4)
    4328:	18800117 	ldw	r2,4(r3)
    432c:	1080004c 	andi	r2,r2,1
    4330:	103fdd26 	beq	r2,zero,42a8 <_free_r+0x78>
    4334:	38800054 	ori	r2,r7,1
    4338:	3a07883a 	add	r3,r7,r8
    433c:	280ac03a 	cmpne	r5,r5,zero
    4340:	40800115 	stw	r2,4(r8)
    4344:	19c00015 	stw	r7,0(r3)
    4348:	283fe61e 	bne	r5,zero,42e4 <_free_r+0xb4>
    434c:	00807fc4 	movi	r2,511
    4350:	11c01f2e 	bgeu	r2,r7,43d0 <_free_r+0x1a0>
    4354:	3806d27a 	srli	r3,r7,9
    4358:	1800481e 	bne	r3,zero,447c <_free_r+0x24c>
    435c:	3804d0fa 	srli	r2,r7,3
    4360:	100690fa 	slli	r3,r2,3
    4364:	1acd883a 	add	r6,r3,r11
    4368:	31400217 	ldw	r5,8(r6)
    436c:	31405926 	beq	r6,r5,44d4 <_free_r+0x2a4>
    4370:	28800117 	ldw	r2,4(r5)
    4374:	00ffff04 	movi	r3,-4
    4378:	10c4703a 	and	r2,r2,r3
    437c:	3880022e 	bgeu	r7,r2,4388 <_free_r+0x158>
    4380:	29400217 	ldw	r5,8(r5)
    4384:	317ffa1e 	bne	r6,r5,4370 <_free_r+0x140>
    4388:	29800317 	ldw	r6,12(r5)
    438c:	41800315 	stw	r6,12(r8)
    4390:	41400215 	stw	r5,8(r8)
    4394:	8809883a 	mov	r4,r17
    4398:	2a000315 	stw	r8,12(r5)
    439c:	32000215 	stw	r8,8(r6)
    43a0:	dfc00217 	ldw	ra,8(sp)
    43a4:	dc400117 	ldw	r17,4(sp)
    43a8:	dc000017 	ldw	r16,0(sp)
    43ac:	dec00304 	addi	sp,sp,12
    43b0:	000a0a01 	jmpi	a0a0 <__malloc_unlock>
    43b4:	dfc00217 	ldw	ra,8(sp)
    43b8:	dc400117 	ldw	r17,4(sp)
    43bc:	dc000017 	ldw	r16,0(sp)
    43c0:	dec00304 	addi	sp,sp,12
    43c4:	f800283a 	ret
    43c8:	31000217 	ldw	r4,8(r6)
    43cc:	003fbd06 	br	42c4 <_free_r+0x94>
    43d0:	3806d0fa 	srli	r3,r7,3
    43d4:	00800044 	movi	r2,1
    43d8:	51400117 	ldw	r5,4(r10)
    43dc:	180890fa 	slli	r4,r3,3
    43e0:	1807d0ba 	srai	r3,r3,2
    43e4:	22c9883a 	add	r4,r4,r11
    43e8:	21800217 	ldw	r6,8(r4)
    43ec:	10c4983a 	sll	r2,r2,r3
    43f0:	41000315 	stw	r4,12(r8)
    43f4:	41800215 	stw	r6,8(r8)
    43f8:	288ab03a 	or	r5,r5,r2
    43fc:	22000215 	stw	r8,8(r4)
    4400:	8809883a 	mov	r4,r17
    4404:	51400115 	stw	r5,4(r10)
    4408:	32000315 	stw	r8,12(r6)
    440c:	dfc00217 	ldw	ra,8(sp)
    4410:	dc400117 	ldw	r17,4(sp)
    4414:	dc000017 	ldw	r16,0(sp)
    4418:	dec00304 	addi	sp,sp,12
    441c:	000a0a01 	jmpi	a0a0 <__malloc_unlock>
    4420:	2880004c 	andi	r2,r5,1
    4424:	3a4d883a 	add	r6,r7,r9
    4428:	1000071e 	bne	r2,zero,4448 <_free_r+0x218>
    442c:	80bffe17 	ldw	r2,-8(r16)
    4430:	4091c83a 	sub	r8,r8,r2
    4434:	41000317 	ldw	r4,12(r8)
    4438:	40c00217 	ldw	r3,8(r8)
    443c:	308d883a 	add	r6,r6,r2
    4440:	20c00215 	stw	r3,8(r4)
    4444:	19000315 	stw	r4,12(r3)
    4448:	00800074 	movhi	r2,1
    444c:	10bbad04 	addi	r2,r2,-4428
    4450:	11000017 	ldw	r4,0(r2)
    4454:	30c00054 	ori	r3,r6,1
    4458:	52000215 	stw	r8,8(r10)
    445c:	40c00115 	stw	r3,4(r8)
    4460:	313fa036 	bltu	r6,r4,42e4 <_free_r+0xb4>
    4464:	00800074 	movhi	r2,1
    4468:	1082b504 	addi	r2,r2,2772
    446c:	11400017 	ldw	r5,0(r2)
    4470:	8809883a 	mov	r4,r17
    4474:	00041040 	call	4104 <_malloc_trim_r>
    4478:	003f9a06 	br	42e4 <_free_r+0xb4>
    447c:	00800104 	movi	r2,4
    4480:	10c0072e 	bgeu	r2,r3,44a0 <_free_r+0x270>
    4484:	00800504 	movi	r2,20
    4488:	10c01936 	bltu	r2,r3,44f0 <_free_r+0x2c0>
    448c:	188016c4 	addi	r2,r3,91
    4490:	100690fa 	slli	r3,r2,3
    4494:	003fb306 	br	4364 <_free_r+0x134>
    4498:	01400044 	movi	r5,1
    449c:	003f7e06 	br	4298 <_free_r+0x68>
    44a0:	3804d1ba 	srli	r2,r7,6
    44a4:	10800e04 	addi	r2,r2,56
    44a8:	100690fa 	slli	r3,r2,3
    44ac:	003fad06 	br	4364 <_free_r+0x134>
    44b0:	22000315 	stw	r8,12(r4)
    44b4:	22000215 	stw	r8,8(r4)
    44b8:	3a05883a 	add	r2,r7,r8
    44bc:	38c00054 	ori	r3,r7,1
    44c0:	11c00015 	stw	r7,0(r2)
    44c4:	41000215 	stw	r4,8(r8)
    44c8:	40c00115 	stw	r3,4(r8)
    44cc:	41000315 	stw	r4,12(r8)
    44d0:	003f8406 	br	42e4 <_free_r+0xb4>
    44d4:	1005d0ba 	srai	r2,r2,2
    44d8:	00c00044 	movi	r3,1
    44dc:	51000117 	ldw	r4,4(r10)
    44e0:	1886983a 	sll	r3,r3,r2
    44e4:	20c8b03a 	or	r4,r4,r3
    44e8:	51000115 	stw	r4,4(r10)
    44ec:	003fa706 	br	438c <_free_r+0x15c>
    44f0:	00801504 	movi	r2,84
    44f4:	10c00436 	bltu	r2,r3,4508 <_free_r+0x2d8>
    44f8:	3804d33a 	srli	r2,r7,12
    44fc:	10801b84 	addi	r2,r2,110
    4500:	100690fa 	slli	r3,r2,3
    4504:	003f9706 	br	4364 <_free_r+0x134>
    4508:	00805504 	movi	r2,340
    450c:	10c00436 	bltu	r2,r3,4520 <_free_r+0x2f0>
    4510:	3804d3fa 	srli	r2,r7,15
    4514:	10801dc4 	addi	r2,r2,119
    4518:	100690fa 	slli	r3,r2,3
    451c:	003f9106 	br	4364 <_free_r+0x134>
    4520:	00815504 	movi	r2,1364
    4524:	10c0032e 	bgeu	r2,r3,4534 <_free_r+0x304>
    4528:	00801f84 	movi	r2,126
    452c:	00c0fc04 	movi	r3,1008
    4530:	003f8c06 	br	4364 <_free_r+0x134>
    4534:	3804d4ba 	srli	r2,r7,18
    4538:	10801f04 	addi	r2,r2,124
    453c:	100690fa 	slli	r3,r2,3
    4540:	003f8806 	br	4364 <_free_r+0x134>

00004544 <__sfvwrite_r>:
    4544:	30800217 	ldw	r2,8(r6)
    4548:	defff504 	addi	sp,sp,-44
    454c:	df000915 	stw	fp,36(sp)
    4550:	dd800715 	stw	r22,28(sp)
    4554:	dc800315 	stw	r18,12(sp)
    4558:	dfc00a15 	stw	ra,40(sp)
    455c:	ddc00815 	stw	r23,32(sp)
    4560:	dd400615 	stw	r21,24(sp)
    4564:	dd000515 	stw	r20,20(sp)
    4568:	dcc00415 	stw	r19,16(sp)
    456c:	dc400215 	stw	r17,8(sp)
    4570:	dc000115 	stw	r16,4(sp)
    4574:	302d883a 	mov	r22,r6
    4578:	2039883a 	mov	fp,r4
    457c:	2825883a 	mov	r18,r5
    4580:	10001c26 	beq	r2,zero,45f4 <__sfvwrite_r+0xb0>
    4584:	29c0030b 	ldhu	r7,12(r5)
    4588:	3880020c 	andi	r2,r7,8
    458c:	10002726 	beq	r2,zero,462c <__sfvwrite_r+0xe8>
    4590:	28800417 	ldw	r2,16(r5)
    4594:	10002526 	beq	r2,zero,462c <__sfvwrite_r+0xe8>
    4598:	3880008c 	andi	r2,r7,2
    459c:	b5400017 	ldw	r21,0(r22)
    45a0:	10002826 	beq	r2,zero,4644 <__sfvwrite_r+0x100>
    45a4:	0021883a 	mov	r16,zero
    45a8:	0023883a 	mov	r17,zero
    45ac:	880d883a 	mov	r6,r17
    45b0:	e009883a 	mov	r4,fp
    45b4:	00810004 	movi	r2,1024
    45b8:	80006e26 	beq	r16,zero,4774 <__sfvwrite_r+0x230>
    45bc:	800f883a 	mov	r7,r16
    45c0:	91400717 	ldw	r5,28(r18)
    45c4:	1400012e 	bgeu	r2,r16,45cc <__sfvwrite_r+0x88>
    45c8:	100f883a 	mov	r7,r2
    45cc:	90c00917 	ldw	r3,36(r18)
    45d0:	183ee83a 	callr	r3
    45d4:	1007883a 	mov	r3,r2
    45d8:	80a1c83a 	sub	r16,r16,r2
    45dc:	88a3883a 	add	r17,r17,r2
    45e0:	00806d0e 	bge	zero,r2,4798 <__sfvwrite_r+0x254>
    45e4:	b0800217 	ldw	r2,8(r22)
    45e8:	10c5c83a 	sub	r2,r2,r3
    45ec:	b0800215 	stw	r2,8(r22)
    45f0:	103fee1e 	bne	r2,zero,45ac <__sfvwrite_r+0x68>
    45f4:	0009883a 	mov	r4,zero
    45f8:	2005883a 	mov	r2,r4
    45fc:	dfc00a17 	ldw	ra,40(sp)
    4600:	df000917 	ldw	fp,36(sp)
    4604:	ddc00817 	ldw	r23,32(sp)
    4608:	dd800717 	ldw	r22,28(sp)
    460c:	dd400617 	ldw	r21,24(sp)
    4610:	dd000517 	ldw	r20,20(sp)
    4614:	dcc00417 	ldw	r19,16(sp)
    4618:	dc800317 	ldw	r18,12(sp)
    461c:	dc400217 	ldw	r17,8(sp)
    4620:	dc000117 	ldw	r16,4(sp)
    4624:	dec00b04 	addi	sp,sp,44
    4628:	f800283a 	ret
    462c:	000230c0 	call	230c <__swsetup_r>
    4630:	1000e41e 	bne	r2,zero,49c4 <__sfvwrite_r+0x480>
    4634:	91c0030b 	ldhu	r7,12(r18)
    4638:	b5400017 	ldw	r21,0(r22)
    463c:	3880008c 	andi	r2,r7,2
    4640:	103fd81e 	bne	r2,zero,45a4 <__sfvwrite_r+0x60>
    4644:	3880004c 	andi	r2,r7,1
    4648:	1005003a 	cmpeq	r2,r2,zero
    464c:	10005726 	beq	r2,zero,47ac <__sfvwrite_r+0x268>
    4650:	0029883a 	mov	r20,zero
    4654:	002f883a 	mov	r23,zero
    4658:	a0004226 	beq	r20,zero,4764 <__sfvwrite_r+0x220>
    465c:	3880800c 	andi	r2,r7,512
    4660:	94000217 	ldw	r16,8(r18)
    4664:	10008b26 	beq	r2,zero,4894 <__sfvwrite_r+0x350>
    4668:	800d883a 	mov	r6,r16
    466c:	a400a536 	bltu	r20,r16,4904 <__sfvwrite_r+0x3c0>
    4670:	3881200c 	andi	r2,r7,1152
    4674:	10002726 	beq	r2,zero,4714 <__sfvwrite_r+0x1d0>
    4678:	90800517 	ldw	r2,20(r18)
    467c:	92000417 	ldw	r8,16(r18)
    4680:	91400017 	ldw	r5,0(r18)
    4684:	1087883a 	add	r3,r2,r2
    4688:	1887883a 	add	r3,r3,r2
    468c:	1808d7fa 	srli	r4,r3,31
    4690:	2a21c83a 	sub	r16,r5,r8
    4694:	80800044 	addi	r2,r16,1
    4698:	20c9883a 	add	r4,r4,r3
    469c:	2027d07a 	srai	r19,r4,1
    46a0:	a085883a 	add	r2,r20,r2
    46a4:	980d883a 	mov	r6,r19
    46a8:	9880022e 	bgeu	r19,r2,46b4 <__sfvwrite_r+0x170>
    46ac:	1027883a 	mov	r19,r2
    46b0:	100d883a 	mov	r6,r2
    46b4:	3881000c 	andi	r2,r7,1024
    46b8:	1000b826 	beq	r2,zero,499c <__sfvwrite_r+0x458>
    46bc:	300b883a 	mov	r5,r6
    46c0:	e009883a 	mov	r4,fp
    46c4:	0004db80 	call	4db8 <_malloc_r>
    46c8:	10003126 	beq	r2,zero,4790 <__sfvwrite_r+0x24c>
    46cc:	91400417 	ldw	r5,16(r18)
    46d0:	1009883a 	mov	r4,r2
    46d4:	800d883a 	mov	r6,r16
    46d8:	1023883a 	mov	r17,r2
    46dc:	00055dc0 	call	55dc <memcpy>
    46e0:	90c0030b 	ldhu	r3,12(r18)
    46e4:	00beffc4 	movi	r2,-1025
    46e8:	1886703a 	and	r3,r3,r2
    46ec:	18c02014 	ori	r3,r3,128
    46f0:	90c0030d 	sth	r3,12(r18)
    46f4:	9c07c83a 	sub	r3,r19,r16
    46f8:	8c05883a 	add	r2,r17,r16
    46fc:	a00d883a 	mov	r6,r20
    4700:	a021883a 	mov	r16,r20
    4704:	90800015 	stw	r2,0(r18)
    4708:	90c00215 	stw	r3,8(r18)
    470c:	94400415 	stw	r17,16(r18)
    4710:	94c00515 	stw	r19,20(r18)
    4714:	91000017 	ldw	r4,0(r18)
    4718:	b80b883a 	mov	r5,r23
    471c:	a023883a 	mov	r17,r20
    4720:	000567c0 	call	567c <memmove>
    4724:	90c00217 	ldw	r3,8(r18)
    4728:	90800017 	ldw	r2,0(r18)
    472c:	a027883a 	mov	r19,r20
    4730:	1c07c83a 	sub	r3,r3,r16
    4734:	1405883a 	add	r2,r2,r16
    4738:	90c00215 	stw	r3,8(r18)
    473c:	a021883a 	mov	r16,r20
    4740:	90800015 	stw	r2,0(r18)
    4744:	b0800217 	ldw	r2,8(r22)
    4748:	1405c83a 	sub	r2,r2,r16
    474c:	b0800215 	stw	r2,8(r22)
    4750:	103fa826 	beq	r2,zero,45f4 <__sfvwrite_r+0xb0>
    4754:	a469c83a 	sub	r20,r20,r17
    4758:	91c0030b 	ldhu	r7,12(r18)
    475c:	bcef883a 	add	r23,r23,r19
    4760:	a03fbe1e 	bne	r20,zero,465c <__sfvwrite_r+0x118>
    4764:	adc00017 	ldw	r23,0(r21)
    4768:	ad000117 	ldw	r20,4(r21)
    476c:	ad400204 	addi	r21,r21,8
    4770:	003fb906 	br	4658 <__sfvwrite_r+0x114>
    4774:	ac400017 	ldw	r17,0(r21)
    4778:	ac000117 	ldw	r16,4(r21)
    477c:	ad400204 	addi	r21,r21,8
    4780:	003f8a06 	br	45ac <__sfvwrite_r+0x68>
    4784:	91400417 	ldw	r5,16(r18)
    4788:	e009883a 	mov	r4,fp
    478c:	00042300 	call	4230 <_free_r>
    4790:	00800304 	movi	r2,12
    4794:	e0800015 	stw	r2,0(fp)
    4798:	9080030b 	ldhu	r2,12(r18)
    479c:	013fffc4 	movi	r4,-1
    47a0:	10801014 	ori	r2,r2,64
    47a4:	9080030d 	sth	r2,12(r18)
    47a8:	003f9306 	br	45f8 <__sfvwrite_r+0xb4>
    47ac:	0027883a 	mov	r19,zero
    47b0:	002f883a 	mov	r23,zero
    47b4:	d8000015 	stw	zero,0(sp)
    47b8:	0029883a 	mov	r20,zero
    47bc:	98001e26 	beq	r19,zero,4838 <__sfvwrite_r+0x2f4>
    47c0:	d8c00017 	ldw	r3,0(sp)
    47c4:	1804c03a 	cmpne	r2,r3,zero
    47c8:	10005e26 	beq	r2,zero,4944 <__sfvwrite_r+0x400>
    47cc:	9821883a 	mov	r16,r19
    47d0:	a4c0012e 	bgeu	r20,r19,47d8 <__sfvwrite_r+0x294>
    47d4:	a021883a 	mov	r16,r20
    47d8:	91000017 	ldw	r4,0(r18)
    47dc:	90800417 	ldw	r2,16(r18)
    47e0:	91800217 	ldw	r6,8(r18)
    47e4:	91c00517 	ldw	r7,20(r18)
    47e8:	1100022e 	bgeu	r2,r4,47f4 <__sfvwrite_r+0x2b0>
    47ec:	31e3883a 	add	r17,r6,r7
    47f0:	8c001616 	blt	r17,r16,484c <__sfvwrite_r+0x308>
    47f4:	81c03816 	blt	r16,r7,48d8 <__sfvwrite_r+0x394>
    47f8:	90c00917 	ldw	r3,36(r18)
    47fc:	91400717 	ldw	r5,28(r18)
    4800:	e009883a 	mov	r4,fp
    4804:	b80d883a 	mov	r6,r23
    4808:	183ee83a 	callr	r3
    480c:	1023883a 	mov	r17,r2
    4810:	00bfe10e 	bge	zero,r2,4798 <__sfvwrite_r+0x254>
    4814:	a469c83a 	sub	r20,r20,r17
    4818:	a0001826 	beq	r20,zero,487c <__sfvwrite_r+0x338>
    481c:	b0800217 	ldw	r2,8(r22)
    4820:	1445c83a 	sub	r2,r2,r17
    4824:	b0800215 	stw	r2,8(r22)
    4828:	103f7226 	beq	r2,zero,45f4 <__sfvwrite_r+0xb0>
    482c:	9c67c83a 	sub	r19,r19,r17
    4830:	bc6f883a 	add	r23,r23,r17
    4834:	983fe21e 	bne	r19,zero,47c0 <__sfvwrite_r+0x27c>
    4838:	adc00017 	ldw	r23,0(r21)
    483c:	acc00117 	ldw	r19,4(r21)
    4840:	ad400204 	addi	r21,r21,8
    4844:	d8000015 	stw	zero,0(sp)
    4848:	003fdc06 	br	47bc <__sfvwrite_r+0x278>
    484c:	b80b883a 	mov	r5,r23
    4850:	880d883a 	mov	r6,r17
    4854:	000567c0 	call	567c <memmove>
    4858:	90c00017 	ldw	r3,0(r18)
    485c:	e009883a 	mov	r4,fp
    4860:	900b883a 	mov	r5,r18
    4864:	1c47883a 	add	r3,r3,r17
    4868:	90c00015 	stw	r3,0(r18)
    486c:	0003c140 	call	3c14 <_fflush_r>
    4870:	103fc91e 	bne	r2,zero,4798 <__sfvwrite_r+0x254>
    4874:	a469c83a 	sub	r20,r20,r17
    4878:	a03fe81e 	bne	r20,zero,481c <__sfvwrite_r+0x2d8>
    487c:	e009883a 	mov	r4,fp
    4880:	900b883a 	mov	r5,r18
    4884:	0003c140 	call	3c14 <_fflush_r>
    4888:	103fc31e 	bne	r2,zero,4798 <__sfvwrite_r+0x254>
    488c:	d8000015 	stw	zero,0(sp)
    4890:	003fe206 	br	481c <__sfvwrite_r+0x2d8>
    4894:	91000017 	ldw	r4,0(r18)
    4898:	90800417 	ldw	r2,16(r18)
    489c:	1100022e 	bgeu	r2,r4,48a8 <__sfvwrite_r+0x364>
    48a0:	8023883a 	mov	r17,r16
    48a4:	85003136 	bltu	r16,r20,496c <__sfvwrite_r+0x428>
    48a8:	91c00517 	ldw	r7,20(r18)
    48ac:	a1c01836 	bltu	r20,r7,4910 <__sfvwrite_r+0x3cc>
    48b0:	90c00917 	ldw	r3,36(r18)
    48b4:	91400717 	ldw	r5,28(r18)
    48b8:	e009883a 	mov	r4,fp
    48bc:	b80d883a 	mov	r6,r23
    48c0:	183ee83a 	callr	r3
    48c4:	1021883a 	mov	r16,r2
    48c8:	00bfb30e 	bge	zero,r2,4798 <__sfvwrite_r+0x254>
    48cc:	1023883a 	mov	r17,r2
    48d0:	1027883a 	mov	r19,r2
    48d4:	003f9b06 	br	4744 <__sfvwrite_r+0x200>
    48d8:	b80b883a 	mov	r5,r23
    48dc:	800d883a 	mov	r6,r16
    48e0:	000567c0 	call	567c <memmove>
    48e4:	90c00217 	ldw	r3,8(r18)
    48e8:	90800017 	ldw	r2,0(r18)
    48ec:	8023883a 	mov	r17,r16
    48f0:	1c07c83a 	sub	r3,r3,r16
    48f4:	1405883a 	add	r2,r2,r16
    48f8:	90c00215 	stw	r3,8(r18)
    48fc:	90800015 	stw	r2,0(r18)
    4900:	003fc406 	br	4814 <__sfvwrite_r+0x2d0>
    4904:	a00d883a 	mov	r6,r20
    4908:	a021883a 	mov	r16,r20
    490c:	003f8106 	br	4714 <__sfvwrite_r+0x1d0>
    4910:	b80b883a 	mov	r5,r23
    4914:	a00d883a 	mov	r6,r20
    4918:	000567c0 	call	567c <memmove>
    491c:	90c00217 	ldw	r3,8(r18)
    4920:	90800017 	ldw	r2,0(r18)
    4924:	a021883a 	mov	r16,r20
    4928:	1d07c83a 	sub	r3,r3,r20
    492c:	1505883a 	add	r2,r2,r20
    4930:	a023883a 	mov	r17,r20
    4934:	a027883a 	mov	r19,r20
    4938:	90c00215 	stw	r3,8(r18)
    493c:	90800015 	stw	r2,0(r18)
    4940:	003f8006 	br	4744 <__sfvwrite_r+0x200>
    4944:	b809883a 	mov	r4,r23
    4948:	01400284 	movi	r5,10
    494c:	980d883a 	mov	r6,r19
    4950:	00054f80 	call	54f8 <memchr>
    4954:	10001726 	beq	r2,zero,49b4 <__sfvwrite_r+0x470>
    4958:	15c5c83a 	sub	r2,r2,r23
    495c:	15000044 	addi	r20,r2,1
    4960:	00800044 	movi	r2,1
    4964:	d8800015 	stw	r2,0(sp)
    4968:	003f9806 	br	47cc <__sfvwrite_r+0x288>
    496c:	b80b883a 	mov	r5,r23
    4970:	800d883a 	mov	r6,r16
    4974:	000567c0 	call	567c <memmove>
    4978:	90c00017 	ldw	r3,0(r18)
    497c:	e009883a 	mov	r4,fp
    4980:	900b883a 	mov	r5,r18
    4984:	1c07883a 	add	r3,r3,r16
    4988:	90c00015 	stw	r3,0(r18)
    498c:	8027883a 	mov	r19,r16
    4990:	0003c140 	call	3c14 <_fflush_r>
    4994:	103f6b26 	beq	r2,zero,4744 <__sfvwrite_r+0x200>
    4998:	003f7f06 	br	4798 <__sfvwrite_r+0x254>
    499c:	400b883a 	mov	r5,r8
    49a0:	e009883a 	mov	r4,fp
    49a4:	00067e80 	call	67e8 <_realloc_r>
    49a8:	103f7626 	beq	r2,zero,4784 <__sfvwrite_r+0x240>
    49ac:	1023883a 	mov	r17,r2
    49b0:	003f5006 	br	46f4 <__sfvwrite_r+0x1b0>
    49b4:	00c00044 	movi	r3,1
    49b8:	9d000044 	addi	r20,r19,1
    49bc:	d8c00015 	stw	r3,0(sp)
    49c0:	003f8206 	br	47cc <__sfvwrite_r+0x288>
    49c4:	9080030b 	ldhu	r2,12(r18)
    49c8:	00c00244 	movi	r3,9
    49cc:	013fffc4 	movi	r4,-1
    49d0:	10801014 	ori	r2,r2,64
    49d4:	9080030d 	sth	r2,12(r18)
    49d8:	e0c00015 	stw	r3,0(fp)
    49dc:	003f0606 	br	45f8 <__sfvwrite_r+0xb4>

000049e0 <_fwalk_reent>:
    49e0:	defff704 	addi	sp,sp,-36
    49e4:	dcc00315 	stw	r19,12(sp)
    49e8:	24c0b804 	addi	r19,r4,736
    49ec:	dd800615 	stw	r22,24(sp)
    49f0:	dd400515 	stw	r21,20(sp)
    49f4:	dfc00815 	stw	ra,32(sp)
    49f8:	ddc00715 	stw	r23,28(sp)
    49fc:	dd000415 	stw	r20,16(sp)
    4a00:	dc800215 	stw	r18,8(sp)
    4a04:	dc400115 	stw	r17,4(sp)
    4a08:	dc000015 	stw	r16,0(sp)
    4a0c:	202b883a 	mov	r21,r4
    4a10:	282d883a 	mov	r22,r5
    4a14:	0003e9c0 	call	3e9c <__sfp_lock_acquire>
    4a18:	98002126 	beq	r19,zero,4aa0 <_fwalk_reent+0xc0>
    4a1c:	002f883a 	mov	r23,zero
    4a20:	9c800117 	ldw	r18,4(r19)
    4a24:	9c000217 	ldw	r16,8(r19)
    4a28:	90bfffc4 	addi	r2,r18,-1
    4a2c:	10000d16 	blt	r2,zero,4a64 <_fwalk_reent+0x84>
    4a30:	0023883a 	mov	r17,zero
    4a34:	053fffc4 	movi	r20,-1
    4a38:	8080030f 	ldh	r2,12(r16)
    4a3c:	8c400044 	addi	r17,r17,1
    4a40:	10000626 	beq	r2,zero,4a5c <_fwalk_reent+0x7c>
    4a44:	8080038f 	ldh	r2,14(r16)
    4a48:	800b883a 	mov	r5,r16
    4a4c:	a809883a 	mov	r4,r21
    4a50:	15000226 	beq	r2,r20,4a5c <_fwalk_reent+0x7c>
    4a54:	b03ee83a 	callr	r22
    4a58:	b8aeb03a 	or	r23,r23,r2
    4a5c:	84001704 	addi	r16,r16,92
    4a60:	947ff51e 	bne	r18,r17,4a38 <_fwalk_reent+0x58>
    4a64:	9cc00017 	ldw	r19,0(r19)
    4a68:	983fed1e 	bne	r19,zero,4a20 <_fwalk_reent+0x40>
    4a6c:	0003ea00 	call	3ea0 <__sfp_lock_release>
    4a70:	b805883a 	mov	r2,r23
    4a74:	dfc00817 	ldw	ra,32(sp)
    4a78:	ddc00717 	ldw	r23,28(sp)
    4a7c:	dd800617 	ldw	r22,24(sp)
    4a80:	dd400517 	ldw	r21,20(sp)
    4a84:	dd000417 	ldw	r20,16(sp)
    4a88:	dcc00317 	ldw	r19,12(sp)
    4a8c:	dc800217 	ldw	r18,8(sp)
    4a90:	dc400117 	ldw	r17,4(sp)
    4a94:	dc000017 	ldw	r16,0(sp)
    4a98:	dec00904 	addi	sp,sp,36
    4a9c:	f800283a 	ret
    4aa0:	002f883a 	mov	r23,zero
    4aa4:	003ff106 	br	4a6c <_fwalk_reent+0x8c>

00004aa8 <_fwalk>:
    4aa8:	defff804 	addi	sp,sp,-32
    4aac:	dcc00315 	stw	r19,12(sp)
    4ab0:	24c0b804 	addi	r19,r4,736
    4ab4:	dd400515 	stw	r21,20(sp)
    4ab8:	dfc00715 	stw	ra,28(sp)
    4abc:	dd800615 	stw	r22,24(sp)
    4ac0:	dd000415 	stw	r20,16(sp)
    4ac4:	dc800215 	stw	r18,8(sp)
    4ac8:	dc400115 	stw	r17,4(sp)
    4acc:	dc000015 	stw	r16,0(sp)
    4ad0:	282b883a 	mov	r21,r5
    4ad4:	0003e9c0 	call	3e9c <__sfp_lock_acquire>
    4ad8:	98001f26 	beq	r19,zero,4b58 <_fwalk+0xb0>
    4adc:	002d883a 	mov	r22,zero
    4ae0:	9c800117 	ldw	r18,4(r19)
    4ae4:	9c000217 	ldw	r16,8(r19)
    4ae8:	90bfffc4 	addi	r2,r18,-1
    4aec:	10000c16 	blt	r2,zero,4b20 <_fwalk+0x78>
    4af0:	0023883a 	mov	r17,zero
    4af4:	053fffc4 	movi	r20,-1
    4af8:	8080030f 	ldh	r2,12(r16)
    4afc:	8c400044 	addi	r17,r17,1
    4b00:	10000526 	beq	r2,zero,4b18 <_fwalk+0x70>
    4b04:	8080038f 	ldh	r2,14(r16)
    4b08:	8009883a 	mov	r4,r16
    4b0c:	15000226 	beq	r2,r20,4b18 <_fwalk+0x70>
    4b10:	a83ee83a 	callr	r21
    4b14:	b0acb03a 	or	r22,r22,r2
    4b18:	84001704 	addi	r16,r16,92
    4b1c:	947ff61e 	bne	r18,r17,4af8 <_fwalk+0x50>
    4b20:	9cc00017 	ldw	r19,0(r19)
    4b24:	983fee1e 	bne	r19,zero,4ae0 <_fwalk+0x38>
    4b28:	0003ea00 	call	3ea0 <__sfp_lock_release>
    4b2c:	b005883a 	mov	r2,r22
    4b30:	dfc00717 	ldw	ra,28(sp)
    4b34:	dd800617 	ldw	r22,24(sp)
    4b38:	dd400517 	ldw	r21,20(sp)
    4b3c:	dd000417 	ldw	r20,16(sp)
    4b40:	dcc00317 	ldw	r19,12(sp)
    4b44:	dc800217 	ldw	r18,8(sp)
    4b48:	dc400117 	ldw	r17,4(sp)
    4b4c:	dc000017 	ldw	r16,0(sp)
    4b50:	dec00804 	addi	sp,sp,32
    4b54:	f800283a 	ret
    4b58:	002d883a 	mov	r22,zero
    4b5c:	003ff206 	br	4b28 <_fwalk+0x80>

00004b60 <__locale_charset>:
    4b60:	d0a00317 	ldw	r2,-32756(gp)
    4b64:	f800283a 	ret

00004b68 <_localeconv_r>:
    4b68:	00800074 	movhi	r2,1
    4b6c:	10b41104 	addi	r2,r2,-12220
    4b70:	f800283a 	ret

00004b74 <localeconv>:
    4b74:	00800074 	movhi	r2,1
    4b78:	10bba904 	addi	r2,r2,-4444
    4b7c:	11000017 	ldw	r4,0(r2)
    4b80:	0004b681 	jmpi	4b68 <_localeconv_r>

00004b84 <_setlocale_r>:
    4b84:	defffc04 	addi	sp,sp,-16
    4b88:	00c00074 	movhi	r3,1
    4b8c:	18f40c04 	addi	r3,r3,-12240
    4b90:	dc800215 	stw	r18,8(sp)
    4b94:	dc400115 	stw	r17,4(sp)
    4b98:	dc000015 	stw	r16,0(sp)
    4b9c:	2023883a 	mov	r17,r4
    4ba0:	2825883a 	mov	r18,r5
    4ba4:	dfc00315 	stw	ra,12(sp)
    4ba8:	3021883a 	mov	r16,r6
    4bac:	3009883a 	mov	r4,r6
    4bb0:	180b883a 	mov	r5,r3
    4bb4:	30000926 	beq	r6,zero,4bdc <_setlocale_r+0x58>
    4bb8:	00070080 	call	7008 <strcmp>
    4bbc:	8009883a 	mov	r4,r16
    4bc0:	01400074 	movhi	r5,1
    4bc4:	2973f704 	addi	r5,r5,-12324
    4bc8:	10000b1e 	bne	r2,zero,4bf8 <_setlocale_r+0x74>
    4bcc:	8c000d15 	stw	r16,52(r17)
    4bd0:	8c800c15 	stw	r18,48(r17)
    4bd4:	00c00074 	movhi	r3,1
    4bd8:	18f40c04 	addi	r3,r3,-12240
    4bdc:	1805883a 	mov	r2,r3
    4be0:	dfc00317 	ldw	ra,12(sp)
    4be4:	dc800217 	ldw	r18,8(sp)
    4be8:	dc400117 	ldw	r17,4(sp)
    4bec:	dc000017 	ldw	r16,0(sp)
    4bf0:	dec00404 	addi	sp,sp,16
    4bf4:	f800283a 	ret
    4bf8:	00070080 	call	7008 <strcmp>
    4bfc:	0007883a 	mov	r3,zero
    4c00:	103ff226 	beq	r2,zero,4bcc <_setlocale_r+0x48>
    4c04:	003ff506 	br	4bdc <_setlocale_r+0x58>

00004c08 <setlocale>:
    4c08:	01800074 	movhi	r6,1
    4c0c:	31bba904 	addi	r6,r6,-4444
    4c10:	2007883a 	mov	r3,r4
    4c14:	31000017 	ldw	r4,0(r6)
    4c18:	280d883a 	mov	r6,r5
    4c1c:	180b883a 	mov	r5,r3
    4c20:	0004b841 	jmpi	4b84 <_setlocale_r>

00004c24 <__smakebuf_r>:
    4c24:	2880030b 	ldhu	r2,12(r5)
    4c28:	deffed04 	addi	sp,sp,-76
    4c2c:	dc401015 	stw	r17,64(sp)
    4c30:	1080008c 	andi	r2,r2,2
    4c34:	dc000f15 	stw	r16,60(sp)
    4c38:	dfc01215 	stw	ra,72(sp)
    4c3c:	dc801115 	stw	r18,68(sp)
    4c40:	2821883a 	mov	r16,r5
    4c44:	2023883a 	mov	r17,r4
    4c48:	10000b26 	beq	r2,zero,4c78 <__smakebuf_r+0x54>
    4c4c:	28c010c4 	addi	r3,r5,67
    4c50:	00800044 	movi	r2,1
    4c54:	28800515 	stw	r2,20(r5)
    4c58:	28c00415 	stw	r3,16(r5)
    4c5c:	28c00015 	stw	r3,0(r5)
    4c60:	dfc01217 	ldw	ra,72(sp)
    4c64:	dc801117 	ldw	r18,68(sp)
    4c68:	dc401017 	ldw	r17,64(sp)
    4c6c:	dc000f17 	ldw	r16,60(sp)
    4c70:	dec01304 	addi	sp,sp,76
    4c74:	f800283a 	ret
    4c78:	2940038f 	ldh	r5,14(r5)
    4c7c:	28002116 	blt	r5,zero,4d04 <__smakebuf_r+0xe0>
    4c80:	d80d883a 	mov	r6,sp
    4c84:	00073f80 	call	73f8 <_fstat_r>
    4c88:	10001e16 	blt	r2,zero,4d04 <__smakebuf_r+0xe0>
    4c8c:	d8800117 	ldw	r2,4(sp)
    4c90:	00e00014 	movui	r3,32768
    4c94:	113c000c 	andi	r4,r2,61440
    4c98:	20c03126 	beq	r4,r3,4d60 <__smakebuf_r+0x13c>
    4c9c:	8080030b 	ldhu	r2,12(r16)
    4ca0:	00c80004 	movi	r3,8192
    4ca4:	10820014 	ori	r2,r2,2048
    4ca8:	8080030d 	sth	r2,12(r16)
    4cac:	20c01e26 	beq	r4,r3,4d28 <__smakebuf_r+0x104>
    4cb0:	04810004 	movi	r18,1024
    4cb4:	8809883a 	mov	r4,r17
    4cb8:	900b883a 	mov	r5,r18
    4cbc:	0004db80 	call	4db8 <_malloc_r>
    4cc0:	1009883a 	mov	r4,r2
    4cc4:	10003126 	beq	r2,zero,4d8c <__smakebuf_r+0x168>
    4cc8:	80c0030b 	ldhu	r3,12(r16)
    4ccc:	00800034 	movhi	r2,0
    4cd0:	108fe404 	addi	r2,r2,16272
    4cd4:	88800f15 	stw	r2,60(r17)
    4cd8:	18c02014 	ori	r3,r3,128
    4cdc:	84800515 	stw	r18,20(r16)
    4ce0:	80c0030d 	sth	r3,12(r16)
    4ce4:	81000415 	stw	r4,16(r16)
    4ce8:	81000015 	stw	r4,0(r16)
    4cec:	dfc01217 	ldw	ra,72(sp)
    4cf0:	dc801117 	ldw	r18,68(sp)
    4cf4:	dc401017 	ldw	r17,64(sp)
    4cf8:	dc000f17 	ldw	r16,60(sp)
    4cfc:	dec01304 	addi	sp,sp,76
    4d00:	f800283a 	ret
    4d04:	80c0030b 	ldhu	r3,12(r16)
    4d08:	1880200c 	andi	r2,r3,128
    4d0c:	10000426 	beq	r2,zero,4d20 <__smakebuf_r+0xfc>
    4d10:	04801004 	movi	r18,64
    4d14:	18820014 	ori	r2,r3,2048
    4d18:	8080030d 	sth	r2,12(r16)
    4d1c:	003fe506 	br	4cb4 <__smakebuf_r+0x90>
    4d20:	04810004 	movi	r18,1024
    4d24:	003ffb06 	br	4d14 <__smakebuf_r+0xf0>
    4d28:	8140038f 	ldh	r5,14(r16)
    4d2c:	8809883a 	mov	r4,r17
    4d30:	000746c0 	call	746c <_isatty_r>
    4d34:	103fde26 	beq	r2,zero,4cb0 <__smakebuf_r+0x8c>
    4d38:	8080030b 	ldhu	r2,12(r16)
    4d3c:	80c010c4 	addi	r3,r16,67
    4d40:	04810004 	movi	r18,1024
    4d44:	10800054 	ori	r2,r2,1
    4d48:	8080030d 	sth	r2,12(r16)
    4d4c:	00800044 	movi	r2,1
    4d50:	80c00415 	stw	r3,16(r16)
    4d54:	80800515 	stw	r2,20(r16)
    4d58:	80c00015 	stw	r3,0(r16)
    4d5c:	003fd506 	br	4cb4 <__smakebuf_r+0x90>
    4d60:	80c00a17 	ldw	r3,40(r16)
    4d64:	00800034 	movhi	r2,0
    4d68:	109bb104 	addi	r2,r2,28356
    4d6c:	18bfcb1e 	bne	r3,r2,4c9c <__smakebuf_r+0x78>
    4d70:	8080030b 	ldhu	r2,12(r16)
    4d74:	00c10004 	movi	r3,1024
    4d78:	1825883a 	mov	r18,r3
    4d7c:	10c4b03a 	or	r2,r2,r3
    4d80:	8080030d 	sth	r2,12(r16)
    4d84:	80c01315 	stw	r3,76(r16)
    4d88:	003fca06 	br	4cb4 <__smakebuf_r+0x90>
    4d8c:	8100030b 	ldhu	r4,12(r16)
    4d90:	2080800c 	andi	r2,r4,512
    4d94:	103fb21e 	bne	r2,zero,4c60 <__smakebuf_r+0x3c>
    4d98:	80c010c4 	addi	r3,r16,67
    4d9c:	21000094 	ori	r4,r4,2
    4da0:	00800044 	movi	r2,1
    4da4:	80800515 	stw	r2,20(r16)
    4da8:	8100030d 	sth	r4,12(r16)
    4dac:	80c00415 	stw	r3,16(r16)
    4db0:	80c00015 	stw	r3,0(r16)
    4db4:	003faa06 	br	4c60 <__smakebuf_r+0x3c>

00004db8 <_malloc_r>:
    4db8:	defff604 	addi	sp,sp,-40
    4dbc:	28c002c4 	addi	r3,r5,11
    4dc0:	00800584 	movi	r2,22
    4dc4:	dc800215 	stw	r18,8(sp)
    4dc8:	dfc00915 	stw	ra,36(sp)
    4dcc:	df000815 	stw	fp,32(sp)
    4dd0:	ddc00715 	stw	r23,28(sp)
    4dd4:	dd800615 	stw	r22,24(sp)
    4dd8:	dd400515 	stw	r21,20(sp)
    4ddc:	dd000415 	stw	r20,16(sp)
    4de0:	dcc00315 	stw	r19,12(sp)
    4de4:	dc400115 	stw	r17,4(sp)
    4de8:	dc000015 	stw	r16,0(sp)
    4dec:	2025883a 	mov	r18,r4
    4df0:	10c01236 	bltu	r2,r3,4e3c <_malloc_r+0x84>
    4df4:	04400404 	movi	r17,16
    4df8:	8940142e 	bgeu	r17,r5,4e4c <_malloc_r+0x94>
    4dfc:	00800304 	movi	r2,12
    4e00:	0007883a 	mov	r3,zero
    4e04:	90800015 	stw	r2,0(r18)
    4e08:	1805883a 	mov	r2,r3
    4e0c:	dfc00917 	ldw	ra,36(sp)
    4e10:	df000817 	ldw	fp,32(sp)
    4e14:	ddc00717 	ldw	r23,28(sp)
    4e18:	dd800617 	ldw	r22,24(sp)
    4e1c:	dd400517 	ldw	r21,20(sp)
    4e20:	dd000417 	ldw	r20,16(sp)
    4e24:	dcc00317 	ldw	r19,12(sp)
    4e28:	dc800217 	ldw	r18,8(sp)
    4e2c:	dc400117 	ldw	r17,4(sp)
    4e30:	dc000017 	ldw	r16,0(sp)
    4e34:	dec00a04 	addi	sp,sp,40
    4e38:	f800283a 	ret
    4e3c:	00bffe04 	movi	r2,-8
    4e40:	18a2703a 	and	r17,r3,r2
    4e44:	883fed16 	blt	r17,zero,4dfc <_malloc_r+0x44>
    4e48:	897fec36 	bltu	r17,r5,4dfc <_malloc_r+0x44>
    4e4c:	9009883a 	mov	r4,r18
    4e50:	000a0800 	call	a080 <__malloc_lock>
    4e54:	00807dc4 	movi	r2,503
    4e58:	14402b2e 	bgeu	r2,r17,4f08 <_malloc_r+0x150>
    4e5c:	8806d27a 	srli	r3,r17,9
    4e60:	18003f1e 	bne	r3,zero,4f60 <_malloc_r+0x1a8>
    4e64:	880cd0fa 	srli	r6,r17,3
    4e68:	300490fa 	slli	r2,r6,3
    4e6c:	02c00074 	movhi	r11,1
    4e70:	5af5c304 	addi	r11,r11,-10484
    4e74:	12cb883a 	add	r5,r2,r11
    4e78:	2c000317 	ldw	r16,12(r5)
    4e7c:	580f883a 	mov	r7,r11
    4e80:	2c00041e 	bne	r5,r16,4e94 <_malloc_r+0xdc>
    4e84:	00000a06 	br	4eb0 <_malloc_r+0xf8>
    4e88:	1800860e 	bge	r3,zero,50a4 <_malloc_r+0x2ec>
    4e8c:	84000317 	ldw	r16,12(r16)
    4e90:	2c000726 	beq	r5,r16,4eb0 <_malloc_r+0xf8>
    4e94:	80800117 	ldw	r2,4(r16)
    4e98:	00ffff04 	movi	r3,-4
    4e9c:	10c8703a 	and	r4,r2,r3
    4ea0:	2447c83a 	sub	r3,r4,r17
    4ea4:	008003c4 	movi	r2,15
    4ea8:	10fff70e 	bge	r2,r3,4e88 <_malloc_r+0xd0>
    4eac:	31bfffc4 	addi	r6,r6,-1
    4eb0:	32400044 	addi	r9,r6,1
    4eb4:	02800074 	movhi	r10,1
    4eb8:	52b5c504 	addi	r10,r10,-10476
    4ebc:	54000217 	ldw	r16,8(r10)
    4ec0:	8280a026 	beq	r16,r10,5144 <_malloc_r+0x38c>
    4ec4:	80800117 	ldw	r2,4(r16)
    4ec8:	00ffff04 	movi	r3,-4
    4ecc:	10ca703a 	and	r5,r2,r3
    4ed0:	2c4dc83a 	sub	r6,r5,r17
    4ed4:	008003c4 	movi	r2,15
    4ed8:	11808316 	blt	r2,r6,50e8 <_malloc_r+0x330>
    4edc:	52800315 	stw	r10,12(r10)
    4ee0:	52800215 	stw	r10,8(r10)
    4ee4:	30002916 	blt	r6,zero,4f8c <_malloc_r+0x1d4>
    4ee8:	8147883a 	add	r3,r16,r5
    4eec:	18800117 	ldw	r2,4(r3)
    4ef0:	9009883a 	mov	r4,r18
    4ef4:	10800054 	ori	r2,r2,1
    4ef8:	18800115 	stw	r2,4(r3)
    4efc:	000a0a00 	call	a0a0 <__malloc_unlock>
    4f00:	80c00204 	addi	r3,r16,8
    4f04:	003fc006 	br	4e08 <_malloc_r+0x50>
    4f08:	02c00074 	movhi	r11,1
    4f0c:	5af5c304 	addi	r11,r11,-10484
    4f10:	8ac5883a 	add	r2,r17,r11
    4f14:	14000317 	ldw	r16,12(r2)
    4f18:	580f883a 	mov	r7,r11
    4f1c:	8806d0fa 	srli	r3,r17,3
    4f20:	14006c26 	beq	r2,r16,50d4 <_malloc_r+0x31c>
    4f24:	80c00117 	ldw	r3,4(r16)
    4f28:	00bfff04 	movi	r2,-4
    4f2c:	81800317 	ldw	r6,12(r16)
    4f30:	1886703a 	and	r3,r3,r2
    4f34:	80c7883a 	add	r3,r16,r3
    4f38:	18800117 	ldw	r2,4(r3)
    4f3c:	81400217 	ldw	r5,8(r16)
    4f40:	9009883a 	mov	r4,r18
    4f44:	10800054 	ori	r2,r2,1
    4f48:	18800115 	stw	r2,4(r3)
    4f4c:	31400215 	stw	r5,8(r6)
    4f50:	29800315 	stw	r6,12(r5)
    4f54:	000a0a00 	call	a0a0 <__malloc_unlock>
    4f58:	80c00204 	addi	r3,r16,8
    4f5c:	003faa06 	br	4e08 <_malloc_r+0x50>
    4f60:	00800104 	movi	r2,4
    4f64:	10c0052e 	bgeu	r2,r3,4f7c <_malloc_r+0x1c4>
    4f68:	00800504 	movi	r2,20
    4f6c:	10c07836 	bltu	r2,r3,5150 <_malloc_r+0x398>
    4f70:	198016c4 	addi	r6,r3,91
    4f74:	300490fa 	slli	r2,r6,3
    4f78:	003fbc06 	br	4e6c <_malloc_r+0xb4>
    4f7c:	8804d1ba 	srli	r2,r17,6
    4f80:	11800e04 	addi	r6,r2,56
    4f84:	300490fa 	slli	r2,r6,3
    4f88:	003fb806 	br	4e6c <_malloc_r+0xb4>
    4f8c:	00807fc4 	movi	r2,511
    4f90:	1140bb36 	bltu	r2,r5,5280 <_malloc_r+0x4c8>
    4f94:	2806d0fa 	srli	r3,r5,3
    4f98:	573ffe04 	addi	fp,r10,-8
    4f9c:	00800044 	movi	r2,1
    4fa0:	180890fa 	slli	r4,r3,3
    4fa4:	1807d0ba 	srai	r3,r3,2
    4fa8:	e1c00117 	ldw	r7,4(fp)
    4fac:	5909883a 	add	r4,r11,r4
    4fb0:	21400217 	ldw	r5,8(r4)
    4fb4:	10c4983a 	sll	r2,r2,r3
    4fb8:	81000315 	stw	r4,12(r16)
    4fbc:	81400215 	stw	r5,8(r16)
    4fc0:	388eb03a 	or	r7,r7,r2
    4fc4:	2c000315 	stw	r16,12(r5)
    4fc8:	24000215 	stw	r16,8(r4)
    4fcc:	e1c00115 	stw	r7,4(fp)
    4fd0:	4807883a 	mov	r3,r9
    4fd4:	4800cd16 	blt	r9,zero,530c <_malloc_r+0x554>
    4fd8:	1807d0ba 	srai	r3,r3,2
    4fdc:	00800044 	movi	r2,1
    4fe0:	10c8983a 	sll	r4,r2,r3
    4fe4:	39004436 	bltu	r7,r4,50f8 <_malloc_r+0x340>
    4fe8:	21c4703a 	and	r2,r4,r7
    4fec:	10000a1e 	bne	r2,zero,5018 <_malloc_r+0x260>
    4ff0:	2109883a 	add	r4,r4,r4
    4ff4:	00bfff04 	movi	r2,-4
    4ff8:	4884703a 	and	r2,r9,r2
    4ffc:	3906703a 	and	r3,r7,r4
    5000:	12400104 	addi	r9,r2,4
    5004:	1800041e 	bne	r3,zero,5018 <_malloc_r+0x260>
    5008:	2109883a 	add	r4,r4,r4
    500c:	3904703a 	and	r2,r7,r4
    5010:	4a400104 	addi	r9,r9,4
    5014:	103ffc26 	beq	r2,zero,5008 <_malloc_r+0x250>
    5018:	480490fa 	slli	r2,r9,3
    501c:	4819883a 	mov	r12,r9
    5020:	023fff04 	movi	r8,-4
    5024:	589b883a 	add	r13,r11,r2
    5028:	6807883a 	mov	r3,r13
    502c:	014003c4 	movi	r5,15
    5030:	1c000317 	ldw	r16,12(r3)
    5034:	1c00041e 	bne	r3,r16,5048 <_malloc_r+0x290>
    5038:	0000a706 	br	52d8 <_malloc_r+0x520>
    503c:	3000ab0e 	bge	r6,zero,52ec <_malloc_r+0x534>
    5040:	84000317 	ldw	r16,12(r16)
    5044:	1c00a426 	beq	r3,r16,52d8 <_malloc_r+0x520>
    5048:	80800117 	ldw	r2,4(r16)
    504c:	1204703a 	and	r2,r2,r8
    5050:	144dc83a 	sub	r6,r2,r17
    5054:	29bff90e 	bge	r5,r6,503c <_malloc_r+0x284>
    5058:	81000317 	ldw	r4,12(r16)
    505c:	80c00217 	ldw	r3,8(r16)
    5060:	89400054 	ori	r5,r17,1
    5064:	8445883a 	add	r2,r16,r17
    5068:	20c00215 	stw	r3,8(r4)
    506c:	19000315 	stw	r4,12(r3)
    5070:	81400115 	stw	r5,4(r16)
    5074:	1187883a 	add	r3,r2,r6
    5078:	31000054 	ori	r4,r6,1
    507c:	50800315 	stw	r2,12(r10)
    5080:	50800215 	stw	r2,8(r10)
    5084:	19800015 	stw	r6,0(r3)
    5088:	11000115 	stw	r4,4(r2)
    508c:	12800215 	stw	r10,8(r2)
    5090:	12800315 	stw	r10,12(r2)
    5094:	9009883a 	mov	r4,r18
    5098:	000a0a00 	call	a0a0 <__malloc_unlock>
    509c:	80c00204 	addi	r3,r16,8
    50a0:	003f5906 	br	4e08 <_malloc_r+0x50>
    50a4:	8109883a 	add	r4,r16,r4
    50a8:	20800117 	ldw	r2,4(r4)
    50ac:	80c00217 	ldw	r3,8(r16)
    50b0:	81400317 	ldw	r5,12(r16)
    50b4:	10800054 	ori	r2,r2,1
    50b8:	20800115 	stw	r2,4(r4)
    50bc:	28c00215 	stw	r3,8(r5)
    50c0:	19400315 	stw	r5,12(r3)
    50c4:	9009883a 	mov	r4,r18
    50c8:	000a0a00 	call	a0a0 <__malloc_unlock>
    50cc:	80c00204 	addi	r3,r16,8
    50d0:	003f4d06 	br	4e08 <_malloc_r+0x50>
    50d4:	80800204 	addi	r2,r16,8
    50d8:	14000317 	ldw	r16,12(r2)
    50dc:	143f911e 	bne	r2,r16,4f24 <_malloc_r+0x16c>
    50e0:	1a400084 	addi	r9,r3,2
    50e4:	003f7306 	br	4eb4 <_malloc_r+0xfc>
    50e8:	88c00054 	ori	r3,r17,1
    50ec:	8445883a 	add	r2,r16,r17
    50f0:	80c00115 	stw	r3,4(r16)
    50f4:	003fdf06 	br	5074 <_malloc_r+0x2bc>
    50f8:	e4000217 	ldw	r16,8(fp)
    50fc:	00bfff04 	movi	r2,-4
    5100:	80c00117 	ldw	r3,4(r16)
    5104:	802d883a 	mov	r22,r16
    5108:	18aa703a 	and	r21,r3,r2
    510c:	ac401636 	bltu	r21,r17,5168 <_malloc_r+0x3b0>
    5110:	ac49c83a 	sub	r4,r21,r17
    5114:	008003c4 	movi	r2,15
    5118:	1100130e 	bge	r2,r4,5168 <_malloc_r+0x3b0>
    511c:	88800054 	ori	r2,r17,1
    5120:	8447883a 	add	r3,r16,r17
    5124:	80800115 	stw	r2,4(r16)
    5128:	20800054 	ori	r2,r4,1
    512c:	18800115 	stw	r2,4(r3)
    5130:	e0c00215 	stw	r3,8(fp)
    5134:	9009883a 	mov	r4,r18
    5138:	000a0a00 	call	a0a0 <__malloc_unlock>
    513c:	80c00204 	addi	r3,r16,8
    5140:	003f3106 	br	4e08 <_malloc_r+0x50>
    5144:	39c00117 	ldw	r7,4(r7)
    5148:	573ffe04 	addi	fp,r10,-8
    514c:	003fa006 	br	4fd0 <_malloc_r+0x218>
    5150:	00801504 	movi	r2,84
    5154:	10c06736 	bltu	r2,r3,52f4 <_malloc_r+0x53c>
    5158:	8804d33a 	srli	r2,r17,12
    515c:	11801b84 	addi	r6,r2,110
    5160:	300490fa 	slli	r2,r6,3
    5164:	003f4106 	br	4e6c <_malloc_r+0xb4>
    5168:	d0a70c17 	ldw	r2,-25552(gp)
    516c:	d0e00517 	ldw	r3,-32748(gp)
    5170:	053fffc4 	movi	r20,-1
    5174:	10800404 	addi	r2,r2,16
    5178:	88a7883a 	add	r19,r17,r2
    517c:	1d000326 	beq	r3,r20,518c <_malloc_r+0x3d4>
    5180:	98c3ffc4 	addi	r3,r19,4095
    5184:	00bc0004 	movi	r2,-4096
    5188:	18a6703a 	and	r19,r3,r2
    518c:	9009883a 	mov	r4,r18
    5190:	980b883a 	mov	r5,r19
    5194:	0006e4c0 	call	6e4c <_sbrk_r>
    5198:	1009883a 	mov	r4,r2
    519c:	15000426 	beq	r2,r20,51b0 <_malloc_r+0x3f8>
    51a0:	854b883a 	add	r5,r16,r21
    51a4:	1029883a 	mov	r20,r2
    51a8:	11405a2e 	bgeu	r2,r5,5314 <_malloc_r+0x55c>
    51ac:	87000c26 	beq	r16,fp,51e0 <_malloc_r+0x428>
    51b0:	e4000217 	ldw	r16,8(fp)
    51b4:	80c00117 	ldw	r3,4(r16)
    51b8:	00bfff04 	movi	r2,-4
    51bc:	1884703a 	and	r2,r3,r2
    51c0:	14400336 	bltu	r2,r17,51d0 <_malloc_r+0x418>
    51c4:	1449c83a 	sub	r4,r2,r17
    51c8:	008003c4 	movi	r2,15
    51cc:	113fd316 	blt	r2,r4,511c <_malloc_r+0x364>
    51d0:	9009883a 	mov	r4,r18
    51d4:	000a0a00 	call	a0a0 <__malloc_unlock>
    51d8:	0007883a 	mov	r3,zero
    51dc:	003f0a06 	br	4e08 <_malloc_r+0x50>
    51e0:	05c00074 	movhi	r23,1
    51e4:	bdc2bf04 	addi	r23,r23,2812
    51e8:	b8800017 	ldw	r2,0(r23)
    51ec:	988d883a 	add	r6,r19,r2
    51f0:	b9800015 	stw	r6,0(r23)
    51f4:	d0e00517 	ldw	r3,-32748(gp)
    51f8:	00bfffc4 	movi	r2,-1
    51fc:	18808e26 	beq	r3,r2,5438 <_malloc_r+0x680>
    5200:	2145c83a 	sub	r2,r4,r5
    5204:	3085883a 	add	r2,r6,r2
    5208:	b8800015 	stw	r2,0(r23)
    520c:	20c001cc 	andi	r3,r4,7
    5210:	18005f1e 	bne	r3,zero,5390 <_malloc_r+0x5d8>
    5214:	000b883a 	mov	r5,zero
    5218:	a4c5883a 	add	r2,r20,r19
    521c:	1083ffcc 	andi	r2,r2,4095
    5220:	00c40004 	movi	r3,4096
    5224:	1887c83a 	sub	r3,r3,r2
    5228:	28e7883a 	add	r19,r5,r3
    522c:	9009883a 	mov	r4,r18
    5230:	980b883a 	mov	r5,r19
    5234:	0006e4c0 	call	6e4c <_sbrk_r>
    5238:	1007883a 	mov	r3,r2
    523c:	00bfffc4 	movi	r2,-1
    5240:	18807a26 	beq	r3,r2,542c <_malloc_r+0x674>
    5244:	1d05c83a 	sub	r2,r3,r20
    5248:	9885883a 	add	r2,r19,r2
    524c:	10c00054 	ori	r3,r2,1
    5250:	b8800017 	ldw	r2,0(r23)
    5254:	a021883a 	mov	r16,r20
    5258:	a0c00115 	stw	r3,4(r20)
    525c:	9885883a 	add	r2,r19,r2
    5260:	b8800015 	stw	r2,0(r23)
    5264:	e5000215 	stw	r20,8(fp)
    5268:	b7003626 	beq	r22,fp,5344 <_malloc_r+0x58c>
    526c:	018003c4 	movi	r6,15
    5270:	35404b36 	bltu	r6,r21,53a0 <_malloc_r+0x5e8>
    5274:	00800044 	movi	r2,1
    5278:	a0800115 	stw	r2,4(r20)
    527c:	003fcd06 	br	51b4 <_malloc_r+0x3fc>
    5280:	2808d27a 	srli	r4,r5,9
    5284:	2000371e 	bne	r4,zero,5364 <_malloc_r+0x5ac>
    5288:	2808d0fa 	srli	r4,r5,3
    528c:	200690fa 	slli	r3,r4,3
    5290:	1ad1883a 	add	r8,r3,r11
    5294:	41800217 	ldw	r6,8(r8)
    5298:	41805b26 	beq	r8,r6,5408 <_malloc_r+0x650>
    529c:	30800117 	ldw	r2,4(r6)
    52a0:	00ffff04 	movi	r3,-4
    52a4:	10c4703a 	and	r2,r2,r3
    52a8:	2880022e 	bgeu	r5,r2,52b4 <_malloc_r+0x4fc>
    52ac:	31800217 	ldw	r6,8(r6)
    52b0:	41bffa1e 	bne	r8,r6,529c <_malloc_r+0x4e4>
    52b4:	32000317 	ldw	r8,12(r6)
    52b8:	39c00117 	ldw	r7,4(r7)
    52bc:	82000315 	stw	r8,12(r16)
    52c0:	81800215 	stw	r6,8(r16)
    52c4:	07000074 	movhi	fp,1
    52c8:	e735c304 	addi	fp,fp,-10484
    52cc:	34000315 	stw	r16,12(r6)
    52d0:	44000215 	stw	r16,8(r8)
    52d4:	003f3e06 	br	4fd0 <_malloc_r+0x218>
    52d8:	63000044 	addi	r12,r12,1
    52dc:	608000cc 	andi	r2,r12,3
    52e0:	10005d26 	beq	r2,zero,5458 <_malloc_r+0x6a0>
    52e4:	18c00204 	addi	r3,r3,8
    52e8:	003f5106 	br	5030 <_malloc_r+0x278>
    52ec:	8089883a 	add	r4,r16,r2
    52f0:	003f6d06 	br	50a8 <_malloc_r+0x2f0>
    52f4:	00805504 	movi	r2,340
    52f8:	10c02036 	bltu	r2,r3,537c <_malloc_r+0x5c4>
    52fc:	8804d3fa 	srli	r2,r17,15
    5300:	11801dc4 	addi	r6,r2,119
    5304:	300490fa 	slli	r2,r6,3
    5308:	003ed806 	br	4e6c <_malloc_r+0xb4>
    530c:	48c000c4 	addi	r3,r9,3
    5310:	003f3106 	br	4fd8 <_malloc_r+0x220>
    5314:	05c00074 	movhi	r23,1
    5318:	bdc2bf04 	addi	r23,r23,2812
    531c:	b8800017 	ldw	r2,0(r23)
    5320:	988d883a 	add	r6,r19,r2
    5324:	b9800015 	stw	r6,0(r23)
    5328:	293fb21e 	bne	r5,r4,51f4 <_malloc_r+0x43c>
    532c:	2083ffcc 	andi	r2,r4,4095
    5330:	103fb01e 	bne	r2,zero,51f4 <_malloc_r+0x43c>
    5334:	e4000217 	ldw	r16,8(fp)
    5338:	9d45883a 	add	r2,r19,r21
    533c:	10800054 	ori	r2,r2,1
    5340:	80800115 	stw	r2,4(r16)
    5344:	b8c00017 	ldw	r3,0(r23)
    5348:	d0a70d17 	ldw	r2,-25548(gp)
    534c:	10c0012e 	bgeu	r2,r3,5354 <_malloc_r+0x59c>
    5350:	d0e70d15 	stw	r3,-25548(gp)
    5354:	d0a70e17 	ldw	r2,-25544(gp)
    5358:	10ff962e 	bgeu	r2,r3,51b4 <_malloc_r+0x3fc>
    535c:	d0e70e15 	stw	r3,-25544(gp)
    5360:	003f9406 	br	51b4 <_malloc_r+0x3fc>
    5364:	00800104 	movi	r2,4
    5368:	11001e36 	bltu	r2,r4,53e4 <_malloc_r+0x62c>
    536c:	2804d1ba 	srli	r2,r5,6
    5370:	11000e04 	addi	r4,r2,56
    5374:	200690fa 	slli	r3,r4,3
    5378:	003fc506 	br	5290 <_malloc_r+0x4d8>
    537c:	00815504 	movi	r2,1364
    5380:	10c01d2e 	bgeu	r2,r3,53f8 <_malloc_r+0x640>
    5384:	01801f84 	movi	r6,126
    5388:	0080fc04 	movi	r2,1008
    538c:	003eb706 	br	4e6c <_malloc_r+0xb4>
    5390:	00800204 	movi	r2,8
    5394:	10cbc83a 	sub	r5,r2,r3
    5398:	2169883a 	add	r20,r4,r5
    539c:	003f9e06 	br	5218 <_malloc_r+0x460>
    53a0:	00bffe04 	movi	r2,-8
    53a4:	a93ffd04 	addi	r4,r21,-12
    53a8:	2088703a 	and	r4,r4,r2
    53ac:	b10b883a 	add	r5,r22,r4
    53b0:	00c00144 	movi	r3,5
    53b4:	28c00215 	stw	r3,8(r5)
    53b8:	28c00115 	stw	r3,4(r5)
    53bc:	b0800117 	ldw	r2,4(r22)
    53c0:	1080004c 	andi	r2,r2,1
    53c4:	2084b03a 	or	r2,r4,r2
    53c8:	b0800115 	stw	r2,4(r22)
    53cc:	313fdd2e 	bgeu	r6,r4,5344 <_malloc_r+0x58c>
    53d0:	b1400204 	addi	r5,r22,8
    53d4:	9009883a 	mov	r4,r18
    53d8:	00042300 	call	4230 <_free_r>
    53dc:	e4000217 	ldw	r16,8(fp)
    53e0:	003fd806 	br	5344 <_malloc_r+0x58c>
    53e4:	00800504 	movi	r2,20
    53e8:	11001536 	bltu	r2,r4,5440 <_malloc_r+0x688>
    53ec:	210016c4 	addi	r4,r4,91
    53f0:	200690fa 	slli	r3,r4,3
    53f4:	003fa606 	br	5290 <_malloc_r+0x4d8>
    53f8:	8804d4ba 	srli	r2,r17,18
    53fc:	11801f04 	addi	r6,r2,124
    5400:	300490fa 	slli	r2,r6,3
    5404:	003e9906 	br	4e6c <_malloc_r+0xb4>
    5408:	2009d0ba 	srai	r4,r4,2
    540c:	01400074 	movhi	r5,1
    5410:	2975c304 	addi	r5,r5,-10484
    5414:	00c00044 	movi	r3,1
    5418:	28800117 	ldw	r2,4(r5)
    541c:	1906983a 	sll	r3,r3,r4
    5420:	10c4b03a 	or	r2,r2,r3
    5424:	28800115 	stw	r2,4(r5)
    5428:	003fa306 	br	52b8 <_malloc_r+0x500>
    542c:	0027883a 	mov	r19,zero
    5430:	00c00044 	movi	r3,1
    5434:	003f8606 	br	5250 <_malloc_r+0x498>
    5438:	d1200515 	stw	r4,-32748(gp)
    543c:	003f7306 	br	520c <_malloc_r+0x454>
    5440:	00801504 	movi	r2,84
    5444:	11001936 	bltu	r2,r4,54ac <_malloc_r+0x6f4>
    5448:	2804d33a 	srli	r2,r5,12
    544c:	11001b84 	addi	r4,r2,110
    5450:	200690fa 	slli	r3,r4,3
    5454:	003f8e06 	br	5290 <_malloc_r+0x4d8>
    5458:	480b883a 	mov	r5,r9
    545c:	6807883a 	mov	r3,r13
    5460:	288000cc 	andi	r2,r5,3
    5464:	18fffe04 	addi	r3,r3,-8
    5468:	297fffc4 	addi	r5,r5,-1
    546c:	10001526 	beq	r2,zero,54c4 <_malloc_r+0x70c>
    5470:	18800217 	ldw	r2,8(r3)
    5474:	10fffa26 	beq	r2,r3,5460 <_malloc_r+0x6a8>
    5478:	2109883a 	add	r4,r4,r4
    547c:	393f1e36 	bltu	r7,r4,50f8 <_malloc_r+0x340>
    5480:	203f1d26 	beq	r4,zero,50f8 <_malloc_r+0x340>
    5484:	21c4703a 	and	r2,r4,r7
    5488:	10000226 	beq	r2,zero,5494 <_malloc_r+0x6dc>
    548c:	6013883a 	mov	r9,r12
    5490:	003ee106 	br	5018 <_malloc_r+0x260>
    5494:	2109883a 	add	r4,r4,r4
    5498:	3904703a 	and	r2,r7,r4
    549c:	63000104 	addi	r12,r12,4
    54a0:	103ffc26 	beq	r2,zero,5494 <_malloc_r+0x6dc>
    54a4:	6013883a 	mov	r9,r12
    54a8:	003edb06 	br	5018 <_malloc_r+0x260>
    54ac:	00805504 	movi	r2,340
    54b0:	11000836 	bltu	r2,r4,54d4 <_malloc_r+0x71c>
    54b4:	2804d3fa 	srli	r2,r5,15
    54b8:	11001dc4 	addi	r4,r2,119
    54bc:	200690fa 	slli	r3,r4,3
    54c0:	003f7306 	br	5290 <_malloc_r+0x4d8>
    54c4:	0104303a 	nor	r2,zero,r4
    54c8:	388e703a 	and	r7,r7,r2
    54cc:	e1c00115 	stw	r7,4(fp)
    54d0:	003fe906 	br	5478 <_malloc_r+0x6c0>
    54d4:	00815504 	movi	r2,1364
    54d8:	1100032e 	bgeu	r2,r4,54e8 <_malloc_r+0x730>
    54dc:	01001f84 	movi	r4,126
    54e0:	00c0fc04 	movi	r3,1008
    54e4:	003f6a06 	br	5290 <_malloc_r+0x4d8>
    54e8:	2804d4ba 	srli	r2,r5,18
    54ec:	11001f04 	addi	r4,r2,124
    54f0:	200690fa 	slli	r3,r4,3
    54f4:	003f6606 	br	5290 <_malloc_r+0x4d8>

000054f8 <memchr>:
    54f8:	008000c4 	movi	r2,3
    54fc:	29403fcc 	andi	r5,r5,255
    5500:	2007883a 	mov	r3,r4
    5504:	1180022e 	bgeu	r2,r6,5510 <memchr+0x18>
    5508:	2084703a 	and	r2,r4,r2
    550c:	10000b26 	beq	r2,zero,553c <memchr+0x44>
    5510:	313fffc4 	addi	r4,r6,-1
    5514:	3000051e 	bne	r6,zero,552c <memchr+0x34>
    5518:	00002c06 	br	55cc <memchr+0xd4>
    551c:	213fffc4 	addi	r4,r4,-1
    5520:	00bfffc4 	movi	r2,-1
    5524:	18c00044 	addi	r3,r3,1
    5528:	20802826 	beq	r4,r2,55cc <memchr+0xd4>
    552c:	18800003 	ldbu	r2,0(r3)
    5530:	28bffa1e 	bne	r5,r2,551c <memchr+0x24>
    5534:	1805883a 	mov	r2,r3
    5538:	f800283a 	ret
    553c:	0011883a 	mov	r8,zero
    5540:	0007883a 	mov	r3,zero
    5544:	01c00104 	movi	r7,4
    5548:	4004923a 	slli	r2,r8,8
    554c:	18c00044 	addi	r3,r3,1
    5550:	1151883a 	add	r8,r2,r5
    5554:	19fffc1e 	bne	r3,r7,5548 <memchr+0x50>
    5558:	02bfbff4 	movhi	r10,65279
    555c:	52bfbfc4 	addi	r10,r10,-257
    5560:	02602074 	movhi	r9,32897
    5564:	4a602004 	addi	r9,r9,-32640
    5568:	02c000c4 	movi	r11,3
    556c:	20800017 	ldw	r2,0(r4)
    5570:	31bfff04 	addi	r6,r6,-4
    5574:	200f883a 	mov	r7,r4
    5578:	1204f03a 	xor	r2,r2,r8
    557c:	1287883a 	add	r3,r2,r10
    5580:	1a46703a 	and	r3,r3,r9
    5584:	0084303a 	nor	r2,zero,r2
    5588:	10c4703a 	and	r2,r2,r3
    558c:	10000b26 	beq	r2,zero,55bc <memchr+0xc4>
    5590:	20800003 	ldbu	r2,0(r4)
    5594:	28800f26 	beq	r5,r2,55d4 <memchr+0xdc>
    5598:	20800043 	ldbu	r2,1(r4)
    559c:	21c00044 	addi	r7,r4,1
    55a0:	28800c26 	beq	r5,r2,55d4 <memchr+0xdc>
    55a4:	20800083 	ldbu	r2,2(r4)
    55a8:	21c00084 	addi	r7,r4,2
    55ac:	28800926 	beq	r5,r2,55d4 <memchr+0xdc>
    55b0:	208000c3 	ldbu	r2,3(r4)
    55b4:	21c000c4 	addi	r7,r4,3
    55b8:	28800626 	beq	r5,r2,55d4 <memchr+0xdc>
    55bc:	21000104 	addi	r4,r4,4
    55c0:	59bfea36 	bltu	r11,r6,556c <memchr+0x74>
    55c4:	2007883a 	mov	r3,r4
    55c8:	003fd106 	br	5510 <memchr+0x18>
    55cc:	0005883a 	mov	r2,zero
    55d0:	f800283a 	ret
    55d4:	3805883a 	mov	r2,r7
    55d8:	f800283a 	ret

000055dc <memcpy>:
    55dc:	01c003c4 	movi	r7,15
    55e0:	2007883a 	mov	r3,r4
    55e4:	3980032e 	bgeu	r7,r6,55f4 <memcpy+0x18>
    55e8:	2904b03a 	or	r2,r5,r4
    55ec:	108000cc 	andi	r2,r2,3
    55f0:	10000926 	beq	r2,zero,5618 <memcpy+0x3c>
    55f4:	30000626 	beq	r6,zero,5610 <memcpy+0x34>
    55f8:	30cd883a 	add	r6,r6,r3
    55fc:	28800003 	ldbu	r2,0(r5)
    5600:	29400044 	addi	r5,r5,1
    5604:	18800005 	stb	r2,0(r3)
    5608:	18c00044 	addi	r3,r3,1
    560c:	30fffb1e 	bne	r6,r3,55fc <memcpy+0x20>
    5610:	2005883a 	mov	r2,r4
    5614:	f800283a 	ret
    5618:	3811883a 	mov	r8,r7
    561c:	200f883a 	mov	r7,r4
    5620:	28c00017 	ldw	r3,0(r5)
    5624:	31bffc04 	addi	r6,r6,-16
    5628:	38c00015 	stw	r3,0(r7)
    562c:	28800117 	ldw	r2,4(r5)
    5630:	38800115 	stw	r2,4(r7)
    5634:	28c00217 	ldw	r3,8(r5)
    5638:	38c00215 	stw	r3,8(r7)
    563c:	28800317 	ldw	r2,12(r5)
    5640:	29400404 	addi	r5,r5,16
    5644:	38800315 	stw	r2,12(r7)
    5648:	39c00404 	addi	r7,r7,16
    564c:	41bff436 	bltu	r8,r6,5620 <memcpy+0x44>
    5650:	008000c4 	movi	r2,3
    5654:	1180072e 	bgeu	r2,r6,5674 <memcpy+0x98>
    5658:	1007883a 	mov	r3,r2
    565c:	28800017 	ldw	r2,0(r5)
    5660:	31bfff04 	addi	r6,r6,-4
    5664:	29400104 	addi	r5,r5,4
    5668:	38800015 	stw	r2,0(r7)
    566c:	39c00104 	addi	r7,r7,4
    5670:	19bffa36 	bltu	r3,r6,565c <memcpy+0x80>
    5674:	3807883a 	mov	r3,r7
    5678:	003fde06 	br	55f4 <memcpy+0x18>

0000567c <memmove>:
    567c:	2807883a 	mov	r3,r5
    5680:	2011883a 	mov	r8,r4
    5684:	29000c2e 	bgeu	r5,r4,56b8 <memmove+0x3c>
    5688:	298f883a 	add	r7,r5,r6
    568c:	21c00a2e 	bgeu	r4,r7,56b8 <memmove+0x3c>
    5690:	30000726 	beq	r6,zero,56b0 <memmove+0x34>
    5694:	2187883a 	add	r3,r4,r6
    5698:	198dc83a 	sub	r6,r3,r6
    569c:	39ffffc4 	addi	r7,r7,-1
    56a0:	38800003 	ldbu	r2,0(r7)
    56a4:	18ffffc4 	addi	r3,r3,-1
    56a8:	18800005 	stb	r2,0(r3)
    56ac:	19bffb1e 	bne	r3,r6,569c <memmove+0x20>
    56b0:	2005883a 	mov	r2,r4
    56b4:	f800283a 	ret
    56b8:	01c003c4 	movi	r7,15
    56bc:	39800a36 	bltu	r7,r6,56e8 <memmove+0x6c>
    56c0:	303ffb26 	beq	r6,zero,56b0 <memmove+0x34>
    56c4:	400f883a 	mov	r7,r8
    56c8:	320d883a 	add	r6,r6,r8
    56cc:	28800003 	ldbu	r2,0(r5)
    56d0:	29400044 	addi	r5,r5,1
    56d4:	38800005 	stb	r2,0(r7)
    56d8:	39c00044 	addi	r7,r7,1
    56dc:	39bffb1e 	bne	r7,r6,56cc <memmove+0x50>
    56e0:	2005883a 	mov	r2,r4
    56e4:	f800283a 	ret
    56e8:	1904b03a 	or	r2,r3,r4
    56ec:	108000cc 	andi	r2,r2,3
    56f0:	103ff31e 	bne	r2,zero,56c0 <memmove+0x44>
    56f4:	3811883a 	mov	r8,r7
    56f8:	180b883a 	mov	r5,r3
    56fc:	200f883a 	mov	r7,r4
    5700:	28c00017 	ldw	r3,0(r5)
    5704:	31bffc04 	addi	r6,r6,-16
    5708:	38c00015 	stw	r3,0(r7)
    570c:	28800117 	ldw	r2,4(r5)
    5710:	38800115 	stw	r2,4(r7)
    5714:	28c00217 	ldw	r3,8(r5)
    5718:	38c00215 	stw	r3,8(r7)
    571c:	28800317 	ldw	r2,12(r5)
    5720:	29400404 	addi	r5,r5,16
    5724:	38800315 	stw	r2,12(r7)
    5728:	39c00404 	addi	r7,r7,16
    572c:	41bff436 	bltu	r8,r6,5700 <memmove+0x84>
    5730:	008000c4 	movi	r2,3
    5734:	1180072e 	bgeu	r2,r6,5754 <memmove+0xd8>
    5738:	1007883a 	mov	r3,r2
    573c:	28800017 	ldw	r2,0(r5)
    5740:	31bfff04 	addi	r6,r6,-4
    5744:	29400104 	addi	r5,r5,4
    5748:	38800015 	stw	r2,0(r7)
    574c:	39c00104 	addi	r7,r7,4
    5750:	19bffa36 	bltu	r3,r6,573c <memmove+0xc0>
    5754:	3811883a 	mov	r8,r7
    5758:	003fd906 	br	56c0 <memmove+0x44>

0000575c <memset>:
    575c:	008000c4 	movi	r2,3
    5760:	29403fcc 	andi	r5,r5,255
    5764:	2007883a 	mov	r3,r4
    5768:	1180022e 	bgeu	r2,r6,5774 <memset+0x18>
    576c:	2084703a 	and	r2,r4,r2
    5770:	10000826 	beq	r2,zero,5794 <memset+0x38>
    5774:	30000526 	beq	r6,zero,578c <memset+0x30>
    5778:	2805883a 	mov	r2,r5
    577c:	30cd883a 	add	r6,r6,r3
    5780:	18800005 	stb	r2,0(r3)
    5784:	18c00044 	addi	r3,r3,1
    5788:	19bffd1e 	bne	r3,r6,5780 <memset+0x24>
    578c:	2005883a 	mov	r2,r4
    5790:	f800283a 	ret
    5794:	2804923a 	slli	r2,r5,8
    5798:	020003c4 	movi	r8,15
    579c:	200f883a 	mov	r7,r4
    57a0:	2884b03a 	or	r2,r5,r2
    57a4:	1006943a 	slli	r3,r2,16
    57a8:	10c6b03a 	or	r3,r2,r3
    57ac:	41800a2e 	bgeu	r8,r6,57d8 <memset+0x7c>
    57b0:	4005883a 	mov	r2,r8
    57b4:	31bffc04 	addi	r6,r6,-16
    57b8:	38c00015 	stw	r3,0(r7)
    57bc:	38c00115 	stw	r3,4(r7)
    57c0:	38c00215 	stw	r3,8(r7)
    57c4:	38c00315 	stw	r3,12(r7)
    57c8:	39c00404 	addi	r7,r7,16
    57cc:	11bff936 	bltu	r2,r6,57b4 <memset+0x58>
    57d0:	008000c4 	movi	r2,3
    57d4:	1180052e 	bgeu	r2,r6,57ec <memset+0x90>
    57d8:	31bfff04 	addi	r6,r6,-4
    57dc:	008000c4 	movi	r2,3
    57e0:	38c00015 	stw	r3,0(r7)
    57e4:	39c00104 	addi	r7,r7,4
    57e8:	11bffb36 	bltu	r2,r6,57d8 <memset+0x7c>
    57ec:	3807883a 	mov	r3,r7
    57f0:	003fe006 	br	5774 <memset+0x18>

000057f4 <_Bfree>:
    57f4:	28000826 	beq	r5,zero,5818 <_Bfree+0x24>
    57f8:	28800117 	ldw	r2,4(r5)
    57fc:	21001317 	ldw	r4,76(r4)
    5800:	1085883a 	add	r2,r2,r2
    5804:	1085883a 	add	r2,r2,r2
    5808:	1105883a 	add	r2,r2,r4
    580c:	10c00017 	ldw	r3,0(r2)
    5810:	28c00015 	stw	r3,0(r5)
    5814:	11400015 	stw	r5,0(r2)
    5818:	f800283a 	ret

0000581c <__hi0bits>:
    581c:	20bfffec 	andhi	r2,r4,65535
    5820:	10001426 	beq	r2,zero,5874 <__hi0bits+0x58>
    5824:	0007883a 	mov	r3,zero
    5828:	20bfc02c 	andhi	r2,r4,65280
    582c:	1000021e 	bne	r2,zero,5838 <__hi0bits+0x1c>
    5830:	2008923a 	slli	r4,r4,8
    5834:	18c00204 	addi	r3,r3,8
    5838:	20bc002c 	andhi	r2,r4,61440
    583c:	1000021e 	bne	r2,zero,5848 <__hi0bits+0x2c>
    5840:	2008913a 	slli	r4,r4,4
    5844:	18c00104 	addi	r3,r3,4
    5848:	20b0002c 	andhi	r2,r4,49152
    584c:	1000031e 	bne	r2,zero,585c <__hi0bits+0x40>
    5850:	2105883a 	add	r2,r4,r4
    5854:	18c00084 	addi	r3,r3,2
    5858:	1089883a 	add	r4,r2,r2
    585c:	20000316 	blt	r4,zero,586c <__hi0bits+0x50>
    5860:	2090002c 	andhi	r2,r4,16384
    5864:	10000626 	beq	r2,zero,5880 <__hi0bits+0x64>
    5868:	18c00044 	addi	r3,r3,1
    586c:	1805883a 	mov	r2,r3
    5870:	f800283a 	ret
    5874:	2008943a 	slli	r4,r4,16
    5878:	00c00404 	movi	r3,16
    587c:	003fea06 	br	5828 <__hi0bits+0xc>
    5880:	00c00804 	movi	r3,32
    5884:	1805883a 	mov	r2,r3
    5888:	f800283a 	ret

0000588c <__lo0bits>:
    588c:	20c00017 	ldw	r3,0(r4)
    5890:	188001cc 	andi	r2,r3,7
    5894:	10000a26 	beq	r2,zero,58c0 <__lo0bits+0x34>
    5898:	1880004c 	andi	r2,r3,1
    589c:	1005003a 	cmpeq	r2,r2,zero
    58a0:	10002126 	beq	r2,zero,5928 <__lo0bits+0x9c>
    58a4:	1880008c 	andi	r2,r3,2
    58a8:	1000251e 	bne	r2,zero,5940 <__lo0bits+0xb4>
    58ac:	1804d0ba 	srli	r2,r3,2
    58b0:	01400084 	movi	r5,2
    58b4:	20800015 	stw	r2,0(r4)
    58b8:	2805883a 	mov	r2,r5
    58bc:	f800283a 	ret
    58c0:	18bfffcc 	andi	r2,r3,65535
    58c4:	10001526 	beq	r2,zero,591c <__lo0bits+0x90>
    58c8:	000b883a 	mov	r5,zero
    58cc:	18803fcc 	andi	r2,r3,255
    58d0:	1000021e 	bne	r2,zero,58dc <__lo0bits+0x50>
    58d4:	1806d23a 	srli	r3,r3,8
    58d8:	29400204 	addi	r5,r5,8
    58dc:	188003cc 	andi	r2,r3,15
    58e0:	1000021e 	bne	r2,zero,58ec <__lo0bits+0x60>
    58e4:	1806d13a 	srli	r3,r3,4
    58e8:	29400104 	addi	r5,r5,4
    58ec:	188000cc 	andi	r2,r3,3
    58f0:	1000021e 	bne	r2,zero,58fc <__lo0bits+0x70>
    58f4:	1806d0ba 	srli	r3,r3,2
    58f8:	29400084 	addi	r5,r5,2
    58fc:	1880004c 	andi	r2,r3,1
    5900:	1000031e 	bne	r2,zero,5910 <__lo0bits+0x84>
    5904:	1806d07a 	srli	r3,r3,1
    5908:	18000a26 	beq	r3,zero,5934 <__lo0bits+0xa8>
    590c:	29400044 	addi	r5,r5,1
    5910:	2805883a 	mov	r2,r5
    5914:	20c00015 	stw	r3,0(r4)
    5918:	f800283a 	ret
    591c:	1806d43a 	srli	r3,r3,16
    5920:	01400404 	movi	r5,16
    5924:	003fe906 	br	58cc <__lo0bits+0x40>
    5928:	000b883a 	mov	r5,zero
    592c:	2805883a 	mov	r2,r5
    5930:	f800283a 	ret
    5934:	01400804 	movi	r5,32
    5938:	2805883a 	mov	r2,r5
    593c:	f800283a 	ret
    5940:	1804d07a 	srli	r2,r3,1
    5944:	01400044 	movi	r5,1
    5948:	20800015 	stw	r2,0(r4)
    594c:	003fda06 	br	58b8 <__lo0bits+0x2c>

00005950 <__mcmp>:
    5950:	20800417 	ldw	r2,16(r4)
    5954:	28c00417 	ldw	r3,16(r5)
    5958:	10cfc83a 	sub	r7,r2,r3
    595c:	38000c1e 	bne	r7,zero,5990 <__mcmp+0x40>
    5960:	18c5883a 	add	r2,r3,r3
    5964:	1085883a 	add	r2,r2,r2
    5968:	10c00504 	addi	r3,r2,20
    596c:	21000504 	addi	r4,r4,20
    5970:	28cb883a 	add	r5,r5,r3
    5974:	2085883a 	add	r2,r4,r2
    5978:	10bfff04 	addi	r2,r2,-4
    597c:	297fff04 	addi	r5,r5,-4
    5980:	11800017 	ldw	r6,0(r2)
    5984:	28c00017 	ldw	r3,0(r5)
    5988:	30c0031e 	bne	r6,r3,5998 <__mcmp+0x48>
    598c:	20bffa36 	bltu	r4,r2,5978 <__mcmp+0x28>
    5990:	3805883a 	mov	r2,r7
    5994:	f800283a 	ret
    5998:	30c00336 	bltu	r6,r3,59a8 <__mcmp+0x58>
    599c:	01c00044 	movi	r7,1
    59a0:	3805883a 	mov	r2,r7
    59a4:	f800283a 	ret
    59a8:	01ffffc4 	movi	r7,-1
    59ac:	003ff806 	br	5990 <__mcmp+0x40>

000059b0 <__ulp>:
    59b0:	295ffc2c 	andhi	r5,r5,32752
    59b4:	013f3034 	movhi	r4,64704
    59b8:	290b883a 	add	r5,r5,r4
    59bc:	0145c83a 	sub	r2,zero,r5
    59c0:	1007d53a 	srai	r3,r2,20
    59c4:	000d883a 	mov	r6,zero
    59c8:	0140040e 	bge	zero,r5,59dc <__ulp+0x2c>
    59cc:	280f883a 	mov	r7,r5
    59d0:	3807883a 	mov	r3,r7
    59d4:	3005883a 	mov	r2,r6
    59d8:	f800283a 	ret
    59dc:	008004c4 	movi	r2,19
    59e0:	193ffb04 	addi	r4,r3,-20
    59e4:	10c00c0e 	bge	r2,r3,5a18 <__ulp+0x68>
    59e8:	008007c4 	movi	r2,31
    59ec:	1107c83a 	sub	r3,r2,r4
    59f0:	00800784 	movi	r2,30
    59f4:	01400044 	movi	r5,1
    59f8:	11000216 	blt	r2,r4,5a04 <__ulp+0x54>
    59fc:	00800044 	movi	r2,1
    5a00:	10ca983a 	sll	r5,r2,r3
    5a04:	000f883a 	mov	r7,zero
    5a08:	280d883a 	mov	r6,r5
    5a0c:	3807883a 	mov	r3,r7
    5a10:	3005883a 	mov	r2,r6
    5a14:	f800283a 	ret
    5a18:	00800234 	movhi	r2,8
    5a1c:	10cfd83a 	sra	r7,r2,r3
    5a20:	000d883a 	mov	r6,zero
    5a24:	3005883a 	mov	r2,r6
    5a28:	3807883a 	mov	r3,r7
    5a2c:	f800283a 	ret

00005a30 <__b2d>:
    5a30:	20800417 	ldw	r2,16(r4)
    5a34:	defff904 	addi	sp,sp,-28
    5a38:	dd000415 	stw	r20,16(sp)
    5a3c:	1085883a 	add	r2,r2,r2
    5a40:	25000504 	addi	r20,r4,20
    5a44:	1085883a 	add	r2,r2,r2
    5a48:	dc000015 	stw	r16,0(sp)
    5a4c:	a0a1883a 	add	r16,r20,r2
    5a50:	dd400515 	stw	r21,20(sp)
    5a54:	857fff17 	ldw	r21,-4(r16)
    5a58:	dc400115 	stw	r17,4(sp)
    5a5c:	dfc00615 	stw	ra,24(sp)
    5a60:	a809883a 	mov	r4,r21
    5a64:	2823883a 	mov	r17,r5
    5a68:	dcc00315 	stw	r19,12(sp)
    5a6c:	dc800215 	stw	r18,8(sp)
    5a70:	000581c0 	call	581c <__hi0bits>
    5a74:	100b883a 	mov	r5,r2
    5a78:	00800804 	movi	r2,32
    5a7c:	1145c83a 	sub	r2,r2,r5
    5a80:	88800015 	stw	r2,0(r17)
    5a84:	00800284 	movi	r2,10
    5a88:	80ffff04 	addi	r3,r16,-4
    5a8c:	11401416 	blt	r2,r5,5ae0 <__b2d+0xb0>
    5a90:	008002c4 	movi	r2,11
    5a94:	1149c83a 	sub	r4,r2,r5
    5a98:	a0c02736 	bltu	r20,r3,5b38 <__b2d+0x108>
    5a9c:	000d883a 	mov	r6,zero
    5aa0:	28800544 	addi	r2,r5,21
    5aa4:	a906d83a 	srl	r3,r21,r4
    5aa8:	a884983a 	sll	r2,r21,r2
    5aac:	1ccffc34 	orhi	r19,r3,16368
    5ab0:	11a4b03a 	or	r18,r2,r6
    5ab4:	9005883a 	mov	r2,r18
    5ab8:	9807883a 	mov	r3,r19
    5abc:	dfc00617 	ldw	ra,24(sp)
    5ac0:	dd400517 	ldw	r21,20(sp)
    5ac4:	dd000417 	ldw	r20,16(sp)
    5ac8:	dcc00317 	ldw	r19,12(sp)
    5acc:	dc800217 	ldw	r18,8(sp)
    5ad0:	dc400117 	ldw	r17,4(sp)
    5ad4:	dc000017 	ldw	r16,0(sp)
    5ad8:	dec00704 	addi	sp,sp,28
    5adc:	f800283a 	ret
    5ae0:	a0c00e36 	bltu	r20,r3,5b1c <__b2d+0xec>
    5ae4:	293ffd44 	addi	r4,r5,-11
    5ae8:	000d883a 	mov	r6,zero
    5aec:	20000f26 	beq	r4,zero,5b2c <__b2d+0xfc>
    5af0:	00800804 	movi	r2,32
    5af4:	110bc83a 	sub	r5,r2,r4
    5af8:	a0c01236 	bltu	r20,r3,5b44 <__b2d+0x114>
    5afc:	000f883a 	mov	r7,zero
    5b00:	a904983a 	sll	r2,r21,r4
    5b04:	3146d83a 	srl	r3,r6,r5
    5b08:	3108983a 	sll	r4,r6,r4
    5b0c:	108ffc34 	orhi	r2,r2,16368
    5b10:	18a6b03a 	or	r19,r3,r2
    5b14:	3924b03a 	or	r18,r7,r4
    5b18:	003fe606 	br	5ab4 <__b2d+0x84>
    5b1c:	293ffd44 	addi	r4,r5,-11
    5b20:	81bffe17 	ldw	r6,-8(r16)
    5b24:	80fffe04 	addi	r3,r16,-8
    5b28:	203ff11e 	bne	r4,zero,5af0 <__b2d+0xc0>
    5b2c:	accffc34 	orhi	r19,r21,16368
    5b30:	3025883a 	mov	r18,r6
    5b34:	003fdf06 	br	5ab4 <__b2d+0x84>
    5b38:	18bfff17 	ldw	r2,-4(r3)
    5b3c:	110cd83a 	srl	r6,r2,r4
    5b40:	003fd706 	br	5aa0 <__b2d+0x70>
    5b44:	18bfff17 	ldw	r2,-4(r3)
    5b48:	114ed83a 	srl	r7,r2,r5
    5b4c:	003fec06 	br	5b00 <__b2d+0xd0>

00005b50 <__ratio>:
    5b50:	defff904 	addi	sp,sp,-28
    5b54:	dc400215 	stw	r17,8(sp)
    5b58:	2823883a 	mov	r17,r5
    5b5c:	d80b883a 	mov	r5,sp
    5b60:	dfc00615 	stw	ra,24(sp)
    5b64:	dd000515 	stw	r20,20(sp)
    5b68:	dcc00415 	stw	r19,16(sp)
    5b6c:	dc800315 	stw	r18,12(sp)
    5b70:	2025883a 	mov	r18,r4
    5b74:	0005a300 	call	5a30 <__b2d>
    5b78:	8809883a 	mov	r4,r17
    5b7c:	d9400104 	addi	r5,sp,4
    5b80:	1027883a 	mov	r19,r2
    5b84:	1829883a 	mov	r20,r3
    5b88:	0005a300 	call	5a30 <__b2d>
    5b8c:	89000417 	ldw	r4,16(r17)
    5b90:	91c00417 	ldw	r7,16(r18)
    5b94:	d9800117 	ldw	r6,4(sp)
    5b98:	180b883a 	mov	r5,r3
    5b9c:	390fc83a 	sub	r7,r7,r4
    5ba0:	1009883a 	mov	r4,r2
    5ba4:	d8800017 	ldw	r2,0(sp)
    5ba8:	380e917a 	slli	r7,r7,5
    5bac:	2011883a 	mov	r8,r4
    5bb0:	1185c83a 	sub	r2,r2,r6
    5bb4:	11c5883a 	add	r2,r2,r7
    5bb8:	1006953a 	slli	r3,r2,20
    5bbc:	2813883a 	mov	r9,r5
    5bc0:	00800d0e 	bge	zero,r2,5bf8 <__ratio+0xa8>
    5bc4:	1d29883a 	add	r20,r3,r20
    5bc8:	a00b883a 	mov	r5,r20
    5bcc:	480f883a 	mov	r7,r9
    5bd0:	9809883a 	mov	r4,r19
    5bd4:	400d883a 	mov	r6,r8
    5bd8:	0008a200 	call	8a20 <__divdf3>
    5bdc:	dfc00617 	ldw	ra,24(sp)
    5be0:	dd000517 	ldw	r20,20(sp)
    5be4:	dcc00417 	ldw	r19,16(sp)
    5be8:	dc800317 	ldw	r18,12(sp)
    5bec:	dc400217 	ldw	r17,8(sp)
    5bf0:	dec00704 	addi	sp,sp,28
    5bf4:	f800283a 	ret
    5bf8:	28d3c83a 	sub	r9,r5,r3
    5bfc:	003ff206 	br	5bc8 <__ratio+0x78>

00005c00 <_mprec_log10>:
    5c00:	defffe04 	addi	sp,sp,-8
    5c04:	008005c4 	movi	r2,23
    5c08:	dc000015 	stw	r16,0(sp)
    5c0c:	dfc00115 	stw	ra,4(sp)
    5c10:	2021883a 	mov	r16,r4
    5c14:	11000c16 	blt	r2,r4,5c48 <_mprec_log10+0x48>
    5c18:	200490fa 	slli	r2,r4,3
    5c1c:	00c00074 	movhi	r3,1
    5c20:	18f41d04 	addi	r3,r3,-12172
    5c24:	10c5883a 	add	r2,r2,r3
    5c28:	12400117 	ldw	r9,4(r2)
    5c2c:	12000017 	ldw	r8,0(r2)
    5c30:	4807883a 	mov	r3,r9
    5c34:	4005883a 	mov	r2,r8
    5c38:	dfc00117 	ldw	ra,4(sp)
    5c3c:	dc000017 	ldw	r16,0(sp)
    5c40:	dec00204 	addi	sp,sp,8
    5c44:	f800283a 	ret
    5c48:	0011883a 	mov	r8,zero
    5c4c:	024ffc34 	movhi	r9,16368
    5c50:	0005883a 	mov	r2,zero
    5c54:	00d00934 	movhi	r3,16420
    5c58:	480b883a 	mov	r5,r9
    5c5c:	4009883a 	mov	r4,r8
    5c60:	180f883a 	mov	r7,r3
    5c64:	100d883a 	mov	r6,r2
    5c68:	000865c0 	call	865c <__muldf3>
    5c6c:	843fffc4 	addi	r16,r16,-1
    5c70:	1011883a 	mov	r8,r2
    5c74:	1813883a 	mov	r9,r3
    5c78:	803ff51e 	bne	r16,zero,5c50 <_mprec_log10+0x50>
    5c7c:	4005883a 	mov	r2,r8
    5c80:	4807883a 	mov	r3,r9
    5c84:	dfc00117 	ldw	ra,4(sp)
    5c88:	dc000017 	ldw	r16,0(sp)
    5c8c:	dec00204 	addi	sp,sp,8
    5c90:	f800283a 	ret

00005c94 <__copybits>:
    5c94:	297fffc4 	addi	r5,r5,-1
    5c98:	30800417 	ldw	r2,16(r6)
    5c9c:	280bd17a 	srai	r5,r5,5
    5ca0:	31800504 	addi	r6,r6,20
    5ca4:	1085883a 	add	r2,r2,r2
    5ca8:	294b883a 	add	r5,r5,r5
    5cac:	294b883a 	add	r5,r5,r5
    5cb0:	1085883a 	add	r2,r2,r2
    5cb4:	290b883a 	add	r5,r5,r4
    5cb8:	3087883a 	add	r3,r6,r2
    5cbc:	29400104 	addi	r5,r5,4
    5cc0:	30c0052e 	bgeu	r6,r3,5cd8 <__copybits+0x44>
    5cc4:	30800017 	ldw	r2,0(r6)
    5cc8:	31800104 	addi	r6,r6,4
    5ccc:	20800015 	stw	r2,0(r4)
    5cd0:	21000104 	addi	r4,r4,4
    5cd4:	30fffb36 	bltu	r6,r3,5cc4 <__copybits+0x30>
    5cd8:	2140032e 	bgeu	r4,r5,5ce8 <__copybits+0x54>
    5cdc:	20000015 	stw	zero,0(r4)
    5ce0:	21000104 	addi	r4,r4,4
    5ce4:	217ffd36 	bltu	r4,r5,5cdc <__copybits+0x48>
    5ce8:	f800283a 	ret

00005cec <__any_on>:
    5cec:	20800417 	ldw	r2,16(r4)
    5cf0:	2807d17a 	srai	r3,r5,5
    5cf4:	21000504 	addi	r4,r4,20
    5cf8:	10c00d0e 	bge	r2,r3,5d30 <__any_on+0x44>
    5cfc:	1085883a 	add	r2,r2,r2
    5d00:	1085883a 	add	r2,r2,r2
    5d04:	208d883a 	add	r6,r4,r2
    5d08:	2180182e 	bgeu	r4,r6,5d6c <__any_on+0x80>
    5d0c:	30bfff17 	ldw	r2,-4(r6)
    5d10:	30ffff04 	addi	r3,r6,-4
    5d14:	1000041e 	bne	r2,zero,5d28 <__any_on+0x3c>
    5d18:	20c0142e 	bgeu	r4,r3,5d6c <__any_on+0x80>
    5d1c:	18ffff04 	addi	r3,r3,-4
    5d20:	18800017 	ldw	r2,0(r3)
    5d24:	103ffc26 	beq	r2,zero,5d18 <__any_on+0x2c>
    5d28:	00800044 	movi	r2,1
    5d2c:	f800283a 	ret
    5d30:	18800a0e 	bge	r3,r2,5d5c <__any_on+0x70>
    5d34:	294007cc 	andi	r5,r5,31
    5d38:	28000826 	beq	r5,zero,5d5c <__any_on+0x70>
    5d3c:	18c5883a 	add	r2,r3,r3
    5d40:	1085883a 	add	r2,r2,r2
    5d44:	208d883a 	add	r6,r4,r2
    5d48:	30c00017 	ldw	r3,0(r6)
    5d4c:	1944d83a 	srl	r2,r3,r5
    5d50:	1144983a 	sll	r2,r2,r5
    5d54:	18bff41e 	bne	r3,r2,5d28 <__any_on+0x3c>
    5d58:	003feb06 	br	5d08 <__any_on+0x1c>
    5d5c:	18c5883a 	add	r2,r3,r3
    5d60:	1085883a 	add	r2,r2,r2
    5d64:	208d883a 	add	r6,r4,r2
    5d68:	003fe706 	br	5d08 <__any_on+0x1c>
    5d6c:	0005883a 	mov	r2,zero
    5d70:	f800283a 	ret

00005d74 <_Balloc>:
    5d74:	20c01317 	ldw	r3,76(r4)
    5d78:	defffb04 	addi	sp,sp,-20
    5d7c:	dcc00315 	stw	r19,12(sp)
    5d80:	dc800215 	stw	r18,8(sp)
    5d84:	dfc00415 	stw	ra,16(sp)
    5d88:	2825883a 	mov	r18,r5
    5d8c:	dc400115 	stw	r17,4(sp)
    5d90:	dc000015 	stw	r16,0(sp)
    5d94:	2027883a 	mov	r19,r4
    5d98:	01800404 	movi	r6,16
    5d9c:	01400104 	movi	r5,4
    5da0:	18001726 	beq	r3,zero,5e00 <_Balloc+0x8c>
    5da4:	01400044 	movi	r5,1
    5da8:	9485883a 	add	r2,r18,r18
    5dac:	2ca2983a 	sll	r17,r5,r18
    5db0:	1085883a 	add	r2,r2,r2
    5db4:	10c7883a 	add	r3,r2,r3
    5db8:	1c000017 	ldw	r16,0(r3)
    5dbc:	8c4d883a 	add	r6,r17,r17
    5dc0:	318d883a 	add	r6,r6,r6
    5dc4:	9809883a 	mov	r4,r19
    5dc8:	31800504 	addi	r6,r6,20
    5dcc:	80001226 	beq	r16,zero,5e18 <_Balloc+0xa4>
    5dd0:	80800017 	ldw	r2,0(r16)
    5dd4:	18800015 	stw	r2,0(r3)
    5dd8:	80000415 	stw	zero,16(r16)
    5ddc:	80000315 	stw	zero,12(r16)
    5de0:	8005883a 	mov	r2,r16
    5de4:	dfc00417 	ldw	ra,16(sp)
    5de8:	dcc00317 	ldw	r19,12(sp)
    5dec:	dc800217 	ldw	r18,8(sp)
    5df0:	dc400117 	ldw	r17,4(sp)
    5df4:	dc000017 	ldw	r16,0(sp)
    5df8:	dec00504 	addi	sp,sp,20
    5dfc:	f800283a 	ret
    5e00:	00071b00 	call	71b0 <_calloc_r>
    5e04:	1007883a 	mov	r3,r2
    5e08:	0021883a 	mov	r16,zero
    5e0c:	98801315 	stw	r2,76(r19)
    5e10:	103fe41e 	bne	r2,zero,5da4 <_Balloc+0x30>
    5e14:	003ff206 	br	5de0 <_Balloc+0x6c>
    5e18:	00071b00 	call	71b0 <_calloc_r>
    5e1c:	103ff026 	beq	r2,zero,5de0 <_Balloc+0x6c>
    5e20:	1021883a 	mov	r16,r2
    5e24:	14800115 	stw	r18,4(r2)
    5e28:	14400215 	stw	r17,8(r2)
    5e2c:	003fea06 	br	5dd8 <_Balloc+0x64>

00005e30 <__d2b>:
    5e30:	defff504 	addi	sp,sp,-44
    5e34:	dcc00515 	stw	r19,20(sp)
    5e38:	04c00044 	movi	r19,1
    5e3c:	dc000215 	stw	r16,8(sp)
    5e40:	2821883a 	mov	r16,r5
    5e44:	980b883a 	mov	r5,r19
    5e48:	ddc00915 	stw	r23,36(sp)
    5e4c:	dd800815 	stw	r22,32(sp)
    5e50:	dd400715 	stw	r21,28(sp)
    5e54:	dd000615 	stw	r20,24(sp)
    5e58:	dc800415 	stw	r18,16(sp)
    5e5c:	dc400315 	stw	r17,12(sp)
    5e60:	dfc00a15 	stw	ra,40(sp)
    5e64:	3023883a 	mov	r17,r6
    5e68:	382d883a 	mov	r22,r7
    5e6c:	ddc00b17 	ldw	r23,44(sp)
    5e70:	0005d740 	call	5d74 <_Balloc>
    5e74:	1025883a 	mov	r18,r2
    5e78:	00a00034 	movhi	r2,32768
    5e7c:	10bfffc4 	addi	r2,r2,-1
    5e80:	8888703a 	and	r4,r17,r2
    5e84:	202ad53a 	srli	r21,r4,20
    5e88:	00800434 	movhi	r2,16
    5e8c:	10bfffc4 	addi	r2,r2,-1
    5e90:	8886703a 	and	r3,r17,r2
    5e94:	a829003a 	cmpeq	r20,r21,zero
    5e98:	800b883a 	mov	r5,r16
    5e9c:	d8c00115 	stw	r3,4(sp)
    5ea0:	94000504 	addi	r16,r18,20
    5ea4:	a000021e 	bne	r20,zero,5eb0 <__d2b+0x80>
    5ea8:	18c00434 	orhi	r3,r3,16
    5eac:	d8c00115 	stw	r3,4(sp)
    5eb0:	28002726 	beq	r5,zero,5f50 <__d2b+0x120>
    5eb4:	d809883a 	mov	r4,sp
    5eb8:	d9400015 	stw	r5,0(sp)
    5ebc:	000588c0 	call	588c <__lo0bits>
    5ec0:	100d883a 	mov	r6,r2
    5ec4:	10003526 	beq	r2,zero,5f9c <__d2b+0x16c>
    5ec8:	d8c00117 	ldw	r3,4(sp)
    5ecc:	00800804 	movi	r2,32
    5ed0:	1185c83a 	sub	r2,r2,r6
    5ed4:	d9000017 	ldw	r4,0(sp)
    5ed8:	1886983a 	sll	r3,r3,r2
    5edc:	1906b03a 	or	r3,r3,r4
    5ee0:	90c00515 	stw	r3,20(r18)
    5ee4:	d8c00117 	ldw	r3,4(sp)
    5ee8:	1986d83a 	srl	r3,r3,r6
    5eec:	d8c00115 	stw	r3,4(sp)
    5ef0:	180b003a 	cmpeq	r5,r3,zero
    5ef4:	00800084 	movi	r2,2
    5ef8:	114bc83a 	sub	r5,r2,r5
    5efc:	80c00115 	stw	r3,4(r16)
    5f00:	91400415 	stw	r5,16(r18)
    5f04:	a0001a1e 	bne	r20,zero,5f70 <__d2b+0x140>
    5f08:	3545883a 	add	r2,r6,r21
    5f0c:	10bef344 	addi	r2,r2,-1075
    5f10:	00c00d44 	movi	r3,53
    5f14:	b0800015 	stw	r2,0(r22)
    5f18:	1987c83a 	sub	r3,r3,r6
    5f1c:	b8c00015 	stw	r3,0(r23)
    5f20:	9005883a 	mov	r2,r18
    5f24:	dfc00a17 	ldw	ra,40(sp)
    5f28:	ddc00917 	ldw	r23,36(sp)
    5f2c:	dd800817 	ldw	r22,32(sp)
    5f30:	dd400717 	ldw	r21,28(sp)
    5f34:	dd000617 	ldw	r20,24(sp)
    5f38:	dcc00517 	ldw	r19,20(sp)
    5f3c:	dc800417 	ldw	r18,16(sp)
    5f40:	dc400317 	ldw	r17,12(sp)
    5f44:	dc000217 	ldw	r16,8(sp)
    5f48:	dec00b04 	addi	sp,sp,44
    5f4c:	f800283a 	ret
    5f50:	d9000104 	addi	r4,sp,4
    5f54:	000588c0 	call	588c <__lo0bits>
    5f58:	11800804 	addi	r6,r2,32
    5f5c:	d8800117 	ldw	r2,4(sp)
    5f60:	94c00415 	stw	r19,16(r18)
    5f64:	980b883a 	mov	r5,r19
    5f68:	90800515 	stw	r2,20(r18)
    5f6c:	a03fe626 	beq	r20,zero,5f08 <__d2b+0xd8>
    5f70:	2945883a 	add	r2,r5,r5
    5f74:	1085883a 	add	r2,r2,r2
    5f78:	1405883a 	add	r2,r2,r16
    5f7c:	113fff17 	ldw	r4,-4(r2)
    5f80:	30fef384 	addi	r3,r6,-1074
    5f84:	2820917a 	slli	r16,r5,5
    5f88:	b0c00015 	stw	r3,0(r22)
    5f8c:	000581c0 	call	581c <__hi0bits>
    5f90:	80a1c83a 	sub	r16,r16,r2
    5f94:	bc000015 	stw	r16,0(r23)
    5f98:	003fe106 	br	5f20 <__d2b+0xf0>
    5f9c:	d8800017 	ldw	r2,0(sp)
    5fa0:	90800515 	stw	r2,20(r18)
    5fa4:	d8c00117 	ldw	r3,4(sp)
    5fa8:	003fd106 	br	5ef0 <__d2b+0xc0>

00005fac <__mdiff>:
    5fac:	defffb04 	addi	sp,sp,-20
    5fb0:	dc000015 	stw	r16,0(sp)
    5fb4:	2821883a 	mov	r16,r5
    5fb8:	dc800215 	stw	r18,8(sp)
    5fbc:	300b883a 	mov	r5,r6
    5fc0:	2025883a 	mov	r18,r4
    5fc4:	8009883a 	mov	r4,r16
    5fc8:	dc400115 	stw	r17,4(sp)
    5fcc:	dfc00415 	stw	ra,16(sp)
    5fd0:	dcc00315 	stw	r19,12(sp)
    5fd4:	3023883a 	mov	r17,r6
    5fd8:	00059500 	call	5950 <__mcmp>
    5fdc:	10004226 	beq	r2,zero,60e8 <__mdiff+0x13c>
    5fe0:	10005016 	blt	r2,zero,6124 <__mdiff+0x178>
    5fe4:	0027883a 	mov	r19,zero
    5fe8:	81400117 	ldw	r5,4(r16)
    5fec:	9009883a 	mov	r4,r18
    5ff0:	0005d740 	call	5d74 <_Balloc>
    5ff4:	1019883a 	mov	r12,r2
    5ff8:	82800417 	ldw	r10,16(r16)
    5ffc:	88800417 	ldw	r2,16(r17)
    6000:	81800504 	addi	r6,r16,20
    6004:	5287883a 	add	r3,r10,r10
    6008:	1085883a 	add	r2,r2,r2
    600c:	18c7883a 	add	r3,r3,r3
    6010:	1085883a 	add	r2,r2,r2
    6014:	8a000504 	addi	r8,r17,20
    6018:	64c00315 	stw	r19,12(r12)
    601c:	30db883a 	add	r13,r6,r3
    6020:	4097883a 	add	r11,r8,r2
    6024:	61c00504 	addi	r7,r12,20
    6028:	0013883a 	mov	r9,zero
    602c:	31000017 	ldw	r4,0(r6)
    6030:	41400017 	ldw	r5,0(r8)
    6034:	42000104 	addi	r8,r8,4
    6038:	20bfffcc 	andi	r2,r4,65535
    603c:	28ffffcc 	andi	r3,r5,65535
    6040:	10c5c83a 	sub	r2,r2,r3
    6044:	1245883a 	add	r2,r2,r9
    6048:	2008d43a 	srli	r4,r4,16
    604c:	280ad43a 	srli	r5,r5,16
    6050:	1007d43a 	srai	r3,r2,16
    6054:	3880000d 	sth	r2,0(r7)
    6058:	2149c83a 	sub	r4,r4,r5
    605c:	20c9883a 	add	r4,r4,r3
    6060:	3900008d 	sth	r4,2(r7)
    6064:	31800104 	addi	r6,r6,4
    6068:	39c00104 	addi	r7,r7,4
    606c:	2013d43a 	srai	r9,r4,16
    6070:	42ffee36 	bltu	r8,r11,602c <__mdiff+0x80>
    6074:	33400c2e 	bgeu	r6,r13,60a8 <__mdiff+0xfc>
    6078:	30800017 	ldw	r2,0(r6)
    607c:	31800104 	addi	r6,r6,4
    6080:	10ffffcc 	andi	r3,r2,65535
    6084:	1a47883a 	add	r3,r3,r9
    6088:	1004d43a 	srli	r2,r2,16
    608c:	1809d43a 	srai	r4,r3,16
    6090:	38c0000d 	sth	r3,0(r7)
    6094:	1105883a 	add	r2,r2,r4
    6098:	3880008d 	sth	r2,2(r7)
    609c:	1013d43a 	srai	r9,r2,16
    60a0:	39c00104 	addi	r7,r7,4
    60a4:	337ff436 	bltu	r6,r13,6078 <__mdiff+0xcc>
    60a8:	38bfff17 	ldw	r2,-4(r7)
    60ac:	38ffff04 	addi	r3,r7,-4
    60b0:	1000041e 	bne	r2,zero,60c4 <__mdiff+0x118>
    60b4:	18ffff04 	addi	r3,r3,-4
    60b8:	18800017 	ldw	r2,0(r3)
    60bc:	52bfffc4 	addi	r10,r10,-1
    60c0:	103ffc26 	beq	r2,zero,60b4 <__mdiff+0x108>
    60c4:	6005883a 	mov	r2,r12
    60c8:	62800415 	stw	r10,16(r12)
    60cc:	dfc00417 	ldw	ra,16(sp)
    60d0:	dcc00317 	ldw	r19,12(sp)
    60d4:	dc800217 	ldw	r18,8(sp)
    60d8:	dc400117 	ldw	r17,4(sp)
    60dc:	dc000017 	ldw	r16,0(sp)
    60e0:	dec00504 	addi	sp,sp,20
    60e4:	f800283a 	ret
    60e8:	9009883a 	mov	r4,r18
    60ec:	000b883a 	mov	r5,zero
    60f0:	0005d740 	call	5d74 <_Balloc>
    60f4:	1019883a 	mov	r12,r2
    60f8:	00800044 	movi	r2,1
    60fc:	60800415 	stw	r2,16(r12)
    6100:	6005883a 	mov	r2,r12
    6104:	60000515 	stw	zero,20(r12)
    6108:	dfc00417 	ldw	ra,16(sp)
    610c:	dcc00317 	ldw	r19,12(sp)
    6110:	dc800217 	ldw	r18,8(sp)
    6114:	dc400117 	ldw	r17,4(sp)
    6118:	dc000017 	ldw	r16,0(sp)
    611c:	dec00504 	addi	sp,sp,20
    6120:	f800283a 	ret
    6124:	880d883a 	mov	r6,r17
    6128:	04c00044 	movi	r19,1
    612c:	8023883a 	mov	r17,r16
    6130:	3021883a 	mov	r16,r6
    6134:	003fac06 	br	5fe8 <__mdiff+0x3c>

00006138 <__lshift>:
    6138:	defff904 	addi	sp,sp,-28
    613c:	28800417 	ldw	r2,16(r5)
    6140:	dc000015 	stw	r16,0(sp)
    6144:	3021d17a 	srai	r16,r6,5
    6148:	28c00217 	ldw	r3,8(r5)
    614c:	10800044 	addi	r2,r2,1
    6150:	dc400115 	stw	r17,4(sp)
    6154:	80a3883a 	add	r17,r16,r2
    6158:	dd400515 	stw	r21,20(sp)
    615c:	dd000415 	stw	r20,16(sp)
    6160:	dc800215 	stw	r18,8(sp)
    6164:	dfc00615 	stw	ra,24(sp)
    6168:	2825883a 	mov	r18,r5
    616c:	dcc00315 	stw	r19,12(sp)
    6170:	3029883a 	mov	r20,r6
    6174:	202b883a 	mov	r21,r4
    6178:	29400117 	ldw	r5,4(r5)
    617c:	1c40030e 	bge	r3,r17,618c <__lshift+0x54>
    6180:	18c7883a 	add	r3,r3,r3
    6184:	29400044 	addi	r5,r5,1
    6188:	1c7ffd16 	blt	r3,r17,6180 <__lshift+0x48>
    618c:	a809883a 	mov	r4,r21
    6190:	0005d740 	call	5d74 <_Balloc>
    6194:	1027883a 	mov	r19,r2
    6198:	11400504 	addi	r5,r2,20
    619c:	0400090e 	bge	zero,r16,61c4 <__lshift+0x8c>
    61a0:	2805883a 	mov	r2,r5
    61a4:	0007883a 	mov	r3,zero
    61a8:	18c00044 	addi	r3,r3,1
    61ac:	10000015 	stw	zero,0(r2)
    61b0:	10800104 	addi	r2,r2,4
    61b4:	80fffc1e 	bne	r16,r3,61a8 <__lshift+0x70>
    61b8:	8405883a 	add	r2,r16,r16
    61bc:	1085883a 	add	r2,r2,r2
    61c0:	288b883a 	add	r5,r5,r2
    61c4:	90800417 	ldw	r2,16(r18)
    61c8:	91000504 	addi	r4,r18,20
    61cc:	a18007cc 	andi	r6,r20,31
    61d0:	1085883a 	add	r2,r2,r2
    61d4:	1085883a 	add	r2,r2,r2
    61d8:	208f883a 	add	r7,r4,r2
    61dc:	30001e26 	beq	r6,zero,6258 <__lshift+0x120>
    61e0:	00800804 	movi	r2,32
    61e4:	1191c83a 	sub	r8,r2,r6
    61e8:	0007883a 	mov	r3,zero
    61ec:	20800017 	ldw	r2,0(r4)
    61f0:	1184983a 	sll	r2,r2,r6
    61f4:	1884b03a 	or	r2,r3,r2
    61f8:	28800015 	stw	r2,0(r5)
    61fc:	20c00017 	ldw	r3,0(r4)
    6200:	21000104 	addi	r4,r4,4
    6204:	29400104 	addi	r5,r5,4
    6208:	1a06d83a 	srl	r3,r3,r8
    620c:	21fff736 	bltu	r4,r7,61ec <__lshift+0xb4>
    6210:	28c00015 	stw	r3,0(r5)
    6214:	18000126 	beq	r3,zero,621c <__lshift+0xe4>
    6218:	8c400044 	addi	r17,r17,1
    621c:	88bfffc4 	addi	r2,r17,-1
    6220:	98800415 	stw	r2,16(r19)
    6224:	a809883a 	mov	r4,r21
    6228:	900b883a 	mov	r5,r18
    622c:	00057f40 	call	57f4 <_Bfree>
    6230:	9805883a 	mov	r2,r19
    6234:	dfc00617 	ldw	ra,24(sp)
    6238:	dd400517 	ldw	r21,20(sp)
    623c:	dd000417 	ldw	r20,16(sp)
    6240:	dcc00317 	ldw	r19,12(sp)
    6244:	dc800217 	ldw	r18,8(sp)
    6248:	dc400117 	ldw	r17,4(sp)
    624c:	dc000017 	ldw	r16,0(sp)
    6250:	dec00704 	addi	sp,sp,28
    6254:	f800283a 	ret
    6258:	20800017 	ldw	r2,0(r4)
    625c:	21000104 	addi	r4,r4,4
    6260:	28800015 	stw	r2,0(r5)
    6264:	29400104 	addi	r5,r5,4
    6268:	21ffec2e 	bgeu	r4,r7,621c <__lshift+0xe4>
    626c:	20800017 	ldw	r2,0(r4)
    6270:	21000104 	addi	r4,r4,4
    6274:	28800015 	stw	r2,0(r5)
    6278:	29400104 	addi	r5,r5,4
    627c:	21fff636 	bltu	r4,r7,6258 <__lshift+0x120>
    6280:	003fe606 	br	621c <__lshift+0xe4>

00006284 <__multiply>:
    6284:	defff904 	addi	sp,sp,-28
    6288:	dcc00315 	stw	r19,12(sp)
    628c:	dc800215 	stw	r18,8(sp)
    6290:	2cc00417 	ldw	r19,16(r5)
    6294:	34800417 	ldw	r18,16(r6)
    6298:	dd000415 	stw	r20,16(sp)
    629c:	dc400115 	stw	r17,4(sp)
    62a0:	dfc00615 	stw	ra,24(sp)
    62a4:	dd400515 	stw	r21,20(sp)
    62a8:	dc000015 	stw	r16,0(sp)
    62ac:	2823883a 	mov	r17,r5
    62b0:	3029883a 	mov	r20,r6
    62b4:	9c80040e 	bge	r19,r18,62c8 <__multiply+0x44>
    62b8:	9027883a 	mov	r19,r18
    62bc:	2c800417 	ldw	r18,16(r5)
    62c0:	2829883a 	mov	r20,r5
    62c4:	3023883a 	mov	r17,r6
    62c8:	88800217 	ldw	r2,8(r17)
    62cc:	9ca1883a 	add	r16,r19,r18
    62d0:	89400117 	ldw	r5,4(r17)
    62d4:	1400010e 	bge	r2,r16,62dc <__multiply+0x58>
    62d8:	29400044 	addi	r5,r5,1
    62dc:	0005d740 	call	5d74 <_Balloc>
    62e0:	102b883a 	mov	r21,r2
    62e4:	8405883a 	add	r2,r16,r16
    62e8:	1085883a 	add	r2,r2,r2
    62ec:	a9000504 	addi	r4,r21,20
    62f0:	209d883a 	add	r14,r4,r2
    62f4:	2380042e 	bgeu	r4,r14,6308 <__multiply+0x84>
    62f8:	2005883a 	mov	r2,r4
    62fc:	10000015 	stw	zero,0(r2)
    6300:	10800104 	addi	r2,r2,4
    6304:	13bffd36 	bltu	r2,r14,62fc <__multiply+0x78>
    6308:	9485883a 	add	r2,r18,r18
    630c:	9cc7883a 	add	r3,r19,r19
    6310:	a1800504 	addi	r6,r20,20
    6314:	1085883a 	add	r2,r2,r2
    6318:	8b400504 	addi	r13,r17,20
    631c:	18c7883a 	add	r3,r3,r3
    6320:	309f883a 	add	r15,r6,r2
    6324:	68d7883a 	add	r11,r13,r3
    6328:	33c03b2e 	bgeu	r6,r15,6418 <__multiply+0x194>
    632c:	2019883a 	mov	r12,r4
    6330:	30800017 	ldw	r2,0(r6)
    6334:	127fffcc 	andi	r9,r2,65535
    6338:	48001826 	beq	r9,zero,639c <__multiply+0x118>
    633c:	6811883a 	mov	r8,r13
    6340:	600f883a 	mov	r7,r12
    6344:	0015883a 	mov	r10,zero
    6348:	40c00017 	ldw	r3,0(r8)
    634c:	39400017 	ldw	r5,0(r7)
    6350:	42000104 	addi	r8,r8,4
    6354:	193fffcc 	andi	r4,r3,65535
    6358:	4909383a 	mul	r4,r9,r4
    635c:	1806d43a 	srli	r3,r3,16
    6360:	28bfffcc 	andi	r2,r5,65535
    6364:	5085883a 	add	r2,r10,r2
    6368:	2089883a 	add	r4,r4,r2
    636c:	48c7383a 	mul	r3,r9,r3
    6370:	280ad43a 	srli	r5,r5,16
    6374:	2004d43a 	srli	r2,r4,16
    6378:	3900000d 	sth	r4,0(r7)
    637c:	1947883a 	add	r3,r3,r5
    6380:	10c5883a 	add	r2,r2,r3
    6384:	3880008d 	sth	r2,2(r7)
    6388:	1014d43a 	srli	r10,r2,16
    638c:	39c00104 	addi	r7,r7,4
    6390:	42ffed36 	bltu	r8,r11,6348 <__multiply+0xc4>
    6394:	3a800015 	stw	r10,0(r7)
    6398:	30800017 	ldw	r2,0(r6)
    639c:	1012d43a 	srli	r9,r2,16
    63a0:	48001926 	beq	r9,zero,6408 <__multiply+0x184>
    63a4:	60800017 	ldw	r2,0(r12)
    63a8:	6811883a 	mov	r8,r13
    63ac:	600f883a 	mov	r7,r12
    63b0:	0015883a 	mov	r10,zero
    63b4:	100b883a 	mov	r5,r2
    63b8:	41000017 	ldw	r4,0(r8)
    63bc:	2806d43a 	srli	r3,r5,16
    63c0:	3880000d 	sth	r2,0(r7)
    63c4:	20bfffcc 	andi	r2,r4,65535
    63c8:	4885383a 	mul	r2,r9,r2
    63cc:	50c7883a 	add	r3,r10,r3
    63d0:	2008d43a 	srli	r4,r4,16
    63d4:	10c5883a 	add	r2,r2,r3
    63d8:	3880008d 	sth	r2,2(r7)
    63dc:	39c00104 	addi	r7,r7,4
    63e0:	39400017 	ldw	r5,0(r7)
    63e4:	4909383a 	mul	r4,r9,r4
    63e8:	1004d43a 	srli	r2,r2,16
    63ec:	28ffffcc 	andi	r3,r5,65535
    63f0:	20c9883a 	add	r4,r4,r3
    63f4:	1105883a 	add	r2,r2,r4
    63f8:	42000104 	addi	r8,r8,4
    63fc:	1014d43a 	srli	r10,r2,16
    6400:	42ffed36 	bltu	r8,r11,63b8 <__multiply+0x134>
    6404:	38800015 	stw	r2,0(r7)
    6408:	31800104 	addi	r6,r6,4
    640c:	33c0022e 	bgeu	r6,r15,6418 <__multiply+0x194>
    6410:	63000104 	addi	r12,r12,4
    6414:	003fc606 	br	6330 <__multiply+0xac>
    6418:	0400090e 	bge	zero,r16,6440 <__multiply+0x1bc>
    641c:	70bfff17 	ldw	r2,-4(r14)
    6420:	70ffff04 	addi	r3,r14,-4
    6424:	10000326 	beq	r2,zero,6434 <__multiply+0x1b0>
    6428:	00000506 	br	6440 <__multiply+0x1bc>
    642c:	18800017 	ldw	r2,0(r3)
    6430:	1000031e 	bne	r2,zero,6440 <__multiply+0x1bc>
    6434:	843fffc4 	addi	r16,r16,-1
    6438:	18ffff04 	addi	r3,r3,-4
    643c:	803ffb1e 	bne	r16,zero,642c <__multiply+0x1a8>
    6440:	a805883a 	mov	r2,r21
    6444:	ac000415 	stw	r16,16(r21)
    6448:	dfc00617 	ldw	ra,24(sp)
    644c:	dd400517 	ldw	r21,20(sp)
    6450:	dd000417 	ldw	r20,16(sp)
    6454:	dcc00317 	ldw	r19,12(sp)
    6458:	dc800217 	ldw	r18,8(sp)
    645c:	dc400117 	ldw	r17,4(sp)
    6460:	dc000017 	ldw	r16,0(sp)
    6464:	dec00704 	addi	sp,sp,28
    6468:	f800283a 	ret

0000646c <__i2b>:
    646c:	defffd04 	addi	sp,sp,-12
    6470:	dc000015 	stw	r16,0(sp)
    6474:	04000044 	movi	r16,1
    6478:	dc800115 	stw	r18,4(sp)
    647c:	2825883a 	mov	r18,r5
    6480:	800b883a 	mov	r5,r16
    6484:	dfc00215 	stw	ra,8(sp)
    6488:	0005d740 	call	5d74 <_Balloc>
    648c:	14000415 	stw	r16,16(r2)
    6490:	14800515 	stw	r18,20(r2)
    6494:	dfc00217 	ldw	ra,8(sp)
    6498:	dc800117 	ldw	r18,4(sp)
    649c:	dc000017 	ldw	r16,0(sp)
    64a0:	dec00304 	addi	sp,sp,12
    64a4:	f800283a 	ret

000064a8 <__multadd>:
    64a8:	defffa04 	addi	sp,sp,-24
    64ac:	dc800215 	stw	r18,8(sp)
    64b0:	2c800417 	ldw	r18,16(r5)
    64b4:	dd000415 	stw	r20,16(sp)
    64b8:	dcc00315 	stw	r19,12(sp)
    64bc:	dc000015 	stw	r16,0(sp)
    64c0:	dfc00515 	stw	ra,20(sp)
    64c4:	3821883a 	mov	r16,r7
    64c8:	dc400115 	stw	r17,4(sp)
    64cc:	2827883a 	mov	r19,r5
    64d0:	2029883a 	mov	r20,r4
    64d4:	2a000504 	addi	r8,r5,20
    64d8:	000f883a 	mov	r7,zero
    64dc:	40800017 	ldw	r2,0(r8)
    64e0:	39c00044 	addi	r7,r7,1
    64e4:	10ffffcc 	andi	r3,r2,65535
    64e8:	1987383a 	mul	r3,r3,r6
    64ec:	1004d43a 	srli	r2,r2,16
    64f0:	1c07883a 	add	r3,r3,r16
    64f4:	180ad43a 	srli	r5,r3,16
    64f8:	1185383a 	mul	r2,r2,r6
    64fc:	18ffffcc 	andi	r3,r3,65535
    6500:	1145883a 	add	r2,r2,r5
    6504:	1008943a 	slli	r4,r2,16
    6508:	1020d43a 	srli	r16,r2,16
    650c:	20c9883a 	add	r4,r4,r3
    6510:	41000015 	stw	r4,0(r8)
    6514:	42000104 	addi	r8,r8,4
    6518:	3cbff016 	blt	r7,r18,64dc <__multadd+0x34>
    651c:	80000826 	beq	r16,zero,6540 <__multadd+0x98>
    6520:	98800217 	ldw	r2,8(r19)
    6524:	90800f0e 	bge	r18,r2,6564 <__multadd+0xbc>
    6528:	9485883a 	add	r2,r18,r18
    652c:	1085883a 	add	r2,r2,r2
    6530:	14c5883a 	add	r2,r2,r19
    6534:	90c00044 	addi	r3,r18,1
    6538:	14000515 	stw	r16,20(r2)
    653c:	98c00415 	stw	r3,16(r19)
    6540:	9805883a 	mov	r2,r19
    6544:	dfc00517 	ldw	ra,20(sp)
    6548:	dd000417 	ldw	r20,16(sp)
    654c:	dcc00317 	ldw	r19,12(sp)
    6550:	dc800217 	ldw	r18,8(sp)
    6554:	dc400117 	ldw	r17,4(sp)
    6558:	dc000017 	ldw	r16,0(sp)
    655c:	dec00604 	addi	sp,sp,24
    6560:	f800283a 	ret
    6564:	99400117 	ldw	r5,4(r19)
    6568:	a009883a 	mov	r4,r20
    656c:	29400044 	addi	r5,r5,1
    6570:	0005d740 	call	5d74 <_Balloc>
    6574:	99800417 	ldw	r6,16(r19)
    6578:	99400304 	addi	r5,r19,12
    657c:	11000304 	addi	r4,r2,12
    6580:	318d883a 	add	r6,r6,r6
    6584:	318d883a 	add	r6,r6,r6
    6588:	31800204 	addi	r6,r6,8
    658c:	1023883a 	mov	r17,r2
    6590:	00055dc0 	call	55dc <memcpy>
    6594:	980b883a 	mov	r5,r19
    6598:	a009883a 	mov	r4,r20
    659c:	00057f40 	call	57f4 <_Bfree>
    65a0:	8827883a 	mov	r19,r17
    65a4:	003fe006 	br	6528 <__multadd+0x80>

000065a8 <__pow5mult>:
    65a8:	defffa04 	addi	sp,sp,-24
    65ac:	308000cc 	andi	r2,r6,3
    65b0:	dd000415 	stw	r20,16(sp)
    65b4:	dcc00315 	stw	r19,12(sp)
    65b8:	dc000015 	stw	r16,0(sp)
    65bc:	dfc00515 	stw	ra,20(sp)
    65c0:	dc800215 	stw	r18,8(sp)
    65c4:	dc400115 	stw	r17,4(sp)
    65c8:	3021883a 	mov	r16,r6
    65cc:	2027883a 	mov	r19,r4
    65d0:	2829883a 	mov	r20,r5
    65d4:	10002b1e 	bne	r2,zero,6684 <__pow5mult+0xdc>
    65d8:	8025d0ba 	srai	r18,r16,2
    65dc:	90001b26 	beq	r18,zero,664c <__pow5mult+0xa4>
    65e0:	9c001217 	ldw	r16,72(r19)
    65e4:	8000081e 	bne	r16,zero,6608 <__pow5mult+0x60>
    65e8:	00003006 	br	66ac <__pow5mult+0x104>
    65ec:	800b883a 	mov	r5,r16
    65f0:	800d883a 	mov	r6,r16
    65f4:	9809883a 	mov	r4,r19
    65f8:	90001426 	beq	r18,zero,664c <__pow5mult+0xa4>
    65fc:	80800017 	ldw	r2,0(r16)
    6600:	10001b26 	beq	r2,zero,6670 <__pow5mult+0xc8>
    6604:	1021883a 	mov	r16,r2
    6608:	9080004c 	andi	r2,r18,1
    660c:	1005003a 	cmpeq	r2,r2,zero
    6610:	9025d07a 	srai	r18,r18,1
    6614:	800d883a 	mov	r6,r16
    6618:	9809883a 	mov	r4,r19
    661c:	a00b883a 	mov	r5,r20
    6620:	103ff21e 	bne	r2,zero,65ec <__pow5mult+0x44>
    6624:	00062840 	call	6284 <__multiply>
    6628:	a00b883a 	mov	r5,r20
    662c:	9809883a 	mov	r4,r19
    6630:	1023883a 	mov	r17,r2
    6634:	00057f40 	call	57f4 <_Bfree>
    6638:	8829883a 	mov	r20,r17
    663c:	800b883a 	mov	r5,r16
    6640:	800d883a 	mov	r6,r16
    6644:	9809883a 	mov	r4,r19
    6648:	903fec1e 	bne	r18,zero,65fc <__pow5mult+0x54>
    664c:	a005883a 	mov	r2,r20
    6650:	dfc00517 	ldw	ra,20(sp)
    6654:	dd000417 	ldw	r20,16(sp)
    6658:	dcc00317 	ldw	r19,12(sp)
    665c:	dc800217 	ldw	r18,8(sp)
    6660:	dc400117 	ldw	r17,4(sp)
    6664:	dc000017 	ldw	r16,0(sp)
    6668:	dec00604 	addi	sp,sp,24
    666c:	f800283a 	ret
    6670:	00062840 	call	6284 <__multiply>
    6674:	80800015 	stw	r2,0(r16)
    6678:	1021883a 	mov	r16,r2
    667c:	10000015 	stw	zero,0(r2)
    6680:	003fe106 	br	6608 <__pow5mult+0x60>
    6684:	1085883a 	add	r2,r2,r2
    6688:	00c00074 	movhi	r3,1
    668c:	18f46304 	addi	r3,r3,-11892
    6690:	1085883a 	add	r2,r2,r2
    6694:	10c5883a 	add	r2,r2,r3
    6698:	11bfff17 	ldw	r6,-4(r2)
    669c:	000f883a 	mov	r7,zero
    66a0:	00064a80 	call	64a8 <__multadd>
    66a4:	1029883a 	mov	r20,r2
    66a8:	003fcb06 	br	65d8 <__pow5mult+0x30>
    66ac:	9809883a 	mov	r4,r19
    66b0:	01409c44 	movi	r5,625
    66b4:	000646c0 	call	646c <__i2b>
    66b8:	98801215 	stw	r2,72(r19)
    66bc:	1021883a 	mov	r16,r2
    66c0:	10000015 	stw	zero,0(r2)
    66c4:	003fd006 	br	6608 <__pow5mult+0x60>

000066c8 <__s2b>:
    66c8:	defff904 	addi	sp,sp,-28
    66cc:	dcc00315 	stw	r19,12(sp)
    66d0:	dc800215 	stw	r18,8(sp)
    66d4:	2827883a 	mov	r19,r5
    66d8:	2025883a 	mov	r18,r4
    66dc:	01400244 	movi	r5,9
    66e0:	39000204 	addi	r4,r7,8
    66e4:	dd000415 	stw	r20,16(sp)
    66e8:	dc400115 	stw	r17,4(sp)
    66ec:	dfc00615 	stw	ra,24(sp)
    66f0:	dd400515 	stw	r21,20(sp)
    66f4:	dc000015 	stw	r16,0(sp)
    66f8:	3829883a 	mov	r20,r7
    66fc:	3023883a 	mov	r17,r6
    6700:	00093000 	call	9300 <__divsi3>
    6704:	00c00044 	movi	r3,1
    6708:	1880350e 	bge	r3,r2,67e0 <__s2b+0x118>
    670c:	000b883a 	mov	r5,zero
    6710:	18c7883a 	add	r3,r3,r3
    6714:	29400044 	addi	r5,r5,1
    6718:	18bffd16 	blt	r3,r2,6710 <__s2b+0x48>
    671c:	9009883a 	mov	r4,r18
    6720:	0005d740 	call	5d74 <_Balloc>
    6724:	1011883a 	mov	r8,r2
    6728:	d8800717 	ldw	r2,28(sp)
    672c:	00c00044 	movi	r3,1
    6730:	01800244 	movi	r6,9
    6734:	40800515 	stw	r2,20(r8)
    6738:	40c00415 	stw	r3,16(r8)
    673c:	3440260e 	bge	r6,r17,67d8 <__s2b+0x110>
    6740:	3021883a 	mov	r16,r6
    6744:	99ab883a 	add	r21,r19,r6
    6748:	9c05883a 	add	r2,r19,r16
    674c:	11c00007 	ldb	r7,0(r2)
    6750:	400b883a 	mov	r5,r8
    6754:	9009883a 	mov	r4,r18
    6758:	39fff404 	addi	r7,r7,-48
    675c:	01800284 	movi	r6,10
    6760:	00064a80 	call	64a8 <__multadd>
    6764:	84000044 	addi	r16,r16,1
    6768:	1011883a 	mov	r8,r2
    676c:	8c3ff61e 	bne	r17,r16,6748 <__s2b+0x80>
    6770:	ac45883a 	add	r2,r21,r17
    6774:	117ffe04 	addi	r5,r2,-8
    6778:	880d883a 	mov	r6,r17
    677c:	35000c0e 	bge	r6,r20,67b0 <__s2b+0xe8>
    6780:	a185c83a 	sub	r2,r20,r6
    6784:	2821883a 	mov	r16,r5
    6788:	28a3883a 	add	r17,r5,r2
    678c:	81c00007 	ldb	r7,0(r16)
    6790:	400b883a 	mov	r5,r8
    6794:	9009883a 	mov	r4,r18
    6798:	39fff404 	addi	r7,r7,-48
    679c:	01800284 	movi	r6,10
    67a0:	00064a80 	call	64a8 <__multadd>
    67a4:	84000044 	addi	r16,r16,1
    67a8:	1011883a 	mov	r8,r2
    67ac:	847ff71e 	bne	r16,r17,678c <__s2b+0xc4>
    67b0:	4005883a 	mov	r2,r8
    67b4:	dfc00617 	ldw	ra,24(sp)
    67b8:	dd400517 	ldw	r21,20(sp)
    67bc:	dd000417 	ldw	r20,16(sp)
    67c0:	dcc00317 	ldw	r19,12(sp)
    67c4:	dc800217 	ldw	r18,8(sp)
    67c8:	dc400117 	ldw	r17,4(sp)
    67cc:	dc000017 	ldw	r16,0(sp)
    67d0:	dec00704 	addi	sp,sp,28
    67d4:	f800283a 	ret
    67d8:	99400284 	addi	r5,r19,10
    67dc:	003fe706 	br	677c <__s2b+0xb4>
    67e0:	000b883a 	mov	r5,zero
    67e4:	003fcd06 	br	671c <__s2b+0x54>

000067e8 <_realloc_r>:
    67e8:	defff404 	addi	sp,sp,-48
    67ec:	dd800815 	stw	r22,32(sp)
    67f0:	dc800415 	stw	r18,16(sp)
    67f4:	dc400315 	stw	r17,12(sp)
    67f8:	dfc00b15 	stw	ra,44(sp)
    67fc:	df000a15 	stw	fp,40(sp)
    6800:	ddc00915 	stw	r23,36(sp)
    6804:	dd400715 	stw	r21,28(sp)
    6808:	dd000615 	stw	r20,24(sp)
    680c:	dcc00515 	stw	r19,20(sp)
    6810:	dc000215 	stw	r16,8(sp)
    6814:	2825883a 	mov	r18,r5
    6818:	3023883a 	mov	r17,r6
    681c:	202d883a 	mov	r22,r4
    6820:	2800c926 	beq	r5,zero,6b48 <_realloc_r+0x360>
    6824:	000a0800 	call	a080 <__malloc_lock>
    6828:	943ffe04 	addi	r16,r18,-8
    682c:	88c002c4 	addi	r3,r17,11
    6830:	00800584 	movi	r2,22
    6834:	82000117 	ldw	r8,4(r16)
    6838:	10c01b2e 	bgeu	r2,r3,68a8 <_realloc_r+0xc0>
    683c:	00bffe04 	movi	r2,-8
    6840:	188e703a 	and	r7,r3,r2
    6844:	3839883a 	mov	fp,r7
    6848:	38001a16 	blt	r7,zero,68b4 <_realloc_r+0xcc>
    684c:	e4401936 	bltu	fp,r17,68b4 <_realloc_r+0xcc>
    6850:	013fff04 	movi	r4,-4
    6854:	4126703a 	and	r19,r8,r4
    6858:	99c02616 	blt	r19,r7,68f4 <_realloc_r+0x10c>
    685c:	802b883a 	mov	r21,r16
    6860:	9829883a 	mov	r20,r19
    6864:	84000204 	addi	r16,r16,8
    6868:	a80f883a 	mov	r7,r21
    686c:	a70dc83a 	sub	r6,r20,fp
    6870:	008003c4 	movi	r2,15
    6874:	1180c136 	bltu	r2,r6,6b7c <_realloc_r+0x394>
    6878:	38800117 	ldw	r2,4(r7)
    687c:	a549883a 	add	r4,r20,r21
    6880:	1080004c 	andi	r2,r2,1
    6884:	a084b03a 	or	r2,r20,r2
    6888:	38800115 	stw	r2,4(r7)
    688c:	20c00117 	ldw	r3,4(r4)
    6890:	18c00054 	ori	r3,r3,1
    6894:	20c00115 	stw	r3,4(r4)
    6898:	b009883a 	mov	r4,r22
    689c:	000a0a00 	call	a0a0 <__malloc_unlock>
    68a0:	8023883a 	mov	r17,r16
    68a4:	00000606 	br	68c0 <_realloc_r+0xd8>
    68a8:	01c00404 	movi	r7,16
    68ac:	3839883a 	mov	fp,r7
    68b0:	e47fe72e 	bgeu	fp,r17,6850 <_realloc_r+0x68>
    68b4:	00800304 	movi	r2,12
    68b8:	0023883a 	mov	r17,zero
    68bc:	b0800015 	stw	r2,0(r22)
    68c0:	8805883a 	mov	r2,r17
    68c4:	dfc00b17 	ldw	ra,44(sp)
    68c8:	df000a17 	ldw	fp,40(sp)
    68cc:	ddc00917 	ldw	r23,36(sp)
    68d0:	dd800817 	ldw	r22,32(sp)
    68d4:	dd400717 	ldw	r21,28(sp)
    68d8:	dd000617 	ldw	r20,24(sp)
    68dc:	dcc00517 	ldw	r19,20(sp)
    68e0:	dc800417 	ldw	r18,16(sp)
    68e4:	dc400317 	ldw	r17,12(sp)
    68e8:	dc000217 	ldw	r16,8(sp)
    68ec:	dec00c04 	addi	sp,sp,48
    68f0:	f800283a 	ret
    68f4:	00800074 	movhi	r2,1
    68f8:	10b5c304 	addi	r2,r2,-10484
    68fc:	12400217 	ldw	r9,8(r2)
    6900:	84cd883a 	add	r6,r16,r19
    6904:	802b883a 	mov	r21,r16
    6908:	3240b926 	beq	r6,r9,6bf0 <_realloc_r+0x408>
    690c:	31400117 	ldw	r5,4(r6)
    6910:	00bfff84 	movi	r2,-2
    6914:	2884703a 	and	r2,r5,r2
    6918:	1185883a 	add	r2,r2,r6
    691c:	10c00117 	ldw	r3,4(r2)
    6920:	18c0004c 	andi	r3,r3,1
    6924:	1807003a 	cmpeq	r3,r3,zero
    6928:	1800a326 	beq	r3,zero,6bb8 <_realloc_r+0x3d0>
    692c:	2908703a 	and	r4,r5,r4
    6930:	9929883a 	add	r20,r19,r4
    6934:	a1c0a30e 	bge	r20,r7,6bc4 <_realloc_r+0x3dc>
    6938:	4080004c 	andi	r2,r8,1
    693c:	1000551e 	bne	r2,zero,6a94 <_realloc_r+0x2ac>
    6940:	80800017 	ldw	r2,0(r16)
    6944:	80afc83a 	sub	r23,r16,r2
    6948:	b8c00117 	ldw	r3,4(r23)
    694c:	00bfff04 	movi	r2,-4
    6950:	1884703a 	and	r2,r3,r2
    6954:	30002e26 	beq	r6,zero,6a10 <_realloc_r+0x228>
    6958:	3240b926 	beq	r6,r9,6c40 <_realloc_r+0x458>
    695c:	98a9883a 	add	r20,r19,r2
    6960:	2509883a 	add	r4,r4,r20
    6964:	d9000015 	stw	r4,0(sp)
    6968:	21c02a16 	blt	r4,r7,6a14 <_realloc_r+0x22c>
    696c:	30800317 	ldw	r2,12(r6)
    6970:	30c00217 	ldw	r3,8(r6)
    6974:	01400904 	movi	r5,36
    6978:	99bfff04 	addi	r6,r19,-4
    697c:	18800315 	stw	r2,12(r3)
    6980:	10c00215 	stw	r3,8(r2)
    6984:	b9000317 	ldw	r4,12(r23)
    6988:	b8800217 	ldw	r2,8(r23)
    698c:	b82b883a 	mov	r21,r23
    6990:	bc000204 	addi	r16,r23,8
    6994:	20800215 	stw	r2,8(r4)
    6998:	11000315 	stw	r4,12(r2)
    699c:	2980e436 	bltu	r5,r6,6d30 <_realloc_r+0x548>
    69a0:	008004c4 	movi	r2,19
    69a4:	9009883a 	mov	r4,r18
    69a8:	8011883a 	mov	r8,r16
    69ac:	11800f2e 	bgeu	r2,r6,69ec <_realloc_r+0x204>
    69b0:	90800017 	ldw	r2,0(r18)
    69b4:	ba000404 	addi	r8,r23,16
    69b8:	91000204 	addi	r4,r18,8
    69bc:	b8800215 	stw	r2,8(r23)
    69c0:	90c00117 	ldw	r3,4(r18)
    69c4:	008006c4 	movi	r2,27
    69c8:	b8c00315 	stw	r3,12(r23)
    69cc:	1180072e 	bgeu	r2,r6,69ec <_realloc_r+0x204>
    69d0:	90c00217 	ldw	r3,8(r18)
    69d4:	ba000604 	addi	r8,r23,24
    69d8:	91000404 	addi	r4,r18,16
    69dc:	b8c00415 	stw	r3,16(r23)
    69e0:	90800317 	ldw	r2,12(r18)
    69e4:	b8800515 	stw	r2,20(r23)
    69e8:	3140e726 	beq	r6,r5,6d88 <_realloc_r+0x5a0>
    69ec:	20800017 	ldw	r2,0(r4)
    69f0:	dd000017 	ldw	r20,0(sp)
    69f4:	b80f883a 	mov	r7,r23
    69f8:	40800015 	stw	r2,0(r8)
    69fc:	20c00117 	ldw	r3,4(r4)
    6a00:	40c00115 	stw	r3,4(r8)
    6a04:	20800217 	ldw	r2,8(r4)
    6a08:	40800215 	stw	r2,8(r8)
    6a0c:	003f9706 	br	686c <_realloc_r+0x84>
    6a10:	98a9883a 	add	r20,r19,r2
    6a14:	a1c01f16 	blt	r20,r7,6a94 <_realloc_r+0x2ac>
    6a18:	b8c00317 	ldw	r3,12(r23)
    6a1c:	b8800217 	ldw	r2,8(r23)
    6a20:	99bfff04 	addi	r6,r19,-4
    6a24:	01400904 	movi	r5,36
    6a28:	b82b883a 	mov	r21,r23
    6a2c:	18800215 	stw	r2,8(r3)
    6a30:	10c00315 	stw	r3,12(r2)
    6a34:	bc000204 	addi	r16,r23,8
    6a38:	2980c336 	bltu	r5,r6,6d48 <_realloc_r+0x560>
    6a3c:	008004c4 	movi	r2,19
    6a40:	9009883a 	mov	r4,r18
    6a44:	8011883a 	mov	r8,r16
    6a48:	11800f2e 	bgeu	r2,r6,6a88 <_realloc_r+0x2a0>
    6a4c:	90800017 	ldw	r2,0(r18)
    6a50:	ba000404 	addi	r8,r23,16
    6a54:	91000204 	addi	r4,r18,8
    6a58:	b8800215 	stw	r2,8(r23)
    6a5c:	90c00117 	ldw	r3,4(r18)
    6a60:	008006c4 	movi	r2,27
    6a64:	b8c00315 	stw	r3,12(r23)
    6a68:	1180072e 	bgeu	r2,r6,6a88 <_realloc_r+0x2a0>
    6a6c:	90c00217 	ldw	r3,8(r18)
    6a70:	ba000604 	addi	r8,r23,24
    6a74:	91000404 	addi	r4,r18,16
    6a78:	b8c00415 	stw	r3,16(r23)
    6a7c:	90800317 	ldw	r2,12(r18)
    6a80:	b8800515 	stw	r2,20(r23)
    6a84:	3140c726 	beq	r6,r5,6da4 <_realloc_r+0x5bc>
    6a88:	20800017 	ldw	r2,0(r4)
    6a8c:	b80f883a 	mov	r7,r23
    6a90:	003fd906 	br	69f8 <_realloc_r+0x210>
    6a94:	880b883a 	mov	r5,r17
    6a98:	b009883a 	mov	r4,r22
    6a9c:	0004db80 	call	4db8 <_malloc_r>
    6aa0:	1023883a 	mov	r17,r2
    6aa4:	10002526 	beq	r2,zero,6b3c <_realloc_r+0x354>
    6aa8:	80800117 	ldw	r2,4(r16)
    6aac:	00ffff84 	movi	r3,-2
    6ab0:	893ffe04 	addi	r4,r17,-8
    6ab4:	10c4703a 	and	r2,r2,r3
    6ab8:	8085883a 	add	r2,r16,r2
    6abc:	20809526 	beq	r4,r2,6d14 <_realloc_r+0x52c>
    6ac0:	99bfff04 	addi	r6,r19,-4
    6ac4:	01c00904 	movi	r7,36
    6ac8:	39804536 	bltu	r7,r6,6be0 <_realloc_r+0x3f8>
    6acc:	008004c4 	movi	r2,19
    6ad0:	9009883a 	mov	r4,r18
    6ad4:	880b883a 	mov	r5,r17
    6ad8:	11800f2e 	bgeu	r2,r6,6b18 <_realloc_r+0x330>
    6adc:	90800017 	ldw	r2,0(r18)
    6ae0:	89400204 	addi	r5,r17,8
    6ae4:	91000204 	addi	r4,r18,8
    6ae8:	88800015 	stw	r2,0(r17)
    6aec:	90c00117 	ldw	r3,4(r18)
    6af0:	008006c4 	movi	r2,27
    6af4:	88c00115 	stw	r3,4(r17)
    6af8:	1180072e 	bgeu	r2,r6,6b18 <_realloc_r+0x330>
    6afc:	90c00217 	ldw	r3,8(r18)
    6b00:	89400404 	addi	r5,r17,16
    6b04:	91000404 	addi	r4,r18,16
    6b08:	88c00215 	stw	r3,8(r17)
    6b0c:	90800317 	ldw	r2,12(r18)
    6b10:	88800315 	stw	r2,12(r17)
    6b14:	31c09126 	beq	r6,r7,6d5c <_realloc_r+0x574>
    6b18:	20800017 	ldw	r2,0(r4)
    6b1c:	28800015 	stw	r2,0(r5)
    6b20:	20c00117 	ldw	r3,4(r4)
    6b24:	28c00115 	stw	r3,4(r5)
    6b28:	20800217 	ldw	r2,8(r4)
    6b2c:	28800215 	stw	r2,8(r5)
    6b30:	900b883a 	mov	r5,r18
    6b34:	b009883a 	mov	r4,r22
    6b38:	00042300 	call	4230 <_free_r>
    6b3c:	b009883a 	mov	r4,r22
    6b40:	000a0a00 	call	a0a0 <__malloc_unlock>
    6b44:	003f5e06 	br	68c0 <_realloc_r+0xd8>
    6b48:	300b883a 	mov	r5,r6
    6b4c:	dfc00b17 	ldw	ra,44(sp)
    6b50:	df000a17 	ldw	fp,40(sp)
    6b54:	ddc00917 	ldw	r23,36(sp)
    6b58:	dd800817 	ldw	r22,32(sp)
    6b5c:	dd400717 	ldw	r21,28(sp)
    6b60:	dd000617 	ldw	r20,24(sp)
    6b64:	dcc00517 	ldw	r19,20(sp)
    6b68:	dc800417 	ldw	r18,16(sp)
    6b6c:	dc400317 	ldw	r17,12(sp)
    6b70:	dc000217 	ldw	r16,8(sp)
    6b74:	dec00c04 	addi	sp,sp,48
    6b78:	0004db81 	jmpi	4db8 <_malloc_r>
    6b7c:	38800117 	ldw	r2,4(r7)
    6b80:	e54b883a 	add	r5,fp,r21
    6b84:	31000054 	ori	r4,r6,1
    6b88:	1080004c 	andi	r2,r2,1
    6b8c:	1704b03a 	or	r2,r2,fp
    6b90:	38800115 	stw	r2,4(r7)
    6b94:	29000115 	stw	r4,4(r5)
    6b98:	2987883a 	add	r3,r5,r6
    6b9c:	18800117 	ldw	r2,4(r3)
    6ba0:	29400204 	addi	r5,r5,8
    6ba4:	b009883a 	mov	r4,r22
    6ba8:	10800054 	ori	r2,r2,1
    6bac:	18800115 	stw	r2,4(r3)
    6bb0:	00042300 	call	4230 <_free_r>
    6bb4:	003f3806 	br	6898 <_realloc_r+0xb0>
    6bb8:	000d883a 	mov	r6,zero
    6bbc:	0009883a 	mov	r4,zero
    6bc0:	003f5d06 	br	6938 <_realloc_r+0x150>
    6bc4:	30c00217 	ldw	r3,8(r6)
    6bc8:	30800317 	ldw	r2,12(r6)
    6bcc:	800f883a 	mov	r7,r16
    6bd0:	84000204 	addi	r16,r16,8
    6bd4:	10c00215 	stw	r3,8(r2)
    6bd8:	18800315 	stw	r2,12(r3)
    6bdc:	003f2306 	br	686c <_realloc_r+0x84>
    6be0:	8809883a 	mov	r4,r17
    6be4:	900b883a 	mov	r5,r18
    6be8:	000567c0 	call	567c <memmove>
    6bec:	003fd006 	br	6b30 <_realloc_r+0x348>
    6bf0:	30800117 	ldw	r2,4(r6)
    6bf4:	e0c00404 	addi	r3,fp,16
    6bf8:	1108703a 	and	r4,r2,r4
    6bfc:	9905883a 	add	r2,r19,r4
    6c00:	10ff4d16 	blt	r2,r3,6938 <_realloc_r+0x150>
    6c04:	1705c83a 	sub	r2,r2,fp
    6c08:	870b883a 	add	r5,r16,fp
    6c0c:	10800054 	ori	r2,r2,1
    6c10:	28800115 	stw	r2,4(r5)
    6c14:	80c00117 	ldw	r3,4(r16)
    6c18:	00800074 	movhi	r2,1
    6c1c:	10b5c304 	addi	r2,r2,-10484
    6c20:	b009883a 	mov	r4,r22
    6c24:	18c0004c 	andi	r3,r3,1
    6c28:	e0c6b03a 	or	r3,fp,r3
    6c2c:	11400215 	stw	r5,8(r2)
    6c30:	80c00115 	stw	r3,4(r16)
    6c34:	000a0a00 	call	a0a0 <__malloc_unlock>
    6c38:	84400204 	addi	r17,r16,8
    6c3c:	003f2006 	br	68c0 <_realloc_r+0xd8>
    6c40:	98a9883a 	add	r20,r19,r2
    6c44:	2509883a 	add	r4,r4,r20
    6c48:	e0800404 	addi	r2,fp,16
    6c4c:	d9000115 	stw	r4,4(sp)
    6c50:	20bf7016 	blt	r4,r2,6a14 <_realloc_r+0x22c>
    6c54:	b8c00317 	ldw	r3,12(r23)
    6c58:	b8800217 	ldw	r2,8(r23)
    6c5c:	99bfff04 	addi	r6,r19,-4
    6c60:	01400904 	movi	r5,36
    6c64:	18800215 	stw	r2,8(r3)
    6c68:	10c00315 	stw	r3,12(r2)
    6c6c:	bc400204 	addi	r17,r23,8
    6c70:	29804136 	bltu	r5,r6,6d78 <_realloc_r+0x590>
    6c74:	008004c4 	movi	r2,19
    6c78:	9009883a 	mov	r4,r18
    6c7c:	880f883a 	mov	r7,r17
    6c80:	11800f2e 	bgeu	r2,r6,6cc0 <_realloc_r+0x4d8>
    6c84:	90800017 	ldw	r2,0(r18)
    6c88:	b9c00404 	addi	r7,r23,16
    6c8c:	91000204 	addi	r4,r18,8
    6c90:	b8800215 	stw	r2,8(r23)
    6c94:	90c00117 	ldw	r3,4(r18)
    6c98:	008006c4 	movi	r2,27
    6c9c:	b8c00315 	stw	r3,12(r23)
    6ca0:	1180072e 	bgeu	r2,r6,6cc0 <_realloc_r+0x4d8>
    6ca4:	90c00217 	ldw	r3,8(r18)
    6ca8:	b9c00604 	addi	r7,r23,24
    6cac:	91000404 	addi	r4,r18,16
    6cb0:	b8c00415 	stw	r3,16(r23)
    6cb4:	90800317 	ldw	r2,12(r18)
    6cb8:	b8800515 	stw	r2,20(r23)
    6cbc:	31404026 	beq	r6,r5,6dc0 <_realloc_r+0x5d8>
    6cc0:	20800017 	ldw	r2,0(r4)
    6cc4:	38800015 	stw	r2,0(r7)
    6cc8:	20c00117 	ldw	r3,4(r4)
    6ccc:	38c00115 	stw	r3,4(r7)
    6cd0:	20800217 	ldw	r2,8(r4)
    6cd4:	38800215 	stw	r2,8(r7)
    6cd8:	d8c00117 	ldw	r3,4(sp)
    6cdc:	bf0b883a 	add	r5,r23,fp
    6ce0:	b009883a 	mov	r4,r22
    6ce4:	1f05c83a 	sub	r2,r3,fp
    6ce8:	10800054 	ori	r2,r2,1
    6cec:	28800115 	stw	r2,4(r5)
    6cf0:	b8c00117 	ldw	r3,4(r23)
    6cf4:	00800074 	movhi	r2,1
    6cf8:	10b5c304 	addi	r2,r2,-10484
    6cfc:	11400215 	stw	r5,8(r2)
    6d00:	18c0004c 	andi	r3,r3,1
    6d04:	e0c6b03a 	or	r3,fp,r3
    6d08:	b8c00115 	stw	r3,4(r23)
    6d0c:	000a0a00 	call	a0a0 <__malloc_unlock>
    6d10:	003eeb06 	br	68c0 <_realloc_r+0xd8>
    6d14:	20800117 	ldw	r2,4(r4)
    6d18:	00ffff04 	movi	r3,-4
    6d1c:	800f883a 	mov	r7,r16
    6d20:	10c4703a 	and	r2,r2,r3
    6d24:	98a9883a 	add	r20,r19,r2
    6d28:	84000204 	addi	r16,r16,8
    6d2c:	003ecf06 	br	686c <_realloc_r+0x84>
    6d30:	900b883a 	mov	r5,r18
    6d34:	8009883a 	mov	r4,r16
    6d38:	000567c0 	call	567c <memmove>
    6d3c:	dd000017 	ldw	r20,0(sp)
    6d40:	b80f883a 	mov	r7,r23
    6d44:	003ec906 	br	686c <_realloc_r+0x84>
    6d48:	900b883a 	mov	r5,r18
    6d4c:	8009883a 	mov	r4,r16
    6d50:	000567c0 	call	567c <memmove>
    6d54:	b80f883a 	mov	r7,r23
    6d58:	003ec406 	br	686c <_realloc_r+0x84>
    6d5c:	90c00417 	ldw	r3,16(r18)
    6d60:	89400604 	addi	r5,r17,24
    6d64:	91000604 	addi	r4,r18,24
    6d68:	88c00415 	stw	r3,16(r17)
    6d6c:	90800517 	ldw	r2,20(r18)
    6d70:	88800515 	stw	r2,20(r17)
    6d74:	003f6806 	br	6b18 <_realloc_r+0x330>
    6d78:	900b883a 	mov	r5,r18
    6d7c:	8809883a 	mov	r4,r17
    6d80:	000567c0 	call	567c <memmove>
    6d84:	003fd406 	br	6cd8 <_realloc_r+0x4f0>
    6d88:	90c00417 	ldw	r3,16(r18)
    6d8c:	91000604 	addi	r4,r18,24
    6d90:	ba000804 	addi	r8,r23,32
    6d94:	b8c00615 	stw	r3,24(r23)
    6d98:	90800517 	ldw	r2,20(r18)
    6d9c:	b8800715 	stw	r2,28(r23)
    6da0:	003f1206 	br	69ec <_realloc_r+0x204>
    6da4:	90c00417 	ldw	r3,16(r18)
    6da8:	91000604 	addi	r4,r18,24
    6dac:	ba000804 	addi	r8,r23,32
    6db0:	b8c00615 	stw	r3,24(r23)
    6db4:	90800517 	ldw	r2,20(r18)
    6db8:	b8800715 	stw	r2,28(r23)
    6dbc:	003f3206 	br	6a88 <_realloc_r+0x2a0>
    6dc0:	90c00417 	ldw	r3,16(r18)
    6dc4:	91000604 	addi	r4,r18,24
    6dc8:	b9c00804 	addi	r7,r23,32
    6dcc:	b8c00615 	stw	r3,24(r23)
    6dd0:	90800517 	ldw	r2,20(r18)
    6dd4:	b8800715 	stw	r2,28(r23)
    6dd8:	003fb906 	br	6cc0 <_realloc_r+0x4d8>

00006ddc <__isinfd>:
    6ddc:	200d883a 	mov	r6,r4
    6de0:	0109c83a 	sub	r4,zero,r4
    6de4:	2188b03a 	or	r4,r4,r6
    6de8:	2008d7fa 	srli	r4,r4,31
    6dec:	00a00034 	movhi	r2,32768
    6df0:	10bfffc4 	addi	r2,r2,-1
    6df4:	1144703a 	and	r2,r2,r5
    6df8:	2088b03a 	or	r4,r4,r2
    6dfc:	009ffc34 	movhi	r2,32752
    6e00:	1105c83a 	sub	r2,r2,r4
    6e04:	0087c83a 	sub	r3,zero,r2
    6e08:	10c4b03a 	or	r2,r2,r3
    6e0c:	1004d7fa 	srli	r2,r2,31
    6e10:	00c00044 	movi	r3,1
    6e14:	1885c83a 	sub	r2,r3,r2
    6e18:	f800283a 	ret

00006e1c <__isnand>:
    6e1c:	200d883a 	mov	r6,r4
    6e20:	0109c83a 	sub	r4,zero,r4
    6e24:	2188b03a 	or	r4,r4,r6
    6e28:	2008d7fa 	srli	r4,r4,31
    6e2c:	00a00034 	movhi	r2,32768
    6e30:	10bfffc4 	addi	r2,r2,-1
    6e34:	1144703a 	and	r2,r2,r5
    6e38:	2088b03a 	or	r4,r4,r2
    6e3c:	009ffc34 	movhi	r2,32752
    6e40:	1105c83a 	sub	r2,r2,r4
    6e44:	1004d7fa 	srli	r2,r2,31
    6e48:	f800283a 	ret

00006e4c <_sbrk_r>:
    6e4c:	defffd04 	addi	sp,sp,-12
    6e50:	dc000015 	stw	r16,0(sp)
    6e54:	04000074 	movhi	r16,1
    6e58:	8402b804 	addi	r16,r16,2784
    6e5c:	dc400115 	stw	r17,4(sp)
    6e60:	80000015 	stw	zero,0(r16)
    6e64:	2023883a 	mov	r17,r4
    6e68:	2809883a 	mov	r4,r5
    6e6c:	dfc00215 	stw	ra,8(sp)
    6e70:	000a2a00 	call	a2a0 <sbrk>
    6e74:	1007883a 	mov	r3,r2
    6e78:	00bfffc4 	movi	r2,-1
    6e7c:	18800626 	beq	r3,r2,6e98 <_sbrk_r+0x4c>
    6e80:	1805883a 	mov	r2,r3
    6e84:	dfc00217 	ldw	ra,8(sp)
    6e88:	dc400117 	ldw	r17,4(sp)
    6e8c:	dc000017 	ldw	r16,0(sp)
    6e90:	dec00304 	addi	sp,sp,12
    6e94:	f800283a 	ret
    6e98:	80800017 	ldw	r2,0(r16)
    6e9c:	103ff826 	beq	r2,zero,6e80 <_sbrk_r+0x34>
    6ea0:	88800015 	stw	r2,0(r17)
    6ea4:	1805883a 	mov	r2,r3
    6ea8:	dfc00217 	ldw	ra,8(sp)
    6eac:	dc400117 	ldw	r17,4(sp)
    6eb0:	dc000017 	ldw	r16,0(sp)
    6eb4:	dec00304 	addi	sp,sp,12
    6eb8:	f800283a 	ret

00006ebc <__sclose>:
    6ebc:	2940038f 	ldh	r5,14(r5)
    6ec0:	00072641 	jmpi	7264 <_close_r>

00006ec4 <__sseek>:
    6ec4:	defffe04 	addi	sp,sp,-8
    6ec8:	dc000015 	stw	r16,0(sp)
    6ecc:	2821883a 	mov	r16,r5
    6ed0:	2940038f 	ldh	r5,14(r5)
    6ed4:	dfc00115 	stw	ra,4(sp)
    6ed8:	00074dc0 	call	74dc <_lseek_r>
    6edc:	1007883a 	mov	r3,r2
    6ee0:	00bfffc4 	movi	r2,-1
    6ee4:	18800926 	beq	r3,r2,6f0c <__sseek+0x48>
    6ee8:	8080030b 	ldhu	r2,12(r16)
    6eec:	80c01415 	stw	r3,80(r16)
    6ef0:	10840014 	ori	r2,r2,4096
    6ef4:	8080030d 	sth	r2,12(r16)
    6ef8:	1805883a 	mov	r2,r3
    6efc:	dfc00117 	ldw	ra,4(sp)
    6f00:	dc000017 	ldw	r16,0(sp)
    6f04:	dec00204 	addi	sp,sp,8
    6f08:	f800283a 	ret
    6f0c:	8080030b 	ldhu	r2,12(r16)
    6f10:	10bbffcc 	andi	r2,r2,61439
    6f14:	8080030d 	sth	r2,12(r16)
    6f18:	1805883a 	mov	r2,r3
    6f1c:	dfc00117 	ldw	ra,4(sp)
    6f20:	dc000017 	ldw	r16,0(sp)
    6f24:	dec00204 	addi	sp,sp,8
    6f28:	f800283a 	ret

00006f2c <__swrite>:
    6f2c:	2880030b 	ldhu	r2,12(r5)
    6f30:	defffb04 	addi	sp,sp,-20
    6f34:	dcc00315 	stw	r19,12(sp)
    6f38:	1080400c 	andi	r2,r2,256
    6f3c:	dc800215 	stw	r18,8(sp)
    6f40:	dc400115 	stw	r17,4(sp)
    6f44:	dc000015 	stw	r16,0(sp)
    6f48:	3027883a 	mov	r19,r6
    6f4c:	3825883a 	mov	r18,r7
    6f50:	dfc00415 	stw	ra,16(sp)
    6f54:	2821883a 	mov	r16,r5
    6f58:	000d883a 	mov	r6,zero
    6f5c:	01c00084 	movi	r7,2
    6f60:	2023883a 	mov	r17,r4
    6f64:	10000226 	beq	r2,zero,6f70 <__swrite+0x44>
    6f68:	2940038f 	ldh	r5,14(r5)
    6f6c:	00074dc0 	call	74dc <_lseek_r>
    6f70:	8080030b 	ldhu	r2,12(r16)
    6f74:	8140038f 	ldh	r5,14(r16)
    6f78:	8809883a 	mov	r4,r17
    6f7c:	10bbffcc 	andi	r2,r2,61439
    6f80:	980d883a 	mov	r6,r19
    6f84:	900f883a 	mov	r7,r18
    6f88:	8080030d 	sth	r2,12(r16)
    6f8c:	dfc00417 	ldw	ra,16(sp)
    6f90:	dcc00317 	ldw	r19,12(sp)
    6f94:	dc800217 	ldw	r18,8(sp)
    6f98:	dc400117 	ldw	r17,4(sp)
    6f9c:	dc000017 	ldw	r16,0(sp)
    6fa0:	dec00504 	addi	sp,sp,20
    6fa4:	00071381 	jmpi	7138 <_write_r>

00006fa8 <__sread>:
    6fa8:	defffe04 	addi	sp,sp,-8
    6fac:	dc000015 	stw	r16,0(sp)
    6fb0:	2821883a 	mov	r16,r5
    6fb4:	2940038f 	ldh	r5,14(r5)
    6fb8:	dfc00115 	stw	ra,4(sp)
    6fbc:	00075540 	call	7554 <_read_r>
    6fc0:	1007883a 	mov	r3,r2
    6fc4:	10000816 	blt	r2,zero,6fe8 <__sread+0x40>
    6fc8:	80801417 	ldw	r2,80(r16)
    6fcc:	10c5883a 	add	r2,r2,r3
    6fd0:	80801415 	stw	r2,80(r16)
    6fd4:	1805883a 	mov	r2,r3
    6fd8:	dfc00117 	ldw	ra,4(sp)
    6fdc:	dc000017 	ldw	r16,0(sp)
    6fe0:	dec00204 	addi	sp,sp,8
    6fe4:	f800283a 	ret
    6fe8:	8080030b 	ldhu	r2,12(r16)
    6fec:	10bbffcc 	andi	r2,r2,61439
    6ff0:	8080030d 	sth	r2,12(r16)
    6ff4:	1805883a 	mov	r2,r3
    6ff8:	dfc00117 	ldw	ra,4(sp)
    6ffc:	dc000017 	ldw	r16,0(sp)
    7000:	dec00204 	addi	sp,sp,8
    7004:	f800283a 	ret

00007008 <strcmp>:
    7008:	2144b03a 	or	r2,r4,r5
    700c:	108000cc 	andi	r2,r2,3
    7010:	10001d1e 	bne	r2,zero,7088 <strcmp+0x80>
    7014:	200f883a 	mov	r7,r4
    7018:	28800017 	ldw	r2,0(r5)
    701c:	21000017 	ldw	r4,0(r4)
    7020:	280d883a 	mov	r6,r5
    7024:	2080161e 	bne	r4,r2,7080 <strcmp+0x78>
    7028:	023fbff4 	movhi	r8,65279
    702c:	423fbfc4 	addi	r8,r8,-257
    7030:	2207883a 	add	r3,r4,r8
    7034:	01602074 	movhi	r5,32897
    7038:	29602004 	addi	r5,r5,-32640
    703c:	1946703a 	and	r3,r3,r5
    7040:	0104303a 	nor	r2,zero,r4
    7044:	10c4703a 	and	r2,r2,r3
    7048:	10001c1e 	bne	r2,zero,70bc <strcmp+0xb4>
    704c:	4013883a 	mov	r9,r8
    7050:	2811883a 	mov	r8,r5
    7054:	00000106 	br	705c <strcmp+0x54>
    7058:	1800181e 	bne	r3,zero,70bc <strcmp+0xb4>
    705c:	39c00104 	addi	r7,r7,4
    7060:	39000017 	ldw	r4,0(r7)
    7064:	31800104 	addi	r6,r6,4
    7068:	31400017 	ldw	r5,0(r6)
    706c:	2245883a 	add	r2,r4,r9
    7070:	1204703a 	and	r2,r2,r8
    7074:	0106303a 	nor	r3,zero,r4
    7078:	1886703a 	and	r3,r3,r2
    707c:	217ff626 	beq	r4,r5,7058 <strcmp+0x50>
    7080:	3809883a 	mov	r4,r7
    7084:	300b883a 	mov	r5,r6
    7088:	20c00007 	ldb	r3,0(r4)
    708c:	1800051e 	bne	r3,zero,70a4 <strcmp+0x9c>
    7090:	00000606 	br	70ac <strcmp+0xa4>
    7094:	21000044 	addi	r4,r4,1
    7098:	20c00007 	ldb	r3,0(r4)
    709c:	29400044 	addi	r5,r5,1
    70a0:	18000226 	beq	r3,zero,70ac <strcmp+0xa4>
    70a4:	28800007 	ldb	r2,0(r5)
    70a8:	18bffa26 	beq	r3,r2,7094 <strcmp+0x8c>
    70ac:	20c00003 	ldbu	r3,0(r4)
    70b0:	28800003 	ldbu	r2,0(r5)
    70b4:	1885c83a 	sub	r2,r3,r2
    70b8:	f800283a 	ret
    70bc:	0005883a 	mov	r2,zero
    70c0:	f800283a 	ret

000070c4 <strlen>:
    70c4:	208000cc 	andi	r2,r4,3
    70c8:	2011883a 	mov	r8,r4
    70cc:	1000161e 	bne	r2,zero,7128 <strlen+0x64>
    70d0:	20c00017 	ldw	r3,0(r4)
    70d4:	017fbff4 	movhi	r5,65279
    70d8:	297fbfc4 	addi	r5,r5,-257
    70dc:	01e02074 	movhi	r7,32897
    70e0:	39e02004 	addi	r7,r7,-32640
    70e4:	1945883a 	add	r2,r3,r5
    70e8:	11c4703a 	and	r2,r2,r7
    70ec:	00c6303a 	nor	r3,zero,r3
    70f0:	1886703a 	and	r3,r3,r2
    70f4:	18000c1e 	bne	r3,zero,7128 <strlen+0x64>
    70f8:	280d883a 	mov	r6,r5
    70fc:	380b883a 	mov	r5,r7
    7100:	21000104 	addi	r4,r4,4
    7104:	20800017 	ldw	r2,0(r4)
    7108:	1187883a 	add	r3,r2,r6
    710c:	1946703a 	and	r3,r3,r5
    7110:	0084303a 	nor	r2,zero,r2
    7114:	10c4703a 	and	r2,r2,r3
    7118:	103ff926 	beq	r2,zero,7100 <strlen+0x3c>
    711c:	20800007 	ldb	r2,0(r4)
    7120:	10000326 	beq	r2,zero,7130 <strlen+0x6c>
    7124:	21000044 	addi	r4,r4,1
    7128:	20800007 	ldb	r2,0(r4)
    712c:	103ffd1e 	bne	r2,zero,7124 <strlen+0x60>
    7130:	2205c83a 	sub	r2,r4,r8
    7134:	f800283a 	ret

00007138 <_write_r>:
    7138:	defffd04 	addi	sp,sp,-12
    713c:	dc000015 	stw	r16,0(sp)
    7140:	04000074 	movhi	r16,1
    7144:	8402b804 	addi	r16,r16,2784
    7148:	dc400115 	stw	r17,4(sp)
    714c:	80000015 	stw	zero,0(r16)
    7150:	2023883a 	mov	r17,r4
    7154:	2809883a 	mov	r4,r5
    7158:	300b883a 	mov	r5,r6
    715c:	380d883a 	mov	r6,r7
    7160:	dfc00215 	stw	ra,8(sp)
    7164:	000a35c0 	call	a35c <write>
    7168:	1007883a 	mov	r3,r2
    716c:	00bfffc4 	movi	r2,-1
    7170:	18800626 	beq	r3,r2,718c <_write_r+0x54>
    7174:	1805883a 	mov	r2,r3
    7178:	dfc00217 	ldw	ra,8(sp)
    717c:	dc400117 	ldw	r17,4(sp)
    7180:	dc000017 	ldw	r16,0(sp)
    7184:	dec00304 	addi	sp,sp,12
    7188:	f800283a 	ret
    718c:	80800017 	ldw	r2,0(r16)
    7190:	103ff826 	beq	r2,zero,7174 <_write_r+0x3c>
    7194:	88800015 	stw	r2,0(r17)
    7198:	1805883a 	mov	r2,r3
    719c:	dfc00217 	ldw	ra,8(sp)
    71a0:	dc400117 	ldw	r17,4(sp)
    71a4:	dc000017 	ldw	r16,0(sp)
    71a8:	dec00304 	addi	sp,sp,12
    71ac:	f800283a 	ret

000071b0 <_calloc_r>:
    71b0:	298b383a 	mul	r5,r5,r6
    71b4:	defffe04 	addi	sp,sp,-8
    71b8:	dc000015 	stw	r16,0(sp)
    71bc:	dfc00115 	stw	ra,4(sp)
    71c0:	0004db80 	call	4db8 <_malloc_r>
    71c4:	1021883a 	mov	r16,r2
    71c8:	01c00904 	movi	r7,36
    71cc:	10000d26 	beq	r2,zero,7204 <_calloc_r+0x54>
    71d0:	10ffff17 	ldw	r3,-4(r2)
    71d4:	1009883a 	mov	r4,r2
    71d8:	00bfff04 	movi	r2,-4
    71dc:	1886703a 	and	r3,r3,r2
    71e0:	1887883a 	add	r3,r3,r2
    71e4:	180d883a 	mov	r6,r3
    71e8:	000b883a 	mov	r5,zero
    71ec:	38c01736 	bltu	r7,r3,724c <_calloc_r+0x9c>
    71f0:	008004c4 	movi	r2,19
    71f4:	10c00836 	bltu	r2,r3,7218 <_calloc_r+0x68>
    71f8:	20000215 	stw	zero,8(r4)
    71fc:	20000015 	stw	zero,0(r4)
    7200:	20000115 	stw	zero,4(r4)
    7204:	8005883a 	mov	r2,r16
    7208:	dfc00117 	ldw	ra,4(sp)
    720c:	dc000017 	ldw	r16,0(sp)
    7210:	dec00204 	addi	sp,sp,8
    7214:	f800283a 	ret
    7218:	008006c4 	movi	r2,27
    721c:	80000015 	stw	zero,0(r16)
    7220:	80000115 	stw	zero,4(r16)
    7224:	81000204 	addi	r4,r16,8
    7228:	10fff32e 	bgeu	r2,r3,71f8 <_calloc_r+0x48>
    722c:	80000215 	stw	zero,8(r16)
    7230:	80000315 	stw	zero,12(r16)
    7234:	81000404 	addi	r4,r16,16
    7238:	19ffef1e 	bne	r3,r7,71f8 <_calloc_r+0x48>
    723c:	81000604 	addi	r4,r16,24
    7240:	80000415 	stw	zero,16(r16)
    7244:	80000515 	stw	zero,20(r16)
    7248:	003feb06 	br	71f8 <_calloc_r+0x48>
    724c:	000575c0 	call	575c <memset>
    7250:	8005883a 	mov	r2,r16
    7254:	dfc00117 	ldw	ra,4(sp)
    7258:	dc000017 	ldw	r16,0(sp)
    725c:	dec00204 	addi	sp,sp,8
    7260:	f800283a 	ret

00007264 <_close_r>:
    7264:	defffd04 	addi	sp,sp,-12
    7268:	dc000015 	stw	r16,0(sp)
    726c:	04000074 	movhi	r16,1
    7270:	8402b804 	addi	r16,r16,2784
    7274:	dc400115 	stw	r17,4(sp)
    7278:	80000015 	stw	zero,0(r16)
    727c:	2023883a 	mov	r17,r4
    7280:	2809883a 	mov	r4,r5
    7284:	dfc00215 	stw	ra,8(sp)
    7288:	00099fc0 	call	99fc <close>
    728c:	1007883a 	mov	r3,r2
    7290:	00bfffc4 	movi	r2,-1
    7294:	18800626 	beq	r3,r2,72b0 <_close_r+0x4c>
    7298:	1805883a 	mov	r2,r3
    729c:	dfc00217 	ldw	ra,8(sp)
    72a0:	dc400117 	ldw	r17,4(sp)
    72a4:	dc000017 	ldw	r16,0(sp)
    72a8:	dec00304 	addi	sp,sp,12
    72ac:	f800283a 	ret
    72b0:	80800017 	ldw	r2,0(r16)
    72b4:	103ff826 	beq	r2,zero,7298 <_close_r+0x34>
    72b8:	88800015 	stw	r2,0(r17)
    72bc:	1805883a 	mov	r2,r3
    72c0:	dfc00217 	ldw	ra,8(sp)
    72c4:	dc400117 	ldw	r17,4(sp)
    72c8:	dc000017 	ldw	r16,0(sp)
    72cc:	dec00304 	addi	sp,sp,12
    72d0:	f800283a 	ret

000072d4 <_fclose_r>:
    72d4:	defffc04 	addi	sp,sp,-16
    72d8:	dc400115 	stw	r17,4(sp)
    72dc:	dc000015 	stw	r16,0(sp)
    72e0:	dfc00315 	stw	ra,12(sp)
    72e4:	dc800215 	stw	r18,8(sp)
    72e8:	2821883a 	mov	r16,r5
    72ec:	2023883a 	mov	r17,r4
    72f0:	28002926 	beq	r5,zero,7398 <_fclose_r+0xc4>
    72f4:	0003e9c0 	call	3e9c <__sfp_lock_acquire>
    72f8:	88000226 	beq	r17,zero,7304 <_fclose_r+0x30>
    72fc:	88800e17 	ldw	r2,56(r17)
    7300:	10002d26 	beq	r2,zero,73b8 <_fclose_r+0xe4>
    7304:	8080030f 	ldh	r2,12(r16)
    7308:	10002226 	beq	r2,zero,7394 <_fclose_r+0xc0>
    730c:	8809883a 	mov	r4,r17
    7310:	800b883a 	mov	r5,r16
    7314:	0003c140 	call	3c14 <_fflush_r>
    7318:	1025883a 	mov	r18,r2
    731c:	80800b17 	ldw	r2,44(r16)
    7320:	10000426 	beq	r2,zero,7334 <_fclose_r+0x60>
    7324:	81400717 	ldw	r5,28(r16)
    7328:	8809883a 	mov	r4,r17
    732c:	103ee83a 	callr	r2
    7330:	10002a16 	blt	r2,zero,73dc <_fclose_r+0x108>
    7334:	8080030b 	ldhu	r2,12(r16)
    7338:	1080200c 	andi	r2,r2,128
    733c:	1000231e 	bne	r2,zero,73cc <_fclose_r+0xf8>
    7340:	81400c17 	ldw	r5,48(r16)
    7344:	28000526 	beq	r5,zero,735c <_fclose_r+0x88>
    7348:	80801004 	addi	r2,r16,64
    734c:	28800226 	beq	r5,r2,7358 <_fclose_r+0x84>
    7350:	8809883a 	mov	r4,r17
    7354:	00042300 	call	4230 <_free_r>
    7358:	80000c15 	stw	zero,48(r16)
    735c:	81401117 	ldw	r5,68(r16)
    7360:	28000326 	beq	r5,zero,7370 <_fclose_r+0x9c>
    7364:	8809883a 	mov	r4,r17
    7368:	00042300 	call	4230 <_free_r>
    736c:	80001115 	stw	zero,68(r16)
    7370:	8000030d 	sth	zero,12(r16)
    7374:	0003ea00 	call	3ea0 <__sfp_lock_release>
    7378:	9005883a 	mov	r2,r18
    737c:	dfc00317 	ldw	ra,12(sp)
    7380:	dc800217 	ldw	r18,8(sp)
    7384:	dc400117 	ldw	r17,4(sp)
    7388:	dc000017 	ldw	r16,0(sp)
    738c:	dec00404 	addi	sp,sp,16
    7390:	f800283a 	ret
    7394:	0003ea00 	call	3ea0 <__sfp_lock_release>
    7398:	0025883a 	mov	r18,zero
    739c:	9005883a 	mov	r2,r18
    73a0:	dfc00317 	ldw	ra,12(sp)
    73a4:	dc800217 	ldw	r18,8(sp)
    73a8:	dc400117 	ldw	r17,4(sp)
    73ac:	dc000017 	ldw	r16,0(sp)
    73b0:	dec00404 	addi	sp,sp,16
    73b4:	f800283a 	ret
    73b8:	8809883a 	mov	r4,r17
    73bc:	0003eac0 	call	3eac <__sinit>
    73c0:	8080030f 	ldh	r2,12(r16)
    73c4:	103fd11e 	bne	r2,zero,730c <_fclose_r+0x38>
    73c8:	003ff206 	br	7394 <_fclose_r+0xc0>
    73cc:	81400417 	ldw	r5,16(r16)
    73d0:	8809883a 	mov	r4,r17
    73d4:	00042300 	call	4230 <_free_r>
    73d8:	003fd906 	br	7340 <_fclose_r+0x6c>
    73dc:	04bfffc4 	movi	r18,-1
    73e0:	003fd406 	br	7334 <_fclose_r+0x60>

000073e4 <fclose>:
    73e4:	00800074 	movhi	r2,1
    73e8:	10bba904 	addi	r2,r2,-4444
    73ec:	200b883a 	mov	r5,r4
    73f0:	11000017 	ldw	r4,0(r2)
    73f4:	00072d41 	jmpi	72d4 <_fclose_r>

000073f8 <_fstat_r>:
    73f8:	defffd04 	addi	sp,sp,-12
    73fc:	dc000015 	stw	r16,0(sp)
    7400:	04000074 	movhi	r16,1
    7404:	8402b804 	addi	r16,r16,2784
    7408:	dc400115 	stw	r17,4(sp)
    740c:	80000015 	stw	zero,0(r16)
    7410:	2023883a 	mov	r17,r4
    7414:	2809883a 	mov	r4,r5
    7418:	300b883a 	mov	r5,r6
    741c:	dfc00215 	stw	ra,8(sp)
    7420:	0009b840 	call	9b84 <fstat>
    7424:	1007883a 	mov	r3,r2
    7428:	00bfffc4 	movi	r2,-1
    742c:	18800626 	beq	r3,r2,7448 <_fstat_r+0x50>
    7430:	1805883a 	mov	r2,r3
    7434:	dfc00217 	ldw	ra,8(sp)
    7438:	dc400117 	ldw	r17,4(sp)
    743c:	dc000017 	ldw	r16,0(sp)
    7440:	dec00304 	addi	sp,sp,12
    7444:	f800283a 	ret
    7448:	80800017 	ldw	r2,0(r16)
    744c:	103ff826 	beq	r2,zero,7430 <_fstat_r+0x38>
    7450:	88800015 	stw	r2,0(r17)
    7454:	1805883a 	mov	r2,r3
    7458:	dfc00217 	ldw	ra,8(sp)
    745c:	dc400117 	ldw	r17,4(sp)
    7460:	dc000017 	ldw	r16,0(sp)
    7464:	dec00304 	addi	sp,sp,12
    7468:	f800283a 	ret

0000746c <_isatty_r>:
    746c:	defffd04 	addi	sp,sp,-12
    7470:	dc000015 	stw	r16,0(sp)
    7474:	04000074 	movhi	r16,1
    7478:	8402b804 	addi	r16,r16,2784
    747c:	dc400115 	stw	r17,4(sp)
    7480:	80000015 	stw	zero,0(r16)
    7484:	2023883a 	mov	r17,r4
    7488:	2809883a 	mov	r4,r5
    748c:	dfc00215 	stw	ra,8(sp)
    7490:	0009cb80 	call	9cb8 <isatty>
    7494:	1007883a 	mov	r3,r2
    7498:	00bfffc4 	movi	r2,-1
    749c:	18800626 	beq	r3,r2,74b8 <_isatty_r+0x4c>
    74a0:	1805883a 	mov	r2,r3
    74a4:	dfc00217 	ldw	ra,8(sp)
    74a8:	dc400117 	ldw	r17,4(sp)
    74ac:	dc000017 	ldw	r16,0(sp)
    74b0:	dec00304 	addi	sp,sp,12
    74b4:	f800283a 	ret
    74b8:	80800017 	ldw	r2,0(r16)
    74bc:	103ff826 	beq	r2,zero,74a0 <_isatty_r+0x34>
    74c0:	88800015 	stw	r2,0(r17)
    74c4:	1805883a 	mov	r2,r3
    74c8:	dfc00217 	ldw	ra,8(sp)
    74cc:	dc400117 	ldw	r17,4(sp)
    74d0:	dc000017 	ldw	r16,0(sp)
    74d4:	dec00304 	addi	sp,sp,12
    74d8:	f800283a 	ret

000074dc <_lseek_r>:
    74dc:	defffd04 	addi	sp,sp,-12
    74e0:	dc000015 	stw	r16,0(sp)
    74e4:	04000074 	movhi	r16,1
    74e8:	8402b804 	addi	r16,r16,2784
    74ec:	dc400115 	stw	r17,4(sp)
    74f0:	80000015 	stw	zero,0(r16)
    74f4:	2023883a 	mov	r17,r4
    74f8:	2809883a 	mov	r4,r5
    74fc:	300b883a 	mov	r5,r6
    7500:	380d883a 	mov	r6,r7
    7504:	dfc00215 	stw	ra,8(sp)
    7508:	0009ec40 	call	9ec4 <lseek>
    750c:	1007883a 	mov	r3,r2
    7510:	00bfffc4 	movi	r2,-1
    7514:	18800626 	beq	r3,r2,7530 <_lseek_r+0x54>
    7518:	1805883a 	mov	r2,r3
    751c:	dfc00217 	ldw	ra,8(sp)
    7520:	dc400117 	ldw	r17,4(sp)
    7524:	dc000017 	ldw	r16,0(sp)
    7528:	dec00304 	addi	sp,sp,12
    752c:	f800283a 	ret
    7530:	80800017 	ldw	r2,0(r16)
    7534:	103ff826 	beq	r2,zero,7518 <_lseek_r+0x3c>
    7538:	88800015 	stw	r2,0(r17)
    753c:	1805883a 	mov	r2,r3
    7540:	dfc00217 	ldw	ra,8(sp)
    7544:	dc400117 	ldw	r17,4(sp)
    7548:	dc000017 	ldw	r16,0(sp)
    754c:	dec00304 	addi	sp,sp,12
    7550:	f800283a 	ret

00007554 <_read_r>:
    7554:	defffd04 	addi	sp,sp,-12
    7558:	dc000015 	stw	r16,0(sp)
    755c:	04000074 	movhi	r16,1
    7560:	8402b804 	addi	r16,r16,2784
    7564:	dc400115 	stw	r17,4(sp)
    7568:	80000015 	stw	zero,0(r16)
    756c:	2023883a 	mov	r17,r4
    7570:	2809883a 	mov	r4,r5
    7574:	300b883a 	mov	r5,r6
    7578:	380d883a 	mov	r6,r7
    757c:	dfc00215 	stw	ra,8(sp)
    7580:	000a0c00 	call	a0c0 <read>
    7584:	1007883a 	mov	r3,r2
    7588:	00bfffc4 	movi	r2,-1
    758c:	18800626 	beq	r3,r2,75a8 <_read_r+0x54>
    7590:	1805883a 	mov	r2,r3
    7594:	dfc00217 	ldw	ra,8(sp)
    7598:	dc400117 	ldw	r17,4(sp)
    759c:	dc000017 	ldw	r16,0(sp)
    75a0:	dec00304 	addi	sp,sp,12
    75a4:	f800283a 	ret
    75a8:	80800017 	ldw	r2,0(r16)
    75ac:	103ff826 	beq	r2,zero,7590 <_read_r+0x3c>
    75b0:	88800015 	stw	r2,0(r17)
    75b4:	1805883a 	mov	r2,r3
    75b8:	dfc00217 	ldw	ra,8(sp)
    75bc:	dc400117 	ldw	r17,4(sp)
    75c0:	dc000017 	ldw	r16,0(sp)
    75c4:	dec00304 	addi	sp,sp,12
    75c8:	f800283a 	ret

000075cc <__udivdi3>:
    75cc:	defff004 	addi	sp,sp,-64
    75d0:	2005883a 	mov	r2,r4
    75d4:	3011883a 	mov	r8,r6
    75d8:	df000e15 	stw	fp,56(sp)
    75dc:	dd000a15 	stw	r20,40(sp)
    75e0:	dc000615 	stw	r16,24(sp)
    75e4:	dfc00f15 	stw	ra,60(sp)
    75e8:	ddc00d15 	stw	r23,52(sp)
    75ec:	dd800c15 	stw	r22,48(sp)
    75f0:	dd400b15 	stw	r21,44(sp)
    75f4:	dcc00915 	stw	r19,36(sp)
    75f8:	dc800815 	stw	r18,32(sp)
    75fc:	dc400715 	stw	r17,28(sp)
    7600:	4021883a 	mov	r16,r8
    7604:	1039883a 	mov	fp,r2
    7608:	2829883a 	mov	r20,r5
    760c:	38003b1e 	bne	r7,zero,76fc <__udivdi3+0x130>
    7610:	2a005c36 	bltu	r5,r8,7784 <__udivdi3+0x1b8>
    7614:	4000a626 	beq	r8,zero,78b0 <__udivdi3+0x2e4>
    7618:	00bfffd4 	movui	r2,65535
    761c:	14009e36 	bltu	r2,r16,7898 <__udivdi3+0x2cc>
    7620:	00803fc4 	movi	r2,255
    7624:	14013d36 	bltu	r2,r16,7b1c <__udivdi3+0x550>
    7628:	000b883a 	mov	r5,zero
    762c:	0005883a 	mov	r2,zero
    7630:	8084d83a 	srl	r2,r16,r2
    7634:	01000074 	movhi	r4,1
    7638:	21346b04 	addi	r4,r4,-11860
    763c:	01800804 	movi	r6,32
    7640:	1105883a 	add	r2,r2,r4
    7644:	10c00003 	ldbu	r3,0(r2)
    7648:	28c7883a 	add	r3,r5,r3
    764c:	30edc83a 	sub	r22,r6,r3
    7650:	b000ee1e 	bne	r22,zero,7a0c <__udivdi3+0x440>
    7654:	802ad43a 	srli	r21,r16,16
    7658:	00800044 	movi	r2,1
    765c:	a423c83a 	sub	r17,r20,r16
    7660:	85ffffcc 	andi	r23,r16,65535
    7664:	d8800315 	stw	r2,12(sp)
    7668:	8809883a 	mov	r4,r17
    766c:	a80b883a 	mov	r5,r21
    7670:	00093c00 	call	93c0 <__udivsi3>
    7674:	8809883a 	mov	r4,r17
    7678:	a80b883a 	mov	r5,r21
    767c:	102d883a 	mov	r22,r2
    7680:	00093c80 	call	93c8 <__umodsi3>
    7684:	1004943a 	slli	r2,r2,16
    7688:	e006d43a 	srli	r3,fp,16
    768c:	bda3383a 	mul	r17,r23,r22
    7690:	10c4b03a 	or	r2,r2,r3
    7694:	1440042e 	bgeu	r2,r17,76a8 <__udivdi3+0xdc>
    7698:	1405883a 	add	r2,r2,r16
    769c:	b5bfffc4 	addi	r22,r22,-1
    76a0:	14000136 	bltu	r2,r16,76a8 <__udivdi3+0xdc>
    76a4:	14413d36 	bltu	r2,r17,7b9c <__udivdi3+0x5d0>
    76a8:	1463c83a 	sub	r17,r2,r17
    76ac:	8809883a 	mov	r4,r17
    76b0:	a80b883a 	mov	r5,r21
    76b4:	00093c00 	call	93c0 <__udivsi3>
    76b8:	8809883a 	mov	r4,r17
    76bc:	a80b883a 	mov	r5,r21
    76c0:	1029883a 	mov	r20,r2
    76c4:	00093c80 	call	93c8 <__umodsi3>
    76c8:	1004943a 	slli	r2,r2,16
    76cc:	bd09383a 	mul	r4,r23,r20
    76d0:	e0ffffcc 	andi	r3,fp,65535
    76d4:	10c4b03a 	or	r2,r2,r3
    76d8:	1100042e 	bgeu	r2,r4,76ec <__udivdi3+0x120>
    76dc:	8085883a 	add	r2,r16,r2
    76e0:	a53fffc4 	addi	r20,r20,-1
    76e4:	14000136 	bltu	r2,r16,76ec <__udivdi3+0x120>
    76e8:	11012036 	bltu	r2,r4,7b6c <__udivdi3+0x5a0>
    76ec:	b004943a 	slli	r2,r22,16
    76f0:	d9000317 	ldw	r4,12(sp)
    76f4:	a084b03a 	or	r2,r20,r2
    76f8:	00001506 	br	7750 <__udivdi3+0x184>
    76fc:	380d883a 	mov	r6,r7
    7700:	29c06236 	bltu	r5,r7,788c <__udivdi3+0x2c0>
    7704:	00bfffd4 	movui	r2,65535
    7708:	11c05a36 	bltu	r2,r7,7874 <__udivdi3+0x2a8>
    770c:	00803fc4 	movi	r2,255
    7710:	11c0fc36 	bltu	r2,r7,7b04 <__udivdi3+0x538>
    7714:	000b883a 	mov	r5,zero
    7718:	0005883a 	mov	r2,zero
    771c:	3084d83a 	srl	r2,r6,r2
    7720:	01000074 	movhi	r4,1
    7724:	21346b04 	addi	r4,r4,-11860
    7728:	01c00804 	movi	r7,32
    772c:	1105883a 	add	r2,r2,r4
    7730:	10c00003 	ldbu	r3,0(r2)
    7734:	28c7883a 	add	r3,r5,r3
    7738:	38efc83a 	sub	r23,r7,r3
    773c:	b800691e 	bne	r23,zero,78e4 <__udivdi3+0x318>
    7740:	35000136 	bltu	r6,r20,7748 <__udivdi3+0x17c>
    7744:	e4005136 	bltu	fp,r16,788c <__udivdi3+0x2c0>
    7748:	00800044 	movi	r2,1
    774c:	0009883a 	mov	r4,zero
    7750:	2007883a 	mov	r3,r4
    7754:	dfc00f17 	ldw	ra,60(sp)
    7758:	df000e17 	ldw	fp,56(sp)
    775c:	ddc00d17 	ldw	r23,52(sp)
    7760:	dd800c17 	ldw	r22,48(sp)
    7764:	dd400b17 	ldw	r21,44(sp)
    7768:	dd000a17 	ldw	r20,40(sp)
    776c:	dcc00917 	ldw	r19,36(sp)
    7770:	dc800817 	ldw	r18,32(sp)
    7774:	dc400717 	ldw	r17,28(sp)
    7778:	dc000617 	ldw	r16,24(sp)
    777c:	dec01004 	addi	sp,sp,64
    7780:	f800283a 	ret
    7784:	00bfffd4 	movui	r2,65535
    7788:	12005036 	bltu	r2,r8,78cc <__udivdi3+0x300>
    778c:	00803fc4 	movi	r2,255
    7790:	1200e836 	bltu	r2,r8,7b34 <__udivdi3+0x568>
    7794:	000b883a 	mov	r5,zero
    7798:	0005883a 	mov	r2,zero
    779c:	8084d83a 	srl	r2,r16,r2
    77a0:	01000074 	movhi	r4,1
    77a4:	21346b04 	addi	r4,r4,-11860
    77a8:	01800804 	movi	r6,32
    77ac:	1105883a 	add	r2,r2,r4
    77b0:	10c00003 	ldbu	r3,0(r2)
    77b4:	28c7883a 	add	r3,r5,r3
    77b8:	30cbc83a 	sub	r5,r6,r3
    77bc:	28000626 	beq	r5,zero,77d8 <__udivdi3+0x20c>
    77c0:	3145c83a 	sub	r2,r6,r5
    77c4:	e084d83a 	srl	r2,fp,r2
    77c8:	a146983a 	sll	r3,r20,r5
    77cc:	e178983a 	sll	fp,fp,r5
    77d0:	8160983a 	sll	r16,r16,r5
    77d4:	18a8b03a 	or	r20,r3,r2
    77d8:	802ad43a 	srli	r21,r16,16
    77dc:	a009883a 	mov	r4,r20
    77e0:	85ffffcc 	andi	r23,r16,65535
    77e4:	a80b883a 	mov	r5,r21
    77e8:	00093c00 	call	93c0 <__udivsi3>
    77ec:	a009883a 	mov	r4,r20
    77f0:	a80b883a 	mov	r5,r21
    77f4:	102d883a 	mov	r22,r2
    77f8:	00093c80 	call	93c8 <__umodsi3>
    77fc:	1004943a 	slli	r2,r2,16
    7800:	e006d43a 	srli	r3,fp,16
    7804:	bda3383a 	mul	r17,r23,r22
    7808:	10c4b03a 	or	r2,r2,r3
    780c:	1440042e 	bgeu	r2,r17,7820 <__udivdi3+0x254>
    7810:	1405883a 	add	r2,r2,r16
    7814:	b5bfffc4 	addi	r22,r22,-1
    7818:	14000136 	bltu	r2,r16,7820 <__udivdi3+0x254>
    781c:	1440d536 	bltu	r2,r17,7b74 <__udivdi3+0x5a8>
    7820:	1463c83a 	sub	r17,r2,r17
    7824:	8809883a 	mov	r4,r17
    7828:	a80b883a 	mov	r5,r21
    782c:	00093c00 	call	93c0 <__udivsi3>
    7830:	8809883a 	mov	r4,r17
    7834:	a80b883a 	mov	r5,r21
    7838:	1029883a 	mov	r20,r2
    783c:	00093c80 	call	93c8 <__umodsi3>
    7840:	1004943a 	slli	r2,r2,16
    7844:	bd09383a 	mul	r4,r23,r20
    7848:	e0ffffcc 	andi	r3,fp,65535
    784c:	10c4b03a 	or	r2,r2,r3
    7850:	1100042e 	bgeu	r2,r4,7864 <__udivdi3+0x298>
    7854:	8085883a 	add	r2,r16,r2
    7858:	a53fffc4 	addi	r20,r20,-1
    785c:	14000136 	bltu	r2,r16,7864 <__udivdi3+0x298>
    7860:	1100c736 	bltu	r2,r4,7b80 <__udivdi3+0x5b4>
    7864:	b004943a 	slli	r2,r22,16
    7868:	0009883a 	mov	r4,zero
    786c:	a084b03a 	or	r2,r20,r2
    7870:	003fb706 	br	7750 <__udivdi3+0x184>
    7874:	00804034 	movhi	r2,256
    7878:	10bfffc4 	addi	r2,r2,-1
    787c:	11c0a436 	bltu	r2,r7,7b10 <__udivdi3+0x544>
    7880:	01400404 	movi	r5,16
    7884:	2805883a 	mov	r2,r5
    7888:	003fa406 	br	771c <__udivdi3+0x150>
    788c:	0005883a 	mov	r2,zero
    7890:	0009883a 	mov	r4,zero
    7894:	003fae06 	br	7750 <__udivdi3+0x184>
    7898:	00804034 	movhi	r2,256
    789c:	10bfffc4 	addi	r2,r2,-1
    78a0:	1400a136 	bltu	r2,r16,7b28 <__udivdi3+0x55c>
    78a4:	01400404 	movi	r5,16
    78a8:	2805883a 	mov	r2,r5
    78ac:	003f6006 	br	7630 <__udivdi3+0x64>
    78b0:	01000044 	movi	r4,1
    78b4:	000b883a 	mov	r5,zero
    78b8:	00093c00 	call	93c0 <__udivsi3>
    78bc:	1021883a 	mov	r16,r2
    78c0:	00bfffd4 	movui	r2,65535
    78c4:	143ff436 	bltu	r2,r16,7898 <__udivdi3+0x2cc>
    78c8:	003f5506 	br	7620 <__udivdi3+0x54>
    78cc:	00804034 	movhi	r2,256
    78d0:	10bfffc4 	addi	r2,r2,-1
    78d4:	12009a36 	bltu	r2,r8,7b40 <__udivdi3+0x574>
    78d8:	01400404 	movi	r5,16
    78dc:	2805883a 	mov	r2,r5
    78e0:	003fae06 	br	779c <__udivdi3+0x1d0>
    78e4:	3dc5c83a 	sub	r2,r7,r23
    78e8:	35c8983a 	sll	r4,r6,r23
    78ec:	8086d83a 	srl	r3,r16,r2
    78f0:	a0a2d83a 	srl	r17,r20,r2
    78f4:	e084d83a 	srl	r2,fp,r2
    78f8:	20eab03a 	or	r21,r4,r3
    78fc:	a82cd43a 	srli	r22,r21,16
    7900:	a5c6983a 	sll	r3,r20,r23
    7904:	8809883a 	mov	r4,r17
    7908:	b00b883a 	mov	r5,r22
    790c:	1886b03a 	or	r3,r3,r2
    7910:	d8c00215 	stw	r3,8(sp)
    7914:	00093c00 	call	93c0 <__udivsi3>
    7918:	8809883a 	mov	r4,r17
    791c:	b00b883a 	mov	r5,r22
    7920:	1029883a 	mov	r20,r2
    7924:	00093c80 	call	93c8 <__umodsi3>
    7928:	a8ffffcc 	andi	r3,r21,65535
    792c:	d8c00515 	stw	r3,20(sp)
    7930:	d9000217 	ldw	r4,8(sp)
    7934:	d9400517 	ldw	r5,20(sp)
    7938:	1004943a 	slli	r2,r2,16
    793c:	2006d43a 	srli	r3,r4,16
    7940:	85e0983a 	sll	r16,r16,r23
    7944:	2d23383a 	mul	r17,r5,r20
    7948:	10c4b03a 	or	r2,r2,r3
    794c:	dc000015 	stw	r16,0(sp)
    7950:	1440032e 	bgeu	r2,r17,7960 <__udivdi3+0x394>
    7954:	1545883a 	add	r2,r2,r21
    7958:	a53fffc4 	addi	r20,r20,-1
    795c:	15407f2e 	bgeu	r2,r21,7b5c <__udivdi3+0x590>
    7960:	1463c83a 	sub	r17,r2,r17
    7964:	8809883a 	mov	r4,r17
    7968:	b00b883a 	mov	r5,r22
    796c:	00093c00 	call	93c0 <__udivsi3>
    7970:	8809883a 	mov	r4,r17
    7974:	b00b883a 	mov	r5,r22
    7978:	1021883a 	mov	r16,r2
    797c:	00093c80 	call	93c8 <__umodsi3>
    7980:	d8c00517 	ldw	r3,20(sp)
    7984:	d9000217 	ldw	r4,8(sp)
    7988:	1004943a 	slli	r2,r2,16
    798c:	1c0f383a 	mul	r7,r3,r16
    7990:	20ffffcc 	andi	r3,r4,65535
    7994:	10e2b03a 	or	r17,r2,r3
    7998:	89c0032e 	bgeu	r17,r7,79a8 <__udivdi3+0x3dc>
    799c:	8d63883a 	add	r17,r17,r21
    79a0:	843fffc4 	addi	r16,r16,-1
    79a4:	8d40692e 	bgeu	r17,r21,7b4c <__udivdi3+0x580>
    79a8:	a008943a 	slli	r4,r20,16
    79ac:	d9400017 	ldw	r5,0(sp)
    79b0:	89e3c83a 	sub	r17,r17,r7
    79b4:	8110b03a 	or	r8,r16,r4
    79b8:	280cd43a 	srli	r6,r5,16
    79bc:	28ffffcc 	andi	r3,r5,65535
    79c0:	40bfffcc 	andi	r2,r8,65535
    79c4:	400ad43a 	srli	r5,r8,16
    79c8:	10d3383a 	mul	r9,r2,r3
    79cc:	1185383a 	mul	r2,r2,r6
    79d0:	28c7383a 	mul	r3,r5,r3
    79d4:	4808d43a 	srli	r4,r9,16
    79d8:	298b383a 	mul	r5,r5,r6
    79dc:	10c5883a 	add	r2,r2,r3
    79e0:	2089883a 	add	r4,r4,r2
    79e4:	20c0022e 	bgeu	r4,r3,79f0 <__udivdi3+0x424>
    79e8:	00800074 	movhi	r2,1
    79ec:	288b883a 	add	r5,r5,r2
    79f0:	2004d43a 	srli	r2,r4,16
    79f4:	288b883a 	add	r5,r5,r2
    79f8:	89403f36 	bltu	r17,r5,7af8 <__udivdi3+0x52c>
    79fc:	89403926 	beq	r17,r5,7ae4 <__udivdi3+0x518>
    7a00:	4005883a 	mov	r2,r8
    7a04:	0009883a 	mov	r4,zero
    7a08:	003f5106 	br	7750 <__udivdi3+0x184>
    7a0c:	85a0983a 	sll	r16,r16,r22
    7a10:	3585c83a 	sub	r2,r6,r22
    7a14:	a0a2d83a 	srl	r17,r20,r2
    7a18:	802ad43a 	srli	r21,r16,16
    7a1c:	e084d83a 	srl	r2,fp,r2
    7a20:	a586983a 	sll	r3,r20,r22
    7a24:	8809883a 	mov	r4,r17
    7a28:	a80b883a 	mov	r5,r21
    7a2c:	1886b03a 	or	r3,r3,r2
    7a30:	d8c00115 	stw	r3,4(sp)
    7a34:	00093c00 	call	93c0 <__udivsi3>
    7a38:	8809883a 	mov	r4,r17
    7a3c:	a80b883a 	mov	r5,r21
    7a40:	d8800415 	stw	r2,16(sp)
    7a44:	00093c80 	call	93c8 <__umodsi3>
    7a48:	d9000117 	ldw	r4,4(sp)
    7a4c:	d9400417 	ldw	r5,16(sp)
    7a50:	1004943a 	slli	r2,r2,16
    7a54:	85ffffcc 	andi	r23,r16,65535
    7a58:	2006d43a 	srli	r3,r4,16
    7a5c:	b963383a 	mul	r17,r23,r5
    7a60:	10c4b03a 	or	r2,r2,r3
    7a64:	1440042e 	bgeu	r2,r17,7a78 <__udivdi3+0x4ac>
    7a68:	297fffc4 	addi	r5,r5,-1
    7a6c:	1405883a 	add	r2,r2,r16
    7a70:	d9400415 	stw	r5,16(sp)
    7a74:	1400442e 	bgeu	r2,r16,7b88 <__udivdi3+0x5bc>
    7a78:	1463c83a 	sub	r17,r2,r17
    7a7c:	8809883a 	mov	r4,r17
    7a80:	a80b883a 	mov	r5,r21
    7a84:	00093c00 	call	93c0 <__udivsi3>
    7a88:	8809883a 	mov	r4,r17
    7a8c:	a80b883a 	mov	r5,r21
    7a90:	1029883a 	mov	r20,r2
    7a94:	00093c80 	call	93c8 <__umodsi3>
    7a98:	d9400117 	ldw	r5,4(sp)
    7a9c:	1004943a 	slli	r2,r2,16
    7aa0:	bd09383a 	mul	r4,r23,r20
    7aa4:	28ffffcc 	andi	r3,r5,65535
    7aa8:	10c6b03a 	or	r3,r2,r3
    7aac:	1900062e 	bgeu	r3,r4,7ac8 <__udivdi3+0x4fc>
    7ab0:	1c07883a 	add	r3,r3,r16
    7ab4:	a53fffc4 	addi	r20,r20,-1
    7ab8:	1c000336 	bltu	r3,r16,7ac8 <__udivdi3+0x4fc>
    7abc:	1900022e 	bgeu	r3,r4,7ac8 <__udivdi3+0x4fc>
    7ac0:	a53fffc4 	addi	r20,r20,-1
    7ac4:	1c07883a 	add	r3,r3,r16
    7ac8:	d9400417 	ldw	r5,16(sp)
    7acc:	e5b8983a 	sll	fp,fp,r22
    7ad0:	1923c83a 	sub	r17,r3,r4
    7ad4:	2804943a 	slli	r2,r5,16
    7ad8:	a0a8b03a 	or	r20,r20,r2
    7adc:	dd000315 	stw	r20,12(sp)
    7ae0:	003ee106 	br	7668 <__udivdi3+0x9c>
    7ae4:	2004943a 	slli	r2,r4,16
    7ae8:	e5c8983a 	sll	r4,fp,r23
    7aec:	48ffffcc 	andi	r3,r9,65535
    7af0:	10c5883a 	add	r2,r2,r3
    7af4:	20bfc22e 	bgeu	r4,r2,7a00 <__udivdi3+0x434>
    7af8:	40bfffc4 	addi	r2,r8,-1
    7afc:	0009883a 	mov	r4,zero
    7b00:	003f1306 	br	7750 <__udivdi3+0x184>
    7b04:	01400204 	movi	r5,8
    7b08:	2805883a 	mov	r2,r5
    7b0c:	003f0306 	br	771c <__udivdi3+0x150>
    7b10:	01400604 	movi	r5,24
    7b14:	2805883a 	mov	r2,r5
    7b18:	003f0006 	br	771c <__udivdi3+0x150>
    7b1c:	01400204 	movi	r5,8
    7b20:	2805883a 	mov	r2,r5
    7b24:	003ec206 	br	7630 <__udivdi3+0x64>
    7b28:	01400604 	movi	r5,24
    7b2c:	2805883a 	mov	r2,r5
    7b30:	003ebf06 	br	7630 <__udivdi3+0x64>
    7b34:	01400204 	movi	r5,8
    7b38:	2805883a 	mov	r2,r5
    7b3c:	003f1706 	br	779c <__udivdi3+0x1d0>
    7b40:	01400604 	movi	r5,24
    7b44:	2805883a 	mov	r2,r5
    7b48:	003f1406 	br	779c <__udivdi3+0x1d0>
    7b4c:	89ff962e 	bgeu	r17,r7,79a8 <__udivdi3+0x3dc>
    7b50:	8d63883a 	add	r17,r17,r21
    7b54:	843fffc4 	addi	r16,r16,-1
    7b58:	003f9306 	br	79a8 <__udivdi3+0x3dc>
    7b5c:	147f802e 	bgeu	r2,r17,7960 <__udivdi3+0x394>
    7b60:	a53fffc4 	addi	r20,r20,-1
    7b64:	1545883a 	add	r2,r2,r21
    7b68:	003f7d06 	br	7960 <__udivdi3+0x394>
    7b6c:	a53fffc4 	addi	r20,r20,-1
    7b70:	003ede06 	br	76ec <__udivdi3+0x120>
    7b74:	b5bfffc4 	addi	r22,r22,-1
    7b78:	1405883a 	add	r2,r2,r16
    7b7c:	003f2806 	br	7820 <__udivdi3+0x254>
    7b80:	a53fffc4 	addi	r20,r20,-1
    7b84:	003f3706 	br	7864 <__udivdi3+0x298>
    7b88:	147fbb2e 	bgeu	r2,r17,7a78 <__udivdi3+0x4ac>
    7b8c:	297fffc4 	addi	r5,r5,-1
    7b90:	1405883a 	add	r2,r2,r16
    7b94:	d9400415 	stw	r5,16(sp)
    7b98:	003fb706 	br	7a78 <__udivdi3+0x4ac>
    7b9c:	b5bfffc4 	addi	r22,r22,-1
    7ba0:	1405883a 	add	r2,r2,r16
    7ba4:	003ec006 	br	76a8 <__udivdi3+0xdc>

00007ba8 <__umoddi3>:
    7ba8:	defff104 	addi	sp,sp,-60
    7bac:	dd800b15 	stw	r22,44(sp)
    7bb0:	dd000915 	stw	r20,36(sp)
    7bb4:	dc000515 	stw	r16,20(sp)
    7bb8:	dfc00e15 	stw	ra,56(sp)
    7bbc:	df000d15 	stw	fp,52(sp)
    7bc0:	ddc00c15 	stw	r23,48(sp)
    7bc4:	dd400a15 	stw	r21,40(sp)
    7bc8:	dcc00815 	stw	r19,32(sp)
    7bcc:	dc800715 	stw	r18,28(sp)
    7bd0:	dc400615 	stw	r17,24(sp)
    7bd4:	3021883a 	mov	r16,r6
    7bd8:	202d883a 	mov	r22,r4
    7bdc:	2829883a 	mov	r20,r5
    7be0:	38002b1e 	bne	r7,zero,7c90 <__umoddi3+0xe8>
    7be4:	29805036 	bltu	r5,r6,7d28 <__umoddi3+0x180>
    7be8:	30008a26 	beq	r6,zero,7e14 <__umoddi3+0x26c>
    7bec:	00bfffd4 	movui	r2,65535
    7bf0:	14008236 	bltu	r2,r16,7dfc <__umoddi3+0x254>
    7bf4:	00803fc4 	movi	r2,255
    7bf8:	14013636 	bltu	r2,r16,80d4 <__umoddi3+0x52c>
    7bfc:	000b883a 	mov	r5,zero
    7c00:	0005883a 	mov	r2,zero
    7c04:	8084d83a 	srl	r2,r16,r2
    7c08:	01000074 	movhi	r4,1
    7c0c:	21346b04 	addi	r4,r4,-11860
    7c10:	01800804 	movi	r6,32
    7c14:	1105883a 	add	r2,r2,r4
    7c18:	10c00003 	ldbu	r3,0(r2)
    7c1c:	28c7883a 	add	r3,r5,r3
    7c20:	30efc83a 	sub	r23,r6,r3
    7c24:	b800941e 	bne	r23,zero,7e78 <__umoddi3+0x2d0>
    7c28:	802ad43a 	srli	r21,r16,16
    7c2c:	a423c83a 	sub	r17,r20,r16
    7c30:	0039883a 	mov	fp,zero
    7c34:	853fffcc 	andi	r20,r16,65535
    7c38:	8809883a 	mov	r4,r17
    7c3c:	a80b883a 	mov	r5,r21
    7c40:	00093c00 	call	93c0 <__udivsi3>
    7c44:	8809883a 	mov	r4,r17
    7c48:	a80b883a 	mov	r5,r21
    7c4c:	a0a3383a 	mul	r17,r20,r2
    7c50:	00093c80 	call	93c8 <__umodsi3>
    7c54:	1004943a 	slli	r2,r2,16
    7c58:	b006d43a 	srli	r3,r22,16
    7c5c:	10c4b03a 	or	r2,r2,r3
    7c60:	1440032e 	bgeu	r2,r17,7c70 <__umoddi3+0xc8>
    7c64:	1405883a 	add	r2,r2,r16
    7c68:	14000136 	bltu	r2,r16,7c70 <__umoddi3+0xc8>
    7c6c:	14413536 	bltu	r2,r17,8144 <__umoddi3+0x59c>
    7c70:	1463c83a 	sub	r17,r2,r17
    7c74:	8809883a 	mov	r4,r17
    7c78:	a80b883a 	mov	r5,r21
    7c7c:	00093c00 	call	93c0 <__udivsi3>
    7c80:	8809883a 	mov	r4,r17
    7c84:	a0a3383a 	mul	r17,r20,r2
    7c88:	a80b883a 	mov	r5,r21
    7c8c:	00004d06 	br	7dc4 <__umoddi3+0x21c>
    7c90:	380d883a 	mov	r6,r7
    7c94:	29c0102e 	bgeu	r5,r7,7cd8 <__umoddi3+0x130>
    7c98:	2011883a 	mov	r8,r4
    7c9c:	2813883a 	mov	r9,r5
    7ca0:	4005883a 	mov	r2,r8
    7ca4:	4807883a 	mov	r3,r9
    7ca8:	dfc00e17 	ldw	ra,56(sp)
    7cac:	df000d17 	ldw	fp,52(sp)
    7cb0:	ddc00c17 	ldw	r23,48(sp)
    7cb4:	dd800b17 	ldw	r22,44(sp)
    7cb8:	dd400a17 	ldw	r21,40(sp)
    7cbc:	dd000917 	ldw	r20,36(sp)
    7cc0:	dcc00817 	ldw	r19,32(sp)
    7cc4:	dc800717 	ldw	r18,28(sp)
    7cc8:	dc400617 	ldw	r17,24(sp)
    7ccc:	dc000517 	ldw	r16,20(sp)
    7cd0:	dec00f04 	addi	sp,sp,60
    7cd4:	f800283a 	ret
    7cd8:	00bfffd4 	movui	r2,65535
    7cdc:	11c05a36 	bltu	r2,r7,7e48 <__umoddi3+0x2a0>
    7ce0:	00803fc4 	movi	r2,255
    7ce4:	11c0fe36 	bltu	r2,r7,80e0 <__umoddi3+0x538>
    7ce8:	000b883a 	mov	r5,zero
    7cec:	0005883a 	mov	r2,zero
    7cf0:	3084d83a 	srl	r2,r6,r2
    7cf4:	01000074 	movhi	r4,1
    7cf8:	21346b04 	addi	r4,r4,-11860
    7cfc:	01c00804 	movi	r7,32
    7d00:	1105883a 	add	r2,r2,r4
    7d04:	10c00003 	ldbu	r3,0(r2)
    7d08:	28c7883a 	add	r3,r5,r3
    7d0c:	38ebc83a 	sub	r21,r7,r3
    7d10:	a800851e 	bne	r21,zero,7f28 <__umoddi3+0x380>
    7d14:	35005236 	bltu	r6,r20,7e60 <__umoddi3+0x2b8>
    7d18:	b400512e 	bgeu	r22,r16,7e60 <__umoddi3+0x2b8>
    7d1c:	b011883a 	mov	r8,r22
    7d20:	a013883a 	mov	r9,r20
    7d24:	003fde06 	br	7ca0 <__umoddi3+0xf8>
    7d28:	00bfffd4 	movui	r2,65535
    7d2c:	11804036 	bltu	r2,r6,7e30 <__umoddi3+0x288>
    7d30:	00803fc4 	movi	r2,255
    7d34:	1180ed36 	bltu	r2,r6,80ec <__umoddi3+0x544>
    7d38:	000b883a 	mov	r5,zero
    7d3c:	0005883a 	mov	r2,zero
    7d40:	8084d83a 	srl	r2,r16,r2
    7d44:	01000074 	movhi	r4,1
    7d48:	21346b04 	addi	r4,r4,-11860
    7d4c:	01800804 	movi	r6,32
    7d50:	1105883a 	add	r2,r2,r4
    7d54:	10c00003 	ldbu	r3,0(r2)
    7d58:	28c7883a 	add	r3,r5,r3
    7d5c:	30c7c83a 	sub	r3,r6,r3
    7d60:	1800bf1e 	bne	r3,zero,8060 <__umoddi3+0x4b8>
    7d64:	0039883a 	mov	fp,zero
    7d68:	802ad43a 	srli	r21,r16,16
    7d6c:	a009883a 	mov	r4,r20
    7d70:	85ffffcc 	andi	r23,r16,65535
    7d74:	a80b883a 	mov	r5,r21
    7d78:	00093c00 	call	93c0 <__udivsi3>
    7d7c:	a009883a 	mov	r4,r20
    7d80:	a80b883a 	mov	r5,r21
    7d84:	b8a3383a 	mul	r17,r23,r2
    7d88:	00093c80 	call	93c8 <__umodsi3>
    7d8c:	1004943a 	slli	r2,r2,16
    7d90:	b006d43a 	srli	r3,r22,16
    7d94:	10c4b03a 	or	r2,r2,r3
    7d98:	1440032e 	bgeu	r2,r17,7da8 <__umoddi3+0x200>
    7d9c:	1405883a 	add	r2,r2,r16
    7da0:	14000136 	bltu	r2,r16,7da8 <__umoddi3+0x200>
    7da4:	1440e536 	bltu	r2,r17,813c <__umoddi3+0x594>
    7da8:	1463c83a 	sub	r17,r2,r17
    7dac:	8809883a 	mov	r4,r17
    7db0:	a80b883a 	mov	r5,r21
    7db4:	00093c00 	call	93c0 <__udivsi3>
    7db8:	8809883a 	mov	r4,r17
    7dbc:	b8a3383a 	mul	r17,r23,r2
    7dc0:	a80b883a 	mov	r5,r21
    7dc4:	00093c80 	call	93c8 <__umodsi3>
    7dc8:	1004943a 	slli	r2,r2,16
    7dcc:	b0ffffcc 	andi	r3,r22,65535
    7dd0:	10c4b03a 	or	r2,r2,r3
    7dd4:	1440042e 	bgeu	r2,r17,7de8 <__umoddi3+0x240>
    7dd8:	1405883a 	add	r2,r2,r16
    7ddc:	14000236 	bltu	r2,r16,7de8 <__umoddi3+0x240>
    7de0:	1440012e 	bgeu	r2,r17,7de8 <__umoddi3+0x240>
    7de4:	1405883a 	add	r2,r2,r16
    7de8:	1445c83a 	sub	r2,r2,r17
    7dec:	1724d83a 	srl	r18,r2,fp
    7df0:	0013883a 	mov	r9,zero
    7df4:	9011883a 	mov	r8,r18
    7df8:	003fa906 	br	7ca0 <__umoddi3+0xf8>
    7dfc:	00804034 	movhi	r2,256
    7e00:	10bfffc4 	addi	r2,r2,-1
    7e04:	1400b036 	bltu	r2,r16,80c8 <__umoddi3+0x520>
    7e08:	01400404 	movi	r5,16
    7e0c:	2805883a 	mov	r2,r5
    7e10:	003f7c06 	br	7c04 <__umoddi3+0x5c>
    7e14:	01000044 	movi	r4,1
    7e18:	000b883a 	mov	r5,zero
    7e1c:	00093c00 	call	93c0 <__udivsi3>
    7e20:	1021883a 	mov	r16,r2
    7e24:	00bfffd4 	movui	r2,65535
    7e28:	143ff436 	bltu	r2,r16,7dfc <__umoddi3+0x254>
    7e2c:	003f7106 	br	7bf4 <__umoddi3+0x4c>
    7e30:	00804034 	movhi	r2,256
    7e34:	10bfffc4 	addi	r2,r2,-1
    7e38:	1180af36 	bltu	r2,r6,80f8 <__umoddi3+0x550>
    7e3c:	01400404 	movi	r5,16
    7e40:	2805883a 	mov	r2,r5
    7e44:	003fbe06 	br	7d40 <__umoddi3+0x198>
    7e48:	00804034 	movhi	r2,256
    7e4c:	10bfffc4 	addi	r2,r2,-1
    7e50:	11c0ac36 	bltu	r2,r7,8104 <__umoddi3+0x55c>
    7e54:	01400404 	movi	r5,16
    7e58:	2805883a 	mov	r2,r5
    7e5c:	003fa406 	br	7cf0 <__umoddi3+0x148>
    7e60:	b409c83a 	sub	r4,r22,r16
    7e64:	b105803a 	cmpltu	r2,r22,r4
    7e68:	a187c83a 	sub	r3,r20,r6
    7e6c:	18a9c83a 	sub	r20,r3,r2
    7e70:	202d883a 	mov	r22,r4
    7e74:	003fa906 	br	7d1c <__umoddi3+0x174>
    7e78:	85e0983a 	sll	r16,r16,r23
    7e7c:	35c5c83a 	sub	r2,r6,r23
    7e80:	a0a2d83a 	srl	r17,r20,r2
    7e84:	802ad43a 	srli	r21,r16,16
    7e88:	b084d83a 	srl	r2,r22,r2
    7e8c:	a5c6983a 	sll	r3,r20,r23
    7e90:	8809883a 	mov	r4,r17
    7e94:	a80b883a 	mov	r5,r21
    7e98:	1886b03a 	or	r3,r3,r2
    7e9c:	d8c00115 	stw	r3,4(sp)
    7ea0:	853fffcc 	andi	r20,r16,65535
    7ea4:	00093c00 	call	93c0 <__udivsi3>
    7ea8:	8809883a 	mov	r4,r17
    7eac:	a80b883a 	mov	r5,r21
    7eb0:	a0a3383a 	mul	r17,r20,r2
    7eb4:	00093c80 	call	93c8 <__umodsi3>
    7eb8:	d9000117 	ldw	r4,4(sp)
    7ebc:	1004943a 	slli	r2,r2,16
    7ec0:	b839883a 	mov	fp,r23
    7ec4:	2006d43a 	srli	r3,r4,16
    7ec8:	10c4b03a 	or	r2,r2,r3
    7ecc:	1440022e 	bgeu	r2,r17,7ed8 <__umoddi3+0x330>
    7ed0:	1405883a 	add	r2,r2,r16
    7ed4:	1400962e 	bgeu	r2,r16,8130 <__umoddi3+0x588>
    7ed8:	1463c83a 	sub	r17,r2,r17
    7edc:	8809883a 	mov	r4,r17
    7ee0:	a80b883a 	mov	r5,r21
    7ee4:	00093c00 	call	93c0 <__udivsi3>
    7ee8:	8809883a 	mov	r4,r17
    7eec:	a80b883a 	mov	r5,r21
    7ef0:	a0a3383a 	mul	r17,r20,r2
    7ef4:	00093c80 	call	93c8 <__umodsi3>
    7ef8:	d9400117 	ldw	r5,4(sp)
    7efc:	1004943a 	slli	r2,r2,16
    7f00:	28ffffcc 	andi	r3,r5,65535
    7f04:	10c4b03a 	or	r2,r2,r3
    7f08:	1440042e 	bgeu	r2,r17,7f1c <__umoddi3+0x374>
    7f0c:	1405883a 	add	r2,r2,r16
    7f10:	14000236 	bltu	r2,r16,7f1c <__umoddi3+0x374>
    7f14:	1440012e 	bgeu	r2,r17,7f1c <__umoddi3+0x374>
    7f18:	1405883a 	add	r2,r2,r16
    7f1c:	b5ec983a 	sll	r22,r22,r23
    7f20:	1463c83a 	sub	r17,r2,r17
    7f24:	003f4406 	br	7c38 <__umoddi3+0x90>
    7f28:	3d4fc83a 	sub	r7,r7,r21
    7f2c:	3546983a 	sll	r3,r6,r21
    7f30:	81c4d83a 	srl	r2,r16,r7
    7f34:	a1e2d83a 	srl	r17,r20,r7
    7f38:	a54c983a 	sll	r6,r20,r21
    7f3c:	18aeb03a 	or	r23,r3,r2
    7f40:	b828d43a 	srli	r20,r23,16
    7f44:	b1c4d83a 	srl	r2,r22,r7
    7f48:	8809883a 	mov	r4,r17
    7f4c:	a00b883a 	mov	r5,r20
    7f50:	308cb03a 	or	r6,r6,r2
    7f54:	d9c00315 	stw	r7,12(sp)
    7f58:	d9800215 	stw	r6,8(sp)
    7f5c:	00093c00 	call	93c0 <__udivsi3>
    7f60:	8809883a 	mov	r4,r17
    7f64:	a00b883a 	mov	r5,r20
    7f68:	1039883a 	mov	fp,r2
    7f6c:	00093c80 	call	93c8 <__umodsi3>
    7f70:	b8ffffcc 	andi	r3,r23,65535
    7f74:	d8c00415 	stw	r3,16(sp)
    7f78:	d9000217 	ldw	r4,8(sp)
    7f7c:	d9400417 	ldw	r5,16(sp)
    7f80:	1004943a 	slli	r2,r2,16
    7f84:	2006d43a 	srli	r3,r4,16
    7f88:	8560983a 	sll	r16,r16,r21
    7f8c:	2f23383a 	mul	r17,r5,fp
    7f90:	10c4b03a 	or	r2,r2,r3
    7f94:	dc000015 	stw	r16,0(sp)
    7f98:	b56c983a 	sll	r22,r22,r21
    7f9c:	1440032e 	bgeu	r2,r17,7fac <__umoddi3+0x404>
    7fa0:	15c5883a 	add	r2,r2,r23
    7fa4:	e73fffc4 	addi	fp,fp,-1
    7fa8:	15c05d2e 	bgeu	r2,r23,8120 <__umoddi3+0x578>
    7fac:	1463c83a 	sub	r17,r2,r17
    7fb0:	8809883a 	mov	r4,r17
    7fb4:	a00b883a 	mov	r5,r20
    7fb8:	00093c00 	call	93c0 <__udivsi3>
    7fbc:	8809883a 	mov	r4,r17
    7fc0:	a00b883a 	mov	r5,r20
    7fc4:	1021883a 	mov	r16,r2
    7fc8:	00093c80 	call	93c8 <__umodsi3>
    7fcc:	d8c00417 	ldw	r3,16(sp)
    7fd0:	d9000217 	ldw	r4,8(sp)
    7fd4:	1004943a 	slli	r2,r2,16
    7fd8:	1c23383a 	mul	r17,r3,r16
    7fdc:	20ffffcc 	andi	r3,r4,65535
    7fe0:	10ceb03a 	or	r7,r2,r3
    7fe4:	3c40032e 	bgeu	r7,r17,7ff4 <__umoddi3+0x44c>
    7fe8:	3dcf883a 	add	r7,r7,r23
    7fec:	843fffc4 	addi	r16,r16,-1
    7ff0:	3dc0472e 	bgeu	r7,r23,8110 <__umoddi3+0x568>
    7ff4:	e004943a 	slli	r2,fp,16
    7ff8:	d9400017 	ldw	r5,0(sp)
    7ffc:	3c4fc83a 	sub	r7,r7,r17
    8000:	8084b03a 	or	r2,r16,r2
    8004:	28ffffcc 	andi	r3,r5,65535
    8008:	280cd43a 	srli	r6,r5,16
    800c:	100ad43a 	srli	r5,r2,16
    8010:	10bfffcc 	andi	r2,r2,65535
    8014:	10d1383a 	mul	r8,r2,r3
    8018:	28c7383a 	mul	r3,r5,r3
    801c:	1185383a 	mul	r2,r2,r6
    8020:	4008d43a 	srli	r4,r8,16
    8024:	298b383a 	mul	r5,r5,r6
    8028:	10c5883a 	add	r2,r2,r3
    802c:	2089883a 	add	r4,r4,r2
    8030:	20c0022e 	bgeu	r4,r3,803c <__umoddi3+0x494>
    8034:	00800074 	movhi	r2,1
    8038:	288b883a 	add	r5,r5,r2
    803c:	2004d43a 	srli	r2,r4,16
    8040:	2008943a 	slli	r4,r4,16
    8044:	40ffffcc 	andi	r3,r8,65535
    8048:	288b883a 	add	r5,r5,r2
    804c:	20c9883a 	add	r4,r4,r3
    8050:	39400b36 	bltu	r7,r5,8080 <__umoddi3+0x4d8>
    8054:	39403d26 	beq	r7,r5,814c <__umoddi3+0x5a4>
    8058:	394bc83a 	sub	r5,r7,r5
    805c:	00000f06 	br	809c <__umoddi3+0x4f4>
    8060:	30c5c83a 	sub	r2,r6,r3
    8064:	1839883a 	mov	fp,r3
    8068:	b084d83a 	srl	r2,r22,r2
    806c:	a0c6983a 	sll	r3,r20,r3
    8070:	8720983a 	sll	r16,r16,fp
    8074:	b72c983a 	sll	r22,r22,fp
    8078:	18a8b03a 	or	r20,r3,r2
    807c:	003f3a06 	br	7d68 <__umoddi3+0x1c0>
    8080:	d8c00017 	ldw	r3,0(sp)
    8084:	20c5c83a 	sub	r2,r4,r3
    8088:	2089803a 	cmpltu	r4,r4,r2
    808c:	2dc7c83a 	sub	r3,r5,r23
    8090:	1907c83a 	sub	r3,r3,r4
    8094:	38cbc83a 	sub	r5,r7,r3
    8098:	1009883a 	mov	r4,r2
    809c:	b105c83a 	sub	r2,r22,r4
    80a0:	b087803a 	cmpltu	r3,r22,r2
    80a4:	28c7c83a 	sub	r3,r5,r3
    80a8:	d9400317 	ldw	r5,12(sp)
    80ac:	1544d83a 	srl	r2,r2,r21
    80b0:	1948983a 	sll	r4,r3,r5
    80b4:	1d46d83a 	srl	r3,r3,r21
    80b8:	20a4b03a 	or	r18,r4,r2
    80bc:	9011883a 	mov	r8,r18
    80c0:	1813883a 	mov	r9,r3
    80c4:	003ef606 	br	7ca0 <__umoddi3+0xf8>
    80c8:	01400604 	movi	r5,24
    80cc:	2805883a 	mov	r2,r5
    80d0:	003ecc06 	br	7c04 <__umoddi3+0x5c>
    80d4:	01400204 	movi	r5,8
    80d8:	2805883a 	mov	r2,r5
    80dc:	003ec906 	br	7c04 <__umoddi3+0x5c>
    80e0:	01400204 	movi	r5,8
    80e4:	2805883a 	mov	r2,r5
    80e8:	003f0106 	br	7cf0 <__umoddi3+0x148>
    80ec:	01400204 	movi	r5,8
    80f0:	2805883a 	mov	r2,r5
    80f4:	003f1206 	br	7d40 <__umoddi3+0x198>
    80f8:	01400604 	movi	r5,24
    80fc:	2805883a 	mov	r2,r5
    8100:	003f0f06 	br	7d40 <__umoddi3+0x198>
    8104:	01400604 	movi	r5,24
    8108:	2805883a 	mov	r2,r5
    810c:	003ef806 	br	7cf0 <__umoddi3+0x148>
    8110:	3c7fb82e 	bgeu	r7,r17,7ff4 <__umoddi3+0x44c>
    8114:	843fffc4 	addi	r16,r16,-1
    8118:	3dcf883a 	add	r7,r7,r23
    811c:	003fb506 	br	7ff4 <__umoddi3+0x44c>
    8120:	147fa22e 	bgeu	r2,r17,7fac <__umoddi3+0x404>
    8124:	e73fffc4 	addi	fp,fp,-1
    8128:	15c5883a 	add	r2,r2,r23
    812c:	003f9f06 	br	7fac <__umoddi3+0x404>
    8130:	147f692e 	bgeu	r2,r17,7ed8 <__umoddi3+0x330>
    8134:	1405883a 	add	r2,r2,r16
    8138:	003f6706 	br	7ed8 <__umoddi3+0x330>
    813c:	1405883a 	add	r2,r2,r16
    8140:	003f1906 	br	7da8 <__umoddi3+0x200>
    8144:	1405883a 	add	r2,r2,r16
    8148:	003ec906 	br	7c70 <__umoddi3+0xc8>
    814c:	b13fcc36 	bltu	r22,r4,8080 <__umoddi3+0x4d8>
    8150:	000b883a 	mov	r5,zero
    8154:	003fd106 	br	809c <__umoddi3+0x4f4>

00008158 <_fpadd_parts>:
    8158:	defff804 	addi	sp,sp,-32
    815c:	dcc00315 	stw	r19,12(sp)
    8160:	2027883a 	mov	r19,r4
    8164:	21000017 	ldw	r4,0(r4)
    8168:	00c00044 	movi	r3,1
    816c:	dd400515 	stw	r21,20(sp)
    8170:	dd000415 	stw	r20,16(sp)
    8174:	ddc00715 	stw	r23,28(sp)
    8178:	dd800615 	stw	r22,24(sp)
    817c:	dc800215 	stw	r18,8(sp)
    8180:	dc400115 	stw	r17,4(sp)
    8184:	dc000015 	stw	r16,0(sp)
    8188:	282b883a 	mov	r21,r5
    818c:	3029883a 	mov	r20,r6
    8190:	1900632e 	bgeu	r3,r4,8320 <_fpadd_parts+0x1c8>
    8194:	28800017 	ldw	r2,0(r5)
    8198:	1880812e 	bgeu	r3,r2,83a0 <_fpadd_parts+0x248>
    819c:	00c00104 	movi	r3,4
    81a0:	20c0dc26 	beq	r4,r3,8514 <_fpadd_parts+0x3bc>
    81a4:	10c07e26 	beq	r2,r3,83a0 <_fpadd_parts+0x248>
    81a8:	00c00084 	movi	r3,2
    81ac:	10c06726 	beq	r2,r3,834c <_fpadd_parts+0x1f4>
    81b0:	20c07b26 	beq	r4,r3,83a0 <_fpadd_parts+0x248>
    81b4:	9dc00217 	ldw	r23,8(r19)
    81b8:	28c00217 	ldw	r3,8(r5)
    81bc:	9c400317 	ldw	r17,12(r19)
    81c0:	2bc00317 	ldw	r15,12(r5)
    81c4:	b8cdc83a 	sub	r6,r23,r3
    81c8:	9c800417 	ldw	r18,16(r19)
    81cc:	2c000417 	ldw	r16,16(r5)
    81d0:	3009883a 	mov	r4,r6
    81d4:	30009716 	blt	r6,zero,8434 <_fpadd_parts+0x2dc>
    81d8:	00800fc4 	movi	r2,63
    81dc:	11806b16 	blt	r2,r6,838c <_fpadd_parts+0x234>
    81e0:	0100a40e 	bge	zero,r4,8474 <_fpadd_parts+0x31c>
    81e4:	35bff804 	addi	r22,r6,-32
    81e8:	b000bc16 	blt	r22,zero,84dc <_fpadd_parts+0x384>
    81ec:	8596d83a 	srl	r11,r16,r22
    81f0:	0019883a 	mov	r12,zero
    81f4:	0013883a 	mov	r9,zero
    81f8:	01000044 	movi	r4,1
    81fc:	0015883a 	mov	r10,zero
    8200:	b000be16 	blt	r22,zero,84fc <_fpadd_parts+0x3a4>
    8204:	2590983a 	sll	r8,r4,r22
    8208:	000f883a 	mov	r7,zero
    820c:	00bfffc4 	movi	r2,-1
    8210:	3889883a 	add	r4,r7,r2
    8214:	408b883a 	add	r5,r8,r2
    8218:	21cd803a 	cmpltu	r6,r4,r7
    821c:	314b883a 	add	r5,r6,r5
    8220:	7904703a 	and	r2,r15,r4
    8224:	8146703a 	and	r3,r16,r5
    8228:	10c4b03a 	or	r2,r2,r3
    822c:	10000226 	beq	r2,zero,8238 <_fpadd_parts+0xe0>
    8230:	02400044 	movi	r9,1
    8234:	0015883a 	mov	r10,zero
    8238:	5a5eb03a 	or	r15,r11,r9
    823c:	62a0b03a 	or	r16,r12,r10
    8240:	99400117 	ldw	r5,4(r19)
    8244:	a8800117 	ldw	r2,4(r21)
    8248:	28806e26 	beq	r5,r2,8404 <_fpadd_parts+0x2ac>
    824c:	28006626 	beq	r5,zero,83e8 <_fpadd_parts+0x290>
    8250:	7c45c83a 	sub	r2,r15,r17
    8254:	7889803a 	cmpltu	r4,r15,r2
    8258:	8487c83a 	sub	r3,r16,r18
    825c:	1909c83a 	sub	r4,r3,r4
    8260:	100d883a 	mov	r6,r2
    8264:	200f883a 	mov	r7,r4
    8268:	38007716 	blt	r7,zero,8448 <_fpadd_parts+0x2f0>
    826c:	a5c00215 	stw	r23,8(r20)
    8270:	a1c00415 	stw	r7,16(r20)
    8274:	a0000115 	stw	zero,4(r20)
    8278:	a1800315 	stw	r6,12(r20)
    827c:	a2000317 	ldw	r8,12(r20)
    8280:	a2400417 	ldw	r9,16(r20)
    8284:	00bfffc4 	movi	r2,-1
    8288:	408b883a 	add	r5,r8,r2
    828c:	2a09803a 	cmpltu	r4,r5,r8
    8290:	488d883a 	add	r6,r9,r2
    8294:	01c40034 	movhi	r7,4096
    8298:	39ffffc4 	addi	r7,r7,-1
    829c:	218d883a 	add	r6,r4,r6
    82a0:	39801736 	bltu	r7,r6,8300 <_fpadd_parts+0x1a8>
    82a4:	31c06526 	beq	r6,r7,843c <_fpadd_parts+0x2e4>
    82a8:	a3000217 	ldw	r12,8(r20)
    82ac:	4209883a 	add	r4,r8,r8
    82b0:	00bfffc4 	movi	r2,-1
    82b4:	220f803a 	cmpltu	r7,r4,r8
    82b8:	4a4b883a 	add	r5,r9,r9
    82bc:	394f883a 	add	r7,r7,r5
    82c0:	2095883a 	add	r10,r4,r2
    82c4:	3897883a 	add	r11,r7,r2
    82c8:	510d803a 	cmpltu	r6,r10,r4
    82cc:	6099883a 	add	r12,r12,r2
    82d0:	32d7883a 	add	r11,r6,r11
    82d4:	00840034 	movhi	r2,4096
    82d8:	10bfffc4 	addi	r2,r2,-1
    82dc:	2011883a 	mov	r8,r4
    82e0:	3813883a 	mov	r9,r7
    82e4:	a1000315 	stw	r4,12(r20)
    82e8:	a1c00415 	stw	r7,16(r20)
    82ec:	a3000215 	stw	r12,8(r20)
    82f0:	12c00336 	bltu	r2,r11,8300 <_fpadd_parts+0x1a8>
    82f4:	58bfed1e 	bne	r11,r2,82ac <_fpadd_parts+0x154>
    82f8:	00bfff84 	movi	r2,-2
    82fc:	12bfeb2e 	bgeu	r2,r10,82ac <_fpadd_parts+0x154>
    8300:	a2800417 	ldw	r10,16(r20)
    8304:	008000c4 	movi	r2,3
    8308:	00c80034 	movhi	r3,8192
    830c:	18ffffc4 	addi	r3,r3,-1
    8310:	a2400317 	ldw	r9,12(r20)
    8314:	a0800015 	stw	r2,0(r20)
    8318:	1a802336 	bltu	r3,r10,83a8 <_fpadd_parts+0x250>
    831c:	a027883a 	mov	r19,r20
    8320:	9805883a 	mov	r2,r19
    8324:	ddc00717 	ldw	r23,28(sp)
    8328:	dd800617 	ldw	r22,24(sp)
    832c:	dd400517 	ldw	r21,20(sp)
    8330:	dd000417 	ldw	r20,16(sp)
    8334:	dcc00317 	ldw	r19,12(sp)
    8338:	dc800217 	ldw	r18,8(sp)
    833c:	dc400117 	ldw	r17,4(sp)
    8340:	dc000017 	ldw	r16,0(sp)
    8344:	dec00804 	addi	sp,sp,32
    8348:	f800283a 	ret
    834c:	20fff41e 	bne	r4,r3,8320 <_fpadd_parts+0x1c8>
    8350:	31000015 	stw	r4,0(r6)
    8354:	98800117 	ldw	r2,4(r19)
    8358:	30800115 	stw	r2,4(r6)
    835c:	98c00217 	ldw	r3,8(r19)
    8360:	30c00215 	stw	r3,8(r6)
    8364:	98800317 	ldw	r2,12(r19)
    8368:	30800315 	stw	r2,12(r6)
    836c:	98c00417 	ldw	r3,16(r19)
    8370:	30c00415 	stw	r3,16(r6)
    8374:	98800117 	ldw	r2,4(r19)
    8378:	28c00117 	ldw	r3,4(r5)
    837c:	3027883a 	mov	r19,r6
    8380:	10c4703a 	and	r2,r2,r3
    8384:	30800115 	stw	r2,4(r6)
    8388:	003fe506 	br	8320 <_fpadd_parts+0x1c8>
    838c:	1dc02616 	blt	r3,r23,8428 <_fpadd_parts+0x2d0>
    8390:	0023883a 	mov	r17,zero
    8394:	182f883a 	mov	r23,r3
    8398:	0025883a 	mov	r18,zero
    839c:	003fa806 	br	8240 <_fpadd_parts+0xe8>
    83a0:	a827883a 	mov	r19,r21
    83a4:	003fde06 	br	8320 <_fpadd_parts+0x1c8>
    83a8:	01800044 	movi	r6,1
    83ac:	500497fa 	slli	r2,r10,31
    83b0:	4808d07a 	srli	r4,r9,1
    83b4:	518ad83a 	srl	r5,r10,r6
    83b8:	a2000217 	ldw	r8,8(r20)
    83bc:	1108b03a 	or	r4,r2,r4
    83c0:	0007883a 	mov	r3,zero
    83c4:	4984703a 	and	r2,r9,r6
    83c8:	208cb03a 	or	r6,r4,r2
    83cc:	28ceb03a 	or	r7,r5,r3
    83d0:	42000044 	addi	r8,r8,1
    83d4:	a027883a 	mov	r19,r20
    83d8:	a1c00415 	stw	r7,16(r20)
    83dc:	a2000215 	stw	r8,8(r20)
    83e0:	a1800315 	stw	r6,12(r20)
    83e4:	003fce06 	br	8320 <_fpadd_parts+0x1c8>
    83e8:	8bc5c83a 	sub	r2,r17,r15
    83ec:	8889803a 	cmpltu	r4,r17,r2
    83f0:	9407c83a 	sub	r3,r18,r16
    83f4:	1909c83a 	sub	r4,r3,r4
    83f8:	100d883a 	mov	r6,r2
    83fc:	200f883a 	mov	r7,r4
    8400:	003f9906 	br	8268 <_fpadd_parts+0x110>
    8404:	7c45883a 	add	r2,r15,r17
    8408:	13c9803a 	cmpltu	r4,r2,r15
    840c:	8487883a 	add	r3,r16,r18
    8410:	20c9883a 	add	r4,r4,r3
    8414:	a1400115 	stw	r5,4(r20)
    8418:	a5c00215 	stw	r23,8(r20)
    841c:	a0800315 	stw	r2,12(r20)
    8420:	a1000415 	stw	r4,16(r20)
    8424:	003fb606 	br	8300 <_fpadd_parts+0x1a8>
    8428:	001f883a 	mov	r15,zero
    842c:	0021883a 	mov	r16,zero
    8430:	003f8306 	br	8240 <_fpadd_parts+0xe8>
    8434:	018dc83a 	sub	r6,zero,r6
    8438:	003f6706 	br	81d8 <_fpadd_parts+0x80>
    843c:	00bfff84 	movi	r2,-2
    8440:	117faf36 	bltu	r2,r5,8300 <_fpadd_parts+0x1a8>
    8444:	003f9806 	br	82a8 <_fpadd_parts+0x150>
    8448:	0005883a 	mov	r2,zero
    844c:	1189c83a 	sub	r4,r2,r6
    8450:	1105803a 	cmpltu	r2,r2,r4
    8454:	01cbc83a 	sub	r5,zero,r7
    8458:	2885c83a 	sub	r2,r5,r2
    845c:	01800044 	movi	r6,1
    8460:	a1800115 	stw	r6,4(r20)
    8464:	a5c00215 	stw	r23,8(r20)
    8468:	a1000315 	stw	r4,12(r20)
    846c:	a0800415 	stw	r2,16(r20)
    8470:	003f8206 	br	827c <_fpadd_parts+0x124>
    8474:	203f7226 	beq	r4,zero,8240 <_fpadd_parts+0xe8>
    8478:	35bff804 	addi	r22,r6,-32
    847c:	b9af883a 	add	r23,r23,r6
    8480:	b0003116 	blt	r22,zero,8548 <_fpadd_parts+0x3f0>
    8484:	959ad83a 	srl	r13,r18,r22
    8488:	001d883a 	mov	r14,zero
    848c:	000f883a 	mov	r7,zero
    8490:	01000044 	movi	r4,1
    8494:	0011883a 	mov	r8,zero
    8498:	b0002516 	blt	r22,zero,8530 <_fpadd_parts+0x3d8>
    849c:	2594983a 	sll	r10,r4,r22
    84a0:	0013883a 	mov	r9,zero
    84a4:	00bfffc4 	movi	r2,-1
    84a8:	4889883a 	add	r4,r9,r2
    84ac:	508b883a 	add	r5,r10,r2
    84b0:	224d803a 	cmpltu	r6,r4,r9
    84b4:	314b883a 	add	r5,r6,r5
    84b8:	8904703a 	and	r2,r17,r4
    84bc:	9146703a 	and	r3,r18,r5
    84c0:	10c4b03a 	or	r2,r2,r3
    84c4:	10000226 	beq	r2,zero,84d0 <_fpadd_parts+0x378>
    84c8:	01c00044 	movi	r7,1
    84cc:	0011883a 	mov	r8,zero
    84d0:	69e2b03a 	or	r17,r13,r7
    84d4:	7224b03a 	or	r18,r14,r8
    84d8:	003f5906 	br	8240 <_fpadd_parts+0xe8>
    84dc:	8407883a 	add	r3,r16,r16
    84e0:	008007c4 	movi	r2,31
    84e4:	1185c83a 	sub	r2,r2,r6
    84e8:	1886983a 	sll	r3,r3,r2
    84ec:	7996d83a 	srl	r11,r15,r6
    84f0:	8198d83a 	srl	r12,r16,r6
    84f4:	1ad6b03a 	or	r11,r3,r11
    84f8:	003f3e06 	br	81f4 <_fpadd_parts+0x9c>
    84fc:	2006d07a 	srli	r3,r4,1
    8500:	008007c4 	movi	r2,31
    8504:	1185c83a 	sub	r2,r2,r6
    8508:	1890d83a 	srl	r8,r3,r2
    850c:	218e983a 	sll	r7,r4,r6
    8510:	003f3e06 	br	820c <_fpadd_parts+0xb4>
    8514:	113f821e 	bne	r2,r4,8320 <_fpadd_parts+0x1c8>
    8518:	28c00117 	ldw	r3,4(r5)
    851c:	98800117 	ldw	r2,4(r19)
    8520:	10ff7f26 	beq	r2,r3,8320 <_fpadd_parts+0x1c8>
    8524:	04c00074 	movhi	r19,1
    8528:	9cf46604 	addi	r19,r19,-11880
    852c:	003f7c06 	br	8320 <_fpadd_parts+0x1c8>
    8530:	2006d07a 	srli	r3,r4,1
    8534:	008007c4 	movi	r2,31
    8538:	1185c83a 	sub	r2,r2,r6
    853c:	1894d83a 	srl	r10,r3,r2
    8540:	2192983a 	sll	r9,r4,r6
    8544:	003fd706 	br	84a4 <_fpadd_parts+0x34c>
    8548:	9487883a 	add	r3,r18,r18
    854c:	008007c4 	movi	r2,31
    8550:	1185c83a 	sub	r2,r2,r6
    8554:	1886983a 	sll	r3,r3,r2
    8558:	899ad83a 	srl	r13,r17,r6
    855c:	919cd83a 	srl	r14,r18,r6
    8560:	1b5ab03a 	or	r13,r3,r13
    8564:	003fc906 	br	848c <_fpadd_parts+0x334>

00008568 <__subdf3>:
    8568:	deffea04 	addi	sp,sp,-88
    856c:	dcc01415 	stw	r19,80(sp)
    8570:	dcc00404 	addi	r19,sp,16
    8574:	2011883a 	mov	r8,r4
    8578:	2813883a 	mov	r9,r5
    857c:	dc401315 	stw	r17,76(sp)
    8580:	d809883a 	mov	r4,sp
    8584:	980b883a 	mov	r5,r19
    8588:	dc400904 	addi	r17,sp,36
    858c:	dfc01515 	stw	ra,84(sp)
    8590:	da400115 	stw	r9,4(sp)
    8594:	d9c00315 	stw	r7,12(sp)
    8598:	da000015 	stw	r8,0(sp)
    859c:	d9800215 	stw	r6,8(sp)
    85a0:	00097fc0 	call	97fc <__unpack_d>
    85a4:	d9000204 	addi	r4,sp,8
    85a8:	880b883a 	mov	r5,r17
    85ac:	00097fc0 	call	97fc <__unpack_d>
    85b0:	d8800a17 	ldw	r2,40(sp)
    85b4:	880b883a 	mov	r5,r17
    85b8:	9809883a 	mov	r4,r19
    85bc:	d9800e04 	addi	r6,sp,56
    85c0:	1080005c 	xori	r2,r2,1
    85c4:	d8800a15 	stw	r2,40(sp)
    85c8:	00081580 	call	8158 <_fpadd_parts>
    85cc:	1009883a 	mov	r4,r2
    85d0:	00094e80 	call	94e8 <__pack_d>
    85d4:	dfc01517 	ldw	ra,84(sp)
    85d8:	dcc01417 	ldw	r19,80(sp)
    85dc:	dc401317 	ldw	r17,76(sp)
    85e0:	dec01604 	addi	sp,sp,88
    85e4:	f800283a 	ret

000085e8 <__adddf3>:
    85e8:	deffea04 	addi	sp,sp,-88
    85ec:	dcc01415 	stw	r19,80(sp)
    85f0:	dcc00404 	addi	r19,sp,16
    85f4:	2011883a 	mov	r8,r4
    85f8:	2813883a 	mov	r9,r5
    85fc:	dc401315 	stw	r17,76(sp)
    8600:	d809883a 	mov	r4,sp
    8604:	980b883a 	mov	r5,r19
    8608:	dc400904 	addi	r17,sp,36
    860c:	dfc01515 	stw	ra,84(sp)
    8610:	da400115 	stw	r9,4(sp)
    8614:	d9c00315 	stw	r7,12(sp)
    8618:	da000015 	stw	r8,0(sp)
    861c:	d9800215 	stw	r6,8(sp)
    8620:	00097fc0 	call	97fc <__unpack_d>
    8624:	d9000204 	addi	r4,sp,8
    8628:	880b883a 	mov	r5,r17
    862c:	00097fc0 	call	97fc <__unpack_d>
    8630:	d9800e04 	addi	r6,sp,56
    8634:	9809883a 	mov	r4,r19
    8638:	880b883a 	mov	r5,r17
    863c:	00081580 	call	8158 <_fpadd_parts>
    8640:	1009883a 	mov	r4,r2
    8644:	00094e80 	call	94e8 <__pack_d>
    8648:	dfc01517 	ldw	ra,84(sp)
    864c:	dcc01417 	ldw	r19,80(sp)
    8650:	dc401317 	ldw	r17,76(sp)
    8654:	dec01604 	addi	sp,sp,88
    8658:	f800283a 	ret

0000865c <__muldf3>:
    865c:	deffe004 	addi	sp,sp,-128
    8660:	dc401815 	stw	r17,96(sp)
    8664:	dc400404 	addi	r17,sp,16
    8668:	2011883a 	mov	r8,r4
    866c:	2813883a 	mov	r9,r5
    8670:	dc001715 	stw	r16,92(sp)
    8674:	d809883a 	mov	r4,sp
    8678:	880b883a 	mov	r5,r17
    867c:	dc000904 	addi	r16,sp,36
    8680:	dfc01f15 	stw	ra,124(sp)
    8684:	da400115 	stw	r9,4(sp)
    8688:	d9c00315 	stw	r7,12(sp)
    868c:	da000015 	stw	r8,0(sp)
    8690:	d9800215 	stw	r6,8(sp)
    8694:	ddc01e15 	stw	r23,120(sp)
    8698:	dd801d15 	stw	r22,116(sp)
    869c:	dd401c15 	stw	r21,112(sp)
    86a0:	dd001b15 	stw	r20,108(sp)
    86a4:	dcc01a15 	stw	r19,104(sp)
    86a8:	dc801915 	stw	r18,100(sp)
    86ac:	00097fc0 	call	97fc <__unpack_d>
    86b0:	d9000204 	addi	r4,sp,8
    86b4:	800b883a 	mov	r5,r16
    86b8:	00097fc0 	call	97fc <__unpack_d>
    86bc:	d9000417 	ldw	r4,16(sp)
    86c0:	00800044 	movi	r2,1
    86c4:	1100102e 	bgeu	r2,r4,8708 <__muldf3+0xac>
    86c8:	d8c00917 	ldw	r3,36(sp)
    86cc:	10c0062e 	bgeu	r2,r3,86e8 <__muldf3+0x8c>
    86d0:	00800104 	movi	r2,4
    86d4:	20800a26 	beq	r4,r2,8700 <__muldf3+0xa4>
    86d8:	1880cc26 	beq	r3,r2,8a0c <__muldf3+0x3b0>
    86dc:	00800084 	movi	r2,2
    86e0:	20800926 	beq	r4,r2,8708 <__muldf3+0xac>
    86e4:	1880191e 	bne	r3,r2,874c <__muldf3+0xf0>
    86e8:	d8c00a17 	ldw	r3,40(sp)
    86ec:	d8800517 	ldw	r2,20(sp)
    86f0:	8009883a 	mov	r4,r16
    86f4:	10c4c03a 	cmpne	r2,r2,r3
    86f8:	d8800a15 	stw	r2,40(sp)
    86fc:	00000706 	br	871c <__muldf3+0xc0>
    8700:	00800084 	movi	r2,2
    8704:	1880c326 	beq	r3,r2,8a14 <__muldf3+0x3b8>
    8708:	d8800517 	ldw	r2,20(sp)
    870c:	d8c00a17 	ldw	r3,40(sp)
    8710:	8809883a 	mov	r4,r17
    8714:	10c4c03a 	cmpne	r2,r2,r3
    8718:	d8800515 	stw	r2,20(sp)
    871c:	00094e80 	call	94e8 <__pack_d>
    8720:	dfc01f17 	ldw	ra,124(sp)
    8724:	ddc01e17 	ldw	r23,120(sp)
    8728:	dd801d17 	ldw	r22,116(sp)
    872c:	dd401c17 	ldw	r21,112(sp)
    8730:	dd001b17 	ldw	r20,108(sp)
    8734:	dcc01a17 	ldw	r19,104(sp)
    8738:	dc801917 	ldw	r18,100(sp)
    873c:	dc401817 	ldw	r17,96(sp)
    8740:	dc001717 	ldw	r16,92(sp)
    8744:	dec02004 	addi	sp,sp,128
    8748:	f800283a 	ret
    874c:	dd800717 	ldw	r22,28(sp)
    8750:	dc800c17 	ldw	r18,48(sp)
    8754:	002b883a 	mov	r21,zero
    8758:	0023883a 	mov	r17,zero
    875c:	a80b883a 	mov	r5,r21
    8760:	b00d883a 	mov	r6,r22
    8764:	880f883a 	mov	r7,r17
    8768:	ddc00817 	ldw	r23,32(sp)
    876c:	dcc00d17 	ldw	r19,52(sp)
    8770:	9009883a 	mov	r4,r18
    8774:	00093d00 	call	93d0 <__muldi3>
    8778:	001b883a 	mov	r13,zero
    877c:	680f883a 	mov	r7,r13
    8780:	b009883a 	mov	r4,r22
    8784:	000b883a 	mov	r5,zero
    8788:	980d883a 	mov	r6,r19
    878c:	b82d883a 	mov	r22,r23
    8790:	002f883a 	mov	r23,zero
    8794:	db401615 	stw	r13,88(sp)
    8798:	d8801315 	stw	r2,76(sp)
    879c:	d8c01415 	stw	r3,80(sp)
    87a0:	dcc01515 	stw	r19,84(sp)
    87a4:	00093d00 	call	93d0 <__muldi3>
    87a8:	b00d883a 	mov	r6,r22
    87ac:	000b883a 	mov	r5,zero
    87b0:	9009883a 	mov	r4,r18
    87b4:	b80f883a 	mov	r7,r23
    87b8:	1021883a 	mov	r16,r2
    87bc:	1823883a 	mov	r17,r3
    87c0:	00093d00 	call	93d0 <__muldi3>
    87c4:	8085883a 	add	r2,r16,r2
    87c8:	140d803a 	cmpltu	r6,r2,r16
    87cc:	88c7883a 	add	r3,r17,r3
    87d0:	30cd883a 	add	r6,r6,r3
    87d4:	1029883a 	mov	r20,r2
    87d8:	302b883a 	mov	r21,r6
    87dc:	da801317 	ldw	r10,76(sp)
    87e0:	dac01417 	ldw	r11,80(sp)
    87e4:	db001517 	ldw	r12,84(sp)
    87e8:	db401617 	ldw	r13,88(sp)
    87ec:	3440612e 	bgeu	r6,r17,8974 <__muldf3+0x318>
    87f0:	0009883a 	mov	r4,zero
    87f4:	5105883a 	add	r2,r10,r4
    87f8:	128d803a 	cmpltu	r6,r2,r10
    87fc:	5d07883a 	add	r3,r11,r20
    8800:	30cd883a 	add	r6,r6,r3
    8804:	0021883a 	mov	r16,zero
    8808:	04400044 	movi	r17,1
    880c:	1025883a 	mov	r18,r2
    8810:	3027883a 	mov	r19,r6
    8814:	32c06236 	bltu	r6,r11,89a0 <__muldf3+0x344>
    8818:	59807a26 	beq	r11,r6,8a04 <__muldf3+0x3a8>
    881c:	680b883a 	mov	r5,r13
    8820:	b80f883a 	mov	r7,r23
    8824:	6009883a 	mov	r4,r12
    8828:	b00d883a 	mov	r6,r22
    882c:	00093d00 	call	93d0 <__muldi3>
    8830:	1009883a 	mov	r4,r2
    8834:	000f883a 	mov	r7,zero
    8838:	1545883a 	add	r2,r2,r21
    883c:	1111803a 	cmpltu	r8,r2,r4
    8840:	19c7883a 	add	r3,r3,r7
    8844:	40c7883a 	add	r3,r8,r3
    8848:	88cb883a 	add	r5,r17,r3
    884c:	d8c00617 	ldw	r3,24(sp)
    8850:	8089883a 	add	r4,r16,r2
    8854:	d8800b17 	ldw	r2,44(sp)
    8858:	18c00104 	addi	r3,r3,4
    885c:	240d803a 	cmpltu	r6,r4,r16
    8860:	10c7883a 	add	r3,r2,r3
    8864:	2013883a 	mov	r9,r4
    8868:	d8800a17 	ldw	r2,40(sp)
    886c:	d9000517 	ldw	r4,20(sp)
    8870:	314d883a 	add	r6,r6,r5
    8874:	3015883a 	mov	r10,r6
    8878:	2088c03a 	cmpne	r4,r4,r2
    887c:	00880034 	movhi	r2,8192
    8880:	10bfffc4 	addi	r2,r2,-1
    8884:	d9000f15 	stw	r4,60(sp)
    8888:	d8c01015 	stw	r3,64(sp)
    888c:	1180162e 	bgeu	r2,r6,88e8 <__muldf3+0x28c>
    8890:	1811883a 	mov	r8,r3
    8894:	101f883a 	mov	r15,r2
    8898:	980497fa 	slli	r2,r19,31
    889c:	9016d07a 	srli	r11,r18,1
    88a0:	500697fa 	slli	r3,r10,31
    88a4:	480cd07a 	srli	r6,r9,1
    88a8:	500ed07a 	srli	r7,r10,1
    88ac:	12d6b03a 	or	r11,r2,r11
    88b0:	00800044 	movi	r2,1
    88b4:	198cb03a 	or	r6,r3,r6
    88b8:	4888703a 	and	r4,r9,r2
    88bc:	9818d07a 	srli	r12,r19,1
    88c0:	001b883a 	mov	r13,zero
    88c4:	03a00034 	movhi	r14,32768
    88c8:	3013883a 	mov	r9,r6
    88cc:	3815883a 	mov	r10,r7
    88d0:	4091883a 	add	r8,r8,r2
    88d4:	20000226 	beq	r4,zero,88e0 <__muldf3+0x284>
    88d8:	5b64b03a 	or	r18,r11,r13
    88dc:	63a6b03a 	or	r19,r12,r14
    88e0:	7abfed36 	bltu	r15,r10,8898 <__muldf3+0x23c>
    88e4:	da001015 	stw	r8,64(sp)
    88e8:	00840034 	movhi	r2,4096
    88ec:	10bfffc4 	addi	r2,r2,-1
    88f0:	12801436 	bltu	r2,r10,8944 <__muldf3+0x2e8>
    88f4:	da001017 	ldw	r8,64(sp)
    88f8:	101f883a 	mov	r15,r2
    88fc:	4a45883a 	add	r2,r9,r9
    8900:	124d803a 	cmpltu	r6,r2,r9
    8904:	5287883a 	add	r3,r10,r10
    8908:	9497883a 	add	r11,r18,r18
    890c:	5c8f803a 	cmpltu	r7,r11,r18
    8910:	9cd9883a 	add	r12,r19,r19
    8914:	01000044 	movi	r4,1
    8918:	30cd883a 	add	r6,r6,r3
    891c:	3b0f883a 	add	r7,r7,r12
    8920:	423fffc4 	addi	r8,r8,-1
    8924:	1013883a 	mov	r9,r2
    8928:	3015883a 	mov	r10,r6
    892c:	111ab03a 	or	r13,r2,r4
    8930:	98003016 	blt	r19,zero,89f4 <__muldf3+0x398>
    8934:	5825883a 	mov	r18,r11
    8938:	3827883a 	mov	r19,r7
    893c:	7abfef2e 	bgeu	r15,r10,88fc <__muldf3+0x2a0>
    8940:	da001015 	stw	r8,64(sp)
    8944:	00803fc4 	movi	r2,255
    8948:	488e703a 	and	r7,r9,r2
    894c:	00802004 	movi	r2,128
    8950:	0007883a 	mov	r3,zero
    8954:	0011883a 	mov	r8,zero
    8958:	38801826 	beq	r7,r2,89bc <__muldf3+0x360>
    895c:	008000c4 	movi	r2,3
    8960:	d9000e04 	addi	r4,sp,56
    8964:	da801215 	stw	r10,72(sp)
    8968:	d8800e15 	stw	r2,56(sp)
    896c:	da401115 	stw	r9,68(sp)
    8970:	003f6a06 	br	871c <__muldf3+0xc0>
    8974:	89802126 	beq	r17,r6,89fc <__muldf3+0x3a0>
    8978:	0009883a 	mov	r4,zero
    897c:	5105883a 	add	r2,r10,r4
    8980:	128d803a 	cmpltu	r6,r2,r10
    8984:	5d07883a 	add	r3,r11,r20
    8988:	30cd883a 	add	r6,r6,r3
    898c:	0021883a 	mov	r16,zero
    8990:	0023883a 	mov	r17,zero
    8994:	1025883a 	mov	r18,r2
    8998:	3027883a 	mov	r19,r6
    899c:	32ff9e2e 	bgeu	r6,r11,8818 <__muldf3+0x1bc>
    89a0:	00800044 	movi	r2,1
    89a4:	8089883a 	add	r4,r16,r2
    89a8:	240d803a 	cmpltu	r6,r4,r16
    89ac:	344d883a 	add	r6,r6,r17
    89b0:	2021883a 	mov	r16,r4
    89b4:	3023883a 	mov	r17,r6
    89b8:	003f9806 	br	881c <__muldf3+0x1c0>
    89bc:	403fe71e 	bne	r8,zero,895c <__muldf3+0x300>
    89c0:	01004004 	movi	r4,256
    89c4:	4904703a 	and	r2,r9,r4
    89c8:	10c4b03a 	or	r2,r2,r3
    89cc:	103fe31e 	bne	r2,zero,895c <__muldf3+0x300>
    89d0:	94c4b03a 	or	r2,r18,r19
    89d4:	103fe126 	beq	r2,zero,895c <__muldf3+0x300>
    89d8:	49c5883a 	add	r2,r9,r7
    89dc:	1251803a 	cmpltu	r8,r2,r9
    89e0:	4291883a 	add	r8,r8,r10
    89e4:	013fc004 	movi	r4,-256
    89e8:	1112703a 	and	r9,r2,r4
    89ec:	4015883a 	mov	r10,r8
    89f0:	003fda06 	br	895c <__muldf3+0x300>
    89f4:	6813883a 	mov	r9,r13
    89f8:	003fce06 	br	8934 <__muldf3+0x2d8>
    89fc:	143f7c36 	bltu	r2,r16,87f0 <__muldf3+0x194>
    8a00:	003fdd06 	br	8978 <__muldf3+0x31c>
    8a04:	12bf852e 	bgeu	r2,r10,881c <__muldf3+0x1c0>
    8a08:	003fe506 	br	89a0 <__muldf3+0x344>
    8a0c:	00800084 	movi	r2,2
    8a10:	20bf351e 	bne	r4,r2,86e8 <__muldf3+0x8c>
    8a14:	01000074 	movhi	r4,1
    8a18:	21346604 	addi	r4,r4,-11880
    8a1c:	003f3f06 	br	871c <__muldf3+0xc0>

00008a20 <__divdf3>:
    8a20:	deffed04 	addi	sp,sp,-76
    8a24:	dcc01115 	stw	r19,68(sp)
    8a28:	dcc00404 	addi	r19,sp,16
    8a2c:	2011883a 	mov	r8,r4
    8a30:	2813883a 	mov	r9,r5
    8a34:	dc000e15 	stw	r16,56(sp)
    8a38:	d809883a 	mov	r4,sp
    8a3c:	980b883a 	mov	r5,r19
    8a40:	dc000904 	addi	r16,sp,36
    8a44:	dfc01215 	stw	ra,72(sp)
    8a48:	da400115 	stw	r9,4(sp)
    8a4c:	d9c00315 	stw	r7,12(sp)
    8a50:	da000015 	stw	r8,0(sp)
    8a54:	d9800215 	stw	r6,8(sp)
    8a58:	dc801015 	stw	r18,64(sp)
    8a5c:	dc400f15 	stw	r17,60(sp)
    8a60:	00097fc0 	call	97fc <__unpack_d>
    8a64:	d9000204 	addi	r4,sp,8
    8a68:	800b883a 	mov	r5,r16
    8a6c:	00097fc0 	call	97fc <__unpack_d>
    8a70:	d9000417 	ldw	r4,16(sp)
    8a74:	00800044 	movi	r2,1
    8a78:	11000b2e 	bgeu	r2,r4,8aa8 <__divdf3+0x88>
    8a7c:	d9400917 	ldw	r5,36(sp)
    8a80:	1140762e 	bgeu	r2,r5,8c5c <__divdf3+0x23c>
    8a84:	d8800517 	ldw	r2,20(sp)
    8a88:	d8c00a17 	ldw	r3,40(sp)
    8a8c:	01800104 	movi	r6,4
    8a90:	10c4f03a 	xor	r2,r2,r3
    8a94:	d8800515 	stw	r2,20(sp)
    8a98:	21800226 	beq	r4,r6,8aa4 <__divdf3+0x84>
    8a9c:	00800084 	movi	r2,2
    8aa0:	2080141e 	bne	r4,r2,8af4 <__divdf3+0xd4>
    8aa4:	29000926 	beq	r5,r4,8acc <__divdf3+0xac>
    8aa8:	9809883a 	mov	r4,r19
    8aac:	00094e80 	call	94e8 <__pack_d>
    8ab0:	dfc01217 	ldw	ra,72(sp)
    8ab4:	dcc01117 	ldw	r19,68(sp)
    8ab8:	dc801017 	ldw	r18,64(sp)
    8abc:	dc400f17 	ldw	r17,60(sp)
    8ac0:	dc000e17 	ldw	r16,56(sp)
    8ac4:	dec01304 	addi	sp,sp,76
    8ac8:	f800283a 	ret
    8acc:	01000074 	movhi	r4,1
    8ad0:	21346604 	addi	r4,r4,-11880
    8ad4:	00094e80 	call	94e8 <__pack_d>
    8ad8:	dfc01217 	ldw	ra,72(sp)
    8adc:	dcc01117 	ldw	r19,68(sp)
    8ae0:	dc801017 	ldw	r18,64(sp)
    8ae4:	dc400f17 	ldw	r17,60(sp)
    8ae8:	dc000e17 	ldw	r16,56(sp)
    8aec:	dec01304 	addi	sp,sp,76
    8af0:	f800283a 	ret
    8af4:	29805b26 	beq	r5,r6,8c64 <__divdf3+0x244>
    8af8:	28802d26 	beq	r5,r2,8bb0 <__divdf3+0x190>
    8afc:	d8c00617 	ldw	r3,24(sp)
    8b00:	d8800b17 	ldw	r2,44(sp)
    8b04:	d9c00817 	ldw	r7,32(sp)
    8b08:	dc400d17 	ldw	r17,52(sp)
    8b0c:	188bc83a 	sub	r5,r3,r2
    8b10:	d9800717 	ldw	r6,28(sp)
    8b14:	dc000c17 	ldw	r16,48(sp)
    8b18:	d9400615 	stw	r5,24(sp)
    8b1c:	3c403836 	bltu	r7,r17,8c00 <__divdf3+0x1e0>
    8b20:	89c03626 	beq	r17,r7,8bfc <__divdf3+0x1dc>
    8b24:	0015883a 	mov	r10,zero
    8b28:	001d883a 	mov	r14,zero
    8b2c:	02c40034 	movhi	r11,4096
    8b30:	001f883a 	mov	r15,zero
    8b34:	003f883a 	mov	ra,zero
    8b38:	04800f44 	movi	r18,61
    8b3c:	00000f06 	br	8b7c <__divdf3+0x15c>
    8b40:	601d883a 	mov	r14,r12
    8b44:	681f883a 	mov	r15,r13
    8b48:	400d883a 	mov	r6,r8
    8b4c:	100f883a 	mov	r7,r2
    8b50:	3191883a 	add	r8,r6,r6
    8b54:	5808d07a 	srli	r4,r11,1
    8b58:	4185803a 	cmpltu	r2,r8,r6
    8b5c:	39d3883a 	add	r9,r7,r7
    8b60:	28c6b03a 	or	r3,r5,r3
    8b64:	1245883a 	add	r2,r2,r9
    8b68:	1815883a 	mov	r10,r3
    8b6c:	2017883a 	mov	r11,r4
    8b70:	400d883a 	mov	r6,r8
    8b74:	100f883a 	mov	r7,r2
    8b78:	fc801726 	beq	ra,r18,8bd8 <__divdf3+0x1b8>
    8b7c:	580a97fa 	slli	r5,r11,31
    8b80:	5006d07a 	srli	r3,r10,1
    8b84:	ffc00044 	addi	ra,ra,1
    8b88:	3c7ff136 	bltu	r7,r17,8b50 <__divdf3+0x130>
    8b8c:	3411c83a 	sub	r8,r6,r16
    8b90:	3205803a 	cmpltu	r2,r6,r8
    8b94:	3c53c83a 	sub	r9,r7,r17
    8b98:	7298b03a 	or	r12,r14,r10
    8b9c:	7adab03a 	or	r13,r15,r11
    8ba0:	4885c83a 	sub	r2,r9,r2
    8ba4:	89ffe61e 	bne	r17,r7,8b40 <__divdf3+0x120>
    8ba8:	343fe936 	bltu	r6,r16,8b50 <__divdf3+0x130>
    8bac:	003fe406 	br	8b40 <__divdf3+0x120>
    8bb0:	9809883a 	mov	r4,r19
    8bb4:	d9800415 	stw	r6,16(sp)
    8bb8:	00094e80 	call	94e8 <__pack_d>
    8bbc:	dfc01217 	ldw	ra,72(sp)
    8bc0:	dcc01117 	ldw	r19,68(sp)
    8bc4:	dc801017 	ldw	r18,64(sp)
    8bc8:	dc400f17 	ldw	r17,60(sp)
    8bcc:	dc000e17 	ldw	r16,56(sp)
    8bd0:	dec01304 	addi	sp,sp,76
    8bd4:	f800283a 	ret
    8bd8:	00803fc4 	movi	r2,255
    8bdc:	7090703a 	and	r8,r14,r2
    8be0:	00802004 	movi	r2,128
    8be4:	0007883a 	mov	r3,zero
    8be8:	0013883a 	mov	r9,zero
    8bec:	40800d26 	beq	r8,r2,8c24 <__divdf3+0x204>
    8bf0:	dbc00815 	stw	r15,32(sp)
    8bf4:	db800715 	stw	r14,28(sp)
    8bf8:	003fab06 	br	8aa8 <__divdf3+0x88>
    8bfc:	343fc92e 	bgeu	r6,r16,8b24 <__divdf3+0x104>
    8c00:	3185883a 	add	r2,r6,r6
    8c04:	1189803a 	cmpltu	r4,r2,r6
    8c08:	39c7883a 	add	r3,r7,r7
    8c0c:	20c9883a 	add	r4,r4,r3
    8c10:	297fffc4 	addi	r5,r5,-1
    8c14:	100d883a 	mov	r6,r2
    8c18:	200f883a 	mov	r7,r4
    8c1c:	d9400615 	stw	r5,24(sp)
    8c20:	003fc006 	br	8b24 <__divdf3+0x104>
    8c24:	483ff21e 	bne	r9,zero,8bf0 <__divdf3+0x1d0>
    8c28:	01004004 	movi	r4,256
    8c2c:	7104703a 	and	r2,r14,r4
    8c30:	10c4b03a 	or	r2,r2,r3
    8c34:	103fee1e 	bne	r2,zero,8bf0 <__divdf3+0x1d0>
    8c38:	31c4b03a 	or	r2,r6,r7
    8c3c:	103fec26 	beq	r2,zero,8bf0 <__divdf3+0x1d0>
    8c40:	7205883a 	add	r2,r14,r8
    8c44:	1391803a 	cmpltu	r8,r2,r14
    8c48:	43d1883a 	add	r8,r8,r15
    8c4c:	013fc004 	movi	r4,-256
    8c50:	111c703a 	and	r14,r2,r4
    8c54:	401f883a 	mov	r15,r8
    8c58:	003fe506 	br	8bf0 <__divdf3+0x1d0>
    8c5c:	8009883a 	mov	r4,r16
    8c60:	003f9206 	br	8aac <__divdf3+0x8c>
    8c64:	9809883a 	mov	r4,r19
    8c68:	d8000715 	stw	zero,28(sp)
    8c6c:	d8000815 	stw	zero,32(sp)
    8c70:	d8000615 	stw	zero,24(sp)
    8c74:	003f8d06 	br	8aac <__divdf3+0x8c>

00008c78 <__eqdf2>:
    8c78:	deffef04 	addi	sp,sp,-68
    8c7c:	dc400f15 	stw	r17,60(sp)
    8c80:	dc400404 	addi	r17,sp,16
    8c84:	2005883a 	mov	r2,r4
    8c88:	2807883a 	mov	r3,r5
    8c8c:	dc000e15 	stw	r16,56(sp)
    8c90:	d809883a 	mov	r4,sp
    8c94:	880b883a 	mov	r5,r17
    8c98:	dc000904 	addi	r16,sp,36
    8c9c:	d8c00115 	stw	r3,4(sp)
    8ca0:	d8800015 	stw	r2,0(sp)
    8ca4:	d9800215 	stw	r6,8(sp)
    8ca8:	dfc01015 	stw	ra,64(sp)
    8cac:	d9c00315 	stw	r7,12(sp)
    8cb0:	00097fc0 	call	97fc <__unpack_d>
    8cb4:	d9000204 	addi	r4,sp,8
    8cb8:	800b883a 	mov	r5,r16
    8cbc:	00097fc0 	call	97fc <__unpack_d>
    8cc0:	d8800417 	ldw	r2,16(sp)
    8cc4:	00c00044 	movi	r3,1
    8cc8:	180d883a 	mov	r6,r3
    8ccc:	1880062e 	bgeu	r3,r2,8ce8 <__eqdf2+0x70>
    8cd0:	d8800917 	ldw	r2,36(sp)
    8cd4:	8809883a 	mov	r4,r17
    8cd8:	800b883a 	mov	r5,r16
    8cdc:	1880022e 	bgeu	r3,r2,8ce8 <__eqdf2+0x70>
    8ce0:	00099340 	call	9934 <__fpcmp_parts_d>
    8ce4:	100d883a 	mov	r6,r2
    8ce8:	3005883a 	mov	r2,r6
    8cec:	dfc01017 	ldw	ra,64(sp)
    8cf0:	dc400f17 	ldw	r17,60(sp)
    8cf4:	dc000e17 	ldw	r16,56(sp)
    8cf8:	dec01104 	addi	sp,sp,68
    8cfc:	f800283a 	ret

00008d00 <__nedf2>:
    8d00:	deffef04 	addi	sp,sp,-68
    8d04:	dc400f15 	stw	r17,60(sp)
    8d08:	dc400404 	addi	r17,sp,16
    8d0c:	2005883a 	mov	r2,r4
    8d10:	2807883a 	mov	r3,r5
    8d14:	dc000e15 	stw	r16,56(sp)
    8d18:	d809883a 	mov	r4,sp
    8d1c:	880b883a 	mov	r5,r17
    8d20:	dc000904 	addi	r16,sp,36
    8d24:	d8c00115 	stw	r3,4(sp)
    8d28:	d8800015 	stw	r2,0(sp)
    8d2c:	d9800215 	stw	r6,8(sp)
    8d30:	dfc01015 	stw	ra,64(sp)
    8d34:	d9c00315 	stw	r7,12(sp)
    8d38:	00097fc0 	call	97fc <__unpack_d>
    8d3c:	d9000204 	addi	r4,sp,8
    8d40:	800b883a 	mov	r5,r16
    8d44:	00097fc0 	call	97fc <__unpack_d>
    8d48:	d8800417 	ldw	r2,16(sp)
    8d4c:	00c00044 	movi	r3,1
    8d50:	180d883a 	mov	r6,r3
    8d54:	1880062e 	bgeu	r3,r2,8d70 <__nedf2+0x70>
    8d58:	d8800917 	ldw	r2,36(sp)
    8d5c:	8809883a 	mov	r4,r17
    8d60:	800b883a 	mov	r5,r16
    8d64:	1880022e 	bgeu	r3,r2,8d70 <__nedf2+0x70>
    8d68:	00099340 	call	9934 <__fpcmp_parts_d>
    8d6c:	100d883a 	mov	r6,r2
    8d70:	3005883a 	mov	r2,r6
    8d74:	dfc01017 	ldw	ra,64(sp)
    8d78:	dc400f17 	ldw	r17,60(sp)
    8d7c:	dc000e17 	ldw	r16,56(sp)
    8d80:	dec01104 	addi	sp,sp,68
    8d84:	f800283a 	ret

00008d88 <__gtdf2>:
    8d88:	deffef04 	addi	sp,sp,-68
    8d8c:	dc400f15 	stw	r17,60(sp)
    8d90:	dc400404 	addi	r17,sp,16
    8d94:	2005883a 	mov	r2,r4
    8d98:	2807883a 	mov	r3,r5
    8d9c:	dc000e15 	stw	r16,56(sp)
    8da0:	d809883a 	mov	r4,sp
    8da4:	880b883a 	mov	r5,r17
    8da8:	dc000904 	addi	r16,sp,36
    8dac:	d8c00115 	stw	r3,4(sp)
    8db0:	d8800015 	stw	r2,0(sp)
    8db4:	d9800215 	stw	r6,8(sp)
    8db8:	dfc01015 	stw	ra,64(sp)
    8dbc:	d9c00315 	stw	r7,12(sp)
    8dc0:	00097fc0 	call	97fc <__unpack_d>
    8dc4:	d9000204 	addi	r4,sp,8
    8dc8:	800b883a 	mov	r5,r16
    8dcc:	00097fc0 	call	97fc <__unpack_d>
    8dd0:	d8800417 	ldw	r2,16(sp)
    8dd4:	00c00044 	movi	r3,1
    8dd8:	01bfffc4 	movi	r6,-1
    8ddc:	1880062e 	bgeu	r3,r2,8df8 <__gtdf2+0x70>
    8de0:	d8800917 	ldw	r2,36(sp)
    8de4:	8809883a 	mov	r4,r17
    8de8:	800b883a 	mov	r5,r16
    8dec:	1880022e 	bgeu	r3,r2,8df8 <__gtdf2+0x70>
    8df0:	00099340 	call	9934 <__fpcmp_parts_d>
    8df4:	100d883a 	mov	r6,r2
    8df8:	3005883a 	mov	r2,r6
    8dfc:	dfc01017 	ldw	ra,64(sp)
    8e00:	dc400f17 	ldw	r17,60(sp)
    8e04:	dc000e17 	ldw	r16,56(sp)
    8e08:	dec01104 	addi	sp,sp,68
    8e0c:	f800283a 	ret

00008e10 <__gedf2>:
    8e10:	deffef04 	addi	sp,sp,-68
    8e14:	dc400f15 	stw	r17,60(sp)
    8e18:	dc400404 	addi	r17,sp,16
    8e1c:	2005883a 	mov	r2,r4
    8e20:	2807883a 	mov	r3,r5
    8e24:	dc000e15 	stw	r16,56(sp)
    8e28:	d809883a 	mov	r4,sp
    8e2c:	880b883a 	mov	r5,r17
    8e30:	dc000904 	addi	r16,sp,36
    8e34:	d8c00115 	stw	r3,4(sp)
    8e38:	d8800015 	stw	r2,0(sp)
    8e3c:	d9800215 	stw	r6,8(sp)
    8e40:	dfc01015 	stw	ra,64(sp)
    8e44:	d9c00315 	stw	r7,12(sp)
    8e48:	00097fc0 	call	97fc <__unpack_d>
    8e4c:	d9000204 	addi	r4,sp,8
    8e50:	800b883a 	mov	r5,r16
    8e54:	00097fc0 	call	97fc <__unpack_d>
    8e58:	d8800417 	ldw	r2,16(sp)
    8e5c:	00c00044 	movi	r3,1
    8e60:	01bfffc4 	movi	r6,-1
    8e64:	1880062e 	bgeu	r3,r2,8e80 <__gedf2+0x70>
    8e68:	d8800917 	ldw	r2,36(sp)
    8e6c:	8809883a 	mov	r4,r17
    8e70:	800b883a 	mov	r5,r16
    8e74:	1880022e 	bgeu	r3,r2,8e80 <__gedf2+0x70>
    8e78:	00099340 	call	9934 <__fpcmp_parts_d>
    8e7c:	100d883a 	mov	r6,r2
    8e80:	3005883a 	mov	r2,r6
    8e84:	dfc01017 	ldw	ra,64(sp)
    8e88:	dc400f17 	ldw	r17,60(sp)
    8e8c:	dc000e17 	ldw	r16,56(sp)
    8e90:	dec01104 	addi	sp,sp,68
    8e94:	f800283a 	ret

00008e98 <__ltdf2>:
    8e98:	deffef04 	addi	sp,sp,-68
    8e9c:	dc400f15 	stw	r17,60(sp)
    8ea0:	dc400404 	addi	r17,sp,16
    8ea4:	2005883a 	mov	r2,r4
    8ea8:	2807883a 	mov	r3,r5
    8eac:	dc000e15 	stw	r16,56(sp)
    8eb0:	d809883a 	mov	r4,sp
    8eb4:	880b883a 	mov	r5,r17
    8eb8:	dc000904 	addi	r16,sp,36
    8ebc:	d8c00115 	stw	r3,4(sp)
    8ec0:	d8800015 	stw	r2,0(sp)
    8ec4:	d9800215 	stw	r6,8(sp)
    8ec8:	dfc01015 	stw	ra,64(sp)
    8ecc:	d9c00315 	stw	r7,12(sp)
    8ed0:	00097fc0 	call	97fc <__unpack_d>
    8ed4:	d9000204 	addi	r4,sp,8
    8ed8:	800b883a 	mov	r5,r16
    8edc:	00097fc0 	call	97fc <__unpack_d>
    8ee0:	d8800417 	ldw	r2,16(sp)
    8ee4:	00c00044 	movi	r3,1
    8ee8:	180d883a 	mov	r6,r3
    8eec:	1880062e 	bgeu	r3,r2,8f08 <__ltdf2+0x70>
    8ef0:	d8800917 	ldw	r2,36(sp)
    8ef4:	8809883a 	mov	r4,r17
    8ef8:	800b883a 	mov	r5,r16
    8efc:	1880022e 	bgeu	r3,r2,8f08 <__ltdf2+0x70>
    8f00:	00099340 	call	9934 <__fpcmp_parts_d>
    8f04:	100d883a 	mov	r6,r2
    8f08:	3005883a 	mov	r2,r6
    8f0c:	dfc01017 	ldw	ra,64(sp)
    8f10:	dc400f17 	ldw	r17,60(sp)
    8f14:	dc000e17 	ldw	r16,56(sp)
    8f18:	dec01104 	addi	sp,sp,68
    8f1c:	f800283a 	ret

00008f20 <__floatsidf>:
    8f20:	2006d7fa 	srli	r3,r4,31
    8f24:	defff604 	addi	sp,sp,-40
    8f28:	008000c4 	movi	r2,3
    8f2c:	dfc00915 	stw	ra,36(sp)
    8f30:	dcc00815 	stw	r19,32(sp)
    8f34:	dc800715 	stw	r18,28(sp)
    8f38:	dc400615 	stw	r17,24(sp)
    8f3c:	dc000515 	stw	r16,20(sp)
    8f40:	d8800015 	stw	r2,0(sp)
    8f44:	d8c00115 	stw	r3,4(sp)
    8f48:	20000f1e 	bne	r4,zero,8f88 <__floatsidf+0x68>
    8f4c:	00800084 	movi	r2,2
    8f50:	d8800015 	stw	r2,0(sp)
    8f54:	d809883a 	mov	r4,sp
    8f58:	00094e80 	call	94e8 <__pack_d>
    8f5c:	1009883a 	mov	r4,r2
    8f60:	180b883a 	mov	r5,r3
    8f64:	2005883a 	mov	r2,r4
    8f68:	2807883a 	mov	r3,r5
    8f6c:	dfc00917 	ldw	ra,36(sp)
    8f70:	dcc00817 	ldw	r19,32(sp)
    8f74:	dc800717 	ldw	r18,28(sp)
    8f78:	dc400617 	ldw	r17,24(sp)
    8f7c:	dc000517 	ldw	r16,20(sp)
    8f80:	dec00a04 	addi	sp,sp,40
    8f84:	f800283a 	ret
    8f88:	00800f04 	movi	r2,60
    8f8c:	1807003a 	cmpeq	r3,r3,zero
    8f90:	d8800215 	stw	r2,8(sp)
    8f94:	18001126 	beq	r3,zero,8fdc <__floatsidf+0xbc>
    8f98:	0027883a 	mov	r19,zero
    8f9c:	2025883a 	mov	r18,r4
    8fa0:	d9000315 	stw	r4,12(sp)
    8fa4:	dcc00415 	stw	r19,16(sp)
    8fa8:	00094680 	call	9468 <__clzsi2>
    8fac:	11000744 	addi	r4,r2,29
    8fb0:	013fe80e 	bge	zero,r4,8f54 <__floatsidf+0x34>
    8fb4:	10bfff44 	addi	r2,r2,-3
    8fb8:	10000c16 	blt	r2,zero,8fec <__floatsidf+0xcc>
    8fbc:	90a2983a 	sll	r17,r18,r2
    8fc0:	0021883a 	mov	r16,zero
    8fc4:	d8800217 	ldw	r2,8(sp)
    8fc8:	dc400415 	stw	r17,16(sp)
    8fcc:	dc000315 	stw	r16,12(sp)
    8fd0:	1105c83a 	sub	r2,r2,r4
    8fd4:	d8800215 	stw	r2,8(sp)
    8fd8:	003fde06 	br	8f54 <__floatsidf+0x34>
    8fdc:	00a00034 	movhi	r2,32768
    8fe0:	20800a26 	beq	r4,r2,900c <__floatsidf+0xec>
    8fe4:	0109c83a 	sub	r4,zero,r4
    8fe8:	003feb06 	br	8f98 <__floatsidf+0x78>
    8fec:	9006d07a 	srli	r3,r18,1
    8ff0:	008007c4 	movi	r2,31
    8ff4:	1105c83a 	sub	r2,r2,r4
    8ff8:	1886d83a 	srl	r3,r3,r2
    8ffc:	9922983a 	sll	r17,r19,r4
    9000:	9120983a 	sll	r16,r18,r4
    9004:	1c62b03a 	or	r17,r3,r17
    9008:	003fee06 	br	8fc4 <__floatsidf+0xa4>
    900c:	0009883a 	mov	r4,zero
    9010:	01707834 	movhi	r5,49632
    9014:	003fd306 	br	8f64 <__floatsidf+0x44>

00009018 <__fixdfsi>:
    9018:	defff804 	addi	sp,sp,-32
    901c:	2005883a 	mov	r2,r4
    9020:	2807883a 	mov	r3,r5
    9024:	d809883a 	mov	r4,sp
    9028:	d9400204 	addi	r5,sp,8
    902c:	d8c00115 	stw	r3,4(sp)
    9030:	d8800015 	stw	r2,0(sp)
    9034:	dfc00715 	stw	ra,28(sp)
    9038:	00097fc0 	call	97fc <__unpack_d>
    903c:	d8c00217 	ldw	r3,8(sp)
    9040:	00800084 	movi	r2,2
    9044:	1880051e 	bne	r3,r2,905c <__fixdfsi+0x44>
    9048:	0007883a 	mov	r3,zero
    904c:	1805883a 	mov	r2,r3
    9050:	dfc00717 	ldw	ra,28(sp)
    9054:	dec00804 	addi	sp,sp,32
    9058:	f800283a 	ret
    905c:	00800044 	movi	r2,1
    9060:	10fff92e 	bgeu	r2,r3,9048 <__fixdfsi+0x30>
    9064:	00800104 	movi	r2,4
    9068:	18800426 	beq	r3,r2,907c <__fixdfsi+0x64>
    906c:	d8c00417 	ldw	r3,16(sp)
    9070:	183ff516 	blt	r3,zero,9048 <__fixdfsi+0x30>
    9074:	00800784 	movi	r2,30
    9078:	10c0080e 	bge	r2,r3,909c <__fixdfsi+0x84>
    907c:	d8800317 	ldw	r2,12(sp)
    9080:	1000121e 	bne	r2,zero,90cc <__fixdfsi+0xb4>
    9084:	00e00034 	movhi	r3,32768
    9088:	18ffffc4 	addi	r3,r3,-1
    908c:	1805883a 	mov	r2,r3
    9090:	dfc00717 	ldw	ra,28(sp)
    9094:	dec00804 	addi	sp,sp,32
    9098:	f800283a 	ret
    909c:	00800f04 	movi	r2,60
    90a0:	10d1c83a 	sub	r8,r2,r3
    90a4:	40bff804 	addi	r2,r8,-32
    90a8:	d9800517 	ldw	r6,20(sp)
    90ac:	d9c00617 	ldw	r7,24(sp)
    90b0:	10000816 	blt	r2,zero,90d4 <__fixdfsi+0xbc>
    90b4:	3888d83a 	srl	r4,r7,r2
    90b8:	d8800317 	ldw	r2,12(sp)
    90bc:	2007883a 	mov	r3,r4
    90c0:	103fe226 	beq	r2,zero,904c <__fixdfsi+0x34>
    90c4:	0107c83a 	sub	r3,zero,r4
    90c8:	003fe006 	br	904c <__fixdfsi+0x34>
    90cc:	00e00034 	movhi	r3,32768
    90d0:	003fde06 	br	904c <__fixdfsi+0x34>
    90d4:	39c7883a 	add	r3,r7,r7
    90d8:	008007c4 	movi	r2,31
    90dc:	1205c83a 	sub	r2,r2,r8
    90e0:	1886983a 	sll	r3,r3,r2
    90e4:	3208d83a 	srl	r4,r6,r8
    90e8:	1908b03a 	or	r4,r3,r4
    90ec:	003ff206 	br	90b8 <__fixdfsi+0xa0>

000090f0 <__floatunsidf>:
    90f0:	defff204 	addi	sp,sp,-56
    90f4:	dfc00d15 	stw	ra,52(sp)
    90f8:	ddc00c15 	stw	r23,48(sp)
    90fc:	dd800b15 	stw	r22,44(sp)
    9100:	dd400a15 	stw	r21,40(sp)
    9104:	dd000915 	stw	r20,36(sp)
    9108:	dcc00815 	stw	r19,32(sp)
    910c:	dc800715 	stw	r18,28(sp)
    9110:	dc400615 	stw	r17,24(sp)
    9114:	dc000515 	stw	r16,20(sp)
    9118:	d8000115 	stw	zero,4(sp)
    911c:	20000f1e 	bne	r4,zero,915c <__floatunsidf+0x6c>
    9120:	00800084 	movi	r2,2
    9124:	d8800015 	stw	r2,0(sp)
    9128:	d809883a 	mov	r4,sp
    912c:	00094e80 	call	94e8 <__pack_d>
    9130:	dfc00d17 	ldw	ra,52(sp)
    9134:	ddc00c17 	ldw	r23,48(sp)
    9138:	dd800b17 	ldw	r22,44(sp)
    913c:	dd400a17 	ldw	r21,40(sp)
    9140:	dd000917 	ldw	r20,36(sp)
    9144:	dcc00817 	ldw	r19,32(sp)
    9148:	dc800717 	ldw	r18,28(sp)
    914c:	dc400617 	ldw	r17,24(sp)
    9150:	dc000517 	ldw	r16,20(sp)
    9154:	dec00e04 	addi	sp,sp,56
    9158:	f800283a 	ret
    915c:	008000c4 	movi	r2,3
    9160:	00c00f04 	movi	r3,60
    9164:	002f883a 	mov	r23,zero
    9168:	202d883a 	mov	r22,r4
    916c:	d8800015 	stw	r2,0(sp)
    9170:	d8c00215 	stw	r3,8(sp)
    9174:	d9000315 	stw	r4,12(sp)
    9178:	ddc00415 	stw	r23,16(sp)
    917c:	00094680 	call	9468 <__clzsi2>
    9180:	12400744 	addi	r9,r2,29
    9184:	48000b16 	blt	r9,zero,91b4 <__floatunsidf+0xc4>
    9188:	483fe726 	beq	r9,zero,9128 <__floatunsidf+0x38>
    918c:	10bfff44 	addi	r2,r2,-3
    9190:	10002e16 	blt	r2,zero,924c <__floatunsidf+0x15c>
    9194:	b0a2983a 	sll	r17,r22,r2
    9198:	0021883a 	mov	r16,zero
    919c:	d8800217 	ldw	r2,8(sp)
    91a0:	dc400415 	stw	r17,16(sp)
    91a4:	dc000315 	stw	r16,12(sp)
    91a8:	1245c83a 	sub	r2,r2,r9
    91ac:	d8800215 	stw	r2,8(sp)
    91b0:	003fdd06 	br	9128 <__floatunsidf+0x38>
    91b4:	0255c83a 	sub	r10,zero,r9
    91b8:	51bff804 	addi	r6,r10,-32
    91bc:	30001b16 	blt	r6,zero,922c <__floatunsidf+0x13c>
    91c0:	b9a8d83a 	srl	r20,r23,r6
    91c4:	002b883a 	mov	r21,zero
    91c8:	000f883a 	mov	r7,zero
    91cc:	01000044 	movi	r4,1
    91d0:	0011883a 	mov	r8,zero
    91d4:	30002516 	blt	r6,zero,926c <__floatunsidf+0x17c>
    91d8:	21a6983a 	sll	r19,r4,r6
    91dc:	0025883a 	mov	r18,zero
    91e0:	00bfffc4 	movi	r2,-1
    91e4:	9089883a 	add	r4,r18,r2
    91e8:	988b883a 	add	r5,r19,r2
    91ec:	248d803a 	cmpltu	r6,r4,r18
    91f0:	314b883a 	add	r5,r6,r5
    91f4:	b104703a 	and	r2,r22,r4
    91f8:	b946703a 	and	r3,r23,r5
    91fc:	10c4b03a 	or	r2,r2,r3
    9200:	10000226 	beq	r2,zero,920c <__floatunsidf+0x11c>
    9204:	01c00044 	movi	r7,1
    9208:	0011883a 	mov	r8,zero
    920c:	d9000217 	ldw	r4,8(sp)
    9210:	a1c4b03a 	or	r2,r20,r7
    9214:	aa06b03a 	or	r3,r21,r8
    9218:	2249c83a 	sub	r4,r4,r9
    921c:	d8c00415 	stw	r3,16(sp)
    9220:	d9000215 	stw	r4,8(sp)
    9224:	d8800315 	stw	r2,12(sp)
    9228:	003fbf06 	br	9128 <__floatunsidf+0x38>
    922c:	bdc7883a 	add	r3,r23,r23
    9230:	008007c4 	movi	r2,31
    9234:	1285c83a 	sub	r2,r2,r10
    9238:	1886983a 	sll	r3,r3,r2
    923c:	b2a8d83a 	srl	r20,r22,r10
    9240:	baaad83a 	srl	r21,r23,r10
    9244:	1d28b03a 	or	r20,r3,r20
    9248:	003fdf06 	br	91c8 <__floatunsidf+0xd8>
    924c:	b006d07a 	srli	r3,r22,1
    9250:	008007c4 	movi	r2,31
    9254:	1245c83a 	sub	r2,r2,r9
    9258:	1886d83a 	srl	r3,r3,r2
    925c:	ba62983a 	sll	r17,r23,r9
    9260:	b260983a 	sll	r16,r22,r9
    9264:	1c62b03a 	or	r17,r3,r17
    9268:	003fcc06 	br	919c <__floatunsidf+0xac>
    926c:	2006d07a 	srli	r3,r4,1
    9270:	008007c4 	movi	r2,31
    9274:	1285c83a 	sub	r2,r2,r10
    9278:	18a6d83a 	srl	r19,r3,r2
    927c:	22a4983a 	sll	r18,r4,r10
    9280:	003fd706 	br	91e0 <__floatunsidf+0xf0>

00009284 <udivmodsi4>:
    9284:	29001b2e 	bgeu	r5,r4,92f4 <udivmodsi4+0x70>
    9288:	28001a16 	blt	r5,zero,92f4 <udivmodsi4+0x70>
    928c:	00800044 	movi	r2,1
    9290:	0007883a 	mov	r3,zero
    9294:	01c007c4 	movi	r7,31
    9298:	00000306 	br	92a8 <udivmodsi4+0x24>
    929c:	19c01326 	beq	r3,r7,92ec <udivmodsi4+0x68>
    92a0:	18c00044 	addi	r3,r3,1
    92a4:	28000416 	blt	r5,zero,92b8 <udivmodsi4+0x34>
    92a8:	294b883a 	add	r5,r5,r5
    92ac:	1085883a 	add	r2,r2,r2
    92b0:	293ffa36 	bltu	r5,r4,929c <udivmodsi4+0x18>
    92b4:	10000d26 	beq	r2,zero,92ec <udivmodsi4+0x68>
    92b8:	0007883a 	mov	r3,zero
    92bc:	21400236 	bltu	r4,r5,92c8 <udivmodsi4+0x44>
    92c0:	2149c83a 	sub	r4,r4,r5
    92c4:	1886b03a 	or	r3,r3,r2
    92c8:	1004d07a 	srli	r2,r2,1
    92cc:	280ad07a 	srli	r5,r5,1
    92d0:	103ffa1e 	bne	r2,zero,92bc <udivmodsi4+0x38>
    92d4:	30000226 	beq	r6,zero,92e0 <udivmodsi4+0x5c>
    92d8:	2005883a 	mov	r2,r4
    92dc:	f800283a 	ret
    92e0:	1809883a 	mov	r4,r3
    92e4:	2005883a 	mov	r2,r4
    92e8:	f800283a 	ret
    92ec:	0007883a 	mov	r3,zero
    92f0:	003ff806 	br	92d4 <udivmodsi4+0x50>
    92f4:	00800044 	movi	r2,1
    92f8:	0007883a 	mov	r3,zero
    92fc:	003fef06 	br	92bc <udivmodsi4+0x38>

00009300 <__divsi3>:
    9300:	defffe04 	addi	sp,sp,-8
    9304:	dc000015 	stw	r16,0(sp)
    9308:	dfc00115 	stw	ra,4(sp)
    930c:	0021883a 	mov	r16,zero
    9310:	20000c16 	blt	r4,zero,9344 <__divsi3+0x44>
    9314:	000d883a 	mov	r6,zero
    9318:	28000e16 	blt	r5,zero,9354 <__divsi3+0x54>
    931c:	00092840 	call	9284 <udivmodsi4>
    9320:	1007883a 	mov	r3,r2
    9324:	8005003a 	cmpeq	r2,r16,zero
    9328:	1000011e 	bne	r2,zero,9330 <__divsi3+0x30>
    932c:	00c7c83a 	sub	r3,zero,r3
    9330:	1805883a 	mov	r2,r3
    9334:	dfc00117 	ldw	ra,4(sp)
    9338:	dc000017 	ldw	r16,0(sp)
    933c:	dec00204 	addi	sp,sp,8
    9340:	f800283a 	ret
    9344:	0109c83a 	sub	r4,zero,r4
    9348:	04000044 	movi	r16,1
    934c:	000d883a 	mov	r6,zero
    9350:	283ff20e 	bge	r5,zero,931c <__divsi3+0x1c>
    9354:	014bc83a 	sub	r5,zero,r5
    9358:	8021003a 	cmpeq	r16,r16,zero
    935c:	003fef06 	br	931c <__divsi3+0x1c>

00009360 <__modsi3>:
    9360:	deffff04 	addi	sp,sp,-4
    9364:	dfc00015 	stw	ra,0(sp)
    9368:	01800044 	movi	r6,1
    936c:	2807883a 	mov	r3,r5
    9370:	20000416 	blt	r4,zero,9384 <__modsi3+0x24>
    9374:	28000c16 	blt	r5,zero,93a8 <__modsi3+0x48>
    9378:	dfc00017 	ldw	ra,0(sp)
    937c:	dec00104 	addi	sp,sp,4
    9380:	00092841 	jmpi	9284 <udivmodsi4>
    9384:	0109c83a 	sub	r4,zero,r4
    9388:	28000b16 	blt	r5,zero,93b8 <__modsi3+0x58>
    938c:	180b883a 	mov	r5,r3
    9390:	01800044 	movi	r6,1
    9394:	00092840 	call	9284 <udivmodsi4>
    9398:	0085c83a 	sub	r2,zero,r2
    939c:	dfc00017 	ldw	ra,0(sp)
    93a0:	dec00104 	addi	sp,sp,4
    93a4:	f800283a 	ret
    93a8:	014bc83a 	sub	r5,zero,r5
    93ac:	dfc00017 	ldw	ra,0(sp)
    93b0:	dec00104 	addi	sp,sp,4
    93b4:	00092841 	jmpi	9284 <udivmodsi4>
    93b8:	0147c83a 	sub	r3,zero,r5
    93bc:	003ff306 	br	938c <__modsi3+0x2c>

000093c0 <__udivsi3>:
    93c0:	000d883a 	mov	r6,zero
    93c4:	00092841 	jmpi	9284 <udivmodsi4>

000093c8 <__umodsi3>:
    93c8:	01800044 	movi	r6,1
    93cc:	00092841 	jmpi	9284 <udivmodsi4>

000093d0 <__muldi3>:
    93d0:	2011883a 	mov	r8,r4
    93d4:	427fffcc 	andi	r9,r8,65535
    93d8:	4018d43a 	srli	r12,r8,16
    93dc:	32bfffcc 	andi	r10,r6,65535
    93e0:	3016d43a 	srli	r11,r6,16
    93e4:	4a85383a 	mul	r2,r9,r10
    93e8:	6295383a 	mul	r10,r12,r10
    93ec:	4ad3383a 	mul	r9,r9,r11
    93f0:	113fffcc 	andi	r4,r2,65535
    93f4:	1004d43a 	srli	r2,r2,16
    93f8:	4a93883a 	add	r9,r9,r10
    93fc:	3807883a 	mov	r3,r7
    9400:	1245883a 	add	r2,r2,r9
    9404:	280f883a 	mov	r7,r5
    9408:	180b883a 	mov	r5,r3
    940c:	1006943a 	slli	r3,r2,16
    9410:	defffd04 	addi	sp,sp,-12
    9414:	dc800215 	stw	r18,8(sp)
    9418:	1907883a 	add	r3,r3,r4
    941c:	dc400115 	stw	r17,4(sp)
    9420:	dc000015 	stw	r16,0(sp)
    9424:	4165383a 	mul	r18,r8,r5
    9428:	31e3383a 	mul	r17,r6,r7
    942c:	1012d43a 	srli	r9,r2,16
    9430:	62d9383a 	mul	r12,r12,r11
    9434:	181f883a 	mov	r15,r3
    9438:	1280022e 	bgeu	r2,r10,9444 <__muldi3+0x74>
    943c:	00800074 	movhi	r2,1
    9440:	6099883a 	add	r12,r12,r2
    9444:	624d883a 	add	r6,r12,r9
    9448:	9187883a 	add	r3,r18,r6
    944c:	88c7883a 	add	r3,r17,r3
    9450:	7805883a 	mov	r2,r15
    9454:	dc800217 	ldw	r18,8(sp)
    9458:	dc400117 	ldw	r17,4(sp)
    945c:	dc000017 	ldw	r16,0(sp)
    9460:	dec00304 	addi	sp,sp,12
    9464:	f800283a 	ret

00009468 <__clzsi2>:
    9468:	00bfffd4 	movui	r2,65535
    946c:	11000e36 	bltu	r2,r4,94a8 <__clzsi2+0x40>
    9470:	00803fc4 	movi	r2,255
    9474:	01400204 	movi	r5,8
    9478:	0007883a 	mov	r3,zero
    947c:	11001036 	bltu	r2,r4,94c0 <__clzsi2+0x58>
    9480:	000b883a 	mov	r5,zero
    9484:	20c6d83a 	srl	r3,r4,r3
    9488:	00800074 	movhi	r2,1
    948c:	10b46b04 	addi	r2,r2,-11860
    9490:	1887883a 	add	r3,r3,r2
    9494:	18800003 	ldbu	r2,0(r3)
    9498:	00c00804 	movi	r3,32
    949c:	2885883a 	add	r2,r5,r2
    94a0:	1885c83a 	sub	r2,r3,r2
    94a4:	f800283a 	ret
    94a8:	01400404 	movi	r5,16
    94ac:	00804034 	movhi	r2,256
    94b0:	10bfffc4 	addi	r2,r2,-1
    94b4:	2807883a 	mov	r3,r5
    94b8:	113ff22e 	bgeu	r2,r4,9484 <__clzsi2+0x1c>
    94bc:	01400604 	movi	r5,24
    94c0:	2807883a 	mov	r3,r5
    94c4:	20c6d83a 	srl	r3,r4,r3
    94c8:	00800074 	movhi	r2,1
    94cc:	10b46b04 	addi	r2,r2,-11860
    94d0:	1887883a 	add	r3,r3,r2
    94d4:	18800003 	ldbu	r2,0(r3)
    94d8:	00c00804 	movi	r3,32
    94dc:	2885883a 	add	r2,r5,r2
    94e0:	1885c83a 	sub	r2,r3,r2
    94e4:	f800283a 	ret

000094e8 <__pack_d>:
    94e8:	20c00017 	ldw	r3,0(r4)
    94ec:	defffd04 	addi	sp,sp,-12
    94f0:	dc000015 	stw	r16,0(sp)
    94f4:	dc800215 	stw	r18,8(sp)
    94f8:	dc400115 	stw	r17,4(sp)
    94fc:	00800044 	movi	r2,1
    9500:	22000317 	ldw	r8,12(r4)
    9504:	001f883a 	mov	r15,zero
    9508:	22400417 	ldw	r9,16(r4)
    950c:	24000117 	ldw	r16,4(r4)
    9510:	10c0552e 	bgeu	r2,r3,9668 <__pack_d+0x180>
    9514:	00800104 	movi	r2,4
    9518:	18804f26 	beq	r3,r2,9658 <__pack_d+0x170>
    951c:	00800084 	movi	r2,2
    9520:	18800226 	beq	r3,r2,952c <__pack_d+0x44>
    9524:	4244b03a 	or	r2,r8,r9
    9528:	10001a1e 	bne	r2,zero,9594 <__pack_d+0xac>
    952c:	000d883a 	mov	r6,zero
    9530:	000f883a 	mov	r7,zero
    9534:	0011883a 	mov	r8,zero
    9538:	00800434 	movhi	r2,16
    953c:	10bfffc4 	addi	r2,r2,-1
    9540:	301d883a 	mov	r14,r6
    9544:	3884703a 	and	r2,r7,r2
    9548:	400a953a 	slli	r5,r8,20
    954c:	79bffc2c 	andhi	r6,r15,65520
    9550:	308cb03a 	or	r6,r6,r2
    9554:	00e00434 	movhi	r3,32784
    9558:	18ffffc4 	addi	r3,r3,-1
    955c:	800497fa 	slli	r2,r16,31
    9560:	30c6703a 	and	r3,r6,r3
    9564:	1946b03a 	or	r3,r3,r5
    9568:	01600034 	movhi	r5,32768
    956c:	297fffc4 	addi	r5,r5,-1
    9570:	194a703a 	and	r5,r3,r5
    9574:	288ab03a 	or	r5,r5,r2
    9578:	2807883a 	mov	r3,r5
    957c:	7005883a 	mov	r2,r14
    9580:	dc800217 	ldw	r18,8(sp)
    9584:	dc400117 	ldw	r17,4(sp)
    9588:	dc000017 	ldw	r16,0(sp)
    958c:	dec00304 	addi	sp,sp,12
    9590:	f800283a 	ret
    9594:	21000217 	ldw	r4,8(r4)
    9598:	00bf0084 	movi	r2,-1022
    959c:	20803f16 	blt	r4,r2,969c <__pack_d+0x1b4>
    95a0:	0080ffc4 	movi	r2,1023
    95a4:	11002c16 	blt	r2,r4,9658 <__pack_d+0x170>
    95a8:	00803fc4 	movi	r2,255
    95ac:	408c703a 	and	r6,r8,r2
    95b0:	00802004 	movi	r2,128
    95b4:	0007883a 	mov	r3,zero
    95b8:	000f883a 	mov	r7,zero
    95bc:	2280ffc4 	addi	r10,r4,1023
    95c0:	30801e26 	beq	r6,r2,963c <__pack_d+0x154>
    95c4:	00801fc4 	movi	r2,127
    95c8:	4089883a 	add	r4,r8,r2
    95cc:	220d803a 	cmpltu	r6,r4,r8
    95d0:	324d883a 	add	r6,r6,r9
    95d4:	2011883a 	mov	r8,r4
    95d8:	3013883a 	mov	r9,r6
    95dc:	00880034 	movhi	r2,8192
    95e0:	10bfffc4 	addi	r2,r2,-1
    95e4:	12400d36 	bltu	r2,r9,961c <__pack_d+0x134>
    95e8:	4804963a 	slli	r2,r9,24
    95ec:	400cd23a 	srli	r6,r8,8
    95f0:	480ed23a 	srli	r7,r9,8
    95f4:	013fffc4 	movi	r4,-1
    95f8:	118cb03a 	or	r6,r2,r6
    95fc:	01400434 	movhi	r5,16
    9600:	297fffc4 	addi	r5,r5,-1
    9604:	3104703a 	and	r2,r6,r4
    9608:	3946703a 	and	r3,r7,r5
    960c:	5201ffcc 	andi	r8,r10,2047
    9610:	100d883a 	mov	r6,r2
    9614:	180f883a 	mov	r7,r3
    9618:	003fc706 	br	9538 <__pack_d+0x50>
    961c:	480897fa 	slli	r4,r9,31
    9620:	4004d07a 	srli	r2,r8,1
    9624:	4806d07a 	srli	r3,r9,1
    9628:	52800044 	addi	r10,r10,1
    962c:	2084b03a 	or	r2,r4,r2
    9630:	1011883a 	mov	r8,r2
    9634:	1813883a 	mov	r9,r3
    9638:	003feb06 	br	95e8 <__pack_d+0x100>
    963c:	383fe11e 	bne	r7,zero,95c4 <__pack_d+0xdc>
    9640:	01004004 	movi	r4,256
    9644:	4104703a 	and	r2,r8,r4
    9648:	10c4b03a 	or	r2,r2,r3
    964c:	103fe326 	beq	r2,zero,95dc <__pack_d+0xf4>
    9650:	3005883a 	mov	r2,r6
    9654:	003fdc06 	br	95c8 <__pack_d+0xe0>
    9658:	000d883a 	mov	r6,zero
    965c:	000f883a 	mov	r7,zero
    9660:	0201ffc4 	movi	r8,2047
    9664:	003fb406 	br	9538 <__pack_d+0x50>
    9668:	0005883a 	mov	r2,zero
    966c:	00c00234 	movhi	r3,8
    9670:	408cb03a 	or	r6,r8,r2
    9674:	48ceb03a 	or	r7,r9,r3
    9678:	013fffc4 	movi	r4,-1
    967c:	01400434 	movhi	r5,16
    9680:	297fffc4 	addi	r5,r5,-1
    9684:	3104703a 	and	r2,r6,r4
    9688:	3946703a 	and	r3,r7,r5
    968c:	100d883a 	mov	r6,r2
    9690:	180f883a 	mov	r7,r3
    9694:	0201ffc4 	movi	r8,2047
    9698:	003fa706 	br	9538 <__pack_d+0x50>
    969c:	1109c83a 	sub	r4,r2,r4
    96a0:	00800e04 	movi	r2,56
    96a4:	11004316 	blt	r2,r4,97b4 <__pack_d+0x2cc>
    96a8:	21fff804 	addi	r7,r4,-32
    96ac:	38004516 	blt	r7,zero,97c4 <__pack_d+0x2dc>
    96b0:	49d8d83a 	srl	r12,r9,r7
    96b4:	001b883a 	mov	r13,zero
    96b8:	0023883a 	mov	r17,zero
    96bc:	01400044 	movi	r5,1
    96c0:	0025883a 	mov	r18,zero
    96c4:	38004716 	blt	r7,zero,97e4 <__pack_d+0x2fc>
    96c8:	29d6983a 	sll	r11,r5,r7
    96cc:	0015883a 	mov	r10,zero
    96d0:	00bfffc4 	movi	r2,-1
    96d4:	5089883a 	add	r4,r10,r2
    96d8:	588b883a 	add	r5,r11,r2
    96dc:	228d803a 	cmpltu	r6,r4,r10
    96e0:	314b883a 	add	r5,r6,r5
    96e4:	4104703a 	and	r2,r8,r4
    96e8:	4946703a 	and	r3,r9,r5
    96ec:	10c4b03a 	or	r2,r2,r3
    96f0:	10000226 	beq	r2,zero,96fc <__pack_d+0x214>
    96f4:	04400044 	movi	r17,1
    96f8:	0025883a 	mov	r18,zero
    96fc:	00803fc4 	movi	r2,255
    9700:	644eb03a 	or	r7,r12,r17
    9704:	3892703a 	and	r9,r7,r2
    9708:	00802004 	movi	r2,128
    970c:	6c90b03a 	or	r8,r13,r18
    9710:	0015883a 	mov	r10,zero
    9714:	48801626 	beq	r9,r2,9770 <__pack_d+0x288>
    9718:	01001fc4 	movi	r4,127
    971c:	3905883a 	add	r2,r7,r4
    9720:	11cd803a 	cmpltu	r6,r2,r7
    9724:	320d883a 	add	r6,r6,r8
    9728:	100f883a 	mov	r7,r2
    972c:	00840034 	movhi	r2,4096
    9730:	10bfffc4 	addi	r2,r2,-1
    9734:	3011883a 	mov	r8,r6
    9738:	0007883a 	mov	r3,zero
    973c:	11801b36 	bltu	r2,r6,97ac <__pack_d+0x2c4>
    9740:	4004963a 	slli	r2,r8,24
    9744:	3808d23a 	srli	r4,r7,8
    9748:	400ad23a 	srli	r5,r8,8
    974c:	1813883a 	mov	r9,r3
    9750:	1108b03a 	or	r4,r2,r4
    9754:	00bfffc4 	movi	r2,-1
    9758:	00c00434 	movhi	r3,16
    975c:	18ffffc4 	addi	r3,r3,-1
    9760:	208c703a 	and	r6,r4,r2
    9764:	28ce703a 	and	r7,r5,r3
    9768:	4a01ffcc 	andi	r8,r9,2047
    976c:	003f7206 	br	9538 <__pack_d+0x50>
    9770:	503fe91e 	bne	r10,zero,9718 <__pack_d+0x230>
    9774:	01004004 	movi	r4,256
    9778:	3904703a 	and	r2,r7,r4
    977c:	0007883a 	mov	r3,zero
    9780:	10c4b03a 	or	r2,r2,r3
    9784:	10000626 	beq	r2,zero,97a0 <__pack_d+0x2b8>
    9788:	3a45883a 	add	r2,r7,r9
    978c:	11cd803a 	cmpltu	r6,r2,r7
    9790:	320d883a 	add	r6,r6,r8
    9794:	100f883a 	mov	r7,r2
    9798:	3011883a 	mov	r8,r6
    979c:	0007883a 	mov	r3,zero
    97a0:	00840034 	movhi	r2,4096
    97a4:	10bfffc4 	addi	r2,r2,-1
    97a8:	123fe52e 	bgeu	r2,r8,9740 <__pack_d+0x258>
    97ac:	00c00044 	movi	r3,1
    97b0:	003fe306 	br	9740 <__pack_d+0x258>
    97b4:	0009883a 	mov	r4,zero
    97b8:	0013883a 	mov	r9,zero
    97bc:	000b883a 	mov	r5,zero
    97c0:	003fe406 	br	9754 <__pack_d+0x26c>
    97c4:	4a47883a 	add	r3,r9,r9
    97c8:	008007c4 	movi	r2,31
    97cc:	1105c83a 	sub	r2,r2,r4
    97d0:	1886983a 	sll	r3,r3,r2
    97d4:	4118d83a 	srl	r12,r8,r4
    97d8:	491ad83a 	srl	r13,r9,r4
    97dc:	1b18b03a 	or	r12,r3,r12
    97e0:	003fb506 	br	96b8 <__pack_d+0x1d0>
    97e4:	2806d07a 	srli	r3,r5,1
    97e8:	008007c4 	movi	r2,31
    97ec:	1105c83a 	sub	r2,r2,r4
    97f0:	1896d83a 	srl	r11,r3,r2
    97f4:	2914983a 	sll	r10,r5,r4
    97f8:	003fb506 	br	96d0 <__pack_d+0x1e8>

000097fc <__unpack_d>:
    97fc:	20c00117 	ldw	r3,4(r4)
    9800:	22400017 	ldw	r9,0(r4)
    9804:	00800434 	movhi	r2,16
    9808:	10bfffc4 	addi	r2,r2,-1
    980c:	1808d53a 	srli	r4,r3,20
    9810:	180cd7fa 	srli	r6,r3,31
    9814:	1894703a 	and	r10,r3,r2
    9818:	2201ffcc 	andi	r8,r4,2047
    981c:	281b883a 	mov	r13,r5
    9820:	4817883a 	mov	r11,r9
    9824:	29800115 	stw	r6,4(r5)
    9828:	5019883a 	mov	r12,r10
    982c:	40001e1e 	bne	r8,zero,98a8 <__unpack_d+0xac>
    9830:	4a84b03a 	or	r2,r9,r10
    9834:	10001926 	beq	r2,zero,989c <__unpack_d+0xa0>
    9838:	4804d63a 	srli	r2,r9,24
    983c:	500c923a 	slli	r6,r10,8
    9840:	013f0084 	movi	r4,-1022
    9844:	00c40034 	movhi	r3,4096
    9848:	18ffffc4 	addi	r3,r3,-1
    984c:	118cb03a 	or	r6,r2,r6
    9850:	008000c4 	movi	r2,3
    9854:	480a923a 	slli	r5,r9,8
    9858:	68800015 	stw	r2,0(r13)
    985c:	69000215 	stw	r4,8(r13)
    9860:	19800b36 	bltu	r3,r6,9890 <__unpack_d+0x94>
    9864:	200f883a 	mov	r7,r4
    9868:	1811883a 	mov	r8,r3
    986c:	2945883a 	add	r2,r5,r5
    9870:	1149803a 	cmpltu	r4,r2,r5
    9874:	3187883a 	add	r3,r6,r6
    9878:	20c9883a 	add	r4,r4,r3
    987c:	100b883a 	mov	r5,r2
    9880:	200d883a 	mov	r6,r4
    9884:	39ffffc4 	addi	r7,r7,-1
    9888:	413ff82e 	bgeu	r8,r4,986c <__unpack_d+0x70>
    988c:	69c00215 	stw	r7,8(r13)
    9890:	69800415 	stw	r6,16(r13)
    9894:	69400315 	stw	r5,12(r13)
    9898:	f800283a 	ret
    989c:	00800084 	movi	r2,2
    98a0:	28800015 	stw	r2,0(r5)
    98a4:	f800283a 	ret
    98a8:	0081ffc4 	movi	r2,2047
    98ac:	40800f26 	beq	r8,r2,98ec <__unpack_d+0xf0>
    98b0:	480cd63a 	srli	r6,r9,24
    98b4:	5006923a 	slli	r3,r10,8
    98b8:	4804923a 	slli	r2,r9,8
    98bc:	0009883a 	mov	r4,zero
    98c0:	30c6b03a 	or	r3,r6,r3
    98c4:	01440034 	movhi	r5,4096
    98c8:	110cb03a 	or	r6,r2,r4
    98cc:	423f0044 	addi	r8,r8,-1023
    98d0:	194eb03a 	or	r7,r3,r5
    98d4:	008000c4 	movi	r2,3
    98d8:	69c00415 	stw	r7,16(r13)
    98dc:	6a000215 	stw	r8,8(r13)
    98e0:	68800015 	stw	r2,0(r13)
    98e4:	69800315 	stw	r6,12(r13)
    98e8:	f800283a 	ret
    98ec:	4a84b03a 	or	r2,r9,r10
    98f0:	1000031e 	bne	r2,zero,9900 <__unpack_d+0x104>
    98f4:	00800104 	movi	r2,4
    98f8:	28800015 	stw	r2,0(r5)
    98fc:	f800283a 	ret
    9900:	0009883a 	mov	r4,zero
    9904:	01400234 	movhi	r5,8
    9908:	4904703a 	and	r2,r9,r4
    990c:	5146703a 	and	r3,r10,r5
    9910:	10c4b03a 	or	r2,r2,r3
    9914:	10000526 	beq	r2,zero,992c <__unpack_d+0x130>
    9918:	00800044 	movi	r2,1
    991c:	68800015 	stw	r2,0(r13)
    9920:	6b000415 	stw	r12,16(r13)
    9924:	6ac00315 	stw	r11,12(r13)
    9928:	f800283a 	ret
    992c:	68000015 	stw	zero,0(r13)
    9930:	003ffb06 	br	9920 <__unpack_d+0x124>

00009934 <__fpcmp_parts_d>:
    9934:	21800017 	ldw	r6,0(r4)
    9938:	00c00044 	movi	r3,1
    993c:	19800a2e 	bgeu	r3,r6,9968 <__fpcmp_parts_d+0x34>
    9940:	28800017 	ldw	r2,0(r5)
    9944:	1880082e 	bgeu	r3,r2,9968 <__fpcmp_parts_d+0x34>
    9948:	00c00104 	movi	r3,4
    994c:	30c02626 	beq	r6,r3,99e8 <__fpcmp_parts_d+0xb4>
    9950:	10c02226 	beq	r2,r3,99dc <__fpcmp_parts_d+0xa8>
    9954:	00c00084 	movi	r3,2
    9958:	30c00526 	beq	r6,r3,9970 <__fpcmp_parts_d+0x3c>
    995c:	10c0071e 	bne	r2,r3,997c <__fpcmp_parts_d+0x48>
    9960:	20800117 	ldw	r2,4(r4)
    9964:	1000091e 	bne	r2,zero,998c <__fpcmp_parts_d+0x58>
    9968:	00800044 	movi	r2,1
    996c:	f800283a 	ret
    9970:	10c01a1e 	bne	r2,r3,99dc <__fpcmp_parts_d+0xa8>
    9974:	0005883a 	mov	r2,zero
    9978:	f800283a 	ret
    997c:	22000117 	ldw	r8,4(r4)
    9980:	28800117 	ldw	r2,4(r5)
    9984:	40800326 	beq	r8,r2,9994 <__fpcmp_parts_d+0x60>
    9988:	403ff726 	beq	r8,zero,9968 <__fpcmp_parts_d+0x34>
    998c:	00bfffc4 	movi	r2,-1
    9990:	f800283a 	ret
    9994:	20c00217 	ldw	r3,8(r4)
    9998:	28800217 	ldw	r2,8(r5)
    999c:	10fffa16 	blt	r2,r3,9988 <__fpcmp_parts_d+0x54>
    99a0:	18800916 	blt	r3,r2,99c8 <__fpcmp_parts_d+0x94>
    99a4:	21c00417 	ldw	r7,16(r4)
    99a8:	28c00417 	ldw	r3,16(r5)
    99ac:	21800317 	ldw	r6,12(r4)
    99b0:	28800317 	ldw	r2,12(r5)
    99b4:	19fff436 	bltu	r3,r7,9988 <__fpcmp_parts_d+0x54>
    99b8:	38c00526 	beq	r7,r3,99d0 <__fpcmp_parts_d+0x9c>
    99bc:	38c00236 	bltu	r7,r3,99c8 <__fpcmp_parts_d+0x94>
    99c0:	19ffec1e 	bne	r3,r7,9974 <__fpcmp_parts_d+0x40>
    99c4:	30bfeb2e 	bgeu	r6,r2,9974 <__fpcmp_parts_d+0x40>
    99c8:	403fe71e 	bne	r8,zero,9968 <__fpcmp_parts_d+0x34>
    99cc:	003fef06 	br	998c <__fpcmp_parts_d+0x58>
    99d0:	11bffa2e 	bgeu	r2,r6,99bc <__fpcmp_parts_d+0x88>
    99d4:	403fe426 	beq	r8,zero,9968 <__fpcmp_parts_d+0x34>
    99d8:	003fec06 	br	998c <__fpcmp_parts_d+0x58>
    99dc:	28800117 	ldw	r2,4(r5)
    99e0:	103fe11e 	bne	r2,zero,9968 <__fpcmp_parts_d+0x34>
    99e4:	003fe906 	br	998c <__fpcmp_parts_d+0x58>
    99e8:	11bfdd1e 	bne	r2,r6,9960 <__fpcmp_parts_d+0x2c>
    99ec:	28c00117 	ldw	r3,4(r5)
    99f0:	20800117 	ldw	r2,4(r4)
    99f4:	1885c83a 	sub	r2,r3,r2
    99f8:	f800283a 	ret

000099fc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    99fc:	defff804 	addi	sp,sp,-32
    9a00:	dfc00715 	stw	ra,28(sp)
    9a04:	df000615 	stw	fp,24(sp)
    9a08:	df000604 	addi	fp,sp,24
    9a0c:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    9a10:	e0bffc17 	ldw	r2,-16(fp)
    9a14:	1004803a 	cmplt	r2,r2,zero
    9a18:	1000081e 	bne	r2,zero,9a3c <close+0x40>
    9a1c:	e0bffc17 	ldw	r2,-16(fp)
    9a20:	10800324 	muli	r2,r2,12
    9a24:	1007883a 	mov	r3,r2
    9a28:	00800074 	movhi	r2,1
    9a2c:	10b6cf04 	addi	r2,r2,-9412
    9a30:	1887883a 	add	r3,r3,r2
    9a34:	e0ffff15 	stw	r3,-4(fp)
    9a38:	00000106 	br	9a40 <close+0x44>
    9a3c:	e03fff15 	stw	zero,-4(fp)
    9a40:	e0bfff17 	ldw	r2,-4(fp)
    9a44:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
    9a48:	e0bffb17 	ldw	r2,-20(fp)
    9a4c:	1005003a 	cmpeq	r2,r2,zero
    9a50:	10001d1e 	bne	r2,zero,9ac8 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    9a54:	e0bffb17 	ldw	r2,-20(fp)
    9a58:	10800017 	ldw	r2,0(r2)
    9a5c:	10800417 	ldw	r2,16(r2)
    9a60:	1005003a 	cmpeq	r2,r2,zero
    9a64:	1000071e 	bne	r2,zero,9a84 <close+0x88>
    9a68:	e0bffb17 	ldw	r2,-20(fp)
    9a6c:	10800017 	ldw	r2,0(r2)
    9a70:	10800417 	ldw	r2,16(r2)
    9a74:	e13ffb17 	ldw	r4,-20(fp)
    9a78:	103ee83a 	callr	r2
    9a7c:	e0bffe15 	stw	r2,-8(fp)
    9a80:	00000106 	br	9a88 <close+0x8c>
    9a84:	e03ffe15 	stw	zero,-8(fp)
    9a88:	e0bffe17 	ldw	r2,-8(fp)
    9a8c:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    9a90:	e13ffc17 	ldw	r4,-16(fp)
    9a94:	000a2400 	call	a240 <alt_release_fd>
    if (rval < 0)
    9a98:	e0bffa17 	ldw	r2,-24(fp)
    9a9c:	1004403a 	cmpge	r2,r2,zero
    9aa0:	1000071e 	bne	r2,zero,9ac0 <close+0xc4>
    {
      ALT_ERRNO = -rval;
    9aa4:	0009af80 	call	9af8 <alt_get_errno>
    9aa8:	e0fffa17 	ldw	r3,-24(fp)
    9aac:	00c7c83a 	sub	r3,zero,r3
    9ab0:	10c00015 	stw	r3,0(r2)
      return -1;
    9ab4:	00bfffc4 	movi	r2,-1
    9ab8:	e0bffd15 	stw	r2,-12(fp)
    9abc:	00000806 	br	9ae0 <close+0xe4>
    }
    return 0;
    9ac0:	e03ffd15 	stw	zero,-12(fp)
    9ac4:	00000606 	br	9ae0 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    9ac8:	0009af80 	call	9af8 <alt_get_errno>
    9acc:	1007883a 	mov	r3,r2
    9ad0:	00801444 	movi	r2,81
    9ad4:	18800015 	stw	r2,0(r3)
    return -1;
    9ad8:	00bfffc4 	movi	r2,-1
    9adc:	e0bffd15 	stw	r2,-12(fp)
    9ae0:	e0bffd17 	ldw	r2,-12(fp)
  }
}
    9ae4:	e037883a 	mov	sp,fp
    9ae8:	dfc00117 	ldw	ra,4(sp)
    9aec:	df000017 	ldw	fp,0(sp)
    9af0:	dec00204 	addi	sp,sp,8
    9af4:	f800283a 	ret

00009af8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9af8:	defffd04 	addi	sp,sp,-12
    9afc:	dfc00215 	stw	ra,8(sp)
    9b00:	df000115 	stw	fp,4(sp)
    9b04:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    9b08:	00800074 	movhi	r2,1
    9b0c:	10bbb404 	addi	r2,r2,-4400
    9b10:	10800017 	ldw	r2,0(r2)
    9b14:	1005003a 	cmpeq	r2,r2,zero
    9b18:	1000061e 	bne	r2,zero,9b34 <alt_get_errno+0x3c>
    9b1c:	00800074 	movhi	r2,1
    9b20:	10bbb404 	addi	r2,r2,-4400
    9b24:	10800017 	ldw	r2,0(r2)
    9b28:	103ee83a 	callr	r2
    9b2c:	e0bfff15 	stw	r2,-4(fp)
    9b30:	00000306 	br	9b40 <alt_get_errno+0x48>
    9b34:	00800074 	movhi	r2,1
    9b38:	1082b804 	addi	r2,r2,2784
    9b3c:	e0bfff15 	stw	r2,-4(fp)
    9b40:	e0bfff17 	ldw	r2,-4(fp)
}
    9b44:	e037883a 	mov	sp,fp
    9b48:	dfc00117 	ldw	ra,4(sp)
    9b4c:	df000017 	ldw	fp,0(sp)
    9b50:	dec00204 	addi	sp,sp,8
    9b54:	f800283a 	ret

00009b58 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    9b58:	defffc04 	addi	sp,sp,-16
    9b5c:	df000315 	stw	fp,12(sp)
    9b60:	df000304 	addi	fp,sp,12
    9b64:	e13ffd15 	stw	r4,-12(fp)
    9b68:	e17ffe15 	stw	r5,-8(fp)
    9b6c:	e1bfff15 	stw	r6,-4(fp)
  return len;
    9b70:	e0bfff17 	ldw	r2,-4(fp)
}
    9b74:	e037883a 	mov	sp,fp
    9b78:	df000017 	ldw	fp,0(sp)
    9b7c:	dec00104 	addi	sp,sp,4
    9b80:	f800283a 	ret

00009b84 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    9b84:	defff904 	addi	sp,sp,-28
    9b88:	dfc00615 	stw	ra,24(sp)
    9b8c:	df000515 	stw	fp,20(sp)
    9b90:	df000504 	addi	fp,sp,20
    9b94:	e13ffc15 	stw	r4,-16(fp)
    9b98:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    9b9c:	e0bffc17 	ldw	r2,-16(fp)
    9ba0:	1004803a 	cmplt	r2,r2,zero
    9ba4:	1000081e 	bne	r2,zero,9bc8 <fstat+0x44>
    9ba8:	e0bffc17 	ldw	r2,-16(fp)
    9bac:	10800324 	muli	r2,r2,12
    9bb0:	1007883a 	mov	r3,r2
    9bb4:	00800074 	movhi	r2,1
    9bb8:	10b6cf04 	addi	r2,r2,-9412
    9bbc:	1887883a 	add	r3,r3,r2
    9bc0:	e0ffff15 	stw	r3,-4(fp)
    9bc4:	00000106 	br	9bcc <fstat+0x48>
    9bc8:	e03fff15 	stw	zero,-4(fp)
    9bcc:	e0bfff17 	ldw	r2,-4(fp)
    9bd0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    9bd4:	e0bffb17 	ldw	r2,-20(fp)
    9bd8:	1005003a 	cmpeq	r2,r2,zero
    9bdc:	1000121e 	bne	r2,zero,9c28 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    9be0:	e0bffb17 	ldw	r2,-20(fp)
    9be4:	10800017 	ldw	r2,0(r2)
    9be8:	10800817 	ldw	r2,32(r2)
    9bec:	1005003a 	cmpeq	r2,r2,zero
    9bf0:	1000081e 	bne	r2,zero,9c14 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
    9bf4:	e0bffb17 	ldw	r2,-20(fp)
    9bf8:	10800017 	ldw	r2,0(r2)
    9bfc:	10800817 	ldw	r2,32(r2)
    9c00:	e13ffb17 	ldw	r4,-20(fp)
    9c04:	e17ffd17 	ldw	r5,-12(fp)
    9c08:	103ee83a 	callr	r2
    9c0c:	e0bffe15 	stw	r2,-8(fp)
    9c10:	00000b06 	br	9c40 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    9c14:	e0fffd17 	ldw	r3,-12(fp)
    9c18:	00880004 	movi	r2,8192
    9c1c:	18800115 	stw	r2,4(r3)
      return 0;
    9c20:	e03ffe15 	stw	zero,-8(fp)
    9c24:	00000606 	br	9c40 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    9c28:	0009c580 	call	9c58 <alt_get_errno>
    9c2c:	1007883a 	mov	r3,r2
    9c30:	00801444 	movi	r2,81
    9c34:	18800015 	stw	r2,0(r3)
    return -1;
    9c38:	00bfffc4 	movi	r2,-1
    9c3c:	e0bffe15 	stw	r2,-8(fp)
    9c40:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    9c44:	e037883a 	mov	sp,fp
    9c48:	dfc00117 	ldw	ra,4(sp)
    9c4c:	df000017 	ldw	fp,0(sp)
    9c50:	dec00204 	addi	sp,sp,8
    9c54:	f800283a 	ret

00009c58 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9c58:	defffd04 	addi	sp,sp,-12
    9c5c:	dfc00215 	stw	ra,8(sp)
    9c60:	df000115 	stw	fp,4(sp)
    9c64:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    9c68:	00800074 	movhi	r2,1
    9c6c:	10bbb404 	addi	r2,r2,-4400
    9c70:	10800017 	ldw	r2,0(r2)
    9c74:	1005003a 	cmpeq	r2,r2,zero
    9c78:	1000061e 	bne	r2,zero,9c94 <alt_get_errno+0x3c>
    9c7c:	00800074 	movhi	r2,1
    9c80:	10bbb404 	addi	r2,r2,-4400
    9c84:	10800017 	ldw	r2,0(r2)
    9c88:	103ee83a 	callr	r2
    9c8c:	e0bfff15 	stw	r2,-4(fp)
    9c90:	00000306 	br	9ca0 <alt_get_errno+0x48>
    9c94:	00800074 	movhi	r2,1
    9c98:	1082b804 	addi	r2,r2,2784
    9c9c:	e0bfff15 	stw	r2,-4(fp)
    9ca0:	e0bfff17 	ldw	r2,-4(fp)
}
    9ca4:	e037883a 	mov	sp,fp
    9ca8:	dfc00117 	ldw	ra,4(sp)
    9cac:	df000017 	ldw	fp,0(sp)
    9cb0:	dec00204 	addi	sp,sp,8
    9cb4:	f800283a 	ret

00009cb8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    9cb8:	deffeb04 	addi	sp,sp,-84
    9cbc:	dfc01415 	stw	ra,80(sp)
    9cc0:	df001315 	stw	fp,76(sp)
    9cc4:	df001304 	addi	fp,sp,76
    9cc8:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    9ccc:	e0bffd17 	ldw	r2,-12(fp)
    9cd0:	1004803a 	cmplt	r2,r2,zero
    9cd4:	1000081e 	bne	r2,zero,9cf8 <isatty+0x40>
    9cd8:	e0bffd17 	ldw	r2,-12(fp)
    9cdc:	10800324 	muli	r2,r2,12
    9ce0:	1007883a 	mov	r3,r2
    9ce4:	00800074 	movhi	r2,1
    9ce8:	10b6cf04 	addi	r2,r2,-9412
    9cec:	1887883a 	add	r3,r3,r2
    9cf0:	e0ffff15 	stw	r3,-4(fp)
    9cf4:	00000106 	br	9cfc <isatty+0x44>
    9cf8:	e03fff15 	stw	zero,-4(fp)
    9cfc:	e0bfff17 	ldw	r2,-4(fp)
    9d00:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
    9d04:	e0bfed17 	ldw	r2,-76(fp)
    9d08:	1005003a 	cmpeq	r2,r2,zero
    9d0c:	10000f1e 	bne	r2,zero,9d4c <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    9d10:	e0bfed17 	ldw	r2,-76(fp)
    9d14:	10800017 	ldw	r2,0(r2)
    9d18:	10800817 	ldw	r2,32(r2)
    9d1c:	1004c03a 	cmpne	r2,r2,zero
    9d20:	1000031e 	bne	r2,zero,9d30 <isatty+0x78>
    {
      return 1;
    9d24:	00800044 	movi	r2,1
    9d28:	e0bffe15 	stw	r2,-8(fp)
    9d2c:	00000c06 	br	9d60 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    9d30:	e17fee04 	addi	r5,fp,-72
    9d34:	e13ffd17 	ldw	r4,-12(fp)
    9d38:	0009b840 	call	9b84 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    9d3c:	e0bfef17 	ldw	r2,-68(fp)
    9d40:	10880020 	cmpeqi	r2,r2,8192
    9d44:	e0bffe15 	stw	r2,-8(fp)
    9d48:	00000506 	br	9d60 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    9d4c:	0009d780 	call	9d78 <alt_get_errno>
    9d50:	1007883a 	mov	r3,r2
    9d54:	00801444 	movi	r2,81
    9d58:	18800015 	stw	r2,0(r3)
    return 0;
    9d5c:	e03ffe15 	stw	zero,-8(fp)
    9d60:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    9d64:	e037883a 	mov	sp,fp
    9d68:	dfc00117 	ldw	ra,4(sp)
    9d6c:	df000017 	ldw	fp,0(sp)
    9d70:	dec00204 	addi	sp,sp,8
    9d74:	f800283a 	ret

00009d78 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9d78:	defffd04 	addi	sp,sp,-12
    9d7c:	dfc00215 	stw	ra,8(sp)
    9d80:	df000115 	stw	fp,4(sp)
    9d84:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    9d88:	00800074 	movhi	r2,1
    9d8c:	10bbb404 	addi	r2,r2,-4400
    9d90:	10800017 	ldw	r2,0(r2)
    9d94:	1005003a 	cmpeq	r2,r2,zero
    9d98:	1000061e 	bne	r2,zero,9db4 <alt_get_errno+0x3c>
    9d9c:	00800074 	movhi	r2,1
    9da0:	10bbb404 	addi	r2,r2,-4400
    9da4:	10800017 	ldw	r2,0(r2)
    9da8:	103ee83a 	callr	r2
    9dac:	e0bfff15 	stw	r2,-4(fp)
    9db0:	00000306 	br	9dc0 <alt_get_errno+0x48>
    9db4:	00800074 	movhi	r2,1
    9db8:	1082b804 	addi	r2,r2,2784
    9dbc:	e0bfff15 	stw	r2,-4(fp)
    9dc0:	e0bfff17 	ldw	r2,-4(fp)
}
    9dc4:	e037883a 	mov	sp,fp
    9dc8:	dfc00117 	ldw	ra,4(sp)
    9dcc:	df000017 	ldw	fp,0(sp)
    9dd0:	dec00204 	addi	sp,sp,8
    9dd4:	f800283a 	ret

00009dd8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    9dd8:	defffe04 	addi	sp,sp,-8
    9ddc:	dfc00115 	stw	ra,4(sp)
    9de0:	df000015 	stw	fp,0(sp)
    9de4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    9de8:	01000074 	movhi	r4,1
    9dec:	213bb904 	addi	r4,r4,-4380
    9df0:	01400074 	movhi	r5,1
    9df4:	2974c004 	addi	r5,r5,-11520
    9df8:	01800074 	movhi	r6,1
    9dfc:	31bbb904 	addi	r6,r6,-4380
    9e00:	0009e580 	call	9e58 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    9e04:	01000034 	movhi	r4,0
    9e08:	21000804 	addi	r4,r4,32
    9e0c:	01400034 	movhi	r5,0
    9e10:	29400804 	addi	r5,r5,32
    9e14:	01800034 	movhi	r6,0
    9e18:	31806d04 	addi	r6,r6,436
    9e1c:	0009e580 	call	9e58 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    9e20:	01000074 	movhi	r4,1
    9e24:	2133b004 	addi	r4,r4,-12608
    9e28:	01400074 	movhi	r5,1
    9e2c:	2973b004 	addi	r5,r5,-12608
    9e30:	01800074 	movhi	r6,1
    9e34:	31b4c004 	addi	r6,r6,-11520
    9e38:	0009e580 	call	9e58 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    9e3c:	000bc940 	call	bc94 <alt_dcache_flush_all>
  alt_icache_flush_all();
    9e40:	000be8c0 	call	be8c <alt_icache_flush_all>
}
    9e44:	e037883a 	mov	sp,fp
    9e48:	dfc00117 	ldw	ra,4(sp)
    9e4c:	df000017 	ldw	fp,0(sp)
    9e50:	dec00204 	addi	sp,sp,8
    9e54:	f800283a 	ret

00009e58 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    9e58:	defffc04 	addi	sp,sp,-16
    9e5c:	df000315 	stw	fp,12(sp)
    9e60:	df000304 	addi	fp,sp,12
    9e64:	e13ffd15 	stw	r4,-12(fp)
    9e68:	e17ffe15 	stw	r5,-8(fp)
    9e6c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    9e70:	e0fffe17 	ldw	r3,-8(fp)
    9e74:	e0bffd17 	ldw	r2,-12(fp)
    9e78:	18800e26 	beq	r3,r2,9eb4 <alt_load_section+0x5c>
  {
    while( to != end )
    9e7c:	00000a06 	br	9ea8 <alt_load_section+0x50>
    {
      *to++ = *from++;
    9e80:	e0bffd17 	ldw	r2,-12(fp)
    9e84:	10c00017 	ldw	r3,0(r2)
    9e88:	e0bffe17 	ldw	r2,-8(fp)
    9e8c:	10c00015 	stw	r3,0(r2)
    9e90:	e0bffe17 	ldw	r2,-8(fp)
    9e94:	10800104 	addi	r2,r2,4
    9e98:	e0bffe15 	stw	r2,-8(fp)
    9e9c:	e0bffd17 	ldw	r2,-12(fp)
    9ea0:	10800104 	addi	r2,r2,4
    9ea4:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    9ea8:	e0fffe17 	ldw	r3,-8(fp)
    9eac:	e0bfff17 	ldw	r2,-4(fp)
    9eb0:	18bff31e 	bne	r3,r2,9e80 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    9eb4:	e037883a 	mov	sp,fp
    9eb8:	df000017 	ldw	fp,0(sp)
    9ebc:	dec00104 	addi	sp,sp,4
    9ec0:	f800283a 	ret

00009ec4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    9ec4:	defff804 	addi	sp,sp,-32
    9ec8:	dfc00715 	stw	ra,28(sp)
    9ecc:	df000615 	stw	fp,24(sp)
    9ed0:	df000604 	addi	fp,sp,24
    9ed4:	e13ffc15 	stw	r4,-16(fp)
    9ed8:	e17ffd15 	stw	r5,-12(fp)
    9edc:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    9ee0:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    9ee4:	e0bffc17 	ldw	r2,-16(fp)
    9ee8:	1004803a 	cmplt	r2,r2,zero
    9eec:	1000081e 	bne	r2,zero,9f10 <lseek+0x4c>
    9ef0:	e0bffc17 	ldw	r2,-16(fp)
    9ef4:	10800324 	muli	r2,r2,12
    9ef8:	1007883a 	mov	r3,r2
    9efc:	00800074 	movhi	r2,1
    9f00:	10b6cf04 	addi	r2,r2,-9412
    9f04:	1887883a 	add	r3,r3,r2
    9f08:	e0ffff15 	stw	r3,-4(fp)
    9f0c:	00000106 	br	9f14 <lseek+0x50>
    9f10:	e03fff15 	stw	zero,-4(fp)
    9f14:	e0bfff17 	ldw	r2,-4(fp)
    9f18:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
    9f1c:	e0bffb17 	ldw	r2,-20(fp)
    9f20:	1005003a 	cmpeq	r2,r2,zero
    9f24:	1000111e 	bne	r2,zero,9f6c <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    9f28:	e0bffb17 	ldw	r2,-20(fp)
    9f2c:	10800017 	ldw	r2,0(r2)
    9f30:	10800717 	ldw	r2,28(r2)
    9f34:	1005003a 	cmpeq	r2,r2,zero
    9f38:	1000091e 	bne	r2,zero,9f60 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    9f3c:	e0bffb17 	ldw	r2,-20(fp)
    9f40:	10800017 	ldw	r2,0(r2)
    9f44:	10800717 	ldw	r2,28(r2)
    9f48:	e13ffb17 	ldw	r4,-20(fp)
    9f4c:	e17ffd17 	ldw	r5,-12(fp)
    9f50:	e1bffe17 	ldw	r6,-8(fp)
    9f54:	103ee83a 	callr	r2
    9f58:	e0bffa15 	stw	r2,-24(fp)
    9f5c:	00000506 	br	9f74 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    9f60:	00bfde84 	movi	r2,-134
    9f64:	e0bffa15 	stw	r2,-24(fp)
    9f68:	00000206 	br	9f74 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
    9f6c:	00bfebc4 	movi	r2,-81
    9f70:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
    9f74:	e0bffa17 	ldw	r2,-24(fp)
    9f78:	1004403a 	cmpge	r2,r2,zero
    9f7c:	1000071e 	bne	r2,zero,9f9c <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
    9f80:	0009fb40 	call	9fb4 <alt_get_errno>
    9f84:	1007883a 	mov	r3,r2
    9f88:	e0bffa17 	ldw	r2,-24(fp)
    9f8c:	0085c83a 	sub	r2,zero,r2
    9f90:	18800015 	stw	r2,0(r3)
    rc = -1;
    9f94:	00bfffc4 	movi	r2,-1
    9f98:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
    9f9c:	e0bffa17 	ldw	r2,-24(fp)
}
    9fa0:	e037883a 	mov	sp,fp
    9fa4:	dfc00117 	ldw	ra,4(sp)
    9fa8:	df000017 	ldw	fp,0(sp)
    9fac:	dec00204 	addi	sp,sp,8
    9fb0:	f800283a 	ret

00009fb4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9fb4:	defffd04 	addi	sp,sp,-12
    9fb8:	dfc00215 	stw	ra,8(sp)
    9fbc:	df000115 	stw	fp,4(sp)
    9fc0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    9fc4:	00800074 	movhi	r2,1
    9fc8:	10bbb404 	addi	r2,r2,-4400
    9fcc:	10800017 	ldw	r2,0(r2)
    9fd0:	1005003a 	cmpeq	r2,r2,zero
    9fd4:	1000061e 	bne	r2,zero,9ff0 <alt_get_errno+0x3c>
    9fd8:	00800074 	movhi	r2,1
    9fdc:	10bbb404 	addi	r2,r2,-4400
    9fe0:	10800017 	ldw	r2,0(r2)
    9fe4:	103ee83a 	callr	r2
    9fe8:	e0bfff15 	stw	r2,-4(fp)
    9fec:	00000306 	br	9ffc <alt_get_errno+0x48>
    9ff0:	00800074 	movhi	r2,1
    9ff4:	1082b804 	addi	r2,r2,2784
    9ff8:	e0bfff15 	stw	r2,-4(fp)
    9ffc:	e0bfff17 	ldw	r2,-4(fp)
}
    a000:	e037883a 	mov	sp,fp
    a004:	dfc00117 	ldw	ra,4(sp)
    a008:	df000017 	ldw	fp,0(sp)
    a00c:	dec00204 	addi	sp,sp,8
    a010:	f800283a 	ret

0000a014 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    a014:	defffd04 	addi	sp,sp,-12
    a018:	dfc00215 	stw	ra,8(sp)
    a01c:	df000115 	stw	fp,4(sp)
    a020:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    a024:	0009883a 	mov	r4,zero
    a028:	000a4dc0 	call	a4dc <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    a02c:	000a5100 	call	a510 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    a030:	01000074 	movhi	r4,1
    a034:	2134ae04 	addi	r4,r4,-11592
    a038:	01400074 	movhi	r5,1
    a03c:	2974ae04 	addi	r5,r5,-11592
    a040:	01800074 	movhi	r6,1
    a044:	31b4ae04 	addi	r6,r6,-11592
    a048:	000c24c0 	call	c24c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    a04c:	000bdc40 	call	bdc4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    a050:	01000074 	movhi	r4,1
    a054:	212f8a04 	addi	r4,r4,-16856
    a058:	000ca480 	call	ca48 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    a05c:	d1271017 	ldw	r4,-25536(gp)
    a060:	d1671117 	ldw	r5,-25532(gp)
    a064:	d1a71217 	ldw	r6,-25528(gp)
    a068:	00001f00 	call	1f0 <main>
    a06c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    a070:	01000044 	movi	r4,1
    a074:	00099fc0 	call	99fc <close>
  exit (result);
    a078:	e13fff17 	ldw	r4,-4(fp)
    a07c:	000ca5c0 	call	ca5c <exit>

0000a080 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    a080:	defffe04 	addi	sp,sp,-8
    a084:	df000115 	stw	fp,4(sp)
    a088:	df000104 	addi	fp,sp,4
    a08c:	e13fff15 	stw	r4,-4(fp)
}
    a090:	e037883a 	mov	sp,fp
    a094:	df000017 	ldw	fp,0(sp)
    a098:	dec00104 	addi	sp,sp,4
    a09c:	f800283a 	ret

0000a0a0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    a0a0:	defffe04 	addi	sp,sp,-8
    a0a4:	df000115 	stw	fp,4(sp)
    a0a8:	df000104 	addi	fp,sp,4
    a0ac:	e13fff15 	stw	r4,-4(fp)
}
    a0b0:	e037883a 	mov	sp,fp
    a0b4:	df000017 	ldw	fp,0(sp)
    a0b8:	dec00104 	addi	sp,sp,4
    a0bc:	f800283a 	ret

0000a0c0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    a0c0:	defff704 	addi	sp,sp,-36
    a0c4:	dfc00815 	stw	ra,32(sp)
    a0c8:	df000715 	stw	fp,28(sp)
    a0cc:	df000704 	addi	fp,sp,28
    a0d0:	e13ffb15 	stw	r4,-20(fp)
    a0d4:	e17ffc15 	stw	r5,-16(fp)
    a0d8:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    a0dc:	e0bffb17 	ldw	r2,-20(fp)
    a0e0:	1004803a 	cmplt	r2,r2,zero
    a0e4:	1000081e 	bne	r2,zero,a108 <read+0x48>
    a0e8:	e0bffb17 	ldw	r2,-20(fp)
    a0ec:	10800324 	muli	r2,r2,12
    a0f0:	1007883a 	mov	r3,r2
    a0f4:	00800074 	movhi	r2,1
    a0f8:	10b6cf04 	addi	r2,r2,-9412
    a0fc:	1887883a 	add	r3,r3,r2
    a100:	e0ffff15 	stw	r3,-4(fp)
    a104:	00000106 	br	a10c <read+0x4c>
    a108:	e03fff15 	stw	zero,-4(fp)
    a10c:	e0bfff17 	ldw	r2,-4(fp)
    a110:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    a114:	e0bffa17 	ldw	r2,-24(fp)
    a118:	1005003a 	cmpeq	r2,r2,zero
    a11c:	1000241e 	bne	r2,zero,a1b0 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    a120:	e0bffa17 	ldw	r2,-24(fp)
    a124:	10800217 	ldw	r2,8(r2)
    a128:	108000cc 	andi	r2,r2,3
    a12c:	10800060 	cmpeqi	r2,r2,1
    a130:	10001a1e 	bne	r2,zero,a19c <read+0xdc>
    a134:	e0bffa17 	ldw	r2,-24(fp)
    a138:	10800017 	ldw	r2,0(r2)
    a13c:	10800517 	ldw	r2,20(r2)
    a140:	1005003a 	cmpeq	r2,r2,zero
    a144:	1000151e 	bne	r2,zero,a19c <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    a148:	e0bffa17 	ldw	r2,-24(fp)
    a14c:	10800017 	ldw	r2,0(r2)
    a150:	10800517 	ldw	r2,20(r2)
    a154:	e17ffc17 	ldw	r5,-16(fp)
    a158:	e1bffd17 	ldw	r6,-12(fp)
    a15c:	e13ffa17 	ldw	r4,-24(fp)
    a160:	103ee83a 	callr	r2
    a164:	e0bff915 	stw	r2,-28(fp)
    a168:	e0bff917 	ldw	r2,-28(fp)
    a16c:	1004403a 	cmpge	r2,r2,zero
    a170:	1000071e 	bne	r2,zero,a190 <read+0xd0>
        {
          ALT_ERRNO = -rval;
    a174:	000a1e00 	call	a1e0 <alt_get_errno>
    a178:	e0fff917 	ldw	r3,-28(fp)
    a17c:	00c7c83a 	sub	r3,zero,r3
    a180:	10c00015 	stw	r3,0(r2)
          return -1;
    a184:	00bfffc4 	movi	r2,-1
    a188:	e0bffe15 	stw	r2,-8(fp)
    a18c:	00000e06 	br	a1c8 <read+0x108>
        }
        return rval;
    a190:	e0bff917 	ldw	r2,-28(fp)
    a194:	e0bffe15 	stw	r2,-8(fp)
    a198:	00000b06 	br	a1c8 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
    a19c:	000a1e00 	call	a1e0 <alt_get_errno>
    a1a0:	1007883a 	mov	r3,r2
    a1a4:	00800344 	movi	r2,13
    a1a8:	18800015 	stw	r2,0(r3)
    a1ac:	00000406 	br	a1c0 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    a1b0:	000a1e00 	call	a1e0 <alt_get_errno>
    a1b4:	1007883a 	mov	r3,r2
    a1b8:	00801444 	movi	r2,81
    a1bc:	18800015 	stw	r2,0(r3)
  }
  return -1;
    a1c0:	00bfffc4 	movi	r2,-1
    a1c4:	e0bffe15 	stw	r2,-8(fp)
    a1c8:	e0bffe17 	ldw	r2,-8(fp)
}
    a1cc:	e037883a 	mov	sp,fp
    a1d0:	dfc00117 	ldw	ra,4(sp)
    a1d4:	df000017 	ldw	fp,0(sp)
    a1d8:	dec00204 	addi	sp,sp,8
    a1dc:	f800283a 	ret

0000a1e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    a1e0:	defffd04 	addi	sp,sp,-12
    a1e4:	dfc00215 	stw	ra,8(sp)
    a1e8:	df000115 	stw	fp,4(sp)
    a1ec:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    a1f0:	00800074 	movhi	r2,1
    a1f4:	10bbb404 	addi	r2,r2,-4400
    a1f8:	10800017 	ldw	r2,0(r2)
    a1fc:	1005003a 	cmpeq	r2,r2,zero
    a200:	1000061e 	bne	r2,zero,a21c <alt_get_errno+0x3c>
    a204:	00800074 	movhi	r2,1
    a208:	10bbb404 	addi	r2,r2,-4400
    a20c:	10800017 	ldw	r2,0(r2)
    a210:	103ee83a 	callr	r2
    a214:	e0bfff15 	stw	r2,-4(fp)
    a218:	00000306 	br	a228 <alt_get_errno+0x48>
    a21c:	00800074 	movhi	r2,1
    a220:	1082b804 	addi	r2,r2,2784
    a224:	e0bfff15 	stw	r2,-4(fp)
    a228:	e0bfff17 	ldw	r2,-4(fp)
}
    a22c:	e037883a 	mov	sp,fp
    a230:	dfc00117 	ldw	ra,4(sp)
    a234:	df000017 	ldw	fp,0(sp)
    a238:	dec00204 	addi	sp,sp,8
    a23c:	f800283a 	ret

0000a240 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    a240:	defffe04 	addi	sp,sp,-8
    a244:	df000115 	stw	fp,4(sp)
    a248:	df000104 	addi	fp,sp,4
    a24c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    a250:	e0bfff17 	ldw	r2,-4(fp)
    a254:	108000d0 	cmplti	r2,r2,3
    a258:	10000d1e 	bne	r2,zero,a290 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    a25c:	e0bfff17 	ldw	r2,-4(fp)
    a260:	00c00074 	movhi	r3,1
    a264:	18f6cf04 	addi	r3,r3,-9412
    a268:	10800324 	muli	r2,r2,12
    a26c:	10c5883a 	add	r2,r2,r3
    a270:	10800204 	addi	r2,r2,8
    a274:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    a278:	e0bfff17 	ldw	r2,-4(fp)
    a27c:	00c00074 	movhi	r3,1
    a280:	18f6cf04 	addi	r3,r3,-9412
    a284:	10800324 	muli	r2,r2,12
    a288:	10c5883a 	add	r2,r2,r3
    a28c:	10000015 	stw	zero,0(r2)
  }
}
    a290:	e037883a 	mov	sp,fp
    a294:	df000017 	ldw	fp,0(sp)
    a298:	dec00104 	addi	sp,sp,4
    a29c:	f800283a 	ret

0000a2a0 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    a2a0:	defff804 	addi	sp,sp,-32
    a2a4:	df000715 	stw	fp,28(sp)
    a2a8:	df000704 	addi	fp,sp,28
    a2ac:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a2b0:	0005303a 	rdctl	r2,status
    a2b4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a2b8:	e0fffb17 	ldw	r3,-20(fp)
    a2bc:	00bfff84 	movi	r2,-2
    a2c0:	1884703a 	and	r2,r3,r2
    a2c4:	1001703a 	wrctl	status,r2
  
  return context;
    a2c8:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    a2cc:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    a2d0:	d0a00c17 	ldw	r2,-32720(gp)
    a2d4:	10c000c4 	addi	r3,r2,3
    a2d8:	00bfff04 	movi	r2,-4
    a2dc:	1884703a 	and	r2,r3,r2
    a2e0:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    a2e4:	d0e00c17 	ldw	r3,-32720(gp)
    a2e8:	e0bffe17 	ldw	r2,-8(fp)
    a2ec:	1887883a 	add	r3,r3,r2
    a2f0:	00802034 	movhi	r2,128
    a2f4:	10800004 	addi	r2,r2,0
    a2f8:	10c0072e 	bgeu	r2,r3,a318 <sbrk+0x78>
    a2fc:	e0bffd17 	ldw	r2,-12(fp)
    a300:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a304:	e0bffa17 	ldw	r2,-24(fp)
    a308:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    a30c:	00bfffc4 	movi	r2,-1
    a310:	e0bfff15 	stw	r2,-4(fp)
    a314:	00000c06 	br	a348 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
    a318:	d0a00c17 	ldw	r2,-32720(gp)
    a31c:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
    a320:	d0e00c17 	ldw	r3,-32720(gp)
    a324:	e0bffe17 	ldw	r2,-8(fp)
    a328:	1885883a 	add	r2,r3,r2
    a32c:	d0a00c15 	stw	r2,-32720(gp)
    a330:	e0bffd17 	ldw	r2,-12(fp)
    a334:	e0bff915 	stw	r2,-28(fp)
    a338:	e0bff917 	ldw	r2,-28(fp)
    a33c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    a340:	e0bffc17 	ldw	r2,-16(fp)
    a344:	e0bfff15 	stw	r2,-4(fp)
    a348:	e0bfff17 	ldw	r2,-4(fp)
} 
    a34c:	e037883a 	mov	sp,fp
    a350:	df000017 	ldw	fp,0(sp)
    a354:	dec00104 	addi	sp,sp,4
    a358:	f800283a 	ret

0000a35c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    a35c:	defff704 	addi	sp,sp,-36
    a360:	dfc00815 	stw	ra,32(sp)
    a364:	df000715 	stw	fp,28(sp)
    a368:	df000704 	addi	fp,sp,28
    a36c:	e13ffb15 	stw	r4,-20(fp)
    a370:	e17ffc15 	stw	r5,-16(fp)
    a374:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    a378:	e0bffb17 	ldw	r2,-20(fp)
    a37c:	1004803a 	cmplt	r2,r2,zero
    a380:	1000081e 	bne	r2,zero,a3a4 <write+0x48>
    a384:	e0bffb17 	ldw	r2,-20(fp)
    a388:	10800324 	muli	r2,r2,12
    a38c:	1007883a 	mov	r3,r2
    a390:	00800074 	movhi	r2,1
    a394:	10b6cf04 	addi	r2,r2,-9412
    a398:	1887883a 	add	r3,r3,r2
    a39c:	e0ffff15 	stw	r3,-4(fp)
    a3a0:	00000106 	br	a3a8 <write+0x4c>
    a3a4:	e03fff15 	stw	zero,-4(fp)
    a3a8:	e0bfff17 	ldw	r2,-4(fp)
    a3ac:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    a3b0:	e0bffa17 	ldw	r2,-24(fp)
    a3b4:	1005003a 	cmpeq	r2,r2,zero
    a3b8:	1000241e 	bne	r2,zero,a44c <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    a3bc:	e0bffa17 	ldw	r2,-24(fp)
    a3c0:	10800217 	ldw	r2,8(r2)
    a3c4:	108000cc 	andi	r2,r2,3
    a3c8:	1005003a 	cmpeq	r2,r2,zero
    a3cc:	10001a1e 	bne	r2,zero,a438 <write+0xdc>
    a3d0:	e0bffa17 	ldw	r2,-24(fp)
    a3d4:	10800017 	ldw	r2,0(r2)
    a3d8:	10800617 	ldw	r2,24(r2)
    a3dc:	1005003a 	cmpeq	r2,r2,zero
    a3e0:	1000151e 	bne	r2,zero,a438 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    a3e4:	e0bffa17 	ldw	r2,-24(fp)
    a3e8:	10800017 	ldw	r2,0(r2)
    a3ec:	10800617 	ldw	r2,24(r2)
    a3f0:	e17ffc17 	ldw	r5,-16(fp)
    a3f4:	e1bffd17 	ldw	r6,-12(fp)
    a3f8:	e13ffa17 	ldw	r4,-24(fp)
    a3fc:	103ee83a 	callr	r2
    a400:	e0bff915 	stw	r2,-28(fp)
    a404:	e0bff917 	ldw	r2,-28(fp)
    a408:	1004403a 	cmpge	r2,r2,zero
    a40c:	1000071e 	bne	r2,zero,a42c <write+0xd0>
      {
        ALT_ERRNO = -rval;
    a410:	000a47c0 	call	a47c <alt_get_errno>
    a414:	e0fff917 	ldw	r3,-28(fp)
    a418:	00c7c83a 	sub	r3,zero,r3
    a41c:	10c00015 	stw	r3,0(r2)
        return -1;
    a420:	00bfffc4 	movi	r2,-1
    a424:	e0bffe15 	stw	r2,-8(fp)
    a428:	00000e06 	br	a464 <write+0x108>
      }
      return rval;
    a42c:	e0bff917 	ldw	r2,-28(fp)
    a430:	e0bffe15 	stw	r2,-8(fp)
    a434:	00000b06 	br	a464 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
    a438:	000a47c0 	call	a47c <alt_get_errno>
    a43c:	1007883a 	mov	r3,r2
    a440:	00800344 	movi	r2,13
    a444:	18800015 	stw	r2,0(r3)
    a448:	00000406 	br	a45c <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    a44c:	000a47c0 	call	a47c <alt_get_errno>
    a450:	1007883a 	mov	r3,r2
    a454:	00801444 	movi	r2,81
    a458:	18800015 	stw	r2,0(r3)
  }
  return -1;
    a45c:	00bfffc4 	movi	r2,-1
    a460:	e0bffe15 	stw	r2,-8(fp)
    a464:	e0bffe17 	ldw	r2,-8(fp)
}
    a468:	e037883a 	mov	sp,fp
    a46c:	dfc00117 	ldw	ra,4(sp)
    a470:	df000017 	ldw	fp,0(sp)
    a474:	dec00204 	addi	sp,sp,8
    a478:	f800283a 	ret

0000a47c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    a47c:	defffd04 	addi	sp,sp,-12
    a480:	dfc00215 	stw	ra,8(sp)
    a484:	df000115 	stw	fp,4(sp)
    a488:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    a48c:	00800074 	movhi	r2,1
    a490:	10bbb404 	addi	r2,r2,-4400
    a494:	10800017 	ldw	r2,0(r2)
    a498:	1005003a 	cmpeq	r2,r2,zero
    a49c:	1000061e 	bne	r2,zero,a4b8 <alt_get_errno+0x3c>
    a4a0:	00800074 	movhi	r2,1
    a4a4:	10bbb404 	addi	r2,r2,-4400
    a4a8:	10800017 	ldw	r2,0(r2)
    a4ac:	103ee83a 	callr	r2
    a4b0:	e0bfff15 	stw	r2,-4(fp)
    a4b4:	00000306 	br	a4c4 <alt_get_errno+0x48>
    a4b8:	00800074 	movhi	r2,1
    a4bc:	1082b804 	addi	r2,r2,2784
    a4c0:	e0bfff15 	stw	r2,-4(fp)
    a4c4:	e0bfff17 	ldw	r2,-4(fp)
}
    a4c8:	e037883a 	mov	sp,fp
    a4cc:	dfc00117 	ldw	ra,4(sp)
    a4d0:	df000017 	ldw	fp,0(sp)
    a4d4:	dec00204 	addi	sp,sp,8
    a4d8:	f800283a 	ret

0000a4dc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    a4dc:	defffd04 	addi	sp,sp,-12
    a4e0:	dfc00215 	stw	ra,8(sp)
    a4e4:	df000115 	stw	fp,4(sp)
    a4e8:	df000104 	addi	fp,sp,4
    a4ec:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
    a4f0:	000c72c0 	call	c72c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    a4f4:	00800044 	movi	r2,1
    a4f8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    a4fc:	e037883a 	mov	sp,fp
    a500:	dfc00117 	ldw	ra,4(sp)
    a504:	df000017 	ldw	fp,0(sp)
    a508:	dec00204 	addi	sp,sp,8
    a50c:	f800283a 	ret

0000a510 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    a510:	defffe04 	addi	sp,sp,-8
    a514:	dfc00115 	stw	ra,4(sp)
    a518:	df000015 	stw	fp,0(sp)
    a51c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER0, timer0);
    a520:	01040034 	movhi	r4,4096
    a524:	21002004 	addi	r4,r4,128
    a528:	000b883a 	mov	r5,zero
    a52c:	01800044 	movi	r6,1
    a530:	01c00044 	movi	r7,1
    a534:	000b1000 	call	b100 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER1, timer1);
    ALTERA_AVALON_TIMER_INIT ( TIMER2, timer2);
    ALTERA_AVALON_TIMER_INIT ( TIMER3, timer3);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    a538:	01000074 	movhi	r4,1
    a53c:	21373904 	addi	r4,r4,-8988
    a540:	000b883a 	mov	r5,zero
    a544:	000d883a 	mov	r6,zero
    a548:	000a72c0 	call	a72c <altera_avalon_jtag_uart_init>
    a54c:	01000074 	movhi	r4,1
    a550:	21372f04 	addi	r4,r4,-9028
    a554:	000a5ac0 	call	a5ac <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_PORT0, SPI_port0);
    ALTERA_AVALON_SPI_INIT ( SPI_PORT1, SPI_port1);
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    ALTERA_AVALON_UART_INIT ( SERIAL_PORT0, Serial_port0);
    a558:	01000074 	movhi	r4,1
    a55c:	213b5104 	addi	r4,r4,-4796
    a560:	000b883a 	mov	r5,zero
    a564:	01800144 	movi	r6,5
    a568:	000b2880 	call	b288 <altera_avalon_uart_init>
    a56c:	01000074 	movhi	r4,1
    a570:	213b4704 	addi	r4,r4,-4836
    a574:	000a5ac0 	call	a5ac <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( SERIAL_PORT1, Serial_port1);
    a578:	01000074 	movhi	r4,1
    a57c:	213b8204 	addi	r4,r4,-4600
    a580:	000b883a 	mov	r5,zero
    a584:	01800184 	movi	r6,6
    a588:	000b2880 	call	b288 <altera_avalon_uart_init>
    a58c:	01000074 	movhi	r4,1
    a590:	213b7804 	addi	r4,r4,-4640
    a594:	000a5ac0 	call	a5ac <alt_dev_reg>
}
    a598:	e037883a 	mov	sp,fp
    a59c:	dfc00117 	ldw	ra,4(sp)
    a5a0:	df000017 	ldw	fp,0(sp)
    a5a4:	dec00204 	addi	sp,sp,8
    a5a8:	f800283a 	ret

0000a5ac <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    a5ac:	defffd04 	addi	sp,sp,-12
    a5b0:	dfc00215 	stw	ra,8(sp)
    a5b4:	df000115 	stw	fp,4(sp)
    a5b8:	df000104 	addi	fp,sp,4
    a5bc:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    a5c0:	e13fff17 	ldw	r4,-4(fp)
    a5c4:	01400074 	movhi	r5,1
    a5c8:	297bb104 	addi	r5,r5,-4412
    a5cc:	000bcb00 	call	bcb0 <alt_dev_llist_insert>
}
    a5d0:	e037883a 	mov	sp,fp
    a5d4:	dfc00117 	ldw	ra,4(sp)
    a5d8:	df000017 	ldw	fp,0(sp)
    a5dc:	dec00204 	addi	sp,sp,8
    a5e0:	f800283a 	ret

0000a5e4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    a5e4:	defffa04 	addi	sp,sp,-24
    a5e8:	dfc00515 	stw	ra,20(sp)
    a5ec:	df000415 	stw	fp,16(sp)
    a5f0:	df000404 	addi	fp,sp,16
    a5f4:	e13ffd15 	stw	r4,-12(fp)
    a5f8:	e17ffe15 	stw	r5,-8(fp)
    a5fc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    a600:	e0bffd17 	ldw	r2,-12(fp)
    a604:	10800017 	ldw	r2,0(r2)
    a608:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    a60c:	e0bffc17 	ldw	r2,-16(fp)
    a610:	11000a04 	addi	r4,r2,40
    a614:	e0bffd17 	ldw	r2,-12(fp)
    a618:	11c00217 	ldw	r7,8(r2)
    a61c:	e17ffe17 	ldw	r5,-8(fp)
    a620:	e1bfff17 	ldw	r6,-4(fp)
    a624:	000ac2c0 	call	ac2c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    a628:	e037883a 	mov	sp,fp
    a62c:	dfc00117 	ldw	ra,4(sp)
    a630:	df000017 	ldw	fp,0(sp)
    a634:	dec00204 	addi	sp,sp,8
    a638:	f800283a 	ret

0000a63c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    a63c:	defffa04 	addi	sp,sp,-24
    a640:	dfc00515 	stw	ra,20(sp)
    a644:	df000415 	stw	fp,16(sp)
    a648:	df000404 	addi	fp,sp,16
    a64c:	e13ffd15 	stw	r4,-12(fp)
    a650:	e17ffe15 	stw	r5,-8(fp)
    a654:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    a658:	e0bffd17 	ldw	r2,-12(fp)
    a65c:	10800017 	ldw	r2,0(r2)
    a660:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    a664:	e0bffc17 	ldw	r2,-16(fp)
    a668:	11000a04 	addi	r4,r2,40
    a66c:	e0bffd17 	ldw	r2,-12(fp)
    a670:	11c00217 	ldw	r7,8(r2)
    a674:	e17ffe17 	ldw	r5,-8(fp)
    a678:	e1bfff17 	ldw	r6,-4(fp)
    a67c:	000ae500 	call	ae50 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    a680:	e037883a 	mov	sp,fp
    a684:	dfc00117 	ldw	ra,4(sp)
    a688:	df000017 	ldw	fp,0(sp)
    a68c:	dec00204 	addi	sp,sp,8
    a690:	f800283a 	ret

0000a694 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    a694:	defffc04 	addi	sp,sp,-16
    a698:	dfc00315 	stw	ra,12(sp)
    a69c:	df000215 	stw	fp,8(sp)
    a6a0:	df000204 	addi	fp,sp,8
    a6a4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    a6a8:	e0bfff17 	ldw	r2,-4(fp)
    a6ac:	10800017 	ldw	r2,0(r2)
    a6b0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    a6b4:	e0bffe17 	ldw	r2,-8(fp)
    a6b8:	11000a04 	addi	r4,r2,40
    a6bc:	e0bfff17 	ldw	r2,-4(fp)
    a6c0:	11400217 	ldw	r5,8(r2)
    a6c4:	000aac40 	call	aac4 <altera_avalon_jtag_uart_close>
}
    a6c8:	e037883a 	mov	sp,fp
    a6cc:	dfc00117 	ldw	ra,4(sp)
    a6d0:	df000017 	ldw	fp,0(sp)
    a6d4:	dec00204 	addi	sp,sp,8
    a6d8:	f800283a 	ret

0000a6dc <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    a6dc:	defffa04 	addi	sp,sp,-24
    a6e0:	dfc00515 	stw	ra,20(sp)
    a6e4:	df000415 	stw	fp,16(sp)
    a6e8:	df000404 	addi	fp,sp,16
    a6ec:	e13ffd15 	stw	r4,-12(fp)
    a6f0:	e17ffe15 	stw	r5,-8(fp)
    a6f4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    a6f8:	e0bffd17 	ldw	r2,-12(fp)
    a6fc:	10800017 	ldw	r2,0(r2)
    a700:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    a704:	e0bffc17 	ldw	r2,-16(fp)
    a708:	11000a04 	addi	r4,r2,40
    a70c:	e17ffe17 	ldw	r5,-8(fp)
    a710:	e1bfff17 	ldw	r6,-4(fp)
    a714:	000ab380 	call	ab38 <altera_avalon_jtag_uart_ioctl>
}
    a718:	e037883a 	mov	sp,fp
    a71c:	dfc00117 	ldw	ra,4(sp)
    a720:	df000017 	ldw	fp,0(sp)
    a724:	dec00204 	addi	sp,sp,8
    a728:	f800283a 	ret

0000a72c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    a72c:	defffa04 	addi	sp,sp,-24
    a730:	dfc00515 	stw	ra,20(sp)
    a734:	df000415 	stw	fp,16(sp)
    a738:	df000404 	addi	fp,sp,16
    a73c:	e13ffd15 	stw	r4,-12(fp)
    a740:	e17ffe15 	stw	r5,-8(fp)
    a744:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    a748:	e0fffd17 	ldw	r3,-12(fp)
    a74c:	00800044 	movi	r2,1
    a750:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    a754:	e0bffd17 	ldw	r2,-12(fp)
    a758:	10800017 	ldw	r2,0(r2)
    a75c:	11000104 	addi	r4,r2,4
    a760:	e0bffd17 	ldw	r2,-12(fp)
    a764:	10800817 	ldw	r2,32(r2)
    a768:	1007883a 	mov	r3,r2
    a76c:	2005883a 	mov	r2,r4
    a770:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    a774:	e13ffe17 	ldw	r4,-8(fp)
    a778:	e17fff17 	ldw	r5,-4(fp)
    a77c:	d8000015 	stw	zero,0(sp)
    a780:	01800074 	movhi	r6,1
    a784:	31a9fb04 	addi	r6,r6,-22548
    a788:	e1fffd17 	ldw	r7,-12(fp)
    a78c:	000bebc0 	call	bebc <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    a790:	e0bffd17 	ldw	r2,-12(fp)
    a794:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    a798:	e0bffd17 	ldw	r2,-12(fp)
    a79c:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    a7a0:	00800074 	movhi	r2,1
    a7a4:	1082bd04 	addi	r2,r2,2804
    a7a8:	10800017 	ldw	r2,0(r2)
    a7ac:	100b883a 	mov	r5,r2
    a7b0:	01800074 	movhi	r6,1
    a7b4:	31aa8504 	addi	r6,r6,-21996
    a7b8:	e1fffd17 	ldw	r7,-12(fp)
    a7bc:	000bb400 	call	bb40 <alt_alarm_start>
    a7c0:	1004403a 	cmpge	r2,r2,zero
    a7c4:	1000041e 	bne	r2,zero,a7d8 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    a7c8:	e0fffd17 	ldw	r3,-12(fp)
    a7cc:	00a00034 	movhi	r2,32768
    a7d0:	10bfffc4 	addi	r2,r2,-1
    a7d4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    a7d8:	e037883a 	mov	sp,fp
    a7dc:	dfc00117 	ldw	ra,4(sp)
    a7e0:	df000017 	ldw	fp,0(sp)
    a7e4:	dec00204 	addi	sp,sp,8
    a7e8:	f800283a 	ret

0000a7ec <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    a7ec:	defff804 	addi	sp,sp,-32
    a7f0:	df000715 	stw	fp,28(sp)
    a7f4:	df000704 	addi	fp,sp,28
    a7f8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    a7fc:	e0bfff17 	ldw	r2,-4(fp)
    a800:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
    a804:	e0bffe17 	ldw	r2,-8(fp)
    a808:	10800017 	ldw	r2,0(r2)
    a80c:	e0bffd15 	stw	r2,-12(fp)
    a810:	00000006 	br	a814 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    a814:	e0bffd17 	ldw	r2,-12(fp)
    a818:	10800104 	addi	r2,r2,4
    a81c:	10800037 	ldwio	r2,0(r2)
    a820:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    a824:	e0bffc17 	ldw	r2,-16(fp)
    a828:	1080c00c 	andi	r2,r2,768
    a82c:	1005003a 	cmpeq	r2,r2,zero
    a830:	1000741e 	bne	r2,zero,aa04 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    a834:	e0bffc17 	ldw	r2,-16(fp)
    a838:	1080400c 	andi	r2,r2,256
    a83c:	1005003a 	cmpeq	r2,r2,zero
    a840:	1000351e 	bne	r2,zero,a918 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    a844:	00800074 	movhi	r2,1
    a848:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    a84c:	e0bffe17 	ldw	r2,-8(fp)
    a850:	10800a17 	ldw	r2,40(r2)
    a854:	10800044 	addi	r2,r2,1
    a858:	1081ffcc 	andi	r2,r2,2047
    a85c:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
    a860:	e0bffe17 	ldw	r2,-8(fp)
    a864:	10c00b17 	ldw	r3,44(r2)
    a868:	e0bffa17 	ldw	r2,-24(fp)
    a86c:	18801626 	beq	r3,r2,a8c8 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    a870:	e0bffd17 	ldw	r2,-12(fp)
    a874:	10800037 	ldwio	r2,0(r2)
    a878:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    a87c:	e0bffb17 	ldw	r2,-20(fp)
    a880:	10a0000c 	andi	r2,r2,32768
    a884:	1005003a 	cmpeq	r2,r2,zero
    a888:	10000f1e 	bne	r2,zero,a8c8 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    a88c:	e0bffe17 	ldw	r2,-8(fp)
    a890:	10c00a17 	ldw	r3,40(r2)
    a894:	e0bffb17 	ldw	r2,-20(fp)
    a898:	1009883a 	mov	r4,r2
    a89c:	e0bffe17 	ldw	r2,-8(fp)
    a8a0:	1885883a 	add	r2,r3,r2
    a8a4:	10800e04 	addi	r2,r2,56
    a8a8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    a8ac:	e0bffe17 	ldw	r2,-8(fp)
    a8b0:	10800a17 	ldw	r2,40(r2)
    a8b4:	10800044 	addi	r2,r2,1
    a8b8:	10c1ffcc 	andi	r3,r2,2047
    a8bc:	e0bffe17 	ldw	r2,-8(fp)
    a8c0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    a8c4:	003fe106 	br	a84c <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    a8c8:	e0bffb17 	ldw	r2,-20(fp)
    a8cc:	10bfffec 	andhi	r2,r2,65535
    a8d0:	1005003a 	cmpeq	r2,r2,zero
    a8d4:	1000101e 	bne	r2,zero,a918 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    a8d8:	e0bffe17 	ldw	r2,-8(fp)
    a8dc:	10c00817 	ldw	r3,32(r2)
    a8e0:	00bfff84 	movi	r2,-2
    a8e4:	1886703a 	and	r3,r3,r2
    a8e8:	e0bffe17 	ldw	r2,-8(fp)
    a8ec:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    a8f0:	e0bffd17 	ldw	r2,-12(fp)
    a8f4:	11000104 	addi	r4,r2,4
    a8f8:	e0bffe17 	ldw	r2,-8(fp)
    a8fc:	10800817 	ldw	r2,32(r2)
    a900:	1007883a 	mov	r3,r2
    a904:	2005883a 	mov	r2,r4
    a908:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    a90c:	e0bffd17 	ldw	r2,-12(fp)
    a910:	10800104 	addi	r2,r2,4
    a914:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    a918:	e0bffc17 	ldw	r2,-16(fp)
    a91c:	1080800c 	andi	r2,r2,512
    a920:	1005003a 	cmpeq	r2,r2,zero
    a924:	103fbb1e 	bne	r2,zero,a814 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    a928:	e0bffc17 	ldw	r2,-16(fp)
    a92c:	10bfffec 	andhi	r2,r2,65535
    a930:	1004d43a 	srli	r2,r2,16
    a934:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    a938:	00001506 	br	a990 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    a93c:	e13ffd17 	ldw	r4,-12(fp)
    a940:	e0bffe17 	ldw	r2,-8(fp)
    a944:	10c00d17 	ldw	r3,52(r2)
    a948:	e0bffe17 	ldw	r2,-8(fp)
    a94c:	1885883a 	add	r2,r3,r2
    a950:	10820e04 	addi	r2,r2,2104
    a954:	10800003 	ldbu	r2,0(r2)
    a958:	10c03fcc 	andi	r3,r2,255
    a95c:	18c0201c 	xori	r3,r3,128
    a960:	18ffe004 	addi	r3,r3,-128
    a964:	2005883a 	mov	r2,r4
    a968:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    a96c:	e0bffe17 	ldw	r2,-8(fp)
    a970:	10800d17 	ldw	r2,52(r2)
    a974:	10800044 	addi	r2,r2,1
    a978:	10c1ffcc 	andi	r3,r2,2047
    a97c:	e0bffe17 	ldw	r2,-8(fp)
    a980:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    a984:	e0bff917 	ldw	r2,-28(fp)
    a988:	10bfffc4 	addi	r2,r2,-1
    a98c:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    a990:	e0bff917 	ldw	r2,-28(fp)
    a994:	1005003a 	cmpeq	r2,r2,zero
    a998:	1000051e 	bne	r2,zero,a9b0 <altera_avalon_jtag_uart_irq+0x1c4>
    a99c:	e0bffe17 	ldw	r2,-8(fp)
    a9a0:	10c00d17 	ldw	r3,52(r2)
    a9a4:	e0bffe17 	ldw	r2,-8(fp)
    a9a8:	10800c17 	ldw	r2,48(r2)
    a9ac:	18bfe31e 	bne	r3,r2,a93c <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    a9b0:	e0bff917 	ldw	r2,-28(fp)
    a9b4:	1005003a 	cmpeq	r2,r2,zero
    a9b8:	103f961e 	bne	r2,zero,a814 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    a9bc:	e0bffe17 	ldw	r2,-8(fp)
    a9c0:	10c00817 	ldw	r3,32(r2)
    a9c4:	00bfff44 	movi	r2,-3
    a9c8:	1886703a 	and	r3,r3,r2
    a9cc:	e0bffe17 	ldw	r2,-8(fp)
    a9d0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    a9d4:	e0bffe17 	ldw	r2,-8(fp)
    a9d8:	10800017 	ldw	r2,0(r2)
    a9dc:	11000104 	addi	r4,r2,4
    a9e0:	e0bffe17 	ldw	r2,-8(fp)
    a9e4:	10800817 	ldw	r2,32(r2)
    a9e8:	1007883a 	mov	r3,r2
    a9ec:	2005883a 	mov	r2,r4
    a9f0:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    a9f4:	e0bffd17 	ldw	r2,-12(fp)
    a9f8:	10800104 	addi	r2,r2,4
    a9fc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    aa00:	003f8406 	br	a814 <altera_avalon_jtag_uart_irq+0x28>
}
    aa04:	e037883a 	mov	sp,fp
    aa08:	df000017 	ldw	fp,0(sp)
    aa0c:	dec00104 	addi	sp,sp,4
    aa10:	f800283a 	ret

0000aa14 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    aa14:	defffc04 	addi	sp,sp,-16
    aa18:	df000315 	stw	fp,12(sp)
    aa1c:	df000304 	addi	fp,sp,12
    aa20:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    aa24:	e0bfff17 	ldw	r2,-4(fp)
    aa28:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    aa2c:	e0bffe17 	ldw	r2,-8(fp)
    aa30:	10800017 	ldw	r2,0(r2)
    aa34:	10800104 	addi	r2,r2,4
    aa38:	10800037 	ldwio	r2,0(r2)
    aa3c:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    aa40:	e0bffd17 	ldw	r2,-12(fp)
    aa44:	1081000c 	andi	r2,r2,1024
    aa48:	1005003a 	cmpeq	r2,r2,zero
    aa4c:	10000c1e 	bne	r2,zero,aa80 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    aa50:	e0bffe17 	ldw	r2,-8(fp)
    aa54:	10800017 	ldw	r2,0(r2)
    aa58:	11000104 	addi	r4,r2,4
    aa5c:	e0bffe17 	ldw	r2,-8(fp)
    aa60:	10800817 	ldw	r2,32(r2)
    aa64:	10810014 	ori	r2,r2,1024
    aa68:	1007883a 	mov	r3,r2
    aa6c:	2005883a 	mov	r2,r4
    aa70:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
    aa74:	e0bffe17 	ldw	r2,-8(fp)
    aa78:	10000915 	stw	zero,36(r2)
    aa7c:	00000a06 	br	aaa8 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    aa80:	e0bffe17 	ldw	r2,-8(fp)
    aa84:	10c00917 	ldw	r3,36(r2)
    aa88:	00a00034 	movhi	r2,32768
    aa8c:	10bfff04 	addi	r2,r2,-4
    aa90:	10c00536 	bltu	r2,r3,aaa8 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
    aa94:	e0bffe17 	ldw	r2,-8(fp)
    aa98:	10800917 	ldw	r2,36(r2)
    aa9c:	10c00044 	addi	r3,r2,1
    aaa0:	e0bffe17 	ldw	r2,-8(fp)
    aaa4:	10c00915 	stw	r3,36(r2)
    aaa8:	00800074 	movhi	r2,1
    aaac:	1082bd04 	addi	r2,r2,2804
    aab0:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    aab4:	e037883a 	mov	sp,fp
    aab8:	df000017 	ldw	fp,0(sp)
    aabc:	dec00104 	addi	sp,sp,4
    aac0:	f800283a 	ret

0000aac4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    aac4:	defffc04 	addi	sp,sp,-16
    aac8:	df000315 	stw	fp,12(sp)
    aacc:	df000304 	addi	fp,sp,12
    aad0:	e13ffd15 	stw	r4,-12(fp)
    aad4:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    aad8:	00000706 	br	aaf8 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
    aadc:	e0bffe17 	ldw	r2,-8(fp)
    aae0:	1090000c 	andi	r2,r2,16384
    aae4:	1005003a 	cmpeq	r2,r2,zero
    aae8:	1000031e 	bne	r2,zero,aaf8 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
    aaec:	00bffd44 	movi	r2,-11
    aaf0:	e0bfff15 	stw	r2,-4(fp)
    aaf4:	00000b06 	br	ab24 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    aaf8:	e0bffd17 	ldw	r2,-12(fp)
    aafc:	10c00d17 	ldw	r3,52(r2)
    ab00:	e0bffd17 	ldw	r2,-12(fp)
    ab04:	10800c17 	ldw	r2,48(r2)
    ab08:	18800526 	beq	r3,r2,ab20 <altera_avalon_jtag_uart_close+0x5c>
    ab0c:	e0bffd17 	ldw	r2,-12(fp)
    ab10:	10c00917 	ldw	r3,36(r2)
    ab14:	e0bffd17 	ldw	r2,-12(fp)
    ab18:	10800117 	ldw	r2,4(r2)
    ab1c:	18bfef36 	bltu	r3,r2,aadc <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    ab20:	e03fff15 	stw	zero,-4(fp)
    ab24:	e0bfff17 	ldw	r2,-4(fp)
}
    ab28:	e037883a 	mov	sp,fp
    ab2c:	df000017 	ldw	fp,0(sp)
    ab30:	dec00104 	addi	sp,sp,4
    ab34:	f800283a 	ret

0000ab38 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    ab38:	defff804 	addi	sp,sp,-32
    ab3c:	df000715 	stw	fp,28(sp)
    ab40:	df000704 	addi	fp,sp,28
    ab44:	e13ffb15 	stw	r4,-20(fp)
    ab48:	e17ffc15 	stw	r5,-16(fp)
    ab4c:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
    ab50:	00bff9c4 	movi	r2,-25
    ab54:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
    ab58:	e0bffc17 	ldw	r2,-16(fp)
    ab5c:	e0bfff15 	stw	r2,-4(fp)
    ab60:	e0ffff17 	ldw	r3,-4(fp)
    ab64:	189a8060 	cmpeqi	r2,r3,27137
    ab68:	1000041e 	bne	r2,zero,ab7c <altera_avalon_jtag_uart_ioctl+0x44>
    ab6c:	e0ffff17 	ldw	r3,-4(fp)
    ab70:	189a80a0 	cmpeqi	r2,r3,27138
    ab74:	10001b1e 	bne	r2,zero,abe4 <altera_avalon_jtag_uart_ioctl+0xac>
    ab78:	00002706 	br	ac18 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    ab7c:	e0bffb17 	ldw	r2,-20(fp)
    ab80:	10c00117 	ldw	r3,4(r2)
    ab84:	00a00034 	movhi	r2,32768
    ab88:	10bfffc4 	addi	r2,r2,-1
    ab8c:	18802226 	beq	r3,r2,ac18 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
    ab90:	e0bffd17 	ldw	r2,-12(fp)
    ab94:	10800017 	ldw	r2,0(r2)
    ab98:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    ab9c:	e0bff917 	ldw	r2,-28(fp)
    aba0:	10800090 	cmplti	r2,r2,2
    aba4:	1000071e 	bne	r2,zero,abc4 <altera_avalon_jtag_uart_ioctl+0x8c>
    aba8:	e0fff917 	ldw	r3,-28(fp)
    abac:	00a00034 	movhi	r2,32768
    abb0:	10bfffc4 	addi	r2,r2,-1
    abb4:	18800326 	beq	r3,r2,abc4 <altera_avalon_jtag_uart_ioctl+0x8c>
    abb8:	e0bff917 	ldw	r2,-28(fp)
    abbc:	e0bffe15 	stw	r2,-8(fp)
    abc0:	00000306 	br	abd0 <altera_avalon_jtag_uart_ioctl+0x98>
    abc4:	00e00034 	movhi	r3,32768
    abc8:	18ffff84 	addi	r3,r3,-2
    abcc:	e0fffe15 	stw	r3,-8(fp)
    abd0:	e0bffb17 	ldw	r2,-20(fp)
    abd4:	e0fffe17 	ldw	r3,-8(fp)
    abd8:	10c00115 	stw	r3,4(r2)
      rc = 0;
    abdc:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
    abe0:	00000d06 	br	ac18 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    abe4:	e0bffb17 	ldw	r2,-20(fp)
    abe8:	10c00117 	ldw	r3,4(r2)
    abec:	00a00034 	movhi	r2,32768
    abf0:	10bfffc4 	addi	r2,r2,-1
    abf4:	18800826 	beq	r3,r2,ac18 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    abf8:	e13ffd17 	ldw	r4,-12(fp)
    abfc:	e0bffb17 	ldw	r2,-20(fp)
    ac00:	10c00917 	ldw	r3,36(r2)
    ac04:	e0bffb17 	ldw	r2,-20(fp)
    ac08:	10800117 	ldw	r2,4(r2)
    ac0c:	1885803a 	cmpltu	r2,r3,r2
    ac10:	20800015 	stw	r2,0(r4)
      rc = 0;
    ac14:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
    ac18:	e0bffa17 	ldw	r2,-24(fp)
}
    ac1c:	e037883a 	mov	sp,fp
    ac20:	df000017 	ldw	fp,0(sp)
    ac24:	dec00104 	addi	sp,sp,4
    ac28:	f800283a 	ret

0000ac2c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    ac2c:	defff204 	addi	sp,sp,-56
    ac30:	dfc00d15 	stw	ra,52(sp)
    ac34:	df000c15 	stw	fp,48(sp)
    ac38:	df000c04 	addi	fp,sp,48
    ac3c:	e13ffb15 	stw	r4,-20(fp)
    ac40:	e17ffc15 	stw	r5,-16(fp)
    ac44:	e1bffd15 	stw	r6,-12(fp)
    ac48:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
    ac4c:	e0bffc17 	ldw	r2,-16(fp)
    ac50:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    ac54:	00004806 	br	ad78 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    ac58:	e0bffb17 	ldw	r2,-20(fp)
    ac5c:	10800a17 	ldw	r2,40(r2)
    ac60:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    ac64:	e0bffb17 	ldw	r2,-20(fp)
    ac68:	10800b17 	ldw	r2,44(r2)
    ac6c:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
    ac70:	e0fff717 	ldw	r3,-36(fp)
    ac74:	e0bff617 	ldw	r2,-40(fp)
    ac78:	18800536 	bltu	r3,r2,ac90 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    ac7c:	e0bff717 	ldw	r2,-36(fp)
    ac80:	e0fff617 	ldw	r3,-40(fp)
    ac84:	10c5c83a 	sub	r2,r2,r3
    ac88:	e0bff815 	stw	r2,-32(fp)
    ac8c:	00000406 	br	aca0 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    ac90:	00820004 	movi	r2,2048
    ac94:	e0fff617 	ldw	r3,-40(fp)
    ac98:	10c5c83a 	sub	r2,r2,r3
    ac9c:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    aca0:	e0bff817 	ldw	r2,-32(fp)
    aca4:	1005003a 	cmpeq	r2,r2,zero
    aca8:	10001f1e 	bne	r2,zero,ad28 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
    acac:	e0fffd17 	ldw	r3,-12(fp)
    acb0:	e0bff817 	ldw	r2,-32(fp)
    acb4:	1880022e 	bgeu	r3,r2,acc0 <altera_avalon_jtag_uart_read+0x94>
        n = space;
    acb8:	e0bffd17 	ldw	r2,-12(fp)
    acbc:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    acc0:	e0bffb17 	ldw	r2,-20(fp)
    acc4:	10c00e04 	addi	r3,r2,56
    acc8:	e0bff617 	ldw	r2,-40(fp)
    accc:	1887883a 	add	r3,r3,r2
    acd0:	e0bffa17 	ldw	r2,-24(fp)
    acd4:	1009883a 	mov	r4,r2
    acd8:	180b883a 	mov	r5,r3
    acdc:	e1bff817 	ldw	r6,-32(fp)
    ace0:	00055dc0 	call	55dc <memcpy>
      ptr   += n;
    ace4:	e0fff817 	ldw	r3,-32(fp)
    ace8:	e0bffa17 	ldw	r2,-24(fp)
    acec:	10c5883a 	add	r2,r2,r3
    acf0:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
    acf4:	e0fffd17 	ldw	r3,-12(fp)
    acf8:	e0bff817 	ldw	r2,-32(fp)
    acfc:	1885c83a 	sub	r2,r3,r2
    ad00:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ad04:	e0fff617 	ldw	r3,-40(fp)
    ad08:	e0bff817 	ldw	r2,-32(fp)
    ad0c:	1885883a 	add	r2,r3,r2
    ad10:	10c1ffcc 	andi	r3,r2,2047
    ad14:	e0bffb17 	ldw	r2,-20(fp)
    ad18:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    ad1c:	e0bffd17 	ldw	r2,-12(fp)
    ad20:	10800048 	cmpgei	r2,r2,1
    ad24:	103fcc1e 	bne	r2,zero,ac58 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
    ad28:	e0fffa17 	ldw	r3,-24(fp)
    ad2c:	e0bffc17 	ldw	r2,-16(fp)
    ad30:	1880141e 	bne	r3,r2,ad84 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    ad34:	e0bffe17 	ldw	r2,-8(fp)
    ad38:	1090000c 	andi	r2,r2,16384
    ad3c:	1004c03a 	cmpne	r2,r2,zero
    ad40:	1000101e 	bne	r2,zero,ad84 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    ad44:	e0bffb17 	ldw	r2,-20(fp)
    ad48:	10c00a17 	ldw	r3,40(r2)
    ad4c:	e0bff717 	ldw	r2,-36(fp)
    ad50:	1880051e 	bne	r3,r2,ad68 <altera_avalon_jtag_uart_read+0x13c>
    ad54:	e0bffb17 	ldw	r2,-20(fp)
    ad58:	10c00917 	ldw	r3,36(r2)
    ad5c:	e0bffb17 	ldw	r2,-20(fp)
    ad60:	10800117 	ldw	r2,4(r2)
    ad64:	18bff736 	bltu	r3,r2,ad44 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    ad68:	e0bffb17 	ldw	r2,-20(fp)
    ad6c:	10c00a17 	ldw	r3,40(r2)
    ad70:	e0bff717 	ldw	r2,-36(fp)
    ad74:	18800326 	beq	r3,r2,ad84 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    ad78:	e0bffd17 	ldw	r2,-12(fp)
    ad7c:	10800048 	cmpgei	r2,r2,1
    ad80:	103fb51e 	bne	r2,zero,ac58 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    ad84:	e0fffa17 	ldw	r3,-24(fp)
    ad88:	e0bffc17 	ldw	r2,-16(fp)
    ad8c:	18801926 	beq	r3,r2,adf4 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ad90:	0005303a 	rdctl	r2,status
    ad94:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ad98:	e0fff517 	ldw	r3,-44(fp)
    ad9c:	00bfff84 	movi	r2,-2
    ada0:	1884703a 	and	r2,r3,r2
    ada4:	1001703a 	wrctl	status,r2
  
  return context;
    ada8:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    adac:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    adb0:	e0bffb17 	ldw	r2,-20(fp)
    adb4:	10800817 	ldw	r2,32(r2)
    adb8:	10c00054 	ori	r3,r2,1
    adbc:	e0bffb17 	ldw	r2,-20(fp)
    adc0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    adc4:	e0bffb17 	ldw	r2,-20(fp)
    adc8:	10800017 	ldw	r2,0(r2)
    adcc:	11000104 	addi	r4,r2,4
    add0:	e0bffb17 	ldw	r2,-20(fp)
    add4:	10800817 	ldw	r2,32(r2)
    add8:	1007883a 	mov	r3,r2
    addc:	2005883a 	mov	r2,r4
    ade0:	10c00035 	stwio	r3,0(r2)
    ade4:	e0bff917 	ldw	r2,-28(fp)
    ade8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    adec:	e0bff417 	ldw	r2,-48(fp)
    adf0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    adf4:	e0fffa17 	ldw	r3,-24(fp)
    adf8:	e0bffc17 	ldw	r2,-16(fp)
    adfc:	18800526 	beq	r3,r2,ae14 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
    ae00:	e0fffa17 	ldw	r3,-24(fp)
    ae04:	e0bffc17 	ldw	r2,-16(fp)
    ae08:	1887c83a 	sub	r3,r3,r2
    ae0c:	e0ffff15 	stw	r3,-4(fp)
    ae10:	00000906 	br	ae38 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
    ae14:	e0bffe17 	ldw	r2,-8(fp)
    ae18:	1090000c 	andi	r2,r2,16384
    ae1c:	1005003a 	cmpeq	r2,r2,zero
    ae20:	1000031e 	bne	r2,zero,ae30 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    ae24:	00bffd44 	movi	r2,-11
    ae28:	e0bfff15 	stw	r2,-4(fp)
    ae2c:	00000206 	br	ae38 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
    ae30:	00bffec4 	movi	r2,-5
    ae34:	e0bfff15 	stw	r2,-4(fp)
    ae38:	e0bfff17 	ldw	r2,-4(fp)
}
    ae3c:	e037883a 	mov	sp,fp
    ae40:	dfc00117 	ldw	ra,4(sp)
    ae44:	df000017 	ldw	fp,0(sp)
    ae48:	dec00204 	addi	sp,sp,8
    ae4c:	f800283a 	ret

0000ae50 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    ae50:	defff204 	addi	sp,sp,-56
    ae54:	dfc00d15 	stw	ra,52(sp)
    ae58:	df000c15 	stw	fp,48(sp)
    ae5c:	df000c04 	addi	fp,sp,48
    ae60:	e13ffb15 	stw	r4,-20(fp)
    ae64:	e17ffc15 	stw	r5,-16(fp)
    ae68:	e1bffd15 	stw	r6,-12(fp)
    ae6c:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    ae70:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    ae74:	e0bffc17 	ldw	r2,-16(fp)
    ae78:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    ae7c:	00003a06 	br	af68 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    ae80:	e0bffb17 	ldw	r2,-20(fp)
    ae84:	10800c17 	ldw	r2,48(r2)
    ae88:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
    ae8c:	e0bffb17 	ldw	r2,-20(fp)
    ae90:	10800d17 	ldw	r2,52(r2)
    ae94:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
    ae98:	e0fffa17 	ldw	r3,-24(fp)
    ae9c:	e0bff917 	ldw	r2,-28(fp)
    aea0:	1880062e 	bgeu	r3,r2,aebc <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    aea4:	e0fff917 	ldw	r3,-28(fp)
    aea8:	e0bffa17 	ldw	r2,-24(fp)
    aeac:	1885c83a 	sub	r2,r3,r2
    aeb0:	10bfffc4 	addi	r2,r2,-1
    aeb4:	e0bff815 	stw	r2,-32(fp)
    aeb8:	00000c06 	br	aeec <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
    aebc:	e0bff917 	ldw	r2,-28(fp)
    aec0:	1005003a 	cmpeq	r2,r2,zero
    aec4:	1000051e 	bne	r2,zero,aedc <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    aec8:	00820004 	movi	r2,2048
    aecc:	e0fffa17 	ldw	r3,-24(fp)
    aed0:	10c5c83a 	sub	r2,r2,r3
    aed4:	e0bff815 	stw	r2,-32(fp)
    aed8:	00000406 	br	aeec <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    aedc:	0081ffc4 	movi	r2,2047
    aee0:	e0fffa17 	ldw	r3,-24(fp)
    aee4:	10c5c83a 	sub	r2,r2,r3
    aee8:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    aeec:	e0bff817 	ldw	r2,-32(fp)
    aef0:	1005003a 	cmpeq	r2,r2,zero
    aef4:	10001f1e 	bne	r2,zero,af74 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
    aef8:	e0fffd17 	ldw	r3,-12(fp)
    aefc:	e0bff817 	ldw	r2,-32(fp)
    af00:	1880022e 	bgeu	r3,r2,af0c <altera_avalon_jtag_uart_write+0xbc>
        n = count;
    af04:	e0bffd17 	ldw	r2,-12(fp)
    af08:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    af0c:	e0bffb17 	ldw	r2,-20(fp)
    af10:	10c20e04 	addi	r3,r2,2104
    af14:	e0bffa17 	ldw	r2,-24(fp)
    af18:	1885883a 	add	r2,r3,r2
    af1c:	e0fffc17 	ldw	r3,-16(fp)
    af20:	1009883a 	mov	r4,r2
    af24:	180b883a 	mov	r5,r3
    af28:	e1bff817 	ldw	r6,-32(fp)
    af2c:	00055dc0 	call	55dc <memcpy>
      ptr   += n;
    af30:	e0fff817 	ldw	r3,-32(fp)
    af34:	e0bffc17 	ldw	r2,-16(fp)
    af38:	10c5883a 	add	r2,r2,r3
    af3c:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
    af40:	e0fffd17 	ldw	r3,-12(fp)
    af44:	e0bff817 	ldw	r2,-32(fp)
    af48:	1885c83a 	sub	r2,r3,r2
    af4c:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    af50:	e0fffa17 	ldw	r3,-24(fp)
    af54:	e0bff817 	ldw	r2,-32(fp)
    af58:	1885883a 	add	r2,r3,r2
    af5c:	10c1ffcc 	andi	r3,r2,2047
    af60:	e0bffb17 	ldw	r2,-20(fp)
    af64:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    af68:	e0bffd17 	ldw	r2,-12(fp)
    af6c:	10800048 	cmpgei	r2,r2,1
    af70:	103fc31e 	bne	r2,zero,ae80 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    af74:	0005303a 	rdctl	r2,status
    af78:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    af7c:	e0fff517 	ldw	r3,-44(fp)
    af80:	00bfff84 	movi	r2,-2
    af84:	1884703a 	and	r2,r3,r2
    af88:	1001703a 	wrctl	status,r2
  
  return context;
    af8c:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    af90:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    af94:	e0bffb17 	ldw	r2,-20(fp)
    af98:	10800817 	ldw	r2,32(r2)
    af9c:	10c00094 	ori	r3,r2,2
    afa0:	e0bffb17 	ldw	r2,-20(fp)
    afa4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    afa8:	e0bffb17 	ldw	r2,-20(fp)
    afac:	10800017 	ldw	r2,0(r2)
    afb0:	11000104 	addi	r4,r2,4
    afb4:	e0bffb17 	ldw	r2,-20(fp)
    afb8:	10800817 	ldw	r2,32(r2)
    afbc:	1007883a 	mov	r3,r2
    afc0:	2005883a 	mov	r2,r4
    afc4:	10c00035 	stwio	r3,0(r2)
    afc8:	e0bff717 	ldw	r2,-36(fp)
    afcc:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    afd0:	e0bff417 	ldw	r2,-48(fp)
    afd4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    afd8:	e0bffd17 	ldw	r2,-12(fp)
    afdc:	10800050 	cmplti	r2,r2,1
    afe0:	1000111e 	bne	r2,zero,b028 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
    afe4:	e0bffe17 	ldw	r2,-8(fp)
    afe8:	1090000c 	andi	r2,r2,16384
    afec:	1004c03a 	cmpne	r2,r2,zero
    aff0:	1000101e 	bne	r2,zero,b034 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    aff4:	e0bffb17 	ldw	r2,-20(fp)
    aff8:	10c00d17 	ldw	r3,52(r2)
    affc:	e0bff917 	ldw	r2,-28(fp)
    b000:	1880051e 	bne	r3,r2,b018 <altera_avalon_jtag_uart_write+0x1c8>
    b004:	e0bffb17 	ldw	r2,-20(fp)
    b008:	10c00917 	ldw	r3,36(r2)
    b00c:	e0bffb17 	ldw	r2,-20(fp)
    b010:	10800117 	ldw	r2,4(r2)
    b014:	18bff736 	bltu	r3,r2,aff4 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
    b018:	e0bffb17 	ldw	r2,-20(fp)
    b01c:	10c00d17 	ldw	r3,52(r2)
    b020:	e0bff917 	ldw	r2,-28(fp)
    b024:	18800326 	beq	r3,r2,b034 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
    b028:	e0bffd17 	ldw	r2,-12(fp)
    b02c:	10800048 	cmpgei	r2,r2,1
    b030:	103fcd1e 	bne	r2,zero,af68 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    b034:	e0fffc17 	ldw	r3,-16(fp)
    b038:	e0bff617 	ldw	r2,-40(fp)
    b03c:	18800526 	beq	r3,r2,b054 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
    b040:	e0fffc17 	ldw	r3,-16(fp)
    b044:	e0bff617 	ldw	r2,-40(fp)
    b048:	1887c83a 	sub	r3,r3,r2
    b04c:	e0ffff15 	stw	r3,-4(fp)
    b050:	00000906 	br	b078 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
    b054:	e0bffe17 	ldw	r2,-8(fp)
    b058:	1090000c 	andi	r2,r2,16384
    b05c:	1005003a 	cmpeq	r2,r2,zero
    b060:	1000031e 	bne	r2,zero,b070 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
    b064:	00bffd44 	movi	r2,-11
    b068:	e0bfff15 	stw	r2,-4(fp)
    b06c:	00000206 	br	b078 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
    b070:	00bffec4 	movi	r2,-5
    b074:	e0bfff15 	stw	r2,-4(fp)
    b078:	e0bfff17 	ldw	r2,-4(fp)
}
    b07c:	e037883a 	mov	sp,fp
    b080:	dfc00117 	ldw	ra,4(sp)
    b084:	df000017 	ldw	fp,0(sp)
    b088:	dec00204 	addi	sp,sp,8
    b08c:	f800283a 	ret

0000b090 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    b090:	defffa04 	addi	sp,sp,-24
    b094:	dfc00515 	stw	ra,20(sp)
    b098:	df000415 	stw	fp,16(sp)
    b09c:	df000404 	addi	fp,sp,16
    b0a0:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    b0a4:	e0bfff17 	ldw	r2,-4(fp)
    b0a8:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    b0ac:	e0bfff17 	ldw	r2,-4(fp)
    b0b0:	10800104 	addi	r2,r2,4
    b0b4:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b0b8:	0005303a 	rdctl	r2,status
    b0bc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b0c0:	e0fffd17 	ldw	r3,-12(fp)
    b0c4:	00bfff84 	movi	r2,-2
    b0c8:	1884703a 	and	r2,r3,r2
    b0cc:	1001703a 	wrctl	status,r2
  
  return context;
    b0d0:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    b0d4:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
    b0d8:	000c6200 	call	c620 <alt_tick>
    b0dc:	e0bffe17 	ldw	r2,-8(fp)
    b0e0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b0e4:	e0bffc17 	ldw	r2,-16(fp)
    b0e8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    b0ec:	e037883a 	mov	sp,fp
    b0f0:	dfc00117 	ldw	ra,4(sp)
    b0f4:	df000017 	ldw	fp,0(sp)
    b0f8:	dec00204 	addi	sp,sp,8
    b0fc:	f800283a 	ret

0000b100 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    b100:	defff804 	addi	sp,sp,-32
    b104:	dfc00715 	stw	ra,28(sp)
    b108:	df000615 	stw	fp,24(sp)
    b10c:	df000604 	addi	fp,sp,24
    b110:	e13ffc15 	stw	r4,-16(fp)
    b114:	e17ffd15 	stw	r5,-12(fp)
    b118:	e1bffe15 	stw	r6,-8(fp)
    b11c:	e1ffff15 	stw	r7,-4(fp)
    b120:	e0bfff17 	ldw	r2,-4(fp)
    b124:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    b128:	00800074 	movhi	r2,1
    b12c:	1082bd04 	addi	r2,r2,2804
    b130:	10800017 	ldw	r2,0(r2)
    b134:	1004c03a 	cmpne	r2,r2,zero
    b138:	1000041e 	bne	r2,zero,b14c <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
    b13c:	00c00074 	movhi	r3,1
    b140:	18c2bd04 	addi	r3,r3,2804
    b144:	e0bffb17 	ldw	r2,-20(fp)
    b148:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    b14c:	e0bffc17 	ldw	r2,-16(fp)
    b150:	10800104 	addi	r2,r2,4
    b154:	1007883a 	mov	r3,r2
    b158:	008001c4 	movi	r2,7
    b15c:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    b160:	d8000015 	stw	zero,0(sp)
    b164:	e13ffd17 	ldw	r4,-12(fp)
    b168:	e17ffe17 	ldw	r5,-8(fp)
    b16c:	01800074 	movhi	r6,1
    b170:	31ac2404 	addi	r6,r6,-20336
    b174:	e1fffc17 	ldw	r7,-16(fp)
    b178:	000bebc0 	call	bebc <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    b17c:	e037883a 	mov	sp,fp
    b180:	dfc00117 	ldw	ra,4(sp)
    b184:	df000017 	ldw	fp,0(sp)
    b188:	dec00204 	addi	sp,sp,8
    b18c:	f800283a 	ret

0000b190 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    b190:	defffa04 	addi	sp,sp,-24
    b194:	dfc00515 	stw	ra,20(sp)
    b198:	df000415 	stw	fp,16(sp)
    b19c:	df000404 	addi	fp,sp,16
    b1a0:	e13ffd15 	stw	r4,-12(fp)
    b1a4:	e17ffe15 	stw	r5,-8(fp)
    b1a8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    b1ac:	e0bffd17 	ldw	r2,-12(fp)
    b1b0:	10800017 	ldw	r2,0(r2)
    b1b4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
    b1b8:	e0bffc17 	ldw	r2,-16(fp)
    b1bc:	11000a04 	addi	r4,r2,40
    b1c0:	e0bffd17 	ldw	r2,-12(fp)
    b1c4:	11c00217 	ldw	r7,8(r2)
    b1c8:	e17ffe17 	ldw	r5,-8(fp)
    b1cc:	e1bfff17 	ldw	r6,-4(fp)
    b1d0:	000b6880 	call	b688 <altera_avalon_uart_read>
      fd->fd_flags);
}
    b1d4:	e037883a 	mov	sp,fp
    b1d8:	dfc00117 	ldw	ra,4(sp)
    b1dc:	df000017 	ldw	fp,0(sp)
    b1e0:	dec00204 	addi	sp,sp,8
    b1e4:	f800283a 	ret

0000b1e8 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    b1e8:	defffa04 	addi	sp,sp,-24
    b1ec:	dfc00515 	stw	ra,20(sp)
    b1f0:	df000415 	stw	fp,16(sp)
    b1f4:	df000404 	addi	fp,sp,16
    b1f8:	e13ffd15 	stw	r4,-12(fp)
    b1fc:	e17ffe15 	stw	r5,-8(fp)
    b200:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    b204:	e0bffd17 	ldw	r2,-12(fp)
    b208:	10800017 	ldw	r2,0(r2)
    b20c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
    b210:	e0bffc17 	ldw	r2,-16(fp)
    b214:	11000a04 	addi	r4,r2,40
    b218:	e0bffd17 	ldw	r2,-12(fp)
    b21c:	11c00217 	ldw	r7,8(r2)
    b220:	e17ffe17 	ldw	r5,-8(fp)
    b224:	e1bfff17 	ldw	r6,-4(fp)
    b228:	000b9180 	call	b918 <altera_avalon_uart_write>
      fd->fd_flags);
}
    b22c:	e037883a 	mov	sp,fp
    b230:	dfc00117 	ldw	ra,4(sp)
    b234:	df000017 	ldw	fp,0(sp)
    b238:	dec00204 	addi	sp,sp,8
    b23c:	f800283a 	ret

0000b240 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
    b240:	defffc04 	addi	sp,sp,-16
    b244:	dfc00315 	stw	ra,12(sp)
    b248:	df000215 	stw	fp,8(sp)
    b24c:	df000204 	addi	fp,sp,8
    b250:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    b254:	e0bfff17 	ldw	r2,-4(fp)
    b258:	10800017 	ldw	r2,0(r2)
    b25c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
    b260:	e0bffe17 	ldw	r2,-8(fp)
    b264:	11000a04 	addi	r4,r2,40
    b268:	e0bfff17 	ldw	r2,-4(fp)
    b26c:	11400217 	ldw	r5,8(r2)
    b270:	000b6280 	call	b628 <altera_avalon_uart_close>
}
    b274:	e037883a 	mov	sp,fp
    b278:	dfc00117 	ldw	ra,4(sp)
    b27c:	df000017 	ldw	fp,0(sp)
    b280:	dec00204 	addi	sp,sp,8
    b284:	f800283a 	ret

0000b288 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
    b288:	defff704 	addi	sp,sp,-36
    b28c:	dfc00815 	stw	ra,32(sp)
    b290:	df000715 	stw	fp,28(sp)
    b294:	df000704 	addi	fp,sp,28
    b298:	e13ffc15 	stw	r4,-16(fp)
    b29c:	e17ffd15 	stw	r5,-12(fp)
    b2a0:	e1bffe15 	stw	r6,-8(fp)
  void* base = sp->base;
    b2a4:	e0bffc17 	ldw	r2,-16(fp)
    b2a8:	10800017 	ldw	r2,0(r2)
    b2ac:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
    b2b0:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
    b2b4:	1004c03a 	cmpne	r2,r2,zero
    b2b8:	1000061e 	bne	r2,zero,b2d4 <altera_avalon_uart_init+0x4c>
    b2bc:	0005883a 	mov	r2,zero
    b2c0:	1004c03a 	cmpne	r2,r2,zero
    b2c4:	1000031e 	bne	r2,zero,b2d4 <altera_avalon_uart_init+0x4c>
    b2c8:	0005883a 	mov	r2,zero
    b2cc:	1005003a 	cmpeq	r2,r2,zero
    b2d0:	1000031e 	bne	r2,zero,b2e0 <altera_avalon_uart_init+0x58>
    b2d4:	00800044 	movi	r2,1
    b2d8:	e0bfff15 	stw	r2,-4(fp)
    b2dc:	00000106 	br	b2e4 <altera_avalon_uart_init+0x5c>
    b2e0:	e03fff15 	stw	zero,-4(fp)
    b2e4:	e0bfff17 	ldw	r2,-4(fp)
    b2e8:	e0bffa15 	stw	r2,-24(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
    b2ec:	e0bffa17 	ldw	r2,-24(fp)
    b2f0:	1004c03a 	cmpne	r2,r2,zero
    b2f4:	1000111e 	bne	r2,zero,b33c <altera_avalon_uart_init+0xb4>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
    b2f8:	e0fffc17 	ldw	r3,-16(fp)
    b2fc:	00832004 	movi	r2,3200
    b300:	18800115 	stw	r2,4(r3)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
    b304:	e0bffb17 	ldw	r2,-20(fp)
    b308:	11000304 	addi	r4,r2,12
    b30c:	e0bffc17 	ldw	r2,-16(fp)
    b310:	10800117 	ldw	r2,4(r2)
    b314:	1007883a 	mov	r3,r2
    b318:	2005883a 	mov	r2,r4
    b31c:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
    b320:	d8000015 	stw	zero,0(sp)
    b324:	e13ffd17 	ldw	r4,-12(fp)
    b328:	e17ffe17 	ldw	r5,-8(fp)
    b32c:	01800074 	movhi	r6,1
    b330:	31acd404 	addi	r6,r6,-19632
    b334:	e1fffc17 	ldw	r7,-16(fp)
    b338:	000bebc0 	call	bebc <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
    b33c:	e037883a 	mov	sp,fp
    b340:	dfc00117 	ldw	ra,4(sp)
    b344:	df000017 	ldw	fp,0(sp)
    b348:	dec00204 	addi	sp,sp,8
    b34c:	f800283a 	ret

0000b350 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
    b350:	defffa04 	addi	sp,sp,-24
    b354:	dfc00515 	stw	ra,20(sp)
    b358:	df000415 	stw	fp,16(sp)
    b35c:	df000404 	addi	fp,sp,16
    b360:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
    b364:	e0bfff17 	ldw	r2,-4(fp)
    b368:	e0bffd15 	stw	r2,-12(fp)
  void* base               = sp->base;
    b36c:	e0bffd17 	ldw	r2,-12(fp)
    b370:	10800017 	ldw	r2,0(r2)
    b374:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
    b378:	e0bffc17 	ldw	r2,-16(fp)
    b37c:	10800204 	addi	r2,r2,8
    b380:	10800037 	ldwio	r2,0(r2)
    b384:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
    b388:	e0bffc17 	ldw	r2,-16(fp)
    b38c:	10800204 	addi	r2,r2,8
    b390:	10000035 	stwio	zero,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
    b394:	e0bffc17 	ldw	r2,-16(fp)
    b398:	10800204 	addi	r2,r2,8
    b39c:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
    b3a0:	e0bffe17 	ldw	r2,-8(fp)
    b3a4:	1080200c 	andi	r2,r2,128
    b3a8:	1005003a 	cmpeq	r2,r2,zero
    b3ac:	1000031e 	bne	r2,zero,b3bc <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
    b3b0:	e13ffd17 	ldw	r4,-12(fp)
    b3b4:	e17ffe17 	ldw	r5,-8(fp)
    b3b8:	000b3ec0 	call	b3ec <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
    b3bc:	e0bffe17 	ldw	r2,-8(fp)
    b3c0:	1081100c 	andi	r2,r2,1088
    b3c4:	1005003a 	cmpeq	r2,r2,zero
    b3c8:	1000031e 	bne	r2,zero,b3d8 <altera_avalon_uart_irq+0x88>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
    b3cc:	e13ffd17 	ldw	r4,-12(fp)
    b3d0:	e17ffe17 	ldw	r5,-8(fp)
    b3d4:	000b4cc0 	call	b4cc <altera_avalon_uart_txirq>
  }
  

}
    b3d8:	e037883a 	mov	sp,fp
    b3dc:	dfc00117 	ldw	ra,4(sp)
    b3e0:	df000017 	ldw	fp,0(sp)
    b3e4:	dec00204 	addi	sp,sp,8
    b3e8:	f800283a 	ret

0000b3ec <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
    b3ec:	defffc04 	addi	sp,sp,-16
    b3f0:	df000315 	stw	fp,12(sp)
    b3f4:	df000304 	addi	fp,sp,12
    b3f8:	e13ffe15 	stw	r4,-8(fp)
    b3fc:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
    b400:	e0bfff17 	ldw	r2,-4(fp)
    b404:	108000cc 	andi	r2,r2,3
    b408:	1004c03a 	cmpne	r2,r2,zero
    b40c:	10002b1e 	bne	r2,zero,b4bc <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
    b410:	e0bffe17 	ldw	r2,-8(fp)
    b414:	10800317 	ldw	r2,12(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
    b418:	e0bffe17 	ldw	r2,-8(fp)
    b41c:	10800317 	ldw	r2,12(r2)
    b420:	10800044 	addi	r2,r2,1
    b424:	10800fcc 	andi	r2,r2,63
    b428:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
    b42c:	e0bffe17 	ldw	r2,-8(fp)
    b430:	11000317 	ldw	r4,12(r2)
    b434:	e0bffe17 	ldw	r2,-8(fp)
    b438:	10800017 	ldw	r2,0(r2)
    b43c:	10800037 	ldwio	r2,0(r2)
    b440:	1007883a 	mov	r3,r2
    b444:	e0bffe17 	ldw	r2,-8(fp)
    b448:	2085883a 	add	r2,r4,r2
    b44c:	10800704 	addi	r2,r2,28
    b450:	10c00005 	stb	r3,0(r2)

  sp->rx_end = next;
    b454:	e0fffe17 	ldw	r3,-8(fp)
    b458:	e0bffd17 	ldw	r2,-12(fp)
    b45c:	18800315 	stw	r2,12(r3)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
    b460:	e0bffe17 	ldw	r2,-8(fp)
    b464:	10800317 	ldw	r2,12(r2)
    b468:	10800044 	addi	r2,r2,1
    b46c:	10800fcc 	andi	r2,r2,63
    b470:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
    b474:	e0bffe17 	ldw	r2,-8(fp)
    b478:	10c00217 	ldw	r3,8(r2)
    b47c:	e0bffd17 	ldw	r2,-12(fp)
    b480:	18800e1e 	bne	r3,r2,b4bc <altera_avalon_uart_rxirq+0xd0>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    b484:	e0bffe17 	ldw	r2,-8(fp)
    b488:	10c00117 	ldw	r3,4(r2)
    b48c:	00bfdfc4 	movi	r2,-129
    b490:	1886703a 	and	r3,r3,r2
    b494:	e0bffe17 	ldw	r2,-8(fp)
    b498:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
    b49c:	e0bffe17 	ldw	r2,-8(fp)
    b4a0:	10800017 	ldw	r2,0(r2)
    b4a4:	11000304 	addi	r4,r2,12
    b4a8:	e0bffe17 	ldw	r2,-8(fp)
    b4ac:	10800117 	ldw	r2,4(r2)
    b4b0:	1007883a 	mov	r3,r2
    b4b4:	2005883a 	mov	r2,r4
    b4b8:	10c00035 	stwio	r3,0(r2)
  }   
}
    b4bc:	e037883a 	mov	sp,fp
    b4c0:	df000017 	ldw	fp,0(sp)
    b4c4:	dec00104 	addi	sp,sp,4
    b4c8:	f800283a 	ret

0000b4cc <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
    b4cc:	defffd04 	addi	sp,sp,-12
    b4d0:	df000215 	stw	fp,8(sp)
    b4d4:	df000204 	addi	fp,sp,8
    b4d8:	e13ffe15 	stw	r4,-8(fp)
    b4dc:	e17fff15 	stw	r5,-4(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
    b4e0:	e0bffe17 	ldw	r2,-8(fp)
    b4e4:	10c00417 	ldw	r3,16(r2)
    b4e8:	e0bffe17 	ldw	r2,-8(fp)
    b4ec:	10800517 	ldw	r2,20(r2)
    b4f0:	18803626 	beq	r3,r2,b5cc <altera_avalon_uart_txirq+0x100>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
    b4f4:	e0bffe17 	ldw	r2,-8(fp)
    b4f8:	10800617 	ldw	r2,24(r2)
    b4fc:	1080008c 	andi	r2,r2,2
    b500:	1005003a 	cmpeq	r2,r2,zero
    b504:	1000041e 	bne	r2,zero,b518 <altera_avalon_uart_txirq+0x4c>
    b508:	e0bfff17 	ldw	r2,-4(fp)
    b50c:	1082000c 	andi	r2,r2,2048
    b510:	1005003a 	cmpeq	r2,r2,zero
    b514:	10001e1e 	bne	r2,zero,b590 <altera_avalon_uart_txirq+0xc4>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
    b518:	e0bffe17 	ldw	r2,-8(fp)
    b51c:	10800417 	ldw	r2,16(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
    b520:	e0bffe17 	ldw	r2,-8(fp)
    b524:	10800017 	ldw	r2,0(r2)
    b528:	11000104 	addi	r4,r2,4
    b52c:	e0bffe17 	ldw	r2,-8(fp)
    b530:	10c00417 	ldw	r3,16(r2)
    b534:	e0bffe17 	ldw	r2,-8(fp)
    b538:	1885883a 	add	r2,r3,r2
    b53c:	10801704 	addi	r2,r2,92
    b540:	10800003 	ldbu	r2,0(r2)
    b544:	10c03fcc 	andi	r3,r2,255
    b548:	2005883a 	mov	r2,r4
    b54c:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
    b550:	e0bffe17 	ldw	r2,-8(fp)
    b554:	10800417 	ldw	r2,16(r2)
    b558:	10c00044 	addi	r3,r2,1
    b55c:	e0bffe17 	ldw	r2,-8(fp)
    b560:	10c00415 	stw	r3,16(r2)
    b564:	e0bffe17 	ldw	r2,-8(fp)
    b568:	10800417 	ldw	r2,16(r2)
    b56c:	10c00fcc 	andi	r3,r2,63
    b570:	e0bffe17 	ldw	r2,-8(fp)
    b574:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
    b578:	e0bffe17 	ldw	r2,-8(fp)
    b57c:	10800117 	ldw	r2,4(r2)
    b580:	10c01014 	ori	r3,r2,64
    b584:	e0bffe17 	ldw	r2,-8(fp)
    b588:	10c00115 	stw	r3,4(r2)
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
    b58c:	00000f06 	br	b5cc <altera_avalon_uart_txirq+0x100>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
    b590:	e0bffe17 	ldw	r2,-8(fp)
    b594:	10800017 	ldw	r2,0(r2)
    b598:	10800204 	addi	r2,r2,8
    b59c:	10800037 	ldwio	r2,0(r2)
    b5a0:	e0bfff15 	stw	r2,-4(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
    b5a4:	e0bfff17 	ldw	r2,-4(fp)
    b5a8:	1082000c 	andi	r2,r2,2048
    b5ac:	1004c03a 	cmpne	r2,r2,zero
    b5b0:	1000061e 	bne	r2,zero,b5cc <altera_avalon_uart_txirq+0x100>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
    b5b4:	e0bffe17 	ldw	r2,-8(fp)
    b5b8:	10c00117 	ldw	r3,4(r2)
    b5bc:	00bfefc4 	movi	r2,-65
    b5c0:	1886703a 	and	r3,r3,r2
    b5c4:	e0bffe17 	ldw	r2,-8(fp)
    b5c8:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
    b5cc:	e0bffe17 	ldw	r2,-8(fp)
    b5d0:	10c00417 	ldw	r3,16(r2)
    b5d4:	e0bffe17 	ldw	r2,-8(fp)
    b5d8:	10800517 	ldw	r2,20(r2)
    b5dc:	1880061e 	bne	r3,r2,b5f8 <altera_avalon_uart_txirq+0x12c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
    b5e0:	e0bffe17 	ldw	r2,-8(fp)
    b5e4:	10c00117 	ldw	r3,4(r2)
    b5e8:	00beefc4 	movi	r2,-1089
    b5ec:	1886703a 	and	r3,r3,r2
    b5f0:	e0bffe17 	ldw	r2,-8(fp)
    b5f4:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    b5f8:	e0bffe17 	ldw	r2,-8(fp)
    b5fc:	10800017 	ldw	r2,0(r2)
    b600:	11000304 	addi	r4,r2,12
    b604:	e0bffe17 	ldw	r2,-8(fp)
    b608:	10800117 	ldw	r2,4(r2)
    b60c:	1007883a 	mov	r3,r2
    b610:	2005883a 	mov	r2,r4
    b614:	10c00035 	stwio	r3,0(r2)
}
    b618:	e037883a 	mov	sp,fp
    b61c:	df000017 	ldw	fp,0(sp)
    b620:	dec00104 	addi	sp,sp,4
    b624:	f800283a 	ret

0000b628 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
    b628:	defffc04 	addi	sp,sp,-16
    b62c:	df000315 	stw	fp,12(sp)
    b630:	df000304 	addi	fp,sp,12
    b634:	e13ffd15 	stw	r4,-12(fp)
    b638:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
    b63c:	00000706 	br	b65c <altera_avalon_uart_close+0x34>
    if (flags & O_NONBLOCK) {
    b640:	e0bffe17 	ldw	r2,-8(fp)
    b644:	1090000c 	andi	r2,r2,16384
    b648:	1005003a 	cmpeq	r2,r2,zero
    b64c:	1000031e 	bne	r2,zero,b65c <altera_avalon_uart_close+0x34>
      return -EWOULDBLOCK; 
    b650:	00bffd44 	movi	r2,-11
    b654:	e0bfff15 	stw	r2,-4(fp)
    b658:	00000606 	br	b674 <altera_avalon_uart_close+0x4c>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
    b65c:	e0bffd17 	ldw	r2,-12(fp)
    b660:	10c00417 	ldw	r3,16(r2)
    b664:	e0bffd17 	ldw	r2,-12(fp)
    b668:	10800517 	ldw	r2,20(r2)
    b66c:	18bff41e 	bne	r3,r2,b640 <altera_avalon_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    b670:	e03fff15 	stw	zero,-4(fp)
    b674:	e0bfff17 	ldw	r2,-4(fp)
}
    b678:	e037883a 	mov	sp,fp
    b67c:	df000017 	ldw	fp,0(sp)
    b680:	dec00104 	addi	sp,sp,4
    b684:	f800283a 	ret

0000b688 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
    b688:	defff004 	addi	sp,sp,-64
    b68c:	dfc00f15 	stw	ra,60(sp)
    b690:	df000e15 	stw	fp,56(sp)
    b694:	df000e04 	addi	fp,sp,56
    b698:	e13ffb15 	stw	r4,-20(fp)
    b69c:	e17ffc15 	stw	r5,-16(fp)
    b6a0:	e1bffd15 	stw	r6,-12(fp)
    b6a4:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context context;
  int             block;
  alt_u32         next;
  alt_u8          read_would_block = 0;
    b6a8:	e03ff705 	stb	zero,-36(fp)
  int             count = 0;
    b6ac:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
    b6b0:	e0bffe17 	ldw	r2,-8(fp)
    b6b4:	1090000c 	andi	r2,r2,16384
    b6b8:	1005003a 	cmpeq	r2,r2,zero
    b6bc:	e0bff915 	stw	r2,-28(fp)
  /*
   * Calculate which slot in the circular buffer is the next one to read
   * data from.
   */

  next = (sp->rx_start + 1) & ALT_AVALON_UART_BUF_MSK;
    b6c0:	e0bffb17 	ldw	r2,-20(fp)
    b6c4:	10800217 	ldw	r2,8(r2)
    b6c8:	10800044 	addi	r2,r2,1
    b6cc:	10800fcc 	andi	r2,r2,63
    b6d0:	e0bff815 	stw	r2,-32(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
    b6d4:	00001906 	br	b73c <altera_avalon_uart_read+0xb4>
    {
      count++;
    b6d8:	e0bff617 	ldw	r2,-40(fp)
    b6dc:	10800044 	addi	r2,r2,1
    b6e0:	e0bff615 	stw	r2,-40(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
    b6e4:	e0bffb17 	ldw	r2,-20(fp)
    b6e8:	10c00217 	ldw	r3,8(r2)
    b6ec:	e0bffb17 	ldw	r2,-20(fp)
    b6f0:	1885883a 	add	r2,r3,r2
    b6f4:	10800704 	addi	r2,r2,28
    b6f8:	10800003 	ldbu	r2,0(r2)
    b6fc:	1007883a 	mov	r3,r2
    b700:	e0bffc17 	ldw	r2,-16(fp)
    b704:	10c00005 	stb	r3,0(r2)
    b708:	e0bffc17 	ldw	r2,-16(fp)
    b70c:	10800044 	addi	r2,r2,1
    b710:	e0bffc15 	stw	r2,-16(fp)
      
      sp->rx_start = (++sp->rx_start) & ALT_AVALON_UART_BUF_MSK;
    b714:	e0bffb17 	ldw	r2,-20(fp)
    b718:	10800217 	ldw	r2,8(r2)
    b71c:	10c00044 	addi	r3,r2,1
    b720:	e0bffb17 	ldw	r2,-20(fp)
    b724:	10c00215 	stw	r3,8(r2)
    b728:	e0bffb17 	ldw	r2,-20(fp)
    b72c:	10800217 	ldw	r2,8(r2)
    b730:	10c00fcc 	andi	r3,r2,63
    b734:	e0bffb17 	ldw	r2,-20(fp)
    b738:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
    b73c:	e0fff617 	ldw	r3,-40(fp)
    b740:	e0bffd17 	ldw	r2,-12(fp)
    b744:	1880050e 	bge	r3,r2,b75c <altera_avalon_uart_read+0xd4>
    b748:	e0bffb17 	ldw	r2,-20(fp)
    b74c:	10c00217 	ldw	r3,8(r2)
    b750:	e0bffb17 	ldw	r2,-20(fp)
    b754:	10800317 	ldw	r2,12(r2)
    b758:	18bfdf1e 	bne	r3,r2,b6d8 <altera_avalon_uart_read+0x50>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
    b75c:	e0bff617 	ldw	r2,-40(fp)
    b760:	1004c03a 	cmpne	r2,r2,zero
    b764:	1000271e 	bne	r2,zero,b804 <altera_avalon_uart_read+0x17c>
    b768:	e0bffb17 	ldw	r2,-20(fp)
    b76c:	10c00217 	ldw	r3,8(r2)
    b770:	e0bffb17 	ldw	r2,-20(fp)
    b774:	10800317 	ldw	r2,12(r2)
    b778:	1880221e 	bne	r3,r2,b804 <altera_avalon_uart_read+0x17c>
    {
      if (!block)
    b77c:	e0bff917 	ldw	r2,-28(fp)
    b780:	1004c03a 	cmpne	r2,r2,zero
    b784:	1000061e 	bne	r2,zero,b7a0 <altera_avalon_uart_read+0x118>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
    b788:	000b8b80 	call	b8b8 <alt_get_errno>
    b78c:	00c002c4 	movi	r3,11
    b790:	10c00015 	stw	r3,0(r2)
        read_would_block = 1;
    b794:	00800044 	movi	r2,1
    b798:	e0bff705 	stb	r2,-36(fp)
        break;
    b79c:	00001f06 	br	b81c <altera_avalon_uart_read+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b7a0:	0005303a 	rdctl	r2,status
    b7a4:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b7a8:	e0fff517 	ldw	r3,-44(fp)
    b7ac:	00bfff84 	movi	r2,-2
    b7b0:	1884703a 	and	r2,r3,r2
    b7b4:	1001703a 	wrctl	status,r2
  
  return context;
    b7b8:	e0bff517 	ldw	r2,-44(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
    b7bc:	e0bffa15 	stw	r2,-24(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    b7c0:	e0bffb17 	ldw	r2,-20(fp)
    b7c4:	10800117 	ldw	r2,4(r2)
    b7c8:	10c02014 	ori	r3,r2,128
    b7cc:	e0bffb17 	ldw	r2,-20(fp)
    b7d0:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    b7d4:	e0bffb17 	ldw	r2,-20(fp)
    b7d8:	10800017 	ldw	r2,0(r2)
    b7dc:	11000304 	addi	r4,r2,12
    b7e0:	e0bffb17 	ldw	r2,-20(fp)
    b7e4:	10800117 	ldw	r2,4(r2)
    b7e8:	1007883a 	mov	r3,r2
    b7ec:	2005883a 	mov	r2,r4
    b7f0:	10c00035 	stwio	r3,0(r2)
    b7f4:	e0bffa17 	ldw	r2,-24(fp)
    b7f8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b7fc:	e0bff417 	ldw	r2,-48(fp)
    b800:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
    b804:	e0bff617 	ldw	r2,-40(fp)
    b808:	1004c03a 	cmpne	r2,r2,zero
    b80c:	1000031e 	bne	r2,zero,b81c <altera_avalon_uart_read+0x194>
    b810:	e0bffd17 	ldw	r2,-12(fp)
    b814:	1004c03a 	cmpne	r2,r2,zero
    b818:	103fc81e 	bne	r2,zero,b73c <altera_avalon_uart_read+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b81c:	0005303a 	rdctl	r2,status
    b820:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b824:	e0fff317 	ldw	r3,-52(fp)
    b828:	00bfff84 	movi	r2,-2
    b82c:	1884703a 	and	r2,r3,r2
    b830:	1001703a 	wrctl	status,r2
  
  return context;
    b834:	e0bff317 	ldw	r2,-52(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
    b838:	e0bffa15 	stw	r2,-24(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    b83c:	e0bffb17 	ldw	r2,-20(fp)
    b840:	10800117 	ldw	r2,4(r2)
    b844:	10c02014 	ori	r3,r2,128
    b848:	e0bffb17 	ldw	r2,-20(fp)
    b84c:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    b850:	e0bffb17 	ldw	r2,-20(fp)
    b854:	10800017 	ldw	r2,0(r2)
    b858:	11000304 	addi	r4,r2,12
    b85c:	e0bffb17 	ldw	r2,-20(fp)
    b860:	10800117 	ldw	r2,4(r2)
    b864:	1007883a 	mov	r3,r2
    b868:	2005883a 	mov	r2,r4
    b86c:	10c00035 	stwio	r3,0(r2)
    b870:	e0bffa17 	ldw	r2,-24(fp)
    b874:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b878:	e0bff217 	ldw	r2,-56(fp)
    b87c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
    b880:	e0bff703 	ldbu	r2,-36(fp)
    b884:	1005003a 	cmpeq	r2,r2,zero
    b888:	1000031e 	bne	r2,zero,b898 <altera_avalon_uart_read+0x210>
    return ~EWOULDBLOCK;
    b88c:	00bffd04 	movi	r2,-12
    b890:	e0bfff15 	stw	r2,-4(fp)
    b894:	00000206 	br	b8a0 <altera_avalon_uart_read+0x218>
  }
  else {
    return count;
    b898:	e0bff617 	ldw	r2,-40(fp)
    b89c:	e0bfff15 	stw	r2,-4(fp)
    b8a0:	e0bfff17 	ldw	r2,-4(fp)
  }
}
    b8a4:	e037883a 	mov	sp,fp
    b8a8:	dfc00117 	ldw	ra,4(sp)
    b8ac:	df000017 	ldw	fp,0(sp)
    b8b0:	dec00204 	addi	sp,sp,8
    b8b4:	f800283a 	ret

0000b8b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b8b8:	defffd04 	addi	sp,sp,-12
    b8bc:	dfc00215 	stw	ra,8(sp)
    b8c0:	df000115 	stw	fp,4(sp)
    b8c4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    b8c8:	00800074 	movhi	r2,1
    b8cc:	10bbb404 	addi	r2,r2,-4400
    b8d0:	10800017 	ldw	r2,0(r2)
    b8d4:	1005003a 	cmpeq	r2,r2,zero
    b8d8:	1000061e 	bne	r2,zero,b8f4 <alt_get_errno+0x3c>
    b8dc:	00800074 	movhi	r2,1
    b8e0:	10bbb404 	addi	r2,r2,-4400
    b8e4:	10800017 	ldw	r2,0(r2)
    b8e8:	103ee83a 	callr	r2
    b8ec:	e0bfff15 	stw	r2,-4(fp)
    b8f0:	00000306 	br	b900 <alt_get_errno+0x48>
    b8f4:	00800074 	movhi	r2,1
    b8f8:	1082b804 	addi	r2,r2,2784
    b8fc:	e0bfff15 	stw	r2,-4(fp)
    b900:	e0bfff17 	ldw	r2,-4(fp)
}
    b904:	e037883a 	mov	sp,fp
    b908:	dfc00117 	ldw	ra,4(sp)
    b90c:	df000017 	ldw	fp,0(sp)
    b910:	dec00204 	addi	sp,sp,8
    b914:	f800283a 	ret

0000b918 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
    b918:	defff204 	addi	sp,sp,-56
    b91c:	dfc00d15 	stw	ra,52(sp)
    b920:	df000c15 	stw	fp,48(sp)
    b924:	df000c04 	addi	fp,sp,48
    b928:	e13ffc15 	stw	r4,-16(fp)
    b92c:	e17ffd15 	stw	r5,-12(fp)
    b930:	e1bffe15 	stw	r6,-8(fp)
    b934:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
    b938:	e0bffe17 	ldw	r2,-8(fp)
    b93c:	e0bff815 	stw	r2,-32(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
    b940:	e0bfff17 	ldw	r2,-4(fp)
    b944:	1090000c 	andi	r2,r2,16384
    b948:	e0bffa15 	stw	r2,-24(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
    b94c:	00004006 	br	ba50 <altera_avalon_uart_write+0x138>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
    b950:	e0bffc17 	ldw	r2,-16(fp)
    b954:	10800517 	ldw	r2,20(r2)
    b958:	10800044 	addi	r2,r2,1
    b95c:	10800fcc 	andi	r2,r2,63
    b960:	e0bff915 	stw	r2,-28(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
    b964:	e0bffc17 	ldw	r2,-16(fp)
    b968:	10c00417 	ldw	r3,16(r2)
    b96c:	e0bff917 	ldw	r2,-28(fp)
    b970:	1880251e 	bne	r3,r2,ba08 <altera_avalon_uart_write+0xf0>
    {
      if (no_block)
    b974:	e0bffa17 	ldw	r2,-24(fp)
    b978:	1005003a 	cmpeq	r2,r2,zero
    b97c:	1000051e 	bne	r2,zero,b994 <altera_avalon_uart_write+0x7c>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
    b980:	000bae00 	call	bae0 <alt_get_errno>
    b984:	1007883a 	mov	r3,r2
    b988:	008002c4 	movi	r2,11
    b98c:	18800015 	stw	r2,0(r3)
        break;
    b990:	00003206 	br	ba5c <altera_avalon_uart_write+0x144>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b994:	0005303a 	rdctl	r2,status
    b998:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b99c:	e0fff717 	ldw	r3,-36(fp)
    b9a0:	00bfff84 	movi	r2,-2
    b9a4:	1884703a 	and	r2,r3,r2
    b9a8:	1001703a 	wrctl	status,r2
  
  return context;
    b9ac:	e0bff717 	ldw	r2,-36(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
    b9b0:	e0bffb15 	stw	r2,-20(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
    b9b4:	e0bffc17 	ldw	r2,-16(fp)
    b9b8:	10800117 	ldw	r2,4(r2)
    b9bc:	10c11014 	ori	r3,r2,1088
    b9c0:	e0bffc17 	ldw	r2,-16(fp)
    b9c4:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    b9c8:	e0bffc17 	ldw	r2,-16(fp)
    b9cc:	10800017 	ldw	r2,0(r2)
    b9d0:	11000304 	addi	r4,r2,12
    b9d4:	e0bffc17 	ldw	r2,-16(fp)
    b9d8:	10800117 	ldw	r2,4(r2)
    b9dc:	1007883a 	mov	r3,r2
    b9e0:	2005883a 	mov	r2,r4
    b9e4:	10c00035 	stwio	r3,0(r2)
    b9e8:	e0bffb17 	ldw	r2,-20(fp)
    b9ec:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b9f0:	e0bff617 	ldw	r2,-40(fp)
    b9f4:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
    b9f8:	e0bffc17 	ldw	r2,-16(fp)
    b9fc:	10c00417 	ldw	r3,16(r2)
    ba00:	e0bff917 	ldw	r2,-28(fp)
    ba04:	18bffc26 	beq	r3,r2,b9f8 <altera_avalon_uart_write+0xe0>
      }
    }

    count--;
    ba08:	e0bff817 	ldw	r2,-32(fp)
    ba0c:	10bfffc4 	addi	r2,r2,-1
    ba10:	e0bff815 	stw	r2,-32(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
    ba14:	e0bffc17 	ldw	r2,-16(fp)
    ba18:	10c00517 	ldw	r3,20(r2)
    ba1c:	e0bffd17 	ldw	r2,-12(fp)
    ba20:	10800003 	ldbu	r2,0(r2)
    ba24:	1009883a 	mov	r4,r2
    ba28:	e0bffc17 	ldw	r2,-16(fp)
    ba2c:	1885883a 	add	r2,r3,r2
    ba30:	10801704 	addi	r2,r2,92
    ba34:	11000005 	stb	r4,0(r2)
    ba38:	e0bffd17 	ldw	r2,-12(fp)
    ba3c:	10800044 	addi	r2,r2,1
    ba40:	e0bffd15 	stw	r2,-12(fp)
    sp->tx_end = next;
    ba44:	e0fffc17 	ldw	r3,-16(fp)
    ba48:	e0bff917 	ldw	r2,-28(fp)
    ba4c:	18800515 	stw	r2,20(r3)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
    ba50:	e0bff817 	ldw	r2,-32(fp)
    ba54:	1004c03a 	cmpne	r2,r2,zero
    ba58:	103fbd1e 	bne	r2,zero,b950 <altera_avalon_uart_write+0x38>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ba5c:	0005303a 	rdctl	r2,status
    ba60:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ba64:	e0fff517 	ldw	r3,-44(fp)
    ba68:	00bfff84 	movi	r2,-2
    ba6c:	1884703a 	and	r2,r3,r2
    ba70:	1001703a 	wrctl	status,r2
  
  return context;
    ba74:	e0bff517 	ldw	r2,-44(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
    ba78:	e0bffb15 	stw	r2,-20(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
    ba7c:	e0bffc17 	ldw	r2,-16(fp)
    ba80:	10800117 	ldw	r2,4(r2)
    ba84:	10c11014 	ori	r3,r2,1088
    ba88:	e0bffc17 	ldw	r2,-16(fp)
    ba8c:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    ba90:	e0bffc17 	ldw	r2,-16(fp)
    ba94:	10800017 	ldw	r2,0(r2)
    ba98:	11000304 	addi	r4,r2,12
    ba9c:	e0bffc17 	ldw	r2,-16(fp)
    baa0:	10800117 	ldw	r2,4(r2)
    baa4:	1007883a 	mov	r3,r2
    baa8:	2005883a 	mov	r2,r4
    baac:	10c00035 	stwio	r3,0(r2)
    bab0:	e0bffb17 	ldw	r2,-20(fp)
    bab4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    bab8:	e0bff417 	ldw	r2,-48(fp)
    babc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
    bac0:	e0fffe17 	ldw	r3,-8(fp)
    bac4:	e0bff817 	ldw	r2,-32(fp)
    bac8:	1885c83a 	sub	r2,r3,r2
}
    bacc:	e037883a 	mov	sp,fp
    bad0:	dfc00117 	ldw	ra,4(sp)
    bad4:	df000017 	ldw	fp,0(sp)
    bad8:	dec00204 	addi	sp,sp,8
    badc:	f800283a 	ret

0000bae0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    bae0:	defffd04 	addi	sp,sp,-12
    bae4:	dfc00215 	stw	ra,8(sp)
    bae8:	df000115 	stw	fp,4(sp)
    baec:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    baf0:	00800074 	movhi	r2,1
    baf4:	10bbb404 	addi	r2,r2,-4400
    baf8:	10800017 	ldw	r2,0(r2)
    bafc:	1005003a 	cmpeq	r2,r2,zero
    bb00:	1000061e 	bne	r2,zero,bb1c <alt_get_errno+0x3c>
    bb04:	00800074 	movhi	r2,1
    bb08:	10bbb404 	addi	r2,r2,-4400
    bb0c:	10800017 	ldw	r2,0(r2)
    bb10:	103ee83a 	callr	r2
    bb14:	e0bfff15 	stw	r2,-4(fp)
    bb18:	00000306 	br	bb28 <alt_get_errno+0x48>
    bb1c:	00800074 	movhi	r2,1
    bb20:	1082b804 	addi	r2,r2,2784
    bb24:	e0bfff15 	stw	r2,-4(fp)
    bb28:	e0bfff17 	ldw	r2,-4(fp)
}
    bb2c:	e037883a 	mov	sp,fp
    bb30:	dfc00117 	ldw	ra,4(sp)
    bb34:	df000017 	ldw	fp,0(sp)
    bb38:	dec00204 	addi	sp,sp,8
    bb3c:	f800283a 	ret

0000bb40 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    bb40:	defff404 	addi	sp,sp,-48
    bb44:	df000b15 	stw	fp,44(sp)
    bb48:	df000b04 	addi	fp,sp,44
    bb4c:	e13ffb15 	stw	r4,-20(fp)
    bb50:	e17ffc15 	stw	r5,-16(fp)
    bb54:	e1bffd15 	stw	r6,-12(fp)
    bb58:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    bb5c:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    bb60:	00800074 	movhi	r2,1
    bb64:	1082bd04 	addi	r2,r2,2804
    bb68:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
    bb6c:	1005003a 	cmpeq	r2,r2,zero
    bb70:	1000411e 	bne	r2,zero,bc78 <alt_alarm_start+0x138>
  {
    if (alarm)
    bb74:	e0bffb17 	ldw	r2,-20(fp)
    bb78:	1005003a 	cmpeq	r2,r2,zero
    bb7c:	10003b1e 	bne	r2,zero,bc6c <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
    bb80:	e0fffb17 	ldw	r3,-20(fp)
    bb84:	e0bffd17 	ldw	r2,-12(fp)
    bb88:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
    bb8c:	e0fffb17 	ldw	r3,-20(fp)
    bb90:	e0bffe17 	ldw	r2,-8(fp)
    bb94:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    bb98:	0005303a 	rdctl	r2,status
    bb9c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    bba0:	e0fff817 	ldw	r3,-32(fp)
    bba4:	00bfff84 	movi	r2,-2
    bba8:	1884703a 	and	r2,r3,r2
    bbac:	1001703a 	wrctl	status,r2
  
  return context;
    bbb0:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
    bbb4:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    bbb8:	00800074 	movhi	r2,1
    bbbc:	1082be04 	addi	r2,r2,2808
    bbc0:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
    bbc4:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    bbc8:	e0fffc17 	ldw	r3,-16(fp)
    bbcc:	e0bff917 	ldw	r2,-28(fp)
    bbd0:	1885883a 	add	r2,r3,r2
    bbd4:	10c00044 	addi	r3,r2,1
    bbd8:	e0bffb17 	ldw	r2,-20(fp)
    bbdc:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    bbe0:	e0bffb17 	ldw	r2,-20(fp)
    bbe4:	10c00217 	ldw	r3,8(r2)
    bbe8:	e0bff917 	ldw	r2,-28(fp)
    bbec:	1880042e 	bgeu	r3,r2,bc00 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
    bbf0:	e0fffb17 	ldw	r3,-20(fp)
    bbf4:	00800044 	movi	r2,1
    bbf8:	18800405 	stb	r2,16(r3)
    bbfc:	00000206 	br	bc08 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
    bc00:	e0bffb17 	ldw	r2,-20(fp)
    bc04:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    bc08:	e0fffb17 	ldw	r3,-20(fp)
    bc0c:	00800074 	movhi	r2,1
    bc10:	10bbb704 	addi	r2,r2,-4388
    bc14:	e0bff615 	stw	r2,-40(fp)
    bc18:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    bc1c:	e0fff717 	ldw	r3,-36(fp)
    bc20:	e0bff617 	ldw	r2,-40(fp)
    bc24:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    bc28:	e0bff617 	ldw	r2,-40(fp)
    bc2c:	10c00017 	ldw	r3,0(r2)
    bc30:	e0bff717 	ldw	r2,-36(fp)
    bc34:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    bc38:	e0bff617 	ldw	r2,-40(fp)
    bc3c:	10c00017 	ldw	r3,0(r2)
    bc40:	e0bff717 	ldw	r2,-36(fp)
    bc44:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    bc48:	e0fff617 	ldw	r3,-40(fp)
    bc4c:	e0bff717 	ldw	r2,-36(fp)
    bc50:	18800015 	stw	r2,0(r3)
    bc54:	e0bffa17 	ldw	r2,-24(fp)
    bc58:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    bc5c:	e0bff517 	ldw	r2,-44(fp)
    bc60:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    bc64:	e03fff15 	stw	zero,-4(fp)
    bc68:	00000506 	br	bc80 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
    bc6c:	00bffa84 	movi	r2,-22
    bc70:	e0bfff15 	stw	r2,-4(fp)
    bc74:	00000206 	br	bc80 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
    bc78:	00bfde84 	movi	r2,-134
    bc7c:	e0bfff15 	stw	r2,-4(fp)
    bc80:	e0bfff17 	ldw	r2,-4(fp)
  }
}
    bc84:	e037883a 	mov	sp,fp
    bc88:	df000017 	ldw	fp,0(sp)
    bc8c:	dec00104 	addi	sp,sp,4
    bc90:	f800283a 	ret

0000bc94 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    bc94:	deffff04 	addi	sp,sp,-4
    bc98:	df000015 	stw	fp,0(sp)
    bc9c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    bca0:	e037883a 	mov	sp,fp
    bca4:	df000017 	ldw	fp,0(sp)
    bca8:	dec00104 	addi	sp,sp,4
    bcac:	f800283a 	ret

0000bcb0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    bcb0:	defff904 	addi	sp,sp,-28
    bcb4:	dfc00615 	stw	ra,24(sp)
    bcb8:	df000515 	stw	fp,20(sp)
    bcbc:	df000504 	addi	fp,sp,20
    bcc0:	e13ffd15 	stw	r4,-12(fp)
    bcc4:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    bcc8:	e0bffd17 	ldw	r2,-12(fp)
    bccc:	1005003a 	cmpeq	r2,r2,zero
    bcd0:	1000041e 	bne	r2,zero,bce4 <alt_dev_llist_insert+0x34>
    bcd4:	e0bffd17 	ldw	r2,-12(fp)
    bcd8:	10800217 	ldw	r2,8(r2)
    bcdc:	1004c03a 	cmpne	r2,r2,zero
    bce0:	1000071e 	bne	r2,zero,bd00 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
    bce4:	000bd640 	call	bd64 <alt_get_errno>
    bce8:	1007883a 	mov	r3,r2
    bcec:	00800584 	movi	r2,22
    bcf0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    bcf4:	00bffa84 	movi	r2,-22
    bcf8:	e0bfff15 	stw	r2,-4(fp)
    bcfc:	00001306 	br	bd4c <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    bd00:	e0fffd17 	ldw	r3,-12(fp)
    bd04:	e0bffe17 	ldw	r2,-8(fp)
    bd08:	e0bffb15 	stw	r2,-20(fp)
    bd0c:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    bd10:	e0fffc17 	ldw	r3,-16(fp)
    bd14:	e0bffb17 	ldw	r2,-20(fp)
    bd18:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    bd1c:	e0bffb17 	ldw	r2,-20(fp)
    bd20:	10c00017 	ldw	r3,0(r2)
    bd24:	e0bffc17 	ldw	r2,-16(fp)
    bd28:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    bd2c:	e0bffb17 	ldw	r2,-20(fp)
    bd30:	10c00017 	ldw	r3,0(r2)
    bd34:	e0bffc17 	ldw	r2,-16(fp)
    bd38:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    bd3c:	e0fffb17 	ldw	r3,-20(fp)
    bd40:	e0bffc17 	ldw	r2,-16(fp)
    bd44:	18800015 	stw	r2,0(r3)

  return 0;  
    bd48:	e03fff15 	stw	zero,-4(fp)
    bd4c:	e0bfff17 	ldw	r2,-4(fp)
}
    bd50:	e037883a 	mov	sp,fp
    bd54:	dfc00117 	ldw	ra,4(sp)
    bd58:	df000017 	ldw	fp,0(sp)
    bd5c:	dec00204 	addi	sp,sp,8
    bd60:	f800283a 	ret

0000bd64 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    bd64:	defffd04 	addi	sp,sp,-12
    bd68:	dfc00215 	stw	ra,8(sp)
    bd6c:	df000115 	stw	fp,4(sp)
    bd70:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    bd74:	00800074 	movhi	r2,1
    bd78:	10bbb404 	addi	r2,r2,-4400
    bd7c:	10800017 	ldw	r2,0(r2)
    bd80:	1005003a 	cmpeq	r2,r2,zero
    bd84:	1000061e 	bne	r2,zero,bda0 <alt_get_errno+0x3c>
    bd88:	00800074 	movhi	r2,1
    bd8c:	10bbb404 	addi	r2,r2,-4400
    bd90:	10800017 	ldw	r2,0(r2)
    bd94:	103ee83a 	callr	r2
    bd98:	e0bfff15 	stw	r2,-4(fp)
    bd9c:	00000306 	br	bdac <alt_get_errno+0x48>
    bda0:	00800074 	movhi	r2,1
    bda4:	1082b804 	addi	r2,r2,2784
    bda8:	e0bfff15 	stw	r2,-4(fp)
    bdac:	e0bfff17 	ldw	r2,-4(fp)
}
    bdb0:	e037883a 	mov	sp,fp
    bdb4:	dfc00117 	ldw	ra,4(sp)
    bdb8:	df000017 	ldw	fp,0(sp)
    bdbc:	dec00204 	addi	sp,sp,8
    bdc0:	f800283a 	ret

0000bdc4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    bdc4:	defffd04 	addi	sp,sp,-12
    bdc8:	dfc00215 	stw	ra,8(sp)
    bdcc:	df000115 	stw	fp,4(sp)
    bdd0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    bdd4:	00bfff04 	movi	r2,-4
    bdd8:	00c00074 	movhi	r3,1
    bddc:	18f3b004 	addi	r3,r3,-12608
    bde0:	1885883a 	add	r2,r3,r2
    bde4:	e0bfff15 	stw	r2,-4(fp)
    bde8:	00000606 	br	be04 <_do_ctors+0x40>
        (*ctor) (); 
    bdec:	e0bfff17 	ldw	r2,-4(fp)
    bdf0:	10800017 	ldw	r2,0(r2)
    bdf4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    bdf8:	e0bfff17 	ldw	r2,-4(fp)
    bdfc:	10bfff04 	addi	r2,r2,-4
    be00:	e0bfff15 	stw	r2,-4(fp)
    be04:	e0ffff17 	ldw	r3,-4(fp)
    be08:	00800074 	movhi	r2,1
    be0c:	10b3af04 	addi	r2,r2,-12612
    be10:	18bff62e 	bgeu	r3,r2,bdec <_do_ctors+0x28>
        (*ctor) (); 
}
    be14:	e037883a 	mov	sp,fp
    be18:	dfc00117 	ldw	ra,4(sp)
    be1c:	df000017 	ldw	fp,0(sp)
    be20:	dec00204 	addi	sp,sp,8
    be24:	f800283a 	ret

0000be28 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    be28:	defffd04 	addi	sp,sp,-12
    be2c:	dfc00215 	stw	ra,8(sp)
    be30:	df000115 	stw	fp,4(sp)
    be34:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    be38:	00bfff04 	movi	r2,-4
    be3c:	00c00074 	movhi	r3,1
    be40:	18f3b004 	addi	r3,r3,-12608
    be44:	1885883a 	add	r2,r3,r2
    be48:	e0bfff15 	stw	r2,-4(fp)
    be4c:	00000606 	br	be68 <_do_dtors+0x40>
        (*dtor) (); 
    be50:	e0bfff17 	ldw	r2,-4(fp)
    be54:	10800017 	ldw	r2,0(r2)
    be58:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    be5c:	e0bfff17 	ldw	r2,-4(fp)
    be60:	10bfff04 	addi	r2,r2,-4
    be64:	e0bfff15 	stw	r2,-4(fp)
    be68:	e0ffff17 	ldw	r3,-4(fp)
    be6c:	00800074 	movhi	r2,1
    be70:	10b3b004 	addi	r2,r2,-12608
    be74:	18bff62e 	bgeu	r3,r2,be50 <_do_dtors+0x28>
        (*dtor) (); 
}
    be78:	e037883a 	mov	sp,fp
    be7c:	dfc00117 	ldw	ra,4(sp)
    be80:	df000017 	ldw	fp,0(sp)
    be84:	dec00204 	addi	sp,sp,8
    be88:	f800283a 	ret

0000be8c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    be8c:	defffe04 	addi	sp,sp,-8
    be90:	dfc00115 	stw	ra,4(sp)
    be94:	df000015 	stw	fp,0(sp)
    be98:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    be9c:	0009883a 	mov	r4,zero
    bea0:	01480004 	movi	r5,8192
    bea4:	000c9b80 	call	c9b8 <alt_icache_flush>
#endif
}
    bea8:	e037883a 	mov	sp,fp
    beac:	dfc00117 	ldw	ra,4(sp)
    beb0:	df000017 	ldw	fp,0(sp)
    beb4:	dec00204 	addi	sp,sp,8
    beb8:	f800283a 	ret

0000bebc <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    bebc:	defff904 	addi	sp,sp,-28
    bec0:	dfc00615 	stw	ra,24(sp)
    bec4:	df000515 	stw	fp,20(sp)
    bec8:	df000504 	addi	fp,sp,20
    becc:	e13ffc15 	stw	r4,-16(fp)
    bed0:	e17ffd15 	stw	r5,-12(fp)
    bed4:	e1bffe15 	stw	r6,-8(fp)
    bed8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    bedc:	e0800217 	ldw	r2,8(fp)
    bee0:	d8800015 	stw	r2,0(sp)
    bee4:	e13ffc17 	ldw	r4,-16(fp)
    bee8:	e17ffd17 	ldw	r5,-12(fp)
    beec:	e1bffe17 	ldw	r6,-8(fp)
    bef0:	e1ffff17 	ldw	r7,-4(fp)
    bef4:	000c0900 	call	c090 <alt_iic_isr_register>
}  
    bef8:	e037883a 	mov	sp,fp
    befc:	dfc00117 	ldw	ra,4(sp)
    bf00:	df000017 	ldw	fp,0(sp)
    bf04:	dec00204 	addi	sp,sp,8
    bf08:	f800283a 	ret

0000bf0c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    bf0c:	defff904 	addi	sp,sp,-28
    bf10:	df000615 	stw	fp,24(sp)
    bf14:	df000604 	addi	fp,sp,24
    bf18:	e13ffe15 	stw	r4,-8(fp)
    bf1c:	e17fff15 	stw	r5,-4(fp)
    bf20:	e0bfff17 	ldw	r2,-4(fp)
    bf24:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    bf28:	0005303a 	rdctl	r2,status
    bf2c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    bf30:	e0fffb17 	ldw	r3,-20(fp)
    bf34:	00bfff84 	movi	r2,-2
    bf38:	1884703a 	and	r2,r3,r2
    bf3c:	1001703a 	wrctl	status,r2
  
  return context;
    bf40:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    bf44:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
    bf48:	e0fffc17 	ldw	r3,-16(fp)
    bf4c:	00800044 	movi	r2,1
    bf50:	10c4983a 	sll	r2,r2,r3
    bf54:	1007883a 	mov	r3,r2
    bf58:	00800074 	movhi	r2,1
    bf5c:	1082bc04 	addi	r2,r2,2800
    bf60:	10800017 	ldw	r2,0(r2)
    bf64:	1886b03a 	or	r3,r3,r2
    bf68:	00800074 	movhi	r2,1
    bf6c:	1082bc04 	addi	r2,r2,2800
    bf70:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    bf74:	00800074 	movhi	r2,1
    bf78:	1082bc04 	addi	r2,r2,2800
    bf7c:	10800017 	ldw	r2,0(r2)
    bf80:	100170fa 	wrctl	ienable,r2
    bf84:	e0bffd17 	ldw	r2,-12(fp)
    bf88:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    bf8c:	e0bffa17 	ldw	r2,-24(fp)
    bf90:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    bf94:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
    bf98:	e037883a 	mov	sp,fp
    bf9c:	df000017 	ldw	fp,0(sp)
    bfa0:	dec00104 	addi	sp,sp,4
    bfa4:	f800283a 	ret

0000bfa8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    bfa8:	defff904 	addi	sp,sp,-28
    bfac:	df000615 	stw	fp,24(sp)
    bfb0:	df000604 	addi	fp,sp,24
    bfb4:	e13ffe15 	stw	r4,-8(fp)
    bfb8:	e17fff15 	stw	r5,-4(fp)
    bfbc:	e0bfff17 	ldw	r2,-4(fp)
    bfc0:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    bfc4:	0005303a 	rdctl	r2,status
    bfc8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    bfcc:	e0fffb17 	ldw	r3,-20(fp)
    bfd0:	00bfff84 	movi	r2,-2
    bfd4:	1884703a 	and	r2,r3,r2
    bfd8:	1001703a 	wrctl	status,r2
  
  return context;
    bfdc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    bfe0:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
    bfe4:	e0fffc17 	ldw	r3,-16(fp)
    bfe8:	00800044 	movi	r2,1
    bfec:	10c4983a 	sll	r2,r2,r3
    bff0:	0084303a 	nor	r2,zero,r2
    bff4:	1007883a 	mov	r3,r2
    bff8:	00800074 	movhi	r2,1
    bffc:	1082bc04 	addi	r2,r2,2800
    c000:	10800017 	ldw	r2,0(r2)
    c004:	1886703a 	and	r3,r3,r2
    c008:	00800074 	movhi	r2,1
    c00c:	1082bc04 	addi	r2,r2,2800
    c010:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    c014:	00800074 	movhi	r2,1
    c018:	1082bc04 	addi	r2,r2,2800
    c01c:	10800017 	ldw	r2,0(r2)
    c020:	100170fa 	wrctl	ienable,r2
    c024:	e0bffd17 	ldw	r2,-12(fp)
    c028:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c02c:	e0bffa17 	ldw	r2,-24(fp)
    c030:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    c034:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
    c038:	e037883a 	mov	sp,fp
    c03c:	df000017 	ldw	fp,0(sp)
    c040:	dec00104 	addi	sp,sp,4
    c044:	f800283a 	ret

0000c048 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    c048:	defffc04 	addi	sp,sp,-16
    c04c:	df000315 	stw	fp,12(sp)
    c050:	df000304 	addi	fp,sp,12
    c054:	e13ffe15 	stw	r4,-8(fp)
    c058:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    c05c:	000530fa 	rdctl	r2,ienable
    c060:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    c064:	e0ffff17 	ldw	r3,-4(fp)
    c068:	00800044 	movi	r2,1
    c06c:	10c4983a 	sll	r2,r2,r3
    c070:	1007883a 	mov	r3,r2
    c074:	e0bffd17 	ldw	r2,-12(fp)
    c078:	1884703a 	and	r2,r3,r2
    c07c:	1004c03a 	cmpne	r2,r2,zero
}
    c080:	e037883a 	mov	sp,fp
    c084:	df000017 	ldw	fp,0(sp)
    c088:	dec00104 	addi	sp,sp,4
    c08c:	f800283a 	ret

0000c090 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    c090:	defff404 	addi	sp,sp,-48
    c094:	dfc00b15 	stw	ra,44(sp)
    c098:	df000a15 	stw	fp,40(sp)
    c09c:	df000a04 	addi	fp,sp,40
    c0a0:	e13ffb15 	stw	r4,-20(fp)
    c0a4:	e17ffc15 	stw	r5,-16(fp)
    c0a8:	e1bffd15 	stw	r6,-12(fp)
    c0ac:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
    c0b0:	00bffa84 	movi	r2,-22
    c0b4:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    c0b8:	e0bffc17 	ldw	r2,-16(fp)
    c0bc:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    c0c0:	e0bff917 	ldw	r2,-28(fp)
    c0c4:	10800808 	cmpgei	r2,r2,32
    c0c8:	1000291e 	bne	r2,zero,c170 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c0cc:	0005303a 	rdctl	r2,status
    c0d0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c0d4:	e0fff717 	ldw	r3,-36(fp)
    c0d8:	00bfff84 	movi	r2,-2
    c0dc:	1884703a 	and	r2,r3,r2
    c0e0:	1001703a 	wrctl	status,r2
  
  return context;
    c0e4:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    c0e8:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
    c0ec:	e0bff917 	ldw	r2,-28(fp)
    c0f0:	00c00074 	movhi	r3,1
    c0f4:	18c2c904 	addi	r3,r3,2852
    c0f8:	100490fa 	slli	r2,r2,3
    c0fc:	10c7883a 	add	r3,r2,r3
    c100:	e0bffd17 	ldw	r2,-12(fp)
    c104:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
    c108:	e0bff917 	ldw	r2,-28(fp)
    c10c:	00c00074 	movhi	r3,1
    c110:	18c2c904 	addi	r3,r3,2852
    c114:	100490fa 	slli	r2,r2,3
    c118:	10c5883a 	add	r2,r2,r3
    c11c:	10c00104 	addi	r3,r2,4
    c120:	e0bffe17 	ldw	r2,-8(fp)
    c124:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    c128:	e0bffd17 	ldw	r2,-12(fp)
    c12c:	1005003a 	cmpeq	r2,r2,zero
    c130:	1000051e 	bne	r2,zero,c148 <alt_iic_isr_register+0xb8>
    c134:	e17ff917 	ldw	r5,-28(fp)
    c138:	e13ffb17 	ldw	r4,-20(fp)
    c13c:	000bf0c0 	call	bf0c <alt_ic_irq_enable>
    c140:	e0bfff15 	stw	r2,-4(fp)
    c144:	00000406 	br	c158 <alt_iic_isr_register+0xc8>
    c148:	e17ff917 	ldw	r5,-28(fp)
    c14c:	e13ffb17 	ldw	r4,-20(fp)
    c150:	000bfa80 	call	bfa8 <alt_ic_irq_disable>
    c154:	e0bfff15 	stw	r2,-4(fp)
    c158:	e0bfff17 	ldw	r2,-4(fp)
    c15c:	e0bffa15 	stw	r2,-24(fp)
    c160:	e0bff817 	ldw	r2,-32(fp)
    c164:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c168:	e0bff617 	ldw	r2,-40(fp)
    c16c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    c170:	e0bffa17 	ldw	r2,-24(fp)
}
    c174:	e037883a 	mov	sp,fp
    c178:	dfc00117 	ldw	ra,4(sp)
    c17c:	df000017 	ldw	fp,0(sp)
    c180:	dec00204 	addi	sp,sp,8
    c184:	f800283a 	ret

0000c188 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    c188:	defff904 	addi	sp,sp,-28
    c18c:	dfc00615 	stw	ra,24(sp)
    c190:	df000515 	stw	fp,20(sp)
    c194:	df000504 	addi	fp,sp,20
    c198:	e13ffc15 	stw	r4,-16(fp)
    c19c:	e17ffd15 	stw	r5,-12(fp)
    c1a0:	e1bffe15 	stw	r6,-8(fp)
    c1a4:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    c1a8:	e13ffd17 	ldw	r4,-12(fp)
    c1ac:	e17ffe17 	ldw	r5,-8(fp)
    c1b0:	e1bfff17 	ldw	r6,-4(fp)
    c1b4:	000c3a00 	call	c3a0 <open>
    c1b8:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    c1bc:	e0bffb17 	ldw	r2,-20(fp)
    c1c0:	1004803a 	cmplt	r2,r2,zero
    c1c4:	10001c1e 	bne	r2,zero,c238 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
    c1c8:	e0bffb17 	ldw	r2,-20(fp)
    c1cc:	00c00074 	movhi	r3,1
    c1d0:	18f6cf04 	addi	r3,r3,-9412
    c1d4:	10800324 	muli	r2,r2,12
    c1d8:	10c5883a 	add	r2,r2,r3
    c1dc:	10c00017 	ldw	r3,0(r2)
    c1e0:	e0bffc17 	ldw	r2,-16(fp)
    c1e4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    c1e8:	e0bffb17 	ldw	r2,-20(fp)
    c1ec:	00c00074 	movhi	r3,1
    c1f0:	18f6cf04 	addi	r3,r3,-9412
    c1f4:	10800324 	muli	r2,r2,12
    c1f8:	10c5883a 	add	r2,r2,r3
    c1fc:	10800104 	addi	r2,r2,4
    c200:	10c00017 	ldw	r3,0(r2)
    c204:	e0bffc17 	ldw	r2,-16(fp)
    c208:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    c20c:	e0bffb17 	ldw	r2,-20(fp)
    c210:	00c00074 	movhi	r3,1
    c214:	18f6cf04 	addi	r3,r3,-9412
    c218:	10800324 	muli	r2,r2,12
    c21c:	10c5883a 	add	r2,r2,r3
    c220:	10800204 	addi	r2,r2,8
    c224:	10c00017 	ldw	r3,0(r2)
    c228:	e0bffc17 	ldw	r2,-16(fp)
    c22c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    c230:	e13ffb17 	ldw	r4,-20(fp)
    c234:	000a2400 	call	a240 <alt_release_fd>
  }
} 
    c238:	e037883a 	mov	sp,fp
    c23c:	dfc00117 	ldw	ra,4(sp)
    c240:	df000017 	ldw	fp,0(sp)
    c244:	dec00204 	addi	sp,sp,8
    c248:	f800283a 	ret

0000c24c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    c24c:	defffb04 	addi	sp,sp,-20
    c250:	dfc00415 	stw	ra,16(sp)
    c254:	df000315 	stw	fp,12(sp)
    c258:	df000304 	addi	fp,sp,12
    c25c:	e13ffd15 	stw	r4,-12(fp)
    c260:	e17ffe15 	stw	r5,-8(fp)
    c264:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    c268:	01000074 	movhi	r4,1
    c26c:	2136d204 	addi	r4,r4,-9400
    c270:	e17ffd17 	ldw	r5,-12(fp)
    c274:	01800044 	movi	r6,1
    c278:	01c07fc4 	movi	r7,511
    c27c:	000c1880 	call	c188 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    c280:	01000074 	movhi	r4,1
    c284:	2136cf04 	addi	r4,r4,-9412
    c288:	e17ffe17 	ldw	r5,-8(fp)
    c28c:	000d883a 	mov	r6,zero
    c290:	01c07fc4 	movi	r7,511
    c294:	000c1880 	call	c188 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    c298:	01000074 	movhi	r4,1
    c29c:	2136d504 	addi	r4,r4,-9388
    c2a0:	e17fff17 	ldw	r5,-4(fp)
    c2a4:	01800044 	movi	r6,1
    c2a8:	01c07fc4 	movi	r7,511
    c2ac:	000c1880 	call	c188 <alt_open_fd>
}  
    c2b0:	e037883a 	mov	sp,fp
    c2b4:	dfc00117 	ldw	ra,4(sp)
    c2b8:	df000017 	ldw	fp,0(sp)
    c2bc:	dec00204 	addi	sp,sp,8
    c2c0:	f800283a 	ret

0000c2c4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    c2c4:	defffc04 	addi	sp,sp,-16
    c2c8:	df000315 	stw	fp,12(sp)
    c2cc:	df000304 	addi	fp,sp,12
    c2d0:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    c2d4:	e0bffe17 	ldw	r2,-8(fp)
    c2d8:	10800217 	ldw	r2,8(r2)
    c2dc:	10d00034 	orhi	r3,r2,16384
    c2e0:	e0bffe17 	ldw	r2,-8(fp)
    c2e4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    c2e8:	e03ffd15 	stw	zero,-12(fp)
    c2ec:	00002006 	br	c370 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    c2f0:	e0bffd17 	ldw	r2,-12(fp)
    c2f4:	00c00074 	movhi	r3,1
    c2f8:	18f6cf04 	addi	r3,r3,-9412
    c2fc:	10800324 	muli	r2,r2,12
    c300:	10c5883a 	add	r2,r2,r3
    c304:	10c00017 	ldw	r3,0(r2)
    c308:	e0bffe17 	ldw	r2,-8(fp)
    c30c:	10800017 	ldw	r2,0(r2)
    c310:	1880141e 	bne	r3,r2,c364 <alt_file_locked+0xa0>
    c314:	e0bffd17 	ldw	r2,-12(fp)
    c318:	00c00074 	movhi	r3,1
    c31c:	18f6cf04 	addi	r3,r3,-9412
    c320:	10800324 	muli	r2,r2,12
    c324:	10c5883a 	add	r2,r2,r3
    c328:	10800204 	addi	r2,r2,8
    c32c:	10800017 	ldw	r2,0(r2)
    c330:	1004403a 	cmpge	r2,r2,zero
    c334:	10000b1e 	bne	r2,zero,c364 <alt_file_locked+0xa0>
    c338:	e0bffd17 	ldw	r2,-12(fp)
    c33c:	10800324 	muli	r2,r2,12
    c340:	1007883a 	mov	r3,r2
    c344:	00800074 	movhi	r2,1
    c348:	10b6cf04 	addi	r2,r2,-9412
    c34c:	1887883a 	add	r3,r3,r2
    c350:	e0bffe17 	ldw	r2,-8(fp)
    c354:	18800326 	beq	r3,r2,c364 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    c358:	00bffcc4 	movi	r2,-13
    c35c:	e0bfff15 	stw	r2,-4(fp)
    c360:	00000a06 	br	c38c <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    c364:	e0bffd17 	ldw	r2,-12(fp)
    c368:	10800044 	addi	r2,r2,1
    c36c:	e0bffd15 	stw	r2,-12(fp)
    c370:	00800074 	movhi	r2,1
    c374:	10bbb304 	addi	r2,r2,-4404
    c378:	10800017 	ldw	r2,0(r2)
    c37c:	1007883a 	mov	r3,r2
    c380:	e0bffd17 	ldw	r2,-12(fp)
    c384:	18bfda2e 	bgeu	r3,r2,c2f0 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    c388:	e03fff15 	stw	zero,-4(fp)
    c38c:	e0bfff17 	ldw	r2,-4(fp)
}
    c390:	e037883a 	mov	sp,fp
    c394:	df000017 	ldw	fp,0(sp)
    c398:	dec00104 	addi	sp,sp,4
    c39c:	f800283a 	ret

0000c3a0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    c3a0:	defff404 	addi	sp,sp,-48
    c3a4:	dfc00b15 	stw	ra,44(sp)
    c3a8:	df000a15 	stw	fp,40(sp)
    c3ac:	df000a04 	addi	fp,sp,40
    c3b0:	e13ffb15 	stw	r4,-20(fp)
    c3b4:	e17ffc15 	stw	r5,-16(fp)
    c3b8:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    c3bc:	00bfffc4 	movi	r2,-1
    c3c0:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
    c3c4:	00bffb44 	movi	r2,-19
    c3c8:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
    c3cc:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    c3d0:	e13ffb17 	ldw	r4,-20(fp)
    c3d4:	01400074 	movhi	r5,1
    c3d8:	297bb104 	addi	r5,r5,-4412
    c3dc:	000c74c0 	call	c74c <alt_find_dev>
    c3e0:	e0bffa15 	stw	r2,-24(fp)
    c3e4:	e0bffa17 	ldw	r2,-24(fp)
    c3e8:	1004c03a 	cmpne	r2,r2,zero
    c3ec:	1000051e 	bne	r2,zero,c404 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    c3f0:	e13ffb17 	ldw	r4,-20(fp)
    c3f4:	000c7e00 	call	c7e0 <alt_find_file>
    c3f8:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
    c3fc:	00800044 	movi	r2,1
    c400:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    c404:	e0bffa17 	ldw	r2,-24(fp)
    c408:	1005003a 	cmpeq	r2,r2,zero
    c40c:	1000301e 	bne	r2,zero,c4d0 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
    c410:	e13ffa17 	ldw	r4,-24(fp)
    c414:	000c9000 	call	c900 <alt_get_fd>
    c418:	e0bff815 	stw	r2,-32(fp)
    c41c:	e0bff817 	ldw	r2,-32(fp)
    c420:	1004403a 	cmpge	r2,r2,zero
    c424:	1000031e 	bne	r2,zero,c434 <open+0x94>
    {
      status = index;
    c428:	e0bff817 	ldw	r2,-32(fp)
    c42c:	e0bff715 	stw	r2,-36(fp)
    c430:	00002906 	br	c4d8 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
    c434:	e0bff817 	ldw	r2,-32(fp)
    c438:	10800324 	muli	r2,r2,12
    c43c:	1007883a 	mov	r3,r2
    c440:	00800074 	movhi	r2,1
    c444:	10b6cf04 	addi	r2,r2,-9412
    c448:	1885883a 	add	r2,r3,r2
    c44c:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    c450:	e0fffc17 	ldw	r3,-16(fp)
    c454:	00900034 	movhi	r2,16384
    c458:	10bfffc4 	addi	r2,r2,-1
    c45c:	1886703a 	and	r3,r3,r2
    c460:	e0bff917 	ldw	r2,-28(fp)
    c464:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    c468:	e0bff617 	ldw	r2,-40(fp)
    c46c:	1004c03a 	cmpne	r2,r2,zero
    c470:	1000061e 	bne	r2,zero,c48c <open+0xec>
    c474:	e13ff917 	ldw	r4,-28(fp)
    c478:	000c2c40 	call	c2c4 <alt_file_locked>
    c47c:	e0bff715 	stw	r2,-36(fp)
    c480:	e0bff717 	ldw	r2,-36(fp)
    c484:	1004803a 	cmplt	r2,r2,zero
    c488:	1000131e 	bne	r2,zero,c4d8 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    c48c:	e0bffa17 	ldw	r2,-24(fp)
    c490:	10800317 	ldw	r2,12(r2)
    c494:	1005003a 	cmpeq	r2,r2,zero
    c498:	1000091e 	bne	r2,zero,c4c0 <open+0x120>
    c49c:	e0bffa17 	ldw	r2,-24(fp)
    c4a0:	10800317 	ldw	r2,12(r2)
    c4a4:	e13ff917 	ldw	r4,-28(fp)
    c4a8:	e17ffb17 	ldw	r5,-20(fp)
    c4ac:	e1bffc17 	ldw	r6,-16(fp)
    c4b0:	e1fffd17 	ldw	r7,-12(fp)
    c4b4:	103ee83a 	callr	r2
    c4b8:	e0bfff15 	stw	r2,-4(fp)
    c4bc:	00000106 	br	c4c4 <open+0x124>
    c4c0:	e03fff15 	stw	zero,-4(fp)
    c4c4:	e0bfff17 	ldw	r2,-4(fp)
    c4c8:	e0bff715 	stw	r2,-36(fp)
    c4cc:	00000206 	br	c4d8 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
    c4d0:	00bffb44 	movi	r2,-19
    c4d4:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    c4d8:	e0bff717 	ldw	r2,-36(fp)
    c4dc:	1004403a 	cmpge	r2,r2,zero
    c4e0:	1000091e 	bne	r2,zero,c508 <open+0x168>
  {
    alt_release_fd (index);  
    c4e4:	e13ff817 	ldw	r4,-32(fp)
    c4e8:	000a2400 	call	a240 <alt_release_fd>
    ALT_ERRNO = -status;
    c4ec:	000c5280 	call	c528 <alt_get_errno>
    c4f0:	e0fff717 	ldw	r3,-36(fp)
    c4f4:	00c7c83a 	sub	r3,zero,r3
    c4f8:	10c00015 	stw	r3,0(r2)
    return -1;
    c4fc:	00bfffc4 	movi	r2,-1
    c500:	e0bffe15 	stw	r2,-8(fp)
    c504:	00000206 	br	c510 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
    c508:	e0bff817 	ldw	r2,-32(fp)
    c50c:	e0bffe15 	stw	r2,-8(fp)
    c510:	e0bffe17 	ldw	r2,-8(fp)
}
    c514:	e037883a 	mov	sp,fp
    c518:	dfc00117 	ldw	ra,4(sp)
    c51c:	df000017 	ldw	fp,0(sp)
    c520:	dec00204 	addi	sp,sp,8
    c524:	f800283a 	ret

0000c528 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    c528:	defffd04 	addi	sp,sp,-12
    c52c:	dfc00215 	stw	ra,8(sp)
    c530:	df000115 	stw	fp,4(sp)
    c534:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    c538:	00800074 	movhi	r2,1
    c53c:	10bbb404 	addi	r2,r2,-4400
    c540:	10800017 	ldw	r2,0(r2)
    c544:	1005003a 	cmpeq	r2,r2,zero
    c548:	1000061e 	bne	r2,zero,c564 <alt_get_errno+0x3c>
    c54c:	00800074 	movhi	r2,1
    c550:	10bbb404 	addi	r2,r2,-4400
    c554:	10800017 	ldw	r2,0(r2)
    c558:	103ee83a 	callr	r2
    c55c:	e0bfff15 	stw	r2,-4(fp)
    c560:	00000306 	br	c570 <alt_get_errno+0x48>
    c564:	00800074 	movhi	r2,1
    c568:	1082b804 	addi	r2,r2,2784
    c56c:	e0bfff15 	stw	r2,-4(fp)
    c570:	e0bfff17 	ldw	r2,-4(fp)
}
    c574:	e037883a 	mov	sp,fp
    c578:	dfc00117 	ldw	ra,4(sp)
    c57c:	df000017 	ldw	fp,0(sp)
    c580:	dec00204 	addi	sp,sp,8
    c584:	f800283a 	ret

0000c588 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    c588:	defffa04 	addi	sp,sp,-24
    c58c:	df000515 	stw	fp,20(sp)
    c590:	df000504 	addi	fp,sp,20
    c594:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c598:	0005303a 	rdctl	r2,status
    c59c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c5a0:	e0fffd17 	ldw	r3,-12(fp)
    c5a4:	00bfff84 	movi	r2,-2
    c5a8:	1884703a 	and	r2,r3,r2
    c5ac:	1001703a 	wrctl	status,r2
  
  return context;
    c5b0:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    c5b4:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
    c5b8:	e0bfff17 	ldw	r2,-4(fp)
    c5bc:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    c5c0:	e0bffc17 	ldw	r2,-16(fp)
    c5c4:	10c00017 	ldw	r3,0(r2)
    c5c8:	e0bffc17 	ldw	r2,-16(fp)
    c5cc:	10800117 	ldw	r2,4(r2)
    c5d0:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
    c5d4:	e0bffc17 	ldw	r2,-16(fp)
    c5d8:	10c00117 	ldw	r3,4(r2)
    c5dc:	e0bffc17 	ldw	r2,-16(fp)
    c5e0:	10800017 	ldw	r2,0(r2)
    c5e4:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    c5e8:	e0fffc17 	ldw	r3,-16(fp)
    c5ec:	e0bffc17 	ldw	r2,-16(fp)
    c5f0:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
    c5f4:	e0fffc17 	ldw	r3,-16(fp)
    c5f8:	e0bffc17 	ldw	r2,-16(fp)
    c5fc:	18800015 	stw	r2,0(r3)
    c600:	e0bffe17 	ldw	r2,-8(fp)
    c604:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c608:	e0bffb17 	ldw	r2,-20(fp)
    c60c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    c610:	e037883a 	mov	sp,fp
    c614:	df000017 	ldw	fp,0(sp)
    c618:	dec00104 	addi	sp,sp,4
    c61c:	f800283a 	ret

0000c620 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    c620:	defffb04 	addi	sp,sp,-20
    c624:	dfc00415 	stw	ra,16(sp)
    c628:	df000315 	stw	fp,12(sp)
    c62c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    c630:	d0a00e17 	ldw	r2,-32712(gp)
    c634:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    c638:	d0a71517 	ldw	r2,-25516(gp)
    c63c:	10800044 	addi	r2,r2,1
    c640:	d0a71515 	stw	r2,-25516(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    c644:	00003106 	br	c70c <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
    c648:	e0bffe17 	ldw	r2,-8(fp)
    c64c:	10800017 	ldw	r2,0(r2)
    c650:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    c654:	e0bffe17 	ldw	r2,-8(fp)
    c658:	10800403 	ldbu	r2,16(r2)
    c65c:	10803fcc 	andi	r2,r2,255
    c660:	1005003a 	cmpeq	r2,r2,zero
    c664:	1000051e 	bne	r2,zero,c67c <alt_tick+0x5c>
    c668:	d0a71517 	ldw	r2,-25516(gp)
    c66c:	1004c03a 	cmpne	r2,r2,zero
    c670:	1000021e 	bne	r2,zero,c67c <alt_tick+0x5c>
    {
      alarm->rollover = 0;
    c674:	e0bffe17 	ldw	r2,-8(fp)
    c678:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    c67c:	e0bffe17 	ldw	r2,-8(fp)
    c680:	10c00217 	ldw	r3,8(r2)
    c684:	d0a71517 	ldw	r2,-25516(gp)
    c688:	10c01e36 	bltu	r2,r3,c704 <alt_tick+0xe4>
    c68c:	e0bffe17 	ldw	r2,-8(fp)
    c690:	10800403 	ldbu	r2,16(r2)
    c694:	10803fcc 	andi	r2,r2,255
    c698:	1004c03a 	cmpne	r2,r2,zero
    c69c:	1000191e 	bne	r2,zero,c704 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
    c6a0:	e0bffe17 	ldw	r2,-8(fp)
    c6a4:	10c00317 	ldw	r3,12(r2)
    c6a8:	e0bffe17 	ldw	r2,-8(fp)
    c6ac:	11000517 	ldw	r4,20(r2)
    c6b0:	183ee83a 	callr	r3
    c6b4:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    c6b8:	e0bffd17 	ldw	r2,-12(fp)
    c6bc:	1004c03a 	cmpne	r2,r2,zero
    c6c0:	1000031e 	bne	r2,zero,c6d0 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
    c6c4:	e13ffe17 	ldw	r4,-8(fp)
    c6c8:	000c5880 	call	c588 <alt_alarm_stop>
    c6cc:	00000d06 	br	c704 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
    c6d0:	e0bffe17 	ldw	r2,-8(fp)
    c6d4:	10c00217 	ldw	r3,8(r2)
    c6d8:	e0bffd17 	ldw	r2,-12(fp)
    c6dc:	1887883a 	add	r3,r3,r2
    c6e0:	e0bffe17 	ldw	r2,-8(fp)
    c6e4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    c6e8:	e0bffe17 	ldw	r2,-8(fp)
    c6ec:	10c00217 	ldw	r3,8(r2)
    c6f0:	d0a71517 	ldw	r2,-25516(gp)
    c6f4:	1880032e 	bgeu	r3,r2,c704 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
    c6f8:	e0fffe17 	ldw	r3,-8(fp)
    c6fc:	00800044 	movi	r2,1
    c700:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
    c704:	e0bfff17 	ldw	r2,-4(fp)
    c708:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    c70c:	d0e00e04 	addi	r3,gp,-32712
    c710:	e0bffe17 	ldw	r2,-8(fp)
    c714:	10ffcc1e 	bne	r2,r3,c648 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    c718:	e037883a 	mov	sp,fp
    c71c:	dfc00117 	ldw	ra,4(sp)
    c720:	df000017 	ldw	fp,0(sp)
    c724:	dec00204 	addi	sp,sp,8
    c728:	f800283a 	ret

0000c72c <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    c72c:	deffff04 	addi	sp,sp,-4
    c730:	df000015 	stw	fp,0(sp)
    c734:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    c738:	000170fa 	wrctl	ienable,zero
}
    c73c:	e037883a 	mov	sp,fp
    c740:	df000017 	ldw	fp,0(sp)
    c744:	dec00104 	addi	sp,sp,4
    c748:	f800283a 	ret

0000c74c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    c74c:	defff904 	addi	sp,sp,-28
    c750:	dfc00615 	stw	ra,24(sp)
    c754:	df000515 	stw	fp,20(sp)
    c758:	df000504 	addi	fp,sp,20
    c75c:	e13ffd15 	stw	r4,-12(fp)
    c760:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
    c764:	e0bffe17 	ldw	r2,-8(fp)
    c768:	10800017 	ldw	r2,0(r2)
    c76c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    c770:	e13ffd17 	ldw	r4,-12(fp)
    c774:	00070c40 	call	70c4 <strlen>
    c778:	10800044 	addi	r2,r2,1
    c77c:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    c780:	00000d06 	br	c7b8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    c784:	e0bffc17 	ldw	r2,-16(fp)
    c788:	11000217 	ldw	r4,8(r2)
    c78c:	e1bffb17 	ldw	r6,-20(fp)
    c790:	e17ffd17 	ldw	r5,-12(fp)
    c794:	000ca940 	call	ca94 <memcmp>
    c798:	1004c03a 	cmpne	r2,r2,zero
    c79c:	1000031e 	bne	r2,zero,c7ac <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    c7a0:	e0bffc17 	ldw	r2,-16(fp)
    c7a4:	e0bfff15 	stw	r2,-4(fp)
    c7a8:	00000706 	br	c7c8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    c7ac:	e0bffc17 	ldw	r2,-16(fp)
    c7b0:	10800017 	ldw	r2,0(r2)
    c7b4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    c7b8:	e0fffe17 	ldw	r3,-8(fp)
    c7bc:	e0bffc17 	ldw	r2,-16(fp)
    c7c0:	10fff01e 	bne	r2,r3,c784 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    c7c4:	e03fff15 	stw	zero,-4(fp)
    c7c8:	e0bfff17 	ldw	r2,-4(fp)
}
    c7cc:	e037883a 	mov	sp,fp
    c7d0:	dfc00117 	ldw	ra,4(sp)
    c7d4:	df000017 	ldw	fp,0(sp)
    c7d8:	dec00204 	addi	sp,sp,8
    c7dc:	f800283a 	ret

0000c7e0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    c7e0:	defffa04 	addi	sp,sp,-24
    c7e4:	dfc00515 	stw	ra,20(sp)
    c7e8:	df000415 	stw	fp,16(sp)
    c7ec:	df000404 	addi	fp,sp,16
    c7f0:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    c7f4:	00800074 	movhi	r2,1
    c7f8:	10bbaf04 	addi	r2,r2,-4420
    c7fc:	10800017 	ldw	r2,0(r2)
    c800:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    c804:	00003306 	br	c8d4 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
    c808:	e0bffd17 	ldw	r2,-12(fp)
    c80c:	11000217 	ldw	r4,8(r2)
    c810:	00070c40 	call	70c4 <strlen>
    c814:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
    c818:	e0bffd17 	ldw	r2,-12(fp)
    c81c:	10c00217 	ldw	r3,8(r2)
    c820:	e0bffc17 	ldw	r2,-16(fp)
    c824:	1885883a 	add	r2,r3,r2
    c828:	10bfffc4 	addi	r2,r2,-1
    c82c:	10800003 	ldbu	r2,0(r2)
    c830:	10803fcc 	andi	r2,r2,255
    c834:	1080201c 	xori	r2,r2,128
    c838:	10bfe004 	addi	r2,r2,-128
    c83c:	10800bd8 	cmpnei	r2,r2,47
    c840:	1000031e 	bne	r2,zero,c850 <alt_find_file+0x70>
    {
      len -= 1;
    c844:	e0bffc17 	ldw	r2,-16(fp)
    c848:	10bfffc4 	addi	r2,r2,-1
    c84c:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    c850:	e0bffc17 	ldw	r2,-16(fp)
    c854:	1007883a 	mov	r3,r2
    c858:	e0bffe17 	ldw	r2,-8(fp)
    c85c:	1885883a 	add	r2,r3,r2
    c860:	10800003 	ldbu	r2,0(r2)
    c864:	10803fcc 	andi	r2,r2,255
    c868:	1080201c 	xori	r2,r2,128
    c86c:	10bfe004 	addi	r2,r2,-128
    c870:	10800be0 	cmpeqi	r2,r2,47
    c874:	10000a1e 	bne	r2,zero,c8a0 <alt_find_file+0xc0>
    c878:	e0bffc17 	ldw	r2,-16(fp)
    c87c:	1007883a 	mov	r3,r2
    c880:	e0bffe17 	ldw	r2,-8(fp)
    c884:	1885883a 	add	r2,r3,r2
    c888:	10800003 	ldbu	r2,0(r2)
    c88c:	10803fcc 	andi	r2,r2,255
    c890:	1080201c 	xori	r2,r2,128
    c894:	10bfe004 	addi	r2,r2,-128
    c898:	1004c03a 	cmpne	r2,r2,zero
    c89c:	10000a1e 	bne	r2,zero,c8c8 <alt_find_file+0xe8>
    c8a0:	e0bffd17 	ldw	r2,-12(fp)
    c8a4:	11000217 	ldw	r4,8(r2)
    c8a8:	e1bffc17 	ldw	r6,-16(fp)
    c8ac:	e17ffe17 	ldw	r5,-8(fp)
    c8b0:	000ca940 	call	ca94 <memcmp>
    c8b4:	1004c03a 	cmpne	r2,r2,zero
    c8b8:	1000031e 	bne	r2,zero,c8c8 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    c8bc:	e0bffd17 	ldw	r2,-12(fp)
    c8c0:	e0bfff15 	stw	r2,-4(fp)
    c8c4:	00000806 	br	c8e8 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
    c8c8:	e0bffd17 	ldw	r2,-12(fp)
    c8cc:	10800017 	ldw	r2,0(r2)
    c8d0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    c8d4:	00c00074 	movhi	r3,1
    c8d8:	18fbaf04 	addi	r3,r3,-4420
    c8dc:	e0bffd17 	ldw	r2,-12(fp)
    c8e0:	10ffc91e 	bne	r2,r3,c808 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    c8e4:	e03fff15 	stw	zero,-4(fp)
    c8e8:	e0bfff17 	ldw	r2,-4(fp)
}
    c8ec:	e037883a 	mov	sp,fp
    c8f0:	dfc00117 	ldw	ra,4(sp)
    c8f4:	df000017 	ldw	fp,0(sp)
    c8f8:	dec00204 	addi	sp,sp,8
    c8fc:	f800283a 	ret

0000c900 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    c900:	defffc04 	addi	sp,sp,-16
    c904:	df000315 	stw	fp,12(sp)
    c908:	df000304 	addi	fp,sp,12
    c90c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    c910:	00bffa04 	movi	r2,-24
    c914:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    c918:	e03ffe15 	stw	zero,-8(fp)
    c91c:	00001e06 	br	c998 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
    c920:	e0bffe17 	ldw	r2,-8(fp)
    c924:	00c00074 	movhi	r3,1
    c928:	18f6cf04 	addi	r3,r3,-9412
    c92c:	10800324 	muli	r2,r2,12
    c930:	10c5883a 	add	r2,r2,r3
    c934:	10800017 	ldw	r2,0(r2)
    c938:	1004c03a 	cmpne	r2,r2,zero
    c93c:	1000131e 	bne	r2,zero,c98c <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
    c940:	e0bffe17 	ldw	r2,-8(fp)
    c944:	00c00074 	movhi	r3,1
    c948:	18f6cf04 	addi	r3,r3,-9412
    c94c:	10800324 	muli	r2,r2,12
    c950:	10c7883a 	add	r3,r2,r3
    c954:	e0bfff17 	ldw	r2,-4(fp)
    c958:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
    c95c:	00800074 	movhi	r2,1
    c960:	10bbb304 	addi	r2,r2,-4404
    c964:	10c00017 	ldw	r3,0(r2)
    c968:	e0bffe17 	ldw	r2,-8(fp)
    c96c:	1880040e 	bge	r3,r2,c980 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
    c970:	00c00074 	movhi	r3,1
    c974:	18fbb304 	addi	r3,r3,-4404
    c978:	e0bffe17 	ldw	r2,-8(fp)
    c97c:	18800015 	stw	r2,0(r3)
      }
      rc = i;
    c980:	e0bffe17 	ldw	r2,-8(fp)
    c984:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    c988:	00000606 	br	c9a4 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    c98c:	e0bffe17 	ldw	r2,-8(fp)
    c990:	10800044 	addi	r2,r2,1
    c994:	e0bffe15 	stw	r2,-8(fp)
    c998:	e0bffe17 	ldw	r2,-8(fp)
    c99c:	10800810 	cmplti	r2,r2,32
    c9a0:	103fdf1e 	bne	r2,zero,c920 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    c9a4:	e0bffd17 	ldw	r2,-12(fp)
}
    c9a8:	e037883a 	mov	sp,fp
    c9ac:	df000017 	ldw	fp,0(sp)
    c9b0:	dec00104 	addi	sp,sp,4
    c9b4:	f800283a 	ret

0000c9b8 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    c9b8:	defffb04 	addi	sp,sp,-20
    c9bc:	df000415 	stw	fp,16(sp)
    c9c0:	df000404 	addi	fp,sp,16
    c9c4:	e13ffe15 	stw	r4,-8(fp)
    c9c8:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    c9cc:	e0bfff17 	ldw	r2,-4(fp)
    c9d0:	10880070 	cmpltui	r2,r2,8193
    c9d4:	1000021e 	bne	r2,zero,c9e0 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    c9d8:	00880004 	movi	r2,8192
    c9dc:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    c9e0:	e0fffe17 	ldw	r3,-8(fp)
    c9e4:	e0bfff17 	ldw	r2,-4(fp)
    c9e8:	1885883a 	add	r2,r3,r2
    c9ec:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    c9f0:	e0bffe17 	ldw	r2,-8(fp)
    c9f4:	e0bffd15 	stw	r2,-12(fp)
    c9f8:	00000506 	br	ca10 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    c9fc:	e0bffd17 	ldw	r2,-12(fp)
    ca00:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    ca04:	e0bffd17 	ldw	r2,-12(fp)
    ca08:	10800804 	addi	r2,r2,32
    ca0c:	e0bffd15 	stw	r2,-12(fp)
    ca10:	e0fffd17 	ldw	r3,-12(fp)
    ca14:	e0bffc17 	ldw	r2,-16(fp)
    ca18:	18bff836 	bltu	r3,r2,c9fc <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    ca1c:	e0bffe17 	ldw	r2,-8(fp)
    ca20:	108007cc 	andi	r2,r2,31
    ca24:	1005003a 	cmpeq	r2,r2,zero
    ca28:	1000021e 	bne	r2,zero,ca34 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    ca2c:	e0bffd17 	ldw	r2,-12(fp)
    ca30:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    ca34:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    ca38:	e037883a 	mov	sp,fp
    ca3c:	df000017 	ldw	fp,0(sp)
    ca40:	dec00104 	addi	sp,sp,4
    ca44:	f800283a 	ret

0000ca48 <atexit>:
    ca48:	200b883a 	mov	r5,r4
    ca4c:	000d883a 	mov	r6,zero
    ca50:	0009883a 	mov	r4,zero
    ca54:	000f883a 	mov	r7,zero
    ca58:	000cb081 	jmpi	cb08 <__register_exitproc>

0000ca5c <exit>:
    ca5c:	defffe04 	addi	sp,sp,-8
    ca60:	000b883a 	mov	r5,zero
    ca64:	dc000015 	stw	r16,0(sp)
    ca68:	dfc00115 	stw	ra,4(sp)
    ca6c:	2021883a 	mov	r16,r4
    ca70:	000cc400 	call	cc40 <__call_exitprocs>
    ca74:	00800074 	movhi	r2,1
    ca78:	10bbaa04 	addi	r2,r2,-4440
    ca7c:	11000017 	ldw	r4,0(r2)
    ca80:	20800f17 	ldw	r2,60(r4)
    ca84:	10000126 	beq	r2,zero,ca8c <exit+0x30>
    ca88:	103ee83a 	callr	r2
    ca8c:	8009883a 	mov	r4,r16
    ca90:	000ce300 	call	ce30 <_exit>

0000ca94 <memcmp>:
    ca94:	00c000c4 	movi	r3,3
    ca98:	1980032e 	bgeu	r3,r6,caa8 <memcmp+0x14>
    ca9c:	2144b03a 	or	r2,r4,r5
    caa0:	10c4703a 	and	r2,r2,r3
    caa4:	10000f26 	beq	r2,zero,cae4 <memcmp+0x50>
    caa8:	31ffffc4 	addi	r7,r6,-1
    caac:	3000061e 	bne	r6,zero,cac8 <memcmp+0x34>
    cab0:	00000a06 	br	cadc <memcmp+0x48>
    cab4:	39ffffc4 	addi	r7,r7,-1
    cab8:	00bfffc4 	movi	r2,-1
    cabc:	21000044 	addi	r4,r4,1
    cac0:	29400044 	addi	r5,r5,1
    cac4:	38800526 	beq	r7,r2,cadc <memcmp+0x48>
    cac8:	20c00003 	ldbu	r3,0(r4)
    cacc:	28800003 	ldbu	r2,0(r5)
    cad0:	18bff826 	beq	r3,r2,cab4 <memcmp+0x20>
    cad4:	1885c83a 	sub	r2,r3,r2
    cad8:	f800283a 	ret
    cadc:	0005883a 	mov	r2,zero
    cae0:	f800283a 	ret
    cae4:	180f883a 	mov	r7,r3
    cae8:	20c00017 	ldw	r3,0(r4)
    caec:	28800017 	ldw	r2,0(r5)
    caf0:	18bfed1e 	bne	r3,r2,caa8 <memcmp+0x14>
    caf4:	31bfff04 	addi	r6,r6,-4
    caf8:	21000104 	addi	r4,r4,4
    cafc:	29400104 	addi	r5,r5,4
    cb00:	39bff936 	bltu	r7,r6,cae8 <memcmp+0x54>
    cb04:	003fe806 	br	caa8 <memcmp+0x14>

0000cb08 <__register_exitproc>:
    cb08:	defffa04 	addi	sp,sp,-24
    cb0c:	00800074 	movhi	r2,1
    cb10:	10bbaa04 	addi	r2,r2,-4440
    cb14:	dc000015 	stw	r16,0(sp)
    cb18:	14000017 	ldw	r16,0(r2)
    cb1c:	dd000415 	stw	r20,16(sp)
    cb20:	2829883a 	mov	r20,r5
    cb24:	81405217 	ldw	r5,328(r16)
    cb28:	dcc00315 	stw	r19,12(sp)
    cb2c:	dc800215 	stw	r18,8(sp)
    cb30:	dc400115 	stw	r17,4(sp)
    cb34:	dfc00515 	stw	ra,20(sp)
    cb38:	2023883a 	mov	r17,r4
    cb3c:	3027883a 	mov	r19,r6
    cb40:	3825883a 	mov	r18,r7
    cb44:	28002526 	beq	r5,zero,cbdc <__register_exitproc+0xd4>
    cb48:	29000117 	ldw	r4,4(r5)
    cb4c:	008007c4 	movi	r2,31
    cb50:	11002716 	blt	r2,r4,cbf0 <__register_exitproc+0xe8>
    cb54:	8800101e 	bne	r17,zero,cb98 <__register_exitproc+0x90>
    cb58:	2105883a 	add	r2,r4,r4
    cb5c:	1085883a 	add	r2,r2,r2
    cb60:	20c00044 	addi	r3,r4,1
    cb64:	1145883a 	add	r2,r2,r5
    cb68:	0009883a 	mov	r4,zero
    cb6c:	15000215 	stw	r20,8(r2)
    cb70:	28c00115 	stw	r3,4(r5)
    cb74:	2005883a 	mov	r2,r4
    cb78:	dfc00517 	ldw	ra,20(sp)
    cb7c:	dd000417 	ldw	r20,16(sp)
    cb80:	dcc00317 	ldw	r19,12(sp)
    cb84:	dc800217 	ldw	r18,8(sp)
    cb88:	dc400117 	ldw	r17,4(sp)
    cb8c:	dc000017 	ldw	r16,0(sp)
    cb90:	dec00604 	addi	sp,sp,24
    cb94:	f800283a 	ret
    cb98:	29802204 	addi	r6,r5,136
    cb9c:	00800044 	movi	r2,1
    cba0:	110e983a 	sll	r7,r2,r4
    cba4:	30c04017 	ldw	r3,256(r6)
    cba8:	2105883a 	add	r2,r4,r4
    cbac:	1085883a 	add	r2,r2,r2
    cbb0:	1185883a 	add	r2,r2,r6
    cbb4:	19c6b03a 	or	r3,r3,r7
    cbb8:	14802015 	stw	r18,128(r2)
    cbbc:	14c00015 	stw	r19,0(r2)
    cbc0:	00800084 	movi	r2,2
    cbc4:	30c04015 	stw	r3,256(r6)
    cbc8:	88bfe31e 	bne	r17,r2,cb58 <__register_exitproc+0x50>
    cbcc:	30804117 	ldw	r2,260(r6)
    cbd0:	11c4b03a 	or	r2,r2,r7
    cbd4:	30804115 	stw	r2,260(r6)
    cbd8:	003fdf06 	br	cb58 <__register_exitproc+0x50>
    cbdc:	00800074 	movhi	r2,1
    cbe0:	10830904 	addi	r2,r2,3108
    cbe4:	100b883a 	mov	r5,r2
    cbe8:	80805215 	stw	r2,328(r16)
    cbec:	003fd606 	br	cb48 <__register_exitproc+0x40>
    cbf0:	00800034 	movhi	r2,0
    cbf4:	10800004 	addi	r2,r2,0
    cbf8:	1000021e 	bne	r2,zero,cc04 <__register_exitproc+0xfc>
    cbfc:	013fffc4 	movi	r4,-1
    cc00:	003fdc06 	br	cb74 <__register_exitproc+0x6c>
    cc04:	01006404 	movi	r4,400
    cc08:	103ee83a 	callr	r2
    cc0c:	1007883a 	mov	r3,r2
    cc10:	103ffa26 	beq	r2,zero,cbfc <__register_exitproc+0xf4>
    cc14:	80805217 	ldw	r2,328(r16)
    cc18:	180b883a 	mov	r5,r3
    cc1c:	18000115 	stw	zero,4(r3)
    cc20:	18800015 	stw	r2,0(r3)
    cc24:	80c05215 	stw	r3,328(r16)
    cc28:	18006215 	stw	zero,392(r3)
    cc2c:	18006315 	stw	zero,396(r3)
    cc30:	0009883a 	mov	r4,zero
    cc34:	883fc826 	beq	r17,zero,cb58 <__register_exitproc+0x50>
    cc38:	003fd706 	br	cb98 <__register_exitproc+0x90>

0000cc3c <register_fini>:
    cc3c:	f800283a 	ret

0000cc40 <__call_exitprocs>:
    cc40:	00800074 	movhi	r2,1
    cc44:	10bbaa04 	addi	r2,r2,-4440
    cc48:	10800017 	ldw	r2,0(r2)
    cc4c:	defff304 	addi	sp,sp,-52
    cc50:	df000b15 	stw	fp,44(sp)
    cc54:	d8800115 	stw	r2,4(sp)
    cc58:	00800034 	movhi	r2,0
    cc5c:	10800004 	addi	r2,r2,0
    cc60:	1005003a 	cmpeq	r2,r2,zero
    cc64:	d8800215 	stw	r2,8(sp)
    cc68:	d8800117 	ldw	r2,4(sp)
    cc6c:	dd400815 	stw	r21,32(sp)
    cc70:	dd000715 	stw	r20,28(sp)
    cc74:	10805204 	addi	r2,r2,328
    cc78:	dfc00c15 	stw	ra,48(sp)
    cc7c:	ddc00a15 	stw	r23,40(sp)
    cc80:	dd800915 	stw	r22,36(sp)
    cc84:	dcc00615 	stw	r19,24(sp)
    cc88:	dc800515 	stw	r18,20(sp)
    cc8c:	dc400415 	stw	r17,16(sp)
    cc90:	dc000315 	stw	r16,12(sp)
    cc94:	282b883a 	mov	r21,r5
    cc98:	2039883a 	mov	fp,r4
    cc9c:	d8800015 	stw	r2,0(sp)
    cca0:	2829003a 	cmpeq	r20,r5,zero
    cca4:	d8800117 	ldw	r2,4(sp)
    cca8:	14405217 	ldw	r17,328(r2)
    ccac:	88001026 	beq	r17,zero,ccf0 <__call_exitprocs+0xb0>
    ccb0:	ddc00017 	ldw	r23,0(sp)
    ccb4:	88800117 	ldw	r2,4(r17)
    ccb8:	8c802204 	addi	r18,r17,136
    ccbc:	143fffc4 	addi	r16,r2,-1
    ccc0:	80000916 	blt	r16,zero,cce8 <__call_exitprocs+0xa8>
    ccc4:	05bfffc4 	movi	r22,-1
    ccc8:	a000151e 	bne	r20,zero,cd20 <__call_exitprocs+0xe0>
    cccc:	8409883a 	add	r4,r16,r16
    ccd0:	2105883a 	add	r2,r4,r4
    ccd4:	1485883a 	add	r2,r2,r18
    ccd8:	10c02017 	ldw	r3,128(r2)
    ccdc:	a8c01126 	beq	r21,r3,cd24 <__call_exitprocs+0xe4>
    cce0:	843fffc4 	addi	r16,r16,-1
    cce4:	85bff81e 	bne	r16,r22,ccc8 <__call_exitprocs+0x88>
    cce8:	d8800217 	ldw	r2,8(sp)
    ccec:	10003126 	beq	r2,zero,cdb4 <__call_exitprocs+0x174>
    ccf0:	dfc00c17 	ldw	ra,48(sp)
    ccf4:	df000b17 	ldw	fp,44(sp)
    ccf8:	ddc00a17 	ldw	r23,40(sp)
    ccfc:	dd800917 	ldw	r22,36(sp)
    cd00:	dd400817 	ldw	r21,32(sp)
    cd04:	dd000717 	ldw	r20,28(sp)
    cd08:	dcc00617 	ldw	r19,24(sp)
    cd0c:	dc800517 	ldw	r18,20(sp)
    cd10:	dc400417 	ldw	r17,16(sp)
    cd14:	dc000317 	ldw	r16,12(sp)
    cd18:	dec00d04 	addi	sp,sp,52
    cd1c:	f800283a 	ret
    cd20:	8409883a 	add	r4,r16,r16
    cd24:	88c00117 	ldw	r3,4(r17)
    cd28:	2105883a 	add	r2,r4,r4
    cd2c:	1445883a 	add	r2,r2,r17
    cd30:	18ffffc4 	addi	r3,r3,-1
    cd34:	11800217 	ldw	r6,8(r2)
    cd38:	1c001526 	beq	r3,r16,cd90 <__call_exitprocs+0x150>
    cd3c:	10000215 	stw	zero,8(r2)
    cd40:	303fe726 	beq	r6,zero,cce0 <__call_exitprocs+0xa0>
    cd44:	00c00044 	movi	r3,1
    cd48:	1c06983a 	sll	r3,r3,r16
    cd4c:	90804017 	ldw	r2,256(r18)
    cd50:	8cc00117 	ldw	r19,4(r17)
    cd54:	1884703a 	and	r2,r3,r2
    cd58:	10001426 	beq	r2,zero,cdac <__call_exitprocs+0x16c>
    cd5c:	90804117 	ldw	r2,260(r18)
    cd60:	1884703a 	and	r2,r3,r2
    cd64:	10000c1e 	bne	r2,zero,cd98 <__call_exitprocs+0x158>
    cd68:	2105883a 	add	r2,r4,r4
    cd6c:	1485883a 	add	r2,r2,r18
    cd70:	11400017 	ldw	r5,0(r2)
    cd74:	e009883a 	mov	r4,fp
    cd78:	303ee83a 	callr	r6
    cd7c:	88800117 	ldw	r2,4(r17)
    cd80:	98bfc81e 	bne	r19,r2,cca4 <__call_exitprocs+0x64>
    cd84:	b8800017 	ldw	r2,0(r23)
    cd88:	147fd526 	beq	r2,r17,cce0 <__call_exitprocs+0xa0>
    cd8c:	003fc506 	br	cca4 <__call_exitprocs+0x64>
    cd90:	8c000115 	stw	r16,4(r17)
    cd94:	003fea06 	br	cd40 <__call_exitprocs+0x100>
    cd98:	2105883a 	add	r2,r4,r4
    cd9c:	1485883a 	add	r2,r2,r18
    cda0:	11000017 	ldw	r4,0(r2)
    cda4:	303ee83a 	callr	r6
    cda8:	003ff406 	br	cd7c <__call_exitprocs+0x13c>
    cdac:	303ee83a 	callr	r6
    cdb0:	003ff206 	br	cd7c <__call_exitprocs+0x13c>
    cdb4:	88800117 	ldw	r2,4(r17)
    cdb8:	1000081e 	bne	r2,zero,cddc <__call_exitprocs+0x19c>
    cdbc:	89000017 	ldw	r4,0(r17)
    cdc0:	20000726 	beq	r4,zero,cde0 <__call_exitprocs+0x1a0>
    cdc4:	b9000015 	stw	r4,0(r23)
    cdc8:	8809883a 	mov	r4,r17
    cdcc:	00000000 	call	0 <__alt_mem_sdram>
    cdd0:	bc400017 	ldw	r17,0(r23)
    cdd4:	883fb71e 	bne	r17,zero,ccb4 <__call_exitprocs+0x74>
    cdd8:	003fc506 	br	ccf0 <__call_exitprocs+0xb0>
    cddc:	89000017 	ldw	r4,0(r17)
    cde0:	882f883a 	mov	r23,r17
    cde4:	2023883a 	mov	r17,r4
    cde8:	883fb21e 	bne	r17,zero,ccb4 <__call_exitprocs+0x74>
    cdec:	003fc006 	br	ccf0 <__call_exitprocs+0xb0>

0000cdf0 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
    cdf0:	defffd04 	addi	sp,sp,-12
    cdf4:	df000215 	stw	fp,8(sp)
    cdf8:	df000204 	addi	fp,sp,8
    cdfc:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
    ce00:	e0bfff17 	ldw	r2,-4(fp)
    ce04:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    ce08:	e0bffe17 	ldw	r2,-8(fp)
    ce0c:	1005003a 	cmpeq	r2,r2,zero
    ce10:	1000021e 	bne	r2,zero,ce1c <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
    ce14:	002af070 	cmpltui	zero,zero,43969
    ce18:	00000106 	br	ce20 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
    ce1c:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
    ce20:	e037883a 	mov	sp,fp
    ce24:	df000017 	ldw	fp,0(sp)
    ce28:	dec00104 	addi	sp,sp,4
    ce2c:	f800283a 	ret

0000ce30 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    ce30:	defffd04 	addi	sp,sp,-12
    ce34:	dfc00215 	stw	ra,8(sp)
    ce38:	df000115 	stw	fp,4(sp)
    ce3c:	df000104 	addi	fp,sp,4
    ce40:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
    ce44:	e13fff17 	ldw	r4,-4(fp)
    ce48:	000cdf00 	call	cdf0 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    ce4c:	003fff06 	br	ce4c <_exit+0x1c>
    ce50:	00000010 	cmplti	zero,zero,0
    ce54:	00000000 	call	0 <__alt_mem_sdram>
    ce58:	00527a01 	jmpi	527a0 <_gp+0x3b8fc>
    ce5c:	011f7c01 	jmpi	11f7c0 <_gp+0x10891c>
    ce60:	001b0c0b 	ldhu	zero,27696(zero)
    ce64:	00000028 	cmpgeui	zero,zero,0
    ce68:	00000018 	cmpnei	zero,zero,0
    ce6c:	000075cc 	andi	zero,zero,471
    ce70:	000005dc 	xori	zero,zero,23
    ce74:	400e4400 	call	400e440 <__alt_data_end+0x380e440>
    ce78:	92099170 	cmpltui	r8,r18,9797
    ce7c:	95079308 	cmpgei	r20,r18,7756
    ce80:	97049605 	stb	fp,4696(r18)
    ce84:	90019f03 	ldbu	zero,1660(r18)
    ce88:	9c06940a 	0x9c06940a
    ce8c:	00000002 	0x2
    ce90:	00000028 	cmpgeui	zero,zero,0
    ce94:	00000044 	movi	zero,1
    ce98:	00007ba8 	cmpgeui	zero,zero,494
    ce9c:	000005b0 	cmpltui	zero,zero,22
    cea0:	3c0e4400 	call	3c0e440 <__alt_data_end+0x340e440>
    cea4:	92099168 	cmpgeui	r8,r18,9797
    cea8:	95079308 	cmpgei	r20,r18,7756
    ceac:	9c039705 	stb	r16,3676(r19)
    ceb0:	90019f02 	0x90019f02
    ceb4:	9606940a 	0x9606940a
    ceb8:	00000004 	movi	zero,0
    cebc:	0000cc3c 	xorhi	zero,zero,816
