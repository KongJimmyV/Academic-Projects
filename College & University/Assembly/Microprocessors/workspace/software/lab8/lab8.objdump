
lab8.elf:     file format elf32-littlenios2
lab8.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0000d2d4 memsz 0x0000d2d4 flags r-x
    LOAD off    0x0000e2f4 vaddr 0x0000d2f4 paddr 0x0000eed8 align 2**12
         filesz 0x00001be4 memsz 0x00001be4 flags rw-
    LOAD off    0x00010abc vaddr 0x00010abc paddr 0x00010abc align 2**12
         filesz 0x00000000 memsz 0x000002ec flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000cd9c  000001b4  000001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000003a4  0000cf50  0000cf50  0000df50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001be4  0000d2f4  0000eed8  0000e2f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002ec  00010abc  00010abc  00010abc  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  0000fed8  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000cf8  00000000  00000000  0000ff00  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001470  00000000  00000000  00010bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00023dd1  00000000  00000000  00012068  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00007e14  00000000  00000000  00035e39  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000140fe  00000000  00000000  0003dc4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000019f0  00000000  00000000  00051d4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000021a1  00000000  00000000  0005373c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000bfd0  00000000  00000000  000558dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  000618b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000990  00000000  00000000  000618d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000653cb  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  000653ce  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000653d1  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000653d2  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000653d3  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000653d7  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000653db  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  000653df  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  000653e8  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  000653f1  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000008  00000000  00000000  000653fa  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000001c  00000000  00000000  00065402  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     000b989e  00000000  00000000  0006541e  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001b4 l    d  .text	00000000 .text
0000cf50 l    d  .rodata	00000000 .rodata
0000d2f4 l    d  .rwdata	00000000 .rwdata
00010abc l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000001ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 lab8.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000004e8 l     F .text	00000058 __sprint_r
0000d002 l     O .rodata	00000010 blanks.3452
0000cff2 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0000254c l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00003f48 l     F .text	00000058 std
00004054 l     F .text	00000008 __fp_lock
0000405c l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0000d2f4 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
0000eea4 l     O .rwdata	00000004 charset
0000d038 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0000d180 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
000081e8 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00009314 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
00009b88 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00009be8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00009ce8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00009e08 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00009ee8 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000a044 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000a270 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0000eec8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0000a50c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000dcb0 l     O .rwdata	00001060 jtag_uart
0000ed10 l     O .rwdata	000000c4 Serial_port0
0000edd4 l     O .rwdata	000000c4 Serial_port1
0000a63c l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000a87c l     F .text	00000228 altera_avalon_jtag_uart_irq
0000aaa4 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000b120 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
0000b3e0 l     F .text	0000009c altera_avalon_uart_irq
0000b47c l     F .text	000000e0 altera_avalon_uart_rxirq
0000b55c l     F .text	0000015c altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
0000b948 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
0000bb70 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000bdf4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000c218 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0000c354 l     F .text	000000dc alt_file_locked
0000c5b8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0000cccc l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0000ce80 l     F .text	00000040 alt_sim_halt
00005d04 g     F .text	00000094 _mprec_log10
00005df0 g     F .text	00000088 __any_on
000074fc g     F .text	00000070 _isatty_r
0000d158 g     O .rodata	00000028 __mprec_tinytens
0000a0a4 g     F .text	0000006c alt_main
000003c0 g     F .text	000000a0 _puts_r
00010b18 g     O .bss	00000100 alt_irq
0000756c g     F .text	00000078 _lseek_r
0000eed8 g       *ABS*	00000000 __flash_rwdata_start
00008d08 g     F .text	00000088 __eqdf2
00010da8 g       *ABS*	00000000 __alt_heap_start
00000348 g     F .text	00000044 printf
00006fc8 g     F .text	00000068 __sseek
00003fb0 g     F .text	000000a4 __sinit
00004c88 g     F .text	00000084 _setlocale_r
000040b0 g     F .text	00000068 __sfmoreglue
0000a130 g     F .text	00000020 __malloc_unlock
00005780 g     F .text	000000e0 memmove
000040a0 g     F .text	00000010 _cleanup
00005e78 g     F .text	000000bc _Balloc
00008e18 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00007488 g     F .text	00000074 _fstat_r
00010ad4 g     O .bss	00000004 errno
00010adc g     O .bss	00000004 alt_argv
00016e98 g       *ABS*	00000000 _gp
0000db30 g     O .rwdata	00000180 alt_fd_list
0000c7dc g     F .text	00000094 alt_find_dev
000056e0 g     F .text	000000a0 memcpy
00004094 g     F .text	0000000c _cleanup_r
00008fb0 g     F .text	000000f8 __floatsidf
0000c2dc g     F .text	00000078 alt_io_redirect
00008f28 g     F .text	00000088 __ltdf2
0000cf50 g       *ABS*	00000000 __DTOR_END__
00000460 g     F .text	00000014 puts
00005c54 g     F .text	000000b0 __ratio
0000acbc g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
0000038c g     F .text	00000034 _printf_r
00009450 g     F .text	00000008 __udivsi3
00009d48 g     F .text	000000c0 isatty
0000d068 g     O .rodata	000000c8 __mprec_tens
00004c64 g     F .text	00000008 __locale_charset
0000ca48 g     F .text	00000090 alt_icache_flush
00010ac8 g     O .bss	00000004 __malloc_top_pad
0000eea0 g     O .rwdata	00000004 __mb_cur_max
00004c6c g     F .text	0000000c _localeconv_r
00006570 g     F .text	0000003c __i2b
00004648 g     F .text	0000049c __sfvwrite_r
00006f50 g     F .text	00000070 _sbrk_r
000075e4 g     F .text	00000078 _read_r
0000d6f4 g     O .rwdata	0000000c __lc_ctype
0000eec0 g     O .rwdata	00000004 alt_max_fd
0000988c g     F .text	00000138 __unpack_d
00007364 g     F .text	00000110 _fclose_r
00003f14 g     F .text	00000034 fflush
00010acc g     O .bss	00000004 __malloc_max_sbrked_mem
00008678 g     F .text	00000074 __adddf3
00005b34 g     F .text	00000120 __b2d
00007c38 g     F .text	000005b0 __umoddi3
00009f54 g     F .text	000000f0 lseek
0000ee9c g     O .rwdata	00000004 _global_impure_ptr
000068ec g     F .text	000005f4 _realloc_r
00010da8 g       *ABS*	00000000 __bss_end
0000c120 g     F .text	000000f8 alt_iic_isr_register
0000c6b0 g     F .text	0000010c alt_tick
0000765c g     F .text	000005dc __udivdi3
0000d130 g     O .rodata	00000028 __mprec_bigtens
000067cc g     F .text	00000120 __s2b
00009180 g     F .text	00000194 __floatunsidf
000002bc g     F .text	00000060 factorial
00005a54 g     F .text	00000060 __mcmp
0000b318 g     F .text	000000c8 altera_avalon_uart_init
0000407c g     F .text	00000018 __fp_lock_all
0000c0d8 g     F .text	00000048 alt_ic_irq_enabled
00000250 g     F .text	0000006c calc
0000c618 g     F .text	00000098 alt_alarm_stop
00010ae4 g     O .bss	00000004 alt_irq_active
000000ec g     F .exceptions	000000c8 alt_irq_handler
0000db08 g     O .rwdata	00000028 alt_dev_null
0000bd24 g     F .text	0000001c alt_dcache_flush_all
00005920 g     F .text	00000070 __hi0bits
000090a8 g     F .text	000000d8 __fixdfsi
0000eed8 g       *ABS*	00000000 __ram_rwdata_end
0000eeb8 g     O .rwdata	00000008 alt_dev_list
0000a3ec g     F .text	00000120 write
0000d2f4 g       *ABS*	00000000 __ram_rodata_end
00009c14 g     F .text	000000d4 fstat
000066ac g     F .text	00000120 __pow5mult
00010abc g     O .bss	00000004 __nlocale_changed
00009458 g     F .text	00000008 __umodsi3
00010da8 g       *ABS*	00000000 end
0000b9a8 g     F .text	000001c8 altera_avalon_uart_write
0000a7bc g     F .text	000000c0 altera_avalon_jtag_uart_init
0000cf4c g       *ABS*	00000000 __CTOR_LIST__
00800000 g       *ABS*	00000000 __alt_stack_pointer
0000b190 g     F .text	00000090 alt_avalon_timer_sc_init
0000b278 g     F .text	00000058 altera_avalon_uart_write_fd
000094f8 g     F .text	00000080 __clzsi2
0000b2d0 g     F .text	00000048 altera_avalon_uart_close_fd
0000aee0 g     F .text	00000240 altera_avalon_jtag_uart_write
00003fa0 g     F .text	00000004 __sfp_lock_acquire
000055fc g     F .text	000000e4 memchr
00000540 g     F .text	00001eac ___vfprintf_internal_r
00004334 g     F .text	00000314 _free_r
0000ccd0 g     F .text	000001b0 __call_exitprocs
00010ac0 g     O .bss	00000004 __mlocale_changed
0000eeac g     O .rwdata	00000004 __malloc_sbrk_base
000001b4 g     F .text	0000003c _start
00010ae8 g     O .bss	00000004 _alt_tick_rate
0000623c g     F .text	0000014c __lshift
00010aec g     O .bss	00000004 _alt_nticks
0000a150 g     F .text	00000120 read
0000a5a0 g     F .text	0000009c alt_sys_init
0000cb98 g     F .text	00000134 __register_exitproc
00006388 g     F .text	000001e8 __multiply
0000ab54 g     F .text	00000074 altera_avalon_jtag_uart_close
0000d2f4 g       *ABS*	00000000 __ram_rwdata_start
0000cf50 g       *ABS*	00000000 __ram_rodata_start
00010af0 g     O .bss	00000028 __malloc_current_mallinfo
00005f34 g     F .text	0000017c __d2b
0000a674 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0000c990 g     F .text	000000b8 alt_get_fd
000099c4 g     F .text	000000c8 __fpcmp_parts_d
000072f4 g     F .text	00000070 _close_r
0000cb24 g     F .text	00000074 memcmp
0000a724 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00010da8 g       *ABS*	00000000 __alt_stack_base
0000a76c g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00002410 g     F .text	0000013c __swsetup_r
00008ab0 g     F .text	00000258 __divdf3
00004118 g     F .text	000000f0 __sfp
00005d98 g     F .text	00000058 __copybits
0000d700 g     O .rwdata	00000408 __malloc_av_
00003fac g     F .text	00000004 __sinit_lock_release
000086ec g     F .text	000003c4 __muldf3
000070ac g     F .text	00000060 __sread
0000c870 g     F .text	00000120 alt_find_file
0000bd40 g     F .text	000000b4 alt_dev_llist_insert
0000a110 g     F .text	00000020 __malloc_lock
0000a330 g     F .text	000000bc sbrk
00003d18 g     F .text	000001fc _fflush_r
00007240 g     F .text	000000b4 _calloc_r
00010abc g       *ABS*	00000000 __bss_start
00005860 g     F .text	00000098 memset
000001f0 g     F .text	00000060 main
00010ae0 g     O .bss	00000004 alt_envp
00010ad0 g     O .bss	00000004 __malloc_max_total_mem
0000a6cc g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00006fc0 g     F .text	00000008 __sclose
00800000 g       *ABS*	00000000 __alt_heap_limit
00007474 g     F .text	00000014 fclose
00010c18 g     O .bss	00000190 _atexit0
00002764 g     F .text	000015b4 _dtoa_r
00004ebc g     F .text	00000740 _malloc_r
0000eec4 g     O .rwdata	00000004 alt_errno
00004bac g     F .text	000000b8 _fwalk
00009390 g     F .text	00000060 __divsi3
0000d18c g     O .rodata	00000014 __thenan_df
00004208 g     F .text	0000012c _malloc_trim_r
0000cf50 g       *ABS*	00000000 __CTOR_END__
0000710c g     F .text	000000bc strcmp
0000cf50 g       *ABS*	00000000 __flash_rodata_start
0000cf50 g       *ABS*	00000000 __DTOR_LIST__
00008d90 g     F .text	00000088 __nedf2
0000a56c g     F .text	00000034 alt_irq_init
0000a2d0 g     F .text	00000060 alt_release_fd
0000d1a0 g     O .rodata	00000100 __clz_tab
00010ac4 g     O .bss	00000004 _PathLocale
0000cad8 g     F .text	00000014 atexit
000071c8 g     F .text	00000078 _write_r
00004d0c g     F .text	0000001c setlocale
0000ee98 g     O .rwdata	00000004 _impure_ptr
00010ad8 g     O .bss	00000004 alt_argc
0000beb8 g     F .text	00000064 _do_dtors
00000020 g       .exceptions	00000000 alt_irq_entry
00005ab4 g     F .text	00000080 __ulp
00006ee0 g     F .text	00000040 __isinfd
00004064 g     F .text	00000018 __fp_unlock_all
0000eeb0 g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
00004c78 g     F .text	00000010 localeconv
0000bf4c g     F .text	00000050 alt_ic_isr_register
0000eed8 g       *ABS*	00000000 _edata
0000b220 g     F .text	00000058 altera_avalon_uart_read_fd
00010da8 g       *ABS*	00000000 _end
000001b4 g       *ABS*	00000000 __ram_exceptions_end
0000abc8 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0000c038 g     F .text	000000a0 alt_ic_irq_disable
0000031c g     F .text	0000002c twoRaisedToPower
00007030 g     F .text	0000007c __swrite
0000eea8 g     O .rwdata	00000004 __malloc_trim_threshold
0000c7bc g     F .text	00000020 altera_nios2_qsys_irq_init
0000caec g     F .text	00000038 exit
00004ae4 g     F .text	000000c8 _fwalk_reent
000060b0 g     F .text	0000018c __mdiff
000093f0 g     F .text	00000060 __modsi3
00800000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00003fa4 g     F .text	00000004 __sfp_lock_release
00000000 g       *ABS*	00000000 __alt_mem_sdram
0000b6b8 g     F .text	00000060 altera_avalon_uart_close
0000cec0 g     F .text	00000020 _exit
00006f20 g     F .text	00000030 __isnand
0000bbd0 g     F .text	00000154 alt_alarm_start
00009460 g     F .text	00000098 __muldi3
00004d28 g     F .text	00000194 __smakebuf_r
00000474 g     F .text	00000074 strlen
0000c430 g     F .text	00000188 open
00008ea0 g     F .text	00000088 __gedf2
0000bf1c g     F .text	00000030 alt_icache_flush_all
0000eecc g     O .rwdata	00000004 alt_priority_mask
0000bf9c g     F .text	0000009c alt_ic_irq_enable
000023ec g     F .text	00000024 __vfprintf_internal
0000b718 g     F .text	00000230 altera_avalon_uart_read
000085f8 g     F .text	00000080 __subdf3
00005990 g     F .text	000000c4 __lo0bits
0000eed0 g     O .rwdata	00000008 alt_alarm_list
0000be54 g     F .text	00000064 _do_ctors
00009a8c g     F .text	000000fc close
00009e68 g     F .text	00000080 alt_load
00009578 g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
00003fa8 g     F .text	00000004 __sinit_lock_acquire
000065ac g     F .text	00000100 __multadd
000058f8 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00880014 	movui	r2,8192
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08406d14 	ori	at,at,436
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  44:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  fc:	0005313a 	rdctl	r2,ipending
 100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 10c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 110:	00800044 	movi	r2,1
 114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 118:	e0ffff17 	ldw	r3,-4(fp)
 11c:	e0bffe17 	ldw	r2,-8(fp)
 120:	1884703a 	and	r2,r3,r2
 124:	1005003a 	cmpeq	r2,r2,zero
 128:	1000161e 	bne	r2,zero,184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 12c:	e0bffd17 	ldw	r2,-12(fp)
 130:	00c00074 	movhi	r3,1
 134:	18c2c604 	addi	r3,r3,2840
 138:	100490fa 	slli	r2,r2,3
 13c:	10c5883a 	add	r2,r2,r3
 140:	11400017 	ldw	r5,0(r2)
 144:	e0bffd17 	ldw	r2,-12(fp)
 148:	00c00074 	movhi	r3,1
 14c:	18c2c604 	addi	r3,r3,2840
 150:	100490fa 	slli	r2,r2,3
 154:	10c5883a 	add	r2,r2,r3
 158:	10800104 	addi	r2,r2,4
 15c:	11000017 	ldw	r4,0(r2)
 160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 164:	0005313a 	rdctl	r2,ipending
 168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 16c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 174:	e0bfff17 	ldw	r2,-4(fp)
 178:	1004c03a 	cmpne	r2,r2,zero
 17c:	103fe31e 	bne	r2,zero,10c <alt_irq_handler+0x20>
 180:	00000706 	br	1a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 184:	e0bffe17 	ldw	r2,-8(fp)
 188:	1085883a 	add	r2,r2,r2
 18c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 190:	e0bffd17 	ldw	r2,-12(fp)
 194:	10800044 	addi	r2,r2,1
 198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 19c:	003fde06 	br	118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 1a0:	e037883a 	mov	sp,fp
 1a4:	dfc00117 	ldw	ra,4(sp)
 1a8:	df000017 	ldw	fp,0(sp)
 1ac:	dec00204 	addi	sp,sp,8
 1b0:	f800283a 	ret

Disassembly of section .text:

000001b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1b4:	06c02034 	movhi	sp,128
    ori sp, sp, %lo(__alt_stack_pointer)
     1b8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     1bc:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     1c0:	d69ba614 	ori	gp,gp,28312
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1c4:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     1c8:	1082af14 	ori	r2,r2,2748

    movhi r3, %hi(__bss_end)
     1cc:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     1d0:	18c36a14 	ori	r3,r3,3496

    beq r2, r3, 1f
     1d4:	10c00326 	beq	r2,r3,1e4 <_start+0x30>

0:
    stw zero, (r2)
     1d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1e0:	10fffd36 	bltu	r2,r3,1d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1e4:	0009e680 	call	9e68 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1e8:	000a0a40 	call	a0a4 <alt_main>

000001ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1ec:	003fff06 	br	1ec <alt_after_alt_main>

000001f0 <main>:
int calc(int z);
int factorial(int num);
int twoRaisedToPower(int pow);

int main()
{
     1f0:	defffc04 	addi	sp,sp,-16
     1f4:	dfc00315 	stw	ra,12(sp)
     1f8:	df000215 	stw	fp,8(sp)
     1fc:	df000204 	addi	fp,sp,8
     200:	00000006 	br	204 <main+0x14>
  int x;
  int y;
  while(1)
  {
	  x = IORD_ALTERA_AVALON_PIO_DATA(SLIDER_SWITCHES_BASE);
     204:	00840034 	movhi	r2,4096
     208:	10800c04 	addi	r2,r2,48
     20c:	10800037 	ldwio	r2,0(r2)
     210:	e0bfff15 	stw	r2,-4(fp)
	  y = calc(x);
     214:	e13fff17 	ldw	r4,-4(fp)
     218:	00002500 	call	250 <calc>
     21c:	e0bffe15 	stw	r2,-8(fp)
	  printf("%d! plus 2 to the nth = %d\n",x,y);
     220:	01000074 	movhi	r4,1
     224:	2133d404 	addi	r4,r4,-12464
     228:	e17fff17 	ldw	r5,-4(fp)
     22c:	e1bffe17 	ldw	r6,-8(fp)
     230:	00003480 	call	348 <printf>
	  if (y > 100)
     234:	e0bffe17 	ldw	r2,-8(fp)
     238:	10801950 	cmplti	r2,r2,101
     23c:	103ff11e 	bne	r2,zero,204 <main+0x14>
	  {
		printf("y is larger than 100\n");
     240:	01000074 	movhi	r4,1
     244:	2133db04 	addi	r4,r4,-12436
     248:	00004600 	call	460 <puts>
	  }
  }
     24c:	003fed06 	br	204 <main+0x14>

00000250 <calc>:
  return 0; //This never runs
}

int calc(int z)
{
     250:	defffb04 	addi	sp,sp,-20
     254:	dfc00415 	stw	ra,16(sp)
     258:	df000315 	stw	fp,12(sp)
     25c:	dc000215 	stw	r16,8(sp)
     260:	df000204 	addi	fp,sp,8
     264:	e13fff15 	stw	r4,-4(fp)
	int temp = factorial(z + 1) + twoRaisedToPower(2);
     268:	e0bfff17 	ldw	r2,-4(fp)
     26c:	11000044 	addi	r4,r2,1
     270:	00002bc0 	call	2bc <factorial>
     274:	1021883a 	mov	r16,r2
     278:	01000084 	movi	r4,2
     27c:	000031c0 	call	31c <twoRaisedToPower>
     280:	8085883a 	add	r2,r16,r2
     284:	e0bffe15 	stw	r2,-8(fp)
	z = 5000;
     288:	0084e204 	movi	r2,5000
     28c:	e0bfff15 	stw	r2,-4(fp)
	printf("temp = %d\n", temp);
     290:	01000074 	movhi	r4,1
     294:	2133e104 	addi	r4,r4,-12412
     298:	e17ffe17 	ldw	r5,-8(fp)
     29c:	00003480 	call	348 <printf>
	return temp;
     2a0:	e0bffe17 	ldw	r2,-8(fp)
}
     2a4:	e037883a 	mov	sp,fp
     2a8:	dfc00217 	ldw	ra,8(sp)
     2ac:	df000117 	ldw	fp,4(sp)
     2b0:	dc000017 	ldw	r16,0(sp)
     2b4:	dec00304 	addi	sp,sp,12
     2b8:	f800283a 	ret

000002bc <factorial>:

int factorial(int num)
{
     2bc:	defffc04 	addi	sp,sp,-16
     2c0:	df000315 	stw	fp,12(sp)
     2c4:	df000304 	addi	fp,sp,12
     2c8:	e13fff15 	stw	r4,-4(fp)
	int fact = 1;
     2cc:	00800044 	movi	r2,1
     2d0:	e0bffe15 	stw	r2,-8(fp)
	int i;
	for(i = 2; i <= num; i = i + 1)
     2d4:	00800084 	movi	r2,2
     2d8:	e0bffd15 	stw	r2,-12(fp)
     2dc:	00000706 	br	2fc <factorial+0x40>
	{
		fact = fact * i;
     2e0:	e0fffe17 	ldw	r3,-8(fp)
     2e4:	e0bffd17 	ldw	r2,-12(fp)
     2e8:	1885383a 	mul	r2,r3,r2
     2ec:	e0bffe15 	stw	r2,-8(fp)

int factorial(int num)
{
	int fact = 1;
	int i;
	for(i = 2; i <= num; i = i + 1)
     2f0:	e0bffd17 	ldw	r2,-12(fp)
     2f4:	10800044 	addi	r2,r2,1
     2f8:	e0bffd15 	stw	r2,-12(fp)
     2fc:	e0fffd17 	ldw	r3,-12(fp)
     300:	e0bfff17 	ldw	r2,-4(fp)
     304:	10fff60e 	bge	r2,r3,2e0 <factorial+0x24>
	{
		fact = fact * i;
	}
	return fact;
     308:	e0bffe17 	ldw	r2,-8(fp)
}
     30c:	e037883a 	mov	sp,fp
     310:	df000017 	ldw	fp,0(sp)
     314:	dec00104 	addi	sp,sp,4
     318:	f800283a 	ret

0000031c <twoRaisedToPower>:

int twoRaisedToPower(int pow)
{
     31c:	defffe04 	addi	sp,sp,-8
     320:	df000115 	stw	fp,4(sp)
     324:	df000104 	addi	fp,sp,4
     328:	e13fff15 	stw	r4,-4(fp)
	return 1 << pow;
     32c:	00c00044 	movi	r3,1
     330:	e0bfff17 	ldw	r2,-4(fp)
     334:	1884983a 	sll	r2,r3,r2
}
     338:	e037883a 	mov	sp,fp
     33c:	df000017 	ldw	fp,0(sp)
     340:	dec00104 	addi	sp,sp,4
     344:	f800283a 	ret

00000348 <printf>:
     348:	defffb04 	addi	sp,sp,-20
     34c:	dfc00115 	stw	ra,4(sp)
     350:	d9400215 	stw	r5,8(sp)
     354:	d9800315 	stw	r6,12(sp)
     358:	d9c00415 	stw	r7,16(sp)
     35c:	00800074 	movhi	r2,1
     360:	10bba604 	addi	r2,r2,-4456
     364:	10c00017 	ldw	r3,0(r2)
     368:	200b883a 	mov	r5,r4
     36c:	d8800204 	addi	r2,sp,8
     370:	19000217 	ldw	r4,8(r3)
     374:	100d883a 	mov	r6,r2
     378:	d8800015 	stw	r2,0(sp)
     37c:	00023ec0 	call	23ec <__vfprintf_internal>
     380:	dfc00117 	ldw	ra,4(sp)
     384:	dec00504 	addi	sp,sp,20
     388:	f800283a 	ret

0000038c <_printf_r>:
     38c:	defffc04 	addi	sp,sp,-16
     390:	dfc00115 	stw	ra,4(sp)
     394:	d9800215 	stw	r6,8(sp)
     398:	d9c00315 	stw	r7,12(sp)
     39c:	280d883a 	mov	r6,r5
     3a0:	21400217 	ldw	r5,8(r4)
     3a4:	d8c00204 	addi	r3,sp,8
     3a8:	180f883a 	mov	r7,r3
     3ac:	d8c00015 	stw	r3,0(sp)
     3b0:	00005400 	call	540 <___vfprintf_internal_r>
     3b4:	dfc00117 	ldw	ra,4(sp)
     3b8:	dec00404 	addi	sp,sp,16
     3bc:	f800283a 	ret

000003c0 <_puts_r>:
     3c0:	defff604 	addi	sp,sp,-40
     3c4:	dc400715 	stw	r17,28(sp)
     3c8:	2023883a 	mov	r17,r4
     3cc:	2809883a 	mov	r4,r5
     3d0:	dfc00915 	stw	ra,36(sp)
     3d4:	dcc00815 	stw	r19,32(sp)
     3d8:	2827883a 	mov	r19,r5
     3dc:	00004740 	call	474 <strlen>
     3e0:	89400217 	ldw	r5,8(r17)
     3e4:	00c00074 	movhi	r3,1
     3e8:	18f3e404 	addi	r3,r3,-12400
     3ec:	01c00044 	movi	r7,1
     3f0:	12000044 	addi	r8,r2,1
     3f4:	d8c00515 	stw	r3,20(sp)
     3f8:	d9c00615 	stw	r7,24(sp)
     3fc:	d8c00304 	addi	r3,sp,12
     400:	01c00084 	movi	r7,2
     404:	8809883a 	mov	r4,r17
     408:	d80d883a 	mov	r6,sp
     40c:	d8c00015 	stw	r3,0(sp)
     410:	dcc00315 	stw	r19,12(sp)
     414:	da000215 	stw	r8,8(sp)
     418:	d9c00115 	stw	r7,4(sp)
     41c:	d8800415 	stw	r2,16(sp)
     420:	00046480 	call	4648 <__sfvwrite_r>
     424:	00ffffc4 	movi	r3,-1
     428:	10000626 	beq	r2,zero,444 <_puts_r+0x84>
     42c:	1805883a 	mov	r2,r3
     430:	dfc00917 	ldw	ra,36(sp)
     434:	dcc00817 	ldw	r19,32(sp)
     438:	dc400717 	ldw	r17,28(sp)
     43c:	dec00a04 	addi	sp,sp,40
     440:	f800283a 	ret
     444:	00c00284 	movi	r3,10
     448:	1805883a 	mov	r2,r3
     44c:	dfc00917 	ldw	ra,36(sp)
     450:	dcc00817 	ldw	r19,32(sp)
     454:	dc400717 	ldw	r17,28(sp)
     458:	dec00a04 	addi	sp,sp,40
     45c:	f800283a 	ret

00000460 <puts>:
     460:	00800074 	movhi	r2,1
     464:	10bba604 	addi	r2,r2,-4456
     468:	200b883a 	mov	r5,r4
     46c:	11000017 	ldw	r4,0(r2)
     470:	00003c01 	jmpi	3c0 <_puts_r>

00000474 <strlen>:
     474:	208000cc 	andi	r2,r4,3
     478:	2011883a 	mov	r8,r4
     47c:	1000161e 	bne	r2,zero,4d8 <strlen+0x64>
     480:	20c00017 	ldw	r3,0(r4)
     484:	017fbff4 	movhi	r5,65279
     488:	297fbfc4 	addi	r5,r5,-257
     48c:	01e02074 	movhi	r7,32897
     490:	39e02004 	addi	r7,r7,-32640
     494:	1945883a 	add	r2,r3,r5
     498:	11c4703a 	and	r2,r2,r7
     49c:	00c6303a 	nor	r3,zero,r3
     4a0:	1886703a 	and	r3,r3,r2
     4a4:	18000c1e 	bne	r3,zero,4d8 <strlen+0x64>
     4a8:	280d883a 	mov	r6,r5
     4ac:	380b883a 	mov	r5,r7
     4b0:	21000104 	addi	r4,r4,4
     4b4:	20800017 	ldw	r2,0(r4)
     4b8:	1187883a 	add	r3,r2,r6
     4bc:	1946703a 	and	r3,r3,r5
     4c0:	0084303a 	nor	r2,zero,r2
     4c4:	10c4703a 	and	r2,r2,r3
     4c8:	103ff926 	beq	r2,zero,4b0 <strlen+0x3c>
     4cc:	20800007 	ldb	r2,0(r4)
     4d0:	10000326 	beq	r2,zero,4e0 <strlen+0x6c>
     4d4:	21000044 	addi	r4,r4,1
     4d8:	20800007 	ldb	r2,0(r4)
     4dc:	103ffd1e 	bne	r2,zero,4d4 <strlen+0x60>
     4e0:	2205c83a 	sub	r2,r4,r8
     4e4:	f800283a 	ret

000004e8 <__sprint_r>:
     4e8:	30800217 	ldw	r2,8(r6)
     4ec:	defffe04 	addi	sp,sp,-8
     4f0:	dc000015 	stw	r16,0(sp)
     4f4:	dfc00115 	stw	ra,4(sp)
     4f8:	3021883a 	mov	r16,r6
     4fc:	0007883a 	mov	r3,zero
     500:	1000061e 	bne	r2,zero,51c <__sprint_r+0x34>
     504:	1805883a 	mov	r2,r3
     508:	30000115 	stw	zero,4(r6)
     50c:	dfc00117 	ldw	ra,4(sp)
     510:	dc000017 	ldw	r16,0(sp)
     514:	dec00204 	addi	sp,sp,8
     518:	f800283a 	ret
     51c:	00046480 	call	4648 <__sfvwrite_r>
     520:	1007883a 	mov	r3,r2
     524:	1805883a 	mov	r2,r3
     528:	80000115 	stw	zero,4(r16)
     52c:	80000215 	stw	zero,8(r16)
     530:	dfc00117 	ldw	ra,4(sp)
     534:	dc000017 	ldw	r16,0(sp)
     538:	dec00204 	addi	sp,sp,8
     53c:	f800283a 	ret

00000540 <___vfprintf_internal_r>:
     540:	defea404 	addi	sp,sp,-1392
     544:	dd815815 	stw	r22,1376(sp)
     548:	dc015215 	stw	r16,1352(sp)
     54c:	d9c15115 	stw	r7,1348(sp)
     550:	dfc15b15 	stw	ra,1388(sp)
     554:	df015a15 	stw	fp,1384(sp)
     558:	ddc15915 	stw	r23,1380(sp)
     55c:	dd415715 	stw	r21,1372(sp)
     560:	dd015615 	stw	r20,1368(sp)
     564:	dcc15515 	stw	r19,1364(sp)
     568:	dc815415 	stw	r18,1360(sp)
     56c:	dc415315 	stw	r17,1356(sp)
     570:	282d883a 	mov	r22,r5
     574:	3021883a 	mov	r16,r6
     578:	d9014f15 	stw	r4,1340(sp)
     57c:	0004c6c0 	call	4c6c <_localeconv_r>
     580:	10800017 	ldw	r2,0(r2)
     584:	d9c15117 	ldw	r7,1348(sp)
     588:	d8814915 	stw	r2,1316(sp)
     58c:	d8814f17 	ldw	r2,1340(sp)
     590:	10000226 	beq	r2,zero,59c <___vfprintf_internal_r+0x5c>
     594:	10800e17 	ldw	r2,56(r2)
     598:	10020d26 	beq	r2,zero,dd0 <___vfprintf_internal_r+0x890>
     59c:	b080030b 	ldhu	r2,12(r22)
     5a0:	1080020c 	andi	r2,r2,8
     5a4:	10020e26 	beq	r2,zero,de0 <___vfprintf_internal_r+0x8a0>
     5a8:	b0800417 	ldw	r2,16(r22)
     5ac:	10020c26 	beq	r2,zero,de0 <___vfprintf_internal_r+0x8a0>
     5b0:	b200030b 	ldhu	r8,12(r22)
     5b4:	00800284 	movi	r2,10
     5b8:	40c0068c 	andi	r3,r8,26
     5bc:	18802f1e 	bne	r3,r2,67c <___vfprintf_internal_r+0x13c>
     5c0:	b080038f 	ldh	r2,14(r22)
     5c4:	10002d16 	blt	r2,zero,67c <___vfprintf_internal_r+0x13c>
     5c8:	b240038b 	ldhu	r9,14(r22)
     5cc:	b2800717 	ldw	r10,28(r22)
     5d0:	b2c00917 	ldw	r11,36(r22)
     5d4:	d9014f17 	ldw	r4,1340(sp)
     5d8:	dc402904 	addi	r17,sp,164
     5dc:	d8804004 	addi	r2,sp,256
     5e0:	00c10004 	movi	r3,1024
     5e4:	423fff4c 	andi	r8,r8,65533
     5e8:	800d883a 	mov	r6,r16
     5ec:	880b883a 	mov	r5,r17
     5f0:	da002c0d 	sth	r8,176(sp)
     5f4:	da402c8d 	sth	r9,178(sp)
     5f8:	da803015 	stw	r10,192(sp)
     5fc:	dac03215 	stw	r11,200(sp)
     600:	d8802d15 	stw	r2,180(sp)
     604:	d8c02e15 	stw	r3,184(sp)
     608:	d8802915 	stw	r2,164(sp)
     60c:	d8c02b15 	stw	r3,172(sp)
     610:	d8002f15 	stw	zero,188(sp)
     614:	00005400 	call	540 <___vfprintf_internal_r>
     618:	d8814b15 	stw	r2,1324(sp)
     61c:	10000416 	blt	r2,zero,630 <___vfprintf_internal_r+0xf0>
     620:	d9014f17 	ldw	r4,1340(sp)
     624:	880b883a 	mov	r5,r17
     628:	0003d180 	call	3d18 <_fflush_r>
     62c:	1002321e 	bne	r2,zero,ef8 <___vfprintf_internal_r+0x9b8>
     630:	d8802c0b 	ldhu	r2,176(sp)
     634:	1080100c 	andi	r2,r2,64
     638:	10000326 	beq	r2,zero,648 <___vfprintf_internal_r+0x108>
     63c:	b080030b 	ldhu	r2,12(r22)
     640:	10801014 	ori	r2,r2,64
     644:	b080030d 	sth	r2,12(r22)
     648:	d8814b17 	ldw	r2,1324(sp)
     64c:	dfc15b17 	ldw	ra,1388(sp)
     650:	df015a17 	ldw	fp,1384(sp)
     654:	ddc15917 	ldw	r23,1380(sp)
     658:	dd815817 	ldw	r22,1376(sp)
     65c:	dd415717 	ldw	r21,1372(sp)
     660:	dd015617 	ldw	r20,1368(sp)
     664:	dcc15517 	ldw	r19,1364(sp)
     668:	dc815417 	ldw	r18,1360(sp)
     66c:	dc415317 	ldw	r17,1356(sp)
     670:	dc015217 	ldw	r16,1352(sp)
     674:	dec15c04 	addi	sp,sp,1392
     678:	f800283a 	ret
     67c:	0005883a 	mov	r2,zero
     680:	0007883a 	mov	r3,zero
     684:	dd401904 	addi	r21,sp,100
     688:	d8814215 	stw	r2,1288(sp)
     68c:	802f883a 	mov	r23,r16
     690:	d8c14315 	stw	r3,1292(sp)
     694:	d8014b15 	stw	zero,1324(sp)
     698:	d8014815 	stw	zero,1312(sp)
     69c:	d8014415 	stw	zero,1296(sp)
     6a0:	d8014715 	stw	zero,1308(sp)
     6a4:	dd400c15 	stw	r21,48(sp)
     6a8:	d8000e15 	stw	zero,56(sp)
     6ac:	d8000d15 	stw	zero,52(sp)
     6b0:	b8800007 	ldb	r2,0(r23)
     6b4:	10001926 	beq	r2,zero,71c <___vfprintf_internal_r+0x1dc>
     6b8:	00c00944 	movi	r3,37
     6bc:	10c01726 	beq	r2,r3,71c <___vfprintf_internal_r+0x1dc>
     6c0:	b821883a 	mov	r16,r23
     6c4:	00000106 	br	6cc <___vfprintf_internal_r+0x18c>
     6c8:	10c00326 	beq	r2,r3,6d8 <___vfprintf_internal_r+0x198>
     6cc:	84000044 	addi	r16,r16,1
     6d0:	80800007 	ldb	r2,0(r16)
     6d4:	103ffc1e 	bne	r2,zero,6c8 <___vfprintf_internal_r+0x188>
     6d8:	85e7c83a 	sub	r19,r16,r23
     6dc:	98000e26 	beq	r19,zero,718 <___vfprintf_internal_r+0x1d8>
     6e0:	dc800e17 	ldw	r18,56(sp)
     6e4:	dc400d17 	ldw	r17,52(sp)
     6e8:	008001c4 	movi	r2,7
     6ec:	94e5883a 	add	r18,r18,r19
     6f0:	8c400044 	addi	r17,r17,1
     6f4:	adc00015 	stw	r23,0(r21)
     6f8:	dc800e15 	stw	r18,56(sp)
     6fc:	acc00115 	stw	r19,4(r21)
     700:	dc400d15 	stw	r17,52(sp)
     704:	14428b16 	blt	r2,r17,1134 <___vfprintf_internal_r+0xbf4>
     708:	ad400204 	addi	r21,r21,8
     70c:	d9014b17 	ldw	r4,1324(sp)
     710:	24c9883a 	add	r4,r4,r19
     714:	d9014b15 	stw	r4,1324(sp)
     718:	802f883a 	mov	r23,r16
     71c:	b8800007 	ldb	r2,0(r23)
     720:	10013c26 	beq	r2,zero,c14 <___vfprintf_internal_r+0x6d4>
     724:	bdc00044 	addi	r23,r23,1
     728:	d8000405 	stb	zero,16(sp)
     72c:	b8c00007 	ldb	r3,0(r23)
     730:	04ffffc4 	movi	r19,-1
     734:	d8014c15 	stw	zero,1328(sp)
     738:	d8014a15 	stw	zero,1320(sp)
     73c:	d8c14d15 	stw	r3,1332(sp)
     740:	bdc00044 	addi	r23,r23,1
     744:	d9414d17 	ldw	r5,1332(sp)
     748:	00801604 	movi	r2,88
     74c:	28fff804 	addi	r3,r5,-32
     750:	10c06036 	bltu	r2,r3,8d4 <___vfprintf_internal_r+0x394>
     754:	18c5883a 	add	r2,r3,r3
     758:	1085883a 	add	r2,r2,r2
     75c:	00c00034 	movhi	r3,0
     760:	18c1dc04 	addi	r3,r3,1904
     764:	10c5883a 	add	r2,r2,r3
     768:	11000017 	ldw	r4,0(r2)
     76c:	2000683a 	jmp	r4
     770:	000016e4 	muli	zero,zero,91
     774:	000008d4 	movui	zero,35
     778:	000008d4 	movui	zero,35
     77c:	000016d0 	cmplti	zero,zero,91
     780:	000008d4 	movui	zero,35
     784:	000008d4 	movui	zero,35
     788:	000008d4 	movui	zero,35
     78c:	000008d4 	movui	zero,35
     790:	000008d4 	movui	zero,35
     794:	000008d4 	movui	zero,35
     798:	000014b0 	cmpltui	zero,zero,82
     79c:	000016c0 	call	16c <alt_irq_handler+0x80>
     7a0:	000008d4 	movui	zero,35
     7a4:	000014c8 	cmpgei	zero,zero,83
     7a8:	0000175c 	xori	zero,zero,93
     7ac:	000008d4 	movui	zero,35
     7b0:	00001748 	cmpgei	zero,zero,93
     7b4:	00001710 	cmplti	zero,zero,92
     7b8:	00001710 	cmplti	zero,zero,92
     7bc:	00001710 	cmplti	zero,zero,92
     7c0:	00001710 	cmplti	zero,zero,92
     7c4:	00001710 	cmplti	zero,zero,92
     7c8:	00001710 	cmplti	zero,zero,92
     7cc:	00001710 	cmplti	zero,zero,92
     7d0:	00001710 	cmplti	zero,zero,92
     7d4:	00001710 	cmplti	zero,zero,92
     7d8:	000008d4 	movui	zero,35
     7dc:	000008d4 	movui	zero,35
     7e0:	000008d4 	movui	zero,35
     7e4:	000008d4 	movui	zero,35
     7e8:	000008d4 	movui	zero,35
     7ec:	000008d4 	movui	zero,35
     7f0:	000008d4 	movui	zero,35
     7f4:	000008d4 	movui	zero,35
     7f8:	000008d4 	movui	zero,35
     7fc:	000008d4 	movui	zero,35
     800:	00000f2c 	andhi	zero,zero,60
     804:	00001598 	cmpnei	zero,zero,86
     808:	000008d4 	movui	zero,35
     80c:	00001598 	cmpnei	zero,zero,86
     810:	000008d4 	movui	zero,35
     814:	000008d4 	movui	zero,35
     818:	000008d4 	movui	zero,35
     81c:	000008d4 	movui	zero,35
     820:	000016fc 	xorhi	zero,zero,91
     824:	000008d4 	movui	zero,35
     828:	000008d4 	movui	zero,35
     82c:	00000fe0 	cmpeqi	zero,zero,63
     830:	000008d4 	movui	zero,35
     834:	000008d4 	movui	zero,35
     838:	000008d4 	movui	zero,35
     83c:	000008d4 	movui	zero,35
     840:	000008d4 	movui	zero,35
     844:	0000102c 	andhi	zero,zero,64
     848:	000008d4 	movui	zero,35
     84c:	000008d4 	movui	zero,35
     850:	0000164c 	andi	zero,zero,89
     854:	000008d4 	movui	zero,35
     858:	000008d4 	movui	zero,35
     85c:	000008d4 	movui	zero,35
     860:	000008d4 	movui	zero,35
     864:	000008d4 	movui	zero,35
     868:	000008d4 	movui	zero,35
     86c:	000008d4 	movui	zero,35
     870:	000008d4 	movui	zero,35
     874:	000008d4 	movui	zero,35
     878:	000008d4 	movui	zero,35
     87c:	00001620 	cmpeqi	zero,zero,88
     880:	00000f38 	rdprs	zero,zero,60
     884:	00001598 	cmpnei	zero,zero,86
     888:	00001598 	cmpnei	zero,zero,86
     88c:	00001598 	cmpnei	zero,zero,86
     890:	00001584 	movi	zero,86
     894:	00000f38 	rdprs	zero,zero,60
     898:	000008d4 	movui	zero,35
     89c:	000008d4 	movui	zero,35
     8a0:	0000150c 	andi	zero,zero,84
     8a4:	000008d4 	movui	zero,35
     8a8:	000014dc 	xori	zero,zero,83
     8ac:	00000fec 	andhi	zero,zero,63
     8b0:	0000153c 	xorhi	zero,zero,84
     8b4:	00001528 	cmpgeui	zero,zero,84
     8b8:	000008d4 	movui	zero,35
     8bc:	000017b8 	rdprs	zero,zero,94
     8c0:	000008d4 	movui	zero,35
     8c4:	00001038 	rdprs	zero,zero,64
     8c8:	000008d4 	movui	zero,35
     8cc:	000008d4 	movui	zero,35
     8d0:	000016b0 	cmpltui	zero,zero,90
     8d4:	d9014d17 	ldw	r4,1332(sp)
     8d8:	2000ce26 	beq	r4,zero,c14 <___vfprintf_internal_r+0x6d4>
     8dc:	01400044 	movi	r5,1
     8e0:	d9800f04 	addi	r6,sp,60
     8e4:	d9c14015 	stw	r7,1280(sp)
     8e8:	d9414515 	stw	r5,1300(sp)
     8ec:	d9814115 	stw	r6,1284(sp)
     8f0:	280f883a 	mov	r7,r5
     8f4:	d9000f05 	stb	r4,60(sp)
     8f8:	d8000405 	stb	zero,16(sp)
     8fc:	d8014615 	stw	zero,1304(sp)
     900:	d8c14c17 	ldw	r3,1328(sp)
     904:	1880008c 	andi	r2,r3,2
     908:	1005003a 	cmpeq	r2,r2,zero
     90c:	d8815015 	stw	r2,1344(sp)
     910:	1000031e 	bne	r2,zero,920 <___vfprintf_internal_r+0x3e0>
     914:	d9014517 	ldw	r4,1300(sp)
     918:	21000084 	addi	r4,r4,2
     91c:	d9014515 	stw	r4,1300(sp)
     920:	d9414c17 	ldw	r5,1328(sp)
     924:	2940210c 	andi	r5,r5,132
     928:	d9414e15 	stw	r5,1336(sp)
     92c:	28002d1e 	bne	r5,zero,9e4 <___vfprintf_internal_r+0x4a4>
     930:	d9814a17 	ldw	r6,1320(sp)
     934:	d8814517 	ldw	r2,1300(sp)
     938:	30a1c83a 	sub	r16,r6,r2
     93c:	0400290e 	bge	zero,r16,9e4 <___vfprintf_internal_r+0x4a4>
     940:	00800404 	movi	r2,16
     944:	1404580e 	bge	r2,r16,1aa8 <___vfprintf_internal_r+0x1568>
     948:	dc800e17 	ldw	r18,56(sp)
     94c:	dc400d17 	ldw	r17,52(sp)
     950:	1027883a 	mov	r19,r2
     954:	07000074 	movhi	fp,1
     958:	e7340084 	addi	fp,fp,-12286
     95c:	050001c4 	movi	r20,7
     960:	00000306 	br	970 <___vfprintf_internal_r+0x430>
     964:	843ffc04 	addi	r16,r16,-16
     968:	ad400204 	addi	r21,r21,8
     96c:	9c00130e 	bge	r19,r16,9bc <___vfprintf_internal_r+0x47c>
     970:	94800404 	addi	r18,r18,16
     974:	8c400044 	addi	r17,r17,1
     978:	af000015 	stw	fp,0(r21)
     97c:	acc00115 	stw	r19,4(r21)
     980:	dc800e15 	stw	r18,56(sp)
     984:	dc400d15 	stw	r17,52(sp)
     988:	a47ff60e 	bge	r20,r17,964 <___vfprintf_internal_r+0x424>
     98c:	d9014f17 	ldw	r4,1340(sp)
     990:	b00b883a 	mov	r5,r22
     994:	d9800c04 	addi	r6,sp,48
     998:	d9c15115 	stw	r7,1348(sp)
     99c:	00004e80 	call	4e8 <__sprint_r>
     9a0:	d9c15117 	ldw	r7,1348(sp)
     9a4:	10009e1e 	bne	r2,zero,c20 <___vfprintf_internal_r+0x6e0>
     9a8:	843ffc04 	addi	r16,r16,-16
     9ac:	dc800e17 	ldw	r18,56(sp)
     9b0:	dc400d17 	ldw	r17,52(sp)
     9b4:	dd401904 	addi	r21,sp,100
     9b8:	9c3fed16 	blt	r19,r16,970 <___vfprintf_internal_r+0x430>
     9bc:	9425883a 	add	r18,r18,r16
     9c0:	8c400044 	addi	r17,r17,1
     9c4:	008001c4 	movi	r2,7
     9c8:	af000015 	stw	fp,0(r21)
     9cc:	ac000115 	stw	r16,4(r21)
     9d0:	dc800e15 	stw	r18,56(sp)
     9d4:	dc400d15 	stw	r17,52(sp)
     9d8:	1441f516 	blt	r2,r17,11b0 <___vfprintf_internal_r+0xc70>
     9dc:	ad400204 	addi	r21,r21,8
     9e0:	00000206 	br	9ec <___vfprintf_internal_r+0x4ac>
     9e4:	dc800e17 	ldw	r18,56(sp)
     9e8:	dc400d17 	ldw	r17,52(sp)
     9ec:	d8800407 	ldb	r2,16(sp)
     9f0:	10000b26 	beq	r2,zero,a20 <___vfprintf_internal_r+0x4e0>
     9f4:	00800044 	movi	r2,1
     9f8:	94800044 	addi	r18,r18,1
     9fc:	8c400044 	addi	r17,r17,1
     a00:	a8800115 	stw	r2,4(r21)
     a04:	d8c00404 	addi	r3,sp,16
     a08:	008001c4 	movi	r2,7
     a0c:	a8c00015 	stw	r3,0(r21)
     a10:	dc800e15 	stw	r18,56(sp)
     a14:	dc400d15 	stw	r17,52(sp)
     a18:	1441da16 	blt	r2,r17,1184 <___vfprintf_internal_r+0xc44>
     a1c:	ad400204 	addi	r21,r21,8
     a20:	d9015017 	ldw	r4,1344(sp)
     a24:	20000b1e 	bne	r4,zero,a54 <___vfprintf_internal_r+0x514>
     a28:	d8800444 	addi	r2,sp,17
     a2c:	94800084 	addi	r18,r18,2
     a30:	8c400044 	addi	r17,r17,1
     a34:	a8800015 	stw	r2,0(r21)
     a38:	00c00084 	movi	r3,2
     a3c:	008001c4 	movi	r2,7
     a40:	a8c00115 	stw	r3,4(r21)
     a44:	dc800e15 	stw	r18,56(sp)
     a48:	dc400d15 	stw	r17,52(sp)
     a4c:	1441c216 	blt	r2,r17,1158 <___vfprintf_internal_r+0xc18>
     a50:	ad400204 	addi	r21,r21,8
     a54:	d9414e17 	ldw	r5,1336(sp)
     a58:	00802004 	movi	r2,128
     a5c:	2880b126 	beq	r5,r2,d24 <___vfprintf_internal_r+0x7e4>
     a60:	d8c14617 	ldw	r3,1304(sp)
     a64:	19e1c83a 	sub	r16,r3,r7
     a68:	0400260e 	bge	zero,r16,b04 <___vfprintf_internal_r+0x5c4>
     a6c:	00800404 	movi	r2,16
     a70:	1403c90e 	bge	r2,r16,1998 <___vfprintf_internal_r+0x1458>
     a74:	1027883a 	mov	r19,r2
     a78:	07000074 	movhi	fp,1
     a7c:	e733fc84 	addi	fp,fp,-12302
     a80:	050001c4 	movi	r20,7
     a84:	00000306 	br	a94 <___vfprintf_internal_r+0x554>
     a88:	843ffc04 	addi	r16,r16,-16
     a8c:	ad400204 	addi	r21,r21,8
     a90:	9c00130e 	bge	r19,r16,ae0 <___vfprintf_internal_r+0x5a0>
     a94:	94800404 	addi	r18,r18,16
     a98:	8c400044 	addi	r17,r17,1
     a9c:	af000015 	stw	fp,0(r21)
     aa0:	acc00115 	stw	r19,4(r21)
     aa4:	dc800e15 	stw	r18,56(sp)
     aa8:	dc400d15 	stw	r17,52(sp)
     aac:	a47ff60e 	bge	r20,r17,a88 <___vfprintf_internal_r+0x548>
     ab0:	d9014f17 	ldw	r4,1340(sp)
     ab4:	b00b883a 	mov	r5,r22
     ab8:	d9800c04 	addi	r6,sp,48
     abc:	d9c15115 	stw	r7,1348(sp)
     ac0:	00004e80 	call	4e8 <__sprint_r>
     ac4:	d9c15117 	ldw	r7,1348(sp)
     ac8:	1000551e 	bne	r2,zero,c20 <___vfprintf_internal_r+0x6e0>
     acc:	843ffc04 	addi	r16,r16,-16
     ad0:	dc800e17 	ldw	r18,56(sp)
     ad4:	dc400d17 	ldw	r17,52(sp)
     ad8:	dd401904 	addi	r21,sp,100
     adc:	9c3fed16 	blt	r19,r16,a94 <___vfprintf_internal_r+0x554>
     ae0:	9425883a 	add	r18,r18,r16
     ae4:	8c400044 	addi	r17,r17,1
     ae8:	008001c4 	movi	r2,7
     aec:	af000015 	stw	fp,0(r21)
     af0:	ac000115 	stw	r16,4(r21)
     af4:	dc800e15 	stw	r18,56(sp)
     af8:	dc400d15 	stw	r17,52(sp)
     afc:	14418216 	blt	r2,r17,1108 <___vfprintf_internal_r+0xbc8>
     b00:	ad400204 	addi	r21,r21,8
     b04:	d9014c17 	ldw	r4,1328(sp)
     b08:	2080400c 	andi	r2,r4,256
     b0c:	10004a1e 	bne	r2,zero,c38 <___vfprintf_internal_r+0x6f8>
     b10:	d9414117 	ldw	r5,1284(sp)
     b14:	91e5883a 	add	r18,r18,r7
     b18:	8c400044 	addi	r17,r17,1
     b1c:	008001c4 	movi	r2,7
     b20:	a9400015 	stw	r5,0(r21)
     b24:	a9c00115 	stw	r7,4(r21)
     b28:	dc800e15 	stw	r18,56(sp)
     b2c:	dc400d15 	stw	r17,52(sp)
     b30:	14416716 	blt	r2,r17,10d0 <___vfprintf_internal_r+0xb90>
     b34:	a8c00204 	addi	r3,r21,8
     b38:	d9814c17 	ldw	r6,1328(sp)
     b3c:	3080010c 	andi	r2,r6,4
     b40:	10002826 	beq	r2,zero,be4 <___vfprintf_internal_r+0x6a4>
     b44:	d8814a17 	ldw	r2,1320(sp)
     b48:	d9014517 	ldw	r4,1300(sp)
     b4c:	1121c83a 	sub	r16,r2,r4
     b50:	0400240e 	bge	zero,r16,be4 <___vfprintf_internal_r+0x6a4>
     b54:	00800404 	movi	r2,16
     b58:	14044f0e 	bge	r2,r16,1c98 <___vfprintf_internal_r+0x1758>
     b5c:	dc400d17 	ldw	r17,52(sp)
     b60:	1027883a 	mov	r19,r2
     b64:	07000074 	movhi	fp,1
     b68:	e7340084 	addi	fp,fp,-12286
     b6c:	050001c4 	movi	r20,7
     b70:	00000306 	br	b80 <___vfprintf_internal_r+0x640>
     b74:	843ffc04 	addi	r16,r16,-16
     b78:	18c00204 	addi	r3,r3,8
     b7c:	9c00110e 	bge	r19,r16,bc4 <___vfprintf_internal_r+0x684>
     b80:	94800404 	addi	r18,r18,16
     b84:	8c400044 	addi	r17,r17,1
     b88:	1f000015 	stw	fp,0(r3)
     b8c:	1cc00115 	stw	r19,4(r3)
     b90:	dc800e15 	stw	r18,56(sp)
     b94:	dc400d15 	stw	r17,52(sp)
     b98:	a47ff60e 	bge	r20,r17,b74 <___vfprintf_internal_r+0x634>
     b9c:	d9014f17 	ldw	r4,1340(sp)
     ba0:	b00b883a 	mov	r5,r22
     ba4:	d9800c04 	addi	r6,sp,48
     ba8:	00004e80 	call	4e8 <__sprint_r>
     bac:	10001c1e 	bne	r2,zero,c20 <___vfprintf_internal_r+0x6e0>
     bb0:	843ffc04 	addi	r16,r16,-16
     bb4:	dc800e17 	ldw	r18,56(sp)
     bb8:	dc400d17 	ldw	r17,52(sp)
     bbc:	d8c01904 	addi	r3,sp,100
     bc0:	9c3fef16 	blt	r19,r16,b80 <___vfprintf_internal_r+0x640>
     bc4:	9425883a 	add	r18,r18,r16
     bc8:	8c400044 	addi	r17,r17,1
     bcc:	008001c4 	movi	r2,7
     bd0:	1f000015 	stw	fp,0(r3)
     bd4:	1c000115 	stw	r16,4(r3)
     bd8:	dc800e15 	stw	r18,56(sp)
     bdc:	dc400d15 	stw	r17,52(sp)
     be0:	1440cb16 	blt	r2,r17,f10 <___vfprintf_internal_r+0x9d0>
     be4:	d8814a17 	ldw	r2,1320(sp)
     be8:	d9414517 	ldw	r5,1300(sp)
     bec:	1140010e 	bge	r2,r5,bf4 <___vfprintf_internal_r+0x6b4>
     bf0:	2805883a 	mov	r2,r5
     bf4:	d9814b17 	ldw	r6,1324(sp)
     bf8:	308d883a 	add	r6,r6,r2
     bfc:	d9814b15 	stw	r6,1324(sp)
     c00:	90013b1e 	bne	r18,zero,10f0 <___vfprintf_internal_r+0xbb0>
     c04:	d9c14017 	ldw	r7,1280(sp)
     c08:	dd401904 	addi	r21,sp,100
     c0c:	d8000d15 	stw	zero,52(sp)
     c10:	003ea706 	br	6b0 <___vfprintf_internal_r+0x170>
     c14:	d8800e17 	ldw	r2,56(sp)
     c18:	10053f1e 	bne	r2,zero,2118 <___vfprintf_internal_r+0x1bd8>
     c1c:	d8000d15 	stw	zero,52(sp)
     c20:	b080030b 	ldhu	r2,12(r22)
     c24:	1080100c 	andi	r2,r2,64
     c28:	103e8726 	beq	r2,zero,648 <___vfprintf_internal_r+0x108>
     c2c:	00bfffc4 	movi	r2,-1
     c30:	d8814b15 	stw	r2,1324(sp)
     c34:	003e8406 	br	648 <___vfprintf_internal_r+0x108>
     c38:	d9814d17 	ldw	r6,1332(sp)
     c3c:	00801944 	movi	r2,101
     c40:	11806e16 	blt	r2,r6,dfc <___vfprintf_internal_r+0x8bc>
     c44:	d9414717 	ldw	r5,1308(sp)
     c48:	00c00044 	movi	r3,1
     c4c:	1943430e 	bge	r3,r5,195c <___vfprintf_internal_r+0x141c>
     c50:	d8814117 	ldw	r2,1284(sp)
     c54:	94800044 	addi	r18,r18,1
     c58:	8c400044 	addi	r17,r17,1
     c5c:	a8800015 	stw	r2,0(r21)
     c60:	008001c4 	movi	r2,7
     c64:	a8c00115 	stw	r3,4(r21)
     c68:	dc800e15 	stw	r18,56(sp)
     c6c:	dc400d15 	stw	r17,52(sp)
     c70:	1441ca16 	blt	r2,r17,139c <___vfprintf_internal_r+0xe5c>
     c74:	a8c00204 	addi	r3,r21,8
     c78:	d9014917 	ldw	r4,1316(sp)
     c7c:	00800044 	movi	r2,1
     c80:	94800044 	addi	r18,r18,1
     c84:	8c400044 	addi	r17,r17,1
     c88:	18800115 	stw	r2,4(r3)
     c8c:	008001c4 	movi	r2,7
     c90:	19000015 	stw	r4,0(r3)
     c94:	dc800e15 	stw	r18,56(sp)
     c98:	dc400d15 	stw	r17,52(sp)
     c9c:	1441b616 	blt	r2,r17,1378 <___vfprintf_internal_r+0xe38>
     ca0:	1cc00204 	addi	r19,r3,8
     ca4:	d9014217 	ldw	r4,1288(sp)
     ca8:	d9414317 	ldw	r5,1292(sp)
     cac:	000d883a 	mov	r6,zero
     cb0:	000f883a 	mov	r7,zero
     cb4:	0008d900 	call	8d90 <__nedf2>
     cb8:	10017426 	beq	r2,zero,128c <___vfprintf_internal_r+0xd4c>
     cbc:	d9414717 	ldw	r5,1308(sp)
     cc0:	d9814117 	ldw	r6,1284(sp)
     cc4:	8c400044 	addi	r17,r17,1
     cc8:	2c85883a 	add	r2,r5,r18
     ccc:	14bfffc4 	addi	r18,r2,-1
     cd0:	28bfffc4 	addi	r2,r5,-1
     cd4:	30c00044 	addi	r3,r6,1
     cd8:	98800115 	stw	r2,4(r19)
     cdc:	008001c4 	movi	r2,7
     ce0:	98c00015 	stw	r3,0(r19)
     ce4:	dc800e15 	stw	r18,56(sp)
     ce8:	dc400d15 	stw	r17,52(sp)
     cec:	14418e16 	blt	r2,r17,1328 <___vfprintf_internal_r+0xde8>
     cf0:	9cc00204 	addi	r19,r19,8
     cf4:	d9414817 	ldw	r5,1312(sp)
     cf8:	d8800804 	addi	r2,sp,32
     cfc:	8c400044 	addi	r17,r17,1
     d00:	9165883a 	add	r18,r18,r5
     d04:	98800015 	stw	r2,0(r19)
     d08:	008001c4 	movi	r2,7
     d0c:	99400115 	stw	r5,4(r19)
     d10:	dc800e15 	stw	r18,56(sp)
     d14:	dc400d15 	stw	r17,52(sp)
     d18:	1440ed16 	blt	r2,r17,10d0 <___vfprintf_internal_r+0xb90>
     d1c:	98c00204 	addi	r3,r19,8
     d20:	003f8506 	br	b38 <___vfprintf_internal_r+0x5f8>
     d24:	d9814a17 	ldw	r6,1320(sp)
     d28:	d8814517 	ldw	r2,1300(sp)
     d2c:	30a1c83a 	sub	r16,r6,r2
     d30:	043f4b0e 	bge	zero,r16,a60 <___vfprintf_internal_r+0x520>
     d34:	00800404 	movi	r2,16
     d38:	1404340e 	bge	r2,r16,1e0c <___vfprintf_internal_r+0x18cc>
     d3c:	1027883a 	mov	r19,r2
     d40:	07000074 	movhi	fp,1
     d44:	e733fc84 	addi	fp,fp,-12302
     d48:	050001c4 	movi	r20,7
     d4c:	00000306 	br	d5c <___vfprintf_internal_r+0x81c>
     d50:	843ffc04 	addi	r16,r16,-16
     d54:	ad400204 	addi	r21,r21,8
     d58:	9c00130e 	bge	r19,r16,da8 <___vfprintf_internal_r+0x868>
     d5c:	94800404 	addi	r18,r18,16
     d60:	8c400044 	addi	r17,r17,1
     d64:	af000015 	stw	fp,0(r21)
     d68:	acc00115 	stw	r19,4(r21)
     d6c:	dc800e15 	stw	r18,56(sp)
     d70:	dc400d15 	stw	r17,52(sp)
     d74:	a47ff60e 	bge	r20,r17,d50 <___vfprintf_internal_r+0x810>
     d78:	d9014f17 	ldw	r4,1340(sp)
     d7c:	b00b883a 	mov	r5,r22
     d80:	d9800c04 	addi	r6,sp,48
     d84:	d9c15115 	stw	r7,1348(sp)
     d88:	00004e80 	call	4e8 <__sprint_r>
     d8c:	d9c15117 	ldw	r7,1348(sp)
     d90:	103fa31e 	bne	r2,zero,c20 <___vfprintf_internal_r+0x6e0>
     d94:	843ffc04 	addi	r16,r16,-16
     d98:	dc800e17 	ldw	r18,56(sp)
     d9c:	dc400d17 	ldw	r17,52(sp)
     da0:	dd401904 	addi	r21,sp,100
     da4:	9c3fed16 	blt	r19,r16,d5c <___vfprintf_internal_r+0x81c>
     da8:	9425883a 	add	r18,r18,r16
     dac:	8c400044 	addi	r17,r17,1
     db0:	008001c4 	movi	r2,7
     db4:	af000015 	stw	fp,0(r21)
     db8:	ac000115 	stw	r16,4(r21)
     dbc:	dc800e15 	stw	r18,56(sp)
     dc0:	dc400d15 	stw	r17,52(sp)
     dc4:	14416116 	blt	r2,r17,134c <___vfprintf_internal_r+0xe0c>
     dc8:	ad400204 	addi	r21,r21,8
     dcc:	003f2406 	br	a60 <___vfprintf_internal_r+0x520>
     dd0:	d9014f17 	ldw	r4,1340(sp)
     dd4:	0003fb00 	call	3fb0 <__sinit>
     dd8:	d9c15117 	ldw	r7,1348(sp)
     ddc:	003def06 	br	59c <___vfprintf_internal_r+0x5c>
     de0:	d9014f17 	ldw	r4,1340(sp)
     de4:	b00b883a 	mov	r5,r22
     de8:	d9c15115 	stw	r7,1348(sp)
     dec:	00024100 	call	2410 <__swsetup_r>
     df0:	d9c15117 	ldw	r7,1348(sp)
     df4:	103dee26 	beq	r2,zero,5b0 <___vfprintf_internal_r+0x70>
     df8:	003f8c06 	br	c2c <___vfprintf_internal_r+0x6ec>
     dfc:	d9014217 	ldw	r4,1288(sp)
     e00:	d9414317 	ldw	r5,1292(sp)
     e04:	000d883a 	mov	r6,zero
     e08:	000f883a 	mov	r7,zero
     e0c:	0008d080 	call	8d08 <__eqdf2>
     e10:	1000f21e 	bne	r2,zero,11dc <___vfprintf_internal_r+0xc9c>
     e14:	00800074 	movhi	r2,1
     e18:	10b3fc04 	addi	r2,r2,-12304
     e1c:	94800044 	addi	r18,r18,1
     e20:	8c400044 	addi	r17,r17,1
     e24:	a8800015 	stw	r2,0(r21)
     e28:	00c00044 	movi	r3,1
     e2c:	008001c4 	movi	r2,7
     e30:	a8c00115 	stw	r3,4(r21)
     e34:	dc800e15 	stw	r18,56(sp)
     e38:	dc400d15 	stw	r17,52(sp)
     e3c:	1442fa16 	blt	r2,r17,1a28 <___vfprintf_internal_r+0x14e8>
     e40:	a8c00204 	addi	r3,r21,8
     e44:	d8800517 	ldw	r2,20(sp)
     e48:	d9014717 	ldw	r4,1308(sp)
     e4c:	11015c0e 	bge	r2,r4,13c0 <___vfprintf_internal_r+0xe80>
     e50:	dc400d17 	ldw	r17,52(sp)
     e54:	d9814917 	ldw	r6,1316(sp)
     e58:	00800044 	movi	r2,1
     e5c:	94800044 	addi	r18,r18,1
     e60:	8c400044 	addi	r17,r17,1
     e64:	18800115 	stw	r2,4(r3)
     e68:	008001c4 	movi	r2,7
     e6c:	19800015 	stw	r6,0(r3)
     e70:	dc800e15 	stw	r18,56(sp)
     e74:	dc400d15 	stw	r17,52(sp)
     e78:	14431016 	blt	r2,r17,1abc <___vfprintf_internal_r+0x157c>
     e7c:	18c00204 	addi	r3,r3,8
     e80:	d8814717 	ldw	r2,1308(sp)
     e84:	143fffc4 	addi	r16,r2,-1
     e88:	043f2b0e 	bge	zero,r16,b38 <___vfprintf_internal_r+0x5f8>
     e8c:	00800404 	movi	r2,16
     e90:	1402a20e 	bge	r2,r16,191c <___vfprintf_internal_r+0x13dc>
     e94:	dc400d17 	ldw	r17,52(sp)
     e98:	1027883a 	mov	r19,r2
     e9c:	07000074 	movhi	fp,1
     ea0:	e733fc84 	addi	fp,fp,-12302
     ea4:	050001c4 	movi	r20,7
     ea8:	00000306 	br	eb8 <___vfprintf_internal_r+0x978>
     eac:	18c00204 	addi	r3,r3,8
     eb0:	843ffc04 	addi	r16,r16,-16
     eb4:	9c029c0e 	bge	r19,r16,1928 <___vfprintf_internal_r+0x13e8>
     eb8:	94800404 	addi	r18,r18,16
     ebc:	8c400044 	addi	r17,r17,1
     ec0:	1f000015 	stw	fp,0(r3)
     ec4:	1cc00115 	stw	r19,4(r3)
     ec8:	dc800e15 	stw	r18,56(sp)
     ecc:	dc400d15 	stw	r17,52(sp)
     ed0:	a47ff60e 	bge	r20,r17,eac <___vfprintf_internal_r+0x96c>
     ed4:	d9014f17 	ldw	r4,1340(sp)
     ed8:	b00b883a 	mov	r5,r22
     edc:	d9800c04 	addi	r6,sp,48
     ee0:	00004e80 	call	4e8 <__sprint_r>
     ee4:	103f4e1e 	bne	r2,zero,c20 <___vfprintf_internal_r+0x6e0>
     ee8:	dc800e17 	ldw	r18,56(sp)
     eec:	dc400d17 	ldw	r17,52(sp)
     ef0:	d8c01904 	addi	r3,sp,100
     ef4:	003fee06 	br	eb0 <___vfprintf_internal_r+0x970>
     ef8:	d8802c0b 	ldhu	r2,176(sp)
     efc:	00ffffc4 	movi	r3,-1
     f00:	d8c14b15 	stw	r3,1324(sp)
     f04:	1080100c 	andi	r2,r2,64
     f08:	103dcc1e 	bne	r2,zero,63c <___vfprintf_internal_r+0xfc>
     f0c:	003dce06 	br	648 <___vfprintf_internal_r+0x108>
     f10:	d9014f17 	ldw	r4,1340(sp)
     f14:	b00b883a 	mov	r5,r22
     f18:	d9800c04 	addi	r6,sp,48
     f1c:	00004e80 	call	4e8 <__sprint_r>
     f20:	103f3f1e 	bne	r2,zero,c20 <___vfprintf_internal_r+0x6e0>
     f24:	dc800e17 	ldw	r18,56(sp)
     f28:	003f2e06 	br	be4 <___vfprintf_internal_r+0x6a4>
     f2c:	d9414c17 	ldw	r5,1328(sp)
     f30:	29400414 	ori	r5,r5,16
     f34:	d9414c15 	stw	r5,1328(sp)
     f38:	d9814c17 	ldw	r6,1328(sp)
     f3c:	3080080c 	andi	r2,r6,32
     f40:	10014f1e 	bne	r2,zero,1480 <___vfprintf_internal_r+0xf40>
     f44:	d8c14c17 	ldw	r3,1328(sp)
     f48:	1880040c 	andi	r2,r3,16
     f4c:	1002ea1e 	bne	r2,zero,1af8 <___vfprintf_internal_r+0x15b8>
     f50:	d9014c17 	ldw	r4,1328(sp)
     f54:	2080100c 	andi	r2,r4,64
     f58:	1002e726 	beq	r2,zero,1af8 <___vfprintf_internal_r+0x15b8>
     f5c:	3880000f 	ldh	r2,0(r7)
     f60:	39c00104 	addi	r7,r7,4
     f64:	d9c14015 	stw	r7,1280(sp)
     f68:	1023d7fa 	srai	r17,r2,31
     f6c:	1021883a 	mov	r16,r2
     f70:	88037216 	blt	r17,zero,1d3c <___vfprintf_internal_r+0x17fc>
     f74:	01000044 	movi	r4,1
     f78:	98000416 	blt	r19,zero,f8c <___vfprintf_internal_r+0xa4c>
     f7c:	d8c14c17 	ldw	r3,1328(sp)
     f80:	00bfdfc4 	movi	r2,-129
     f84:	1886703a 	and	r3,r3,r2
     f88:	d8c14c15 	stw	r3,1328(sp)
     f8c:	8444b03a 	or	r2,r16,r17
     f90:	1002261e 	bne	r2,zero,182c <___vfprintf_internal_r+0x12ec>
     f94:	9802251e 	bne	r19,zero,182c <___vfprintf_internal_r+0x12ec>
     f98:	20803fcc 	andi	r2,r4,255
     f9c:	10029b26 	beq	r2,zero,1a0c <___vfprintf_internal_r+0x14cc>
     fa0:	d8c01904 	addi	r3,sp,100
     fa4:	dd000f04 	addi	r20,sp,60
     fa8:	d8c14115 	stw	r3,1284(sp)
     fac:	d8c14117 	ldw	r3,1284(sp)
     fb0:	dcc14515 	stw	r19,1300(sp)
     fb4:	a0c5c83a 	sub	r2,r20,r3
     fb8:	11c00a04 	addi	r7,r2,40
     fbc:	99c0010e 	bge	r19,r7,fc4 <___vfprintf_internal_r+0xa84>
     fc0:	d9c14515 	stw	r7,1300(sp)
     fc4:	dcc14615 	stw	r19,1304(sp)
     fc8:	d8800407 	ldb	r2,16(sp)
     fcc:	103e4c26 	beq	r2,zero,900 <___vfprintf_internal_r+0x3c0>
     fd0:	d8814517 	ldw	r2,1300(sp)
     fd4:	10800044 	addi	r2,r2,1
     fd8:	d8814515 	stw	r2,1300(sp)
     fdc:	003e4806 	br	900 <___vfprintf_internal_r+0x3c0>
     fe0:	d9814c17 	ldw	r6,1328(sp)
     fe4:	31800414 	ori	r6,r6,16
     fe8:	d9814c15 	stw	r6,1328(sp)
     fec:	d8c14c17 	ldw	r3,1328(sp)
     ff0:	1880080c 	andi	r2,r3,32
     ff4:	1001271e 	bne	r2,zero,1494 <___vfprintf_internal_r+0xf54>
     ff8:	d9414c17 	ldw	r5,1328(sp)
     ffc:	2880040c 	andi	r2,r5,16
    1000:	1002b61e 	bne	r2,zero,1adc <___vfprintf_internal_r+0x159c>
    1004:	d9814c17 	ldw	r6,1328(sp)
    1008:	3080100c 	andi	r2,r6,64
    100c:	1002b326 	beq	r2,zero,1adc <___vfprintf_internal_r+0x159c>
    1010:	3c00000b 	ldhu	r16,0(r7)
    1014:	0009883a 	mov	r4,zero
    1018:	39c00104 	addi	r7,r7,4
    101c:	0023883a 	mov	r17,zero
    1020:	d9c14015 	stw	r7,1280(sp)
    1024:	d8000405 	stb	zero,16(sp)
    1028:	003fd306 	br	f78 <___vfprintf_internal_r+0xa38>
    102c:	d9014c17 	ldw	r4,1328(sp)
    1030:	21000414 	ori	r4,r4,16
    1034:	d9014c15 	stw	r4,1328(sp)
    1038:	d9414c17 	ldw	r5,1328(sp)
    103c:	2880080c 	andi	r2,r5,32
    1040:	1001081e 	bne	r2,zero,1464 <___vfprintf_internal_r+0xf24>
    1044:	d8c14c17 	ldw	r3,1328(sp)
    1048:	1880040c 	andi	r2,r3,16
    104c:	1002b01e 	bne	r2,zero,1b10 <___vfprintf_internal_r+0x15d0>
    1050:	d9014c17 	ldw	r4,1328(sp)
    1054:	2080100c 	andi	r2,r4,64
    1058:	1002ad26 	beq	r2,zero,1b10 <___vfprintf_internal_r+0x15d0>
    105c:	3c00000b 	ldhu	r16,0(r7)
    1060:	01000044 	movi	r4,1
    1064:	39c00104 	addi	r7,r7,4
    1068:	0023883a 	mov	r17,zero
    106c:	d9c14015 	stw	r7,1280(sp)
    1070:	d8000405 	stb	zero,16(sp)
    1074:	003fc006 	br	f78 <___vfprintf_internal_r+0xa38>
    1078:	d9014f17 	ldw	r4,1340(sp)
    107c:	b00b883a 	mov	r5,r22
    1080:	d9800c04 	addi	r6,sp,48
    1084:	00004e80 	call	4e8 <__sprint_r>
    1088:	103ee51e 	bne	r2,zero,c20 <___vfprintf_internal_r+0x6e0>
    108c:	dc800e17 	ldw	r18,56(sp)
    1090:	d8c01904 	addi	r3,sp,100
    1094:	d9814c17 	ldw	r6,1328(sp)
    1098:	3080004c 	andi	r2,r6,1
    109c:	1005003a 	cmpeq	r2,r2,zero
    10a0:	103ea51e 	bne	r2,zero,b38 <___vfprintf_internal_r+0x5f8>
    10a4:	00800044 	movi	r2,1
    10a8:	dc400d17 	ldw	r17,52(sp)
    10ac:	18800115 	stw	r2,4(r3)
    10b0:	d8814917 	ldw	r2,1316(sp)
    10b4:	94800044 	addi	r18,r18,1
    10b8:	8c400044 	addi	r17,r17,1
    10bc:	18800015 	stw	r2,0(r3)
    10c0:	008001c4 	movi	r2,7
    10c4:	dc800e15 	stw	r18,56(sp)
    10c8:	dc400d15 	stw	r17,52(sp)
    10cc:	14421e0e 	bge	r2,r17,1948 <___vfprintf_internal_r+0x1408>
    10d0:	d9014f17 	ldw	r4,1340(sp)
    10d4:	b00b883a 	mov	r5,r22
    10d8:	d9800c04 	addi	r6,sp,48
    10dc:	00004e80 	call	4e8 <__sprint_r>
    10e0:	103ecf1e 	bne	r2,zero,c20 <___vfprintf_internal_r+0x6e0>
    10e4:	dc800e17 	ldw	r18,56(sp)
    10e8:	d8c01904 	addi	r3,sp,100
    10ec:	003e9206 	br	b38 <___vfprintf_internal_r+0x5f8>
    10f0:	d9014f17 	ldw	r4,1340(sp)
    10f4:	b00b883a 	mov	r5,r22
    10f8:	d9800c04 	addi	r6,sp,48
    10fc:	00004e80 	call	4e8 <__sprint_r>
    1100:	103ec026 	beq	r2,zero,c04 <___vfprintf_internal_r+0x6c4>
    1104:	003ec606 	br	c20 <___vfprintf_internal_r+0x6e0>
    1108:	d9014f17 	ldw	r4,1340(sp)
    110c:	b00b883a 	mov	r5,r22
    1110:	d9800c04 	addi	r6,sp,48
    1114:	d9c15115 	stw	r7,1348(sp)
    1118:	00004e80 	call	4e8 <__sprint_r>
    111c:	d9c15117 	ldw	r7,1348(sp)
    1120:	103ebf1e 	bne	r2,zero,c20 <___vfprintf_internal_r+0x6e0>
    1124:	dc800e17 	ldw	r18,56(sp)
    1128:	dc400d17 	ldw	r17,52(sp)
    112c:	dd401904 	addi	r21,sp,100
    1130:	003e7406 	br	b04 <___vfprintf_internal_r+0x5c4>
    1134:	d9014f17 	ldw	r4,1340(sp)
    1138:	b00b883a 	mov	r5,r22
    113c:	d9800c04 	addi	r6,sp,48
    1140:	d9c15115 	stw	r7,1348(sp)
    1144:	00004e80 	call	4e8 <__sprint_r>
    1148:	d9c15117 	ldw	r7,1348(sp)
    114c:	103eb41e 	bne	r2,zero,c20 <___vfprintf_internal_r+0x6e0>
    1150:	dd401904 	addi	r21,sp,100
    1154:	003d6d06 	br	70c <___vfprintf_internal_r+0x1cc>
    1158:	d9014f17 	ldw	r4,1340(sp)
    115c:	b00b883a 	mov	r5,r22
    1160:	d9800c04 	addi	r6,sp,48
    1164:	d9c15115 	stw	r7,1348(sp)
    1168:	00004e80 	call	4e8 <__sprint_r>
    116c:	d9c15117 	ldw	r7,1348(sp)
    1170:	103eab1e 	bne	r2,zero,c20 <___vfprintf_internal_r+0x6e0>
    1174:	dc800e17 	ldw	r18,56(sp)
    1178:	dc400d17 	ldw	r17,52(sp)
    117c:	dd401904 	addi	r21,sp,100
    1180:	003e3406 	br	a54 <___vfprintf_internal_r+0x514>
    1184:	d9014f17 	ldw	r4,1340(sp)
    1188:	b00b883a 	mov	r5,r22
    118c:	d9800c04 	addi	r6,sp,48
    1190:	d9c15115 	stw	r7,1348(sp)
    1194:	00004e80 	call	4e8 <__sprint_r>
    1198:	d9c15117 	ldw	r7,1348(sp)
    119c:	103ea01e 	bne	r2,zero,c20 <___vfprintf_internal_r+0x6e0>
    11a0:	dc800e17 	ldw	r18,56(sp)
    11a4:	dc400d17 	ldw	r17,52(sp)
    11a8:	dd401904 	addi	r21,sp,100
    11ac:	003e1c06 	br	a20 <___vfprintf_internal_r+0x4e0>
    11b0:	d9014f17 	ldw	r4,1340(sp)
    11b4:	b00b883a 	mov	r5,r22
    11b8:	d9800c04 	addi	r6,sp,48
    11bc:	d9c15115 	stw	r7,1348(sp)
    11c0:	00004e80 	call	4e8 <__sprint_r>
    11c4:	d9c15117 	ldw	r7,1348(sp)
    11c8:	103e951e 	bne	r2,zero,c20 <___vfprintf_internal_r+0x6e0>
    11cc:	dc800e17 	ldw	r18,56(sp)
    11d0:	dc400d17 	ldw	r17,52(sp)
    11d4:	dd401904 	addi	r21,sp,100
    11d8:	003e0406 	br	9ec <___vfprintf_internal_r+0x4ac>
    11dc:	d9000517 	ldw	r4,20(sp)
    11e0:	0102520e 	bge	zero,r4,1b2c <___vfprintf_internal_r+0x15ec>
    11e4:	d9814717 	ldw	r6,1308(sp)
    11e8:	21807a16 	blt	r4,r6,13d4 <___vfprintf_internal_r+0xe94>
    11ec:	d8814117 	ldw	r2,1284(sp)
    11f0:	91a5883a 	add	r18,r18,r6
    11f4:	8c400044 	addi	r17,r17,1
    11f8:	a8800015 	stw	r2,0(r21)
    11fc:	008001c4 	movi	r2,7
    1200:	a9800115 	stw	r6,4(r21)
    1204:	dc800e15 	stw	r18,56(sp)
    1208:	dc400d15 	stw	r17,52(sp)
    120c:	1442f616 	blt	r2,r17,1de8 <___vfprintf_internal_r+0x18a8>
    1210:	a8c00204 	addi	r3,r21,8
    1214:	d9414717 	ldw	r5,1308(sp)
    1218:	2161c83a 	sub	r16,r4,r5
    121c:	043f9d0e 	bge	zero,r16,1094 <___vfprintf_internal_r+0xb54>
    1220:	00800404 	movi	r2,16
    1224:	1402130e 	bge	r2,r16,1a74 <___vfprintf_internal_r+0x1534>
    1228:	dc400d17 	ldw	r17,52(sp)
    122c:	1027883a 	mov	r19,r2
    1230:	07000074 	movhi	fp,1
    1234:	e733fc84 	addi	fp,fp,-12302
    1238:	050001c4 	movi	r20,7
    123c:	00000306 	br	124c <___vfprintf_internal_r+0xd0c>
    1240:	18c00204 	addi	r3,r3,8
    1244:	843ffc04 	addi	r16,r16,-16
    1248:	9c020d0e 	bge	r19,r16,1a80 <___vfprintf_internal_r+0x1540>
    124c:	94800404 	addi	r18,r18,16
    1250:	8c400044 	addi	r17,r17,1
    1254:	1f000015 	stw	fp,0(r3)
    1258:	1cc00115 	stw	r19,4(r3)
    125c:	dc800e15 	stw	r18,56(sp)
    1260:	dc400d15 	stw	r17,52(sp)
    1264:	a47ff60e 	bge	r20,r17,1240 <___vfprintf_internal_r+0xd00>
    1268:	d9014f17 	ldw	r4,1340(sp)
    126c:	b00b883a 	mov	r5,r22
    1270:	d9800c04 	addi	r6,sp,48
    1274:	00004e80 	call	4e8 <__sprint_r>
    1278:	103e691e 	bne	r2,zero,c20 <___vfprintf_internal_r+0x6e0>
    127c:	dc800e17 	ldw	r18,56(sp)
    1280:	dc400d17 	ldw	r17,52(sp)
    1284:	d8c01904 	addi	r3,sp,100
    1288:	003fee06 	br	1244 <___vfprintf_internal_r+0xd04>
    128c:	d8814717 	ldw	r2,1308(sp)
    1290:	143fffc4 	addi	r16,r2,-1
    1294:	043e970e 	bge	zero,r16,cf4 <___vfprintf_internal_r+0x7b4>
    1298:	00800404 	movi	r2,16
    129c:	1400180e 	bge	r2,r16,1300 <___vfprintf_internal_r+0xdc0>
    12a0:	1029883a 	mov	r20,r2
    12a4:	07000074 	movhi	fp,1
    12a8:	e733fc84 	addi	fp,fp,-12302
    12ac:	054001c4 	movi	r21,7
    12b0:	00000306 	br	12c0 <___vfprintf_internal_r+0xd80>
    12b4:	9cc00204 	addi	r19,r19,8
    12b8:	843ffc04 	addi	r16,r16,-16
    12bc:	a400120e 	bge	r20,r16,1308 <___vfprintf_internal_r+0xdc8>
    12c0:	94800404 	addi	r18,r18,16
    12c4:	8c400044 	addi	r17,r17,1
    12c8:	9f000015 	stw	fp,0(r19)
    12cc:	9d000115 	stw	r20,4(r19)
    12d0:	dc800e15 	stw	r18,56(sp)
    12d4:	dc400d15 	stw	r17,52(sp)
    12d8:	ac7ff60e 	bge	r21,r17,12b4 <___vfprintf_internal_r+0xd74>
    12dc:	d9014f17 	ldw	r4,1340(sp)
    12e0:	b00b883a 	mov	r5,r22
    12e4:	d9800c04 	addi	r6,sp,48
    12e8:	00004e80 	call	4e8 <__sprint_r>
    12ec:	103e4c1e 	bne	r2,zero,c20 <___vfprintf_internal_r+0x6e0>
    12f0:	dc800e17 	ldw	r18,56(sp)
    12f4:	dc400d17 	ldw	r17,52(sp)
    12f8:	dcc01904 	addi	r19,sp,100
    12fc:	003fee06 	br	12b8 <___vfprintf_internal_r+0xd78>
    1300:	07000074 	movhi	fp,1
    1304:	e733fc84 	addi	fp,fp,-12302
    1308:	9425883a 	add	r18,r18,r16
    130c:	8c400044 	addi	r17,r17,1
    1310:	008001c4 	movi	r2,7
    1314:	9f000015 	stw	fp,0(r19)
    1318:	9c000115 	stw	r16,4(r19)
    131c:	dc800e15 	stw	r18,56(sp)
    1320:	dc400d15 	stw	r17,52(sp)
    1324:	147e720e 	bge	r2,r17,cf0 <___vfprintf_internal_r+0x7b0>
    1328:	d9014f17 	ldw	r4,1340(sp)
    132c:	b00b883a 	mov	r5,r22
    1330:	d9800c04 	addi	r6,sp,48
    1334:	00004e80 	call	4e8 <__sprint_r>
    1338:	103e391e 	bne	r2,zero,c20 <___vfprintf_internal_r+0x6e0>
    133c:	dc800e17 	ldw	r18,56(sp)
    1340:	dc400d17 	ldw	r17,52(sp)
    1344:	dcc01904 	addi	r19,sp,100
    1348:	003e6a06 	br	cf4 <___vfprintf_internal_r+0x7b4>
    134c:	d9014f17 	ldw	r4,1340(sp)
    1350:	b00b883a 	mov	r5,r22
    1354:	d9800c04 	addi	r6,sp,48
    1358:	d9c15115 	stw	r7,1348(sp)
    135c:	00004e80 	call	4e8 <__sprint_r>
    1360:	d9c15117 	ldw	r7,1348(sp)
    1364:	103e2e1e 	bne	r2,zero,c20 <___vfprintf_internal_r+0x6e0>
    1368:	dc800e17 	ldw	r18,56(sp)
    136c:	dc400d17 	ldw	r17,52(sp)
    1370:	dd401904 	addi	r21,sp,100
    1374:	003dba06 	br	a60 <___vfprintf_internal_r+0x520>
    1378:	d9014f17 	ldw	r4,1340(sp)
    137c:	b00b883a 	mov	r5,r22
    1380:	d9800c04 	addi	r6,sp,48
    1384:	00004e80 	call	4e8 <__sprint_r>
    1388:	103e251e 	bne	r2,zero,c20 <___vfprintf_internal_r+0x6e0>
    138c:	dc800e17 	ldw	r18,56(sp)
    1390:	dc400d17 	ldw	r17,52(sp)
    1394:	dcc01904 	addi	r19,sp,100
    1398:	003e4206 	br	ca4 <___vfprintf_internal_r+0x764>
    139c:	d9014f17 	ldw	r4,1340(sp)
    13a0:	b00b883a 	mov	r5,r22
    13a4:	d9800c04 	addi	r6,sp,48
    13a8:	00004e80 	call	4e8 <__sprint_r>
    13ac:	103e1c1e 	bne	r2,zero,c20 <___vfprintf_internal_r+0x6e0>
    13b0:	dc800e17 	ldw	r18,56(sp)
    13b4:	dc400d17 	ldw	r17,52(sp)
    13b8:	d8c01904 	addi	r3,sp,100
    13bc:	003e2e06 	br	c78 <___vfprintf_internal_r+0x738>
    13c0:	d9414c17 	ldw	r5,1328(sp)
    13c4:	2880004c 	andi	r2,r5,1
    13c8:	1005003a 	cmpeq	r2,r2,zero
    13cc:	103dda1e 	bne	r2,zero,b38 <___vfprintf_internal_r+0x5f8>
    13d0:	003e9f06 	br	e50 <___vfprintf_internal_r+0x910>
    13d4:	d8c14117 	ldw	r3,1284(sp)
    13d8:	9125883a 	add	r18,r18,r4
    13dc:	8c400044 	addi	r17,r17,1
    13e0:	008001c4 	movi	r2,7
    13e4:	a8c00015 	stw	r3,0(r21)
    13e8:	a9000115 	stw	r4,4(r21)
    13ec:	dc800e15 	stw	r18,56(sp)
    13f0:	dc400d15 	stw	r17,52(sp)
    13f4:	14426616 	blt	r2,r17,1d90 <___vfprintf_internal_r+0x1850>
    13f8:	a8c00204 	addi	r3,r21,8
    13fc:	d9414917 	ldw	r5,1316(sp)
    1400:	00800044 	movi	r2,1
    1404:	94800044 	addi	r18,r18,1
    1408:	8c400044 	addi	r17,r17,1
    140c:	18800115 	stw	r2,4(r3)
    1410:	008001c4 	movi	r2,7
    1414:	19400015 	stw	r5,0(r3)
    1418:	dc800e15 	stw	r18,56(sp)
    141c:	dc400d15 	stw	r17,52(sp)
    1420:	2021883a 	mov	r16,r4
    1424:	14425016 	blt	r2,r17,1d68 <___vfprintf_internal_r+0x1828>
    1428:	19400204 	addi	r5,r3,8
    142c:	d9814717 	ldw	r6,1308(sp)
    1430:	8c400044 	addi	r17,r17,1
    1434:	dc400d15 	stw	r17,52(sp)
    1438:	3107c83a 	sub	r3,r6,r4
    143c:	d9014117 	ldw	r4,1284(sp)
    1440:	90e5883a 	add	r18,r18,r3
    1444:	28c00115 	stw	r3,4(r5)
    1448:	8105883a 	add	r2,r16,r4
    144c:	28800015 	stw	r2,0(r5)
    1450:	008001c4 	movi	r2,7
    1454:	dc800e15 	stw	r18,56(sp)
    1458:	147f1d16 	blt	r2,r17,10d0 <___vfprintf_internal_r+0xb90>
    145c:	28c00204 	addi	r3,r5,8
    1460:	003db506 	br	b38 <___vfprintf_internal_r+0x5f8>
    1464:	3c000017 	ldw	r16,0(r7)
    1468:	3c400117 	ldw	r17,4(r7)
    146c:	39800204 	addi	r6,r7,8
    1470:	01000044 	movi	r4,1
    1474:	d9814015 	stw	r6,1280(sp)
    1478:	d8000405 	stb	zero,16(sp)
    147c:	003ebe06 	br	f78 <___vfprintf_internal_r+0xa38>
    1480:	3c000017 	ldw	r16,0(r7)
    1484:	3c400117 	ldw	r17,4(r7)
    1488:	38800204 	addi	r2,r7,8
    148c:	d8814015 	stw	r2,1280(sp)
    1490:	003eb706 	br	f70 <___vfprintf_internal_r+0xa30>
    1494:	3c000017 	ldw	r16,0(r7)
    1498:	3c400117 	ldw	r17,4(r7)
    149c:	39000204 	addi	r4,r7,8
    14a0:	d9014015 	stw	r4,1280(sp)
    14a4:	0009883a 	mov	r4,zero
    14a8:	d8000405 	stb	zero,16(sp)
    14ac:	003eb206 	br	f78 <___vfprintf_internal_r+0xa38>
    14b0:	38c00017 	ldw	r3,0(r7)
    14b4:	39c00104 	addi	r7,r7,4
    14b8:	d8c14a15 	stw	r3,1320(sp)
    14bc:	1800d10e 	bge	r3,zero,1804 <___vfprintf_internal_r+0x12c4>
    14c0:	00c7c83a 	sub	r3,zero,r3
    14c4:	d8c14a15 	stw	r3,1320(sp)
    14c8:	d9014c17 	ldw	r4,1328(sp)
    14cc:	b8c00007 	ldb	r3,0(r23)
    14d0:	21000114 	ori	r4,r4,4
    14d4:	d9014c15 	stw	r4,1328(sp)
    14d8:	003c9806 	br	73c <___vfprintf_internal_r+0x1fc>
    14dc:	d9814c17 	ldw	r6,1328(sp)
    14e0:	3080080c 	andi	r2,r6,32
    14e4:	1001f026 	beq	r2,zero,1ca8 <___vfprintf_internal_r+0x1768>
    14e8:	d9014b17 	ldw	r4,1324(sp)
    14ec:	38800017 	ldw	r2,0(r7)
    14f0:	39c00104 	addi	r7,r7,4
    14f4:	d9c14015 	stw	r7,1280(sp)
    14f8:	2007d7fa 	srai	r3,r4,31
    14fc:	d9c14017 	ldw	r7,1280(sp)
    1500:	11000015 	stw	r4,0(r2)
    1504:	10c00115 	stw	r3,4(r2)
    1508:	003c6906 	br	6b0 <___vfprintf_internal_r+0x170>
    150c:	b8c00007 	ldb	r3,0(r23)
    1510:	00801b04 	movi	r2,108
    1514:	18824f26 	beq	r3,r2,1e54 <___vfprintf_internal_r+0x1914>
    1518:	d9414c17 	ldw	r5,1328(sp)
    151c:	29400414 	ori	r5,r5,16
    1520:	d9414c15 	stw	r5,1328(sp)
    1524:	003c8506 	br	73c <___vfprintf_internal_r+0x1fc>
    1528:	d9814c17 	ldw	r6,1328(sp)
    152c:	b8c00007 	ldb	r3,0(r23)
    1530:	31800814 	ori	r6,r6,32
    1534:	d9814c15 	stw	r6,1328(sp)
    1538:	003c8006 	br	73c <___vfprintf_internal_r+0x1fc>
    153c:	d8814c17 	ldw	r2,1328(sp)
    1540:	3c000017 	ldw	r16,0(r7)
    1544:	00c01e04 	movi	r3,120
    1548:	10800094 	ori	r2,r2,2
    154c:	d8814c15 	stw	r2,1328(sp)
    1550:	39c00104 	addi	r7,r7,4
    1554:	01400074 	movhi	r5,1
    1558:	2973e504 	addi	r5,r5,-12396
    155c:	00800c04 	movi	r2,48
    1560:	0023883a 	mov	r17,zero
    1564:	01000084 	movi	r4,2
    1568:	d9c14015 	stw	r7,1280(sp)
    156c:	d8c14d15 	stw	r3,1332(sp)
    1570:	d9414415 	stw	r5,1296(sp)
    1574:	d8800445 	stb	r2,17(sp)
    1578:	d8c00485 	stb	r3,18(sp)
    157c:	d8000405 	stb	zero,16(sp)
    1580:	003e7d06 	br	f78 <___vfprintf_internal_r+0xa38>
    1584:	d8814c17 	ldw	r2,1328(sp)
    1588:	b8c00007 	ldb	r3,0(r23)
    158c:	10801014 	ori	r2,r2,64
    1590:	d8814c15 	stw	r2,1328(sp)
    1594:	003c6906 	br	73c <___vfprintf_internal_r+0x1fc>
    1598:	d9414c17 	ldw	r5,1328(sp)
    159c:	2880020c 	andi	r2,r5,8
    15a0:	1001df26 	beq	r2,zero,1d20 <___vfprintf_internal_r+0x17e0>
    15a4:	39800017 	ldw	r6,0(r7)
    15a8:	38800204 	addi	r2,r7,8
    15ac:	d8814015 	stw	r2,1280(sp)
    15b0:	d9814215 	stw	r6,1288(sp)
    15b4:	39c00117 	ldw	r7,4(r7)
    15b8:	d9c14315 	stw	r7,1292(sp)
    15bc:	d9014217 	ldw	r4,1288(sp)
    15c0:	d9414317 	ldw	r5,1292(sp)
    15c4:	0006ee00 	call	6ee0 <__isinfd>
    15c8:	10021726 	beq	r2,zero,1e28 <___vfprintf_internal_r+0x18e8>
    15cc:	d9014217 	ldw	r4,1288(sp)
    15d0:	d9414317 	ldw	r5,1292(sp)
    15d4:	000d883a 	mov	r6,zero
    15d8:	000f883a 	mov	r7,zero
    15dc:	0008f280 	call	8f28 <__ltdf2>
    15e0:	1002ca16 	blt	r2,zero,210c <___vfprintf_internal_r+0x1bcc>
    15e4:	d9414d17 	ldw	r5,1332(sp)
    15e8:	008011c4 	movi	r2,71
    15ec:	11420a16 	blt	r2,r5,1e18 <___vfprintf_internal_r+0x18d8>
    15f0:	01800074 	movhi	r6,1
    15f4:	31b3ea04 	addi	r6,r6,-12376
    15f8:	d9814115 	stw	r6,1284(sp)
    15fc:	d9014c17 	ldw	r4,1328(sp)
    1600:	00c000c4 	movi	r3,3
    1604:	00bfdfc4 	movi	r2,-129
    1608:	2088703a 	and	r4,r4,r2
    160c:	180f883a 	mov	r7,r3
    1610:	d8c14515 	stw	r3,1300(sp)
    1614:	d9014c15 	stw	r4,1328(sp)
    1618:	d8014615 	stw	zero,1304(sp)
    161c:	003e6a06 	br	fc8 <___vfprintf_internal_r+0xa88>
    1620:	38800017 	ldw	r2,0(r7)
    1624:	00c00044 	movi	r3,1
    1628:	39c00104 	addi	r7,r7,4
    162c:	d9c14015 	stw	r7,1280(sp)
    1630:	d9000f04 	addi	r4,sp,60
    1634:	180f883a 	mov	r7,r3
    1638:	d8c14515 	stw	r3,1300(sp)
    163c:	d9014115 	stw	r4,1284(sp)
    1640:	d8800f05 	stb	r2,60(sp)
    1644:	d8000405 	stb	zero,16(sp)
    1648:	003cac06 	br	8fc <___vfprintf_internal_r+0x3bc>
    164c:	01400074 	movhi	r5,1
    1650:	2973f004 	addi	r5,r5,-12352
    1654:	d9414415 	stw	r5,1296(sp)
    1658:	d9814c17 	ldw	r6,1328(sp)
    165c:	3080080c 	andi	r2,r6,32
    1660:	1000f926 	beq	r2,zero,1a48 <___vfprintf_internal_r+0x1508>
    1664:	3c000017 	ldw	r16,0(r7)
    1668:	3c400117 	ldw	r17,4(r7)
    166c:	38800204 	addi	r2,r7,8
    1670:	d8814015 	stw	r2,1280(sp)
    1674:	d9414c17 	ldw	r5,1328(sp)
    1678:	2880004c 	andi	r2,r5,1
    167c:	1005003a 	cmpeq	r2,r2,zero
    1680:	1000b31e 	bne	r2,zero,1950 <___vfprintf_internal_r+0x1410>
    1684:	8444b03a 	or	r2,r16,r17
    1688:	1000b126 	beq	r2,zero,1950 <___vfprintf_internal_r+0x1410>
    168c:	d9814d17 	ldw	r6,1332(sp)
    1690:	29400094 	ori	r5,r5,2
    1694:	00800c04 	movi	r2,48
    1698:	01000084 	movi	r4,2
    169c:	d9414c15 	stw	r5,1328(sp)
    16a0:	d8800445 	stb	r2,17(sp)
    16a4:	d9800485 	stb	r6,18(sp)
    16a8:	d8000405 	stb	zero,16(sp)
    16ac:	003e3206 	br	f78 <___vfprintf_internal_r+0xa38>
    16b0:	01800074 	movhi	r6,1
    16b4:	31b3e504 	addi	r6,r6,-12396
    16b8:	d9814415 	stw	r6,1296(sp)
    16bc:	003fe606 	br	1658 <___vfprintf_internal_r+0x1118>
    16c0:	00800ac4 	movi	r2,43
    16c4:	d8800405 	stb	r2,16(sp)
    16c8:	b8c00007 	ldb	r3,0(r23)
    16cc:	003c1b06 	br	73c <___vfprintf_internal_r+0x1fc>
    16d0:	d8814c17 	ldw	r2,1328(sp)
    16d4:	b8c00007 	ldb	r3,0(r23)
    16d8:	10800054 	ori	r2,r2,1
    16dc:	d8814c15 	stw	r2,1328(sp)
    16e0:	003c1606 	br	73c <___vfprintf_internal_r+0x1fc>
    16e4:	d8800407 	ldb	r2,16(sp)
    16e8:	1000461e 	bne	r2,zero,1804 <___vfprintf_internal_r+0x12c4>
    16ec:	00800804 	movi	r2,32
    16f0:	d8800405 	stb	r2,16(sp)
    16f4:	b8c00007 	ldb	r3,0(r23)
    16f8:	003c1006 	br	73c <___vfprintf_internal_r+0x1fc>
    16fc:	d9814c17 	ldw	r6,1328(sp)
    1700:	b8c00007 	ldb	r3,0(r23)
    1704:	31800214 	ori	r6,r6,8
    1708:	d9814c15 	stw	r6,1328(sp)
    170c:	003c0b06 	br	73c <___vfprintf_internal_r+0x1fc>
    1710:	0007883a 	mov	r3,zero
    1714:	01000244 	movi	r4,9
    1718:	188002a4 	muli	r2,r3,10
    171c:	b8c00007 	ldb	r3,0(r23)
    1720:	d9814d17 	ldw	r6,1332(sp)
    1724:	bdc00044 	addi	r23,r23,1
    1728:	d8c14d15 	stw	r3,1332(sp)
    172c:	d9414d17 	ldw	r5,1332(sp)
    1730:	3085883a 	add	r2,r6,r2
    1734:	10fff404 	addi	r3,r2,-48
    1738:	28bff404 	addi	r2,r5,-48
    173c:	20bff62e 	bgeu	r4,r2,1718 <___vfprintf_internal_r+0x11d8>
    1740:	d8c14a15 	stw	r3,1320(sp)
    1744:	003bff06 	br	744 <___vfprintf_internal_r+0x204>
    1748:	d9414c17 	ldw	r5,1328(sp)
    174c:	b8c00007 	ldb	r3,0(r23)
    1750:	29402014 	ori	r5,r5,128
    1754:	d9414c15 	stw	r5,1328(sp)
    1758:	003bf806 	br	73c <___vfprintf_internal_r+0x1fc>
    175c:	b8c00007 	ldb	r3,0(r23)
    1760:	00800a84 	movi	r2,42
    1764:	bdc00044 	addi	r23,r23,1
    1768:	18831526 	beq	r3,r2,23c0 <___vfprintf_internal_r+0x1e80>
    176c:	d8c14d15 	stw	r3,1332(sp)
    1770:	18bff404 	addi	r2,r3,-48
    1774:	00c00244 	movi	r3,9
    1778:	18827836 	bltu	r3,r2,215c <___vfprintf_internal_r+0x1c1c>
    177c:	000d883a 	mov	r6,zero
    1780:	308002a4 	muli	r2,r6,10
    1784:	b9800007 	ldb	r6,0(r23)
    1788:	d9414d17 	ldw	r5,1332(sp)
    178c:	bdc00044 	addi	r23,r23,1
    1790:	d9814d15 	stw	r6,1332(sp)
    1794:	d9014d17 	ldw	r4,1332(sp)
    1798:	1145883a 	add	r2,r2,r5
    179c:	11bff404 	addi	r6,r2,-48
    17a0:	20bff404 	addi	r2,r4,-48
    17a4:	18bff62e 	bgeu	r3,r2,1780 <___vfprintf_internal_r+0x1240>
    17a8:	3027883a 	mov	r19,r6
    17ac:	303be50e 	bge	r6,zero,744 <___vfprintf_internal_r+0x204>
    17b0:	04ffffc4 	movi	r19,-1
    17b4:	003be306 	br	744 <___vfprintf_internal_r+0x204>
    17b8:	d8000405 	stb	zero,16(sp)
    17bc:	39800017 	ldw	r6,0(r7)
    17c0:	39c00104 	addi	r7,r7,4
    17c4:	d9c14015 	stw	r7,1280(sp)
    17c8:	d9814115 	stw	r6,1284(sp)
    17cc:	3001c926 	beq	r6,zero,1ef4 <___vfprintf_internal_r+0x19b4>
    17d0:	98000e16 	blt	r19,zero,180c <___vfprintf_internal_r+0x12cc>
    17d4:	d9014117 	ldw	r4,1284(sp)
    17d8:	000b883a 	mov	r5,zero
    17dc:	980d883a 	mov	r6,r19
    17e0:	00055fc0 	call	55fc <memchr>
    17e4:	10025926 	beq	r2,zero,214c <___vfprintf_internal_r+0x1c0c>
    17e8:	d8c14117 	ldw	r3,1284(sp)
    17ec:	10cfc83a 	sub	r7,r2,r3
    17f0:	99c19e16 	blt	r19,r7,1e6c <___vfprintf_internal_r+0x192c>
    17f4:	d9c14515 	stw	r7,1300(sp)
    17f8:	38000916 	blt	r7,zero,1820 <___vfprintf_internal_r+0x12e0>
    17fc:	d8014615 	stw	zero,1304(sp)
    1800:	003df106 	br	fc8 <___vfprintf_internal_r+0xa88>
    1804:	b8c00007 	ldb	r3,0(r23)
    1808:	003bcc06 	br	73c <___vfprintf_internal_r+0x1fc>
    180c:	d9014117 	ldw	r4,1284(sp)
    1810:	00004740 	call	474 <strlen>
    1814:	d8814515 	stw	r2,1300(sp)
    1818:	100f883a 	mov	r7,r2
    181c:	103ff70e 	bge	r2,zero,17fc <___vfprintf_internal_r+0x12bc>
    1820:	d8014515 	stw	zero,1300(sp)
    1824:	d8014615 	stw	zero,1304(sp)
    1828:	003de706 	br	fc8 <___vfprintf_internal_r+0xa88>
    182c:	20c03fcc 	andi	r3,r4,255
    1830:	00800044 	movi	r2,1
    1834:	18802d26 	beq	r3,r2,18ec <___vfprintf_internal_r+0x13ac>
    1838:	18800e36 	bltu	r3,r2,1874 <___vfprintf_internal_r+0x1334>
    183c:	00800084 	movi	r2,2
    1840:	1880fa26 	beq	r3,r2,1c2c <___vfprintf_internal_r+0x16ec>
    1844:	01000074 	movhi	r4,1
    1848:	2133f504 	addi	r4,r4,-12332
    184c:	00004740 	call	474 <strlen>
    1850:	100f883a 	mov	r7,r2
    1854:	dcc14515 	stw	r19,1300(sp)
    1858:	9880010e 	bge	r19,r2,1860 <___vfprintf_internal_r+0x1320>
    185c:	d8814515 	stw	r2,1300(sp)
    1860:	00800074 	movhi	r2,1
    1864:	10b3f504 	addi	r2,r2,-12332
    1868:	dcc14615 	stw	r19,1304(sp)
    186c:	d8814115 	stw	r2,1284(sp)
    1870:	003dd506 	br	fc8 <___vfprintf_internal_r+0xa88>
    1874:	d9401904 	addi	r5,sp,100
    1878:	dd000f04 	addi	r20,sp,60
    187c:	d9414115 	stw	r5,1284(sp)
    1880:	880a977a 	slli	r5,r17,29
    1884:	d9814117 	ldw	r6,1284(sp)
    1888:	8004d0fa 	srli	r2,r16,3
    188c:	8806d0fa 	srli	r3,r17,3
    1890:	810001cc 	andi	r4,r16,7
    1894:	2884b03a 	or	r2,r5,r2
    1898:	31bfffc4 	addi	r6,r6,-1
    189c:	21000c04 	addi	r4,r4,48
    18a0:	d9814115 	stw	r6,1284(sp)
    18a4:	10cab03a 	or	r5,r2,r3
    18a8:	31000005 	stb	r4,0(r6)
    18ac:	1021883a 	mov	r16,r2
    18b0:	1823883a 	mov	r17,r3
    18b4:	283ff21e 	bne	r5,zero,1880 <___vfprintf_internal_r+0x1340>
    18b8:	d8c14c17 	ldw	r3,1328(sp)
    18bc:	1880004c 	andi	r2,r3,1
    18c0:	1005003a 	cmpeq	r2,r2,zero
    18c4:	103db91e 	bne	r2,zero,fac <___vfprintf_internal_r+0xa6c>
    18c8:	20803fcc 	andi	r2,r4,255
    18cc:	1080201c 	xori	r2,r2,128
    18d0:	10bfe004 	addi	r2,r2,-128
    18d4:	00c00c04 	movi	r3,48
    18d8:	10fdb426 	beq	r2,r3,fac <___vfprintf_internal_r+0xa6c>
    18dc:	31bfffc4 	addi	r6,r6,-1
    18e0:	d9814115 	stw	r6,1284(sp)
    18e4:	30c00005 	stb	r3,0(r6)
    18e8:	003db006 	br	fac <___vfprintf_internal_r+0xa6c>
    18ec:	88800068 	cmpgeui	r2,r17,1
    18f0:	10002c1e 	bne	r2,zero,19a4 <___vfprintf_internal_r+0x1464>
    18f4:	8800021e 	bne	r17,zero,1900 <___vfprintf_internal_r+0x13c0>
    18f8:	00800244 	movi	r2,9
    18fc:	14002936 	bltu	r2,r16,19a4 <___vfprintf_internal_r+0x1464>
    1900:	d90018c4 	addi	r4,sp,99
    1904:	dd000f04 	addi	r20,sp,60
    1908:	d9014115 	stw	r4,1284(sp)
    190c:	d9014117 	ldw	r4,1284(sp)
    1910:	80800c04 	addi	r2,r16,48
    1914:	20800005 	stb	r2,0(r4)
    1918:	003da406 	br	fac <___vfprintf_internal_r+0xa6c>
    191c:	dc400d17 	ldw	r17,52(sp)
    1920:	07000074 	movhi	fp,1
    1924:	e733fc84 	addi	fp,fp,-12302
    1928:	9425883a 	add	r18,r18,r16
    192c:	8c400044 	addi	r17,r17,1
    1930:	008001c4 	movi	r2,7
    1934:	1f000015 	stw	fp,0(r3)
    1938:	1c000115 	stw	r16,4(r3)
    193c:	dc800e15 	stw	r18,56(sp)
    1940:	dc400d15 	stw	r17,52(sp)
    1944:	147de216 	blt	r2,r17,10d0 <___vfprintf_internal_r+0xb90>
    1948:	18c00204 	addi	r3,r3,8
    194c:	003c7a06 	br	b38 <___vfprintf_internal_r+0x5f8>
    1950:	01000084 	movi	r4,2
    1954:	d8000405 	stb	zero,16(sp)
    1958:	003d8706 	br	f78 <___vfprintf_internal_r+0xa38>
    195c:	d9814c17 	ldw	r6,1328(sp)
    1960:	30c4703a 	and	r2,r6,r3
    1964:	1005003a 	cmpeq	r2,r2,zero
    1968:	103cb926 	beq	r2,zero,c50 <___vfprintf_internal_r+0x710>
    196c:	d9014117 	ldw	r4,1284(sp)
    1970:	94800044 	addi	r18,r18,1
    1974:	8c400044 	addi	r17,r17,1
    1978:	008001c4 	movi	r2,7
    197c:	a9000015 	stw	r4,0(r21)
    1980:	a8c00115 	stw	r3,4(r21)
    1984:	dc800e15 	stw	r18,56(sp)
    1988:	dc400d15 	stw	r17,52(sp)
    198c:	147e6616 	blt	r2,r17,1328 <___vfprintf_internal_r+0xde8>
    1990:	acc00204 	addi	r19,r21,8
    1994:	003cd706 	br	cf4 <___vfprintf_internal_r+0x7b4>
    1998:	07000074 	movhi	fp,1
    199c:	e733fc84 	addi	fp,fp,-12302
    19a0:	003c4f06 	br	ae0 <___vfprintf_internal_r+0x5a0>
    19a4:	dd000f04 	addi	r20,sp,60
    19a8:	dc801904 	addi	r18,sp,100
    19ac:	8009883a 	mov	r4,r16
    19b0:	880b883a 	mov	r5,r17
    19b4:	01800284 	movi	r6,10
    19b8:	000f883a 	mov	r7,zero
    19bc:	0007c380 	call	7c38 <__umoddi3>
    19c0:	12000c04 	addi	r8,r2,48
    19c4:	94bfffc4 	addi	r18,r18,-1
    19c8:	8009883a 	mov	r4,r16
    19cc:	880b883a 	mov	r5,r17
    19d0:	01800284 	movi	r6,10
    19d4:	000f883a 	mov	r7,zero
    19d8:	92000005 	stb	r8,0(r18)
    19dc:	000765c0 	call	765c <__udivdi3>
    19e0:	1009883a 	mov	r4,r2
    19e4:	1021883a 	mov	r16,r2
    19e8:	18800068 	cmpgeui	r2,r3,1
    19ec:	1823883a 	mov	r17,r3
    19f0:	103fee1e 	bne	r2,zero,19ac <___vfprintf_internal_r+0x146c>
    19f4:	1800021e 	bne	r3,zero,1a00 <___vfprintf_internal_r+0x14c0>
    19f8:	00800244 	movi	r2,9
    19fc:	113feb36 	bltu	r2,r4,19ac <___vfprintf_internal_r+0x146c>
    1a00:	94bfffc4 	addi	r18,r18,-1
    1a04:	dc814115 	stw	r18,1284(sp)
    1a08:	003fc006 	br	190c <___vfprintf_internal_r+0x13cc>
    1a0c:	d9014c17 	ldw	r4,1328(sp)
    1a10:	2080004c 	andi	r2,r4,1
    1a14:	10009a1e 	bne	r2,zero,1c80 <___vfprintf_internal_r+0x1740>
    1a18:	d9401904 	addi	r5,sp,100
    1a1c:	dd000f04 	addi	r20,sp,60
    1a20:	d9414115 	stw	r5,1284(sp)
    1a24:	003d6106 	br	fac <___vfprintf_internal_r+0xa6c>
    1a28:	d9014f17 	ldw	r4,1340(sp)
    1a2c:	b00b883a 	mov	r5,r22
    1a30:	d9800c04 	addi	r6,sp,48
    1a34:	00004e80 	call	4e8 <__sprint_r>
    1a38:	103c791e 	bne	r2,zero,c20 <___vfprintf_internal_r+0x6e0>
    1a3c:	dc800e17 	ldw	r18,56(sp)
    1a40:	d8c01904 	addi	r3,sp,100
    1a44:	003cff06 	br	e44 <___vfprintf_internal_r+0x904>
    1a48:	d8c14c17 	ldw	r3,1328(sp)
    1a4c:	1880040c 	andi	r2,r3,16
    1a50:	1000711e 	bne	r2,zero,1c18 <___vfprintf_internal_r+0x16d8>
    1a54:	d9014c17 	ldw	r4,1328(sp)
    1a58:	2080100c 	andi	r2,r4,64
    1a5c:	10006e26 	beq	r2,zero,1c18 <___vfprintf_internal_r+0x16d8>
    1a60:	3c00000b 	ldhu	r16,0(r7)
    1a64:	0023883a 	mov	r17,zero
    1a68:	39c00104 	addi	r7,r7,4
    1a6c:	d9c14015 	stw	r7,1280(sp)
    1a70:	003f0006 	br	1674 <___vfprintf_internal_r+0x1134>
    1a74:	dc400d17 	ldw	r17,52(sp)
    1a78:	07000074 	movhi	fp,1
    1a7c:	e733fc84 	addi	fp,fp,-12302
    1a80:	9425883a 	add	r18,r18,r16
    1a84:	8c400044 	addi	r17,r17,1
    1a88:	008001c4 	movi	r2,7
    1a8c:	1f000015 	stw	fp,0(r3)
    1a90:	1c000115 	stw	r16,4(r3)
    1a94:	dc800e15 	stw	r18,56(sp)
    1a98:	dc400d15 	stw	r17,52(sp)
    1a9c:	147d7616 	blt	r2,r17,1078 <___vfprintf_internal_r+0xb38>
    1aa0:	18c00204 	addi	r3,r3,8
    1aa4:	003d7b06 	br	1094 <___vfprintf_internal_r+0xb54>
    1aa8:	dc800e17 	ldw	r18,56(sp)
    1aac:	dc400d17 	ldw	r17,52(sp)
    1ab0:	07000074 	movhi	fp,1
    1ab4:	e7340084 	addi	fp,fp,-12286
    1ab8:	003bc006 	br	9bc <___vfprintf_internal_r+0x47c>
    1abc:	d9014f17 	ldw	r4,1340(sp)
    1ac0:	b00b883a 	mov	r5,r22
    1ac4:	d9800c04 	addi	r6,sp,48
    1ac8:	00004e80 	call	4e8 <__sprint_r>
    1acc:	103c541e 	bne	r2,zero,c20 <___vfprintf_internal_r+0x6e0>
    1ad0:	dc800e17 	ldw	r18,56(sp)
    1ad4:	d8c01904 	addi	r3,sp,100
    1ad8:	003ce906 	br	e80 <___vfprintf_internal_r+0x940>
    1adc:	3c000017 	ldw	r16,0(r7)
    1ae0:	0009883a 	mov	r4,zero
    1ae4:	39c00104 	addi	r7,r7,4
    1ae8:	0023883a 	mov	r17,zero
    1aec:	d9c14015 	stw	r7,1280(sp)
    1af0:	d8000405 	stb	zero,16(sp)
    1af4:	003d2006 	br	f78 <___vfprintf_internal_r+0xa38>
    1af8:	38800017 	ldw	r2,0(r7)
    1afc:	39c00104 	addi	r7,r7,4
    1b00:	d9c14015 	stw	r7,1280(sp)
    1b04:	1023d7fa 	srai	r17,r2,31
    1b08:	1021883a 	mov	r16,r2
    1b0c:	003d1806 	br	f70 <___vfprintf_internal_r+0xa30>
    1b10:	3c000017 	ldw	r16,0(r7)
    1b14:	01000044 	movi	r4,1
    1b18:	39c00104 	addi	r7,r7,4
    1b1c:	0023883a 	mov	r17,zero
    1b20:	d9c14015 	stw	r7,1280(sp)
    1b24:	d8000405 	stb	zero,16(sp)
    1b28:	003d1306 	br	f78 <___vfprintf_internal_r+0xa38>
    1b2c:	00800074 	movhi	r2,1
    1b30:	10b3fc04 	addi	r2,r2,-12304
    1b34:	94800044 	addi	r18,r18,1
    1b38:	8c400044 	addi	r17,r17,1
    1b3c:	a8800015 	stw	r2,0(r21)
    1b40:	00c00044 	movi	r3,1
    1b44:	008001c4 	movi	r2,7
    1b48:	a8c00115 	stw	r3,4(r21)
    1b4c:	dc800e15 	stw	r18,56(sp)
    1b50:	dc400d15 	stw	r17,52(sp)
    1b54:	1440ca16 	blt	r2,r17,1e80 <___vfprintf_internal_r+0x1940>
    1b58:	a8c00204 	addi	r3,r21,8
    1b5c:	2000061e 	bne	r4,zero,1b78 <___vfprintf_internal_r+0x1638>
    1b60:	d9414717 	ldw	r5,1308(sp)
    1b64:	2800041e 	bne	r5,zero,1b78 <___vfprintf_internal_r+0x1638>
    1b68:	d9814c17 	ldw	r6,1328(sp)
    1b6c:	3080004c 	andi	r2,r6,1
    1b70:	1005003a 	cmpeq	r2,r2,zero
    1b74:	103bf01e 	bne	r2,zero,b38 <___vfprintf_internal_r+0x5f8>
    1b78:	00800044 	movi	r2,1
    1b7c:	dc400d17 	ldw	r17,52(sp)
    1b80:	18800115 	stw	r2,4(r3)
    1b84:	d8814917 	ldw	r2,1316(sp)
    1b88:	94800044 	addi	r18,r18,1
    1b8c:	8c400044 	addi	r17,r17,1
    1b90:	18800015 	stw	r2,0(r3)
    1b94:	008001c4 	movi	r2,7
    1b98:	dc800e15 	stw	r18,56(sp)
    1b9c:	dc400d15 	stw	r17,52(sp)
    1ba0:	1440ca16 	blt	r2,r17,1ecc <___vfprintf_internal_r+0x198c>
    1ba4:	18c00204 	addi	r3,r3,8
    1ba8:	0121c83a 	sub	r16,zero,r4
    1bac:	0400500e 	bge	zero,r16,1cf0 <___vfprintf_internal_r+0x17b0>
    1bb0:	00800404 	movi	r2,16
    1bb4:	1400800e 	bge	r2,r16,1db8 <___vfprintf_internal_r+0x1878>
    1bb8:	1027883a 	mov	r19,r2
    1bbc:	07000074 	movhi	fp,1
    1bc0:	e733fc84 	addi	fp,fp,-12302
    1bc4:	050001c4 	movi	r20,7
    1bc8:	00000306 	br	1bd8 <___vfprintf_internal_r+0x1698>
    1bcc:	18c00204 	addi	r3,r3,8
    1bd0:	843ffc04 	addi	r16,r16,-16
    1bd4:	9c007a0e 	bge	r19,r16,1dc0 <___vfprintf_internal_r+0x1880>
    1bd8:	94800404 	addi	r18,r18,16
    1bdc:	8c400044 	addi	r17,r17,1
    1be0:	1f000015 	stw	fp,0(r3)
    1be4:	1cc00115 	stw	r19,4(r3)
    1be8:	dc800e15 	stw	r18,56(sp)
    1bec:	dc400d15 	stw	r17,52(sp)
    1bf0:	a47ff60e 	bge	r20,r17,1bcc <___vfprintf_internal_r+0x168c>
    1bf4:	d9014f17 	ldw	r4,1340(sp)
    1bf8:	b00b883a 	mov	r5,r22
    1bfc:	d9800c04 	addi	r6,sp,48
    1c00:	00004e80 	call	4e8 <__sprint_r>
    1c04:	103c061e 	bne	r2,zero,c20 <___vfprintf_internal_r+0x6e0>
    1c08:	dc800e17 	ldw	r18,56(sp)
    1c0c:	dc400d17 	ldw	r17,52(sp)
    1c10:	d8c01904 	addi	r3,sp,100
    1c14:	003fee06 	br	1bd0 <___vfprintf_internal_r+0x1690>
    1c18:	3c000017 	ldw	r16,0(r7)
    1c1c:	0023883a 	mov	r17,zero
    1c20:	39c00104 	addi	r7,r7,4
    1c24:	d9c14015 	stw	r7,1280(sp)
    1c28:	003e9206 	br	1674 <___vfprintf_internal_r+0x1134>
    1c2c:	d9401904 	addi	r5,sp,100
    1c30:	dd000f04 	addi	r20,sp,60
    1c34:	d9414115 	stw	r5,1284(sp)
    1c38:	d9814417 	ldw	r6,1296(sp)
    1c3c:	880a973a 	slli	r5,r17,28
    1c40:	8004d13a 	srli	r2,r16,4
    1c44:	810003cc 	andi	r4,r16,15
    1c48:	3109883a 	add	r4,r6,r4
    1c4c:	2884b03a 	or	r2,r5,r2
    1c50:	21400003 	ldbu	r5,0(r4)
    1c54:	d9014117 	ldw	r4,1284(sp)
    1c58:	8806d13a 	srli	r3,r17,4
    1c5c:	1021883a 	mov	r16,r2
    1c60:	213fffc4 	addi	r4,r4,-1
    1c64:	d9014115 	stw	r4,1284(sp)
    1c68:	d9814117 	ldw	r6,1284(sp)
    1c6c:	10c8b03a 	or	r4,r2,r3
    1c70:	1823883a 	mov	r17,r3
    1c74:	31400005 	stb	r5,0(r6)
    1c78:	203fef1e 	bne	r4,zero,1c38 <___vfprintf_internal_r+0x16f8>
    1c7c:	003ccb06 	br	fac <___vfprintf_internal_r+0xa6c>
    1c80:	00800c04 	movi	r2,48
    1c84:	d98018c4 	addi	r6,sp,99
    1c88:	dd000f04 	addi	r20,sp,60
    1c8c:	d88018c5 	stb	r2,99(sp)
    1c90:	d9814115 	stw	r6,1284(sp)
    1c94:	003cc506 	br	fac <___vfprintf_internal_r+0xa6c>
    1c98:	dc400d17 	ldw	r17,52(sp)
    1c9c:	07000074 	movhi	fp,1
    1ca0:	e7340084 	addi	fp,fp,-12286
    1ca4:	003bc706 	br	bc4 <___vfprintf_internal_r+0x684>
    1ca8:	d9414c17 	ldw	r5,1328(sp)
    1cac:	2880040c 	andi	r2,r5,16
    1cb0:	10007c26 	beq	r2,zero,1ea4 <___vfprintf_internal_r+0x1964>
    1cb4:	38800017 	ldw	r2,0(r7)
    1cb8:	39c00104 	addi	r7,r7,4
    1cbc:	d9c14015 	stw	r7,1280(sp)
    1cc0:	d9814b17 	ldw	r6,1324(sp)
    1cc4:	d9c14017 	ldw	r7,1280(sp)
    1cc8:	11800015 	stw	r6,0(r2)
    1ccc:	003a7806 	br	6b0 <___vfprintf_internal_r+0x170>
    1cd0:	d9014f17 	ldw	r4,1340(sp)
    1cd4:	b00b883a 	mov	r5,r22
    1cd8:	d9800c04 	addi	r6,sp,48
    1cdc:	00004e80 	call	4e8 <__sprint_r>
    1ce0:	103bcf1e 	bne	r2,zero,c20 <___vfprintf_internal_r+0x6e0>
    1ce4:	dc800e17 	ldw	r18,56(sp)
    1ce8:	dc400d17 	ldw	r17,52(sp)
    1cec:	d8c01904 	addi	r3,sp,100
    1cf0:	d9014717 	ldw	r4,1308(sp)
    1cf4:	d9414117 	ldw	r5,1284(sp)
    1cf8:	8c400044 	addi	r17,r17,1
    1cfc:	9125883a 	add	r18,r18,r4
    1d00:	008001c4 	movi	r2,7
    1d04:	19400015 	stw	r5,0(r3)
    1d08:	19000115 	stw	r4,4(r3)
    1d0c:	dc800e15 	stw	r18,56(sp)
    1d10:	dc400d15 	stw	r17,52(sp)
    1d14:	147cee16 	blt	r2,r17,10d0 <___vfprintf_internal_r+0xb90>
    1d18:	18c00204 	addi	r3,r3,8
    1d1c:	003b8606 	br	b38 <___vfprintf_internal_r+0x5f8>
    1d20:	38c00017 	ldw	r3,0(r7)
    1d24:	39000204 	addi	r4,r7,8
    1d28:	d9014015 	stw	r4,1280(sp)
    1d2c:	d8c14215 	stw	r3,1288(sp)
    1d30:	39c00117 	ldw	r7,4(r7)
    1d34:	d9c14315 	stw	r7,1292(sp)
    1d38:	003e2006 	br	15bc <___vfprintf_internal_r+0x107c>
    1d3c:	0005883a 	mov	r2,zero
    1d40:	1409c83a 	sub	r4,r2,r16
    1d44:	1105803a 	cmpltu	r2,r2,r4
    1d48:	044bc83a 	sub	r5,zero,r17
    1d4c:	2885c83a 	sub	r2,r5,r2
    1d50:	2021883a 	mov	r16,r4
    1d54:	1023883a 	mov	r17,r2
    1d58:	01000044 	movi	r4,1
    1d5c:	00800b44 	movi	r2,45
    1d60:	d8800405 	stb	r2,16(sp)
    1d64:	003c8406 	br	f78 <___vfprintf_internal_r+0xa38>
    1d68:	d9014f17 	ldw	r4,1340(sp)
    1d6c:	b00b883a 	mov	r5,r22
    1d70:	d9800c04 	addi	r6,sp,48
    1d74:	00004e80 	call	4e8 <__sprint_r>
    1d78:	103ba91e 	bne	r2,zero,c20 <___vfprintf_internal_r+0x6e0>
    1d7c:	dc800e17 	ldw	r18,56(sp)
    1d80:	dc400d17 	ldw	r17,52(sp)
    1d84:	d9000517 	ldw	r4,20(sp)
    1d88:	d9401904 	addi	r5,sp,100
    1d8c:	003da706 	br	142c <___vfprintf_internal_r+0xeec>
    1d90:	d9014f17 	ldw	r4,1340(sp)
    1d94:	b00b883a 	mov	r5,r22
    1d98:	d9800c04 	addi	r6,sp,48
    1d9c:	00004e80 	call	4e8 <__sprint_r>
    1da0:	103b9f1e 	bne	r2,zero,c20 <___vfprintf_internal_r+0x6e0>
    1da4:	dc800e17 	ldw	r18,56(sp)
    1da8:	dc400d17 	ldw	r17,52(sp)
    1dac:	d9000517 	ldw	r4,20(sp)
    1db0:	d8c01904 	addi	r3,sp,100
    1db4:	003d9106 	br	13fc <___vfprintf_internal_r+0xebc>
    1db8:	07000074 	movhi	fp,1
    1dbc:	e733fc84 	addi	fp,fp,-12302
    1dc0:	9425883a 	add	r18,r18,r16
    1dc4:	8c400044 	addi	r17,r17,1
    1dc8:	008001c4 	movi	r2,7
    1dcc:	1f000015 	stw	fp,0(r3)
    1dd0:	1c000115 	stw	r16,4(r3)
    1dd4:	dc800e15 	stw	r18,56(sp)
    1dd8:	dc400d15 	stw	r17,52(sp)
    1ddc:	147fbc16 	blt	r2,r17,1cd0 <___vfprintf_internal_r+0x1790>
    1de0:	18c00204 	addi	r3,r3,8
    1de4:	003fc206 	br	1cf0 <___vfprintf_internal_r+0x17b0>
    1de8:	d9014f17 	ldw	r4,1340(sp)
    1dec:	b00b883a 	mov	r5,r22
    1df0:	d9800c04 	addi	r6,sp,48
    1df4:	00004e80 	call	4e8 <__sprint_r>
    1df8:	103b891e 	bne	r2,zero,c20 <___vfprintf_internal_r+0x6e0>
    1dfc:	dc800e17 	ldw	r18,56(sp)
    1e00:	d9000517 	ldw	r4,20(sp)
    1e04:	d8c01904 	addi	r3,sp,100
    1e08:	003d0206 	br	1214 <___vfprintf_internal_r+0xcd4>
    1e0c:	07000074 	movhi	fp,1
    1e10:	e733fc84 	addi	fp,fp,-12302
    1e14:	003be406 	br	da8 <___vfprintf_internal_r+0x868>
    1e18:	00800074 	movhi	r2,1
    1e1c:	10b3eb04 	addi	r2,r2,-12372
    1e20:	d8814115 	stw	r2,1284(sp)
    1e24:	003df506 	br	15fc <___vfprintf_internal_r+0x10bc>
    1e28:	d9014217 	ldw	r4,1288(sp)
    1e2c:	d9414317 	ldw	r5,1292(sp)
    1e30:	0006f200 	call	6f20 <__isnand>
    1e34:	10003926 	beq	r2,zero,1f1c <___vfprintf_internal_r+0x19dc>
    1e38:	d9414d17 	ldw	r5,1332(sp)
    1e3c:	008011c4 	movi	r2,71
    1e40:	1140ce16 	blt	r2,r5,217c <___vfprintf_internal_r+0x1c3c>
    1e44:	01800074 	movhi	r6,1
    1e48:	31b3ec04 	addi	r6,r6,-12368
    1e4c:	d9814115 	stw	r6,1284(sp)
    1e50:	003dea06 	br	15fc <___vfprintf_internal_r+0x10bc>
    1e54:	d9014c17 	ldw	r4,1328(sp)
    1e58:	bdc00044 	addi	r23,r23,1
    1e5c:	b8c00007 	ldb	r3,0(r23)
    1e60:	21000814 	ori	r4,r4,32
    1e64:	d9014c15 	stw	r4,1328(sp)
    1e68:	003a3406 	br	73c <___vfprintf_internal_r+0x1fc>
    1e6c:	dcc14515 	stw	r19,1300(sp)
    1e70:	98011016 	blt	r19,zero,22b4 <___vfprintf_internal_r+0x1d74>
    1e74:	980f883a 	mov	r7,r19
    1e78:	d8014615 	stw	zero,1304(sp)
    1e7c:	003c5206 	br	fc8 <___vfprintf_internal_r+0xa88>
    1e80:	d9014f17 	ldw	r4,1340(sp)
    1e84:	b00b883a 	mov	r5,r22
    1e88:	d9800c04 	addi	r6,sp,48
    1e8c:	00004e80 	call	4e8 <__sprint_r>
    1e90:	103b631e 	bne	r2,zero,c20 <___vfprintf_internal_r+0x6e0>
    1e94:	dc800e17 	ldw	r18,56(sp)
    1e98:	d9000517 	ldw	r4,20(sp)
    1e9c:	d8c01904 	addi	r3,sp,100
    1ea0:	003f2e06 	br	1b5c <___vfprintf_internal_r+0x161c>
    1ea4:	d8c14c17 	ldw	r3,1328(sp)
    1ea8:	1880100c 	andi	r2,r3,64
    1eac:	1000a026 	beq	r2,zero,2130 <___vfprintf_internal_r+0x1bf0>
    1eb0:	38800017 	ldw	r2,0(r7)
    1eb4:	39c00104 	addi	r7,r7,4
    1eb8:	d9c14015 	stw	r7,1280(sp)
    1ebc:	d9014b17 	ldw	r4,1324(sp)
    1ec0:	d9c14017 	ldw	r7,1280(sp)
    1ec4:	1100000d 	sth	r4,0(r2)
    1ec8:	0039f906 	br	6b0 <___vfprintf_internal_r+0x170>
    1ecc:	d9014f17 	ldw	r4,1340(sp)
    1ed0:	b00b883a 	mov	r5,r22
    1ed4:	d9800c04 	addi	r6,sp,48
    1ed8:	00004e80 	call	4e8 <__sprint_r>
    1edc:	103b501e 	bne	r2,zero,c20 <___vfprintf_internal_r+0x6e0>
    1ee0:	dc800e17 	ldw	r18,56(sp)
    1ee4:	dc400d17 	ldw	r17,52(sp)
    1ee8:	d9000517 	ldw	r4,20(sp)
    1eec:	d8c01904 	addi	r3,sp,100
    1ef0:	003f2d06 	br	1ba8 <___vfprintf_internal_r+0x1668>
    1ef4:	00800184 	movi	r2,6
    1ef8:	14c09a36 	bltu	r2,r19,2164 <___vfprintf_internal_r+0x1c24>
    1efc:	dcc14515 	stw	r19,1300(sp)
    1f00:	9800010e 	bge	r19,zero,1f08 <___vfprintf_internal_r+0x19c8>
    1f04:	d8014515 	stw	zero,1300(sp)
    1f08:	00800074 	movhi	r2,1
    1f0c:	10b3ee04 	addi	r2,r2,-12360
    1f10:	980f883a 	mov	r7,r19
    1f14:	d8814115 	stw	r2,1284(sp)
    1f18:	003a7806 	br	8fc <___vfprintf_internal_r+0x3bc>
    1f1c:	00bfffc4 	movi	r2,-1
    1f20:	9880e226 	beq	r19,r2,22ac <___vfprintf_internal_r+0x1d6c>
    1f24:	d9414d17 	ldw	r5,1332(sp)
    1f28:	008019c4 	movi	r2,103
    1f2c:	2880dc26 	beq	r5,r2,22a0 <___vfprintf_internal_r+0x1d60>
    1f30:	008011c4 	movi	r2,71
    1f34:	2880da26 	beq	r5,r2,22a0 <___vfprintf_internal_r+0x1d60>
    1f38:	d9414c17 	ldw	r5,1328(sp)
    1f3c:	d9014317 	ldw	r4,1292(sp)
    1f40:	d9814217 	ldw	r6,1288(sp)
    1f44:	29404014 	ori	r5,r5,256
    1f48:	d9414c15 	stw	r5,1328(sp)
    1f4c:	2000cc16 	blt	r4,zero,2280 <___vfprintf_internal_r+0x1d40>
    1f50:	3021883a 	mov	r16,r6
    1f54:	2023883a 	mov	r17,r4
    1f58:	0039883a 	mov	fp,zero
    1f5c:	d9414d17 	ldw	r5,1332(sp)
    1f60:	00801984 	movi	r2,102
    1f64:	2880b726 	beq	r5,r2,2244 <___vfprintf_internal_r+0x1d04>
    1f68:	00801184 	movi	r2,70
    1f6c:	2880b526 	beq	r5,r2,2244 <___vfprintf_internal_r+0x1d04>
    1f70:	00801944 	movi	r2,101
    1f74:	2880c826 	beq	r5,r2,2298 <___vfprintf_internal_r+0x1d58>
    1f78:	00801144 	movi	r2,69
    1f7c:	2880c626 	beq	r5,r2,2298 <___vfprintf_internal_r+0x1d58>
    1f80:	9829883a 	mov	r20,r19
    1f84:	d9014f17 	ldw	r4,1340(sp)
    1f88:	d8800504 	addi	r2,sp,20
    1f8c:	880d883a 	mov	r6,r17
    1f90:	d8800115 	stw	r2,4(sp)
    1f94:	d8c00604 	addi	r3,sp,24
    1f98:	d8800704 	addi	r2,sp,28
    1f9c:	800b883a 	mov	r5,r16
    1fa0:	01c00084 	movi	r7,2
    1fa4:	d8c00215 	stw	r3,8(sp)
    1fa8:	d8800315 	stw	r2,12(sp)
    1fac:	dd000015 	stw	r20,0(sp)
    1fb0:	00027640 	call	2764 <_dtoa_r>
    1fb4:	d9814d17 	ldw	r6,1332(sp)
    1fb8:	d8814115 	stw	r2,1284(sp)
    1fbc:	008019c4 	movi	r2,103
    1fc0:	30809526 	beq	r6,r2,2218 <___vfprintf_internal_r+0x1cd8>
    1fc4:	d8c14d17 	ldw	r3,1332(sp)
    1fc8:	008011c4 	movi	r2,71
    1fcc:	18809226 	beq	r3,r2,2218 <___vfprintf_internal_r+0x1cd8>
    1fd0:	d9414117 	ldw	r5,1284(sp)
    1fd4:	d9814d17 	ldw	r6,1332(sp)
    1fd8:	00801984 	movi	r2,102
    1fdc:	2d25883a 	add	r18,r5,r20
    1fe0:	30808626 	beq	r6,r2,21fc <___vfprintf_internal_r+0x1cbc>
    1fe4:	00801184 	movi	r2,70
    1fe8:	30808426 	beq	r6,r2,21fc <___vfprintf_internal_r+0x1cbc>
    1fec:	000d883a 	mov	r6,zero
    1ff0:	000f883a 	mov	r7,zero
    1ff4:	880b883a 	mov	r5,r17
    1ff8:	8009883a 	mov	r4,r16
    1ffc:	0008d080 	call	8d08 <__eqdf2>
    2000:	1000751e 	bne	r2,zero,21d8 <___vfprintf_internal_r+0x1c98>
    2004:	9005883a 	mov	r2,r18
    2008:	dc800715 	stw	r18,28(sp)
    200c:	d9014117 	ldw	r4,1284(sp)
    2010:	d9414d17 	ldw	r5,1332(sp)
    2014:	00c019c4 	movi	r3,103
    2018:	1125c83a 	sub	r18,r2,r4
    201c:	28c06826 	beq	r5,r3,21c0 <___vfprintf_internal_r+0x1c80>
    2020:	008011c4 	movi	r2,71
    2024:	28806626 	beq	r5,r2,21c0 <___vfprintf_internal_r+0x1c80>
    2028:	d9000517 	ldw	r4,20(sp)
    202c:	d8c14d17 	ldw	r3,1332(sp)
    2030:	00801944 	movi	r2,101
    2034:	10c05516 	blt	r2,r3,218c <___vfprintf_internal_r+0x1c4c>
    2038:	213fffc4 	addi	r4,r4,-1
    203c:	d9000515 	stw	r4,20(sp)
    2040:	d8c00805 	stb	r3,32(sp)
    2044:	2021883a 	mov	r16,r4
    2048:	2000c116 	blt	r4,zero,2350 <___vfprintf_internal_r+0x1e10>
    204c:	00800ac4 	movi	r2,43
    2050:	d8800845 	stb	r2,33(sp)
    2054:	00800244 	movi	r2,9
    2058:	1400af0e 	bge	r2,r16,2318 <___vfprintf_internal_r+0x1dd8>
    205c:	1027883a 	mov	r19,r2
    2060:	dc400b84 	addi	r17,sp,46
    2064:	8009883a 	mov	r4,r16
    2068:	01400284 	movi	r5,10
    206c:	00093f00 	call	93f0 <__modsi3>
    2070:	10800c04 	addi	r2,r2,48
    2074:	8c7fffc4 	addi	r17,r17,-1
    2078:	8009883a 	mov	r4,r16
    207c:	01400284 	movi	r5,10
    2080:	88800005 	stb	r2,0(r17)
    2084:	00093900 	call	9390 <__divsi3>
    2088:	1021883a 	mov	r16,r2
    208c:	98bff516 	blt	r19,r2,2064 <___vfprintf_internal_r+0x1b24>
    2090:	10c00c04 	addi	r3,r2,48
    2094:	d88009c4 	addi	r2,sp,39
    2098:	108001c4 	addi	r2,r2,7
    209c:	897fffc4 	addi	r5,r17,-1
    20a0:	88ffffc5 	stb	r3,-1(r17)
    20a4:	2880a72e 	bgeu	r5,r2,2344 <___vfprintf_internal_r+0x1e04>
    20a8:	1009883a 	mov	r4,r2
    20ac:	d9800804 	addi	r6,sp,32
    20b0:	d8c00884 	addi	r3,sp,34
    20b4:	28800003 	ldbu	r2,0(r5)
    20b8:	29400044 	addi	r5,r5,1
    20bc:	18800005 	stb	r2,0(r3)
    20c0:	18c00044 	addi	r3,r3,1
    20c4:	293ffb36 	bltu	r5,r4,20b4 <___vfprintf_internal_r+0x1b74>
    20c8:	1987c83a 	sub	r3,r3,r6
    20cc:	00800044 	movi	r2,1
    20d0:	d8c14815 	stw	r3,1312(sp)
    20d4:	90cf883a 	add	r7,r18,r3
    20d8:	1480960e 	bge	r2,r18,2334 <___vfprintf_internal_r+0x1df4>
    20dc:	39c00044 	addi	r7,r7,1
    20e0:	d9c14515 	stw	r7,1300(sp)
    20e4:	38003416 	blt	r7,zero,21b8 <___vfprintf_internal_r+0x1c78>
    20e8:	e0803fcc 	andi	r2,fp,255
    20ec:	1080201c 	xori	r2,r2,128
    20f0:	10bfe004 	addi	r2,r2,-128
    20f4:	10004e26 	beq	r2,zero,2230 <___vfprintf_internal_r+0x1cf0>
    20f8:	00800b44 	movi	r2,45
    20fc:	dc814715 	stw	r18,1308(sp)
    2100:	d8014615 	stw	zero,1304(sp)
    2104:	d8800405 	stb	r2,16(sp)
    2108:	003bb106 	br	fd0 <___vfprintf_internal_r+0xa90>
    210c:	00800b44 	movi	r2,45
    2110:	d8800405 	stb	r2,16(sp)
    2114:	003d3306 	br	15e4 <___vfprintf_internal_r+0x10a4>
    2118:	d9014f17 	ldw	r4,1340(sp)
    211c:	b00b883a 	mov	r5,r22
    2120:	d9800c04 	addi	r6,sp,48
    2124:	00004e80 	call	4e8 <__sprint_r>
    2128:	103abd1e 	bne	r2,zero,c20 <___vfprintf_internal_r+0x6e0>
    212c:	003abb06 	br	c1c <___vfprintf_internal_r+0x6dc>
    2130:	38800017 	ldw	r2,0(r7)
    2134:	39c00104 	addi	r7,r7,4
    2138:	d9c14015 	stw	r7,1280(sp)
    213c:	d9414b17 	ldw	r5,1324(sp)
    2140:	d9c14017 	ldw	r7,1280(sp)
    2144:	11400015 	stw	r5,0(r2)
    2148:	00395906 	br	6b0 <___vfprintf_internal_r+0x170>
    214c:	980f883a 	mov	r7,r19
    2150:	dcc14515 	stw	r19,1300(sp)
    2154:	d8014615 	stw	zero,1304(sp)
    2158:	003b9b06 	br	fc8 <___vfprintf_internal_r+0xa88>
    215c:	0027883a 	mov	r19,zero
    2160:	00397806 	br	744 <___vfprintf_internal_r+0x204>
    2164:	00c00074 	movhi	r3,1
    2168:	18f3ee04 	addi	r3,r3,-12360
    216c:	100f883a 	mov	r7,r2
    2170:	d8814515 	stw	r2,1300(sp)
    2174:	d8c14115 	stw	r3,1284(sp)
    2178:	0039e006 	br	8fc <___vfprintf_internal_r+0x3bc>
    217c:	00800074 	movhi	r2,1
    2180:	10b3ed04 	addi	r2,r2,-12364
    2184:	d8814115 	stw	r2,1284(sp)
    2188:	003d1c06 	br	15fc <___vfprintf_internal_r+0x10bc>
    218c:	d9414d17 	ldw	r5,1332(sp)
    2190:	00801984 	movi	r2,102
    2194:	28804926 	beq	r5,r2,22bc <___vfprintf_internal_r+0x1d7c>
    2198:	200f883a 	mov	r7,r4
    219c:	24805716 	blt	r4,r18,22fc <___vfprintf_internal_r+0x1dbc>
    21a0:	d9414c17 	ldw	r5,1328(sp)
    21a4:	2880004c 	andi	r2,r5,1
    21a8:	10000126 	beq	r2,zero,21b0 <___vfprintf_internal_r+0x1c70>
    21ac:	21c00044 	addi	r7,r4,1
    21b0:	d9c14515 	stw	r7,1300(sp)
    21b4:	383fcc0e 	bge	r7,zero,20e8 <___vfprintf_internal_r+0x1ba8>
    21b8:	d8014515 	stw	zero,1300(sp)
    21bc:	003fca06 	br	20e8 <___vfprintf_internal_r+0x1ba8>
    21c0:	d9000517 	ldw	r4,20(sp)
    21c4:	00bfff04 	movi	r2,-4
    21c8:	1100480e 	bge	r2,r4,22ec <___vfprintf_internal_r+0x1dac>
    21cc:	99004716 	blt	r19,r4,22ec <___vfprintf_internal_r+0x1dac>
    21d0:	d8c14d15 	stw	r3,1332(sp)
    21d4:	003ff006 	br	2198 <___vfprintf_internal_r+0x1c58>
    21d8:	d8800717 	ldw	r2,28(sp)
    21dc:	14bf8b2e 	bgeu	r2,r18,200c <___vfprintf_internal_r+0x1acc>
    21e0:	9007883a 	mov	r3,r18
    21e4:	01000c04 	movi	r4,48
    21e8:	11000005 	stb	r4,0(r2)
    21ec:	10800044 	addi	r2,r2,1
    21f0:	d8800715 	stw	r2,28(sp)
    21f4:	18bffc1e 	bne	r3,r2,21e8 <___vfprintf_internal_r+0x1ca8>
    21f8:	003f8406 	br	200c <___vfprintf_internal_r+0x1acc>
    21fc:	d8814117 	ldw	r2,1284(sp)
    2200:	10c00007 	ldb	r3,0(r2)
    2204:	00800c04 	movi	r2,48
    2208:	18805b26 	beq	r3,r2,2378 <___vfprintf_internal_r+0x1e38>
    220c:	d9000517 	ldw	r4,20(sp)
    2210:	9125883a 	add	r18,r18,r4
    2214:	003f7506 	br	1fec <___vfprintf_internal_r+0x1aac>
    2218:	d9014c17 	ldw	r4,1328(sp)
    221c:	2080004c 	andi	r2,r4,1
    2220:	1005003a 	cmpeq	r2,r2,zero
    2224:	103f6a26 	beq	r2,zero,1fd0 <___vfprintf_internal_r+0x1a90>
    2228:	d8800717 	ldw	r2,28(sp)
    222c:	003f7706 	br	200c <___vfprintf_internal_r+0x1acc>
    2230:	d9c14515 	stw	r7,1300(sp)
    2234:	38004d16 	blt	r7,zero,236c <___vfprintf_internal_r+0x1e2c>
    2238:	dc814715 	stw	r18,1308(sp)
    223c:	d8014615 	stw	zero,1304(sp)
    2240:	003b6106 	br	fc8 <___vfprintf_internal_r+0xa88>
    2244:	d9014f17 	ldw	r4,1340(sp)
    2248:	d8800504 	addi	r2,sp,20
    224c:	d8800115 	stw	r2,4(sp)
    2250:	d8c00604 	addi	r3,sp,24
    2254:	d8800704 	addi	r2,sp,28
    2258:	800b883a 	mov	r5,r16
    225c:	880d883a 	mov	r6,r17
    2260:	01c000c4 	movi	r7,3
    2264:	d8c00215 	stw	r3,8(sp)
    2268:	d8800315 	stw	r2,12(sp)
    226c:	dcc00015 	stw	r19,0(sp)
    2270:	9829883a 	mov	r20,r19
    2274:	00027640 	call	2764 <_dtoa_r>
    2278:	d8814115 	stw	r2,1284(sp)
    227c:	003f5106 	br	1fc4 <___vfprintf_internal_r+0x1a84>
    2280:	d8c14217 	ldw	r3,1288(sp)
    2284:	d9014317 	ldw	r4,1292(sp)
    2288:	07000b44 	movi	fp,45
    228c:	1821883a 	mov	r16,r3
    2290:	2460003c 	xorhi	r17,r4,32768
    2294:	003f3106 	br	1f5c <___vfprintf_internal_r+0x1a1c>
    2298:	9d000044 	addi	r20,r19,1
    229c:	003f3906 	br	1f84 <___vfprintf_internal_r+0x1a44>
    22a0:	983f251e 	bne	r19,zero,1f38 <___vfprintf_internal_r+0x19f8>
    22a4:	04c00044 	movi	r19,1
    22a8:	003f2306 	br	1f38 <___vfprintf_internal_r+0x19f8>
    22ac:	04c00184 	movi	r19,6
    22b0:	003f2106 	br	1f38 <___vfprintf_internal_r+0x19f8>
    22b4:	d8014515 	stw	zero,1300(sp)
    22b8:	003eee06 	br	1e74 <___vfprintf_internal_r+0x1934>
    22bc:	200f883a 	mov	r7,r4
    22c0:	0100370e 	bge	zero,r4,23a0 <___vfprintf_internal_r+0x1e60>
    22c4:	9800031e 	bne	r19,zero,22d4 <___vfprintf_internal_r+0x1d94>
    22c8:	d9814c17 	ldw	r6,1328(sp)
    22cc:	3080004c 	andi	r2,r6,1
    22d0:	103fb726 	beq	r2,zero,21b0 <___vfprintf_internal_r+0x1c70>
    22d4:	20800044 	addi	r2,r4,1
    22d8:	98a7883a 	add	r19,r19,r2
    22dc:	dcc14515 	stw	r19,1300(sp)
    22e0:	980f883a 	mov	r7,r19
    22e4:	983f800e 	bge	r19,zero,20e8 <___vfprintf_internal_r+0x1ba8>
    22e8:	003fb306 	br	21b8 <___vfprintf_internal_r+0x1c78>
    22ec:	d9814d17 	ldw	r6,1332(sp)
    22f0:	31bfff84 	addi	r6,r6,-2
    22f4:	d9814d15 	stw	r6,1332(sp)
    22f8:	003f4c06 	br	202c <___vfprintf_internal_r+0x1aec>
    22fc:	0100180e 	bge	zero,r4,2360 <___vfprintf_internal_r+0x1e20>
    2300:	00800044 	movi	r2,1
    2304:	1485883a 	add	r2,r2,r18
    2308:	d8814515 	stw	r2,1300(sp)
    230c:	100f883a 	mov	r7,r2
    2310:	103f750e 	bge	r2,zero,20e8 <___vfprintf_internal_r+0x1ba8>
    2314:	003fa806 	br	21b8 <___vfprintf_internal_r+0x1c78>
    2318:	80c00c04 	addi	r3,r16,48
    231c:	00800c04 	movi	r2,48
    2320:	d8c008c5 	stb	r3,35(sp)
    2324:	d9800804 	addi	r6,sp,32
    2328:	d8c00904 	addi	r3,sp,36
    232c:	d8800885 	stb	r2,34(sp)
    2330:	003f6506 	br	20c8 <___vfprintf_internal_r+0x1b88>
    2334:	d9014c17 	ldw	r4,1328(sp)
    2338:	2084703a 	and	r2,r4,r2
    233c:	103f9c26 	beq	r2,zero,21b0 <___vfprintf_internal_r+0x1c70>
    2340:	003f6606 	br	20dc <___vfprintf_internal_r+0x1b9c>
    2344:	d9800804 	addi	r6,sp,32
    2348:	d8c00884 	addi	r3,sp,34
    234c:	003f5e06 	br	20c8 <___vfprintf_internal_r+0x1b88>
    2350:	00800b44 	movi	r2,45
    2354:	0121c83a 	sub	r16,zero,r4
    2358:	d8800845 	stb	r2,33(sp)
    235c:	003f3d06 	br	2054 <___vfprintf_internal_r+0x1b14>
    2360:	00800084 	movi	r2,2
    2364:	1105c83a 	sub	r2,r2,r4
    2368:	003fe606 	br	2304 <___vfprintf_internal_r+0x1dc4>
    236c:	d8014515 	stw	zero,1300(sp)
    2370:	dc814715 	stw	r18,1308(sp)
    2374:	003fb106 	br	223c <___vfprintf_internal_r+0x1cfc>
    2378:	000d883a 	mov	r6,zero
    237c:	000f883a 	mov	r7,zero
    2380:	8009883a 	mov	r4,r16
    2384:	880b883a 	mov	r5,r17
    2388:	0008d900 	call	8d90 <__nedf2>
    238c:	103f9f26 	beq	r2,zero,220c <___vfprintf_internal_r+0x1ccc>
    2390:	00800044 	movi	r2,1
    2394:	1509c83a 	sub	r4,r2,r20
    2398:	d9000515 	stw	r4,20(sp)
    239c:	003f9b06 	br	220c <___vfprintf_internal_r+0x1ccc>
    23a0:	98000d1e 	bne	r19,zero,23d8 <___vfprintf_internal_r+0x1e98>
    23a4:	d8c14c17 	ldw	r3,1328(sp)
    23a8:	1880004c 	andi	r2,r3,1
    23ac:	10000a1e 	bne	r2,zero,23d8 <___vfprintf_internal_r+0x1e98>
    23b0:	01000044 	movi	r4,1
    23b4:	200f883a 	mov	r7,r4
    23b8:	d9014515 	stw	r4,1300(sp)
    23bc:	003f4a06 	br	20e8 <___vfprintf_internal_r+0x1ba8>
    23c0:	3cc00017 	ldw	r19,0(r7)
    23c4:	39c00104 	addi	r7,r7,4
    23c8:	983d0e0e 	bge	r19,zero,1804 <___vfprintf_internal_r+0x12c4>
    23cc:	b8c00007 	ldb	r3,0(r23)
    23d0:	04ffffc4 	movi	r19,-1
    23d4:	0038d906 	br	73c <___vfprintf_internal_r+0x1fc>
    23d8:	9cc00084 	addi	r19,r19,2
    23dc:	dcc14515 	stw	r19,1300(sp)
    23e0:	980f883a 	mov	r7,r19
    23e4:	983f400e 	bge	r19,zero,20e8 <___vfprintf_internal_r+0x1ba8>
    23e8:	003f7306 	br	21b8 <___vfprintf_internal_r+0x1c78>

000023ec <__vfprintf_internal>:
    23ec:	00800074 	movhi	r2,1
    23f0:	10bba604 	addi	r2,r2,-4456
    23f4:	2013883a 	mov	r9,r4
    23f8:	11000017 	ldw	r4,0(r2)
    23fc:	2805883a 	mov	r2,r5
    2400:	300f883a 	mov	r7,r6
    2404:	480b883a 	mov	r5,r9
    2408:	100d883a 	mov	r6,r2
    240c:	00005401 	jmpi	540 <___vfprintf_internal_r>

00002410 <__swsetup_r>:
    2410:	00800074 	movhi	r2,1
    2414:	10bba604 	addi	r2,r2,-4456
    2418:	10c00017 	ldw	r3,0(r2)
    241c:	defffd04 	addi	sp,sp,-12
    2420:	dc400115 	stw	r17,4(sp)
    2424:	dc000015 	stw	r16,0(sp)
    2428:	dfc00215 	stw	ra,8(sp)
    242c:	2023883a 	mov	r17,r4
    2430:	2821883a 	mov	r16,r5
    2434:	18000226 	beq	r3,zero,2440 <__swsetup_r+0x30>
    2438:	18800e17 	ldw	r2,56(r3)
    243c:	10001f26 	beq	r2,zero,24bc <__swsetup_r+0xac>
    2440:	8100030b 	ldhu	r4,12(r16)
    2444:	2080020c 	andi	r2,r4,8
    2448:	10002826 	beq	r2,zero,24ec <__swsetup_r+0xdc>
    244c:	81400417 	ldw	r5,16(r16)
    2450:	28001d26 	beq	r5,zero,24c8 <__swsetup_r+0xb8>
    2454:	2080004c 	andi	r2,r4,1
    2458:	1005003a 	cmpeq	r2,r2,zero
    245c:	10000b26 	beq	r2,zero,248c <__swsetup_r+0x7c>
    2460:	2080008c 	andi	r2,r4,2
    2464:	10001226 	beq	r2,zero,24b0 <__swsetup_r+0xa0>
    2468:	0005883a 	mov	r2,zero
    246c:	80800215 	stw	r2,8(r16)
    2470:	28000b26 	beq	r5,zero,24a0 <__swsetup_r+0x90>
    2474:	0005883a 	mov	r2,zero
    2478:	dfc00217 	ldw	ra,8(sp)
    247c:	dc400117 	ldw	r17,4(sp)
    2480:	dc000017 	ldw	r16,0(sp)
    2484:	dec00304 	addi	sp,sp,12
    2488:	f800283a 	ret
    248c:	80800517 	ldw	r2,20(r16)
    2490:	80000215 	stw	zero,8(r16)
    2494:	0085c83a 	sub	r2,zero,r2
    2498:	80800615 	stw	r2,24(r16)
    249c:	283ff51e 	bne	r5,zero,2474 <__swsetup_r+0x64>
    24a0:	2080200c 	andi	r2,r4,128
    24a4:	103ff326 	beq	r2,zero,2474 <__swsetup_r+0x64>
    24a8:	00bfffc4 	movi	r2,-1
    24ac:	003ff206 	br	2478 <__swsetup_r+0x68>
    24b0:	80800517 	ldw	r2,20(r16)
    24b4:	80800215 	stw	r2,8(r16)
    24b8:	003fed06 	br	2470 <__swsetup_r+0x60>
    24bc:	1809883a 	mov	r4,r3
    24c0:	0003fb00 	call	3fb0 <__sinit>
    24c4:	003fde06 	br	2440 <__swsetup_r+0x30>
    24c8:	20c0a00c 	andi	r3,r4,640
    24cc:	00808004 	movi	r2,512
    24d0:	18bfe026 	beq	r3,r2,2454 <__swsetup_r+0x44>
    24d4:	8809883a 	mov	r4,r17
    24d8:	800b883a 	mov	r5,r16
    24dc:	0004d280 	call	4d28 <__smakebuf_r>
    24e0:	8100030b 	ldhu	r4,12(r16)
    24e4:	81400417 	ldw	r5,16(r16)
    24e8:	003fda06 	br	2454 <__swsetup_r+0x44>
    24ec:	2080040c 	andi	r2,r4,16
    24f0:	103fed26 	beq	r2,zero,24a8 <__swsetup_r+0x98>
    24f4:	2080010c 	andi	r2,r4,4
    24f8:	10001226 	beq	r2,zero,2544 <__swsetup_r+0x134>
    24fc:	81400c17 	ldw	r5,48(r16)
    2500:	28000526 	beq	r5,zero,2518 <__swsetup_r+0x108>
    2504:	80801004 	addi	r2,r16,64
    2508:	28800226 	beq	r5,r2,2514 <__swsetup_r+0x104>
    250c:	8809883a 	mov	r4,r17
    2510:	00043340 	call	4334 <_free_r>
    2514:	80000c15 	stw	zero,48(r16)
    2518:	8080030b 	ldhu	r2,12(r16)
    251c:	81400417 	ldw	r5,16(r16)
    2520:	80000115 	stw	zero,4(r16)
    2524:	10bff6cc 	andi	r2,r2,65499
    2528:	8080030d 	sth	r2,12(r16)
    252c:	81400015 	stw	r5,0(r16)
    2530:	8080030b 	ldhu	r2,12(r16)
    2534:	10800214 	ori	r2,r2,8
    2538:	113fffcc 	andi	r4,r2,65535
    253c:	8080030d 	sth	r2,12(r16)
    2540:	003fc306 	br	2450 <__swsetup_r+0x40>
    2544:	81400417 	ldw	r5,16(r16)
    2548:	003ff906 	br	2530 <__swsetup_r+0x120>

0000254c <quorem>:
    254c:	28c00417 	ldw	r3,16(r5)
    2550:	20800417 	ldw	r2,16(r4)
    2554:	defff604 	addi	sp,sp,-40
    2558:	ddc00715 	stw	r23,28(sp)
    255c:	dd400515 	stw	r21,20(sp)
    2560:	dfc00915 	stw	ra,36(sp)
    2564:	df000815 	stw	fp,32(sp)
    2568:	dd800615 	stw	r22,24(sp)
    256c:	dd000415 	stw	r20,16(sp)
    2570:	dcc00315 	stw	r19,12(sp)
    2574:	dc800215 	stw	r18,8(sp)
    2578:	dc400115 	stw	r17,4(sp)
    257c:	dc000015 	stw	r16,0(sp)
    2580:	202f883a 	mov	r23,r4
    2584:	282b883a 	mov	r21,r5
    2588:	10c07416 	blt	r2,r3,275c <quorem+0x210>
    258c:	1c7fffc4 	addi	r17,r3,-1
    2590:	8c45883a 	add	r2,r17,r17
    2594:	1085883a 	add	r2,r2,r2
    2598:	2c000504 	addi	r16,r5,20
    259c:	24c00504 	addi	r19,r4,20
    25a0:	14ed883a 	add	r22,r2,r19
    25a4:	80a5883a 	add	r18,r16,r2
    25a8:	b7000017 	ldw	fp,0(r22)
    25ac:	91400017 	ldw	r5,0(r18)
    25b0:	e009883a 	mov	r4,fp
    25b4:	29400044 	addi	r5,r5,1
    25b8:	00094500 	call	9450 <__udivsi3>
    25bc:	1029883a 	mov	r20,r2
    25c0:	10003c1e 	bne	r2,zero,26b4 <quorem+0x168>
    25c4:	a80b883a 	mov	r5,r21
    25c8:	b809883a 	mov	r4,r23
    25cc:	0005a540 	call	5a54 <__mcmp>
    25d0:	10002b16 	blt	r2,zero,2680 <quorem+0x134>
    25d4:	a5000044 	addi	r20,r20,1
    25d8:	980f883a 	mov	r7,r19
    25dc:	0011883a 	mov	r8,zero
    25e0:	0009883a 	mov	r4,zero
    25e4:	81400017 	ldw	r5,0(r16)
    25e8:	38c00017 	ldw	r3,0(r7)
    25ec:	84000104 	addi	r16,r16,4
    25f0:	28bfffcc 	andi	r2,r5,65535
    25f4:	2085883a 	add	r2,r4,r2
    25f8:	11bfffcc 	andi	r6,r2,65535
    25fc:	193fffcc 	andi	r4,r3,65535
    2600:	1004d43a 	srli	r2,r2,16
    2604:	280ad43a 	srli	r5,r5,16
    2608:	2189c83a 	sub	r4,r4,r6
    260c:	2209883a 	add	r4,r4,r8
    2610:	1806d43a 	srli	r3,r3,16
    2614:	288b883a 	add	r5,r5,r2
    2618:	200dd43a 	srai	r6,r4,16
    261c:	28bfffcc 	andi	r2,r5,65535
    2620:	1887c83a 	sub	r3,r3,r2
    2624:	1987883a 	add	r3,r3,r6
    2628:	3900000d 	sth	r4,0(r7)
    262c:	38c0008d 	sth	r3,2(r7)
    2630:	2808d43a 	srli	r4,r5,16
    2634:	39c00104 	addi	r7,r7,4
    2638:	1811d43a 	srai	r8,r3,16
    263c:	943fe92e 	bgeu	r18,r16,25e4 <quorem+0x98>
    2640:	8c45883a 	add	r2,r17,r17
    2644:	1085883a 	add	r2,r2,r2
    2648:	9885883a 	add	r2,r19,r2
    264c:	10c00017 	ldw	r3,0(r2)
    2650:	18000b1e 	bne	r3,zero,2680 <quorem+0x134>
    2654:	113fff04 	addi	r4,r2,-4
    2658:	9900082e 	bgeu	r19,r4,267c <quorem+0x130>
    265c:	10bfff17 	ldw	r2,-4(r2)
    2660:	10000326 	beq	r2,zero,2670 <quorem+0x124>
    2664:	00000506 	br	267c <quorem+0x130>
    2668:	20800017 	ldw	r2,0(r4)
    266c:	1000031e 	bne	r2,zero,267c <quorem+0x130>
    2670:	213fff04 	addi	r4,r4,-4
    2674:	8c7fffc4 	addi	r17,r17,-1
    2678:	993ffb36 	bltu	r19,r4,2668 <quorem+0x11c>
    267c:	bc400415 	stw	r17,16(r23)
    2680:	a005883a 	mov	r2,r20
    2684:	dfc00917 	ldw	ra,36(sp)
    2688:	df000817 	ldw	fp,32(sp)
    268c:	ddc00717 	ldw	r23,28(sp)
    2690:	dd800617 	ldw	r22,24(sp)
    2694:	dd400517 	ldw	r21,20(sp)
    2698:	dd000417 	ldw	r20,16(sp)
    269c:	dcc00317 	ldw	r19,12(sp)
    26a0:	dc800217 	ldw	r18,8(sp)
    26a4:	dc400117 	ldw	r17,4(sp)
    26a8:	dc000017 	ldw	r16,0(sp)
    26ac:	dec00a04 	addi	sp,sp,40
    26b0:	f800283a 	ret
    26b4:	980f883a 	mov	r7,r19
    26b8:	8011883a 	mov	r8,r16
    26bc:	0013883a 	mov	r9,zero
    26c0:	000d883a 	mov	r6,zero
    26c4:	40c00017 	ldw	r3,0(r8)
    26c8:	39000017 	ldw	r4,0(r7)
    26cc:	42000104 	addi	r8,r8,4
    26d0:	18bfffcc 	andi	r2,r3,65535
    26d4:	a085383a 	mul	r2,r20,r2
    26d8:	1806d43a 	srli	r3,r3,16
    26dc:	217fffcc 	andi	r5,r4,65535
    26e0:	3085883a 	add	r2,r6,r2
    26e4:	11bfffcc 	andi	r6,r2,65535
    26e8:	a0c7383a 	mul	r3,r20,r3
    26ec:	1004d43a 	srli	r2,r2,16
    26f0:	298bc83a 	sub	r5,r5,r6
    26f4:	2a4b883a 	add	r5,r5,r9
    26f8:	2008d43a 	srli	r4,r4,16
    26fc:	1887883a 	add	r3,r3,r2
    2700:	280dd43a 	srai	r6,r5,16
    2704:	18bfffcc 	andi	r2,r3,65535
    2708:	2089c83a 	sub	r4,r4,r2
    270c:	2189883a 	add	r4,r4,r6
    2710:	3900008d 	sth	r4,2(r7)
    2714:	3940000d 	sth	r5,0(r7)
    2718:	180cd43a 	srli	r6,r3,16
    271c:	39c00104 	addi	r7,r7,4
    2720:	2013d43a 	srai	r9,r4,16
    2724:	923fe72e 	bgeu	r18,r8,26c4 <quorem+0x178>
    2728:	e03fa61e 	bne	fp,zero,25c4 <quorem+0x78>
    272c:	b0ffff04 	addi	r3,r22,-4
    2730:	98c0082e 	bgeu	r19,r3,2754 <quorem+0x208>
    2734:	b0bfff17 	ldw	r2,-4(r22)
    2738:	10000326 	beq	r2,zero,2748 <quorem+0x1fc>
    273c:	00000506 	br	2754 <quorem+0x208>
    2740:	18800017 	ldw	r2,0(r3)
    2744:	1000031e 	bne	r2,zero,2754 <quorem+0x208>
    2748:	18ffff04 	addi	r3,r3,-4
    274c:	8c7fffc4 	addi	r17,r17,-1
    2750:	98fffb36 	bltu	r19,r3,2740 <quorem+0x1f4>
    2754:	bc400415 	stw	r17,16(r23)
    2758:	003f9a06 	br	25c4 <quorem+0x78>
    275c:	0005883a 	mov	r2,zero
    2760:	003fc806 	br	2684 <quorem+0x138>

00002764 <_dtoa_r>:
    2764:	22001017 	ldw	r8,64(r4)
    2768:	deffda04 	addi	sp,sp,-152
    276c:	dd402115 	stw	r21,132(sp)
    2770:	dd002015 	stw	r20,128(sp)
    2774:	dc801e15 	stw	r18,120(sp)
    2778:	dc401d15 	stw	r17,116(sp)
    277c:	dfc02515 	stw	ra,148(sp)
    2780:	df002415 	stw	fp,144(sp)
    2784:	ddc02315 	stw	r23,140(sp)
    2788:	dd802215 	stw	r22,136(sp)
    278c:	dcc01f15 	stw	r19,124(sp)
    2790:	dc001c15 	stw	r16,112(sp)
    2794:	d9001615 	stw	r4,88(sp)
    2798:	3023883a 	mov	r17,r6
    279c:	2829883a 	mov	r20,r5
    27a0:	d9c01715 	stw	r7,92(sp)
    27a4:	dc802817 	ldw	r18,160(sp)
    27a8:	302b883a 	mov	r21,r6
    27ac:	40000a26 	beq	r8,zero,27d8 <_dtoa_r+0x74>
    27b0:	20801117 	ldw	r2,68(r4)
    27b4:	400b883a 	mov	r5,r8
    27b8:	40800115 	stw	r2,4(r8)
    27bc:	20c01117 	ldw	r3,68(r4)
    27c0:	00800044 	movi	r2,1
    27c4:	10c4983a 	sll	r2,r2,r3
    27c8:	40800215 	stw	r2,8(r8)
    27cc:	00058f80 	call	58f8 <_Bfree>
    27d0:	d8c01617 	ldw	r3,88(sp)
    27d4:	18001015 	stw	zero,64(r3)
    27d8:	8800a316 	blt	r17,zero,2a68 <_dtoa_r+0x304>
    27dc:	90000015 	stw	zero,0(r18)
    27e0:	a8dffc2c 	andhi	r3,r21,32752
    27e4:	009ffc34 	movhi	r2,32752
    27e8:	18809126 	beq	r3,r2,2a30 <_dtoa_r+0x2cc>
    27ec:	000d883a 	mov	r6,zero
    27f0:	000f883a 	mov	r7,zero
    27f4:	a009883a 	mov	r4,r20
    27f8:	a80b883a 	mov	r5,r21
    27fc:	dd001215 	stw	r20,72(sp)
    2800:	dd401315 	stw	r21,76(sp)
    2804:	0008d900 	call	8d90 <__nedf2>
    2808:	1000171e 	bne	r2,zero,2868 <_dtoa_r+0x104>
    280c:	d9802717 	ldw	r6,156(sp)
    2810:	00800044 	movi	r2,1
    2814:	30800015 	stw	r2,0(r6)
    2818:	d8802917 	ldw	r2,164(sp)
    281c:	10029b26 	beq	r2,zero,328c <_dtoa_r+0xb28>
    2820:	d9002917 	ldw	r4,164(sp)
    2824:	00800074 	movhi	r2,1
    2828:	10b3fc44 	addi	r2,r2,-12303
    282c:	10ffffc4 	addi	r3,r2,-1
    2830:	20800015 	stw	r2,0(r4)
    2834:	1805883a 	mov	r2,r3
    2838:	dfc02517 	ldw	ra,148(sp)
    283c:	df002417 	ldw	fp,144(sp)
    2840:	ddc02317 	ldw	r23,140(sp)
    2844:	dd802217 	ldw	r22,136(sp)
    2848:	dd402117 	ldw	r21,132(sp)
    284c:	dd002017 	ldw	r20,128(sp)
    2850:	dcc01f17 	ldw	r19,124(sp)
    2854:	dc801e17 	ldw	r18,120(sp)
    2858:	dc401d17 	ldw	r17,116(sp)
    285c:	dc001c17 	ldw	r16,112(sp)
    2860:	dec02604 	addi	sp,sp,152
    2864:	f800283a 	ret
    2868:	d9001617 	ldw	r4,88(sp)
    286c:	d9401217 	ldw	r5,72(sp)
    2870:	d8800104 	addi	r2,sp,4
    2874:	a80d883a 	mov	r6,r21
    2878:	d9c00204 	addi	r7,sp,8
    287c:	d8800015 	stw	r2,0(sp)
    2880:	0005f340 	call	5f34 <__d2b>
    2884:	d8800715 	stw	r2,28(sp)
    2888:	a804d53a 	srli	r2,r21,20
    288c:	1101ffcc 	andi	r4,r2,2047
    2890:	20008626 	beq	r4,zero,2aac <_dtoa_r+0x348>
    2894:	d8c01217 	ldw	r3,72(sp)
    2898:	00800434 	movhi	r2,16
    289c:	10bfffc4 	addi	r2,r2,-1
    28a0:	ddc00117 	ldw	r23,4(sp)
    28a4:	a884703a 	and	r2,r21,r2
    28a8:	1811883a 	mov	r8,r3
    28ac:	124ffc34 	orhi	r9,r2,16368
    28b0:	25bf0044 	addi	r22,r4,-1023
    28b4:	d8000815 	stw	zero,32(sp)
    28b8:	0005883a 	mov	r2,zero
    28bc:	00cffe34 	movhi	r3,16376
    28c0:	480b883a 	mov	r5,r9
    28c4:	4009883a 	mov	r4,r8
    28c8:	180f883a 	mov	r7,r3
    28cc:	100d883a 	mov	r6,r2
    28d0:	00085f80 	call	85f8 <__subdf3>
    28d4:	0218dbf4 	movhi	r8,25455
    28d8:	4210d844 	addi	r8,r8,17249
    28dc:	024ff4f4 	movhi	r9,16339
    28e0:	4a61e9c4 	addi	r9,r9,-30809
    28e4:	480f883a 	mov	r7,r9
    28e8:	400d883a 	mov	r6,r8
    28ec:	180b883a 	mov	r5,r3
    28f0:	1009883a 	mov	r4,r2
    28f4:	00086ec0 	call	86ec <__muldf3>
    28f8:	0222d874 	movhi	r8,35681
    28fc:	42322cc4 	addi	r8,r8,-14157
    2900:	024ff1f4 	movhi	r9,16327
    2904:	4a628a04 	addi	r9,r9,-30168
    2908:	480f883a 	mov	r7,r9
    290c:	400d883a 	mov	r6,r8
    2910:	180b883a 	mov	r5,r3
    2914:	1009883a 	mov	r4,r2
    2918:	00086780 	call	8678 <__adddf3>
    291c:	b009883a 	mov	r4,r22
    2920:	1021883a 	mov	r16,r2
    2924:	1823883a 	mov	r17,r3
    2928:	0008fb00 	call	8fb0 <__floatsidf>
    292c:	021427f4 	movhi	r8,20639
    2930:	421e7ec4 	addi	r8,r8,31227
    2934:	024ff4f4 	movhi	r9,16339
    2938:	4a5104c4 	addi	r9,r9,17427
    293c:	480f883a 	mov	r7,r9
    2940:	400d883a 	mov	r6,r8
    2944:	180b883a 	mov	r5,r3
    2948:	1009883a 	mov	r4,r2
    294c:	00086ec0 	call	86ec <__muldf3>
    2950:	180f883a 	mov	r7,r3
    2954:	880b883a 	mov	r5,r17
    2958:	100d883a 	mov	r6,r2
    295c:	8009883a 	mov	r4,r16
    2960:	00086780 	call	8678 <__adddf3>
    2964:	1009883a 	mov	r4,r2
    2968:	180b883a 	mov	r5,r3
    296c:	1021883a 	mov	r16,r2
    2970:	1823883a 	mov	r17,r3
    2974:	00090a80 	call	90a8 <__fixdfsi>
    2978:	000d883a 	mov	r6,zero
    297c:	000f883a 	mov	r7,zero
    2980:	8009883a 	mov	r4,r16
    2984:	880b883a 	mov	r5,r17
    2988:	d8800d15 	stw	r2,52(sp)
    298c:	0008f280 	call	8f28 <__ltdf2>
    2990:	10031716 	blt	r2,zero,35f0 <_dtoa_r+0xe8c>
    2994:	d8c00d17 	ldw	r3,52(sp)
    2998:	00800584 	movi	r2,22
    299c:	10c1482e 	bgeu	r2,r3,2ec0 <_dtoa_r+0x75c>
    29a0:	01000044 	movi	r4,1
    29a4:	d9000c15 	stw	r4,48(sp)
    29a8:	bd85c83a 	sub	r2,r23,r22
    29ac:	11bfffc4 	addi	r6,r2,-1
    29b0:	30030b16 	blt	r6,zero,35e0 <_dtoa_r+0xe7c>
    29b4:	d9800a15 	stw	r6,40(sp)
    29b8:	d8001115 	stw	zero,68(sp)
    29bc:	d8c00d17 	ldw	r3,52(sp)
    29c0:	1802ff16 	blt	r3,zero,35c0 <_dtoa_r+0xe5c>
    29c4:	d9000a17 	ldw	r4,40(sp)
    29c8:	d8c00915 	stw	r3,36(sp)
    29cc:	d8001015 	stw	zero,64(sp)
    29d0:	20c9883a 	add	r4,r4,r3
    29d4:	d9000a15 	stw	r4,40(sp)
    29d8:	d9001717 	ldw	r4,92(sp)
    29dc:	00800244 	movi	r2,9
    29e0:	11004636 	bltu	r2,r4,2afc <_dtoa_r+0x398>
    29e4:	00800144 	movi	r2,5
    29e8:	11020416 	blt	r2,r4,31fc <_dtoa_r+0xa98>
    29ec:	04400044 	movi	r17,1
    29f0:	d8c01717 	ldw	r3,92(sp)
    29f4:	00800144 	movi	r2,5
    29f8:	10c1ed36 	bltu	r2,r3,31b0 <_dtoa_r+0xa4c>
    29fc:	18c5883a 	add	r2,r3,r3
    2a00:	1085883a 	add	r2,r2,r2
    2a04:	00c00034 	movhi	r3,0
    2a08:	18ca8604 	addi	r3,r3,10776
    2a0c:	10c5883a 	add	r2,r2,r3
    2a10:	11000017 	ldw	r4,0(r2)
    2a14:	2000683a 	jmp	r4
    2a18:	00002b04 	movi	zero,172
    2a1c:	00002b04 	movi	zero,172
    2a20:	00003504 	movi	zero,212
    2a24:	000034dc 	xori	zero,zero,211
    2a28:	00003520 	cmpeqi	zero,zero,212
    2a2c:	0000352c 	andhi	zero,zero,212
    2a30:	d9002717 	ldw	r4,156(sp)
    2a34:	0089c3c4 	movi	r2,9999
    2a38:	20800015 	stw	r2,0(r4)
    2a3c:	a0001026 	beq	r20,zero,2a80 <_dtoa_r+0x31c>
    2a40:	00c00074 	movhi	r3,1
    2a44:	18f40804 	addi	r3,r3,-12256
    2a48:	d9802917 	ldw	r6,164(sp)
    2a4c:	303f7926 	beq	r6,zero,2834 <_dtoa_r+0xd0>
    2a50:	188000c7 	ldb	r2,3(r3)
    2a54:	190000c4 	addi	r4,r3,3
    2a58:	1000101e 	bne	r2,zero,2a9c <_dtoa_r+0x338>
    2a5c:	d8802917 	ldw	r2,164(sp)
    2a60:	11000015 	stw	r4,0(r2)
    2a64:	003f7306 	br	2834 <_dtoa_r+0xd0>
    2a68:	00a00034 	movhi	r2,32768
    2a6c:	10bfffc4 	addi	r2,r2,-1
    2a70:	00c00044 	movi	r3,1
    2a74:	88aa703a 	and	r21,r17,r2
    2a78:	90c00015 	stw	r3,0(r18)
    2a7c:	003f5806 	br	27e0 <_dtoa_r+0x7c>
    2a80:	00800434 	movhi	r2,16
    2a84:	10bfffc4 	addi	r2,r2,-1
    2a88:	a884703a 	and	r2,r21,r2
    2a8c:	103fec1e 	bne	r2,zero,2a40 <_dtoa_r+0x2dc>
    2a90:	00c00074 	movhi	r3,1
    2a94:	18f40504 	addi	r3,r3,-12268
    2a98:	003feb06 	br	2a48 <_dtoa_r+0x2e4>
    2a9c:	d8802917 	ldw	r2,164(sp)
    2aa0:	19000204 	addi	r4,r3,8
    2aa4:	11000015 	stw	r4,0(r2)
    2aa8:	003f6206 	br	2834 <_dtoa_r+0xd0>
    2aac:	ddc00117 	ldw	r23,4(sp)
    2ab0:	d8800217 	ldw	r2,8(sp)
    2ab4:	01000804 	movi	r4,32
    2ab8:	b8c10c84 	addi	r3,r23,1074
    2abc:	18a3883a 	add	r17,r3,r2
    2ac0:	2441b80e 	bge	r4,r17,31a4 <_dtoa_r+0xa40>
    2ac4:	00c01004 	movi	r3,64
    2ac8:	1c47c83a 	sub	r3,r3,r17
    2acc:	88bff804 	addi	r2,r17,-32
    2ad0:	a8c6983a 	sll	r3,r21,r3
    2ad4:	a084d83a 	srl	r2,r20,r2
    2ad8:	1888b03a 	or	r4,r3,r2
    2adc:	00091800 	call	9180 <__floatunsidf>
    2ae0:	1011883a 	mov	r8,r2
    2ae4:	00bf8434 	movhi	r2,65040
    2ae8:	01000044 	movi	r4,1
    2aec:	10d3883a 	add	r9,r2,r3
    2af0:	8dbef344 	addi	r22,r17,-1075
    2af4:	d9000815 	stw	r4,32(sp)
    2af8:	003f6f06 	br	28b8 <_dtoa_r+0x154>
    2afc:	d8001715 	stw	zero,92(sp)
    2b00:	04400044 	movi	r17,1
    2b04:	00bfffc4 	movi	r2,-1
    2b08:	00c00044 	movi	r3,1
    2b0c:	d8800e15 	stw	r2,56(sp)
    2b10:	d8002615 	stw	zero,152(sp)
    2b14:	d8800f15 	stw	r2,60(sp)
    2b18:	d8c00b15 	stw	r3,44(sp)
    2b1c:	1021883a 	mov	r16,r2
    2b20:	d8801617 	ldw	r2,88(sp)
    2b24:	10001115 	stw	zero,68(r2)
    2b28:	d8801617 	ldw	r2,88(sp)
    2b2c:	11401117 	ldw	r5,68(r2)
    2b30:	1009883a 	mov	r4,r2
    2b34:	0005e780 	call	5e78 <_Balloc>
    2b38:	d8c01617 	ldw	r3,88(sp)
    2b3c:	d8800515 	stw	r2,20(sp)
    2b40:	18801015 	stw	r2,64(r3)
    2b44:	00800384 	movi	r2,14
    2b48:	14006836 	bltu	r2,r16,2cec <_dtoa_r+0x588>
    2b4c:	8805003a 	cmpeq	r2,r17,zero
    2b50:	1000661e 	bne	r2,zero,2cec <_dtoa_r+0x588>
    2b54:	d9000d17 	ldw	r4,52(sp)
    2b58:	0102300e 	bge	zero,r4,341c <_dtoa_r+0xcb8>
    2b5c:	208003cc 	andi	r2,r4,15
    2b60:	100490fa 	slli	r2,r2,3
    2b64:	2025d13a 	srai	r18,r4,4
    2b68:	00c00074 	movhi	r3,1
    2b6c:	18f41a04 	addi	r3,r3,-12184
    2b70:	10c5883a 	add	r2,r2,r3
    2b74:	90c0040c 	andi	r3,r18,16
    2b78:	14000017 	ldw	r16,0(r2)
    2b7c:	14400117 	ldw	r17,4(r2)
    2b80:	18036a1e 	bne	r3,zero,392c <_dtoa_r+0x11c8>
    2b84:	05800084 	movi	r22,2
    2b88:	90001026 	beq	r18,zero,2bcc <_dtoa_r+0x468>
    2b8c:	04c00074 	movhi	r19,1
    2b90:	9cf44c04 	addi	r19,r19,-11984
    2b94:	9080004c 	andi	r2,r18,1
    2b98:	1005003a 	cmpeq	r2,r2,zero
    2b9c:	1000081e 	bne	r2,zero,2bc0 <_dtoa_r+0x45c>
    2ba0:	99800017 	ldw	r6,0(r19)
    2ba4:	99c00117 	ldw	r7,4(r19)
    2ba8:	880b883a 	mov	r5,r17
    2bac:	8009883a 	mov	r4,r16
    2bb0:	00086ec0 	call	86ec <__muldf3>
    2bb4:	1021883a 	mov	r16,r2
    2bb8:	b5800044 	addi	r22,r22,1
    2bbc:	1823883a 	mov	r17,r3
    2bc0:	9025d07a 	srai	r18,r18,1
    2bc4:	9cc00204 	addi	r19,r19,8
    2bc8:	903ff21e 	bne	r18,zero,2b94 <_dtoa_r+0x430>
    2bcc:	a80b883a 	mov	r5,r21
    2bd0:	a009883a 	mov	r4,r20
    2bd4:	880f883a 	mov	r7,r17
    2bd8:	800d883a 	mov	r6,r16
    2bdc:	0008ab00 	call	8ab0 <__divdf3>
    2be0:	1029883a 	mov	r20,r2
    2be4:	182b883a 	mov	r21,r3
    2be8:	d8c00c17 	ldw	r3,48(sp)
    2bec:	1805003a 	cmpeq	r2,r3,zero
    2bf0:	1000081e 	bne	r2,zero,2c14 <_dtoa_r+0x4b0>
    2bf4:	0005883a 	mov	r2,zero
    2bf8:	00cffc34 	movhi	r3,16368
    2bfc:	180f883a 	mov	r7,r3
    2c00:	a009883a 	mov	r4,r20
    2c04:	a80b883a 	mov	r5,r21
    2c08:	100d883a 	mov	r6,r2
    2c0c:	0008f280 	call	8f28 <__ltdf2>
    2c10:	1003fe16 	blt	r2,zero,3c0c <_dtoa_r+0x14a8>
    2c14:	b009883a 	mov	r4,r22
    2c18:	0008fb00 	call	8fb0 <__floatsidf>
    2c1c:	180b883a 	mov	r5,r3
    2c20:	1009883a 	mov	r4,r2
    2c24:	a00d883a 	mov	r6,r20
    2c28:	a80f883a 	mov	r7,r21
    2c2c:	00086ec0 	call	86ec <__muldf3>
    2c30:	0011883a 	mov	r8,zero
    2c34:	02500734 	movhi	r9,16412
    2c38:	1009883a 	mov	r4,r2
    2c3c:	180b883a 	mov	r5,r3
    2c40:	480f883a 	mov	r7,r9
    2c44:	400d883a 	mov	r6,r8
    2c48:	00086780 	call	8678 <__adddf3>
    2c4c:	d9000f17 	ldw	r4,60(sp)
    2c50:	102d883a 	mov	r22,r2
    2c54:	00bf3034 	movhi	r2,64704
    2c58:	18b9883a 	add	fp,r3,r2
    2c5c:	e02f883a 	mov	r23,fp
    2c60:	20028f1e 	bne	r4,zero,36a0 <_dtoa_r+0xf3c>
    2c64:	0005883a 	mov	r2,zero
    2c68:	00d00534 	movhi	r3,16404
    2c6c:	a009883a 	mov	r4,r20
    2c70:	a80b883a 	mov	r5,r21
    2c74:	180f883a 	mov	r7,r3
    2c78:	100d883a 	mov	r6,r2
    2c7c:	00085f80 	call	85f8 <__subdf3>
    2c80:	1009883a 	mov	r4,r2
    2c84:	e00f883a 	mov	r7,fp
    2c88:	180b883a 	mov	r5,r3
    2c8c:	b00d883a 	mov	r6,r22
    2c90:	1025883a 	mov	r18,r2
    2c94:	1827883a 	mov	r19,r3
    2c98:	0008e180 	call	8e18 <__gtdf2>
    2c9c:	00834f16 	blt	zero,r2,39dc <_dtoa_r+0x1278>
    2ca0:	e0e0003c 	xorhi	r3,fp,32768
    2ca4:	9009883a 	mov	r4,r18
    2ca8:	980b883a 	mov	r5,r19
    2cac:	180f883a 	mov	r7,r3
    2cb0:	b00d883a 	mov	r6,r22
    2cb4:	0008f280 	call	8f28 <__ltdf2>
    2cb8:	1000080e 	bge	r2,zero,2cdc <_dtoa_r+0x578>
    2cbc:	0027883a 	mov	r19,zero
    2cc0:	0025883a 	mov	r18,zero
    2cc4:	d8802617 	ldw	r2,152(sp)
    2cc8:	df000517 	ldw	fp,20(sp)
    2ccc:	d8000615 	stw	zero,24(sp)
    2cd0:	0084303a 	nor	r2,zero,r2
    2cd4:	d8800d15 	stw	r2,52(sp)
    2cd8:	00019b06 	br	3348 <_dtoa_r+0xbe4>
    2cdc:	d9801217 	ldw	r6,72(sp)
    2ce0:	d8801317 	ldw	r2,76(sp)
    2ce4:	3029883a 	mov	r20,r6
    2ce8:	102b883a 	mov	r21,r2
    2cec:	d8c00217 	ldw	r3,8(sp)
    2cf0:	18008516 	blt	r3,zero,2f08 <_dtoa_r+0x7a4>
    2cf4:	d9000d17 	ldw	r4,52(sp)
    2cf8:	00800384 	movi	r2,14
    2cfc:	11008216 	blt	r2,r4,2f08 <_dtoa_r+0x7a4>
    2d00:	200490fa 	slli	r2,r4,3
    2d04:	d9802617 	ldw	r6,152(sp)
    2d08:	00c00074 	movhi	r3,1
    2d0c:	18f41a04 	addi	r3,r3,-12184
    2d10:	10c5883a 	add	r2,r2,r3
    2d14:	14800017 	ldw	r18,0(r2)
    2d18:	14c00117 	ldw	r19,4(r2)
    2d1c:	30031e16 	blt	r6,zero,3998 <_dtoa_r+0x1234>
    2d20:	d9000517 	ldw	r4,20(sp)
    2d24:	d8c00f17 	ldw	r3,60(sp)
    2d28:	a823883a 	mov	r17,r21
    2d2c:	a021883a 	mov	r16,r20
    2d30:	192b883a 	add	r21,r3,r4
    2d34:	2039883a 	mov	fp,r4
    2d38:	00000f06 	br	2d78 <_dtoa_r+0x614>
    2d3c:	0005883a 	mov	r2,zero
    2d40:	00d00934 	movhi	r3,16420
    2d44:	5009883a 	mov	r4,r10
    2d48:	580b883a 	mov	r5,r11
    2d4c:	180f883a 	mov	r7,r3
    2d50:	100d883a 	mov	r6,r2
    2d54:	00086ec0 	call	86ec <__muldf3>
    2d58:	180b883a 	mov	r5,r3
    2d5c:	000d883a 	mov	r6,zero
    2d60:	000f883a 	mov	r7,zero
    2d64:	1009883a 	mov	r4,r2
    2d68:	1021883a 	mov	r16,r2
    2d6c:	1823883a 	mov	r17,r3
    2d70:	0008d900 	call	8d90 <__nedf2>
    2d74:	10004526 	beq	r2,zero,2e8c <_dtoa_r+0x728>
    2d78:	900d883a 	mov	r6,r18
    2d7c:	980f883a 	mov	r7,r19
    2d80:	8009883a 	mov	r4,r16
    2d84:	880b883a 	mov	r5,r17
    2d88:	0008ab00 	call	8ab0 <__divdf3>
    2d8c:	180b883a 	mov	r5,r3
    2d90:	1009883a 	mov	r4,r2
    2d94:	00090a80 	call	90a8 <__fixdfsi>
    2d98:	1009883a 	mov	r4,r2
    2d9c:	1029883a 	mov	r20,r2
    2da0:	0008fb00 	call	8fb0 <__floatsidf>
    2da4:	180f883a 	mov	r7,r3
    2da8:	9009883a 	mov	r4,r18
    2dac:	980b883a 	mov	r5,r19
    2db0:	100d883a 	mov	r6,r2
    2db4:	00086ec0 	call	86ec <__muldf3>
    2db8:	180f883a 	mov	r7,r3
    2dbc:	880b883a 	mov	r5,r17
    2dc0:	8009883a 	mov	r4,r16
    2dc4:	100d883a 	mov	r6,r2
    2dc8:	00085f80 	call	85f8 <__subdf3>
    2dcc:	1015883a 	mov	r10,r2
    2dd0:	a0800c04 	addi	r2,r20,48
    2dd4:	e0800005 	stb	r2,0(fp)
    2dd8:	e7000044 	addi	fp,fp,1
    2ddc:	1817883a 	mov	r11,r3
    2de0:	e57fd61e 	bne	fp,r21,2d3c <_dtoa_r+0x5d8>
    2de4:	500d883a 	mov	r6,r10
    2de8:	180f883a 	mov	r7,r3
    2dec:	5009883a 	mov	r4,r10
    2df0:	180b883a 	mov	r5,r3
    2df4:	00086780 	call	8678 <__adddf3>
    2df8:	100d883a 	mov	r6,r2
    2dfc:	9009883a 	mov	r4,r18
    2e00:	980b883a 	mov	r5,r19
    2e04:	180f883a 	mov	r7,r3
    2e08:	1021883a 	mov	r16,r2
    2e0c:	1823883a 	mov	r17,r3
    2e10:	0008f280 	call	8f28 <__ltdf2>
    2e14:	10000816 	blt	r2,zero,2e38 <_dtoa_r+0x6d4>
    2e18:	980b883a 	mov	r5,r19
    2e1c:	800d883a 	mov	r6,r16
    2e20:	880f883a 	mov	r7,r17
    2e24:	9009883a 	mov	r4,r18
    2e28:	0008d080 	call	8d08 <__eqdf2>
    2e2c:	1000171e 	bne	r2,zero,2e8c <_dtoa_r+0x728>
    2e30:	a080004c 	andi	r2,r20,1
    2e34:	10001526 	beq	r2,zero,2e8c <_dtoa_r+0x728>
    2e38:	d8800d17 	ldw	r2,52(sp)
    2e3c:	d8800415 	stw	r2,16(sp)
    2e40:	e009883a 	mov	r4,fp
    2e44:	213fffc4 	addi	r4,r4,-1
    2e48:	20c00007 	ldb	r3,0(r4)
    2e4c:	00800e44 	movi	r2,57
    2e50:	1880081e 	bne	r3,r2,2e74 <_dtoa_r+0x710>
    2e54:	d8800517 	ldw	r2,20(sp)
    2e58:	113ffa1e 	bne	r2,r4,2e44 <_dtoa_r+0x6e0>
    2e5c:	d8c00417 	ldw	r3,16(sp)
    2e60:	d9800517 	ldw	r6,20(sp)
    2e64:	00800c04 	movi	r2,48
    2e68:	18c00044 	addi	r3,r3,1
    2e6c:	d8c00415 	stw	r3,16(sp)
    2e70:	30800005 	stb	r2,0(r6)
    2e74:	20800003 	ldbu	r2,0(r4)
    2e78:	d8c00417 	ldw	r3,16(sp)
    2e7c:	27000044 	addi	fp,r4,1
    2e80:	10800044 	addi	r2,r2,1
    2e84:	d8c00d15 	stw	r3,52(sp)
    2e88:	20800005 	stb	r2,0(r4)
    2e8c:	d9001617 	ldw	r4,88(sp)
    2e90:	d9400717 	ldw	r5,28(sp)
    2e94:	00058f80 	call	58f8 <_Bfree>
    2e98:	e0000005 	stb	zero,0(fp)
    2e9c:	d9800d17 	ldw	r6,52(sp)
    2ea0:	d8c02717 	ldw	r3,156(sp)
    2ea4:	d9002917 	ldw	r4,164(sp)
    2ea8:	30800044 	addi	r2,r6,1
    2eac:	18800015 	stw	r2,0(r3)
    2eb0:	20029c26 	beq	r4,zero,3924 <_dtoa_r+0x11c0>
    2eb4:	d8c00517 	ldw	r3,20(sp)
    2eb8:	27000015 	stw	fp,0(r4)
    2ebc:	003e5d06 	br	2834 <_dtoa_r+0xd0>
    2ec0:	d9800d17 	ldw	r6,52(sp)
    2ec4:	00c00074 	movhi	r3,1
    2ec8:	18f41a04 	addi	r3,r3,-12184
    2ecc:	d9001217 	ldw	r4,72(sp)
    2ed0:	300490fa 	slli	r2,r6,3
    2ed4:	d9401317 	ldw	r5,76(sp)
    2ed8:	10c5883a 	add	r2,r2,r3
    2edc:	12000017 	ldw	r8,0(r2)
    2ee0:	12400117 	ldw	r9,4(r2)
    2ee4:	400d883a 	mov	r6,r8
    2ee8:	480f883a 	mov	r7,r9
    2eec:	0008f280 	call	8f28 <__ltdf2>
    2ef0:	1000030e 	bge	r2,zero,2f00 <_dtoa_r+0x79c>
    2ef4:	d8800d17 	ldw	r2,52(sp)
    2ef8:	10bfffc4 	addi	r2,r2,-1
    2efc:	d8800d15 	stw	r2,52(sp)
    2f00:	d8000c15 	stw	zero,48(sp)
    2f04:	003ea806 	br	29a8 <_dtoa_r+0x244>
    2f08:	d9000b17 	ldw	r4,44(sp)
    2f0c:	202cc03a 	cmpne	r22,r4,zero
    2f10:	b000c71e 	bne	r22,zero,3230 <_dtoa_r+0xacc>
    2f14:	dc001117 	ldw	r16,68(sp)
    2f18:	dc801017 	ldw	r18,64(sp)
    2f1c:	0027883a 	mov	r19,zero
    2f20:	04000b0e 	bge	zero,r16,2f50 <_dtoa_r+0x7ec>
    2f24:	d8c00a17 	ldw	r3,40(sp)
    2f28:	00c0090e 	bge	zero,r3,2f50 <_dtoa_r+0x7ec>
    2f2c:	8005883a 	mov	r2,r16
    2f30:	1c011316 	blt	r3,r16,3380 <_dtoa_r+0xc1c>
    2f34:	d9000a17 	ldw	r4,40(sp)
    2f38:	d9801117 	ldw	r6,68(sp)
    2f3c:	80a1c83a 	sub	r16,r16,r2
    2f40:	2089c83a 	sub	r4,r4,r2
    2f44:	308dc83a 	sub	r6,r6,r2
    2f48:	d9000a15 	stw	r4,40(sp)
    2f4c:	d9801115 	stw	r6,68(sp)
    2f50:	d8801017 	ldw	r2,64(sp)
    2f54:	0080150e 	bge	zero,r2,2fac <_dtoa_r+0x848>
    2f58:	d8c00b17 	ldw	r3,44(sp)
    2f5c:	1805003a 	cmpeq	r2,r3,zero
    2f60:	1001c91e 	bne	r2,zero,3688 <_dtoa_r+0xf24>
    2f64:	04800e0e 	bge	zero,r18,2fa0 <_dtoa_r+0x83c>
    2f68:	d9001617 	ldw	r4,88(sp)
    2f6c:	980b883a 	mov	r5,r19
    2f70:	900d883a 	mov	r6,r18
    2f74:	00066ac0 	call	66ac <__pow5mult>
    2f78:	d9001617 	ldw	r4,88(sp)
    2f7c:	d9800717 	ldw	r6,28(sp)
    2f80:	100b883a 	mov	r5,r2
    2f84:	1027883a 	mov	r19,r2
    2f88:	00063880 	call	6388 <__multiply>
    2f8c:	d9001617 	ldw	r4,88(sp)
    2f90:	d9400717 	ldw	r5,28(sp)
    2f94:	1023883a 	mov	r17,r2
    2f98:	00058f80 	call	58f8 <_Bfree>
    2f9c:	dc400715 	stw	r17,28(sp)
    2fa0:	d9001017 	ldw	r4,64(sp)
    2fa4:	248dc83a 	sub	r6,r4,r18
    2fa8:	30010e1e 	bne	r6,zero,33e4 <_dtoa_r+0xc80>
    2fac:	d9001617 	ldw	r4,88(sp)
    2fb0:	04400044 	movi	r17,1
    2fb4:	880b883a 	mov	r5,r17
    2fb8:	00065700 	call	6570 <__i2b>
    2fbc:	d9800917 	ldw	r6,36(sp)
    2fc0:	1025883a 	mov	r18,r2
    2fc4:	0180040e 	bge	zero,r6,2fd8 <_dtoa_r+0x874>
    2fc8:	d9001617 	ldw	r4,88(sp)
    2fcc:	100b883a 	mov	r5,r2
    2fd0:	00066ac0 	call	66ac <__pow5mult>
    2fd4:	1025883a 	mov	r18,r2
    2fd8:	d8801717 	ldw	r2,92(sp)
    2fdc:	8880f30e 	bge	r17,r2,33ac <_dtoa_r+0xc48>
    2fe0:	0023883a 	mov	r17,zero
    2fe4:	d9800917 	ldw	r6,36(sp)
    2fe8:	30019e1e 	bne	r6,zero,3664 <_dtoa_r+0xf00>
    2fec:	00c00044 	movi	r3,1
    2ff0:	d9000a17 	ldw	r4,40(sp)
    2ff4:	20c5883a 	add	r2,r4,r3
    2ff8:	10c007cc 	andi	r3,r2,31
    2ffc:	1800841e 	bne	r3,zero,3210 <_dtoa_r+0xaac>
    3000:	00800704 	movi	r2,28
    3004:	d9000a17 	ldw	r4,40(sp)
    3008:	d9801117 	ldw	r6,68(sp)
    300c:	80a1883a 	add	r16,r16,r2
    3010:	2089883a 	add	r4,r4,r2
    3014:	308d883a 	add	r6,r6,r2
    3018:	d9000a15 	stw	r4,40(sp)
    301c:	d9801115 	stw	r6,68(sp)
    3020:	d8801117 	ldw	r2,68(sp)
    3024:	0080050e 	bge	zero,r2,303c <_dtoa_r+0x8d8>
    3028:	d9400717 	ldw	r5,28(sp)
    302c:	d9001617 	ldw	r4,88(sp)
    3030:	100d883a 	mov	r6,r2
    3034:	000623c0 	call	623c <__lshift>
    3038:	d8800715 	stw	r2,28(sp)
    303c:	d8c00a17 	ldw	r3,40(sp)
    3040:	00c0050e 	bge	zero,r3,3058 <_dtoa_r+0x8f4>
    3044:	d9001617 	ldw	r4,88(sp)
    3048:	900b883a 	mov	r5,r18
    304c:	180d883a 	mov	r6,r3
    3050:	000623c0 	call	623c <__lshift>
    3054:	1025883a 	mov	r18,r2
    3058:	d9000c17 	ldw	r4,48(sp)
    305c:	2005003a 	cmpeq	r2,r4,zero
    3060:	10016f26 	beq	r2,zero,3620 <_dtoa_r+0xebc>
    3064:	d9000f17 	ldw	r4,60(sp)
    3068:	0102170e 	bge	zero,r4,38c8 <_dtoa_r+0x1164>
    306c:	d9800b17 	ldw	r6,44(sp)
    3070:	3005003a 	cmpeq	r2,r6,zero
    3074:	1000881e 	bne	r2,zero,3298 <_dtoa_r+0xb34>
    3078:	0400050e 	bge	zero,r16,3090 <_dtoa_r+0x92c>
    307c:	d9001617 	ldw	r4,88(sp)
    3080:	980b883a 	mov	r5,r19
    3084:	800d883a 	mov	r6,r16
    3088:	000623c0 	call	623c <__lshift>
    308c:	1027883a 	mov	r19,r2
    3090:	8804c03a 	cmpne	r2,r17,zero
    3094:	1002541e 	bne	r2,zero,39e8 <_dtoa_r+0x1284>
    3098:	980b883a 	mov	r5,r19
    309c:	dd800517 	ldw	r22,20(sp)
    30a0:	dcc00615 	stw	r19,24(sp)
    30a4:	a700004c 	andi	fp,r20,1
    30a8:	2827883a 	mov	r19,r5
    30ac:	d9000717 	ldw	r4,28(sp)
    30b0:	900b883a 	mov	r5,r18
    30b4:	000254c0 	call	254c <quorem>
    30b8:	d9000717 	ldw	r4,28(sp)
    30bc:	d9400617 	ldw	r5,24(sp)
    30c0:	1023883a 	mov	r17,r2
    30c4:	8dc00c04 	addi	r23,r17,48
    30c8:	0005a540 	call	5a54 <__mcmp>
    30cc:	d9001617 	ldw	r4,88(sp)
    30d0:	900b883a 	mov	r5,r18
    30d4:	980d883a 	mov	r6,r19
    30d8:	1029883a 	mov	r20,r2
    30dc:	00060b00 	call	60b0 <__mdiff>
    30e0:	102b883a 	mov	r21,r2
    30e4:	10800317 	ldw	r2,12(r2)
    30e8:	1001281e 	bne	r2,zero,358c <_dtoa_r+0xe28>
    30ec:	d9000717 	ldw	r4,28(sp)
    30f0:	a80b883a 	mov	r5,r21
    30f4:	0005a540 	call	5a54 <__mcmp>
    30f8:	d9001617 	ldw	r4,88(sp)
    30fc:	1021883a 	mov	r16,r2
    3100:	a80b883a 	mov	r5,r21
    3104:	00058f80 	call	58f8 <_Bfree>
    3108:	8000041e 	bne	r16,zero,311c <_dtoa_r+0x9b8>
    310c:	d8801717 	ldw	r2,92(sp)
    3110:	1000021e 	bne	r2,zero,311c <_dtoa_r+0x9b8>
    3114:	e004c03a 	cmpne	r2,fp,zero
    3118:	10011726 	beq	r2,zero,3578 <_dtoa_r+0xe14>
    311c:	a0010616 	blt	r20,zero,3538 <_dtoa_r+0xdd4>
    3120:	a000041e 	bne	r20,zero,3134 <_dtoa_r+0x9d0>
    3124:	d8c01717 	ldw	r3,92(sp)
    3128:	1800021e 	bne	r3,zero,3134 <_dtoa_r+0x9d0>
    312c:	e004c03a 	cmpne	r2,fp,zero
    3130:	10010126 	beq	r2,zero,3538 <_dtoa_r+0xdd4>
    3134:	04023d16 	blt	zero,r16,3a2c <_dtoa_r+0x12c8>
    3138:	b5c00005 	stb	r23,0(r22)
    313c:	d9800517 	ldw	r6,20(sp)
    3140:	d9000f17 	ldw	r4,60(sp)
    3144:	b5800044 	addi	r22,r22,1
    3148:	3105883a 	add	r2,r6,r4
    314c:	b0806526 	beq	r22,r2,32e4 <_dtoa_r+0xb80>
    3150:	d9400717 	ldw	r5,28(sp)
    3154:	d9001617 	ldw	r4,88(sp)
    3158:	01800284 	movi	r6,10
    315c:	000f883a 	mov	r7,zero
    3160:	00065ac0 	call	65ac <__multadd>
    3164:	d8800715 	stw	r2,28(sp)
    3168:	d8800617 	ldw	r2,24(sp)
    316c:	14c10c26 	beq	r2,r19,35a0 <_dtoa_r+0xe3c>
    3170:	d9400617 	ldw	r5,24(sp)
    3174:	d9001617 	ldw	r4,88(sp)
    3178:	01800284 	movi	r6,10
    317c:	000f883a 	mov	r7,zero
    3180:	00065ac0 	call	65ac <__multadd>
    3184:	d9001617 	ldw	r4,88(sp)
    3188:	980b883a 	mov	r5,r19
    318c:	01800284 	movi	r6,10
    3190:	000f883a 	mov	r7,zero
    3194:	d8800615 	stw	r2,24(sp)
    3198:	00065ac0 	call	65ac <__multadd>
    319c:	1027883a 	mov	r19,r2
    31a0:	003fc206 	br	30ac <_dtoa_r+0x948>
    31a4:	2445c83a 	sub	r2,r4,r17
    31a8:	a088983a 	sll	r4,r20,r2
    31ac:	003e4b06 	br	2adc <_dtoa_r+0x378>
    31b0:	01bfffc4 	movi	r6,-1
    31b4:	00800044 	movi	r2,1
    31b8:	d9800e15 	stw	r6,56(sp)
    31bc:	d9800f15 	stw	r6,60(sp)
    31c0:	d8800b15 	stw	r2,44(sp)
    31c4:	d8c01617 	ldw	r3,88(sp)
    31c8:	008005c4 	movi	r2,23
    31cc:	18001115 	stw	zero,68(r3)
    31d0:	1580082e 	bgeu	r2,r22,31f4 <_dtoa_r+0xa90>
    31d4:	00c00104 	movi	r3,4
    31d8:	0009883a 	mov	r4,zero
    31dc:	18c7883a 	add	r3,r3,r3
    31e0:	18800504 	addi	r2,r3,20
    31e4:	21000044 	addi	r4,r4,1
    31e8:	b0bffc2e 	bgeu	r22,r2,31dc <_dtoa_r+0xa78>
    31ec:	d9801617 	ldw	r6,88(sp)
    31f0:	31001115 	stw	r4,68(r6)
    31f4:	dc000f17 	ldw	r16,60(sp)
    31f8:	003e4b06 	br	2b28 <_dtoa_r+0x3c4>
    31fc:	d9801717 	ldw	r6,92(sp)
    3200:	0023883a 	mov	r17,zero
    3204:	31bfff04 	addi	r6,r6,-4
    3208:	d9801715 	stw	r6,92(sp)
    320c:	003df806 	br	29f0 <_dtoa_r+0x28c>
    3210:	00800804 	movi	r2,32
    3214:	10c9c83a 	sub	r4,r2,r3
    3218:	00c00104 	movi	r3,4
    321c:	19005a16 	blt	r3,r4,3388 <_dtoa_r+0xc24>
    3220:	008000c4 	movi	r2,3
    3224:	113f7e16 	blt	r2,r4,3020 <_dtoa_r+0x8bc>
    3228:	20800704 	addi	r2,r4,28
    322c:	003f7506 	br	3004 <_dtoa_r+0x8a0>
    3230:	d9801717 	ldw	r6,92(sp)
    3234:	00800044 	movi	r2,1
    3238:	1180a10e 	bge	r2,r6,34c0 <_dtoa_r+0xd5c>
    323c:	d9800f17 	ldw	r6,60(sp)
    3240:	d8c01017 	ldw	r3,64(sp)
    3244:	30bfffc4 	addi	r2,r6,-1
    3248:	1881c616 	blt	r3,r2,3964 <_dtoa_r+0x1200>
    324c:	18a5c83a 	sub	r18,r3,r2
    3250:	d8800f17 	ldw	r2,60(sp)
    3254:	10026216 	blt	r2,zero,3be0 <_dtoa_r+0x147c>
    3258:	dc001117 	ldw	r16,68(sp)
    325c:	1007883a 	mov	r3,r2
    3260:	d9800a17 	ldw	r6,40(sp)
    3264:	d8801117 	ldw	r2,68(sp)
    3268:	d9001617 	ldw	r4,88(sp)
    326c:	30cd883a 	add	r6,r6,r3
    3270:	10c5883a 	add	r2,r2,r3
    3274:	01400044 	movi	r5,1
    3278:	d9800a15 	stw	r6,40(sp)
    327c:	d8801115 	stw	r2,68(sp)
    3280:	00065700 	call	6570 <__i2b>
    3284:	1027883a 	mov	r19,r2
    3288:	003f2506 	br	2f20 <_dtoa_r+0x7bc>
    328c:	00c00074 	movhi	r3,1
    3290:	18f3fc04 	addi	r3,r3,-12304
    3294:	003d6706 	br	2834 <_dtoa_r+0xd0>
    3298:	dd800517 	ldw	r22,20(sp)
    329c:	04000044 	movi	r16,1
    32a0:	00000706 	br	32c0 <_dtoa_r+0xb5c>
    32a4:	d9400717 	ldw	r5,28(sp)
    32a8:	d9001617 	ldw	r4,88(sp)
    32ac:	01800284 	movi	r6,10
    32b0:	000f883a 	mov	r7,zero
    32b4:	00065ac0 	call	65ac <__multadd>
    32b8:	d8800715 	stw	r2,28(sp)
    32bc:	84000044 	addi	r16,r16,1
    32c0:	d9000717 	ldw	r4,28(sp)
    32c4:	900b883a 	mov	r5,r18
    32c8:	000254c0 	call	254c <quorem>
    32cc:	15c00c04 	addi	r23,r2,48
    32d0:	b5c00005 	stb	r23,0(r22)
    32d4:	d8c00f17 	ldw	r3,60(sp)
    32d8:	b5800044 	addi	r22,r22,1
    32dc:	80fff116 	blt	r16,r3,32a4 <_dtoa_r+0xb40>
    32e0:	d8000615 	stw	zero,24(sp)
    32e4:	d9400717 	ldw	r5,28(sp)
    32e8:	d9001617 	ldw	r4,88(sp)
    32ec:	01800044 	movi	r6,1
    32f0:	000623c0 	call	623c <__lshift>
    32f4:	1009883a 	mov	r4,r2
    32f8:	900b883a 	mov	r5,r18
    32fc:	d8800715 	stw	r2,28(sp)
    3300:	0005a540 	call	5a54 <__mcmp>
    3304:	00803c0e 	bge	zero,r2,33f8 <_dtoa_r+0xc94>
    3308:	b009883a 	mov	r4,r22
    330c:	213fffc4 	addi	r4,r4,-1
    3310:	21400003 	ldbu	r5,0(r4)
    3314:	00800e44 	movi	r2,57
    3318:	28c03fcc 	andi	r3,r5,255
    331c:	18c0201c 	xori	r3,r3,128
    3320:	18ffe004 	addi	r3,r3,-128
    3324:	1881981e 	bne	r3,r2,3988 <_dtoa_r+0x1224>
    3328:	d9800517 	ldw	r6,20(sp)
    332c:	21bff71e 	bne	r4,r6,330c <_dtoa_r+0xba8>
    3330:	d8800d17 	ldw	r2,52(sp)
    3334:	37000044 	addi	fp,r6,1
    3338:	10800044 	addi	r2,r2,1
    333c:	d8800d15 	stw	r2,52(sp)
    3340:	00800c44 	movi	r2,49
    3344:	30800005 	stb	r2,0(r6)
    3348:	d9001617 	ldw	r4,88(sp)
    334c:	900b883a 	mov	r5,r18
    3350:	00058f80 	call	58f8 <_Bfree>
    3354:	983ecd26 	beq	r19,zero,2e8c <_dtoa_r+0x728>
    3358:	d8c00617 	ldw	r3,24(sp)
    335c:	18000426 	beq	r3,zero,3370 <_dtoa_r+0xc0c>
    3360:	1cc00326 	beq	r3,r19,3370 <_dtoa_r+0xc0c>
    3364:	d9001617 	ldw	r4,88(sp)
    3368:	180b883a 	mov	r5,r3
    336c:	00058f80 	call	58f8 <_Bfree>
    3370:	d9001617 	ldw	r4,88(sp)
    3374:	980b883a 	mov	r5,r19
    3378:	00058f80 	call	58f8 <_Bfree>
    337c:	003ec306 	br	2e8c <_dtoa_r+0x728>
    3380:	1805883a 	mov	r2,r3
    3384:	003eeb06 	br	2f34 <_dtoa_r+0x7d0>
    3388:	d9800a17 	ldw	r6,40(sp)
    338c:	d8c01117 	ldw	r3,68(sp)
    3390:	20bfff04 	addi	r2,r4,-4
    3394:	308d883a 	add	r6,r6,r2
    3398:	1887883a 	add	r3,r3,r2
    339c:	80a1883a 	add	r16,r16,r2
    33a0:	d9800a15 	stw	r6,40(sp)
    33a4:	d8c01115 	stw	r3,68(sp)
    33a8:	003f1d06 	br	3020 <_dtoa_r+0x8bc>
    33ac:	a03f0c1e 	bne	r20,zero,2fe0 <_dtoa_r+0x87c>
    33b0:	00800434 	movhi	r2,16
    33b4:	10bfffc4 	addi	r2,r2,-1
    33b8:	a884703a 	and	r2,r21,r2
    33bc:	103f081e 	bne	r2,zero,2fe0 <_dtoa_r+0x87c>
    33c0:	a89ffc2c 	andhi	r2,r21,32752
    33c4:	103f0626 	beq	r2,zero,2fe0 <_dtoa_r+0x87c>
    33c8:	d8c01117 	ldw	r3,68(sp)
    33cc:	d9000a17 	ldw	r4,40(sp)
    33d0:	18c00044 	addi	r3,r3,1
    33d4:	21000044 	addi	r4,r4,1
    33d8:	d8c01115 	stw	r3,68(sp)
    33dc:	d9000a15 	stw	r4,40(sp)
    33e0:	003f0006 	br	2fe4 <_dtoa_r+0x880>
    33e4:	d9400717 	ldw	r5,28(sp)
    33e8:	d9001617 	ldw	r4,88(sp)
    33ec:	00066ac0 	call	66ac <__pow5mult>
    33f0:	d8800715 	stw	r2,28(sp)
    33f4:	003eed06 	br	2fac <_dtoa_r+0x848>
    33f8:	1000021e 	bne	r2,zero,3404 <_dtoa_r+0xca0>
    33fc:	b880004c 	andi	r2,r23,1
    3400:	103fc11e 	bne	r2,zero,3308 <_dtoa_r+0xba4>
    3404:	b5bfffc4 	addi	r22,r22,-1
    3408:	b0c00007 	ldb	r3,0(r22)
    340c:	00800c04 	movi	r2,48
    3410:	18bffc26 	beq	r3,r2,3404 <_dtoa_r+0xca0>
    3414:	b7000044 	addi	fp,r22,1
    3418:	003fcb06 	br	3348 <_dtoa_r+0xbe4>
    341c:	d9800d17 	ldw	r6,52(sp)
    3420:	018fc83a 	sub	r7,zero,r6
    3424:	3801f726 	beq	r7,zero,3c04 <_dtoa_r+0x14a0>
    3428:	398003cc 	andi	r6,r7,15
    342c:	300c90fa 	slli	r6,r6,3
    3430:	01400074 	movhi	r5,1
    3434:	29741a04 	addi	r5,r5,-12184
    3438:	d9001217 	ldw	r4,72(sp)
    343c:	314d883a 	add	r6,r6,r5
    3440:	30c00117 	ldw	r3,4(r6)
    3444:	30800017 	ldw	r2,0(r6)
    3448:	d9401317 	ldw	r5,76(sp)
    344c:	3821d13a 	srai	r16,r7,4
    3450:	100d883a 	mov	r6,r2
    3454:	180f883a 	mov	r7,r3
    3458:	00086ec0 	call	86ec <__muldf3>
    345c:	1011883a 	mov	r8,r2
    3460:	1813883a 	mov	r9,r3
    3464:	1029883a 	mov	r20,r2
    3468:	182b883a 	mov	r21,r3
    346c:	8001e526 	beq	r16,zero,3c04 <_dtoa_r+0x14a0>
    3470:	05800084 	movi	r22,2
    3474:	04400074 	movhi	r17,1
    3478:	8c744c04 	addi	r17,r17,-11984
    347c:	8080004c 	andi	r2,r16,1
    3480:	1005003a 	cmpeq	r2,r2,zero
    3484:	1000081e 	bne	r2,zero,34a8 <_dtoa_r+0xd44>
    3488:	89800017 	ldw	r6,0(r17)
    348c:	89c00117 	ldw	r7,4(r17)
    3490:	480b883a 	mov	r5,r9
    3494:	4009883a 	mov	r4,r8
    3498:	00086ec0 	call	86ec <__muldf3>
    349c:	1011883a 	mov	r8,r2
    34a0:	b5800044 	addi	r22,r22,1
    34a4:	1813883a 	mov	r9,r3
    34a8:	8021d07a 	srai	r16,r16,1
    34ac:	8c400204 	addi	r17,r17,8
    34b0:	803ff21e 	bne	r16,zero,347c <_dtoa_r+0xd18>
    34b4:	4029883a 	mov	r20,r8
    34b8:	482b883a 	mov	r21,r9
    34bc:	003dca06 	br	2be8 <_dtoa_r+0x484>
    34c0:	d9000817 	ldw	r4,32(sp)
    34c4:	2005003a 	cmpeq	r2,r4,zero
    34c8:	1001f61e 	bne	r2,zero,3ca4 <_dtoa_r+0x1540>
    34cc:	dc001117 	ldw	r16,68(sp)
    34d0:	dc801017 	ldw	r18,64(sp)
    34d4:	18c10cc4 	addi	r3,r3,1075
    34d8:	003f6106 	br	3260 <_dtoa_r+0xafc>
    34dc:	d8000b15 	stw	zero,44(sp)
    34e0:	d9802617 	ldw	r6,152(sp)
    34e4:	d8c00d17 	ldw	r3,52(sp)
    34e8:	30800044 	addi	r2,r6,1
    34ec:	18ad883a 	add	r22,r3,r2
    34f0:	b13fffc4 	addi	r4,r22,-1
    34f4:	d9000e15 	stw	r4,56(sp)
    34f8:	0581f60e 	bge	zero,r22,3cd4 <_dtoa_r+0x1570>
    34fc:	dd800f15 	stw	r22,60(sp)
    3500:	003f3006 	br	31c4 <_dtoa_r+0xa60>
    3504:	d8000b15 	stw	zero,44(sp)
    3508:	d9002617 	ldw	r4,152(sp)
    350c:	0101eb0e 	bge	zero,r4,3cbc <_dtoa_r+0x1558>
    3510:	202d883a 	mov	r22,r4
    3514:	d9000e15 	stw	r4,56(sp)
    3518:	d9000f15 	stw	r4,60(sp)
    351c:	003f2906 	br	31c4 <_dtoa_r+0xa60>
    3520:	01800044 	movi	r6,1
    3524:	d9800b15 	stw	r6,44(sp)
    3528:	003ff706 	br	3508 <_dtoa_r+0xda4>
    352c:	01000044 	movi	r4,1
    3530:	d9000b15 	stw	r4,44(sp)
    3534:	003fea06 	br	34e0 <_dtoa_r+0xd7c>
    3538:	04000c0e 	bge	zero,r16,356c <_dtoa_r+0xe08>
    353c:	d9400717 	ldw	r5,28(sp)
    3540:	d9001617 	ldw	r4,88(sp)
    3544:	01800044 	movi	r6,1
    3548:	000623c0 	call	623c <__lshift>
    354c:	1009883a 	mov	r4,r2
    3550:	900b883a 	mov	r5,r18
    3554:	d8800715 	stw	r2,28(sp)
    3558:	0005a540 	call	5a54 <__mcmp>
    355c:	0081e00e 	bge	zero,r2,3ce0 <_dtoa_r+0x157c>
    3560:	bdc00044 	addi	r23,r23,1
    3564:	00800e84 	movi	r2,58
    3568:	b881a226 	beq	r23,r2,3bf4 <_dtoa_r+0x1490>
    356c:	b7000044 	addi	fp,r22,1
    3570:	b5c00005 	stb	r23,0(r22)
    3574:	003f7406 	br	3348 <_dtoa_r+0xbe4>
    3578:	00800e44 	movi	r2,57
    357c:	b8819d26 	beq	r23,r2,3bf4 <_dtoa_r+0x1490>
    3580:	053ffa0e 	bge	zero,r20,356c <_dtoa_r+0xe08>
    3584:	8dc00c44 	addi	r23,r17,49
    3588:	003ff806 	br	356c <_dtoa_r+0xe08>
    358c:	d9001617 	ldw	r4,88(sp)
    3590:	a80b883a 	mov	r5,r21
    3594:	04000044 	movi	r16,1
    3598:	00058f80 	call	58f8 <_Bfree>
    359c:	003edf06 	br	311c <_dtoa_r+0x9b8>
    35a0:	d9001617 	ldw	r4,88(sp)
    35a4:	980b883a 	mov	r5,r19
    35a8:	01800284 	movi	r6,10
    35ac:	000f883a 	mov	r7,zero
    35b0:	00065ac0 	call	65ac <__multadd>
    35b4:	1027883a 	mov	r19,r2
    35b8:	d8800615 	stw	r2,24(sp)
    35bc:	003ebb06 	br	30ac <_dtoa_r+0x948>
    35c0:	d9801117 	ldw	r6,68(sp)
    35c4:	d8800d17 	ldw	r2,52(sp)
    35c8:	d8000915 	stw	zero,36(sp)
    35cc:	308dc83a 	sub	r6,r6,r2
    35d0:	0087c83a 	sub	r3,zero,r2
    35d4:	d9801115 	stw	r6,68(sp)
    35d8:	d8c01015 	stw	r3,64(sp)
    35dc:	003cfe06 	br	29d8 <_dtoa_r+0x274>
    35e0:	018dc83a 	sub	r6,zero,r6
    35e4:	d9801115 	stw	r6,68(sp)
    35e8:	d8000a15 	stw	zero,40(sp)
    35ec:	003cf306 	br	29bc <_dtoa_r+0x258>
    35f0:	d9000d17 	ldw	r4,52(sp)
    35f4:	0008fb00 	call	8fb0 <__floatsidf>
    35f8:	880b883a 	mov	r5,r17
    35fc:	8009883a 	mov	r4,r16
    3600:	180f883a 	mov	r7,r3
    3604:	100d883a 	mov	r6,r2
    3608:	0008d900 	call	8d90 <__nedf2>
    360c:	103ce126 	beq	r2,zero,2994 <_dtoa_r+0x230>
    3610:	d9800d17 	ldw	r6,52(sp)
    3614:	31bfffc4 	addi	r6,r6,-1
    3618:	d9800d15 	stw	r6,52(sp)
    361c:	003cdd06 	br	2994 <_dtoa_r+0x230>
    3620:	d9000717 	ldw	r4,28(sp)
    3624:	900b883a 	mov	r5,r18
    3628:	0005a540 	call	5a54 <__mcmp>
    362c:	103e8d0e 	bge	r2,zero,3064 <_dtoa_r+0x900>
    3630:	d9400717 	ldw	r5,28(sp)
    3634:	d9001617 	ldw	r4,88(sp)
    3638:	01800284 	movi	r6,10
    363c:	000f883a 	mov	r7,zero
    3640:	00065ac0 	call	65ac <__multadd>
    3644:	d9800d17 	ldw	r6,52(sp)
    3648:	d8800715 	stw	r2,28(sp)
    364c:	31bfffc4 	addi	r6,r6,-1
    3650:	d9800d15 	stw	r6,52(sp)
    3654:	b001a71e 	bne	r22,zero,3cf4 <_dtoa_r+0x1590>
    3658:	d8800e17 	ldw	r2,56(sp)
    365c:	d8800f15 	stw	r2,60(sp)
    3660:	003e8006 	br	3064 <_dtoa_r+0x900>
    3664:	90800417 	ldw	r2,16(r18)
    3668:	1085883a 	add	r2,r2,r2
    366c:	1085883a 	add	r2,r2,r2
    3670:	1485883a 	add	r2,r2,r18
    3674:	11000417 	ldw	r4,16(r2)
    3678:	00059200 	call	5920 <__hi0bits>
    367c:	00c00804 	movi	r3,32
    3680:	1887c83a 	sub	r3,r3,r2
    3684:	003e5a06 	br	2ff0 <_dtoa_r+0x88c>
    3688:	d9400717 	ldw	r5,28(sp)
    368c:	d9801017 	ldw	r6,64(sp)
    3690:	d9001617 	ldw	r4,88(sp)
    3694:	00066ac0 	call	66ac <__pow5mult>
    3698:	d8800715 	stw	r2,28(sp)
    369c:	003e4306 	br	2fac <_dtoa_r+0x848>
    36a0:	d9800f17 	ldw	r6,60(sp)
    36a4:	d8800d17 	ldw	r2,52(sp)
    36a8:	d9800315 	stw	r6,12(sp)
    36ac:	d8800415 	stw	r2,16(sp)
    36b0:	d8c00b17 	ldw	r3,44(sp)
    36b4:	1805003a 	cmpeq	r2,r3,zero
    36b8:	1000e21e 	bne	r2,zero,3a44 <_dtoa_r+0x12e0>
    36bc:	d9000317 	ldw	r4,12(sp)
    36c0:	0005883a 	mov	r2,zero
    36c4:	00cff834 	movhi	r3,16352
    36c8:	200c90fa 	slli	r6,r4,3
    36cc:	01000074 	movhi	r4,1
    36d0:	21341a04 	addi	r4,r4,-12184
    36d4:	180b883a 	mov	r5,r3
    36d8:	310d883a 	add	r6,r6,r4
    36dc:	327fff17 	ldw	r9,-4(r6)
    36e0:	323ffe17 	ldw	r8,-8(r6)
    36e4:	1009883a 	mov	r4,r2
    36e8:	480f883a 	mov	r7,r9
    36ec:	400d883a 	mov	r6,r8
    36f0:	0008ab00 	call	8ab0 <__divdf3>
    36f4:	180b883a 	mov	r5,r3
    36f8:	b00d883a 	mov	r6,r22
    36fc:	b80f883a 	mov	r7,r23
    3700:	1009883a 	mov	r4,r2
    3704:	00085f80 	call	85f8 <__subdf3>
    3708:	a80b883a 	mov	r5,r21
    370c:	a009883a 	mov	r4,r20
    3710:	d8c01915 	stw	r3,100(sp)
    3714:	d8801815 	stw	r2,96(sp)
    3718:	00090a80 	call	90a8 <__fixdfsi>
    371c:	1009883a 	mov	r4,r2
    3720:	1027883a 	mov	r19,r2
    3724:	0008fb00 	call	8fb0 <__floatsidf>
    3728:	a80b883a 	mov	r5,r21
    372c:	a009883a 	mov	r4,r20
    3730:	180f883a 	mov	r7,r3
    3734:	100d883a 	mov	r6,r2
    3738:	00085f80 	call	85f8 <__subdf3>
    373c:	d9801817 	ldw	r6,96(sp)
    3740:	1823883a 	mov	r17,r3
    3744:	d8801415 	stw	r2,80(sp)
    3748:	302d883a 	mov	r22,r6
    374c:	d9800517 	ldw	r6,20(sp)
    3750:	9cc00c04 	addi	r19,r19,48
    3754:	dc401515 	stw	r17,84(sp)
    3758:	d8c01917 	ldw	r3,100(sp)
    375c:	34c00005 	stb	r19,0(r6)
    3760:	d8800517 	ldw	r2,20(sp)
    3764:	d9401917 	ldw	r5,100(sp)
    3768:	d9801417 	ldw	r6,80(sp)
    376c:	b009883a 	mov	r4,r22
    3770:	880f883a 	mov	r7,r17
    3774:	182f883a 	mov	r23,r3
    3778:	17000044 	addi	fp,r2,1
    377c:	0008e180 	call	8e18 <__gtdf2>
    3780:	00804e16 	blt	zero,r2,38bc <_dtoa_r+0x1158>
    3784:	d9801417 	ldw	r6,80(sp)
    3788:	0005883a 	mov	r2,zero
    378c:	00cffc34 	movhi	r3,16368
    3790:	180b883a 	mov	r5,r3
    3794:	880f883a 	mov	r7,r17
    3798:	1009883a 	mov	r4,r2
    379c:	00085f80 	call	85f8 <__subdf3>
    37a0:	d9401917 	ldw	r5,100(sp)
    37a4:	180f883a 	mov	r7,r3
    37a8:	b009883a 	mov	r4,r22
    37ac:	100d883a 	mov	r6,r2
    37b0:	0008e180 	call	8e18 <__gtdf2>
    37b4:	00bda216 	blt	zero,r2,2e40 <_dtoa_r+0x6dc>
    37b8:	d8c00317 	ldw	r3,12(sp)
    37bc:	00800044 	movi	r2,1
    37c0:	10c01216 	blt	r2,r3,380c <_dtoa_r+0x10a8>
    37c4:	003d4506 	br	2cdc <_dtoa_r+0x578>
    37c8:	d9801417 	ldw	r6,80(sp)
    37cc:	0005883a 	mov	r2,zero
    37d0:	00cffc34 	movhi	r3,16368
    37d4:	180b883a 	mov	r5,r3
    37d8:	880f883a 	mov	r7,r17
    37dc:	1009883a 	mov	r4,r2
    37e0:	00085f80 	call	85f8 <__subdf3>
    37e4:	d9c01b17 	ldw	r7,108(sp)
    37e8:	180b883a 	mov	r5,r3
    37ec:	1009883a 	mov	r4,r2
    37f0:	b00d883a 	mov	r6,r22
    37f4:	0008f280 	call	8f28 <__ltdf2>
    37f8:	103d9116 	blt	r2,zero,2e40 <_dtoa_r+0x6dc>
    37fc:	d9800517 	ldw	r6,20(sp)
    3800:	d9000317 	ldw	r4,12(sp)
    3804:	3105883a 	add	r2,r6,r4
    3808:	e0bd3426 	beq	fp,r2,2cdc <_dtoa_r+0x578>
    380c:	04500934 	movhi	r17,16420
    3810:	0021883a 	mov	r16,zero
    3814:	b80b883a 	mov	r5,r23
    3818:	b009883a 	mov	r4,r22
    381c:	800d883a 	mov	r6,r16
    3820:	880f883a 	mov	r7,r17
    3824:	00086ec0 	call	86ec <__muldf3>
    3828:	d9401517 	ldw	r5,84(sp)
    382c:	d9001417 	ldw	r4,80(sp)
    3830:	880f883a 	mov	r7,r17
    3834:	000d883a 	mov	r6,zero
    3838:	d8801a15 	stw	r2,104(sp)
    383c:	d8c01b15 	stw	r3,108(sp)
    3840:	00086ec0 	call	86ec <__muldf3>
    3844:	180b883a 	mov	r5,r3
    3848:	1009883a 	mov	r4,r2
    384c:	1823883a 	mov	r17,r3
    3850:	1021883a 	mov	r16,r2
    3854:	00090a80 	call	90a8 <__fixdfsi>
    3858:	1009883a 	mov	r4,r2
    385c:	102b883a 	mov	r21,r2
    3860:	0008fb00 	call	8fb0 <__floatsidf>
    3864:	880b883a 	mov	r5,r17
    3868:	8009883a 	mov	r4,r16
    386c:	180f883a 	mov	r7,r3
    3870:	100d883a 	mov	r6,r2
    3874:	00085f80 	call	85f8 <__subdf3>
    3878:	1021883a 	mov	r16,r2
    387c:	d9001b17 	ldw	r4,108(sp)
    3880:	1823883a 	mov	r17,r3
    3884:	dc001415 	stw	r16,80(sp)
    3888:	ad400c04 	addi	r21,r21,48
    388c:	dc401515 	stw	r17,84(sp)
    3890:	d8801a17 	ldw	r2,104(sp)
    3894:	e5400005 	stb	r21,0(fp)
    3898:	202f883a 	mov	r23,r4
    389c:	d9c01b17 	ldw	r7,108(sp)
    38a0:	d9001417 	ldw	r4,80(sp)
    38a4:	880b883a 	mov	r5,r17
    38a8:	100d883a 	mov	r6,r2
    38ac:	102d883a 	mov	r22,r2
    38b0:	e7000044 	addi	fp,fp,1
    38b4:	0008f280 	call	8f28 <__ltdf2>
    38b8:	103fc30e 	bge	r2,zero,37c8 <_dtoa_r+0x1064>
    38bc:	d9000417 	ldw	r4,16(sp)
    38c0:	d9000d15 	stw	r4,52(sp)
    38c4:	003d7106 	br	2e8c <_dtoa_r+0x728>
    38c8:	d9801717 	ldw	r6,92(sp)
    38cc:	00800084 	movi	r2,2
    38d0:	11bde60e 	bge	r2,r6,306c <_dtoa_r+0x908>
    38d4:	203cfb1e 	bne	r4,zero,2cc4 <_dtoa_r+0x560>
    38d8:	d9001617 	ldw	r4,88(sp)
    38dc:	900b883a 	mov	r5,r18
    38e0:	01800144 	movi	r6,5
    38e4:	000f883a 	mov	r7,zero
    38e8:	00065ac0 	call	65ac <__multadd>
    38ec:	d9000717 	ldw	r4,28(sp)
    38f0:	100b883a 	mov	r5,r2
    38f4:	1025883a 	mov	r18,r2
    38f8:	0005a540 	call	5a54 <__mcmp>
    38fc:	00bcf10e 	bge	zero,r2,2cc4 <_dtoa_r+0x560>
    3900:	d8c00d17 	ldw	r3,52(sp)
    3904:	d9000517 	ldw	r4,20(sp)
    3908:	d8000615 	stw	zero,24(sp)
    390c:	18c00044 	addi	r3,r3,1
    3910:	d8c00d15 	stw	r3,52(sp)
    3914:	00800c44 	movi	r2,49
    3918:	27000044 	addi	fp,r4,1
    391c:	20800005 	stb	r2,0(r4)
    3920:	003e8906 	br	3348 <_dtoa_r+0xbe4>
    3924:	d8c00517 	ldw	r3,20(sp)
    3928:	003bc206 	br	2834 <_dtoa_r+0xd0>
    392c:	01800074 	movhi	r6,1
    3930:	31b44c04 	addi	r6,r6,-11984
    3934:	30c00917 	ldw	r3,36(r6)
    3938:	30800817 	ldw	r2,32(r6)
    393c:	d9001217 	ldw	r4,72(sp)
    3940:	d9401317 	ldw	r5,76(sp)
    3944:	180f883a 	mov	r7,r3
    3948:	100d883a 	mov	r6,r2
    394c:	0008ab00 	call	8ab0 <__divdf3>
    3950:	948003cc 	andi	r18,r18,15
    3954:	058000c4 	movi	r22,3
    3958:	1029883a 	mov	r20,r2
    395c:	182b883a 	mov	r21,r3
    3960:	003c8906 	br	2b88 <_dtoa_r+0x424>
    3964:	d9001017 	ldw	r4,64(sp)
    3968:	d9800917 	ldw	r6,36(sp)
    396c:	0025883a 	mov	r18,zero
    3970:	1105c83a 	sub	r2,r2,r4
    3974:	2089883a 	add	r4,r4,r2
    3978:	308d883a 	add	r6,r6,r2
    397c:	d9001015 	stw	r4,64(sp)
    3980:	d9800915 	stw	r6,36(sp)
    3984:	003e3206 	br	3250 <_dtoa_r+0xaec>
    3988:	28800044 	addi	r2,r5,1
    398c:	27000044 	addi	fp,r4,1
    3990:	20800005 	stb	r2,0(r4)
    3994:	003e6c06 	br	3348 <_dtoa_r+0xbe4>
    3998:	d8800f17 	ldw	r2,60(sp)
    399c:	00bce016 	blt	zero,r2,2d20 <_dtoa_r+0x5bc>
    39a0:	d9800f17 	ldw	r6,60(sp)
    39a4:	303cc51e 	bne	r6,zero,2cbc <_dtoa_r+0x558>
    39a8:	0005883a 	mov	r2,zero
    39ac:	00d00534 	movhi	r3,16404
    39b0:	980b883a 	mov	r5,r19
    39b4:	180f883a 	mov	r7,r3
    39b8:	9009883a 	mov	r4,r18
    39bc:	100d883a 	mov	r6,r2
    39c0:	00086ec0 	call	86ec <__muldf3>
    39c4:	180b883a 	mov	r5,r3
    39c8:	a80f883a 	mov	r7,r21
    39cc:	1009883a 	mov	r4,r2
    39d0:	a00d883a 	mov	r6,r20
    39d4:	0008ea00 	call	8ea0 <__gedf2>
    39d8:	103cb80e 	bge	r2,zero,2cbc <_dtoa_r+0x558>
    39dc:	0027883a 	mov	r19,zero
    39e0:	0025883a 	mov	r18,zero
    39e4:	003fc606 	br	3900 <_dtoa_r+0x119c>
    39e8:	99400117 	ldw	r5,4(r19)
    39ec:	d9001617 	ldw	r4,88(sp)
    39f0:	0005e780 	call	5e78 <_Balloc>
    39f4:	99800417 	ldw	r6,16(r19)
    39f8:	11000304 	addi	r4,r2,12
    39fc:	99400304 	addi	r5,r19,12
    3a00:	318d883a 	add	r6,r6,r6
    3a04:	318d883a 	add	r6,r6,r6
    3a08:	31800204 	addi	r6,r6,8
    3a0c:	1023883a 	mov	r17,r2
    3a10:	00056e00 	call	56e0 <memcpy>
    3a14:	d9001617 	ldw	r4,88(sp)
    3a18:	880b883a 	mov	r5,r17
    3a1c:	01800044 	movi	r6,1
    3a20:	000623c0 	call	623c <__lshift>
    3a24:	100b883a 	mov	r5,r2
    3a28:	003d9c06 	br	309c <_dtoa_r+0x938>
    3a2c:	00800e44 	movi	r2,57
    3a30:	b8807026 	beq	r23,r2,3bf4 <_dtoa_r+0x1490>
    3a34:	b8800044 	addi	r2,r23,1
    3a38:	b7000044 	addi	fp,r22,1
    3a3c:	b0800005 	stb	r2,0(r22)
    3a40:	003e4106 	br	3348 <_dtoa_r+0xbe4>
    3a44:	d8800317 	ldw	r2,12(sp)
    3a48:	01800074 	movhi	r6,1
    3a4c:	31b41a04 	addi	r6,r6,-12184
    3a50:	b009883a 	mov	r4,r22
    3a54:	100e90fa 	slli	r7,r2,3
    3a58:	b80b883a 	mov	r5,r23
    3a5c:	398f883a 	add	r7,r7,r6
    3a60:	38bffe17 	ldw	r2,-8(r7)
    3a64:	d9800517 	ldw	r6,20(sp)
    3a68:	38ffff17 	ldw	r3,-4(r7)
    3a6c:	37000044 	addi	fp,r6,1
    3a70:	180f883a 	mov	r7,r3
    3a74:	100d883a 	mov	r6,r2
    3a78:	00086ec0 	call	86ec <__muldf3>
    3a7c:	a80b883a 	mov	r5,r21
    3a80:	a009883a 	mov	r4,r20
    3a84:	182f883a 	mov	r23,r3
    3a88:	102d883a 	mov	r22,r2
    3a8c:	00090a80 	call	90a8 <__fixdfsi>
    3a90:	1009883a 	mov	r4,r2
    3a94:	1027883a 	mov	r19,r2
    3a98:	0008fb00 	call	8fb0 <__floatsidf>
    3a9c:	a80b883a 	mov	r5,r21
    3aa0:	a009883a 	mov	r4,r20
    3aa4:	180f883a 	mov	r7,r3
    3aa8:	100d883a 	mov	r6,r2
    3aac:	00085f80 	call	85f8 <__subdf3>
    3ab0:	180b883a 	mov	r5,r3
    3ab4:	d8c00517 	ldw	r3,20(sp)
    3ab8:	9cc00c04 	addi	r19,r19,48
    3abc:	1009883a 	mov	r4,r2
    3ac0:	1cc00005 	stb	r19,0(r3)
    3ac4:	2021883a 	mov	r16,r4
    3ac8:	d9000317 	ldw	r4,12(sp)
    3acc:	00800044 	movi	r2,1
    3ad0:	2823883a 	mov	r17,r5
    3ad4:	20802226 	beq	r4,r2,3b60 <_dtoa_r+0x13fc>
    3ad8:	1029883a 	mov	r20,r2
    3adc:	0005883a 	mov	r2,zero
    3ae0:	00d00934 	movhi	r3,16420
    3ae4:	180f883a 	mov	r7,r3
    3ae8:	100d883a 	mov	r6,r2
    3aec:	880b883a 	mov	r5,r17
    3af0:	8009883a 	mov	r4,r16
    3af4:	00086ec0 	call	86ec <__muldf3>
    3af8:	180b883a 	mov	r5,r3
    3afc:	1009883a 	mov	r4,r2
    3b00:	1823883a 	mov	r17,r3
    3b04:	1021883a 	mov	r16,r2
    3b08:	00090a80 	call	90a8 <__fixdfsi>
    3b0c:	1009883a 	mov	r4,r2
    3b10:	102b883a 	mov	r21,r2
    3b14:	0008fb00 	call	8fb0 <__floatsidf>
    3b18:	880b883a 	mov	r5,r17
    3b1c:	8009883a 	mov	r4,r16
    3b20:	180f883a 	mov	r7,r3
    3b24:	100d883a 	mov	r6,r2
    3b28:	00085f80 	call	85f8 <__subdf3>
    3b2c:	180b883a 	mov	r5,r3
    3b30:	d8c00517 	ldw	r3,20(sp)
    3b34:	1009883a 	mov	r4,r2
    3b38:	ad400c04 	addi	r21,r21,48
    3b3c:	1d05883a 	add	r2,r3,r20
    3b40:	15400005 	stb	r21,0(r2)
    3b44:	2021883a 	mov	r16,r4
    3b48:	d9000317 	ldw	r4,12(sp)
    3b4c:	a5000044 	addi	r20,r20,1
    3b50:	2823883a 	mov	r17,r5
    3b54:	a13fe11e 	bne	r20,r4,3adc <_dtoa_r+0x1378>
    3b58:	e505883a 	add	r2,fp,r20
    3b5c:	173fffc4 	addi	fp,r2,-1
    3b60:	0025883a 	mov	r18,zero
    3b64:	04cff834 	movhi	r19,16352
    3b68:	b009883a 	mov	r4,r22
    3b6c:	b80b883a 	mov	r5,r23
    3b70:	900d883a 	mov	r6,r18
    3b74:	980f883a 	mov	r7,r19
    3b78:	00086780 	call	8678 <__adddf3>
    3b7c:	180b883a 	mov	r5,r3
    3b80:	1009883a 	mov	r4,r2
    3b84:	800d883a 	mov	r6,r16
    3b88:	880f883a 	mov	r7,r17
    3b8c:	0008f280 	call	8f28 <__ltdf2>
    3b90:	103cab16 	blt	r2,zero,2e40 <_dtoa_r+0x6dc>
    3b94:	0009883a 	mov	r4,zero
    3b98:	980b883a 	mov	r5,r19
    3b9c:	b80f883a 	mov	r7,r23
    3ba0:	b00d883a 	mov	r6,r22
    3ba4:	00085f80 	call	85f8 <__subdf3>
    3ba8:	180b883a 	mov	r5,r3
    3bac:	880f883a 	mov	r7,r17
    3bb0:	1009883a 	mov	r4,r2
    3bb4:	800d883a 	mov	r6,r16
    3bb8:	0008e180 	call	8e18 <__gtdf2>
    3bbc:	00bc470e 	bge	zero,r2,2cdc <_dtoa_r+0x578>
    3bc0:	00c00c04 	movi	r3,48
    3bc4:	e73fffc4 	addi	fp,fp,-1
    3bc8:	e0800007 	ldb	r2,0(fp)
    3bcc:	10fffd26 	beq	r2,r3,3bc4 <_dtoa_r+0x1460>
    3bd0:	d9800417 	ldw	r6,16(sp)
    3bd4:	e7000044 	addi	fp,fp,1
    3bd8:	d9800d15 	stw	r6,52(sp)
    3bdc:	003cab06 	br	2e8c <_dtoa_r+0x728>
    3be0:	d8c00f17 	ldw	r3,60(sp)
    3be4:	d9001117 	ldw	r4,68(sp)
    3be8:	20e1c83a 	sub	r16,r4,r3
    3bec:	0007883a 	mov	r3,zero
    3bf0:	003d9b06 	br	3260 <_dtoa_r+0xafc>
    3bf4:	00800e44 	movi	r2,57
    3bf8:	b0800005 	stb	r2,0(r22)
    3bfc:	b5800044 	addi	r22,r22,1
    3c00:	003dc106 	br	3308 <_dtoa_r+0xba4>
    3c04:	05800084 	movi	r22,2
    3c08:	003bf706 	br	2be8 <_dtoa_r+0x484>
    3c0c:	d9000f17 	ldw	r4,60(sp)
    3c10:	013c000e 	bge	zero,r4,2c14 <_dtoa_r+0x4b0>
    3c14:	d9800e17 	ldw	r6,56(sp)
    3c18:	01bc300e 	bge	zero,r6,2cdc <_dtoa_r+0x578>
    3c1c:	0005883a 	mov	r2,zero
    3c20:	00d00934 	movhi	r3,16420
    3c24:	a80b883a 	mov	r5,r21
    3c28:	180f883a 	mov	r7,r3
    3c2c:	a009883a 	mov	r4,r20
    3c30:	100d883a 	mov	r6,r2
    3c34:	00086ec0 	call	86ec <__muldf3>
    3c38:	b1000044 	addi	r4,r22,1
    3c3c:	1021883a 	mov	r16,r2
    3c40:	1823883a 	mov	r17,r3
    3c44:	0008fb00 	call	8fb0 <__floatsidf>
    3c48:	880b883a 	mov	r5,r17
    3c4c:	8009883a 	mov	r4,r16
    3c50:	180f883a 	mov	r7,r3
    3c54:	100d883a 	mov	r6,r2
    3c58:	00086ec0 	call	86ec <__muldf3>
    3c5c:	0011883a 	mov	r8,zero
    3c60:	02500734 	movhi	r9,16412
    3c64:	180b883a 	mov	r5,r3
    3c68:	480f883a 	mov	r7,r9
    3c6c:	1009883a 	mov	r4,r2
    3c70:	400d883a 	mov	r6,r8
    3c74:	00086780 	call	8678 <__adddf3>
    3c78:	102d883a 	mov	r22,r2
    3c7c:	00bf3034 	movhi	r2,64704
    3c80:	10ef883a 	add	r23,r2,r3
    3c84:	d8800d17 	ldw	r2,52(sp)
    3c88:	d8c00e17 	ldw	r3,56(sp)
    3c8c:	8029883a 	mov	r20,r16
    3c90:	10bfffc4 	addi	r2,r2,-1
    3c94:	882b883a 	mov	r21,r17
    3c98:	d8800415 	stw	r2,16(sp)
    3c9c:	d8c00315 	stw	r3,12(sp)
    3ca0:	003e8306 	br	36b0 <_dtoa_r+0xf4c>
    3ca4:	d8800117 	ldw	r2,4(sp)
    3ca8:	dc001117 	ldw	r16,68(sp)
    3cac:	dc801017 	ldw	r18,64(sp)
    3cb0:	00c00d84 	movi	r3,54
    3cb4:	1887c83a 	sub	r3,r3,r2
    3cb8:	003d6906 	br	3260 <_dtoa_r+0xafc>
    3cbc:	01800044 	movi	r6,1
    3cc0:	3021883a 	mov	r16,r6
    3cc4:	d9800f15 	stw	r6,60(sp)
    3cc8:	d9802615 	stw	r6,152(sp)
    3ccc:	d9800e15 	stw	r6,56(sp)
    3cd0:	003b9306 	br	2b20 <_dtoa_r+0x3bc>
    3cd4:	b021883a 	mov	r16,r22
    3cd8:	dd800f15 	stw	r22,60(sp)
    3cdc:	003b9006 	br	2b20 <_dtoa_r+0x3bc>
    3ce0:	103e221e 	bne	r2,zero,356c <_dtoa_r+0xe08>
    3ce4:	b880004c 	andi	r2,r23,1
    3ce8:	1005003a 	cmpeq	r2,r2,zero
    3cec:	103e1f1e 	bne	r2,zero,356c <_dtoa_r+0xe08>
    3cf0:	003e1b06 	br	3560 <_dtoa_r+0xdfc>
    3cf4:	d9001617 	ldw	r4,88(sp)
    3cf8:	980b883a 	mov	r5,r19
    3cfc:	01800284 	movi	r6,10
    3d00:	000f883a 	mov	r7,zero
    3d04:	00065ac0 	call	65ac <__multadd>
    3d08:	d8c00e17 	ldw	r3,56(sp)
    3d0c:	1027883a 	mov	r19,r2
    3d10:	d8c00f15 	stw	r3,60(sp)
    3d14:	003cd306 	br	3064 <_dtoa_r+0x900>

00003d18 <_fflush_r>:
    3d18:	defffb04 	addi	sp,sp,-20
    3d1c:	dcc00315 	stw	r19,12(sp)
    3d20:	dc800215 	stw	r18,8(sp)
    3d24:	dfc00415 	stw	ra,16(sp)
    3d28:	dc400115 	stw	r17,4(sp)
    3d2c:	dc000015 	stw	r16,0(sp)
    3d30:	2027883a 	mov	r19,r4
    3d34:	2825883a 	mov	r18,r5
    3d38:	20000226 	beq	r4,zero,3d44 <_fflush_r+0x2c>
    3d3c:	20800e17 	ldw	r2,56(r4)
    3d40:	10005626 	beq	r2,zero,3e9c <_fflush_r+0x184>
    3d44:	9100030b 	ldhu	r4,12(r18)
    3d48:	20ffffcc 	andi	r3,r4,65535
    3d4c:	18e0001c 	xori	r3,r3,32768
    3d50:	18e00004 	addi	r3,r3,-32768
    3d54:	1880020c 	andi	r2,r3,8
    3d58:	1000261e 	bne	r2,zero,3df4 <_fflush_r+0xdc>
    3d5c:	90c00117 	ldw	r3,4(r18)
    3d60:	20820014 	ori	r2,r4,2048
    3d64:	9080030d 	sth	r2,12(r18)
    3d68:	1009883a 	mov	r4,r2
    3d6c:	00c0400e 	bge	zero,r3,3e70 <_fflush_r+0x158>
    3d70:	92000a17 	ldw	r8,40(r18)
    3d74:	40004026 	beq	r8,zero,3e78 <_fflush_r+0x160>
    3d78:	2084000c 	andi	r2,r4,4096
    3d7c:	10005326 	beq	r2,zero,3ecc <_fflush_r+0x1b4>
    3d80:	94001417 	ldw	r16,80(r18)
    3d84:	9080030b 	ldhu	r2,12(r18)
    3d88:	1080010c 	andi	r2,r2,4
    3d8c:	1000481e 	bne	r2,zero,3eb0 <_fflush_r+0x198>
    3d90:	91400717 	ldw	r5,28(r18)
    3d94:	9809883a 	mov	r4,r19
    3d98:	800d883a 	mov	r6,r16
    3d9c:	000f883a 	mov	r7,zero
    3da0:	403ee83a 	callr	r8
    3da4:	8080261e 	bne	r16,r2,3e40 <_fflush_r+0x128>
    3da8:	9080030b 	ldhu	r2,12(r18)
    3dac:	91000417 	ldw	r4,16(r18)
    3db0:	90000115 	stw	zero,4(r18)
    3db4:	10bdffcc 	andi	r2,r2,63487
    3db8:	10ffffcc 	andi	r3,r2,65535
    3dbc:	18c4000c 	andi	r3,r3,4096
    3dc0:	9080030d 	sth	r2,12(r18)
    3dc4:	91000015 	stw	r4,0(r18)
    3dc8:	18002b26 	beq	r3,zero,3e78 <_fflush_r+0x160>
    3dcc:	0007883a 	mov	r3,zero
    3dd0:	1805883a 	mov	r2,r3
    3dd4:	94001415 	stw	r16,80(r18)
    3dd8:	dfc00417 	ldw	ra,16(sp)
    3ddc:	dcc00317 	ldw	r19,12(sp)
    3de0:	dc800217 	ldw	r18,8(sp)
    3de4:	dc400117 	ldw	r17,4(sp)
    3de8:	dc000017 	ldw	r16,0(sp)
    3dec:	dec00504 	addi	sp,sp,20
    3df0:	f800283a 	ret
    3df4:	94400417 	ldw	r17,16(r18)
    3df8:	88001f26 	beq	r17,zero,3e78 <_fflush_r+0x160>
    3dfc:	90800017 	ldw	r2,0(r18)
    3e00:	18c000cc 	andi	r3,r3,3
    3e04:	94400015 	stw	r17,0(r18)
    3e08:	1461c83a 	sub	r16,r2,r17
    3e0c:	18002526 	beq	r3,zero,3ea4 <_fflush_r+0x18c>
    3e10:	0005883a 	mov	r2,zero
    3e14:	90800215 	stw	r2,8(r18)
    3e18:	0400170e 	bge	zero,r16,3e78 <_fflush_r+0x160>
    3e1c:	90c00917 	ldw	r3,36(r18)
    3e20:	91400717 	ldw	r5,28(r18)
    3e24:	880d883a 	mov	r6,r17
    3e28:	800f883a 	mov	r7,r16
    3e2c:	9809883a 	mov	r4,r19
    3e30:	183ee83a 	callr	r3
    3e34:	88a3883a 	add	r17,r17,r2
    3e38:	80a1c83a 	sub	r16,r16,r2
    3e3c:	00bff616 	blt	zero,r2,3e18 <_fflush_r+0x100>
    3e40:	9080030b 	ldhu	r2,12(r18)
    3e44:	00ffffc4 	movi	r3,-1
    3e48:	10801014 	ori	r2,r2,64
    3e4c:	9080030d 	sth	r2,12(r18)
    3e50:	1805883a 	mov	r2,r3
    3e54:	dfc00417 	ldw	ra,16(sp)
    3e58:	dcc00317 	ldw	r19,12(sp)
    3e5c:	dc800217 	ldw	r18,8(sp)
    3e60:	dc400117 	ldw	r17,4(sp)
    3e64:	dc000017 	ldw	r16,0(sp)
    3e68:	dec00504 	addi	sp,sp,20
    3e6c:	f800283a 	ret
    3e70:	90800f17 	ldw	r2,60(r18)
    3e74:	00bfbe16 	blt	zero,r2,3d70 <_fflush_r+0x58>
    3e78:	0007883a 	mov	r3,zero
    3e7c:	1805883a 	mov	r2,r3
    3e80:	dfc00417 	ldw	ra,16(sp)
    3e84:	dcc00317 	ldw	r19,12(sp)
    3e88:	dc800217 	ldw	r18,8(sp)
    3e8c:	dc400117 	ldw	r17,4(sp)
    3e90:	dc000017 	ldw	r16,0(sp)
    3e94:	dec00504 	addi	sp,sp,20
    3e98:	f800283a 	ret
    3e9c:	0003fb00 	call	3fb0 <__sinit>
    3ea0:	003fa806 	br	3d44 <_fflush_r+0x2c>
    3ea4:	90800517 	ldw	r2,20(r18)
    3ea8:	90800215 	stw	r2,8(r18)
    3eac:	003fda06 	br	3e18 <_fflush_r+0x100>
    3eb0:	90800117 	ldw	r2,4(r18)
    3eb4:	90c00c17 	ldw	r3,48(r18)
    3eb8:	80a1c83a 	sub	r16,r16,r2
    3ebc:	183fb426 	beq	r3,zero,3d90 <_fflush_r+0x78>
    3ec0:	90800f17 	ldw	r2,60(r18)
    3ec4:	80a1c83a 	sub	r16,r16,r2
    3ec8:	003fb106 	br	3d90 <_fflush_r+0x78>
    3ecc:	91400717 	ldw	r5,28(r18)
    3ed0:	9809883a 	mov	r4,r19
    3ed4:	000d883a 	mov	r6,zero
    3ed8:	01c00044 	movi	r7,1
    3edc:	403ee83a 	callr	r8
    3ee0:	1021883a 	mov	r16,r2
    3ee4:	00bfffc4 	movi	r2,-1
    3ee8:	80800226 	beq	r16,r2,3ef4 <_fflush_r+0x1dc>
    3eec:	92000a17 	ldw	r8,40(r18)
    3ef0:	003fa406 	br	3d84 <_fflush_r+0x6c>
    3ef4:	98c00017 	ldw	r3,0(r19)
    3ef8:	00800744 	movi	r2,29
    3efc:	18bfde26 	beq	r3,r2,3e78 <_fflush_r+0x160>
    3f00:	9080030b 	ldhu	r2,12(r18)
    3f04:	8007883a 	mov	r3,r16
    3f08:	10801014 	ori	r2,r2,64
    3f0c:	9080030d 	sth	r2,12(r18)
    3f10:	003fcf06 	br	3e50 <_fflush_r+0x138>

00003f14 <fflush>:
    3f14:	01400034 	movhi	r5,0
    3f18:	294f4604 	addi	r5,r5,15640
    3f1c:	2007883a 	mov	r3,r4
    3f20:	20000526 	beq	r4,zero,3f38 <fflush+0x24>
    3f24:	00800074 	movhi	r2,1
    3f28:	10bba604 	addi	r2,r2,-4456
    3f2c:	11000017 	ldw	r4,0(r2)
    3f30:	180b883a 	mov	r5,r3
    3f34:	0003d181 	jmpi	3d18 <_fflush_r>
    3f38:	00800074 	movhi	r2,1
    3f3c:	10bba704 	addi	r2,r2,-4452
    3f40:	11000017 	ldw	r4,0(r2)
    3f44:	0004ae41 	jmpi	4ae4 <_fwalk_reent>

00003f48 <std>:
    3f48:	00800034 	movhi	r2,0
    3f4c:	109bf004 	addi	r2,r2,28608
    3f50:	20800b15 	stw	r2,44(r4)
    3f54:	00800034 	movhi	r2,0
    3f58:	109c2b04 	addi	r2,r2,28844
    3f5c:	20800815 	stw	r2,32(r4)
    3f60:	00c00034 	movhi	r3,0
    3f64:	18dc0c04 	addi	r3,r3,28720
    3f68:	00800034 	movhi	r2,0
    3f6c:	109bf204 	addi	r2,r2,28616
    3f70:	2140030d 	sth	r5,12(r4)
    3f74:	2180038d 	sth	r6,14(r4)
    3f78:	20c00915 	stw	r3,36(r4)
    3f7c:	20800a15 	stw	r2,40(r4)
    3f80:	20000015 	stw	zero,0(r4)
    3f84:	20000115 	stw	zero,4(r4)
    3f88:	20000215 	stw	zero,8(r4)
    3f8c:	20000415 	stw	zero,16(r4)
    3f90:	20000515 	stw	zero,20(r4)
    3f94:	20000615 	stw	zero,24(r4)
    3f98:	21000715 	stw	r4,28(r4)
    3f9c:	f800283a 	ret

00003fa0 <__sfp_lock_acquire>:
    3fa0:	f800283a 	ret

00003fa4 <__sfp_lock_release>:
    3fa4:	f800283a 	ret

00003fa8 <__sinit_lock_acquire>:
    3fa8:	f800283a 	ret

00003fac <__sinit_lock_release>:
    3fac:	f800283a 	ret

00003fb0 <__sinit>:
    3fb0:	20800e17 	ldw	r2,56(r4)
    3fb4:	defffd04 	addi	sp,sp,-12
    3fb8:	dc400115 	stw	r17,4(sp)
    3fbc:	dc000015 	stw	r16,0(sp)
    3fc0:	dfc00215 	stw	ra,8(sp)
    3fc4:	04400044 	movi	r17,1
    3fc8:	01400104 	movi	r5,4
    3fcc:	000d883a 	mov	r6,zero
    3fd0:	2021883a 	mov	r16,r4
    3fd4:	2200bb04 	addi	r8,r4,748
    3fd8:	200f883a 	mov	r7,r4
    3fdc:	10000526 	beq	r2,zero,3ff4 <__sinit+0x44>
    3fe0:	dfc00217 	ldw	ra,8(sp)
    3fe4:	dc400117 	ldw	r17,4(sp)
    3fe8:	dc000017 	ldw	r16,0(sp)
    3fec:	dec00304 	addi	sp,sp,12
    3ff0:	f800283a 	ret
    3ff4:	21000117 	ldw	r4,4(r4)
    3ff8:	00800034 	movhi	r2,0
    3ffc:	10902504 	addi	r2,r2,16532
    4000:	00c000c4 	movi	r3,3
    4004:	80800f15 	stw	r2,60(r16)
    4008:	80c0b915 	stw	r3,740(r16)
    400c:	8200ba15 	stw	r8,744(r16)
    4010:	84400e15 	stw	r17,56(r16)
    4014:	8000b815 	stw	zero,736(r16)
    4018:	0003f480 	call	3f48 <std>
    401c:	81000217 	ldw	r4,8(r16)
    4020:	880d883a 	mov	r6,r17
    4024:	800f883a 	mov	r7,r16
    4028:	01400284 	movi	r5,10
    402c:	0003f480 	call	3f48 <std>
    4030:	81000317 	ldw	r4,12(r16)
    4034:	800f883a 	mov	r7,r16
    4038:	01400484 	movi	r5,18
    403c:	01800084 	movi	r6,2
    4040:	dfc00217 	ldw	ra,8(sp)
    4044:	dc400117 	ldw	r17,4(sp)
    4048:	dc000017 	ldw	r16,0(sp)
    404c:	dec00304 	addi	sp,sp,12
    4050:	0003f481 	jmpi	3f48 <std>

00004054 <__fp_lock>:
    4054:	0005883a 	mov	r2,zero
    4058:	f800283a 	ret

0000405c <__fp_unlock>:
    405c:	0005883a 	mov	r2,zero
    4060:	f800283a 	ret

00004064 <__fp_unlock_all>:
    4064:	00800074 	movhi	r2,1
    4068:	10bba604 	addi	r2,r2,-4456
    406c:	11000017 	ldw	r4,0(r2)
    4070:	01400034 	movhi	r5,0
    4074:	29501704 	addi	r5,r5,16476
    4078:	0004bac1 	jmpi	4bac <_fwalk>

0000407c <__fp_lock_all>:
    407c:	00800074 	movhi	r2,1
    4080:	10bba604 	addi	r2,r2,-4456
    4084:	11000017 	ldw	r4,0(r2)
    4088:	01400034 	movhi	r5,0
    408c:	29501504 	addi	r5,r5,16468
    4090:	0004bac1 	jmpi	4bac <_fwalk>

00004094 <_cleanup_r>:
    4094:	01400034 	movhi	r5,0
    4098:	295d1d04 	addi	r5,r5,29812
    409c:	0004bac1 	jmpi	4bac <_fwalk>

000040a0 <_cleanup>:
    40a0:	00800074 	movhi	r2,1
    40a4:	10bba704 	addi	r2,r2,-4452
    40a8:	11000017 	ldw	r4,0(r2)
    40ac:	00040941 	jmpi	4094 <_cleanup_r>

000040b0 <__sfmoreglue>:
    40b0:	defffc04 	addi	sp,sp,-16
    40b4:	dc400115 	stw	r17,4(sp)
    40b8:	2c401724 	muli	r17,r5,92
    40bc:	dc800215 	stw	r18,8(sp)
    40c0:	2825883a 	mov	r18,r5
    40c4:	89400304 	addi	r5,r17,12
    40c8:	dc000015 	stw	r16,0(sp)
    40cc:	dfc00315 	stw	ra,12(sp)
    40d0:	0004ebc0 	call	4ebc <_malloc_r>
    40d4:	0021883a 	mov	r16,zero
    40d8:	880d883a 	mov	r6,r17
    40dc:	000b883a 	mov	r5,zero
    40e0:	10000626 	beq	r2,zero,40fc <__sfmoreglue+0x4c>
    40e4:	11000304 	addi	r4,r2,12
    40e8:	14800115 	stw	r18,4(r2)
    40ec:	10000015 	stw	zero,0(r2)
    40f0:	11000215 	stw	r4,8(r2)
    40f4:	1021883a 	mov	r16,r2
    40f8:	00058600 	call	5860 <memset>
    40fc:	8005883a 	mov	r2,r16
    4100:	dfc00317 	ldw	ra,12(sp)
    4104:	dc800217 	ldw	r18,8(sp)
    4108:	dc400117 	ldw	r17,4(sp)
    410c:	dc000017 	ldw	r16,0(sp)
    4110:	dec00404 	addi	sp,sp,16
    4114:	f800283a 	ret

00004118 <__sfp>:
    4118:	defffd04 	addi	sp,sp,-12
    411c:	00800074 	movhi	r2,1
    4120:	10bba704 	addi	r2,r2,-4452
    4124:	dc000015 	stw	r16,0(sp)
    4128:	14000017 	ldw	r16,0(r2)
    412c:	dc400115 	stw	r17,4(sp)
    4130:	dfc00215 	stw	ra,8(sp)
    4134:	80800e17 	ldw	r2,56(r16)
    4138:	2023883a 	mov	r17,r4
    413c:	10002626 	beq	r2,zero,41d8 <__sfp+0xc0>
    4140:	8400b804 	addi	r16,r16,736
    4144:	80800117 	ldw	r2,4(r16)
    4148:	81000217 	ldw	r4,8(r16)
    414c:	10ffffc4 	addi	r3,r2,-1
    4150:	18000916 	blt	r3,zero,4178 <__sfp+0x60>
    4154:	2080030f 	ldh	r2,12(r4)
    4158:	10000b26 	beq	r2,zero,4188 <__sfp+0x70>
    415c:	017fffc4 	movi	r5,-1
    4160:	00000206 	br	416c <__sfp+0x54>
    4164:	2080030f 	ldh	r2,12(r4)
    4168:	10000726 	beq	r2,zero,4188 <__sfp+0x70>
    416c:	18ffffc4 	addi	r3,r3,-1
    4170:	21001704 	addi	r4,r4,92
    4174:	197ffb1e 	bne	r3,r5,4164 <__sfp+0x4c>
    4178:	80800017 	ldw	r2,0(r16)
    417c:	10001926 	beq	r2,zero,41e4 <__sfp+0xcc>
    4180:	1021883a 	mov	r16,r2
    4184:	003fef06 	br	4144 <__sfp+0x2c>
    4188:	00bfffc4 	movi	r2,-1
    418c:	00c00044 	movi	r3,1
    4190:	2080038d 	sth	r2,14(r4)
    4194:	20c0030d 	sth	r3,12(r4)
    4198:	20000015 	stw	zero,0(r4)
    419c:	20000215 	stw	zero,8(r4)
    41a0:	20000115 	stw	zero,4(r4)
    41a4:	20000415 	stw	zero,16(r4)
    41a8:	20000515 	stw	zero,20(r4)
    41ac:	20000615 	stw	zero,24(r4)
    41b0:	20000c15 	stw	zero,48(r4)
    41b4:	20000d15 	stw	zero,52(r4)
    41b8:	20001115 	stw	zero,68(r4)
    41bc:	20001215 	stw	zero,72(r4)
    41c0:	2005883a 	mov	r2,r4
    41c4:	dfc00217 	ldw	ra,8(sp)
    41c8:	dc400117 	ldw	r17,4(sp)
    41cc:	dc000017 	ldw	r16,0(sp)
    41d0:	dec00304 	addi	sp,sp,12
    41d4:	f800283a 	ret
    41d8:	8009883a 	mov	r4,r16
    41dc:	0003fb00 	call	3fb0 <__sinit>
    41e0:	003fd706 	br	4140 <__sfp+0x28>
    41e4:	8809883a 	mov	r4,r17
    41e8:	01400104 	movi	r5,4
    41ec:	00040b00 	call	40b0 <__sfmoreglue>
    41f0:	80800015 	stw	r2,0(r16)
    41f4:	103fe21e 	bne	r2,zero,4180 <__sfp+0x68>
    41f8:	00800304 	movi	r2,12
    41fc:	0009883a 	mov	r4,zero
    4200:	88800015 	stw	r2,0(r17)
    4204:	003fee06 	br	41c0 <__sfp+0xa8>

00004208 <_malloc_trim_r>:
    4208:	defffb04 	addi	sp,sp,-20
    420c:	dcc00315 	stw	r19,12(sp)
    4210:	04c00074 	movhi	r19,1
    4214:	9cf5c004 	addi	r19,r19,-10496
    4218:	dc800215 	stw	r18,8(sp)
    421c:	dc400115 	stw	r17,4(sp)
    4220:	dc000015 	stw	r16,0(sp)
    4224:	2823883a 	mov	r17,r5
    4228:	2025883a 	mov	r18,r4
    422c:	dfc00415 	stw	ra,16(sp)
    4230:	000a1100 	call	a110 <__malloc_lock>
    4234:	98800217 	ldw	r2,8(r19)
    4238:	9009883a 	mov	r4,r18
    423c:	000b883a 	mov	r5,zero
    4240:	10c00117 	ldw	r3,4(r2)
    4244:	00bfff04 	movi	r2,-4
    4248:	18a0703a 	and	r16,r3,r2
    424c:	8463c83a 	sub	r17,r16,r17
    4250:	8c43fbc4 	addi	r17,r17,4079
    4254:	8822d33a 	srli	r17,r17,12
    4258:	0083ffc4 	movi	r2,4095
    425c:	8c7fffc4 	addi	r17,r17,-1
    4260:	8822933a 	slli	r17,r17,12
    4264:	1440060e 	bge	r2,r17,4280 <_malloc_trim_r+0x78>
    4268:	0006f500 	call	6f50 <_sbrk_r>
    426c:	98c00217 	ldw	r3,8(r19)
    4270:	9009883a 	mov	r4,r18
    4274:	044bc83a 	sub	r5,zero,r17
    4278:	80c7883a 	add	r3,r16,r3
    427c:	10c00926 	beq	r2,r3,42a4 <_malloc_trim_r+0x9c>
    4280:	000a1300 	call	a130 <__malloc_unlock>
    4284:	0005883a 	mov	r2,zero
    4288:	dfc00417 	ldw	ra,16(sp)
    428c:	dcc00317 	ldw	r19,12(sp)
    4290:	dc800217 	ldw	r18,8(sp)
    4294:	dc400117 	ldw	r17,4(sp)
    4298:	dc000017 	ldw	r16,0(sp)
    429c:	dec00504 	addi	sp,sp,20
    42a0:	f800283a 	ret
    42a4:	9009883a 	mov	r4,r18
    42a8:	0006f500 	call	6f50 <_sbrk_r>
    42ac:	844dc83a 	sub	r6,r16,r17
    42b0:	00ffffc4 	movi	r3,-1
    42b4:	9009883a 	mov	r4,r18
    42b8:	000b883a 	mov	r5,zero
    42bc:	01c00074 	movhi	r7,1
    42c0:	39c2bc04 	addi	r7,r7,2800
    42c4:	31800054 	ori	r6,r6,1
    42c8:	10c00926 	beq	r2,r3,42f0 <_malloc_trim_r+0xe8>
    42cc:	38800017 	ldw	r2,0(r7)
    42d0:	98c00217 	ldw	r3,8(r19)
    42d4:	9009883a 	mov	r4,r18
    42d8:	1445c83a 	sub	r2,r2,r17
    42dc:	38800015 	stw	r2,0(r7)
    42e0:	19800115 	stw	r6,4(r3)
    42e4:	000a1300 	call	a130 <__malloc_unlock>
    42e8:	00800044 	movi	r2,1
    42ec:	003fe606 	br	4288 <_malloc_trim_r+0x80>
    42f0:	0006f500 	call	6f50 <_sbrk_r>
    42f4:	99800217 	ldw	r6,8(r19)
    42f8:	100f883a 	mov	r7,r2
    42fc:	9009883a 	mov	r4,r18
    4300:	1187c83a 	sub	r3,r2,r6
    4304:	008003c4 	movi	r2,15
    4308:	19400054 	ori	r5,r3,1
    430c:	10ffdc0e 	bge	r2,r3,4280 <_malloc_trim_r+0x78>
    4310:	00800074 	movhi	r2,1
    4314:	10bbab04 	addi	r2,r2,-4436
    4318:	10c00017 	ldw	r3,0(r2)
    431c:	00800074 	movhi	r2,1
    4320:	1082bc04 	addi	r2,r2,2800
    4324:	31400115 	stw	r5,4(r6)
    4328:	38c7c83a 	sub	r3,r7,r3
    432c:	10c00015 	stw	r3,0(r2)
    4330:	003fd306 	br	4280 <_malloc_trim_r+0x78>

00004334 <_free_r>:
    4334:	defffd04 	addi	sp,sp,-12
    4338:	dc400115 	stw	r17,4(sp)
    433c:	dc000015 	stw	r16,0(sp)
    4340:	dfc00215 	stw	ra,8(sp)
    4344:	2821883a 	mov	r16,r5
    4348:	2023883a 	mov	r17,r4
    434c:	28005a26 	beq	r5,zero,44b8 <_free_r+0x184>
    4350:	000a1100 	call	a110 <__malloc_lock>
    4354:	823ffe04 	addi	r8,r16,-8
    4358:	41400117 	ldw	r5,4(r8)
    435c:	00bfff84 	movi	r2,-2
    4360:	02800074 	movhi	r10,1
    4364:	52b5c004 	addi	r10,r10,-10496
    4368:	288e703a 	and	r7,r5,r2
    436c:	41cd883a 	add	r6,r8,r7
    4370:	30c00117 	ldw	r3,4(r6)
    4374:	51000217 	ldw	r4,8(r10)
    4378:	00bfff04 	movi	r2,-4
    437c:	1892703a 	and	r9,r3,r2
    4380:	5017883a 	mov	r11,r10
    4384:	31006726 	beq	r6,r4,4524 <_free_r+0x1f0>
    4388:	2880004c 	andi	r2,r5,1
    438c:	1005003a 	cmpeq	r2,r2,zero
    4390:	32400115 	stw	r9,4(r6)
    4394:	10001a1e 	bne	r2,zero,4400 <_free_r+0xcc>
    4398:	000b883a 	mov	r5,zero
    439c:	3247883a 	add	r3,r6,r9
    43a0:	18800117 	ldw	r2,4(r3)
    43a4:	1080004c 	andi	r2,r2,1
    43a8:	1000231e 	bne	r2,zero,4438 <_free_r+0x104>
    43ac:	280ac03a 	cmpne	r5,r5,zero
    43b0:	3a4f883a 	add	r7,r7,r9
    43b4:	2800451e 	bne	r5,zero,44cc <_free_r+0x198>
    43b8:	31000217 	ldw	r4,8(r6)
    43bc:	00800074 	movhi	r2,1
    43c0:	10b5c204 	addi	r2,r2,-10488
    43c4:	20807b26 	beq	r4,r2,45b4 <_free_r+0x280>
    43c8:	30800317 	ldw	r2,12(r6)
    43cc:	3a07883a 	add	r3,r7,r8
    43d0:	19c00015 	stw	r7,0(r3)
    43d4:	11000215 	stw	r4,8(r2)
    43d8:	20800315 	stw	r2,12(r4)
    43dc:	38800054 	ori	r2,r7,1
    43e0:	40800115 	stw	r2,4(r8)
    43e4:	28001a26 	beq	r5,zero,4450 <_free_r+0x11c>
    43e8:	8809883a 	mov	r4,r17
    43ec:	dfc00217 	ldw	ra,8(sp)
    43f0:	dc400117 	ldw	r17,4(sp)
    43f4:	dc000017 	ldw	r16,0(sp)
    43f8:	dec00304 	addi	sp,sp,12
    43fc:	000a1301 	jmpi	a130 <__malloc_unlock>
    4400:	80bffe17 	ldw	r2,-8(r16)
    4404:	50c00204 	addi	r3,r10,8
    4408:	4091c83a 	sub	r8,r8,r2
    440c:	41000217 	ldw	r4,8(r8)
    4410:	388f883a 	add	r7,r7,r2
    4414:	20c06126 	beq	r4,r3,459c <_free_r+0x268>
    4418:	40800317 	ldw	r2,12(r8)
    441c:	3247883a 	add	r3,r6,r9
    4420:	000b883a 	mov	r5,zero
    4424:	11000215 	stw	r4,8(r2)
    4428:	20800315 	stw	r2,12(r4)
    442c:	18800117 	ldw	r2,4(r3)
    4430:	1080004c 	andi	r2,r2,1
    4434:	103fdd26 	beq	r2,zero,43ac <_free_r+0x78>
    4438:	38800054 	ori	r2,r7,1
    443c:	3a07883a 	add	r3,r7,r8
    4440:	280ac03a 	cmpne	r5,r5,zero
    4444:	40800115 	stw	r2,4(r8)
    4448:	19c00015 	stw	r7,0(r3)
    444c:	283fe61e 	bne	r5,zero,43e8 <_free_r+0xb4>
    4450:	00807fc4 	movi	r2,511
    4454:	11c01f2e 	bgeu	r2,r7,44d4 <_free_r+0x1a0>
    4458:	3806d27a 	srli	r3,r7,9
    445c:	1800481e 	bne	r3,zero,4580 <_free_r+0x24c>
    4460:	3804d0fa 	srli	r2,r7,3
    4464:	100690fa 	slli	r3,r2,3
    4468:	1acd883a 	add	r6,r3,r11
    446c:	31400217 	ldw	r5,8(r6)
    4470:	31405926 	beq	r6,r5,45d8 <_free_r+0x2a4>
    4474:	28800117 	ldw	r2,4(r5)
    4478:	00ffff04 	movi	r3,-4
    447c:	10c4703a 	and	r2,r2,r3
    4480:	3880022e 	bgeu	r7,r2,448c <_free_r+0x158>
    4484:	29400217 	ldw	r5,8(r5)
    4488:	317ffa1e 	bne	r6,r5,4474 <_free_r+0x140>
    448c:	29800317 	ldw	r6,12(r5)
    4490:	41800315 	stw	r6,12(r8)
    4494:	41400215 	stw	r5,8(r8)
    4498:	8809883a 	mov	r4,r17
    449c:	2a000315 	stw	r8,12(r5)
    44a0:	32000215 	stw	r8,8(r6)
    44a4:	dfc00217 	ldw	ra,8(sp)
    44a8:	dc400117 	ldw	r17,4(sp)
    44ac:	dc000017 	ldw	r16,0(sp)
    44b0:	dec00304 	addi	sp,sp,12
    44b4:	000a1301 	jmpi	a130 <__malloc_unlock>
    44b8:	dfc00217 	ldw	ra,8(sp)
    44bc:	dc400117 	ldw	r17,4(sp)
    44c0:	dc000017 	ldw	r16,0(sp)
    44c4:	dec00304 	addi	sp,sp,12
    44c8:	f800283a 	ret
    44cc:	31000217 	ldw	r4,8(r6)
    44d0:	003fbd06 	br	43c8 <_free_r+0x94>
    44d4:	3806d0fa 	srli	r3,r7,3
    44d8:	00800044 	movi	r2,1
    44dc:	51400117 	ldw	r5,4(r10)
    44e0:	180890fa 	slli	r4,r3,3
    44e4:	1807d0ba 	srai	r3,r3,2
    44e8:	22c9883a 	add	r4,r4,r11
    44ec:	21800217 	ldw	r6,8(r4)
    44f0:	10c4983a 	sll	r2,r2,r3
    44f4:	41000315 	stw	r4,12(r8)
    44f8:	41800215 	stw	r6,8(r8)
    44fc:	288ab03a 	or	r5,r5,r2
    4500:	22000215 	stw	r8,8(r4)
    4504:	8809883a 	mov	r4,r17
    4508:	51400115 	stw	r5,4(r10)
    450c:	32000315 	stw	r8,12(r6)
    4510:	dfc00217 	ldw	ra,8(sp)
    4514:	dc400117 	ldw	r17,4(sp)
    4518:	dc000017 	ldw	r16,0(sp)
    451c:	dec00304 	addi	sp,sp,12
    4520:	000a1301 	jmpi	a130 <__malloc_unlock>
    4524:	2880004c 	andi	r2,r5,1
    4528:	3a4d883a 	add	r6,r7,r9
    452c:	1000071e 	bne	r2,zero,454c <_free_r+0x218>
    4530:	80bffe17 	ldw	r2,-8(r16)
    4534:	4091c83a 	sub	r8,r8,r2
    4538:	41000317 	ldw	r4,12(r8)
    453c:	40c00217 	ldw	r3,8(r8)
    4540:	308d883a 	add	r6,r6,r2
    4544:	20c00215 	stw	r3,8(r4)
    4548:	19000315 	stw	r4,12(r3)
    454c:	00800074 	movhi	r2,1
    4550:	10bbaa04 	addi	r2,r2,-4440
    4554:	11000017 	ldw	r4,0(r2)
    4558:	30c00054 	ori	r3,r6,1
    455c:	52000215 	stw	r8,8(r10)
    4560:	40c00115 	stw	r3,4(r8)
    4564:	313fa036 	bltu	r6,r4,43e8 <_free_r+0xb4>
    4568:	00800074 	movhi	r2,1
    456c:	1082b204 	addi	r2,r2,2760
    4570:	11400017 	ldw	r5,0(r2)
    4574:	8809883a 	mov	r4,r17
    4578:	00042080 	call	4208 <_malloc_trim_r>
    457c:	003f9a06 	br	43e8 <_free_r+0xb4>
    4580:	00800104 	movi	r2,4
    4584:	10c0072e 	bgeu	r2,r3,45a4 <_free_r+0x270>
    4588:	00800504 	movi	r2,20
    458c:	10c01936 	bltu	r2,r3,45f4 <_free_r+0x2c0>
    4590:	188016c4 	addi	r2,r3,91
    4594:	100690fa 	slli	r3,r2,3
    4598:	003fb306 	br	4468 <_free_r+0x134>
    459c:	01400044 	movi	r5,1
    45a0:	003f7e06 	br	439c <_free_r+0x68>
    45a4:	3804d1ba 	srli	r2,r7,6
    45a8:	10800e04 	addi	r2,r2,56
    45ac:	100690fa 	slli	r3,r2,3
    45b0:	003fad06 	br	4468 <_free_r+0x134>
    45b4:	22000315 	stw	r8,12(r4)
    45b8:	22000215 	stw	r8,8(r4)
    45bc:	3a05883a 	add	r2,r7,r8
    45c0:	38c00054 	ori	r3,r7,1
    45c4:	11c00015 	stw	r7,0(r2)
    45c8:	41000215 	stw	r4,8(r8)
    45cc:	40c00115 	stw	r3,4(r8)
    45d0:	41000315 	stw	r4,12(r8)
    45d4:	003f8406 	br	43e8 <_free_r+0xb4>
    45d8:	1005d0ba 	srai	r2,r2,2
    45dc:	00c00044 	movi	r3,1
    45e0:	51000117 	ldw	r4,4(r10)
    45e4:	1886983a 	sll	r3,r3,r2
    45e8:	20c8b03a 	or	r4,r4,r3
    45ec:	51000115 	stw	r4,4(r10)
    45f0:	003fa706 	br	4490 <_free_r+0x15c>
    45f4:	00801504 	movi	r2,84
    45f8:	10c00436 	bltu	r2,r3,460c <_free_r+0x2d8>
    45fc:	3804d33a 	srli	r2,r7,12
    4600:	10801b84 	addi	r2,r2,110
    4604:	100690fa 	slli	r3,r2,3
    4608:	003f9706 	br	4468 <_free_r+0x134>
    460c:	00805504 	movi	r2,340
    4610:	10c00436 	bltu	r2,r3,4624 <_free_r+0x2f0>
    4614:	3804d3fa 	srli	r2,r7,15
    4618:	10801dc4 	addi	r2,r2,119
    461c:	100690fa 	slli	r3,r2,3
    4620:	003f9106 	br	4468 <_free_r+0x134>
    4624:	00815504 	movi	r2,1364
    4628:	10c0032e 	bgeu	r2,r3,4638 <_free_r+0x304>
    462c:	00801f84 	movi	r2,126
    4630:	00c0fc04 	movi	r3,1008
    4634:	003f8c06 	br	4468 <_free_r+0x134>
    4638:	3804d4ba 	srli	r2,r7,18
    463c:	10801f04 	addi	r2,r2,124
    4640:	100690fa 	slli	r3,r2,3
    4644:	003f8806 	br	4468 <_free_r+0x134>

00004648 <__sfvwrite_r>:
    4648:	30800217 	ldw	r2,8(r6)
    464c:	defff504 	addi	sp,sp,-44
    4650:	df000915 	stw	fp,36(sp)
    4654:	dd800715 	stw	r22,28(sp)
    4658:	dc800315 	stw	r18,12(sp)
    465c:	dfc00a15 	stw	ra,40(sp)
    4660:	ddc00815 	stw	r23,32(sp)
    4664:	dd400615 	stw	r21,24(sp)
    4668:	dd000515 	stw	r20,20(sp)
    466c:	dcc00415 	stw	r19,16(sp)
    4670:	dc400215 	stw	r17,8(sp)
    4674:	dc000115 	stw	r16,4(sp)
    4678:	302d883a 	mov	r22,r6
    467c:	2039883a 	mov	fp,r4
    4680:	2825883a 	mov	r18,r5
    4684:	10001c26 	beq	r2,zero,46f8 <__sfvwrite_r+0xb0>
    4688:	29c0030b 	ldhu	r7,12(r5)
    468c:	3880020c 	andi	r2,r7,8
    4690:	10002726 	beq	r2,zero,4730 <__sfvwrite_r+0xe8>
    4694:	28800417 	ldw	r2,16(r5)
    4698:	10002526 	beq	r2,zero,4730 <__sfvwrite_r+0xe8>
    469c:	3880008c 	andi	r2,r7,2
    46a0:	b5400017 	ldw	r21,0(r22)
    46a4:	10002826 	beq	r2,zero,4748 <__sfvwrite_r+0x100>
    46a8:	0021883a 	mov	r16,zero
    46ac:	0023883a 	mov	r17,zero
    46b0:	880d883a 	mov	r6,r17
    46b4:	e009883a 	mov	r4,fp
    46b8:	00810004 	movi	r2,1024
    46bc:	80006e26 	beq	r16,zero,4878 <__sfvwrite_r+0x230>
    46c0:	800f883a 	mov	r7,r16
    46c4:	91400717 	ldw	r5,28(r18)
    46c8:	1400012e 	bgeu	r2,r16,46d0 <__sfvwrite_r+0x88>
    46cc:	100f883a 	mov	r7,r2
    46d0:	90c00917 	ldw	r3,36(r18)
    46d4:	183ee83a 	callr	r3
    46d8:	1007883a 	mov	r3,r2
    46dc:	80a1c83a 	sub	r16,r16,r2
    46e0:	88a3883a 	add	r17,r17,r2
    46e4:	00806d0e 	bge	zero,r2,489c <__sfvwrite_r+0x254>
    46e8:	b0800217 	ldw	r2,8(r22)
    46ec:	10c5c83a 	sub	r2,r2,r3
    46f0:	b0800215 	stw	r2,8(r22)
    46f4:	103fee1e 	bne	r2,zero,46b0 <__sfvwrite_r+0x68>
    46f8:	0009883a 	mov	r4,zero
    46fc:	2005883a 	mov	r2,r4
    4700:	dfc00a17 	ldw	ra,40(sp)
    4704:	df000917 	ldw	fp,36(sp)
    4708:	ddc00817 	ldw	r23,32(sp)
    470c:	dd800717 	ldw	r22,28(sp)
    4710:	dd400617 	ldw	r21,24(sp)
    4714:	dd000517 	ldw	r20,20(sp)
    4718:	dcc00417 	ldw	r19,16(sp)
    471c:	dc800317 	ldw	r18,12(sp)
    4720:	dc400217 	ldw	r17,8(sp)
    4724:	dc000117 	ldw	r16,4(sp)
    4728:	dec00b04 	addi	sp,sp,44
    472c:	f800283a 	ret
    4730:	00024100 	call	2410 <__swsetup_r>
    4734:	1000e41e 	bne	r2,zero,4ac8 <__sfvwrite_r+0x480>
    4738:	91c0030b 	ldhu	r7,12(r18)
    473c:	b5400017 	ldw	r21,0(r22)
    4740:	3880008c 	andi	r2,r7,2
    4744:	103fd81e 	bne	r2,zero,46a8 <__sfvwrite_r+0x60>
    4748:	3880004c 	andi	r2,r7,1
    474c:	1005003a 	cmpeq	r2,r2,zero
    4750:	10005726 	beq	r2,zero,48b0 <__sfvwrite_r+0x268>
    4754:	0029883a 	mov	r20,zero
    4758:	002f883a 	mov	r23,zero
    475c:	a0004226 	beq	r20,zero,4868 <__sfvwrite_r+0x220>
    4760:	3880800c 	andi	r2,r7,512
    4764:	94000217 	ldw	r16,8(r18)
    4768:	10008b26 	beq	r2,zero,4998 <__sfvwrite_r+0x350>
    476c:	800d883a 	mov	r6,r16
    4770:	a400a536 	bltu	r20,r16,4a08 <__sfvwrite_r+0x3c0>
    4774:	3881200c 	andi	r2,r7,1152
    4778:	10002726 	beq	r2,zero,4818 <__sfvwrite_r+0x1d0>
    477c:	90800517 	ldw	r2,20(r18)
    4780:	92000417 	ldw	r8,16(r18)
    4784:	91400017 	ldw	r5,0(r18)
    4788:	1087883a 	add	r3,r2,r2
    478c:	1887883a 	add	r3,r3,r2
    4790:	1808d7fa 	srli	r4,r3,31
    4794:	2a21c83a 	sub	r16,r5,r8
    4798:	80800044 	addi	r2,r16,1
    479c:	20c9883a 	add	r4,r4,r3
    47a0:	2027d07a 	srai	r19,r4,1
    47a4:	a085883a 	add	r2,r20,r2
    47a8:	980d883a 	mov	r6,r19
    47ac:	9880022e 	bgeu	r19,r2,47b8 <__sfvwrite_r+0x170>
    47b0:	1027883a 	mov	r19,r2
    47b4:	100d883a 	mov	r6,r2
    47b8:	3881000c 	andi	r2,r7,1024
    47bc:	1000b826 	beq	r2,zero,4aa0 <__sfvwrite_r+0x458>
    47c0:	300b883a 	mov	r5,r6
    47c4:	e009883a 	mov	r4,fp
    47c8:	0004ebc0 	call	4ebc <_malloc_r>
    47cc:	10003126 	beq	r2,zero,4894 <__sfvwrite_r+0x24c>
    47d0:	91400417 	ldw	r5,16(r18)
    47d4:	1009883a 	mov	r4,r2
    47d8:	800d883a 	mov	r6,r16
    47dc:	1023883a 	mov	r17,r2
    47e0:	00056e00 	call	56e0 <memcpy>
    47e4:	90c0030b 	ldhu	r3,12(r18)
    47e8:	00beffc4 	movi	r2,-1025
    47ec:	1886703a 	and	r3,r3,r2
    47f0:	18c02014 	ori	r3,r3,128
    47f4:	90c0030d 	sth	r3,12(r18)
    47f8:	9c07c83a 	sub	r3,r19,r16
    47fc:	8c05883a 	add	r2,r17,r16
    4800:	a00d883a 	mov	r6,r20
    4804:	a021883a 	mov	r16,r20
    4808:	90800015 	stw	r2,0(r18)
    480c:	90c00215 	stw	r3,8(r18)
    4810:	94400415 	stw	r17,16(r18)
    4814:	94c00515 	stw	r19,20(r18)
    4818:	91000017 	ldw	r4,0(r18)
    481c:	b80b883a 	mov	r5,r23
    4820:	a023883a 	mov	r17,r20
    4824:	00057800 	call	5780 <memmove>
    4828:	90c00217 	ldw	r3,8(r18)
    482c:	90800017 	ldw	r2,0(r18)
    4830:	a027883a 	mov	r19,r20
    4834:	1c07c83a 	sub	r3,r3,r16
    4838:	1405883a 	add	r2,r2,r16
    483c:	90c00215 	stw	r3,8(r18)
    4840:	a021883a 	mov	r16,r20
    4844:	90800015 	stw	r2,0(r18)
    4848:	b0800217 	ldw	r2,8(r22)
    484c:	1405c83a 	sub	r2,r2,r16
    4850:	b0800215 	stw	r2,8(r22)
    4854:	103fa826 	beq	r2,zero,46f8 <__sfvwrite_r+0xb0>
    4858:	a469c83a 	sub	r20,r20,r17
    485c:	91c0030b 	ldhu	r7,12(r18)
    4860:	bcef883a 	add	r23,r23,r19
    4864:	a03fbe1e 	bne	r20,zero,4760 <__sfvwrite_r+0x118>
    4868:	adc00017 	ldw	r23,0(r21)
    486c:	ad000117 	ldw	r20,4(r21)
    4870:	ad400204 	addi	r21,r21,8
    4874:	003fb906 	br	475c <__sfvwrite_r+0x114>
    4878:	ac400017 	ldw	r17,0(r21)
    487c:	ac000117 	ldw	r16,4(r21)
    4880:	ad400204 	addi	r21,r21,8
    4884:	003f8a06 	br	46b0 <__sfvwrite_r+0x68>
    4888:	91400417 	ldw	r5,16(r18)
    488c:	e009883a 	mov	r4,fp
    4890:	00043340 	call	4334 <_free_r>
    4894:	00800304 	movi	r2,12
    4898:	e0800015 	stw	r2,0(fp)
    489c:	9080030b 	ldhu	r2,12(r18)
    48a0:	013fffc4 	movi	r4,-1
    48a4:	10801014 	ori	r2,r2,64
    48a8:	9080030d 	sth	r2,12(r18)
    48ac:	003f9306 	br	46fc <__sfvwrite_r+0xb4>
    48b0:	0027883a 	mov	r19,zero
    48b4:	002f883a 	mov	r23,zero
    48b8:	d8000015 	stw	zero,0(sp)
    48bc:	0029883a 	mov	r20,zero
    48c0:	98001e26 	beq	r19,zero,493c <__sfvwrite_r+0x2f4>
    48c4:	d8c00017 	ldw	r3,0(sp)
    48c8:	1804c03a 	cmpne	r2,r3,zero
    48cc:	10005e26 	beq	r2,zero,4a48 <__sfvwrite_r+0x400>
    48d0:	9821883a 	mov	r16,r19
    48d4:	a4c0012e 	bgeu	r20,r19,48dc <__sfvwrite_r+0x294>
    48d8:	a021883a 	mov	r16,r20
    48dc:	91000017 	ldw	r4,0(r18)
    48e0:	90800417 	ldw	r2,16(r18)
    48e4:	91800217 	ldw	r6,8(r18)
    48e8:	91c00517 	ldw	r7,20(r18)
    48ec:	1100022e 	bgeu	r2,r4,48f8 <__sfvwrite_r+0x2b0>
    48f0:	31e3883a 	add	r17,r6,r7
    48f4:	8c001616 	blt	r17,r16,4950 <__sfvwrite_r+0x308>
    48f8:	81c03816 	blt	r16,r7,49dc <__sfvwrite_r+0x394>
    48fc:	90c00917 	ldw	r3,36(r18)
    4900:	91400717 	ldw	r5,28(r18)
    4904:	e009883a 	mov	r4,fp
    4908:	b80d883a 	mov	r6,r23
    490c:	183ee83a 	callr	r3
    4910:	1023883a 	mov	r17,r2
    4914:	00bfe10e 	bge	zero,r2,489c <__sfvwrite_r+0x254>
    4918:	a469c83a 	sub	r20,r20,r17
    491c:	a0001826 	beq	r20,zero,4980 <__sfvwrite_r+0x338>
    4920:	b0800217 	ldw	r2,8(r22)
    4924:	1445c83a 	sub	r2,r2,r17
    4928:	b0800215 	stw	r2,8(r22)
    492c:	103f7226 	beq	r2,zero,46f8 <__sfvwrite_r+0xb0>
    4930:	9c67c83a 	sub	r19,r19,r17
    4934:	bc6f883a 	add	r23,r23,r17
    4938:	983fe21e 	bne	r19,zero,48c4 <__sfvwrite_r+0x27c>
    493c:	adc00017 	ldw	r23,0(r21)
    4940:	acc00117 	ldw	r19,4(r21)
    4944:	ad400204 	addi	r21,r21,8
    4948:	d8000015 	stw	zero,0(sp)
    494c:	003fdc06 	br	48c0 <__sfvwrite_r+0x278>
    4950:	b80b883a 	mov	r5,r23
    4954:	880d883a 	mov	r6,r17
    4958:	00057800 	call	5780 <memmove>
    495c:	90c00017 	ldw	r3,0(r18)
    4960:	e009883a 	mov	r4,fp
    4964:	900b883a 	mov	r5,r18
    4968:	1c47883a 	add	r3,r3,r17
    496c:	90c00015 	stw	r3,0(r18)
    4970:	0003d180 	call	3d18 <_fflush_r>
    4974:	103fc91e 	bne	r2,zero,489c <__sfvwrite_r+0x254>
    4978:	a469c83a 	sub	r20,r20,r17
    497c:	a03fe81e 	bne	r20,zero,4920 <__sfvwrite_r+0x2d8>
    4980:	e009883a 	mov	r4,fp
    4984:	900b883a 	mov	r5,r18
    4988:	0003d180 	call	3d18 <_fflush_r>
    498c:	103fc31e 	bne	r2,zero,489c <__sfvwrite_r+0x254>
    4990:	d8000015 	stw	zero,0(sp)
    4994:	003fe206 	br	4920 <__sfvwrite_r+0x2d8>
    4998:	91000017 	ldw	r4,0(r18)
    499c:	90800417 	ldw	r2,16(r18)
    49a0:	1100022e 	bgeu	r2,r4,49ac <__sfvwrite_r+0x364>
    49a4:	8023883a 	mov	r17,r16
    49a8:	85003136 	bltu	r16,r20,4a70 <__sfvwrite_r+0x428>
    49ac:	91c00517 	ldw	r7,20(r18)
    49b0:	a1c01836 	bltu	r20,r7,4a14 <__sfvwrite_r+0x3cc>
    49b4:	90c00917 	ldw	r3,36(r18)
    49b8:	91400717 	ldw	r5,28(r18)
    49bc:	e009883a 	mov	r4,fp
    49c0:	b80d883a 	mov	r6,r23
    49c4:	183ee83a 	callr	r3
    49c8:	1021883a 	mov	r16,r2
    49cc:	00bfb30e 	bge	zero,r2,489c <__sfvwrite_r+0x254>
    49d0:	1023883a 	mov	r17,r2
    49d4:	1027883a 	mov	r19,r2
    49d8:	003f9b06 	br	4848 <__sfvwrite_r+0x200>
    49dc:	b80b883a 	mov	r5,r23
    49e0:	800d883a 	mov	r6,r16
    49e4:	00057800 	call	5780 <memmove>
    49e8:	90c00217 	ldw	r3,8(r18)
    49ec:	90800017 	ldw	r2,0(r18)
    49f0:	8023883a 	mov	r17,r16
    49f4:	1c07c83a 	sub	r3,r3,r16
    49f8:	1405883a 	add	r2,r2,r16
    49fc:	90c00215 	stw	r3,8(r18)
    4a00:	90800015 	stw	r2,0(r18)
    4a04:	003fc406 	br	4918 <__sfvwrite_r+0x2d0>
    4a08:	a00d883a 	mov	r6,r20
    4a0c:	a021883a 	mov	r16,r20
    4a10:	003f8106 	br	4818 <__sfvwrite_r+0x1d0>
    4a14:	b80b883a 	mov	r5,r23
    4a18:	a00d883a 	mov	r6,r20
    4a1c:	00057800 	call	5780 <memmove>
    4a20:	90c00217 	ldw	r3,8(r18)
    4a24:	90800017 	ldw	r2,0(r18)
    4a28:	a021883a 	mov	r16,r20
    4a2c:	1d07c83a 	sub	r3,r3,r20
    4a30:	1505883a 	add	r2,r2,r20
    4a34:	a023883a 	mov	r17,r20
    4a38:	a027883a 	mov	r19,r20
    4a3c:	90c00215 	stw	r3,8(r18)
    4a40:	90800015 	stw	r2,0(r18)
    4a44:	003f8006 	br	4848 <__sfvwrite_r+0x200>
    4a48:	b809883a 	mov	r4,r23
    4a4c:	01400284 	movi	r5,10
    4a50:	980d883a 	mov	r6,r19
    4a54:	00055fc0 	call	55fc <memchr>
    4a58:	10001726 	beq	r2,zero,4ab8 <__sfvwrite_r+0x470>
    4a5c:	15c5c83a 	sub	r2,r2,r23
    4a60:	15000044 	addi	r20,r2,1
    4a64:	00800044 	movi	r2,1
    4a68:	d8800015 	stw	r2,0(sp)
    4a6c:	003f9806 	br	48d0 <__sfvwrite_r+0x288>
    4a70:	b80b883a 	mov	r5,r23
    4a74:	800d883a 	mov	r6,r16
    4a78:	00057800 	call	5780 <memmove>
    4a7c:	90c00017 	ldw	r3,0(r18)
    4a80:	e009883a 	mov	r4,fp
    4a84:	900b883a 	mov	r5,r18
    4a88:	1c07883a 	add	r3,r3,r16
    4a8c:	90c00015 	stw	r3,0(r18)
    4a90:	8027883a 	mov	r19,r16
    4a94:	0003d180 	call	3d18 <_fflush_r>
    4a98:	103f6b26 	beq	r2,zero,4848 <__sfvwrite_r+0x200>
    4a9c:	003f7f06 	br	489c <__sfvwrite_r+0x254>
    4aa0:	400b883a 	mov	r5,r8
    4aa4:	e009883a 	mov	r4,fp
    4aa8:	00068ec0 	call	68ec <_realloc_r>
    4aac:	103f7626 	beq	r2,zero,4888 <__sfvwrite_r+0x240>
    4ab0:	1023883a 	mov	r17,r2
    4ab4:	003f5006 	br	47f8 <__sfvwrite_r+0x1b0>
    4ab8:	00c00044 	movi	r3,1
    4abc:	9d000044 	addi	r20,r19,1
    4ac0:	d8c00015 	stw	r3,0(sp)
    4ac4:	003f8206 	br	48d0 <__sfvwrite_r+0x288>
    4ac8:	9080030b 	ldhu	r2,12(r18)
    4acc:	00c00244 	movi	r3,9
    4ad0:	013fffc4 	movi	r4,-1
    4ad4:	10801014 	ori	r2,r2,64
    4ad8:	9080030d 	sth	r2,12(r18)
    4adc:	e0c00015 	stw	r3,0(fp)
    4ae0:	003f0606 	br	46fc <__sfvwrite_r+0xb4>

00004ae4 <_fwalk_reent>:
    4ae4:	defff704 	addi	sp,sp,-36
    4ae8:	dcc00315 	stw	r19,12(sp)
    4aec:	24c0b804 	addi	r19,r4,736
    4af0:	dd800615 	stw	r22,24(sp)
    4af4:	dd400515 	stw	r21,20(sp)
    4af8:	dfc00815 	stw	ra,32(sp)
    4afc:	ddc00715 	stw	r23,28(sp)
    4b00:	dd000415 	stw	r20,16(sp)
    4b04:	dc800215 	stw	r18,8(sp)
    4b08:	dc400115 	stw	r17,4(sp)
    4b0c:	dc000015 	stw	r16,0(sp)
    4b10:	202b883a 	mov	r21,r4
    4b14:	282d883a 	mov	r22,r5
    4b18:	0003fa00 	call	3fa0 <__sfp_lock_acquire>
    4b1c:	98002126 	beq	r19,zero,4ba4 <_fwalk_reent+0xc0>
    4b20:	002f883a 	mov	r23,zero
    4b24:	9c800117 	ldw	r18,4(r19)
    4b28:	9c000217 	ldw	r16,8(r19)
    4b2c:	90bfffc4 	addi	r2,r18,-1
    4b30:	10000d16 	blt	r2,zero,4b68 <_fwalk_reent+0x84>
    4b34:	0023883a 	mov	r17,zero
    4b38:	053fffc4 	movi	r20,-1
    4b3c:	8080030f 	ldh	r2,12(r16)
    4b40:	8c400044 	addi	r17,r17,1
    4b44:	10000626 	beq	r2,zero,4b60 <_fwalk_reent+0x7c>
    4b48:	8080038f 	ldh	r2,14(r16)
    4b4c:	800b883a 	mov	r5,r16
    4b50:	a809883a 	mov	r4,r21
    4b54:	15000226 	beq	r2,r20,4b60 <_fwalk_reent+0x7c>
    4b58:	b03ee83a 	callr	r22
    4b5c:	b8aeb03a 	or	r23,r23,r2
    4b60:	84001704 	addi	r16,r16,92
    4b64:	947ff51e 	bne	r18,r17,4b3c <_fwalk_reent+0x58>
    4b68:	9cc00017 	ldw	r19,0(r19)
    4b6c:	983fed1e 	bne	r19,zero,4b24 <_fwalk_reent+0x40>
    4b70:	0003fa40 	call	3fa4 <__sfp_lock_release>
    4b74:	b805883a 	mov	r2,r23
    4b78:	dfc00817 	ldw	ra,32(sp)
    4b7c:	ddc00717 	ldw	r23,28(sp)
    4b80:	dd800617 	ldw	r22,24(sp)
    4b84:	dd400517 	ldw	r21,20(sp)
    4b88:	dd000417 	ldw	r20,16(sp)
    4b8c:	dcc00317 	ldw	r19,12(sp)
    4b90:	dc800217 	ldw	r18,8(sp)
    4b94:	dc400117 	ldw	r17,4(sp)
    4b98:	dc000017 	ldw	r16,0(sp)
    4b9c:	dec00904 	addi	sp,sp,36
    4ba0:	f800283a 	ret
    4ba4:	002f883a 	mov	r23,zero
    4ba8:	003ff106 	br	4b70 <_fwalk_reent+0x8c>

00004bac <_fwalk>:
    4bac:	defff804 	addi	sp,sp,-32
    4bb0:	dcc00315 	stw	r19,12(sp)
    4bb4:	24c0b804 	addi	r19,r4,736
    4bb8:	dd400515 	stw	r21,20(sp)
    4bbc:	dfc00715 	stw	ra,28(sp)
    4bc0:	dd800615 	stw	r22,24(sp)
    4bc4:	dd000415 	stw	r20,16(sp)
    4bc8:	dc800215 	stw	r18,8(sp)
    4bcc:	dc400115 	stw	r17,4(sp)
    4bd0:	dc000015 	stw	r16,0(sp)
    4bd4:	282b883a 	mov	r21,r5
    4bd8:	0003fa00 	call	3fa0 <__sfp_lock_acquire>
    4bdc:	98001f26 	beq	r19,zero,4c5c <_fwalk+0xb0>
    4be0:	002d883a 	mov	r22,zero
    4be4:	9c800117 	ldw	r18,4(r19)
    4be8:	9c000217 	ldw	r16,8(r19)
    4bec:	90bfffc4 	addi	r2,r18,-1
    4bf0:	10000c16 	blt	r2,zero,4c24 <_fwalk+0x78>
    4bf4:	0023883a 	mov	r17,zero
    4bf8:	053fffc4 	movi	r20,-1
    4bfc:	8080030f 	ldh	r2,12(r16)
    4c00:	8c400044 	addi	r17,r17,1
    4c04:	10000526 	beq	r2,zero,4c1c <_fwalk+0x70>
    4c08:	8080038f 	ldh	r2,14(r16)
    4c0c:	8009883a 	mov	r4,r16
    4c10:	15000226 	beq	r2,r20,4c1c <_fwalk+0x70>
    4c14:	a83ee83a 	callr	r21
    4c18:	b0acb03a 	or	r22,r22,r2
    4c1c:	84001704 	addi	r16,r16,92
    4c20:	947ff61e 	bne	r18,r17,4bfc <_fwalk+0x50>
    4c24:	9cc00017 	ldw	r19,0(r19)
    4c28:	983fee1e 	bne	r19,zero,4be4 <_fwalk+0x38>
    4c2c:	0003fa40 	call	3fa4 <__sfp_lock_release>
    4c30:	b005883a 	mov	r2,r22
    4c34:	dfc00717 	ldw	ra,28(sp)
    4c38:	dd800617 	ldw	r22,24(sp)
    4c3c:	dd400517 	ldw	r21,20(sp)
    4c40:	dd000417 	ldw	r20,16(sp)
    4c44:	dcc00317 	ldw	r19,12(sp)
    4c48:	dc800217 	ldw	r18,8(sp)
    4c4c:	dc400117 	ldw	r17,4(sp)
    4c50:	dc000017 	ldw	r16,0(sp)
    4c54:	dec00804 	addi	sp,sp,32
    4c58:	f800283a 	ret
    4c5c:	002d883a 	mov	r22,zero
    4c60:	003ff206 	br	4c2c <_fwalk+0x80>

00004c64 <__locale_charset>:
    4c64:	d0a00317 	ldw	r2,-32756(gp)
    4c68:	f800283a 	ret

00004c6c <_localeconv_r>:
    4c6c:	00800074 	movhi	r2,1
    4c70:	10b40e04 	addi	r2,r2,-12232
    4c74:	f800283a 	ret

00004c78 <localeconv>:
    4c78:	00800074 	movhi	r2,1
    4c7c:	10bba604 	addi	r2,r2,-4456
    4c80:	11000017 	ldw	r4,0(r2)
    4c84:	0004c6c1 	jmpi	4c6c <_localeconv_r>

00004c88 <_setlocale_r>:
    4c88:	defffc04 	addi	sp,sp,-16
    4c8c:	00c00074 	movhi	r3,1
    4c90:	18f40904 	addi	r3,r3,-12252
    4c94:	dc800215 	stw	r18,8(sp)
    4c98:	dc400115 	stw	r17,4(sp)
    4c9c:	dc000015 	stw	r16,0(sp)
    4ca0:	2023883a 	mov	r17,r4
    4ca4:	2825883a 	mov	r18,r5
    4ca8:	dfc00315 	stw	ra,12(sp)
    4cac:	3021883a 	mov	r16,r6
    4cb0:	3009883a 	mov	r4,r6
    4cb4:	180b883a 	mov	r5,r3
    4cb8:	30000926 	beq	r6,zero,4ce0 <_setlocale_r+0x58>
    4cbc:	000710c0 	call	710c <strcmp>
    4cc0:	8009883a 	mov	r4,r16
    4cc4:	01400074 	movhi	r5,1
    4cc8:	2973f404 	addi	r5,r5,-12336
    4ccc:	10000b1e 	bne	r2,zero,4cfc <_setlocale_r+0x74>
    4cd0:	8c000d15 	stw	r16,52(r17)
    4cd4:	8c800c15 	stw	r18,48(r17)
    4cd8:	00c00074 	movhi	r3,1
    4cdc:	18f40904 	addi	r3,r3,-12252
    4ce0:	1805883a 	mov	r2,r3
    4ce4:	dfc00317 	ldw	ra,12(sp)
    4ce8:	dc800217 	ldw	r18,8(sp)
    4cec:	dc400117 	ldw	r17,4(sp)
    4cf0:	dc000017 	ldw	r16,0(sp)
    4cf4:	dec00404 	addi	sp,sp,16
    4cf8:	f800283a 	ret
    4cfc:	000710c0 	call	710c <strcmp>
    4d00:	0007883a 	mov	r3,zero
    4d04:	103ff226 	beq	r2,zero,4cd0 <_setlocale_r+0x48>
    4d08:	003ff506 	br	4ce0 <_setlocale_r+0x58>

00004d0c <setlocale>:
    4d0c:	01800074 	movhi	r6,1
    4d10:	31bba604 	addi	r6,r6,-4456
    4d14:	2007883a 	mov	r3,r4
    4d18:	31000017 	ldw	r4,0(r6)
    4d1c:	280d883a 	mov	r6,r5
    4d20:	180b883a 	mov	r5,r3
    4d24:	0004c881 	jmpi	4c88 <_setlocale_r>

00004d28 <__smakebuf_r>:
    4d28:	2880030b 	ldhu	r2,12(r5)
    4d2c:	deffed04 	addi	sp,sp,-76
    4d30:	dc401015 	stw	r17,64(sp)
    4d34:	1080008c 	andi	r2,r2,2
    4d38:	dc000f15 	stw	r16,60(sp)
    4d3c:	dfc01215 	stw	ra,72(sp)
    4d40:	dc801115 	stw	r18,68(sp)
    4d44:	2821883a 	mov	r16,r5
    4d48:	2023883a 	mov	r17,r4
    4d4c:	10000b26 	beq	r2,zero,4d7c <__smakebuf_r+0x54>
    4d50:	28c010c4 	addi	r3,r5,67
    4d54:	00800044 	movi	r2,1
    4d58:	28800515 	stw	r2,20(r5)
    4d5c:	28c00415 	stw	r3,16(r5)
    4d60:	28c00015 	stw	r3,0(r5)
    4d64:	dfc01217 	ldw	ra,72(sp)
    4d68:	dc801117 	ldw	r18,68(sp)
    4d6c:	dc401017 	ldw	r17,64(sp)
    4d70:	dc000f17 	ldw	r16,60(sp)
    4d74:	dec01304 	addi	sp,sp,76
    4d78:	f800283a 	ret
    4d7c:	2940038f 	ldh	r5,14(r5)
    4d80:	28002116 	blt	r5,zero,4e08 <__smakebuf_r+0xe0>
    4d84:	d80d883a 	mov	r6,sp
    4d88:	00074880 	call	7488 <_fstat_r>
    4d8c:	10001e16 	blt	r2,zero,4e08 <__smakebuf_r+0xe0>
    4d90:	d8800117 	ldw	r2,4(sp)
    4d94:	00e00014 	movui	r3,32768
    4d98:	113c000c 	andi	r4,r2,61440
    4d9c:	20c03126 	beq	r4,r3,4e64 <__smakebuf_r+0x13c>
    4da0:	8080030b 	ldhu	r2,12(r16)
    4da4:	00c80004 	movi	r3,8192
    4da8:	10820014 	ori	r2,r2,2048
    4dac:	8080030d 	sth	r2,12(r16)
    4db0:	20c01e26 	beq	r4,r3,4e2c <__smakebuf_r+0x104>
    4db4:	04810004 	movi	r18,1024
    4db8:	8809883a 	mov	r4,r17
    4dbc:	900b883a 	mov	r5,r18
    4dc0:	0004ebc0 	call	4ebc <_malloc_r>
    4dc4:	1009883a 	mov	r4,r2
    4dc8:	10003126 	beq	r2,zero,4e90 <__smakebuf_r+0x168>
    4dcc:	80c0030b 	ldhu	r3,12(r16)
    4dd0:	00800034 	movhi	r2,0
    4dd4:	10902504 	addi	r2,r2,16532
    4dd8:	88800f15 	stw	r2,60(r17)
    4ddc:	18c02014 	ori	r3,r3,128
    4de0:	84800515 	stw	r18,20(r16)
    4de4:	80c0030d 	sth	r3,12(r16)
    4de8:	81000415 	stw	r4,16(r16)
    4dec:	81000015 	stw	r4,0(r16)
    4df0:	dfc01217 	ldw	ra,72(sp)
    4df4:	dc801117 	ldw	r18,68(sp)
    4df8:	dc401017 	ldw	r17,64(sp)
    4dfc:	dc000f17 	ldw	r16,60(sp)
    4e00:	dec01304 	addi	sp,sp,76
    4e04:	f800283a 	ret
    4e08:	80c0030b 	ldhu	r3,12(r16)
    4e0c:	1880200c 	andi	r2,r3,128
    4e10:	10000426 	beq	r2,zero,4e24 <__smakebuf_r+0xfc>
    4e14:	04801004 	movi	r18,64
    4e18:	18820014 	ori	r2,r3,2048
    4e1c:	8080030d 	sth	r2,12(r16)
    4e20:	003fe506 	br	4db8 <__smakebuf_r+0x90>
    4e24:	04810004 	movi	r18,1024
    4e28:	003ffb06 	br	4e18 <__smakebuf_r+0xf0>
    4e2c:	8140038f 	ldh	r5,14(r16)
    4e30:	8809883a 	mov	r4,r17
    4e34:	00074fc0 	call	74fc <_isatty_r>
    4e38:	103fde26 	beq	r2,zero,4db4 <__smakebuf_r+0x8c>
    4e3c:	8080030b 	ldhu	r2,12(r16)
    4e40:	80c010c4 	addi	r3,r16,67
    4e44:	04810004 	movi	r18,1024
    4e48:	10800054 	ori	r2,r2,1
    4e4c:	8080030d 	sth	r2,12(r16)
    4e50:	00800044 	movi	r2,1
    4e54:	80c00415 	stw	r3,16(r16)
    4e58:	80800515 	stw	r2,20(r16)
    4e5c:	80c00015 	stw	r3,0(r16)
    4e60:	003fd506 	br	4db8 <__smakebuf_r+0x90>
    4e64:	80c00a17 	ldw	r3,40(r16)
    4e68:	00800034 	movhi	r2,0
    4e6c:	109bf204 	addi	r2,r2,28616
    4e70:	18bfcb1e 	bne	r3,r2,4da0 <__smakebuf_r+0x78>
    4e74:	8080030b 	ldhu	r2,12(r16)
    4e78:	00c10004 	movi	r3,1024
    4e7c:	1825883a 	mov	r18,r3
    4e80:	10c4b03a 	or	r2,r2,r3
    4e84:	8080030d 	sth	r2,12(r16)
    4e88:	80c01315 	stw	r3,76(r16)
    4e8c:	003fca06 	br	4db8 <__smakebuf_r+0x90>
    4e90:	8100030b 	ldhu	r4,12(r16)
    4e94:	2080800c 	andi	r2,r4,512
    4e98:	103fb21e 	bne	r2,zero,4d64 <__smakebuf_r+0x3c>
    4e9c:	80c010c4 	addi	r3,r16,67
    4ea0:	21000094 	ori	r4,r4,2
    4ea4:	00800044 	movi	r2,1
    4ea8:	80800515 	stw	r2,20(r16)
    4eac:	8100030d 	sth	r4,12(r16)
    4eb0:	80c00415 	stw	r3,16(r16)
    4eb4:	80c00015 	stw	r3,0(r16)
    4eb8:	003faa06 	br	4d64 <__smakebuf_r+0x3c>

00004ebc <_malloc_r>:
    4ebc:	defff604 	addi	sp,sp,-40
    4ec0:	28c002c4 	addi	r3,r5,11
    4ec4:	00800584 	movi	r2,22
    4ec8:	dc800215 	stw	r18,8(sp)
    4ecc:	dfc00915 	stw	ra,36(sp)
    4ed0:	df000815 	stw	fp,32(sp)
    4ed4:	ddc00715 	stw	r23,28(sp)
    4ed8:	dd800615 	stw	r22,24(sp)
    4edc:	dd400515 	stw	r21,20(sp)
    4ee0:	dd000415 	stw	r20,16(sp)
    4ee4:	dcc00315 	stw	r19,12(sp)
    4ee8:	dc400115 	stw	r17,4(sp)
    4eec:	dc000015 	stw	r16,0(sp)
    4ef0:	2025883a 	mov	r18,r4
    4ef4:	10c01236 	bltu	r2,r3,4f40 <_malloc_r+0x84>
    4ef8:	04400404 	movi	r17,16
    4efc:	8940142e 	bgeu	r17,r5,4f50 <_malloc_r+0x94>
    4f00:	00800304 	movi	r2,12
    4f04:	0007883a 	mov	r3,zero
    4f08:	90800015 	stw	r2,0(r18)
    4f0c:	1805883a 	mov	r2,r3
    4f10:	dfc00917 	ldw	ra,36(sp)
    4f14:	df000817 	ldw	fp,32(sp)
    4f18:	ddc00717 	ldw	r23,28(sp)
    4f1c:	dd800617 	ldw	r22,24(sp)
    4f20:	dd400517 	ldw	r21,20(sp)
    4f24:	dd000417 	ldw	r20,16(sp)
    4f28:	dcc00317 	ldw	r19,12(sp)
    4f2c:	dc800217 	ldw	r18,8(sp)
    4f30:	dc400117 	ldw	r17,4(sp)
    4f34:	dc000017 	ldw	r16,0(sp)
    4f38:	dec00a04 	addi	sp,sp,40
    4f3c:	f800283a 	ret
    4f40:	00bffe04 	movi	r2,-8
    4f44:	18a2703a 	and	r17,r3,r2
    4f48:	883fed16 	blt	r17,zero,4f00 <_malloc_r+0x44>
    4f4c:	897fec36 	bltu	r17,r5,4f00 <_malloc_r+0x44>
    4f50:	9009883a 	mov	r4,r18
    4f54:	000a1100 	call	a110 <__malloc_lock>
    4f58:	00807dc4 	movi	r2,503
    4f5c:	14402b2e 	bgeu	r2,r17,500c <_malloc_r+0x150>
    4f60:	8806d27a 	srli	r3,r17,9
    4f64:	18003f1e 	bne	r3,zero,5064 <_malloc_r+0x1a8>
    4f68:	880cd0fa 	srli	r6,r17,3
    4f6c:	300490fa 	slli	r2,r6,3
    4f70:	02c00074 	movhi	r11,1
    4f74:	5af5c004 	addi	r11,r11,-10496
    4f78:	12cb883a 	add	r5,r2,r11
    4f7c:	2c000317 	ldw	r16,12(r5)
    4f80:	580f883a 	mov	r7,r11
    4f84:	2c00041e 	bne	r5,r16,4f98 <_malloc_r+0xdc>
    4f88:	00000a06 	br	4fb4 <_malloc_r+0xf8>
    4f8c:	1800860e 	bge	r3,zero,51a8 <_malloc_r+0x2ec>
    4f90:	84000317 	ldw	r16,12(r16)
    4f94:	2c000726 	beq	r5,r16,4fb4 <_malloc_r+0xf8>
    4f98:	80800117 	ldw	r2,4(r16)
    4f9c:	00ffff04 	movi	r3,-4
    4fa0:	10c8703a 	and	r4,r2,r3
    4fa4:	2447c83a 	sub	r3,r4,r17
    4fa8:	008003c4 	movi	r2,15
    4fac:	10fff70e 	bge	r2,r3,4f8c <_malloc_r+0xd0>
    4fb0:	31bfffc4 	addi	r6,r6,-1
    4fb4:	32400044 	addi	r9,r6,1
    4fb8:	02800074 	movhi	r10,1
    4fbc:	52b5c204 	addi	r10,r10,-10488
    4fc0:	54000217 	ldw	r16,8(r10)
    4fc4:	8280a026 	beq	r16,r10,5248 <_malloc_r+0x38c>
    4fc8:	80800117 	ldw	r2,4(r16)
    4fcc:	00ffff04 	movi	r3,-4
    4fd0:	10ca703a 	and	r5,r2,r3
    4fd4:	2c4dc83a 	sub	r6,r5,r17
    4fd8:	008003c4 	movi	r2,15
    4fdc:	11808316 	blt	r2,r6,51ec <_malloc_r+0x330>
    4fe0:	52800315 	stw	r10,12(r10)
    4fe4:	52800215 	stw	r10,8(r10)
    4fe8:	30002916 	blt	r6,zero,5090 <_malloc_r+0x1d4>
    4fec:	8147883a 	add	r3,r16,r5
    4ff0:	18800117 	ldw	r2,4(r3)
    4ff4:	9009883a 	mov	r4,r18
    4ff8:	10800054 	ori	r2,r2,1
    4ffc:	18800115 	stw	r2,4(r3)
    5000:	000a1300 	call	a130 <__malloc_unlock>
    5004:	80c00204 	addi	r3,r16,8
    5008:	003fc006 	br	4f0c <_malloc_r+0x50>
    500c:	02c00074 	movhi	r11,1
    5010:	5af5c004 	addi	r11,r11,-10496
    5014:	8ac5883a 	add	r2,r17,r11
    5018:	14000317 	ldw	r16,12(r2)
    501c:	580f883a 	mov	r7,r11
    5020:	8806d0fa 	srli	r3,r17,3
    5024:	14006c26 	beq	r2,r16,51d8 <_malloc_r+0x31c>
    5028:	80c00117 	ldw	r3,4(r16)
    502c:	00bfff04 	movi	r2,-4
    5030:	81800317 	ldw	r6,12(r16)
    5034:	1886703a 	and	r3,r3,r2
    5038:	80c7883a 	add	r3,r16,r3
    503c:	18800117 	ldw	r2,4(r3)
    5040:	81400217 	ldw	r5,8(r16)
    5044:	9009883a 	mov	r4,r18
    5048:	10800054 	ori	r2,r2,1
    504c:	18800115 	stw	r2,4(r3)
    5050:	31400215 	stw	r5,8(r6)
    5054:	29800315 	stw	r6,12(r5)
    5058:	000a1300 	call	a130 <__malloc_unlock>
    505c:	80c00204 	addi	r3,r16,8
    5060:	003faa06 	br	4f0c <_malloc_r+0x50>
    5064:	00800104 	movi	r2,4
    5068:	10c0052e 	bgeu	r2,r3,5080 <_malloc_r+0x1c4>
    506c:	00800504 	movi	r2,20
    5070:	10c07836 	bltu	r2,r3,5254 <_malloc_r+0x398>
    5074:	198016c4 	addi	r6,r3,91
    5078:	300490fa 	slli	r2,r6,3
    507c:	003fbc06 	br	4f70 <_malloc_r+0xb4>
    5080:	8804d1ba 	srli	r2,r17,6
    5084:	11800e04 	addi	r6,r2,56
    5088:	300490fa 	slli	r2,r6,3
    508c:	003fb806 	br	4f70 <_malloc_r+0xb4>
    5090:	00807fc4 	movi	r2,511
    5094:	1140bb36 	bltu	r2,r5,5384 <_malloc_r+0x4c8>
    5098:	2806d0fa 	srli	r3,r5,3
    509c:	573ffe04 	addi	fp,r10,-8
    50a0:	00800044 	movi	r2,1
    50a4:	180890fa 	slli	r4,r3,3
    50a8:	1807d0ba 	srai	r3,r3,2
    50ac:	e1c00117 	ldw	r7,4(fp)
    50b0:	5909883a 	add	r4,r11,r4
    50b4:	21400217 	ldw	r5,8(r4)
    50b8:	10c4983a 	sll	r2,r2,r3
    50bc:	81000315 	stw	r4,12(r16)
    50c0:	81400215 	stw	r5,8(r16)
    50c4:	388eb03a 	or	r7,r7,r2
    50c8:	2c000315 	stw	r16,12(r5)
    50cc:	24000215 	stw	r16,8(r4)
    50d0:	e1c00115 	stw	r7,4(fp)
    50d4:	4807883a 	mov	r3,r9
    50d8:	4800cd16 	blt	r9,zero,5410 <_malloc_r+0x554>
    50dc:	1807d0ba 	srai	r3,r3,2
    50e0:	00800044 	movi	r2,1
    50e4:	10c8983a 	sll	r4,r2,r3
    50e8:	39004436 	bltu	r7,r4,51fc <_malloc_r+0x340>
    50ec:	21c4703a 	and	r2,r4,r7
    50f0:	10000a1e 	bne	r2,zero,511c <_malloc_r+0x260>
    50f4:	2109883a 	add	r4,r4,r4
    50f8:	00bfff04 	movi	r2,-4
    50fc:	4884703a 	and	r2,r9,r2
    5100:	3906703a 	and	r3,r7,r4
    5104:	12400104 	addi	r9,r2,4
    5108:	1800041e 	bne	r3,zero,511c <_malloc_r+0x260>
    510c:	2109883a 	add	r4,r4,r4
    5110:	3904703a 	and	r2,r7,r4
    5114:	4a400104 	addi	r9,r9,4
    5118:	103ffc26 	beq	r2,zero,510c <_malloc_r+0x250>
    511c:	480490fa 	slli	r2,r9,3
    5120:	4819883a 	mov	r12,r9
    5124:	023fff04 	movi	r8,-4
    5128:	589b883a 	add	r13,r11,r2
    512c:	6807883a 	mov	r3,r13
    5130:	014003c4 	movi	r5,15
    5134:	1c000317 	ldw	r16,12(r3)
    5138:	1c00041e 	bne	r3,r16,514c <_malloc_r+0x290>
    513c:	0000a706 	br	53dc <_malloc_r+0x520>
    5140:	3000ab0e 	bge	r6,zero,53f0 <_malloc_r+0x534>
    5144:	84000317 	ldw	r16,12(r16)
    5148:	1c00a426 	beq	r3,r16,53dc <_malloc_r+0x520>
    514c:	80800117 	ldw	r2,4(r16)
    5150:	1204703a 	and	r2,r2,r8
    5154:	144dc83a 	sub	r6,r2,r17
    5158:	29bff90e 	bge	r5,r6,5140 <_malloc_r+0x284>
    515c:	81000317 	ldw	r4,12(r16)
    5160:	80c00217 	ldw	r3,8(r16)
    5164:	89400054 	ori	r5,r17,1
    5168:	8445883a 	add	r2,r16,r17
    516c:	20c00215 	stw	r3,8(r4)
    5170:	19000315 	stw	r4,12(r3)
    5174:	81400115 	stw	r5,4(r16)
    5178:	1187883a 	add	r3,r2,r6
    517c:	31000054 	ori	r4,r6,1
    5180:	50800315 	stw	r2,12(r10)
    5184:	50800215 	stw	r2,8(r10)
    5188:	19800015 	stw	r6,0(r3)
    518c:	11000115 	stw	r4,4(r2)
    5190:	12800215 	stw	r10,8(r2)
    5194:	12800315 	stw	r10,12(r2)
    5198:	9009883a 	mov	r4,r18
    519c:	000a1300 	call	a130 <__malloc_unlock>
    51a0:	80c00204 	addi	r3,r16,8
    51a4:	003f5906 	br	4f0c <_malloc_r+0x50>
    51a8:	8109883a 	add	r4,r16,r4
    51ac:	20800117 	ldw	r2,4(r4)
    51b0:	80c00217 	ldw	r3,8(r16)
    51b4:	81400317 	ldw	r5,12(r16)
    51b8:	10800054 	ori	r2,r2,1
    51bc:	20800115 	stw	r2,4(r4)
    51c0:	28c00215 	stw	r3,8(r5)
    51c4:	19400315 	stw	r5,12(r3)
    51c8:	9009883a 	mov	r4,r18
    51cc:	000a1300 	call	a130 <__malloc_unlock>
    51d0:	80c00204 	addi	r3,r16,8
    51d4:	003f4d06 	br	4f0c <_malloc_r+0x50>
    51d8:	80800204 	addi	r2,r16,8
    51dc:	14000317 	ldw	r16,12(r2)
    51e0:	143f911e 	bne	r2,r16,5028 <_malloc_r+0x16c>
    51e4:	1a400084 	addi	r9,r3,2
    51e8:	003f7306 	br	4fb8 <_malloc_r+0xfc>
    51ec:	88c00054 	ori	r3,r17,1
    51f0:	8445883a 	add	r2,r16,r17
    51f4:	80c00115 	stw	r3,4(r16)
    51f8:	003fdf06 	br	5178 <_malloc_r+0x2bc>
    51fc:	e4000217 	ldw	r16,8(fp)
    5200:	00bfff04 	movi	r2,-4
    5204:	80c00117 	ldw	r3,4(r16)
    5208:	802d883a 	mov	r22,r16
    520c:	18aa703a 	and	r21,r3,r2
    5210:	ac401636 	bltu	r21,r17,526c <_malloc_r+0x3b0>
    5214:	ac49c83a 	sub	r4,r21,r17
    5218:	008003c4 	movi	r2,15
    521c:	1100130e 	bge	r2,r4,526c <_malloc_r+0x3b0>
    5220:	88800054 	ori	r2,r17,1
    5224:	8447883a 	add	r3,r16,r17
    5228:	80800115 	stw	r2,4(r16)
    522c:	20800054 	ori	r2,r4,1
    5230:	18800115 	stw	r2,4(r3)
    5234:	e0c00215 	stw	r3,8(fp)
    5238:	9009883a 	mov	r4,r18
    523c:	000a1300 	call	a130 <__malloc_unlock>
    5240:	80c00204 	addi	r3,r16,8
    5244:	003f3106 	br	4f0c <_malloc_r+0x50>
    5248:	39c00117 	ldw	r7,4(r7)
    524c:	573ffe04 	addi	fp,r10,-8
    5250:	003fa006 	br	50d4 <_malloc_r+0x218>
    5254:	00801504 	movi	r2,84
    5258:	10c06736 	bltu	r2,r3,53f8 <_malloc_r+0x53c>
    525c:	8804d33a 	srli	r2,r17,12
    5260:	11801b84 	addi	r6,r2,110
    5264:	300490fa 	slli	r2,r6,3
    5268:	003f4106 	br	4f70 <_malloc_r+0xb4>
    526c:	d0a70c17 	ldw	r2,-25552(gp)
    5270:	d0e00517 	ldw	r3,-32748(gp)
    5274:	053fffc4 	movi	r20,-1
    5278:	10800404 	addi	r2,r2,16
    527c:	88a7883a 	add	r19,r17,r2
    5280:	1d000326 	beq	r3,r20,5290 <_malloc_r+0x3d4>
    5284:	98c3ffc4 	addi	r3,r19,4095
    5288:	00bc0004 	movi	r2,-4096
    528c:	18a6703a 	and	r19,r3,r2
    5290:	9009883a 	mov	r4,r18
    5294:	980b883a 	mov	r5,r19
    5298:	0006f500 	call	6f50 <_sbrk_r>
    529c:	1009883a 	mov	r4,r2
    52a0:	15000426 	beq	r2,r20,52b4 <_malloc_r+0x3f8>
    52a4:	854b883a 	add	r5,r16,r21
    52a8:	1029883a 	mov	r20,r2
    52ac:	11405a2e 	bgeu	r2,r5,5418 <_malloc_r+0x55c>
    52b0:	87000c26 	beq	r16,fp,52e4 <_malloc_r+0x428>
    52b4:	e4000217 	ldw	r16,8(fp)
    52b8:	80c00117 	ldw	r3,4(r16)
    52bc:	00bfff04 	movi	r2,-4
    52c0:	1884703a 	and	r2,r3,r2
    52c4:	14400336 	bltu	r2,r17,52d4 <_malloc_r+0x418>
    52c8:	1449c83a 	sub	r4,r2,r17
    52cc:	008003c4 	movi	r2,15
    52d0:	113fd316 	blt	r2,r4,5220 <_malloc_r+0x364>
    52d4:	9009883a 	mov	r4,r18
    52d8:	000a1300 	call	a130 <__malloc_unlock>
    52dc:	0007883a 	mov	r3,zero
    52e0:	003f0a06 	br	4f0c <_malloc_r+0x50>
    52e4:	05c00074 	movhi	r23,1
    52e8:	bdc2bc04 	addi	r23,r23,2800
    52ec:	b8800017 	ldw	r2,0(r23)
    52f0:	988d883a 	add	r6,r19,r2
    52f4:	b9800015 	stw	r6,0(r23)
    52f8:	d0e00517 	ldw	r3,-32748(gp)
    52fc:	00bfffc4 	movi	r2,-1
    5300:	18808e26 	beq	r3,r2,553c <_malloc_r+0x680>
    5304:	2145c83a 	sub	r2,r4,r5
    5308:	3085883a 	add	r2,r6,r2
    530c:	b8800015 	stw	r2,0(r23)
    5310:	20c001cc 	andi	r3,r4,7
    5314:	18005f1e 	bne	r3,zero,5494 <_malloc_r+0x5d8>
    5318:	000b883a 	mov	r5,zero
    531c:	a4c5883a 	add	r2,r20,r19
    5320:	1083ffcc 	andi	r2,r2,4095
    5324:	00c40004 	movi	r3,4096
    5328:	1887c83a 	sub	r3,r3,r2
    532c:	28e7883a 	add	r19,r5,r3
    5330:	9009883a 	mov	r4,r18
    5334:	980b883a 	mov	r5,r19
    5338:	0006f500 	call	6f50 <_sbrk_r>
    533c:	1007883a 	mov	r3,r2
    5340:	00bfffc4 	movi	r2,-1
    5344:	18807a26 	beq	r3,r2,5530 <_malloc_r+0x674>
    5348:	1d05c83a 	sub	r2,r3,r20
    534c:	9885883a 	add	r2,r19,r2
    5350:	10c00054 	ori	r3,r2,1
    5354:	b8800017 	ldw	r2,0(r23)
    5358:	a021883a 	mov	r16,r20
    535c:	a0c00115 	stw	r3,4(r20)
    5360:	9885883a 	add	r2,r19,r2
    5364:	b8800015 	stw	r2,0(r23)
    5368:	e5000215 	stw	r20,8(fp)
    536c:	b7003626 	beq	r22,fp,5448 <_malloc_r+0x58c>
    5370:	018003c4 	movi	r6,15
    5374:	35404b36 	bltu	r6,r21,54a4 <_malloc_r+0x5e8>
    5378:	00800044 	movi	r2,1
    537c:	a0800115 	stw	r2,4(r20)
    5380:	003fcd06 	br	52b8 <_malloc_r+0x3fc>
    5384:	2808d27a 	srli	r4,r5,9
    5388:	2000371e 	bne	r4,zero,5468 <_malloc_r+0x5ac>
    538c:	2808d0fa 	srli	r4,r5,3
    5390:	200690fa 	slli	r3,r4,3
    5394:	1ad1883a 	add	r8,r3,r11
    5398:	41800217 	ldw	r6,8(r8)
    539c:	41805b26 	beq	r8,r6,550c <_malloc_r+0x650>
    53a0:	30800117 	ldw	r2,4(r6)
    53a4:	00ffff04 	movi	r3,-4
    53a8:	10c4703a 	and	r2,r2,r3
    53ac:	2880022e 	bgeu	r5,r2,53b8 <_malloc_r+0x4fc>
    53b0:	31800217 	ldw	r6,8(r6)
    53b4:	41bffa1e 	bne	r8,r6,53a0 <_malloc_r+0x4e4>
    53b8:	32000317 	ldw	r8,12(r6)
    53bc:	39c00117 	ldw	r7,4(r7)
    53c0:	82000315 	stw	r8,12(r16)
    53c4:	81800215 	stw	r6,8(r16)
    53c8:	07000074 	movhi	fp,1
    53cc:	e735c004 	addi	fp,fp,-10496
    53d0:	34000315 	stw	r16,12(r6)
    53d4:	44000215 	stw	r16,8(r8)
    53d8:	003f3e06 	br	50d4 <_malloc_r+0x218>
    53dc:	63000044 	addi	r12,r12,1
    53e0:	608000cc 	andi	r2,r12,3
    53e4:	10005d26 	beq	r2,zero,555c <_malloc_r+0x6a0>
    53e8:	18c00204 	addi	r3,r3,8
    53ec:	003f5106 	br	5134 <_malloc_r+0x278>
    53f0:	8089883a 	add	r4,r16,r2
    53f4:	003f6d06 	br	51ac <_malloc_r+0x2f0>
    53f8:	00805504 	movi	r2,340
    53fc:	10c02036 	bltu	r2,r3,5480 <_malloc_r+0x5c4>
    5400:	8804d3fa 	srli	r2,r17,15
    5404:	11801dc4 	addi	r6,r2,119
    5408:	300490fa 	slli	r2,r6,3
    540c:	003ed806 	br	4f70 <_malloc_r+0xb4>
    5410:	48c000c4 	addi	r3,r9,3
    5414:	003f3106 	br	50dc <_malloc_r+0x220>
    5418:	05c00074 	movhi	r23,1
    541c:	bdc2bc04 	addi	r23,r23,2800
    5420:	b8800017 	ldw	r2,0(r23)
    5424:	988d883a 	add	r6,r19,r2
    5428:	b9800015 	stw	r6,0(r23)
    542c:	293fb21e 	bne	r5,r4,52f8 <_malloc_r+0x43c>
    5430:	2083ffcc 	andi	r2,r4,4095
    5434:	103fb01e 	bne	r2,zero,52f8 <_malloc_r+0x43c>
    5438:	e4000217 	ldw	r16,8(fp)
    543c:	9d45883a 	add	r2,r19,r21
    5440:	10800054 	ori	r2,r2,1
    5444:	80800115 	stw	r2,4(r16)
    5448:	b8c00017 	ldw	r3,0(r23)
    544c:	d0a70d17 	ldw	r2,-25548(gp)
    5450:	10c0012e 	bgeu	r2,r3,5458 <_malloc_r+0x59c>
    5454:	d0e70d15 	stw	r3,-25548(gp)
    5458:	d0a70e17 	ldw	r2,-25544(gp)
    545c:	10ff962e 	bgeu	r2,r3,52b8 <_malloc_r+0x3fc>
    5460:	d0e70e15 	stw	r3,-25544(gp)
    5464:	003f9406 	br	52b8 <_malloc_r+0x3fc>
    5468:	00800104 	movi	r2,4
    546c:	11001e36 	bltu	r2,r4,54e8 <_malloc_r+0x62c>
    5470:	2804d1ba 	srli	r2,r5,6
    5474:	11000e04 	addi	r4,r2,56
    5478:	200690fa 	slli	r3,r4,3
    547c:	003fc506 	br	5394 <_malloc_r+0x4d8>
    5480:	00815504 	movi	r2,1364
    5484:	10c01d2e 	bgeu	r2,r3,54fc <_malloc_r+0x640>
    5488:	01801f84 	movi	r6,126
    548c:	0080fc04 	movi	r2,1008
    5490:	003eb706 	br	4f70 <_malloc_r+0xb4>
    5494:	00800204 	movi	r2,8
    5498:	10cbc83a 	sub	r5,r2,r3
    549c:	2169883a 	add	r20,r4,r5
    54a0:	003f9e06 	br	531c <_malloc_r+0x460>
    54a4:	00bffe04 	movi	r2,-8
    54a8:	a93ffd04 	addi	r4,r21,-12
    54ac:	2088703a 	and	r4,r4,r2
    54b0:	b10b883a 	add	r5,r22,r4
    54b4:	00c00144 	movi	r3,5
    54b8:	28c00215 	stw	r3,8(r5)
    54bc:	28c00115 	stw	r3,4(r5)
    54c0:	b0800117 	ldw	r2,4(r22)
    54c4:	1080004c 	andi	r2,r2,1
    54c8:	2084b03a 	or	r2,r4,r2
    54cc:	b0800115 	stw	r2,4(r22)
    54d0:	313fdd2e 	bgeu	r6,r4,5448 <_malloc_r+0x58c>
    54d4:	b1400204 	addi	r5,r22,8
    54d8:	9009883a 	mov	r4,r18
    54dc:	00043340 	call	4334 <_free_r>
    54e0:	e4000217 	ldw	r16,8(fp)
    54e4:	003fd806 	br	5448 <_malloc_r+0x58c>
    54e8:	00800504 	movi	r2,20
    54ec:	11001536 	bltu	r2,r4,5544 <_malloc_r+0x688>
    54f0:	210016c4 	addi	r4,r4,91
    54f4:	200690fa 	slli	r3,r4,3
    54f8:	003fa606 	br	5394 <_malloc_r+0x4d8>
    54fc:	8804d4ba 	srli	r2,r17,18
    5500:	11801f04 	addi	r6,r2,124
    5504:	300490fa 	slli	r2,r6,3
    5508:	003e9906 	br	4f70 <_malloc_r+0xb4>
    550c:	2009d0ba 	srai	r4,r4,2
    5510:	01400074 	movhi	r5,1
    5514:	2975c004 	addi	r5,r5,-10496
    5518:	00c00044 	movi	r3,1
    551c:	28800117 	ldw	r2,4(r5)
    5520:	1906983a 	sll	r3,r3,r4
    5524:	10c4b03a 	or	r2,r2,r3
    5528:	28800115 	stw	r2,4(r5)
    552c:	003fa306 	br	53bc <_malloc_r+0x500>
    5530:	0027883a 	mov	r19,zero
    5534:	00c00044 	movi	r3,1
    5538:	003f8606 	br	5354 <_malloc_r+0x498>
    553c:	d1200515 	stw	r4,-32748(gp)
    5540:	003f7306 	br	5310 <_malloc_r+0x454>
    5544:	00801504 	movi	r2,84
    5548:	11001936 	bltu	r2,r4,55b0 <_malloc_r+0x6f4>
    554c:	2804d33a 	srli	r2,r5,12
    5550:	11001b84 	addi	r4,r2,110
    5554:	200690fa 	slli	r3,r4,3
    5558:	003f8e06 	br	5394 <_malloc_r+0x4d8>
    555c:	480b883a 	mov	r5,r9
    5560:	6807883a 	mov	r3,r13
    5564:	288000cc 	andi	r2,r5,3
    5568:	18fffe04 	addi	r3,r3,-8
    556c:	297fffc4 	addi	r5,r5,-1
    5570:	10001526 	beq	r2,zero,55c8 <_malloc_r+0x70c>
    5574:	18800217 	ldw	r2,8(r3)
    5578:	10fffa26 	beq	r2,r3,5564 <_malloc_r+0x6a8>
    557c:	2109883a 	add	r4,r4,r4
    5580:	393f1e36 	bltu	r7,r4,51fc <_malloc_r+0x340>
    5584:	203f1d26 	beq	r4,zero,51fc <_malloc_r+0x340>
    5588:	21c4703a 	and	r2,r4,r7
    558c:	10000226 	beq	r2,zero,5598 <_malloc_r+0x6dc>
    5590:	6013883a 	mov	r9,r12
    5594:	003ee106 	br	511c <_malloc_r+0x260>
    5598:	2109883a 	add	r4,r4,r4
    559c:	3904703a 	and	r2,r7,r4
    55a0:	63000104 	addi	r12,r12,4
    55a4:	103ffc26 	beq	r2,zero,5598 <_malloc_r+0x6dc>
    55a8:	6013883a 	mov	r9,r12
    55ac:	003edb06 	br	511c <_malloc_r+0x260>
    55b0:	00805504 	movi	r2,340
    55b4:	11000836 	bltu	r2,r4,55d8 <_malloc_r+0x71c>
    55b8:	2804d3fa 	srli	r2,r5,15
    55bc:	11001dc4 	addi	r4,r2,119
    55c0:	200690fa 	slli	r3,r4,3
    55c4:	003f7306 	br	5394 <_malloc_r+0x4d8>
    55c8:	0104303a 	nor	r2,zero,r4
    55cc:	388e703a 	and	r7,r7,r2
    55d0:	e1c00115 	stw	r7,4(fp)
    55d4:	003fe906 	br	557c <_malloc_r+0x6c0>
    55d8:	00815504 	movi	r2,1364
    55dc:	1100032e 	bgeu	r2,r4,55ec <_malloc_r+0x730>
    55e0:	01001f84 	movi	r4,126
    55e4:	00c0fc04 	movi	r3,1008
    55e8:	003f6a06 	br	5394 <_malloc_r+0x4d8>
    55ec:	2804d4ba 	srli	r2,r5,18
    55f0:	11001f04 	addi	r4,r2,124
    55f4:	200690fa 	slli	r3,r4,3
    55f8:	003f6606 	br	5394 <_malloc_r+0x4d8>

000055fc <memchr>:
    55fc:	008000c4 	movi	r2,3
    5600:	29403fcc 	andi	r5,r5,255
    5604:	2007883a 	mov	r3,r4
    5608:	1180022e 	bgeu	r2,r6,5614 <memchr+0x18>
    560c:	2084703a 	and	r2,r4,r2
    5610:	10000b26 	beq	r2,zero,5640 <memchr+0x44>
    5614:	313fffc4 	addi	r4,r6,-1
    5618:	3000051e 	bne	r6,zero,5630 <memchr+0x34>
    561c:	00002c06 	br	56d0 <memchr+0xd4>
    5620:	213fffc4 	addi	r4,r4,-1
    5624:	00bfffc4 	movi	r2,-1
    5628:	18c00044 	addi	r3,r3,1
    562c:	20802826 	beq	r4,r2,56d0 <memchr+0xd4>
    5630:	18800003 	ldbu	r2,0(r3)
    5634:	28bffa1e 	bne	r5,r2,5620 <memchr+0x24>
    5638:	1805883a 	mov	r2,r3
    563c:	f800283a 	ret
    5640:	0011883a 	mov	r8,zero
    5644:	0007883a 	mov	r3,zero
    5648:	01c00104 	movi	r7,4
    564c:	4004923a 	slli	r2,r8,8
    5650:	18c00044 	addi	r3,r3,1
    5654:	1151883a 	add	r8,r2,r5
    5658:	19fffc1e 	bne	r3,r7,564c <memchr+0x50>
    565c:	02bfbff4 	movhi	r10,65279
    5660:	52bfbfc4 	addi	r10,r10,-257
    5664:	02602074 	movhi	r9,32897
    5668:	4a602004 	addi	r9,r9,-32640
    566c:	02c000c4 	movi	r11,3
    5670:	20800017 	ldw	r2,0(r4)
    5674:	31bfff04 	addi	r6,r6,-4
    5678:	200f883a 	mov	r7,r4
    567c:	1204f03a 	xor	r2,r2,r8
    5680:	1287883a 	add	r3,r2,r10
    5684:	1a46703a 	and	r3,r3,r9
    5688:	0084303a 	nor	r2,zero,r2
    568c:	10c4703a 	and	r2,r2,r3
    5690:	10000b26 	beq	r2,zero,56c0 <memchr+0xc4>
    5694:	20800003 	ldbu	r2,0(r4)
    5698:	28800f26 	beq	r5,r2,56d8 <memchr+0xdc>
    569c:	20800043 	ldbu	r2,1(r4)
    56a0:	21c00044 	addi	r7,r4,1
    56a4:	28800c26 	beq	r5,r2,56d8 <memchr+0xdc>
    56a8:	20800083 	ldbu	r2,2(r4)
    56ac:	21c00084 	addi	r7,r4,2
    56b0:	28800926 	beq	r5,r2,56d8 <memchr+0xdc>
    56b4:	208000c3 	ldbu	r2,3(r4)
    56b8:	21c000c4 	addi	r7,r4,3
    56bc:	28800626 	beq	r5,r2,56d8 <memchr+0xdc>
    56c0:	21000104 	addi	r4,r4,4
    56c4:	59bfea36 	bltu	r11,r6,5670 <memchr+0x74>
    56c8:	2007883a 	mov	r3,r4
    56cc:	003fd106 	br	5614 <memchr+0x18>
    56d0:	0005883a 	mov	r2,zero
    56d4:	f800283a 	ret
    56d8:	3805883a 	mov	r2,r7
    56dc:	f800283a 	ret

000056e0 <memcpy>:
    56e0:	01c003c4 	movi	r7,15
    56e4:	2007883a 	mov	r3,r4
    56e8:	3980032e 	bgeu	r7,r6,56f8 <memcpy+0x18>
    56ec:	2904b03a 	or	r2,r5,r4
    56f0:	108000cc 	andi	r2,r2,3
    56f4:	10000926 	beq	r2,zero,571c <memcpy+0x3c>
    56f8:	30000626 	beq	r6,zero,5714 <memcpy+0x34>
    56fc:	30cd883a 	add	r6,r6,r3
    5700:	28800003 	ldbu	r2,0(r5)
    5704:	29400044 	addi	r5,r5,1
    5708:	18800005 	stb	r2,0(r3)
    570c:	18c00044 	addi	r3,r3,1
    5710:	30fffb1e 	bne	r6,r3,5700 <memcpy+0x20>
    5714:	2005883a 	mov	r2,r4
    5718:	f800283a 	ret
    571c:	3811883a 	mov	r8,r7
    5720:	200f883a 	mov	r7,r4
    5724:	28c00017 	ldw	r3,0(r5)
    5728:	31bffc04 	addi	r6,r6,-16
    572c:	38c00015 	stw	r3,0(r7)
    5730:	28800117 	ldw	r2,4(r5)
    5734:	38800115 	stw	r2,4(r7)
    5738:	28c00217 	ldw	r3,8(r5)
    573c:	38c00215 	stw	r3,8(r7)
    5740:	28800317 	ldw	r2,12(r5)
    5744:	29400404 	addi	r5,r5,16
    5748:	38800315 	stw	r2,12(r7)
    574c:	39c00404 	addi	r7,r7,16
    5750:	41bff436 	bltu	r8,r6,5724 <memcpy+0x44>
    5754:	008000c4 	movi	r2,3
    5758:	1180072e 	bgeu	r2,r6,5778 <memcpy+0x98>
    575c:	1007883a 	mov	r3,r2
    5760:	28800017 	ldw	r2,0(r5)
    5764:	31bfff04 	addi	r6,r6,-4
    5768:	29400104 	addi	r5,r5,4
    576c:	38800015 	stw	r2,0(r7)
    5770:	39c00104 	addi	r7,r7,4
    5774:	19bffa36 	bltu	r3,r6,5760 <memcpy+0x80>
    5778:	3807883a 	mov	r3,r7
    577c:	003fde06 	br	56f8 <memcpy+0x18>

00005780 <memmove>:
    5780:	2807883a 	mov	r3,r5
    5784:	2011883a 	mov	r8,r4
    5788:	29000c2e 	bgeu	r5,r4,57bc <memmove+0x3c>
    578c:	298f883a 	add	r7,r5,r6
    5790:	21c00a2e 	bgeu	r4,r7,57bc <memmove+0x3c>
    5794:	30000726 	beq	r6,zero,57b4 <memmove+0x34>
    5798:	2187883a 	add	r3,r4,r6
    579c:	198dc83a 	sub	r6,r3,r6
    57a0:	39ffffc4 	addi	r7,r7,-1
    57a4:	38800003 	ldbu	r2,0(r7)
    57a8:	18ffffc4 	addi	r3,r3,-1
    57ac:	18800005 	stb	r2,0(r3)
    57b0:	19bffb1e 	bne	r3,r6,57a0 <memmove+0x20>
    57b4:	2005883a 	mov	r2,r4
    57b8:	f800283a 	ret
    57bc:	01c003c4 	movi	r7,15
    57c0:	39800a36 	bltu	r7,r6,57ec <memmove+0x6c>
    57c4:	303ffb26 	beq	r6,zero,57b4 <memmove+0x34>
    57c8:	400f883a 	mov	r7,r8
    57cc:	320d883a 	add	r6,r6,r8
    57d0:	28800003 	ldbu	r2,0(r5)
    57d4:	29400044 	addi	r5,r5,1
    57d8:	38800005 	stb	r2,0(r7)
    57dc:	39c00044 	addi	r7,r7,1
    57e0:	39bffb1e 	bne	r7,r6,57d0 <memmove+0x50>
    57e4:	2005883a 	mov	r2,r4
    57e8:	f800283a 	ret
    57ec:	1904b03a 	or	r2,r3,r4
    57f0:	108000cc 	andi	r2,r2,3
    57f4:	103ff31e 	bne	r2,zero,57c4 <memmove+0x44>
    57f8:	3811883a 	mov	r8,r7
    57fc:	180b883a 	mov	r5,r3
    5800:	200f883a 	mov	r7,r4
    5804:	28c00017 	ldw	r3,0(r5)
    5808:	31bffc04 	addi	r6,r6,-16
    580c:	38c00015 	stw	r3,0(r7)
    5810:	28800117 	ldw	r2,4(r5)
    5814:	38800115 	stw	r2,4(r7)
    5818:	28c00217 	ldw	r3,8(r5)
    581c:	38c00215 	stw	r3,8(r7)
    5820:	28800317 	ldw	r2,12(r5)
    5824:	29400404 	addi	r5,r5,16
    5828:	38800315 	stw	r2,12(r7)
    582c:	39c00404 	addi	r7,r7,16
    5830:	41bff436 	bltu	r8,r6,5804 <memmove+0x84>
    5834:	008000c4 	movi	r2,3
    5838:	1180072e 	bgeu	r2,r6,5858 <memmove+0xd8>
    583c:	1007883a 	mov	r3,r2
    5840:	28800017 	ldw	r2,0(r5)
    5844:	31bfff04 	addi	r6,r6,-4
    5848:	29400104 	addi	r5,r5,4
    584c:	38800015 	stw	r2,0(r7)
    5850:	39c00104 	addi	r7,r7,4
    5854:	19bffa36 	bltu	r3,r6,5840 <memmove+0xc0>
    5858:	3811883a 	mov	r8,r7
    585c:	003fd906 	br	57c4 <memmove+0x44>

00005860 <memset>:
    5860:	008000c4 	movi	r2,3
    5864:	29403fcc 	andi	r5,r5,255
    5868:	2007883a 	mov	r3,r4
    586c:	1180022e 	bgeu	r2,r6,5878 <memset+0x18>
    5870:	2084703a 	and	r2,r4,r2
    5874:	10000826 	beq	r2,zero,5898 <memset+0x38>
    5878:	30000526 	beq	r6,zero,5890 <memset+0x30>
    587c:	2805883a 	mov	r2,r5
    5880:	30cd883a 	add	r6,r6,r3
    5884:	18800005 	stb	r2,0(r3)
    5888:	18c00044 	addi	r3,r3,1
    588c:	19bffd1e 	bne	r3,r6,5884 <memset+0x24>
    5890:	2005883a 	mov	r2,r4
    5894:	f800283a 	ret
    5898:	2804923a 	slli	r2,r5,8
    589c:	020003c4 	movi	r8,15
    58a0:	200f883a 	mov	r7,r4
    58a4:	2884b03a 	or	r2,r5,r2
    58a8:	1006943a 	slli	r3,r2,16
    58ac:	10c6b03a 	or	r3,r2,r3
    58b0:	41800a2e 	bgeu	r8,r6,58dc <memset+0x7c>
    58b4:	4005883a 	mov	r2,r8
    58b8:	31bffc04 	addi	r6,r6,-16
    58bc:	38c00015 	stw	r3,0(r7)
    58c0:	38c00115 	stw	r3,4(r7)
    58c4:	38c00215 	stw	r3,8(r7)
    58c8:	38c00315 	stw	r3,12(r7)
    58cc:	39c00404 	addi	r7,r7,16
    58d0:	11bff936 	bltu	r2,r6,58b8 <memset+0x58>
    58d4:	008000c4 	movi	r2,3
    58d8:	1180052e 	bgeu	r2,r6,58f0 <memset+0x90>
    58dc:	31bfff04 	addi	r6,r6,-4
    58e0:	008000c4 	movi	r2,3
    58e4:	38c00015 	stw	r3,0(r7)
    58e8:	39c00104 	addi	r7,r7,4
    58ec:	11bffb36 	bltu	r2,r6,58dc <memset+0x7c>
    58f0:	3807883a 	mov	r3,r7
    58f4:	003fe006 	br	5878 <memset+0x18>

000058f8 <_Bfree>:
    58f8:	28000826 	beq	r5,zero,591c <_Bfree+0x24>
    58fc:	28800117 	ldw	r2,4(r5)
    5900:	21001317 	ldw	r4,76(r4)
    5904:	1085883a 	add	r2,r2,r2
    5908:	1085883a 	add	r2,r2,r2
    590c:	1105883a 	add	r2,r2,r4
    5910:	10c00017 	ldw	r3,0(r2)
    5914:	28c00015 	stw	r3,0(r5)
    5918:	11400015 	stw	r5,0(r2)
    591c:	f800283a 	ret

00005920 <__hi0bits>:
    5920:	20bfffec 	andhi	r2,r4,65535
    5924:	10001426 	beq	r2,zero,5978 <__hi0bits+0x58>
    5928:	0007883a 	mov	r3,zero
    592c:	20bfc02c 	andhi	r2,r4,65280
    5930:	1000021e 	bne	r2,zero,593c <__hi0bits+0x1c>
    5934:	2008923a 	slli	r4,r4,8
    5938:	18c00204 	addi	r3,r3,8
    593c:	20bc002c 	andhi	r2,r4,61440
    5940:	1000021e 	bne	r2,zero,594c <__hi0bits+0x2c>
    5944:	2008913a 	slli	r4,r4,4
    5948:	18c00104 	addi	r3,r3,4
    594c:	20b0002c 	andhi	r2,r4,49152
    5950:	1000031e 	bne	r2,zero,5960 <__hi0bits+0x40>
    5954:	2105883a 	add	r2,r4,r4
    5958:	18c00084 	addi	r3,r3,2
    595c:	1089883a 	add	r4,r2,r2
    5960:	20000316 	blt	r4,zero,5970 <__hi0bits+0x50>
    5964:	2090002c 	andhi	r2,r4,16384
    5968:	10000626 	beq	r2,zero,5984 <__hi0bits+0x64>
    596c:	18c00044 	addi	r3,r3,1
    5970:	1805883a 	mov	r2,r3
    5974:	f800283a 	ret
    5978:	2008943a 	slli	r4,r4,16
    597c:	00c00404 	movi	r3,16
    5980:	003fea06 	br	592c <__hi0bits+0xc>
    5984:	00c00804 	movi	r3,32
    5988:	1805883a 	mov	r2,r3
    598c:	f800283a 	ret

00005990 <__lo0bits>:
    5990:	20c00017 	ldw	r3,0(r4)
    5994:	188001cc 	andi	r2,r3,7
    5998:	10000a26 	beq	r2,zero,59c4 <__lo0bits+0x34>
    599c:	1880004c 	andi	r2,r3,1
    59a0:	1005003a 	cmpeq	r2,r2,zero
    59a4:	10002126 	beq	r2,zero,5a2c <__lo0bits+0x9c>
    59a8:	1880008c 	andi	r2,r3,2
    59ac:	1000251e 	bne	r2,zero,5a44 <__lo0bits+0xb4>
    59b0:	1804d0ba 	srli	r2,r3,2
    59b4:	01400084 	movi	r5,2
    59b8:	20800015 	stw	r2,0(r4)
    59bc:	2805883a 	mov	r2,r5
    59c0:	f800283a 	ret
    59c4:	18bfffcc 	andi	r2,r3,65535
    59c8:	10001526 	beq	r2,zero,5a20 <__lo0bits+0x90>
    59cc:	000b883a 	mov	r5,zero
    59d0:	18803fcc 	andi	r2,r3,255
    59d4:	1000021e 	bne	r2,zero,59e0 <__lo0bits+0x50>
    59d8:	1806d23a 	srli	r3,r3,8
    59dc:	29400204 	addi	r5,r5,8
    59e0:	188003cc 	andi	r2,r3,15
    59e4:	1000021e 	bne	r2,zero,59f0 <__lo0bits+0x60>
    59e8:	1806d13a 	srli	r3,r3,4
    59ec:	29400104 	addi	r5,r5,4
    59f0:	188000cc 	andi	r2,r3,3
    59f4:	1000021e 	bne	r2,zero,5a00 <__lo0bits+0x70>
    59f8:	1806d0ba 	srli	r3,r3,2
    59fc:	29400084 	addi	r5,r5,2
    5a00:	1880004c 	andi	r2,r3,1
    5a04:	1000031e 	bne	r2,zero,5a14 <__lo0bits+0x84>
    5a08:	1806d07a 	srli	r3,r3,1
    5a0c:	18000a26 	beq	r3,zero,5a38 <__lo0bits+0xa8>
    5a10:	29400044 	addi	r5,r5,1
    5a14:	2805883a 	mov	r2,r5
    5a18:	20c00015 	stw	r3,0(r4)
    5a1c:	f800283a 	ret
    5a20:	1806d43a 	srli	r3,r3,16
    5a24:	01400404 	movi	r5,16
    5a28:	003fe906 	br	59d0 <__lo0bits+0x40>
    5a2c:	000b883a 	mov	r5,zero
    5a30:	2805883a 	mov	r2,r5
    5a34:	f800283a 	ret
    5a38:	01400804 	movi	r5,32
    5a3c:	2805883a 	mov	r2,r5
    5a40:	f800283a 	ret
    5a44:	1804d07a 	srli	r2,r3,1
    5a48:	01400044 	movi	r5,1
    5a4c:	20800015 	stw	r2,0(r4)
    5a50:	003fda06 	br	59bc <__lo0bits+0x2c>

00005a54 <__mcmp>:
    5a54:	20800417 	ldw	r2,16(r4)
    5a58:	28c00417 	ldw	r3,16(r5)
    5a5c:	10cfc83a 	sub	r7,r2,r3
    5a60:	38000c1e 	bne	r7,zero,5a94 <__mcmp+0x40>
    5a64:	18c5883a 	add	r2,r3,r3
    5a68:	1085883a 	add	r2,r2,r2
    5a6c:	10c00504 	addi	r3,r2,20
    5a70:	21000504 	addi	r4,r4,20
    5a74:	28cb883a 	add	r5,r5,r3
    5a78:	2085883a 	add	r2,r4,r2
    5a7c:	10bfff04 	addi	r2,r2,-4
    5a80:	297fff04 	addi	r5,r5,-4
    5a84:	11800017 	ldw	r6,0(r2)
    5a88:	28c00017 	ldw	r3,0(r5)
    5a8c:	30c0031e 	bne	r6,r3,5a9c <__mcmp+0x48>
    5a90:	20bffa36 	bltu	r4,r2,5a7c <__mcmp+0x28>
    5a94:	3805883a 	mov	r2,r7
    5a98:	f800283a 	ret
    5a9c:	30c00336 	bltu	r6,r3,5aac <__mcmp+0x58>
    5aa0:	01c00044 	movi	r7,1
    5aa4:	3805883a 	mov	r2,r7
    5aa8:	f800283a 	ret
    5aac:	01ffffc4 	movi	r7,-1
    5ab0:	003ff806 	br	5a94 <__mcmp+0x40>

00005ab4 <__ulp>:
    5ab4:	295ffc2c 	andhi	r5,r5,32752
    5ab8:	013f3034 	movhi	r4,64704
    5abc:	290b883a 	add	r5,r5,r4
    5ac0:	0145c83a 	sub	r2,zero,r5
    5ac4:	1007d53a 	srai	r3,r2,20
    5ac8:	000d883a 	mov	r6,zero
    5acc:	0140040e 	bge	zero,r5,5ae0 <__ulp+0x2c>
    5ad0:	280f883a 	mov	r7,r5
    5ad4:	3807883a 	mov	r3,r7
    5ad8:	3005883a 	mov	r2,r6
    5adc:	f800283a 	ret
    5ae0:	008004c4 	movi	r2,19
    5ae4:	193ffb04 	addi	r4,r3,-20
    5ae8:	10c00c0e 	bge	r2,r3,5b1c <__ulp+0x68>
    5aec:	008007c4 	movi	r2,31
    5af0:	1107c83a 	sub	r3,r2,r4
    5af4:	00800784 	movi	r2,30
    5af8:	01400044 	movi	r5,1
    5afc:	11000216 	blt	r2,r4,5b08 <__ulp+0x54>
    5b00:	00800044 	movi	r2,1
    5b04:	10ca983a 	sll	r5,r2,r3
    5b08:	000f883a 	mov	r7,zero
    5b0c:	280d883a 	mov	r6,r5
    5b10:	3807883a 	mov	r3,r7
    5b14:	3005883a 	mov	r2,r6
    5b18:	f800283a 	ret
    5b1c:	00800234 	movhi	r2,8
    5b20:	10cfd83a 	sra	r7,r2,r3
    5b24:	000d883a 	mov	r6,zero
    5b28:	3005883a 	mov	r2,r6
    5b2c:	3807883a 	mov	r3,r7
    5b30:	f800283a 	ret

00005b34 <__b2d>:
    5b34:	20800417 	ldw	r2,16(r4)
    5b38:	defff904 	addi	sp,sp,-28
    5b3c:	dd000415 	stw	r20,16(sp)
    5b40:	1085883a 	add	r2,r2,r2
    5b44:	25000504 	addi	r20,r4,20
    5b48:	1085883a 	add	r2,r2,r2
    5b4c:	dc000015 	stw	r16,0(sp)
    5b50:	a0a1883a 	add	r16,r20,r2
    5b54:	dd400515 	stw	r21,20(sp)
    5b58:	857fff17 	ldw	r21,-4(r16)
    5b5c:	dc400115 	stw	r17,4(sp)
    5b60:	dfc00615 	stw	ra,24(sp)
    5b64:	a809883a 	mov	r4,r21
    5b68:	2823883a 	mov	r17,r5
    5b6c:	dcc00315 	stw	r19,12(sp)
    5b70:	dc800215 	stw	r18,8(sp)
    5b74:	00059200 	call	5920 <__hi0bits>
    5b78:	100b883a 	mov	r5,r2
    5b7c:	00800804 	movi	r2,32
    5b80:	1145c83a 	sub	r2,r2,r5
    5b84:	88800015 	stw	r2,0(r17)
    5b88:	00800284 	movi	r2,10
    5b8c:	80ffff04 	addi	r3,r16,-4
    5b90:	11401416 	blt	r2,r5,5be4 <__b2d+0xb0>
    5b94:	008002c4 	movi	r2,11
    5b98:	1149c83a 	sub	r4,r2,r5
    5b9c:	a0c02736 	bltu	r20,r3,5c3c <__b2d+0x108>
    5ba0:	000d883a 	mov	r6,zero
    5ba4:	28800544 	addi	r2,r5,21
    5ba8:	a906d83a 	srl	r3,r21,r4
    5bac:	a884983a 	sll	r2,r21,r2
    5bb0:	1ccffc34 	orhi	r19,r3,16368
    5bb4:	11a4b03a 	or	r18,r2,r6
    5bb8:	9005883a 	mov	r2,r18
    5bbc:	9807883a 	mov	r3,r19
    5bc0:	dfc00617 	ldw	ra,24(sp)
    5bc4:	dd400517 	ldw	r21,20(sp)
    5bc8:	dd000417 	ldw	r20,16(sp)
    5bcc:	dcc00317 	ldw	r19,12(sp)
    5bd0:	dc800217 	ldw	r18,8(sp)
    5bd4:	dc400117 	ldw	r17,4(sp)
    5bd8:	dc000017 	ldw	r16,0(sp)
    5bdc:	dec00704 	addi	sp,sp,28
    5be0:	f800283a 	ret
    5be4:	a0c00e36 	bltu	r20,r3,5c20 <__b2d+0xec>
    5be8:	293ffd44 	addi	r4,r5,-11
    5bec:	000d883a 	mov	r6,zero
    5bf0:	20000f26 	beq	r4,zero,5c30 <__b2d+0xfc>
    5bf4:	00800804 	movi	r2,32
    5bf8:	110bc83a 	sub	r5,r2,r4
    5bfc:	a0c01236 	bltu	r20,r3,5c48 <__b2d+0x114>
    5c00:	000f883a 	mov	r7,zero
    5c04:	a904983a 	sll	r2,r21,r4
    5c08:	3146d83a 	srl	r3,r6,r5
    5c0c:	3108983a 	sll	r4,r6,r4
    5c10:	108ffc34 	orhi	r2,r2,16368
    5c14:	18a6b03a 	or	r19,r3,r2
    5c18:	3924b03a 	or	r18,r7,r4
    5c1c:	003fe606 	br	5bb8 <__b2d+0x84>
    5c20:	293ffd44 	addi	r4,r5,-11
    5c24:	81bffe17 	ldw	r6,-8(r16)
    5c28:	80fffe04 	addi	r3,r16,-8
    5c2c:	203ff11e 	bne	r4,zero,5bf4 <__b2d+0xc0>
    5c30:	accffc34 	orhi	r19,r21,16368
    5c34:	3025883a 	mov	r18,r6
    5c38:	003fdf06 	br	5bb8 <__b2d+0x84>
    5c3c:	18bfff17 	ldw	r2,-4(r3)
    5c40:	110cd83a 	srl	r6,r2,r4
    5c44:	003fd706 	br	5ba4 <__b2d+0x70>
    5c48:	18bfff17 	ldw	r2,-4(r3)
    5c4c:	114ed83a 	srl	r7,r2,r5
    5c50:	003fec06 	br	5c04 <__b2d+0xd0>

00005c54 <__ratio>:
    5c54:	defff904 	addi	sp,sp,-28
    5c58:	dc400215 	stw	r17,8(sp)
    5c5c:	2823883a 	mov	r17,r5
    5c60:	d80b883a 	mov	r5,sp
    5c64:	dfc00615 	stw	ra,24(sp)
    5c68:	dd000515 	stw	r20,20(sp)
    5c6c:	dcc00415 	stw	r19,16(sp)
    5c70:	dc800315 	stw	r18,12(sp)
    5c74:	2025883a 	mov	r18,r4
    5c78:	0005b340 	call	5b34 <__b2d>
    5c7c:	8809883a 	mov	r4,r17
    5c80:	d9400104 	addi	r5,sp,4
    5c84:	1027883a 	mov	r19,r2
    5c88:	1829883a 	mov	r20,r3
    5c8c:	0005b340 	call	5b34 <__b2d>
    5c90:	89000417 	ldw	r4,16(r17)
    5c94:	91c00417 	ldw	r7,16(r18)
    5c98:	d9800117 	ldw	r6,4(sp)
    5c9c:	180b883a 	mov	r5,r3
    5ca0:	390fc83a 	sub	r7,r7,r4
    5ca4:	1009883a 	mov	r4,r2
    5ca8:	d8800017 	ldw	r2,0(sp)
    5cac:	380e917a 	slli	r7,r7,5
    5cb0:	2011883a 	mov	r8,r4
    5cb4:	1185c83a 	sub	r2,r2,r6
    5cb8:	11c5883a 	add	r2,r2,r7
    5cbc:	1006953a 	slli	r3,r2,20
    5cc0:	2813883a 	mov	r9,r5
    5cc4:	00800d0e 	bge	zero,r2,5cfc <__ratio+0xa8>
    5cc8:	1d29883a 	add	r20,r3,r20
    5ccc:	a00b883a 	mov	r5,r20
    5cd0:	480f883a 	mov	r7,r9
    5cd4:	9809883a 	mov	r4,r19
    5cd8:	400d883a 	mov	r6,r8
    5cdc:	0008ab00 	call	8ab0 <__divdf3>
    5ce0:	dfc00617 	ldw	ra,24(sp)
    5ce4:	dd000517 	ldw	r20,20(sp)
    5ce8:	dcc00417 	ldw	r19,16(sp)
    5cec:	dc800317 	ldw	r18,12(sp)
    5cf0:	dc400217 	ldw	r17,8(sp)
    5cf4:	dec00704 	addi	sp,sp,28
    5cf8:	f800283a 	ret
    5cfc:	28d3c83a 	sub	r9,r5,r3
    5d00:	003ff206 	br	5ccc <__ratio+0x78>

00005d04 <_mprec_log10>:
    5d04:	defffe04 	addi	sp,sp,-8
    5d08:	008005c4 	movi	r2,23
    5d0c:	dc000015 	stw	r16,0(sp)
    5d10:	dfc00115 	stw	ra,4(sp)
    5d14:	2021883a 	mov	r16,r4
    5d18:	11000c16 	blt	r2,r4,5d4c <_mprec_log10+0x48>
    5d1c:	200490fa 	slli	r2,r4,3
    5d20:	00c00074 	movhi	r3,1
    5d24:	18f41a04 	addi	r3,r3,-12184
    5d28:	10c5883a 	add	r2,r2,r3
    5d2c:	12400117 	ldw	r9,4(r2)
    5d30:	12000017 	ldw	r8,0(r2)
    5d34:	4807883a 	mov	r3,r9
    5d38:	4005883a 	mov	r2,r8
    5d3c:	dfc00117 	ldw	ra,4(sp)
    5d40:	dc000017 	ldw	r16,0(sp)
    5d44:	dec00204 	addi	sp,sp,8
    5d48:	f800283a 	ret
    5d4c:	0011883a 	mov	r8,zero
    5d50:	024ffc34 	movhi	r9,16368
    5d54:	0005883a 	mov	r2,zero
    5d58:	00d00934 	movhi	r3,16420
    5d5c:	480b883a 	mov	r5,r9
    5d60:	4009883a 	mov	r4,r8
    5d64:	180f883a 	mov	r7,r3
    5d68:	100d883a 	mov	r6,r2
    5d6c:	00086ec0 	call	86ec <__muldf3>
    5d70:	843fffc4 	addi	r16,r16,-1
    5d74:	1011883a 	mov	r8,r2
    5d78:	1813883a 	mov	r9,r3
    5d7c:	803ff51e 	bne	r16,zero,5d54 <_mprec_log10+0x50>
    5d80:	4005883a 	mov	r2,r8
    5d84:	4807883a 	mov	r3,r9
    5d88:	dfc00117 	ldw	ra,4(sp)
    5d8c:	dc000017 	ldw	r16,0(sp)
    5d90:	dec00204 	addi	sp,sp,8
    5d94:	f800283a 	ret

00005d98 <__copybits>:
    5d98:	297fffc4 	addi	r5,r5,-1
    5d9c:	30800417 	ldw	r2,16(r6)
    5da0:	280bd17a 	srai	r5,r5,5
    5da4:	31800504 	addi	r6,r6,20
    5da8:	1085883a 	add	r2,r2,r2
    5dac:	294b883a 	add	r5,r5,r5
    5db0:	294b883a 	add	r5,r5,r5
    5db4:	1085883a 	add	r2,r2,r2
    5db8:	290b883a 	add	r5,r5,r4
    5dbc:	3087883a 	add	r3,r6,r2
    5dc0:	29400104 	addi	r5,r5,4
    5dc4:	30c0052e 	bgeu	r6,r3,5ddc <__copybits+0x44>
    5dc8:	30800017 	ldw	r2,0(r6)
    5dcc:	31800104 	addi	r6,r6,4
    5dd0:	20800015 	stw	r2,0(r4)
    5dd4:	21000104 	addi	r4,r4,4
    5dd8:	30fffb36 	bltu	r6,r3,5dc8 <__copybits+0x30>
    5ddc:	2140032e 	bgeu	r4,r5,5dec <__copybits+0x54>
    5de0:	20000015 	stw	zero,0(r4)
    5de4:	21000104 	addi	r4,r4,4
    5de8:	217ffd36 	bltu	r4,r5,5de0 <__copybits+0x48>
    5dec:	f800283a 	ret

00005df0 <__any_on>:
    5df0:	20800417 	ldw	r2,16(r4)
    5df4:	2807d17a 	srai	r3,r5,5
    5df8:	21000504 	addi	r4,r4,20
    5dfc:	10c00d0e 	bge	r2,r3,5e34 <__any_on+0x44>
    5e00:	1085883a 	add	r2,r2,r2
    5e04:	1085883a 	add	r2,r2,r2
    5e08:	208d883a 	add	r6,r4,r2
    5e0c:	2180182e 	bgeu	r4,r6,5e70 <__any_on+0x80>
    5e10:	30bfff17 	ldw	r2,-4(r6)
    5e14:	30ffff04 	addi	r3,r6,-4
    5e18:	1000041e 	bne	r2,zero,5e2c <__any_on+0x3c>
    5e1c:	20c0142e 	bgeu	r4,r3,5e70 <__any_on+0x80>
    5e20:	18ffff04 	addi	r3,r3,-4
    5e24:	18800017 	ldw	r2,0(r3)
    5e28:	103ffc26 	beq	r2,zero,5e1c <__any_on+0x2c>
    5e2c:	00800044 	movi	r2,1
    5e30:	f800283a 	ret
    5e34:	18800a0e 	bge	r3,r2,5e60 <__any_on+0x70>
    5e38:	294007cc 	andi	r5,r5,31
    5e3c:	28000826 	beq	r5,zero,5e60 <__any_on+0x70>
    5e40:	18c5883a 	add	r2,r3,r3
    5e44:	1085883a 	add	r2,r2,r2
    5e48:	208d883a 	add	r6,r4,r2
    5e4c:	30c00017 	ldw	r3,0(r6)
    5e50:	1944d83a 	srl	r2,r3,r5
    5e54:	1144983a 	sll	r2,r2,r5
    5e58:	18bff41e 	bne	r3,r2,5e2c <__any_on+0x3c>
    5e5c:	003feb06 	br	5e0c <__any_on+0x1c>
    5e60:	18c5883a 	add	r2,r3,r3
    5e64:	1085883a 	add	r2,r2,r2
    5e68:	208d883a 	add	r6,r4,r2
    5e6c:	003fe706 	br	5e0c <__any_on+0x1c>
    5e70:	0005883a 	mov	r2,zero
    5e74:	f800283a 	ret

00005e78 <_Balloc>:
    5e78:	20c01317 	ldw	r3,76(r4)
    5e7c:	defffb04 	addi	sp,sp,-20
    5e80:	dcc00315 	stw	r19,12(sp)
    5e84:	dc800215 	stw	r18,8(sp)
    5e88:	dfc00415 	stw	ra,16(sp)
    5e8c:	2825883a 	mov	r18,r5
    5e90:	dc400115 	stw	r17,4(sp)
    5e94:	dc000015 	stw	r16,0(sp)
    5e98:	2027883a 	mov	r19,r4
    5e9c:	01800404 	movi	r6,16
    5ea0:	01400104 	movi	r5,4
    5ea4:	18001726 	beq	r3,zero,5f04 <_Balloc+0x8c>
    5ea8:	01400044 	movi	r5,1
    5eac:	9485883a 	add	r2,r18,r18
    5eb0:	2ca2983a 	sll	r17,r5,r18
    5eb4:	1085883a 	add	r2,r2,r2
    5eb8:	10c7883a 	add	r3,r2,r3
    5ebc:	1c000017 	ldw	r16,0(r3)
    5ec0:	8c4d883a 	add	r6,r17,r17
    5ec4:	318d883a 	add	r6,r6,r6
    5ec8:	9809883a 	mov	r4,r19
    5ecc:	31800504 	addi	r6,r6,20
    5ed0:	80001226 	beq	r16,zero,5f1c <_Balloc+0xa4>
    5ed4:	80800017 	ldw	r2,0(r16)
    5ed8:	18800015 	stw	r2,0(r3)
    5edc:	80000415 	stw	zero,16(r16)
    5ee0:	80000315 	stw	zero,12(r16)
    5ee4:	8005883a 	mov	r2,r16
    5ee8:	dfc00417 	ldw	ra,16(sp)
    5eec:	dcc00317 	ldw	r19,12(sp)
    5ef0:	dc800217 	ldw	r18,8(sp)
    5ef4:	dc400117 	ldw	r17,4(sp)
    5ef8:	dc000017 	ldw	r16,0(sp)
    5efc:	dec00504 	addi	sp,sp,20
    5f00:	f800283a 	ret
    5f04:	00072400 	call	7240 <_calloc_r>
    5f08:	1007883a 	mov	r3,r2
    5f0c:	0021883a 	mov	r16,zero
    5f10:	98801315 	stw	r2,76(r19)
    5f14:	103fe41e 	bne	r2,zero,5ea8 <_Balloc+0x30>
    5f18:	003ff206 	br	5ee4 <_Balloc+0x6c>
    5f1c:	00072400 	call	7240 <_calloc_r>
    5f20:	103ff026 	beq	r2,zero,5ee4 <_Balloc+0x6c>
    5f24:	1021883a 	mov	r16,r2
    5f28:	14800115 	stw	r18,4(r2)
    5f2c:	14400215 	stw	r17,8(r2)
    5f30:	003fea06 	br	5edc <_Balloc+0x64>

00005f34 <__d2b>:
    5f34:	defff504 	addi	sp,sp,-44
    5f38:	dcc00515 	stw	r19,20(sp)
    5f3c:	04c00044 	movi	r19,1
    5f40:	dc000215 	stw	r16,8(sp)
    5f44:	2821883a 	mov	r16,r5
    5f48:	980b883a 	mov	r5,r19
    5f4c:	ddc00915 	stw	r23,36(sp)
    5f50:	dd800815 	stw	r22,32(sp)
    5f54:	dd400715 	stw	r21,28(sp)
    5f58:	dd000615 	stw	r20,24(sp)
    5f5c:	dc800415 	stw	r18,16(sp)
    5f60:	dc400315 	stw	r17,12(sp)
    5f64:	dfc00a15 	stw	ra,40(sp)
    5f68:	3023883a 	mov	r17,r6
    5f6c:	382d883a 	mov	r22,r7
    5f70:	ddc00b17 	ldw	r23,44(sp)
    5f74:	0005e780 	call	5e78 <_Balloc>
    5f78:	1025883a 	mov	r18,r2
    5f7c:	00a00034 	movhi	r2,32768
    5f80:	10bfffc4 	addi	r2,r2,-1
    5f84:	8888703a 	and	r4,r17,r2
    5f88:	202ad53a 	srli	r21,r4,20
    5f8c:	00800434 	movhi	r2,16
    5f90:	10bfffc4 	addi	r2,r2,-1
    5f94:	8886703a 	and	r3,r17,r2
    5f98:	a829003a 	cmpeq	r20,r21,zero
    5f9c:	800b883a 	mov	r5,r16
    5fa0:	d8c00115 	stw	r3,4(sp)
    5fa4:	94000504 	addi	r16,r18,20
    5fa8:	a000021e 	bne	r20,zero,5fb4 <__d2b+0x80>
    5fac:	18c00434 	orhi	r3,r3,16
    5fb0:	d8c00115 	stw	r3,4(sp)
    5fb4:	28002726 	beq	r5,zero,6054 <__d2b+0x120>
    5fb8:	d809883a 	mov	r4,sp
    5fbc:	d9400015 	stw	r5,0(sp)
    5fc0:	00059900 	call	5990 <__lo0bits>
    5fc4:	100d883a 	mov	r6,r2
    5fc8:	10003526 	beq	r2,zero,60a0 <__d2b+0x16c>
    5fcc:	d8c00117 	ldw	r3,4(sp)
    5fd0:	00800804 	movi	r2,32
    5fd4:	1185c83a 	sub	r2,r2,r6
    5fd8:	d9000017 	ldw	r4,0(sp)
    5fdc:	1886983a 	sll	r3,r3,r2
    5fe0:	1906b03a 	or	r3,r3,r4
    5fe4:	90c00515 	stw	r3,20(r18)
    5fe8:	d8c00117 	ldw	r3,4(sp)
    5fec:	1986d83a 	srl	r3,r3,r6
    5ff0:	d8c00115 	stw	r3,4(sp)
    5ff4:	180b003a 	cmpeq	r5,r3,zero
    5ff8:	00800084 	movi	r2,2
    5ffc:	114bc83a 	sub	r5,r2,r5
    6000:	80c00115 	stw	r3,4(r16)
    6004:	91400415 	stw	r5,16(r18)
    6008:	a0001a1e 	bne	r20,zero,6074 <__d2b+0x140>
    600c:	3545883a 	add	r2,r6,r21
    6010:	10bef344 	addi	r2,r2,-1075
    6014:	00c00d44 	movi	r3,53
    6018:	b0800015 	stw	r2,0(r22)
    601c:	1987c83a 	sub	r3,r3,r6
    6020:	b8c00015 	stw	r3,0(r23)
    6024:	9005883a 	mov	r2,r18
    6028:	dfc00a17 	ldw	ra,40(sp)
    602c:	ddc00917 	ldw	r23,36(sp)
    6030:	dd800817 	ldw	r22,32(sp)
    6034:	dd400717 	ldw	r21,28(sp)
    6038:	dd000617 	ldw	r20,24(sp)
    603c:	dcc00517 	ldw	r19,20(sp)
    6040:	dc800417 	ldw	r18,16(sp)
    6044:	dc400317 	ldw	r17,12(sp)
    6048:	dc000217 	ldw	r16,8(sp)
    604c:	dec00b04 	addi	sp,sp,44
    6050:	f800283a 	ret
    6054:	d9000104 	addi	r4,sp,4
    6058:	00059900 	call	5990 <__lo0bits>
    605c:	11800804 	addi	r6,r2,32
    6060:	d8800117 	ldw	r2,4(sp)
    6064:	94c00415 	stw	r19,16(r18)
    6068:	980b883a 	mov	r5,r19
    606c:	90800515 	stw	r2,20(r18)
    6070:	a03fe626 	beq	r20,zero,600c <__d2b+0xd8>
    6074:	2945883a 	add	r2,r5,r5
    6078:	1085883a 	add	r2,r2,r2
    607c:	1405883a 	add	r2,r2,r16
    6080:	113fff17 	ldw	r4,-4(r2)
    6084:	30fef384 	addi	r3,r6,-1074
    6088:	2820917a 	slli	r16,r5,5
    608c:	b0c00015 	stw	r3,0(r22)
    6090:	00059200 	call	5920 <__hi0bits>
    6094:	80a1c83a 	sub	r16,r16,r2
    6098:	bc000015 	stw	r16,0(r23)
    609c:	003fe106 	br	6024 <__d2b+0xf0>
    60a0:	d8800017 	ldw	r2,0(sp)
    60a4:	90800515 	stw	r2,20(r18)
    60a8:	d8c00117 	ldw	r3,4(sp)
    60ac:	003fd106 	br	5ff4 <__d2b+0xc0>

000060b0 <__mdiff>:
    60b0:	defffb04 	addi	sp,sp,-20
    60b4:	dc000015 	stw	r16,0(sp)
    60b8:	2821883a 	mov	r16,r5
    60bc:	dc800215 	stw	r18,8(sp)
    60c0:	300b883a 	mov	r5,r6
    60c4:	2025883a 	mov	r18,r4
    60c8:	8009883a 	mov	r4,r16
    60cc:	dc400115 	stw	r17,4(sp)
    60d0:	dfc00415 	stw	ra,16(sp)
    60d4:	dcc00315 	stw	r19,12(sp)
    60d8:	3023883a 	mov	r17,r6
    60dc:	0005a540 	call	5a54 <__mcmp>
    60e0:	10004226 	beq	r2,zero,61ec <__mdiff+0x13c>
    60e4:	10005016 	blt	r2,zero,6228 <__mdiff+0x178>
    60e8:	0027883a 	mov	r19,zero
    60ec:	81400117 	ldw	r5,4(r16)
    60f0:	9009883a 	mov	r4,r18
    60f4:	0005e780 	call	5e78 <_Balloc>
    60f8:	1019883a 	mov	r12,r2
    60fc:	82800417 	ldw	r10,16(r16)
    6100:	88800417 	ldw	r2,16(r17)
    6104:	81800504 	addi	r6,r16,20
    6108:	5287883a 	add	r3,r10,r10
    610c:	1085883a 	add	r2,r2,r2
    6110:	18c7883a 	add	r3,r3,r3
    6114:	1085883a 	add	r2,r2,r2
    6118:	8a000504 	addi	r8,r17,20
    611c:	64c00315 	stw	r19,12(r12)
    6120:	30db883a 	add	r13,r6,r3
    6124:	4097883a 	add	r11,r8,r2
    6128:	61c00504 	addi	r7,r12,20
    612c:	0013883a 	mov	r9,zero
    6130:	31000017 	ldw	r4,0(r6)
    6134:	41400017 	ldw	r5,0(r8)
    6138:	42000104 	addi	r8,r8,4
    613c:	20bfffcc 	andi	r2,r4,65535
    6140:	28ffffcc 	andi	r3,r5,65535
    6144:	10c5c83a 	sub	r2,r2,r3
    6148:	1245883a 	add	r2,r2,r9
    614c:	2008d43a 	srli	r4,r4,16
    6150:	280ad43a 	srli	r5,r5,16
    6154:	1007d43a 	srai	r3,r2,16
    6158:	3880000d 	sth	r2,0(r7)
    615c:	2149c83a 	sub	r4,r4,r5
    6160:	20c9883a 	add	r4,r4,r3
    6164:	3900008d 	sth	r4,2(r7)
    6168:	31800104 	addi	r6,r6,4
    616c:	39c00104 	addi	r7,r7,4
    6170:	2013d43a 	srai	r9,r4,16
    6174:	42ffee36 	bltu	r8,r11,6130 <__mdiff+0x80>
    6178:	33400c2e 	bgeu	r6,r13,61ac <__mdiff+0xfc>
    617c:	30800017 	ldw	r2,0(r6)
    6180:	31800104 	addi	r6,r6,4
    6184:	10ffffcc 	andi	r3,r2,65535
    6188:	1a47883a 	add	r3,r3,r9
    618c:	1004d43a 	srli	r2,r2,16
    6190:	1809d43a 	srai	r4,r3,16
    6194:	38c0000d 	sth	r3,0(r7)
    6198:	1105883a 	add	r2,r2,r4
    619c:	3880008d 	sth	r2,2(r7)
    61a0:	1013d43a 	srai	r9,r2,16
    61a4:	39c00104 	addi	r7,r7,4
    61a8:	337ff436 	bltu	r6,r13,617c <__mdiff+0xcc>
    61ac:	38bfff17 	ldw	r2,-4(r7)
    61b0:	38ffff04 	addi	r3,r7,-4
    61b4:	1000041e 	bne	r2,zero,61c8 <__mdiff+0x118>
    61b8:	18ffff04 	addi	r3,r3,-4
    61bc:	18800017 	ldw	r2,0(r3)
    61c0:	52bfffc4 	addi	r10,r10,-1
    61c4:	103ffc26 	beq	r2,zero,61b8 <__mdiff+0x108>
    61c8:	6005883a 	mov	r2,r12
    61cc:	62800415 	stw	r10,16(r12)
    61d0:	dfc00417 	ldw	ra,16(sp)
    61d4:	dcc00317 	ldw	r19,12(sp)
    61d8:	dc800217 	ldw	r18,8(sp)
    61dc:	dc400117 	ldw	r17,4(sp)
    61e0:	dc000017 	ldw	r16,0(sp)
    61e4:	dec00504 	addi	sp,sp,20
    61e8:	f800283a 	ret
    61ec:	9009883a 	mov	r4,r18
    61f0:	000b883a 	mov	r5,zero
    61f4:	0005e780 	call	5e78 <_Balloc>
    61f8:	1019883a 	mov	r12,r2
    61fc:	00800044 	movi	r2,1
    6200:	60800415 	stw	r2,16(r12)
    6204:	6005883a 	mov	r2,r12
    6208:	60000515 	stw	zero,20(r12)
    620c:	dfc00417 	ldw	ra,16(sp)
    6210:	dcc00317 	ldw	r19,12(sp)
    6214:	dc800217 	ldw	r18,8(sp)
    6218:	dc400117 	ldw	r17,4(sp)
    621c:	dc000017 	ldw	r16,0(sp)
    6220:	dec00504 	addi	sp,sp,20
    6224:	f800283a 	ret
    6228:	880d883a 	mov	r6,r17
    622c:	04c00044 	movi	r19,1
    6230:	8023883a 	mov	r17,r16
    6234:	3021883a 	mov	r16,r6
    6238:	003fac06 	br	60ec <__mdiff+0x3c>

0000623c <__lshift>:
    623c:	defff904 	addi	sp,sp,-28
    6240:	28800417 	ldw	r2,16(r5)
    6244:	dc000015 	stw	r16,0(sp)
    6248:	3021d17a 	srai	r16,r6,5
    624c:	28c00217 	ldw	r3,8(r5)
    6250:	10800044 	addi	r2,r2,1
    6254:	dc400115 	stw	r17,4(sp)
    6258:	80a3883a 	add	r17,r16,r2
    625c:	dd400515 	stw	r21,20(sp)
    6260:	dd000415 	stw	r20,16(sp)
    6264:	dc800215 	stw	r18,8(sp)
    6268:	dfc00615 	stw	ra,24(sp)
    626c:	2825883a 	mov	r18,r5
    6270:	dcc00315 	stw	r19,12(sp)
    6274:	3029883a 	mov	r20,r6
    6278:	202b883a 	mov	r21,r4
    627c:	29400117 	ldw	r5,4(r5)
    6280:	1c40030e 	bge	r3,r17,6290 <__lshift+0x54>
    6284:	18c7883a 	add	r3,r3,r3
    6288:	29400044 	addi	r5,r5,1
    628c:	1c7ffd16 	blt	r3,r17,6284 <__lshift+0x48>
    6290:	a809883a 	mov	r4,r21
    6294:	0005e780 	call	5e78 <_Balloc>
    6298:	1027883a 	mov	r19,r2
    629c:	11400504 	addi	r5,r2,20
    62a0:	0400090e 	bge	zero,r16,62c8 <__lshift+0x8c>
    62a4:	2805883a 	mov	r2,r5
    62a8:	0007883a 	mov	r3,zero
    62ac:	18c00044 	addi	r3,r3,1
    62b0:	10000015 	stw	zero,0(r2)
    62b4:	10800104 	addi	r2,r2,4
    62b8:	80fffc1e 	bne	r16,r3,62ac <__lshift+0x70>
    62bc:	8405883a 	add	r2,r16,r16
    62c0:	1085883a 	add	r2,r2,r2
    62c4:	288b883a 	add	r5,r5,r2
    62c8:	90800417 	ldw	r2,16(r18)
    62cc:	91000504 	addi	r4,r18,20
    62d0:	a18007cc 	andi	r6,r20,31
    62d4:	1085883a 	add	r2,r2,r2
    62d8:	1085883a 	add	r2,r2,r2
    62dc:	208f883a 	add	r7,r4,r2
    62e0:	30001e26 	beq	r6,zero,635c <__lshift+0x120>
    62e4:	00800804 	movi	r2,32
    62e8:	1191c83a 	sub	r8,r2,r6
    62ec:	0007883a 	mov	r3,zero
    62f0:	20800017 	ldw	r2,0(r4)
    62f4:	1184983a 	sll	r2,r2,r6
    62f8:	1884b03a 	or	r2,r3,r2
    62fc:	28800015 	stw	r2,0(r5)
    6300:	20c00017 	ldw	r3,0(r4)
    6304:	21000104 	addi	r4,r4,4
    6308:	29400104 	addi	r5,r5,4
    630c:	1a06d83a 	srl	r3,r3,r8
    6310:	21fff736 	bltu	r4,r7,62f0 <__lshift+0xb4>
    6314:	28c00015 	stw	r3,0(r5)
    6318:	18000126 	beq	r3,zero,6320 <__lshift+0xe4>
    631c:	8c400044 	addi	r17,r17,1
    6320:	88bfffc4 	addi	r2,r17,-1
    6324:	98800415 	stw	r2,16(r19)
    6328:	a809883a 	mov	r4,r21
    632c:	900b883a 	mov	r5,r18
    6330:	00058f80 	call	58f8 <_Bfree>
    6334:	9805883a 	mov	r2,r19
    6338:	dfc00617 	ldw	ra,24(sp)
    633c:	dd400517 	ldw	r21,20(sp)
    6340:	dd000417 	ldw	r20,16(sp)
    6344:	dcc00317 	ldw	r19,12(sp)
    6348:	dc800217 	ldw	r18,8(sp)
    634c:	dc400117 	ldw	r17,4(sp)
    6350:	dc000017 	ldw	r16,0(sp)
    6354:	dec00704 	addi	sp,sp,28
    6358:	f800283a 	ret
    635c:	20800017 	ldw	r2,0(r4)
    6360:	21000104 	addi	r4,r4,4
    6364:	28800015 	stw	r2,0(r5)
    6368:	29400104 	addi	r5,r5,4
    636c:	21ffec2e 	bgeu	r4,r7,6320 <__lshift+0xe4>
    6370:	20800017 	ldw	r2,0(r4)
    6374:	21000104 	addi	r4,r4,4
    6378:	28800015 	stw	r2,0(r5)
    637c:	29400104 	addi	r5,r5,4
    6380:	21fff636 	bltu	r4,r7,635c <__lshift+0x120>
    6384:	003fe606 	br	6320 <__lshift+0xe4>

00006388 <__multiply>:
    6388:	defff904 	addi	sp,sp,-28
    638c:	dcc00315 	stw	r19,12(sp)
    6390:	dc800215 	stw	r18,8(sp)
    6394:	2cc00417 	ldw	r19,16(r5)
    6398:	34800417 	ldw	r18,16(r6)
    639c:	dd000415 	stw	r20,16(sp)
    63a0:	dc400115 	stw	r17,4(sp)
    63a4:	dfc00615 	stw	ra,24(sp)
    63a8:	dd400515 	stw	r21,20(sp)
    63ac:	dc000015 	stw	r16,0(sp)
    63b0:	2823883a 	mov	r17,r5
    63b4:	3029883a 	mov	r20,r6
    63b8:	9c80040e 	bge	r19,r18,63cc <__multiply+0x44>
    63bc:	9027883a 	mov	r19,r18
    63c0:	2c800417 	ldw	r18,16(r5)
    63c4:	2829883a 	mov	r20,r5
    63c8:	3023883a 	mov	r17,r6
    63cc:	88800217 	ldw	r2,8(r17)
    63d0:	9ca1883a 	add	r16,r19,r18
    63d4:	89400117 	ldw	r5,4(r17)
    63d8:	1400010e 	bge	r2,r16,63e0 <__multiply+0x58>
    63dc:	29400044 	addi	r5,r5,1
    63e0:	0005e780 	call	5e78 <_Balloc>
    63e4:	102b883a 	mov	r21,r2
    63e8:	8405883a 	add	r2,r16,r16
    63ec:	1085883a 	add	r2,r2,r2
    63f0:	a9000504 	addi	r4,r21,20
    63f4:	209d883a 	add	r14,r4,r2
    63f8:	2380042e 	bgeu	r4,r14,640c <__multiply+0x84>
    63fc:	2005883a 	mov	r2,r4
    6400:	10000015 	stw	zero,0(r2)
    6404:	10800104 	addi	r2,r2,4
    6408:	13bffd36 	bltu	r2,r14,6400 <__multiply+0x78>
    640c:	9485883a 	add	r2,r18,r18
    6410:	9cc7883a 	add	r3,r19,r19
    6414:	a1800504 	addi	r6,r20,20
    6418:	1085883a 	add	r2,r2,r2
    641c:	8b400504 	addi	r13,r17,20
    6420:	18c7883a 	add	r3,r3,r3
    6424:	309f883a 	add	r15,r6,r2
    6428:	68d7883a 	add	r11,r13,r3
    642c:	33c03b2e 	bgeu	r6,r15,651c <__multiply+0x194>
    6430:	2019883a 	mov	r12,r4
    6434:	30800017 	ldw	r2,0(r6)
    6438:	127fffcc 	andi	r9,r2,65535
    643c:	48001826 	beq	r9,zero,64a0 <__multiply+0x118>
    6440:	6811883a 	mov	r8,r13
    6444:	600f883a 	mov	r7,r12
    6448:	0015883a 	mov	r10,zero
    644c:	40c00017 	ldw	r3,0(r8)
    6450:	39400017 	ldw	r5,0(r7)
    6454:	42000104 	addi	r8,r8,4
    6458:	193fffcc 	andi	r4,r3,65535
    645c:	4909383a 	mul	r4,r9,r4
    6460:	1806d43a 	srli	r3,r3,16
    6464:	28bfffcc 	andi	r2,r5,65535
    6468:	5085883a 	add	r2,r10,r2
    646c:	2089883a 	add	r4,r4,r2
    6470:	48c7383a 	mul	r3,r9,r3
    6474:	280ad43a 	srli	r5,r5,16
    6478:	2004d43a 	srli	r2,r4,16
    647c:	3900000d 	sth	r4,0(r7)
    6480:	1947883a 	add	r3,r3,r5
    6484:	10c5883a 	add	r2,r2,r3
    6488:	3880008d 	sth	r2,2(r7)
    648c:	1014d43a 	srli	r10,r2,16
    6490:	39c00104 	addi	r7,r7,4
    6494:	42ffed36 	bltu	r8,r11,644c <__multiply+0xc4>
    6498:	3a800015 	stw	r10,0(r7)
    649c:	30800017 	ldw	r2,0(r6)
    64a0:	1012d43a 	srli	r9,r2,16
    64a4:	48001926 	beq	r9,zero,650c <__multiply+0x184>
    64a8:	60800017 	ldw	r2,0(r12)
    64ac:	6811883a 	mov	r8,r13
    64b0:	600f883a 	mov	r7,r12
    64b4:	0015883a 	mov	r10,zero
    64b8:	100b883a 	mov	r5,r2
    64bc:	41000017 	ldw	r4,0(r8)
    64c0:	2806d43a 	srli	r3,r5,16
    64c4:	3880000d 	sth	r2,0(r7)
    64c8:	20bfffcc 	andi	r2,r4,65535
    64cc:	4885383a 	mul	r2,r9,r2
    64d0:	50c7883a 	add	r3,r10,r3
    64d4:	2008d43a 	srli	r4,r4,16
    64d8:	10c5883a 	add	r2,r2,r3
    64dc:	3880008d 	sth	r2,2(r7)
    64e0:	39c00104 	addi	r7,r7,4
    64e4:	39400017 	ldw	r5,0(r7)
    64e8:	4909383a 	mul	r4,r9,r4
    64ec:	1004d43a 	srli	r2,r2,16
    64f0:	28ffffcc 	andi	r3,r5,65535
    64f4:	20c9883a 	add	r4,r4,r3
    64f8:	1105883a 	add	r2,r2,r4
    64fc:	42000104 	addi	r8,r8,4
    6500:	1014d43a 	srli	r10,r2,16
    6504:	42ffed36 	bltu	r8,r11,64bc <__multiply+0x134>
    6508:	38800015 	stw	r2,0(r7)
    650c:	31800104 	addi	r6,r6,4
    6510:	33c0022e 	bgeu	r6,r15,651c <__multiply+0x194>
    6514:	63000104 	addi	r12,r12,4
    6518:	003fc606 	br	6434 <__multiply+0xac>
    651c:	0400090e 	bge	zero,r16,6544 <__multiply+0x1bc>
    6520:	70bfff17 	ldw	r2,-4(r14)
    6524:	70ffff04 	addi	r3,r14,-4
    6528:	10000326 	beq	r2,zero,6538 <__multiply+0x1b0>
    652c:	00000506 	br	6544 <__multiply+0x1bc>
    6530:	18800017 	ldw	r2,0(r3)
    6534:	1000031e 	bne	r2,zero,6544 <__multiply+0x1bc>
    6538:	843fffc4 	addi	r16,r16,-1
    653c:	18ffff04 	addi	r3,r3,-4
    6540:	803ffb1e 	bne	r16,zero,6530 <__multiply+0x1a8>
    6544:	a805883a 	mov	r2,r21
    6548:	ac000415 	stw	r16,16(r21)
    654c:	dfc00617 	ldw	ra,24(sp)
    6550:	dd400517 	ldw	r21,20(sp)
    6554:	dd000417 	ldw	r20,16(sp)
    6558:	dcc00317 	ldw	r19,12(sp)
    655c:	dc800217 	ldw	r18,8(sp)
    6560:	dc400117 	ldw	r17,4(sp)
    6564:	dc000017 	ldw	r16,0(sp)
    6568:	dec00704 	addi	sp,sp,28
    656c:	f800283a 	ret

00006570 <__i2b>:
    6570:	defffd04 	addi	sp,sp,-12
    6574:	dc000015 	stw	r16,0(sp)
    6578:	04000044 	movi	r16,1
    657c:	dc800115 	stw	r18,4(sp)
    6580:	2825883a 	mov	r18,r5
    6584:	800b883a 	mov	r5,r16
    6588:	dfc00215 	stw	ra,8(sp)
    658c:	0005e780 	call	5e78 <_Balloc>
    6590:	14000415 	stw	r16,16(r2)
    6594:	14800515 	stw	r18,20(r2)
    6598:	dfc00217 	ldw	ra,8(sp)
    659c:	dc800117 	ldw	r18,4(sp)
    65a0:	dc000017 	ldw	r16,0(sp)
    65a4:	dec00304 	addi	sp,sp,12
    65a8:	f800283a 	ret

000065ac <__multadd>:
    65ac:	defffa04 	addi	sp,sp,-24
    65b0:	dc800215 	stw	r18,8(sp)
    65b4:	2c800417 	ldw	r18,16(r5)
    65b8:	dd000415 	stw	r20,16(sp)
    65bc:	dcc00315 	stw	r19,12(sp)
    65c0:	dc000015 	stw	r16,0(sp)
    65c4:	dfc00515 	stw	ra,20(sp)
    65c8:	3821883a 	mov	r16,r7
    65cc:	dc400115 	stw	r17,4(sp)
    65d0:	2827883a 	mov	r19,r5
    65d4:	2029883a 	mov	r20,r4
    65d8:	2a000504 	addi	r8,r5,20
    65dc:	000f883a 	mov	r7,zero
    65e0:	40800017 	ldw	r2,0(r8)
    65e4:	39c00044 	addi	r7,r7,1
    65e8:	10ffffcc 	andi	r3,r2,65535
    65ec:	1987383a 	mul	r3,r3,r6
    65f0:	1004d43a 	srli	r2,r2,16
    65f4:	1c07883a 	add	r3,r3,r16
    65f8:	180ad43a 	srli	r5,r3,16
    65fc:	1185383a 	mul	r2,r2,r6
    6600:	18ffffcc 	andi	r3,r3,65535
    6604:	1145883a 	add	r2,r2,r5
    6608:	1008943a 	slli	r4,r2,16
    660c:	1020d43a 	srli	r16,r2,16
    6610:	20c9883a 	add	r4,r4,r3
    6614:	41000015 	stw	r4,0(r8)
    6618:	42000104 	addi	r8,r8,4
    661c:	3cbff016 	blt	r7,r18,65e0 <__multadd+0x34>
    6620:	80000826 	beq	r16,zero,6644 <__multadd+0x98>
    6624:	98800217 	ldw	r2,8(r19)
    6628:	90800f0e 	bge	r18,r2,6668 <__multadd+0xbc>
    662c:	9485883a 	add	r2,r18,r18
    6630:	1085883a 	add	r2,r2,r2
    6634:	14c5883a 	add	r2,r2,r19
    6638:	90c00044 	addi	r3,r18,1
    663c:	14000515 	stw	r16,20(r2)
    6640:	98c00415 	stw	r3,16(r19)
    6644:	9805883a 	mov	r2,r19
    6648:	dfc00517 	ldw	ra,20(sp)
    664c:	dd000417 	ldw	r20,16(sp)
    6650:	dcc00317 	ldw	r19,12(sp)
    6654:	dc800217 	ldw	r18,8(sp)
    6658:	dc400117 	ldw	r17,4(sp)
    665c:	dc000017 	ldw	r16,0(sp)
    6660:	dec00604 	addi	sp,sp,24
    6664:	f800283a 	ret
    6668:	99400117 	ldw	r5,4(r19)
    666c:	a009883a 	mov	r4,r20
    6670:	29400044 	addi	r5,r5,1
    6674:	0005e780 	call	5e78 <_Balloc>
    6678:	99800417 	ldw	r6,16(r19)
    667c:	99400304 	addi	r5,r19,12
    6680:	11000304 	addi	r4,r2,12
    6684:	318d883a 	add	r6,r6,r6
    6688:	318d883a 	add	r6,r6,r6
    668c:	31800204 	addi	r6,r6,8
    6690:	1023883a 	mov	r17,r2
    6694:	00056e00 	call	56e0 <memcpy>
    6698:	980b883a 	mov	r5,r19
    669c:	a009883a 	mov	r4,r20
    66a0:	00058f80 	call	58f8 <_Bfree>
    66a4:	8827883a 	mov	r19,r17
    66a8:	003fe006 	br	662c <__multadd+0x80>

000066ac <__pow5mult>:
    66ac:	defffa04 	addi	sp,sp,-24
    66b0:	308000cc 	andi	r2,r6,3
    66b4:	dd000415 	stw	r20,16(sp)
    66b8:	dcc00315 	stw	r19,12(sp)
    66bc:	dc000015 	stw	r16,0(sp)
    66c0:	dfc00515 	stw	ra,20(sp)
    66c4:	dc800215 	stw	r18,8(sp)
    66c8:	dc400115 	stw	r17,4(sp)
    66cc:	3021883a 	mov	r16,r6
    66d0:	2027883a 	mov	r19,r4
    66d4:	2829883a 	mov	r20,r5
    66d8:	10002b1e 	bne	r2,zero,6788 <__pow5mult+0xdc>
    66dc:	8025d0ba 	srai	r18,r16,2
    66e0:	90001b26 	beq	r18,zero,6750 <__pow5mult+0xa4>
    66e4:	9c001217 	ldw	r16,72(r19)
    66e8:	8000081e 	bne	r16,zero,670c <__pow5mult+0x60>
    66ec:	00003006 	br	67b0 <__pow5mult+0x104>
    66f0:	800b883a 	mov	r5,r16
    66f4:	800d883a 	mov	r6,r16
    66f8:	9809883a 	mov	r4,r19
    66fc:	90001426 	beq	r18,zero,6750 <__pow5mult+0xa4>
    6700:	80800017 	ldw	r2,0(r16)
    6704:	10001b26 	beq	r2,zero,6774 <__pow5mult+0xc8>
    6708:	1021883a 	mov	r16,r2
    670c:	9080004c 	andi	r2,r18,1
    6710:	1005003a 	cmpeq	r2,r2,zero
    6714:	9025d07a 	srai	r18,r18,1
    6718:	800d883a 	mov	r6,r16
    671c:	9809883a 	mov	r4,r19
    6720:	a00b883a 	mov	r5,r20
    6724:	103ff21e 	bne	r2,zero,66f0 <__pow5mult+0x44>
    6728:	00063880 	call	6388 <__multiply>
    672c:	a00b883a 	mov	r5,r20
    6730:	9809883a 	mov	r4,r19
    6734:	1023883a 	mov	r17,r2
    6738:	00058f80 	call	58f8 <_Bfree>
    673c:	8829883a 	mov	r20,r17
    6740:	800b883a 	mov	r5,r16
    6744:	800d883a 	mov	r6,r16
    6748:	9809883a 	mov	r4,r19
    674c:	903fec1e 	bne	r18,zero,6700 <__pow5mult+0x54>
    6750:	a005883a 	mov	r2,r20
    6754:	dfc00517 	ldw	ra,20(sp)
    6758:	dd000417 	ldw	r20,16(sp)
    675c:	dcc00317 	ldw	r19,12(sp)
    6760:	dc800217 	ldw	r18,8(sp)
    6764:	dc400117 	ldw	r17,4(sp)
    6768:	dc000017 	ldw	r16,0(sp)
    676c:	dec00604 	addi	sp,sp,24
    6770:	f800283a 	ret
    6774:	00063880 	call	6388 <__multiply>
    6778:	80800015 	stw	r2,0(r16)
    677c:	1021883a 	mov	r16,r2
    6780:	10000015 	stw	zero,0(r2)
    6784:	003fe106 	br	670c <__pow5mult+0x60>
    6788:	1085883a 	add	r2,r2,r2
    678c:	00c00074 	movhi	r3,1
    6790:	18f46004 	addi	r3,r3,-11904
    6794:	1085883a 	add	r2,r2,r2
    6798:	10c5883a 	add	r2,r2,r3
    679c:	11bfff17 	ldw	r6,-4(r2)
    67a0:	000f883a 	mov	r7,zero
    67a4:	00065ac0 	call	65ac <__multadd>
    67a8:	1029883a 	mov	r20,r2
    67ac:	003fcb06 	br	66dc <__pow5mult+0x30>
    67b0:	9809883a 	mov	r4,r19
    67b4:	01409c44 	movi	r5,625
    67b8:	00065700 	call	6570 <__i2b>
    67bc:	98801215 	stw	r2,72(r19)
    67c0:	1021883a 	mov	r16,r2
    67c4:	10000015 	stw	zero,0(r2)
    67c8:	003fd006 	br	670c <__pow5mult+0x60>

000067cc <__s2b>:
    67cc:	defff904 	addi	sp,sp,-28
    67d0:	dcc00315 	stw	r19,12(sp)
    67d4:	dc800215 	stw	r18,8(sp)
    67d8:	2827883a 	mov	r19,r5
    67dc:	2025883a 	mov	r18,r4
    67e0:	01400244 	movi	r5,9
    67e4:	39000204 	addi	r4,r7,8
    67e8:	dd000415 	stw	r20,16(sp)
    67ec:	dc400115 	stw	r17,4(sp)
    67f0:	dfc00615 	stw	ra,24(sp)
    67f4:	dd400515 	stw	r21,20(sp)
    67f8:	dc000015 	stw	r16,0(sp)
    67fc:	3829883a 	mov	r20,r7
    6800:	3023883a 	mov	r17,r6
    6804:	00093900 	call	9390 <__divsi3>
    6808:	00c00044 	movi	r3,1
    680c:	1880350e 	bge	r3,r2,68e4 <__s2b+0x118>
    6810:	000b883a 	mov	r5,zero
    6814:	18c7883a 	add	r3,r3,r3
    6818:	29400044 	addi	r5,r5,1
    681c:	18bffd16 	blt	r3,r2,6814 <__s2b+0x48>
    6820:	9009883a 	mov	r4,r18
    6824:	0005e780 	call	5e78 <_Balloc>
    6828:	1011883a 	mov	r8,r2
    682c:	d8800717 	ldw	r2,28(sp)
    6830:	00c00044 	movi	r3,1
    6834:	01800244 	movi	r6,9
    6838:	40800515 	stw	r2,20(r8)
    683c:	40c00415 	stw	r3,16(r8)
    6840:	3440260e 	bge	r6,r17,68dc <__s2b+0x110>
    6844:	3021883a 	mov	r16,r6
    6848:	99ab883a 	add	r21,r19,r6
    684c:	9c05883a 	add	r2,r19,r16
    6850:	11c00007 	ldb	r7,0(r2)
    6854:	400b883a 	mov	r5,r8
    6858:	9009883a 	mov	r4,r18
    685c:	39fff404 	addi	r7,r7,-48
    6860:	01800284 	movi	r6,10
    6864:	00065ac0 	call	65ac <__multadd>
    6868:	84000044 	addi	r16,r16,1
    686c:	1011883a 	mov	r8,r2
    6870:	8c3ff61e 	bne	r17,r16,684c <__s2b+0x80>
    6874:	ac45883a 	add	r2,r21,r17
    6878:	117ffe04 	addi	r5,r2,-8
    687c:	880d883a 	mov	r6,r17
    6880:	35000c0e 	bge	r6,r20,68b4 <__s2b+0xe8>
    6884:	a185c83a 	sub	r2,r20,r6
    6888:	2821883a 	mov	r16,r5
    688c:	28a3883a 	add	r17,r5,r2
    6890:	81c00007 	ldb	r7,0(r16)
    6894:	400b883a 	mov	r5,r8
    6898:	9009883a 	mov	r4,r18
    689c:	39fff404 	addi	r7,r7,-48
    68a0:	01800284 	movi	r6,10
    68a4:	00065ac0 	call	65ac <__multadd>
    68a8:	84000044 	addi	r16,r16,1
    68ac:	1011883a 	mov	r8,r2
    68b0:	847ff71e 	bne	r16,r17,6890 <__s2b+0xc4>
    68b4:	4005883a 	mov	r2,r8
    68b8:	dfc00617 	ldw	ra,24(sp)
    68bc:	dd400517 	ldw	r21,20(sp)
    68c0:	dd000417 	ldw	r20,16(sp)
    68c4:	dcc00317 	ldw	r19,12(sp)
    68c8:	dc800217 	ldw	r18,8(sp)
    68cc:	dc400117 	ldw	r17,4(sp)
    68d0:	dc000017 	ldw	r16,0(sp)
    68d4:	dec00704 	addi	sp,sp,28
    68d8:	f800283a 	ret
    68dc:	99400284 	addi	r5,r19,10
    68e0:	003fe706 	br	6880 <__s2b+0xb4>
    68e4:	000b883a 	mov	r5,zero
    68e8:	003fcd06 	br	6820 <__s2b+0x54>

000068ec <_realloc_r>:
    68ec:	defff404 	addi	sp,sp,-48
    68f0:	dd800815 	stw	r22,32(sp)
    68f4:	dc800415 	stw	r18,16(sp)
    68f8:	dc400315 	stw	r17,12(sp)
    68fc:	dfc00b15 	stw	ra,44(sp)
    6900:	df000a15 	stw	fp,40(sp)
    6904:	ddc00915 	stw	r23,36(sp)
    6908:	dd400715 	stw	r21,28(sp)
    690c:	dd000615 	stw	r20,24(sp)
    6910:	dcc00515 	stw	r19,20(sp)
    6914:	dc000215 	stw	r16,8(sp)
    6918:	2825883a 	mov	r18,r5
    691c:	3023883a 	mov	r17,r6
    6920:	202d883a 	mov	r22,r4
    6924:	2800c926 	beq	r5,zero,6c4c <_realloc_r+0x360>
    6928:	000a1100 	call	a110 <__malloc_lock>
    692c:	943ffe04 	addi	r16,r18,-8
    6930:	88c002c4 	addi	r3,r17,11
    6934:	00800584 	movi	r2,22
    6938:	82000117 	ldw	r8,4(r16)
    693c:	10c01b2e 	bgeu	r2,r3,69ac <_realloc_r+0xc0>
    6940:	00bffe04 	movi	r2,-8
    6944:	188e703a 	and	r7,r3,r2
    6948:	3839883a 	mov	fp,r7
    694c:	38001a16 	blt	r7,zero,69b8 <_realloc_r+0xcc>
    6950:	e4401936 	bltu	fp,r17,69b8 <_realloc_r+0xcc>
    6954:	013fff04 	movi	r4,-4
    6958:	4126703a 	and	r19,r8,r4
    695c:	99c02616 	blt	r19,r7,69f8 <_realloc_r+0x10c>
    6960:	802b883a 	mov	r21,r16
    6964:	9829883a 	mov	r20,r19
    6968:	84000204 	addi	r16,r16,8
    696c:	a80f883a 	mov	r7,r21
    6970:	a70dc83a 	sub	r6,r20,fp
    6974:	008003c4 	movi	r2,15
    6978:	1180c136 	bltu	r2,r6,6c80 <_realloc_r+0x394>
    697c:	38800117 	ldw	r2,4(r7)
    6980:	a549883a 	add	r4,r20,r21
    6984:	1080004c 	andi	r2,r2,1
    6988:	a084b03a 	or	r2,r20,r2
    698c:	38800115 	stw	r2,4(r7)
    6990:	20c00117 	ldw	r3,4(r4)
    6994:	18c00054 	ori	r3,r3,1
    6998:	20c00115 	stw	r3,4(r4)
    699c:	b009883a 	mov	r4,r22
    69a0:	000a1300 	call	a130 <__malloc_unlock>
    69a4:	8023883a 	mov	r17,r16
    69a8:	00000606 	br	69c4 <_realloc_r+0xd8>
    69ac:	01c00404 	movi	r7,16
    69b0:	3839883a 	mov	fp,r7
    69b4:	e47fe72e 	bgeu	fp,r17,6954 <_realloc_r+0x68>
    69b8:	00800304 	movi	r2,12
    69bc:	0023883a 	mov	r17,zero
    69c0:	b0800015 	stw	r2,0(r22)
    69c4:	8805883a 	mov	r2,r17
    69c8:	dfc00b17 	ldw	ra,44(sp)
    69cc:	df000a17 	ldw	fp,40(sp)
    69d0:	ddc00917 	ldw	r23,36(sp)
    69d4:	dd800817 	ldw	r22,32(sp)
    69d8:	dd400717 	ldw	r21,28(sp)
    69dc:	dd000617 	ldw	r20,24(sp)
    69e0:	dcc00517 	ldw	r19,20(sp)
    69e4:	dc800417 	ldw	r18,16(sp)
    69e8:	dc400317 	ldw	r17,12(sp)
    69ec:	dc000217 	ldw	r16,8(sp)
    69f0:	dec00c04 	addi	sp,sp,48
    69f4:	f800283a 	ret
    69f8:	00800074 	movhi	r2,1
    69fc:	10b5c004 	addi	r2,r2,-10496
    6a00:	12400217 	ldw	r9,8(r2)
    6a04:	84cd883a 	add	r6,r16,r19
    6a08:	802b883a 	mov	r21,r16
    6a0c:	3240b926 	beq	r6,r9,6cf4 <_realloc_r+0x408>
    6a10:	31400117 	ldw	r5,4(r6)
    6a14:	00bfff84 	movi	r2,-2
    6a18:	2884703a 	and	r2,r5,r2
    6a1c:	1185883a 	add	r2,r2,r6
    6a20:	10c00117 	ldw	r3,4(r2)
    6a24:	18c0004c 	andi	r3,r3,1
    6a28:	1807003a 	cmpeq	r3,r3,zero
    6a2c:	1800a326 	beq	r3,zero,6cbc <_realloc_r+0x3d0>
    6a30:	2908703a 	and	r4,r5,r4
    6a34:	9929883a 	add	r20,r19,r4
    6a38:	a1c0a30e 	bge	r20,r7,6cc8 <_realloc_r+0x3dc>
    6a3c:	4080004c 	andi	r2,r8,1
    6a40:	1000551e 	bne	r2,zero,6b98 <_realloc_r+0x2ac>
    6a44:	80800017 	ldw	r2,0(r16)
    6a48:	80afc83a 	sub	r23,r16,r2
    6a4c:	b8c00117 	ldw	r3,4(r23)
    6a50:	00bfff04 	movi	r2,-4
    6a54:	1884703a 	and	r2,r3,r2
    6a58:	30002e26 	beq	r6,zero,6b14 <_realloc_r+0x228>
    6a5c:	3240b926 	beq	r6,r9,6d44 <_realloc_r+0x458>
    6a60:	98a9883a 	add	r20,r19,r2
    6a64:	2509883a 	add	r4,r4,r20
    6a68:	d9000015 	stw	r4,0(sp)
    6a6c:	21c02a16 	blt	r4,r7,6b18 <_realloc_r+0x22c>
    6a70:	30800317 	ldw	r2,12(r6)
    6a74:	30c00217 	ldw	r3,8(r6)
    6a78:	01400904 	movi	r5,36
    6a7c:	99bfff04 	addi	r6,r19,-4
    6a80:	18800315 	stw	r2,12(r3)
    6a84:	10c00215 	stw	r3,8(r2)
    6a88:	b9000317 	ldw	r4,12(r23)
    6a8c:	b8800217 	ldw	r2,8(r23)
    6a90:	b82b883a 	mov	r21,r23
    6a94:	bc000204 	addi	r16,r23,8
    6a98:	20800215 	stw	r2,8(r4)
    6a9c:	11000315 	stw	r4,12(r2)
    6aa0:	2980e436 	bltu	r5,r6,6e34 <_realloc_r+0x548>
    6aa4:	008004c4 	movi	r2,19
    6aa8:	9009883a 	mov	r4,r18
    6aac:	8011883a 	mov	r8,r16
    6ab0:	11800f2e 	bgeu	r2,r6,6af0 <_realloc_r+0x204>
    6ab4:	90800017 	ldw	r2,0(r18)
    6ab8:	ba000404 	addi	r8,r23,16
    6abc:	91000204 	addi	r4,r18,8
    6ac0:	b8800215 	stw	r2,8(r23)
    6ac4:	90c00117 	ldw	r3,4(r18)
    6ac8:	008006c4 	movi	r2,27
    6acc:	b8c00315 	stw	r3,12(r23)
    6ad0:	1180072e 	bgeu	r2,r6,6af0 <_realloc_r+0x204>
    6ad4:	90c00217 	ldw	r3,8(r18)
    6ad8:	ba000604 	addi	r8,r23,24
    6adc:	91000404 	addi	r4,r18,16
    6ae0:	b8c00415 	stw	r3,16(r23)
    6ae4:	90800317 	ldw	r2,12(r18)
    6ae8:	b8800515 	stw	r2,20(r23)
    6aec:	3140e726 	beq	r6,r5,6e8c <_realloc_r+0x5a0>
    6af0:	20800017 	ldw	r2,0(r4)
    6af4:	dd000017 	ldw	r20,0(sp)
    6af8:	b80f883a 	mov	r7,r23
    6afc:	40800015 	stw	r2,0(r8)
    6b00:	20c00117 	ldw	r3,4(r4)
    6b04:	40c00115 	stw	r3,4(r8)
    6b08:	20800217 	ldw	r2,8(r4)
    6b0c:	40800215 	stw	r2,8(r8)
    6b10:	003f9706 	br	6970 <_realloc_r+0x84>
    6b14:	98a9883a 	add	r20,r19,r2
    6b18:	a1c01f16 	blt	r20,r7,6b98 <_realloc_r+0x2ac>
    6b1c:	b8c00317 	ldw	r3,12(r23)
    6b20:	b8800217 	ldw	r2,8(r23)
    6b24:	99bfff04 	addi	r6,r19,-4
    6b28:	01400904 	movi	r5,36
    6b2c:	b82b883a 	mov	r21,r23
    6b30:	18800215 	stw	r2,8(r3)
    6b34:	10c00315 	stw	r3,12(r2)
    6b38:	bc000204 	addi	r16,r23,8
    6b3c:	2980c336 	bltu	r5,r6,6e4c <_realloc_r+0x560>
    6b40:	008004c4 	movi	r2,19
    6b44:	9009883a 	mov	r4,r18
    6b48:	8011883a 	mov	r8,r16
    6b4c:	11800f2e 	bgeu	r2,r6,6b8c <_realloc_r+0x2a0>
    6b50:	90800017 	ldw	r2,0(r18)
    6b54:	ba000404 	addi	r8,r23,16
    6b58:	91000204 	addi	r4,r18,8
    6b5c:	b8800215 	stw	r2,8(r23)
    6b60:	90c00117 	ldw	r3,4(r18)
    6b64:	008006c4 	movi	r2,27
    6b68:	b8c00315 	stw	r3,12(r23)
    6b6c:	1180072e 	bgeu	r2,r6,6b8c <_realloc_r+0x2a0>
    6b70:	90c00217 	ldw	r3,8(r18)
    6b74:	ba000604 	addi	r8,r23,24
    6b78:	91000404 	addi	r4,r18,16
    6b7c:	b8c00415 	stw	r3,16(r23)
    6b80:	90800317 	ldw	r2,12(r18)
    6b84:	b8800515 	stw	r2,20(r23)
    6b88:	3140c726 	beq	r6,r5,6ea8 <_realloc_r+0x5bc>
    6b8c:	20800017 	ldw	r2,0(r4)
    6b90:	b80f883a 	mov	r7,r23
    6b94:	003fd906 	br	6afc <_realloc_r+0x210>
    6b98:	880b883a 	mov	r5,r17
    6b9c:	b009883a 	mov	r4,r22
    6ba0:	0004ebc0 	call	4ebc <_malloc_r>
    6ba4:	1023883a 	mov	r17,r2
    6ba8:	10002526 	beq	r2,zero,6c40 <_realloc_r+0x354>
    6bac:	80800117 	ldw	r2,4(r16)
    6bb0:	00ffff84 	movi	r3,-2
    6bb4:	893ffe04 	addi	r4,r17,-8
    6bb8:	10c4703a 	and	r2,r2,r3
    6bbc:	8085883a 	add	r2,r16,r2
    6bc0:	20809526 	beq	r4,r2,6e18 <_realloc_r+0x52c>
    6bc4:	99bfff04 	addi	r6,r19,-4
    6bc8:	01c00904 	movi	r7,36
    6bcc:	39804536 	bltu	r7,r6,6ce4 <_realloc_r+0x3f8>
    6bd0:	008004c4 	movi	r2,19
    6bd4:	9009883a 	mov	r4,r18
    6bd8:	880b883a 	mov	r5,r17
    6bdc:	11800f2e 	bgeu	r2,r6,6c1c <_realloc_r+0x330>
    6be0:	90800017 	ldw	r2,0(r18)
    6be4:	89400204 	addi	r5,r17,8
    6be8:	91000204 	addi	r4,r18,8
    6bec:	88800015 	stw	r2,0(r17)
    6bf0:	90c00117 	ldw	r3,4(r18)
    6bf4:	008006c4 	movi	r2,27
    6bf8:	88c00115 	stw	r3,4(r17)
    6bfc:	1180072e 	bgeu	r2,r6,6c1c <_realloc_r+0x330>
    6c00:	90c00217 	ldw	r3,8(r18)
    6c04:	89400404 	addi	r5,r17,16
    6c08:	91000404 	addi	r4,r18,16
    6c0c:	88c00215 	stw	r3,8(r17)
    6c10:	90800317 	ldw	r2,12(r18)
    6c14:	88800315 	stw	r2,12(r17)
    6c18:	31c09126 	beq	r6,r7,6e60 <_realloc_r+0x574>
    6c1c:	20800017 	ldw	r2,0(r4)
    6c20:	28800015 	stw	r2,0(r5)
    6c24:	20c00117 	ldw	r3,4(r4)
    6c28:	28c00115 	stw	r3,4(r5)
    6c2c:	20800217 	ldw	r2,8(r4)
    6c30:	28800215 	stw	r2,8(r5)
    6c34:	900b883a 	mov	r5,r18
    6c38:	b009883a 	mov	r4,r22
    6c3c:	00043340 	call	4334 <_free_r>
    6c40:	b009883a 	mov	r4,r22
    6c44:	000a1300 	call	a130 <__malloc_unlock>
    6c48:	003f5e06 	br	69c4 <_realloc_r+0xd8>
    6c4c:	300b883a 	mov	r5,r6
    6c50:	dfc00b17 	ldw	ra,44(sp)
    6c54:	df000a17 	ldw	fp,40(sp)
    6c58:	ddc00917 	ldw	r23,36(sp)
    6c5c:	dd800817 	ldw	r22,32(sp)
    6c60:	dd400717 	ldw	r21,28(sp)
    6c64:	dd000617 	ldw	r20,24(sp)
    6c68:	dcc00517 	ldw	r19,20(sp)
    6c6c:	dc800417 	ldw	r18,16(sp)
    6c70:	dc400317 	ldw	r17,12(sp)
    6c74:	dc000217 	ldw	r16,8(sp)
    6c78:	dec00c04 	addi	sp,sp,48
    6c7c:	0004ebc1 	jmpi	4ebc <_malloc_r>
    6c80:	38800117 	ldw	r2,4(r7)
    6c84:	e54b883a 	add	r5,fp,r21
    6c88:	31000054 	ori	r4,r6,1
    6c8c:	1080004c 	andi	r2,r2,1
    6c90:	1704b03a 	or	r2,r2,fp
    6c94:	38800115 	stw	r2,4(r7)
    6c98:	29000115 	stw	r4,4(r5)
    6c9c:	2987883a 	add	r3,r5,r6
    6ca0:	18800117 	ldw	r2,4(r3)
    6ca4:	29400204 	addi	r5,r5,8
    6ca8:	b009883a 	mov	r4,r22
    6cac:	10800054 	ori	r2,r2,1
    6cb0:	18800115 	stw	r2,4(r3)
    6cb4:	00043340 	call	4334 <_free_r>
    6cb8:	003f3806 	br	699c <_realloc_r+0xb0>
    6cbc:	000d883a 	mov	r6,zero
    6cc0:	0009883a 	mov	r4,zero
    6cc4:	003f5d06 	br	6a3c <_realloc_r+0x150>
    6cc8:	30c00217 	ldw	r3,8(r6)
    6ccc:	30800317 	ldw	r2,12(r6)
    6cd0:	800f883a 	mov	r7,r16
    6cd4:	84000204 	addi	r16,r16,8
    6cd8:	10c00215 	stw	r3,8(r2)
    6cdc:	18800315 	stw	r2,12(r3)
    6ce0:	003f2306 	br	6970 <_realloc_r+0x84>
    6ce4:	8809883a 	mov	r4,r17
    6ce8:	900b883a 	mov	r5,r18
    6cec:	00057800 	call	5780 <memmove>
    6cf0:	003fd006 	br	6c34 <_realloc_r+0x348>
    6cf4:	30800117 	ldw	r2,4(r6)
    6cf8:	e0c00404 	addi	r3,fp,16
    6cfc:	1108703a 	and	r4,r2,r4
    6d00:	9905883a 	add	r2,r19,r4
    6d04:	10ff4d16 	blt	r2,r3,6a3c <_realloc_r+0x150>
    6d08:	1705c83a 	sub	r2,r2,fp
    6d0c:	870b883a 	add	r5,r16,fp
    6d10:	10800054 	ori	r2,r2,1
    6d14:	28800115 	stw	r2,4(r5)
    6d18:	80c00117 	ldw	r3,4(r16)
    6d1c:	00800074 	movhi	r2,1
    6d20:	10b5c004 	addi	r2,r2,-10496
    6d24:	b009883a 	mov	r4,r22
    6d28:	18c0004c 	andi	r3,r3,1
    6d2c:	e0c6b03a 	or	r3,fp,r3
    6d30:	11400215 	stw	r5,8(r2)
    6d34:	80c00115 	stw	r3,4(r16)
    6d38:	000a1300 	call	a130 <__malloc_unlock>
    6d3c:	84400204 	addi	r17,r16,8
    6d40:	003f2006 	br	69c4 <_realloc_r+0xd8>
    6d44:	98a9883a 	add	r20,r19,r2
    6d48:	2509883a 	add	r4,r4,r20
    6d4c:	e0800404 	addi	r2,fp,16
    6d50:	d9000115 	stw	r4,4(sp)
    6d54:	20bf7016 	blt	r4,r2,6b18 <_realloc_r+0x22c>
    6d58:	b8c00317 	ldw	r3,12(r23)
    6d5c:	b8800217 	ldw	r2,8(r23)
    6d60:	99bfff04 	addi	r6,r19,-4
    6d64:	01400904 	movi	r5,36
    6d68:	18800215 	stw	r2,8(r3)
    6d6c:	10c00315 	stw	r3,12(r2)
    6d70:	bc400204 	addi	r17,r23,8
    6d74:	29804136 	bltu	r5,r6,6e7c <_realloc_r+0x590>
    6d78:	008004c4 	movi	r2,19
    6d7c:	9009883a 	mov	r4,r18
    6d80:	880f883a 	mov	r7,r17
    6d84:	11800f2e 	bgeu	r2,r6,6dc4 <_realloc_r+0x4d8>
    6d88:	90800017 	ldw	r2,0(r18)
    6d8c:	b9c00404 	addi	r7,r23,16
    6d90:	91000204 	addi	r4,r18,8
    6d94:	b8800215 	stw	r2,8(r23)
    6d98:	90c00117 	ldw	r3,4(r18)
    6d9c:	008006c4 	movi	r2,27
    6da0:	b8c00315 	stw	r3,12(r23)
    6da4:	1180072e 	bgeu	r2,r6,6dc4 <_realloc_r+0x4d8>
    6da8:	90c00217 	ldw	r3,8(r18)
    6dac:	b9c00604 	addi	r7,r23,24
    6db0:	91000404 	addi	r4,r18,16
    6db4:	b8c00415 	stw	r3,16(r23)
    6db8:	90800317 	ldw	r2,12(r18)
    6dbc:	b8800515 	stw	r2,20(r23)
    6dc0:	31404026 	beq	r6,r5,6ec4 <_realloc_r+0x5d8>
    6dc4:	20800017 	ldw	r2,0(r4)
    6dc8:	38800015 	stw	r2,0(r7)
    6dcc:	20c00117 	ldw	r3,4(r4)
    6dd0:	38c00115 	stw	r3,4(r7)
    6dd4:	20800217 	ldw	r2,8(r4)
    6dd8:	38800215 	stw	r2,8(r7)
    6ddc:	d8c00117 	ldw	r3,4(sp)
    6de0:	bf0b883a 	add	r5,r23,fp
    6de4:	b009883a 	mov	r4,r22
    6de8:	1f05c83a 	sub	r2,r3,fp
    6dec:	10800054 	ori	r2,r2,1
    6df0:	28800115 	stw	r2,4(r5)
    6df4:	b8c00117 	ldw	r3,4(r23)
    6df8:	00800074 	movhi	r2,1
    6dfc:	10b5c004 	addi	r2,r2,-10496
    6e00:	11400215 	stw	r5,8(r2)
    6e04:	18c0004c 	andi	r3,r3,1
    6e08:	e0c6b03a 	or	r3,fp,r3
    6e0c:	b8c00115 	stw	r3,4(r23)
    6e10:	000a1300 	call	a130 <__malloc_unlock>
    6e14:	003eeb06 	br	69c4 <_realloc_r+0xd8>
    6e18:	20800117 	ldw	r2,4(r4)
    6e1c:	00ffff04 	movi	r3,-4
    6e20:	800f883a 	mov	r7,r16
    6e24:	10c4703a 	and	r2,r2,r3
    6e28:	98a9883a 	add	r20,r19,r2
    6e2c:	84000204 	addi	r16,r16,8
    6e30:	003ecf06 	br	6970 <_realloc_r+0x84>
    6e34:	900b883a 	mov	r5,r18
    6e38:	8009883a 	mov	r4,r16
    6e3c:	00057800 	call	5780 <memmove>
    6e40:	dd000017 	ldw	r20,0(sp)
    6e44:	b80f883a 	mov	r7,r23
    6e48:	003ec906 	br	6970 <_realloc_r+0x84>
    6e4c:	900b883a 	mov	r5,r18
    6e50:	8009883a 	mov	r4,r16
    6e54:	00057800 	call	5780 <memmove>
    6e58:	b80f883a 	mov	r7,r23
    6e5c:	003ec406 	br	6970 <_realloc_r+0x84>
    6e60:	90c00417 	ldw	r3,16(r18)
    6e64:	89400604 	addi	r5,r17,24
    6e68:	91000604 	addi	r4,r18,24
    6e6c:	88c00415 	stw	r3,16(r17)
    6e70:	90800517 	ldw	r2,20(r18)
    6e74:	88800515 	stw	r2,20(r17)
    6e78:	003f6806 	br	6c1c <_realloc_r+0x330>
    6e7c:	900b883a 	mov	r5,r18
    6e80:	8809883a 	mov	r4,r17
    6e84:	00057800 	call	5780 <memmove>
    6e88:	003fd406 	br	6ddc <_realloc_r+0x4f0>
    6e8c:	90c00417 	ldw	r3,16(r18)
    6e90:	91000604 	addi	r4,r18,24
    6e94:	ba000804 	addi	r8,r23,32
    6e98:	b8c00615 	stw	r3,24(r23)
    6e9c:	90800517 	ldw	r2,20(r18)
    6ea0:	b8800715 	stw	r2,28(r23)
    6ea4:	003f1206 	br	6af0 <_realloc_r+0x204>
    6ea8:	90c00417 	ldw	r3,16(r18)
    6eac:	91000604 	addi	r4,r18,24
    6eb0:	ba000804 	addi	r8,r23,32
    6eb4:	b8c00615 	stw	r3,24(r23)
    6eb8:	90800517 	ldw	r2,20(r18)
    6ebc:	b8800715 	stw	r2,28(r23)
    6ec0:	003f3206 	br	6b8c <_realloc_r+0x2a0>
    6ec4:	90c00417 	ldw	r3,16(r18)
    6ec8:	91000604 	addi	r4,r18,24
    6ecc:	b9c00804 	addi	r7,r23,32
    6ed0:	b8c00615 	stw	r3,24(r23)
    6ed4:	90800517 	ldw	r2,20(r18)
    6ed8:	b8800715 	stw	r2,28(r23)
    6edc:	003fb906 	br	6dc4 <_realloc_r+0x4d8>

00006ee0 <__isinfd>:
    6ee0:	200d883a 	mov	r6,r4
    6ee4:	0109c83a 	sub	r4,zero,r4
    6ee8:	2188b03a 	or	r4,r4,r6
    6eec:	2008d7fa 	srli	r4,r4,31
    6ef0:	00a00034 	movhi	r2,32768
    6ef4:	10bfffc4 	addi	r2,r2,-1
    6ef8:	1144703a 	and	r2,r2,r5
    6efc:	2088b03a 	or	r4,r4,r2
    6f00:	009ffc34 	movhi	r2,32752
    6f04:	1105c83a 	sub	r2,r2,r4
    6f08:	0087c83a 	sub	r3,zero,r2
    6f0c:	10c4b03a 	or	r2,r2,r3
    6f10:	1004d7fa 	srli	r2,r2,31
    6f14:	00c00044 	movi	r3,1
    6f18:	1885c83a 	sub	r2,r3,r2
    6f1c:	f800283a 	ret

00006f20 <__isnand>:
    6f20:	200d883a 	mov	r6,r4
    6f24:	0109c83a 	sub	r4,zero,r4
    6f28:	2188b03a 	or	r4,r4,r6
    6f2c:	2008d7fa 	srli	r4,r4,31
    6f30:	00a00034 	movhi	r2,32768
    6f34:	10bfffc4 	addi	r2,r2,-1
    6f38:	1144703a 	and	r2,r2,r5
    6f3c:	2088b03a 	or	r4,r4,r2
    6f40:	009ffc34 	movhi	r2,32752
    6f44:	1105c83a 	sub	r2,r2,r4
    6f48:	1004d7fa 	srli	r2,r2,31
    6f4c:	f800283a 	ret

00006f50 <_sbrk_r>:
    6f50:	defffd04 	addi	sp,sp,-12
    6f54:	dc000015 	stw	r16,0(sp)
    6f58:	04000074 	movhi	r16,1
    6f5c:	8402b504 	addi	r16,r16,2772
    6f60:	dc400115 	stw	r17,4(sp)
    6f64:	80000015 	stw	zero,0(r16)
    6f68:	2023883a 	mov	r17,r4
    6f6c:	2809883a 	mov	r4,r5
    6f70:	dfc00215 	stw	ra,8(sp)
    6f74:	000a3300 	call	a330 <sbrk>
    6f78:	1007883a 	mov	r3,r2
    6f7c:	00bfffc4 	movi	r2,-1
    6f80:	18800626 	beq	r3,r2,6f9c <_sbrk_r+0x4c>
    6f84:	1805883a 	mov	r2,r3
    6f88:	dfc00217 	ldw	ra,8(sp)
    6f8c:	dc400117 	ldw	r17,4(sp)
    6f90:	dc000017 	ldw	r16,0(sp)
    6f94:	dec00304 	addi	sp,sp,12
    6f98:	f800283a 	ret
    6f9c:	80800017 	ldw	r2,0(r16)
    6fa0:	103ff826 	beq	r2,zero,6f84 <_sbrk_r+0x34>
    6fa4:	88800015 	stw	r2,0(r17)
    6fa8:	1805883a 	mov	r2,r3
    6fac:	dfc00217 	ldw	ra,8(sp)
    6fb0:	dc400117 	ldw	r17,4(sp)
    6fb4:	dc000017 	ldw	r16,0(sp)
    6fb8:	dec00304 	addi	sp,sp,12
    6fbc:	f800283a 	ret

00006fc0 <__sclose>:
    6fc0:	2940038f 	ldh	r5,14(r5)
    6fc4:	00072f41 	jmpi	72f4 <_close_r>

00006fc8 <__sseek>:
    6fc8:	defffe04 	addi	sp,sp,-8
    6fcc:	dc000015 	stw	r16,0(sp)
    6fd0:	2821883a 	mov	r16,r5
    6fd4:	2940038f 	ldh	r5,14(r5)
    6fd8:	dfc00115 	stw	ra,4(sp)
    6fdc:	000756c0 	call	756c <_lseek_r>
    6fe0:	1007883a 	mov	r3,r2
    6fe4:	00bfffc4 	movi	r2,-1
    6fe8:	18800926 	beq	r3,r2,7010 <__sseek+0x48>
    6fec:	8080030b 	ldhu	r2,12(r16)
    6ff0:	80c01415 	stw	r3,80(r16)
    6ff4:	10840014 	ori	r2,r2,4096
    6ff8:	8080030d 	sth	r2,12(r16)
    6ffc:	1805883a 	mov	r2,r3
    7000:	dfc00117 	ldw	ra,4(sp)
    7004:	dc000017 	ldw	r16,0(sp)
    7008:	dec00204 	addi	sp,sp,8
    700c:	f800283a 	ret
    7010:	8080030b 	ldhu	r2,12(r16)
    7014:	10bbffcc 	andi	r2,r2,61439
    7018:	8080030d 	sth	r2,12(r16)
    701c:	1805883a 	mov	r2,r3
    7020:	dfc00117 	ldw	ra,4(sp)
    7024:	dc000017 	ldw	r16,0(sp)
    7028:	dec00204 	addi	sp,sp,8
    702c:	f800283a 	ret

00007030 <__swrite>:
    7030:	2880030b 	ldhu	r2,12(r5)
    7034:	defffb04 	addi	sp,sp,-20
    7038:	dcc00315 	stw	r19,12(sp)
    703c:	1080400c 	andi	r2,r2,256
    7040:	dc800215 	stw	r18,8(sp)
    7044:	dc400115 	stw	r17,4(sp)
    7048:	dc000015 	stw	r16,0(sp)
    704c:	3027883a 	mov	r19,r6
    7050:	3825883a 	mov	r18,r7
    7054:	dfc00415 	stw	ra,16(sp)
    7058:	2821883a 	mov	r16,r5
    705c:	000d883a 	mov	r6,zero
    7060:	01c00084 	movi	r7,2
    7064:	2023883a 	mov	r17,r4
    7068:	10000226 	beq	r2,zero,7074 <__swrite+0x44>
    706c:	2940038f 	ldh	r5,14(r5)
    7070:	000756c0 	call	756c <_lseek_r>
    7074:	8080030b 	ldhu	r2,12(r16)
    7078:	8140038f 	ldh	r5,14(r16)
    707c:	8809883a 	mov	r4,r17
    7080:	10bbffcc 	andi	r2,r2,61439
    7084:	980d883a 	mov	r6,r19
    7088:	900f883a 	mov	r7,r18
    708c:	8080030d 	sth	r2,12(r16)
    7090:	dfc00417 	ldw	ra,16(sp)
    7094:	dcc00317 	ldw	r19,12(sp)
    7098:	dc800217 	ldw	r18,8(sp)
    709c:	dc400117 	ldw	r17,4(sp)
    70a0:	dc000017 	ldw	r16,0(sp)
    70a4:	dec00504 	addi	sp,sp,20
    70a8:	00071c81 	jmpi	71c8 <_write_r>

000070ac <__sread>:
    70ac:	defffe04 	addi	sp,sp,-8
    70b0:	dc000015 	stw	r16,0(sp)
    70b4:	2821883a 	mov	r16,r5
    70b8:	2940038f 	ldh	r5,14(r5)
    70bc:	dfc00115 	stw	ra,4(sp)
    70c0:	00075e40 	call	75e4 <_read_r>
    70c4:	1007883a 	mov	r3,r2
    70c8:	10000816 	blt	r2,zero,70ec <__sread+0x40>
    70cc:	80801417 	ldw	r2,80(r16)
    70d0:	10c5883a 	add	r2,r2,r3
    70d4:	80801415 	stw	r2,80(r16)
    70d8:	1805883a 	mov	r2,r3
    70dc:	dfc00117 	ldw	ra,4(sp)
    70e0:	dc000017 	ldw	r16,0(sp)
    70e4:	dec00204 	addi	sp,sp,8
    70e8:	f800283a 	ret
    70ec:	8080030b 	ldhu	r2,12(r16)
    70f0:	10bbffcc 	andi	r2,r2,61439
    70f4:	8080030d 	sth	r2,12(r16)
    70f8:	1805883a 	mov	r2,r3
    70fc:	dfc00117 	ldw	ra,4(sp)
    7100:	dc000017 	ldw	r16,0(sp)
    7104:	dec00204 	addi	sp,sp,8
    7108:	f800283a 	ret

0000710c <strcmp>:
    710c:	2144b03a 	or	r2,r4,r5
    7110:	108000cc 	andi	r2,r2,3
    7114:	10001d1e 	bne	r2,zero,718c <strcmp+0x80>
    7118:	200f883a 	mov	r7,r4
    711c:	28800017 	ldw	r2,0(r5)
    7120:	21000017 	ldw	r4,0(r4)
    7124:	280d883a 	mov	r6,r5
    7128:	2080161e 	bne	r4,r2,7184 <strcmp+0x78>
    712c:	023fbff4 	movhi	r8,65279
    7130:	423fbfc4 	addi	r8,r8,-257
    7134:	2207883a 	add	r3,r4,r8
    7138:	01602074 	movhi	r5,32897
    713c:	29602004 	addi	r5,r5,-32640
    7140:	1946703a 	and	r3,r3,r5
    7144:	0104303a 	nor	r2,zero,r4
    7148:	10c4703a 	and	r2,r2,r3
    714c:	10001c1e 	bne	r2,zero,71c0 <strcmp+0xb4>
    7150:	4013883a 	mov	r9,r8
    7154:	2811883a 	mov	r8,r5
    7158:	00000106 	br	7160 <strcmp+0x54>
    715c:	1800181e 	bne	r3,zero,71c0 <strcmp+0xb4>
    7160:	39c00104 	addi	r7,r7,4
    7164:	39000017 	ldw	r4,0(r7)
    7168:	31800104 	addi	r6,r6,4
    716c:	31400017 	ldw	r5,0(r6)
    7170:	2245883a 	add	r2,r4,r9
    7174:	1204703a 	and	r2,r2,r8
    7178:	0106303a 	nor	r3,zero,r4
    717c:	1886703a 	and	r3,r3,r2
    7180:	217ff626 	beq	r4,r5,715c <strcmp+0x50>
    7184:	3809883a 	mov	r4,r7
    7188:	300b883a 	mov	r5,r6
    718c:	20c00007 	ldb	r3,0(r4)
    7190:	1800051e 	bne	r3,zero,71a8 <strcmp+0x9c>
    7194:	00000606 	br	71b0 <strcmp+0xa4>
    7198:	21000044 	addi	r4,r4,1
    719c:	20c00007 	ldb	r3,0(r4)
    71a0:	29400044 	addi	r5,r5,1
    71a4:	18000226 	beq	r3,zero,71b0 <strcmp+0xa4>
    71a8:	28800007 	ldb	r2,0(r5)
    71ac:	18bffa26 	beq	r3,r2,7198 <strcmp+0x8c>
    71b0:	20c00003 	ldbu	r3,0(r4)
    71b4:	28800003 	ldbu	r2,0(r5)
    71b8:	1885c83a 	sub	r2,r3,r2
    71bc:	f800283a 	ret
    71c0:	0005883a 	mov	r2,zero
    71c4:	f800283a 	ret

000071c8 <_write_r>:
    71c8:	defffd04 	addi	sp,sp,-12
    71cc:	dc000015 	stw	r16,0(sp)
    71d0:	04000074 	movhi	r16,1
    71d4:	8402b504 	addi	r16,r16,2772
    71d8:	dc400115 	stw	r17,4(sp)
    71dc:	80000015 	stw	zero,0(r16)
    71e0:	2023883a 	mov	r17,r4
    71e4:	2809883a 	mov	r4,r5
    71e8:	300b883a 	mov	r5,r6
    71ec:	380d883a 	mov	r6,r7
    71f0:	dfc00215 	stw	ra,8(sp)
    71f4:	000a3ec0 	call	a3ec <write>
    71f8:	1007883a 	mov	r3,r2
    71fc:	00bfffc4 	movi	r2,-1
    7200:	18800626 	beq	r3,r2,721c <_write_r+0x54>
    7204:	1805883a 	mov	r2,r3
    7208:	dfc00217 	ldw	ra,8(sp)
    720c:	dc400117 	ldw	r17,4(sp)
    7210:	dc000017 	ldw	r16,0(sp)
    7214:	dec00304 	addi	sp,sp,12
    7218:	f800283a 	ret
    721c:	80800017 	ldw	r2,0(r16)
    7220:	103ff826 	beq	r2,zero,7204 <_write_r+0x3c>
    7224:	88800015 	stw	r2,0(r17)
    7228:	1805883a 	mov	r2,r3
    722c:	dfc00217 	ldw	ra,8(sp)
    7230:	dc400117 	ldw	r17,4(sp)
    7234:	dc000017 	ldw	r16,0(sp)
    7238:	dec00304 	addi	sp,sp,12
    723c:	f800283a 	ret

00007240 <_calloc_r>:
    7240:	298b383a 	mul	r5,r5,r6
    7244:	defffe04 	addi	sp,sp,-8
    7248:	dc000015 	stw	r16,0(sp)
    724c:	dfc00115 	stw	ra,4(sp)
    7250:	0004ebc0 	call	4ebc <_malloc_r>
    7254:	1021883a 	mov	r16,r2
    7258:	01c00904 	movi	r7,36
    725c:	10000d26 	beq	r2,zero,7294 <_calloc_r+0x54>
    7260:	10ffff17 	ldw	r3,-4(r2)
    7264:	1009883a 	mov	r4,r2
    7268:	00bfff04 	movi	r2,-4
    726c:	1886703a 	and	r3,r3,r2
    7270:	1887883a 	add	r3,r3,r2
    7274:	180d883a 	mov	r6,r3
    7278:	000b883a 	mov	r5,zero
    727c:	38c01736 	bltu	r7,r3,72dc <_calloc_r+0x9c>
    7280:	008004c4 	movi	r2,19
    7284:	10c00836 	bltu	r2,r3,72a8 <_calloc_r+0x68>
    7288:	20000215 	stw	zero,8(r4)
    728c:	20000015 	stw	zero,0(r4)
    7290:	20000115 	stw	zero,4(r4)
    7294:	8005883a 	mov	r2,r16
    7298:	dfc00117 	ldw	ra,4(sp)
    729c:	dc000017 	ldw	r16,0(sp)
    72a0:	dec00204 	addi	sp,sp,8
    72a4:	f800283a 	ret
    72a8:	008006c4 	movi	r2,27
    72ac:	80000015 	stw	zero,0(r16)
    72b0:	80000115 	stw	zero,4(r16)
    72b4:	81000204 	addi	r4,r16,8
    72b8:	10fff32e 	bgeu	r2,r3,7288 <_calloc_r+0x48>
    72bc:	80000215 	stw	zero,8(r16)
    72c0:	80000315 	stw	zero,12(r16)
    72c4:	81000404 	addi	r4,r16,16
    72c8:	19ffef1e 	bne	r3,r7,7288 <_calloc_r+0x48>
    72cc:	81000604 	addi	r4,r16,24
    72d0:	80000415 	stw	zero,16(r16)
    72d4:	80000515 	stw	zero,20(r16)
    72d8:	003feb06 	br	7288 <_calloc_r+0x48>
    72dc:	00058600 	call	5860 <memset>
    72e0:	8005883a 	mov	r2,r16
    72e4:	dfc00117 	ldw	ra,4(sp)
    72e8:	dc000017 	ldw	r16,0(sp)
    72ec:	dec00204 	addi	sp,sp,8
    72f0:	f800283a 	ret

000072f4 <_close_r>:
    72f4:	defffd04 	addi	sp,sp,-12
    72f8:	dc000015 	stw	r16,0(sp)
    72fc:	04000074 	movhi	r16,1
    7300:	8402b504 	addi	r16,r16,2772
    7304:	dc400115 	stw	r17,4(sp)
    7308:	80000015 	stw	zero,0(r16)
    730c:	2023883a 	mov	r17,r4
    7310:	2809883a 	mov	r4,r5
    7314:	dfc00215 	stw	ra,8(sp)
    7318:	0009a8c0 	call	9a8c <close>
    731c:	1007883a 	mov	r3,r2
    7320:	00bfffc4 	movi	r2,-1
    7324:	18800626 	beq	r3,r2,7340 <_close_r+0x4c>
    7328:	1805883a 	mov	r2,r3
    732c:	dfc00217 	ldw	ra,8(sp)
    7330:	dc400117 	ldw	r17,4(sp)
    7334:	dc000017 	ldw	r16,0(sp)
    7338:	dec00304 	addi	sp,sp,12
    733c:	f800283a 	ret
    7340:	80800017 	ldw	r2,0(r16)
    7344:	103ff826 	beq	r2,zero,7328 <_close_r+0x34>
    7348:	88800015 	stw	r2,0(r17)
    734c:	1805883a 	mov	r2,r3
    7350:	dfc00217 	ldw	ra,8(sp)
    7354:	dc400117 	ldw	r17,4(sp)
    7358:	dc000017 	ldw	r16,0(sp)
    735c:	dec00304 	addi	sp,sp,12
    7360:	f800283a 	ret

00007364 <_fclose_r>:
    7364:	defffc04 	addi	sp,sp,-16
    7368:	dc400115 	stw	r17,4(sp)
    736c:	dc000015 	stw	r16,0(sp)
    7370:	dfc00315 	stw	ra,12(sp)
    7374:	dc800215 	stw	r18,8(sp)
    7378:	2821883a 	mov	r16,r5
    737c:	2023883a 	mov	r17,r4
    7380:	28002926 	beq	r5,zero,7428 <_fclose_r+0xc4>
    7384:	0003fa00 	call	3fa0 <__sfp_lock_acquire>
    7388:	88000226 	beq	r17,zero,7394 <_fclose_r+0x30>
    738c:	88800e17 	ldw	r2,56(r17)
    7390:	10002d26 	beq	r2,zero,7448 <_fclose_r+0xe4>
    7394:	8080030f 	ldh	r2,12(r16)
    7398:	10002226 	beq	r2,zero,7424 <_fclose_r+0xc0>
    739c:	8809883a 	mov	r4,r17
    73a0:	800b883a 	mov	r5,r16
    73a4:	0003d180 	call	3d18 <_fflush_r>
    73a8:	1025883a 	mov	r18,r2
    73ac:	80800b17 	ldw	r2,44(r16)
    73b0:	10000426 	beq	r2,zero,73c4 <_fclose_r+0x60>
    73b4:	81400717 	ldw	r5,28(r16)
    73b8:	8809883a 	mov	r4,r17
    73bc:	103ee83a 	callr	r2
    73c0:	10002a16 	blt	r2,zero,746c <_fclose_r+0x108>
    73c4:	8080030b 	ldhu	r2,12(r16)
    73c8:	1080200c 	andi	r2,r2,128
    73cc:	1000231e 	bne	r2,zero,745c <_fclose_r+0xf8>
    73d0:	81400c17 	ldw	r5,48(r16)
    73d4:	28000526 	beq	r5,zero,73ec <_fclose_r+0x88>
    73d8:	80801004 	addi	r2,r16,64
    73dc:	28800226 	beq	r5,r2,73e8 <_fclose_r+0x84>
    73e0:	8809883a 	mov	r4,r17
    73e4:	00043340 	call	4334 <_free_r>
    73e8:	80000c15 	stw	zero,48(r16)
    73ec:	81401117 	ldw	r5,68(r16)
    73f0:	28000326 	beq	r5,zero,7400 <_fclose_r+0x9c>
    73f4:	8809883a 	mov	r4,r17
    73f8:	00043340 	call	4334 <_free_r>
    73fc:	80001115 	stw	zero,68(r16)
    7400:	8000030d 	sth	zero,12(r16)
    7404:	0003fa40 	call	3fa4 <__sfp_lock_release>
    7408:	9005883a 	mov	r2,r18
    740c:	dfc00317 	ldw	ra,12(sp)
    7410:	dc800217 	ldw	r18,8(sp)
    7414:	dc400117 	ldw	r17,4(sp)
    7418:	dc000017 	ldw	r16,0(sp)
    741c:	dec00404 	addi	sp,sp,16
    7420:	f800283a 	ret
    7424:	0003fa40 	call	3fa4 <__sfp_lock_release>
    7428:	0025883a 	mov	r18,zero
    742c:	9005883a 	mov	r2,r18
    7430:	dfc00317 	ldw	ra,12(sp)
    7434:	dc800217 	ldw	r18,8(sp)
    7438:	dc400117 	ldw	r17,4(sp)
    743c:	dc000017 	ldw	r16,0(sp)
    7440:	dec00404 	addi	sp,sp,16
    7444:	f800283a 	ret
    7448:	8809883a 	mov	r4,r17
    744c:	0003fb00 	call	3fb0 <__sinit>
    7450:	8080030f 	ldh	r2,12(r16)
    7454:	103fd11e 	bne	r2,zero,739c <_fclose_r+0x38>
    7458:	003ff206 	br	7424 <_fclose_r+0xc0>
    745c:	81400417 	ldw	r5,16(r16)
    7460:	8809883a 	mov	r4,r17
    7464:	00043340 	call	4334 <_free_r>
    7468:	003fd906 	br	73d0 <_fclose_r+0x6c>
    746c:	04bfffc4 	movi	r18,-1
    7470:	003fd406 	br	73c4 <_fclose_r+0x60>

00007474 <fclose>:
    7474:	00800074 	movhi	r2,1
    7478:	10bba604 	addi	r2,r2,-4456
    747c:	200b883a 	mov	r5,r4
    7480:	11000017 	ldw	r4,0(r2)
    7484:	00073641 	jmpi	7364 <_fclose_r>

00007488 <_fstat_r>:
    7488:	defffd04 	addi	sp,sp,-12
    748c:	dc000015 	stw	r16,0(sp)
    7490:	04000074 	movhi	r16,1
    7494:	8402b504 	addi	r16,r16,2772
    7498:	dc400115 	stw	r17,4(sp)
    749c:	80000015 	stw	zero,0(r16)
    74a0:	2023883a 	mov	r17,r4
    74a4:	2809883a 	mov	r4,r5
    74a8:	300b883a 	mov	r5,r6
    74ac:	dfc00215 	stw	ra,8(sp)
    74b0:	0009c140 	call	9c14 <fstat>
    74b4:	1007883a 	mov	r3,r2
    74b8:	00bfffc4 	movi	r2,-1
    74bc:	18800626 	beq	r3,r2,74d8 <_fstat_r+0x50>
    74c0:	1805883a 	mov	r2,r3
    74c4:	dfc00217 	ldw	ra,8(sp)
    74c8:	dc400117 	ldw	r17,4(sp)
    74cc:	dc000017 	ldw	r16,0(sp)
    74d0:	dec00304 	addi	sp,sp,12
    74d4:	f800283a 	ret
    74d8:	80800017 	ldw	r2,0(r16)
    74dc:	103ff826 	beq	r2,zero,74c0 <_fstat_r+0x38>
    74e0:	88800015 	stw	r2,0(r17)
    74e4:	1805883a 	mov	r2,r3
    74e8:	dfc00217 	ldw	ra,8(sp)
    74ec:	dc400117 	ldw	r17,4(sp)
    74f0:	dc000017 	ldw	r16,0(sp)
    74f4:	dec00304 	addi	sp,sp,12
    74f8:	f800283a 	ret

000074fc <_isatty_r>:
    74fc:	defffd04 	addi	sp,sp,-12
    7500:	dc000015 	stw	r16,0(sp)
    7504:	04000074 	movhi	r16,1
    7508:	8402b504 	addi	r16,r16,2772
    750c:	dc400115 	stw	r17,4(sp)
    7510:	80000015 	stw	zero,0(r16)
    7514:	2023883a 	mov	r17,r4
    7518:	2809883a 	mov	r4,r5
    751c:	dfc00215 	stw	ra,8(sp)
    7520:	0009d480 	call	9d48 <isatty>
    7524:	1007883a 	mov	r3,r2
    7528:	00bfffc4 	movi	r2,-1
    752c:	18800626 	beq	r3,r2,7548 <_isatty_r+0x4c>
    7530:	1805883a 	mov	r2,r3
    7534:	dfc00217 	ldw	ra,8(sp)
    7538:	dc400117 	ldw	r17,4(sp)
    753c:	dc000017 	ldw	r16,0(sp)
    7540:	dec00304 	addi	sp,sp,12
    7544:	f800283a 	ret
    7548:	80800017 	ldw	r2,0(r16)
    754c:	103ff826 	beq	r2,zero,7530 <_isatty_r+0x34>
    7550:	88800015 	stw	r2,0(r17)
    7554:	1805883a 	mov	r2,r3
    7558:	dfc00217 	ldw	ra,8(sp)
    755c:	dc400117 	ldw	r17,4(sp)
    7560:	dc000017 	ldw	r16,0(sp)
    7564:	dec00304 	addi	sp,sp,12
    7568:	f800283a 	ret

0000756c <_lseek_r>:
    756c:	defffd04 	addi	sp,sp,-12
    7570:	dc000015 	stw	r16,0(sp)
    7574:	04000074 	movhi	r16,1
    7578:	8402b504 	addi	r16,r16,2772
    757c:	dc400115 	stw	r17,4(sp)
    7580:	80000015 	stw	zero,0(r16)
    7584:	2023883a 	mov	r17,r4
    7588:	2809883a 	mov	r4,r5
    758c:	300b883a 	mov	r5,r6
    7590:	380d883a 	mov	r6,r7
    7594:	dfc00215 	stw	ra,8(sp)
    7598:	0009f540 	call	9f54 <lseek>
    759c:	1007883a 	mov	r3,r2
    75a0:	00bfffc4 	movi	r2,-1
    75a4:	18800626 	beq	r3,r2,75c0 <_lseek_r+0x54>
    75a8:	1805883a 	mov	r2,r3
    75ac:	dfc00217 	ldw	ra,8(sp)
    75b0:	dc400117 	ldw	r17,4(sp)
    75b4:	dc000017 	ldw	r16,0(sp)
    75b8:	dec00304 	addi	sp,sp,12
    75bc:	f800283a 	ret
    75c0:	80800017 	ldw	r2,0(r16)
    75c4:	103ff826 	beq	r2,zero,75a8 <_lseek_r+0x3c>
    75c8:	88800015 	stw	r2,0(r17)
    75cc:	1805883a 	mov	r2,r3
    75d0:	dfc00217 	ldw	ra,8(sp)
    75d4:	dc400117 	ldw	r17,4(sp)
    75d8:	dc000017 	ldw	r16,0(sp)
    75dc:	dec00304 	addi	sp,sp,12
    75e0:	f800283a 	ret

000075e4 <_read_r>:
    75e4:	defffd04 	addi	sp,sp,-12
    75e8:	dc000015 	stw	r16,0(sp)
    75ec:	04000074 	movhi	r16,1
    75f0:	8402b504 	addi	r16,r16,2772
    75f4:	dc400115 	stw	r17,4(sp)
    75f8:	80000015 	stw	zero,0(r16)
    75fc:	2023883a 	mov	r17,r4
    7600:	2809883a 	mov	r4,r5
    7604:	300b883a 	mov	r5,r6
    7608:	380d883a 	mov	r6,r7
    760c:	dfc00215 	stw	ra,8(sp)
    7610:	000a1500 	call	a150 <read>
    7614:	1007883a 	mov	r3,r2
    7618:	00bfffc4 	movi	r2,-1
    761c:	18800626 	beq	r3,r2,7638 <_read_r+0x54>
    7620:	1805883a 	mov	r2,r3
    7624:	dfc00217 	ldw	ra,8(sp)
    7628:	dc400117 	ldw	r17,4(sp)
    762c:	dc000017 	ldw	r16,0(sp)
    7630:	dec00304 	addi	sp,sp,12
    7634:	f800283a 	ret
    7638:	80800017 	ldw	r2,0(r16)
    763c:	103ff826 	beq	r2,zero,7620 <_read_r+0x3c>
    7640:	88800015 	stw	r2,0(r17)
    7644:	1805883a 	mov	r2,r3
    7648:	dfc00217 	ldw	ra,8(sp)
    764c:	dc400117 	ldw	r17,4(sp)
    7650:	dc000017 	ldw	r16,0(sp)
    7654:	dec00304 	addi	sp,sp,12
    7658:	f800283a 	ret

0000765c <__udivdi3>:
    765c:	defff004 	addi	sp,sp,-64
    7660:	2005883a 	mov	r2,r4
    7664:	3011883a 	mov	r8,r6
    7668:	df000e15 	stw	fp,56(sp)
    766c:	dd000a15 	stw	r20,40(sp)
    7670:	dc000615 	stw	r16,24(sp)
    7674:	dfc00f15 	stw	ra,60(sp)
    7678:	ddc00d15 	stw	r23,52(sp)
    767c:	dd800c15 	stw	r22,48(sp)
    7680:	dd400b15 	stw	r21,44(sp)
    7684:	dcc00915 	stw	r19,36(sp)
    7688:	dc800815 	stw	r18,32(sp)
    768c:	dc400715 	stw	r17,28(sp)
    7690:	4021883a 	mov	r16,r8
    7694:	1039883a 	mov	fp,r2
    7698:	2829883a 	mov	r20,r5
    769c:	38003b1e 	bne	r7,zero,778c <__udivdi3+0x130>
    76a0:	2a005c36 	bltu	r5,r8,7814 <__udivdi3+0x1b8>
    76a4:	4000a626 	beq	r8,zero,7940 <__udivdi3+0x2e4>
    76a8:	00bfffd4 	movui	r2,65535
    76ac:	14009e36 	bltu	r2,r16,7928 <__udivdi3+0x2cc>
    76b0:	00803fc4 	movi	r2,255
    76b4:	14013d36 	bltu	r2,r16,7bac <__udivdi3+0x550>
    76b8:	000b883a 	mov	r5,zero
    76bc:	0005883a 	mov	r2,zero
    76c0:	8084d83a 	srl	r2,r16,r2
    76c4:	01000074 	movhi	r4,1
    76c8:	21346804 	addi	r4,r4,-11872
    76cc:	01800804 	movi	r6,32
    76d0:	1105883a 	add	r2,r2,r4
    76d4:	10c00003 	ldbu	r3,0(r2)
    76d8:	28c7883a 	add	r3,r5,r3
    76dc:	30edc83a 	sub	r22,r6,r3
    76e0:	b000ee1e 	bne	r22,zero,7a9c <__udivdi3+0x440>
    76e4:	802ad43a 	srli	r21,r16,16
    76e8:	00800044 	movi	r2,1
    76ec:	a423c83a 	sub	r17,r20,r16
    76f0:	85ffffcc 	andi	r23,r16,65535
    76f4:	d8800315 	stw	r2,12(sp)
    76f8:	8809883a 	mov	r4,r17
    76fc:	a80b883a 	mov	r5,r21
    7700:	00094500 	call	9450 <__udivsi3>
    7704:	8809883a 	mov	r4,r17
    7708:	a80b883a 	mov	r5,r21
    770c:	102d883a 	mov	r22,r2
    7710:	00094580 	call	9458 <__umodsi3>
    7714:	1004943a 	slli	r2,r2,16
    7718:	e006d43a 	srli	r3,fp,16
    771c:	bda3383a 	mul	r17,r23,r22
    7720:	10c4b03a 	or	r2,r2,r3
    7724:	1440042e 	bgeu	r2,r17,7738 <__udivdi3+0xdc>
    7728:	1405883a 	add	r2,r2,r16
    772c:	b5bfffc4 	addi	r22,r22,-1
    7730:	14000136 	bltu	r2,r16,7738 <__udivdi3+0xdc>
    7734:	14413d36 	bltu	r2,r17,7c2c <__udivdi3+0x5d0>
    7738:	1463c83a 	sub	r17,r2,r17
    773c:	8809883a 	mov	r4,r17
    7740:	a80b883a 	mov	r5,r21
    7744:	00094500 	call	9450 <__udivsi3>
    7748:	8809883a 	mov	r4,r17
    774c:	a80b883a 	mov	r5,r21
    7750:	1029883a 	mov	r20,r2
    7754:	00094580 	call	9458 <__umodsi3>
    7758:	1004943a 	slli	r2,r2,16
    775c:	bd09383a 	mul	r4,r23,r20
    7760:	e0ffffcc 	andi	r3,fp,65535
    7764:	10c4b03a 	or	r2,r2,r3
    7768:	1100042e 	bgeu	r2,r4,777c <__udivdi3+0x120>
    776c:	8085883a 	add	r2,r16,r2
    7770:	a53fffc4 	addi	r20,r20,-1
    7774:	14000136 	bltu	r2,r16,777c <__udivdi3+0x120>
    7778:	11012036 	bltu	r2,r4,7bfc <__udivdi3+0x5a0>
    777c:	b004943a 	slli	r2,r22,16
    7780:	d9000317 	ldw	r4,12(sp)
    7784:	a084b03a 	or	r2,r20,r2
    7788:	00001506 	br	77e0 <__udivdi3+0x184>
    778c:	380d883a 	mov	r6,r7
    7790:	29c06236 	bltu	r5,r7,791c <__udivdi3+0x2c0>
    7794:	00bfffd4 	movui	r2,65535
    7798:	11c05a36 	bltu	r2,r7,7904 <__udivdi3+0x2a8>
    779c:	00803fc4 	movi	r2,255
    77a0:	11c0fc36 	bltu	r2,r7,7b94 <__udivdi3+0x538>
    77a4:	000b883a 	mov	r5,zero
    77a8:	0005883a 	mov	r2,zero
    77ac:	3084d83a 	srl	r2,r6,r2
    77b0:	01000074 	movhi	r4,1
    77b4:	21346804 	addi	r4,r4,-11872
    77b8:	01c00804 	movi	r7,32
    77bc:	1105883a 	add	r2,r2,r4
    77c0:	10c00003 	ldbu	r3,0(r2)
    77c4:	28c7883a 	add	r3,r5,r3
    77c8:	38efc83a 	sub	r23,r7,r3
    77cc:	b800691e 	bne	r23,zero,7974 <__udivdi3+0x318>
    77d0:	35000136 	bltu	r6,r20,77d8 <__udivdi3+0x17c>
    77d4:	e4005136 	bltu	fp,r16,791c <__udivdi3+0x2c0>
    77d8:	00800044 	movi	r2,1
    77dc:	0009883a 	mov	r4,zero
    77e0:	2007883a 	mov	r3,r4
    77e4:	dfc00f17 	ldw	ra,60(sp)
    77e8:	df000e17 	ldw	fp,56(sp)
    77ec:	ddc00d17 	ldw	r23,52(sp)
    77f0:	dd800c17 	ldw	r22,48(sp)
    77f4:	dd400b17 	ldw	r21,44(sp)
    77f8:	dd000a17 	ldw	r20,40(sp)
    77fc:	dcc00917 	ldw	r19,36(sp)
    7800:	dc800817 	ldw	r18,32(sp)
    7804:	dc400717 	ldw	r17,28(sp)
    7808:	dc000617 	ldw	r16,24(sp)
    780c:	dec01004 	addi	sp,sp,64
    7810:	f800283a 	ret
    7814:	00bfffd4 	movui	r2,65535
    7818:	12005036 	bltu	r2,r8,795c <__udivdi3+0x300>
    781c:	00803fc4 	movi	r2,255
    7820:	1200e836 	bltu	r2,r8,7bc4 <__udivdi3+0x568>
    7824:	000b883a 	mov	r5,zero
    7828:	0005883a 	mov	r2,zero
    782c:	8084d83a 	srl	r2,r16,r2
    7830:	01000074 	movhi	r4,1
    7834:	21346804 	addi	r4,r4,-11872
    7838:	01800804 	movi	r6,32
    783c:	1105883a 	add	r2,r2,r4
    7840:	10c00003 	ldbu	r3,0(r2)
    7844:	28c7883a 	add	r3,r5,r3
    7848:	30cbc83a 	sub	r5,r6,r3
    784c:	28000626 	beq	r5,zero,7868 <__udivdi3+0x20c>
    7850:	3145c83a 	sub	r2,r6,r5
    7854:	e084d83a 	srl	r2,fp,r2
    7858:	a146983a 	sll	r3,r20,r5
    785c:	e178983a 	sll	fp,fp,r5
    7860:	8160983a 	sll	r16,r16,r5
    7864:	18a8b03a 	or	r20,r3,r2
    7868:	802ad43a 	srli	r21,r16,16
    786c:	a009883a 	mov	r4,r20
    7870:	85ffffcc 	andi	r23,r16,65535
    7874:	a80b883a 	mov	r5,r21
    7878:	00094500 	call	9450 <__udivsi3>
    787c:	a009883a 	mov	r4,r20
    7880:	a80b883a 	mov	r5,r21
    7884:	102d883a 	mov	r22,r2
    7888:	00094580 	call	9458 <__umodsi3>
    788c:	1004943a 	slli	r2,r2,16
    7890:	e006d43a 	srli	r3,fp,16
    7894:	bda3383a 	mul	r17,r23,r22
    7898:	10c4b03a 	or	r2,r2,r3
    789c:	1440042e 	bgeu	r2,r17,78b0 <__udivdi3+0x254>
    78a0:	1405883a 	add	r2,r2,r16
    78a4:	b5bfffc4 	addi	r22,r22,-1
    78a8:	14000136 	bltu	r2,r16,78b0 <__udivdi3+0x254>
    78ac:	1440d536 	bltu	r2,r17,7c04 <__udivdi3+0x5a8>
    78b0:	1463c83a 	sub	r17,r2,r17
    78b4:	8809883a 	mov	r4,r17
    78b8:	a80b883a 	mov	r5,r21
    78bc:	00094500 	call	9450 <__udivsi3>
    78c0:	8809883a 	mov	r4,r17
    78c4:	a80b883a 	mov	r5,r21
    78c8:	1029883a 	mov	r20,r2
    78cc:	00094580 	call	9458 <__umodsi3>
    78d0:	1004943a 	slli	r2,r2,16
    78d4:	bd09383a 	mul	r4,r23,r20
    78d8:	e0ffffcc 	andi	r3,fp,65535
    78dc:	10c4b03a 	or	r2,r2,r3
    78e0:	1100042e 	bgeu	r2,r4,78f4 <__udivdi3+0x298>
    78e4:	8085883a 	add	r2,r16,r2
    78e8:	a53fffc4 	addi	r20,r20,-1
    78ec:	14000136 	bltu	r2,r16,78f4 <__udivdi3+0x298>
    78f0:	1100c736 	bltu	r2,r4,7c10 <__udivdi3+0x5b4>
    78f4:	b004943a 	slli	r2,r22,16
    78f8:	0009883a 	mov	r4,zero
    78fc:	a084b03a 	or	r2,r20,r2
    7900:	003fb706 	br	77e0 <__udivdi3+0x184>
    7904:	00804034 	movhi	r2,256
    7908:	10bfffc4 	addi	r2,r2,-1
    790c:	11c0a436 	bltu	r2,r7,7ba0 <__udivdi3+0x544>
    7910:	01400404 	movi	r5,16
    7914:	2805883a 	mov	r2,r5
    7918:	003fa406 	br	77ac <__udivdi3+0x150>
    791c:	0005883a 	mov	r2,zero
    7920:	0009883a 	mov	r4,zero
    7924:	003fae06 	br	77e0 <__udivdi3+0x184>
    7928:	00804034 	movhi	r2,256
    792c:	10bfffc4 	addi	r2,r2,-1
    7930:	1400a136 	bltu	r2,r16,7bb8 <__udivdi3+0x55c>
    7934:	01400404 	movi	r5,16
    7938:	2805883a 	mov	r2,r5
    793c:	003f6006 	br	76c0 <__udivdi3+0x64>
    7940:	01000044 	movi	r4,1
    7944:	000b883a 	mov	r5,zero
    7948:	00094500 	call	9450 <__udivsi3>
    794c:	1021883a 	mov	r16,r2
    7950:	00bfffd4 	movui	r2,65535
    7954:	143ff436 	bltu	r2,r16,7928 <__udivdi3+0x2cc>
    7958:	003f5506 	br	76b0 <__udivdi3+0x54>
    795c:	00804034 	movhi	r2,256
    7960:	10bfffc4 	addi	r2,r2,-1
    7964:	12009a36 	bltu	r2,r8,7bd0 <__udivdi3+0x574>
    7968:	01400404 	movi	r5,16
    796c:	2805883a 	mov	r2,r5
    7970:	003fae06 	br	782c <__udivdi3+0x1d0>
    7974:	3dc5c83a 	sub	r2,r7,r23
    7978:	35c8983a 	sll	r4,r6,r23
    797c:	8086d83a 	srl	r3,r16,r2
    7980:	a0a2d83a 	srl	r17,r20,r2
    7984:	e084d83a 	srl	r2,fp,r2
    7988:	20eab03a 	or	r21,r4,r3
    798c:	a82cd43a 	srli	r22,r21,16
    7990:	a5c6983a 	sll	r3,r20,r23
    7994:	8809883a 	mov	r4,r17
    7998:	b00b883a 	mov	r5,r22
    799c:	1886b03a 	or	r3,r3,r2
    79a0:	d8c00215 	stw	r3,8(sp)
    79a4:	00094500 	call	9450 <__udivsi3>
    79a8:	8809883a 	mov	r4,r17
    79ac:	b00b883a 	mov	r5,r22
    79b0:	1029883a 	mov	r20,r2
    79b4:	00094580 	call	9458 <__umodsi3>
    79b8:	a8ffffcc 	andi	r3,r21,65535
    79bc:	d8c00515 	stw	r3,20(sp)
    79c0:	d9000217 	ldw	r4,8(sp)
    79c4:	d9400517 	ldw	r5,20(sp)
    79c8:	1004943a 	slli	r2,r2,16
    79cc:	2006d43a 	srli	r3,r4,16
    79d0:	85e0983a 	sll	r16,r16,r23
    79d4:	2d23383a 	mul	r17,r5,r20
    79d8:	10c4b03a 	or	r2,r2,r3
    79dc:	dc000015 	stw	r16,0(sp)
    79e0:	1440032e 	bgeu	r2,r17,79f0 <__udivdi3+0x394>
    79e4:	1545883a 	add	r2,r2,r21
    79e8:	a53fffc4 	addi	r20,r20,-1
    79ec:	15407f2e 	bgeu	r2,r21,7bec <__udivdi3+0x590>
    79f0:	1463c83a 	sub	r17,r2,r17
    79f4:	8809883a 	mov	r4,r17
    79f8:	b00b883a 	mov	r5,r22
    79fc:	00094500 	call	9450 <__udivsi3>
    7a00:	8809883a 	mov	r4,r17
    7a04:	b00b883a 	mov	r5,r22
    7a08:	1021883a 	mov	r16,r2
    7a0c:	00094580 	call	9458 <__umodsi3>
    7a10:	d8c00517 	ldw	r3,20(sp)
    7a14:	d9000217 	ldw	r4,8(sp)
    7a18:	1004943a 	slli	r2,r2,16
    7a1c:	1c0f383a 	mul	r7,r3,r16
    7a20:	20ffffcc 	andi	r3,r4,65535
    7a24:	10e2b03a 	or	r17,r2,r3
    7a28:	89c0032e 	bgeu	r17,r7,7a38 <__udivdi3+0x3dc>
    7a2c:	8d63883a 	add	r17,r17,r21
    7a30:	843fffc4 	addi	r16,r16,-1
    7a34:	8d40692e 	bgeu	r17,r21,7bdc <__udivdi3+0x580>
    7a38:	a008943a 	slli	r4,r20,16
    7a3c:	d9400017 	ldw	r5,0(sp)
    7a40:	89e3c83a 	sub	r17,r17,r7
    7a44:	8110b03a 	or	r8,r16,r4
    7a48:	280cd43a 	srli	r6,r5,16
    7a4c:	28ffffcc 	andi	r3,r5,65535
    7a50:	40bfffcc 	andi	r2,r8,65535
    7a54:	400ad43a 	srli	r5,r8,16
    7a58:	10d3383a 	mul	r9,r2,r3
    7a5c:	1185383a 	mul	r2,r2,r6
    7a60:	28c7383a 	mul	r3,r5,r3
    7a64:	4808d43a 	srli	r4,r9,16
    7a68:	298b383a 	mul	r5,r5,r6
    7a6c:	10c5883a 	add	r2,r2,r3
    7a70:	2089883a 	add	r4,r4,r2
    7a74:	20c0022e 	bgeu	r4,r3,7a80 <__udivdi3+0x424>
    7a78:	00800074 	movhi	r2,1
    7a7c:	288b883a 	add	r5,r5,r2
    7a80:	2004d43a 	srli	r2,r4,16
    7a84:	288b883a 	add	r5,r5,r2
    7a88:	89403f36 	bltu	r17,r5,7b88 <__udivdi3+0x52c>
    7a8c:	89403926 	beq	r17,r5,7b74 <__udivdi3+0x518>
    7a90:	4005883a 	mov	r2,r8
    7a94:	0009883a 	mov	r4,zero
    7a98:	003f5106 	br	77e0 <__udivdi3+0x184>
    7a9c:	85a0983a 	sll	r16,r16,r22
    7aa0:	3585c83a 	sub	r2,r6,r22
    7aa4:	a0a2d83a 	srl	r17,r20,r2
    7aa8:	802ad43a 	srli	r21,r16,16
    7aac:	e084d83a 	srl	r2,fp,r2
    7ab0:	a586983a 	sll	r3,r20,r22
    7ab4:	8809883a 	mov	r4,r17
    7ab8:	a80b883a 	mov	r5,r21
    7abc:	1886b03a 	or	r3,r3,r2
    7ac0:	d8c00115 	stw	r3,4(sp)
    7ac4:	00094500 	call	9450 <__udivsi3>
    7ac8:	8809883a 	mov	r4,r17
    7acc:	a80b883a 	mov	r5,r21
    7ad0:	d8800415 	stw	r2,16(sp)
    7ad4:	00094580 	call	9458 <__umodsi3>
    7ad8:	d9000117 	ldw	r4,4(sp)
    7adc:	d9400417 	ldw	r5,16(sp)
    7ae0:	1004943a 	slli	r2,r2,16
    7ae4:	85ffffcc 	andi	r23,r16,65535
    7ae8:	2006d43a 	srli	r3,r4,16
    7aec:	b963383a 	mul	r17,r23,r5
    7af0:	10c4b03a 	or	r2,r2,r3
    7af4:	1440042e 	bgeu	r2,r17,7b08 <__udivdi3+0x4ac>
    7af8:	297fffc4 	addi	r5,r5,-1
    7afc:	1405883a 	add	r2,r2,r16
    7b00:	d9400415 	stw	r5,16(sp)
    7b04:	1400442e 	bgeu	r2,r16,7c18 <__udivdi3+0x5bc>
    7b08:	1463c83a 	sub	r17,r2,r17
    7b0c:	8809883a 	mov	r4,r17
    7b10:	a80b883a 	mov	r5,r21
    7b14:	00094500 	call	9450 <__udivsi3>
    7b18:	8809883a 	mov	r4,r17
    7b1c:	a80b883a 	mov	r5,r21
    7b20:	1029883a 	mov	r20,r2
    7b24:	00094580 	call	9458 <__umodsi3>
    7b28:	d9400117 	ldw	r5,4(sp)
    7b2c:	1004943a 	slli	r2,r2,16
    7b30:	bd09383a 	mul	r4,r23,r20
    7b34:	28ffffcc 	andi	r3,r5,65535
    7b38:	10c6b03a 	or	r3,r2,r3
    7b3c:	1900062e 	bgeu	r3,r4,7b58 <__udivdi3+0x4fc>
    7b40:	1c07883a 	add	r3,r3,r16
    7b44:	a53fffc4 	addi	r20,r20,-1
    7b48:	1c000336 	bltu	r3,r16,7b58 <__udivdi3+0x4fc>
    7b4c:	1900022e 	bgeu	r3,r4,7b58 <__udivdi3+0x4fc>
    7b50:	a53fffc4 	addi	r20,r20,-1
    7b54:	1c07883a 	add	r3,r3,r16
    7b58:	d9400417 	ldw	r5,16(sp)
    7b5c:	e5b8983a 	sll	fp,fp,r22
    7b60:	1923c83a 	sub	r17,r3,r4
    7b64:	2804943a 	slli	r2,r5,16
    7b68:	a0a8b03a 	or	r20,r20,r2
    7b6c:	dd000315 	stw	r20,12(sp)
    7b70:	003ee106 	br	76f8 <__udivdi3+0x9c>
    7b74:	2004943a 	slli	r2,r4,16
    7b78:	e5c8983a 	sll	r4,fp,r23
    7b7c:	48ffffcc 	andi	r3,r9,65535
    7b80:	10c5883a 	add	r2,r2,r3
    7b84:	20bfc22e 	bgeu	r4,r2,7a90 <__udivdi3+0x434>
    7b88:	40bfffc4 	addi	r2,r8,-1
    7b8c:	0009883a 	mov	r4,zero
    7b90:	003f1306 	br	77e0 <__udivdi3+0x184>
    7b94:	01400204 	movi	r5,8
    7b98:	2805883a 	mov	r2,r5
    7b9c:	003f0306 	br	77ac <__udivdi3+0x150>
    7ba0:	01400604 	movi	r5,24
    7ba4:	2805883a 	mov	r2,r5
    7ba8:	003f0006 	br	77ac <__udivdi3+0x150>
    7bac:	01400204 	movi	r5,8
    7bb0:	2805883a 	mov	r2,r5
    7bb4:	003ec206 	br	76c0 <__udivdi3+0x64>
    7bb8:	01400604 	movi	r5,24
    7bbc:	2805883a 	mov	r2,r5
    7bc0:	003ebf06 	br	76c0 <__udivdi3+0x64>
    7bc4:	01400204 	movi	r5,8
    7bc8:	2805883a 	mov	r2,r5
    7bcc:	003f1706 	br	782c <__udivdi3+0x1d0>
    7bd0:	01400604 	movi	r5,24
    7bd4:	2805883a 	mov	r2,r5
    7bd8:	003f1406 	br	782c <__udivdi3+0x1d0>
    7bdc:	89ff962e 	bgeu	r17,r7,7a38 <__udivdi3+0x3dc>
    7be0:	8d63883a 	add	r17,r17,r21
    7be4:	843fffc4 	addi	r16,r16,-1
    7be8:	003f9306 	br	7a38 <__udivdi3+0x3dc>
    7bec:	147f802e 	bgeu	r2,r17,79f0 <__udivdi3+0x394>
    7bf0:	a53fffc4 	addi	r20,r20,-1
    7bf4:	1545883a 	add	r2,r2,r21
    7bf8:	003f7d06 	br	79f0 <__udivdi3+0x394>
    7bfc:	a53fffc4 	addi	r20,r20,-1
    7c00:	003ede06 	br	777c <__udivdi3+0x120>
    7c04:	b5bfffc4 	addi	r22,r22,-1
    7c08:	1405883a 	add	r2,r2,r16
    7c0c:	003f2806 	br	78b0 <__udivdi3+0x254>
    7c10:	a53fffc4 	addi	r20,r20,-1
    7c14:	003f3706 	br	78f4 <__udivdi3+0x298>
    7c18:	147fbb2e 	bgeu	r2,r17,7b08 <__udivdi3+0x4ac>
    7c1c:	297fffc4 	addi	r5,r5,-1
    7c20:	1405883a 	add	r2,r2,r16
    7c24:	d9400415 	stw	r5,16(sp)
    7c28:	003fb706 	br	7b08 <__udivdi3+0x4ac>
    7c2c:	b5bfffc4 	addi	r22,r22,-1
    7c30:	1405883a 	add	r2,r2,r16
    7c34:	003ec006 	br	7738 <__udivdi3+0xdc>

00007c38 <__umoddi3>:
    7c38:	defff104 	addi	sp,sp,-60
    7c3c:	dd800b15 	stw	r22,44(sp)
    7c40:	dd000915 	stw	r20,36(sp)
    7c44:	dc000515 	stw	r16,20(sp)
    7c48:	dfc00e15 	stw	ra,56(sp)
    7c4c:	df000d15 	stw	fp,52(sp)
    7c50:	ddc00c15 	stw	r23,48(sp)
    7c54:	dd400a15 	stw	r21,40(sp)
    7c58:	dcc00815 	stw	r19,32(sp)
    7c5c:	dc800715 	stw	r18,28(sp)
    7c60:	dc400615 	stw	r17,24(sp)
    7c64:	3021883a 	mov	r16,r6
    7c68:	202d883a 	mov	r22,r4
    7c6c:	2829883a 	mov	r20,r5
    7c70:	38002b1e 	bne	r7,zero,7d20 <__umoddi3+0xe8>
    7c74:	29805036 	bltu	r5,r6,7db8 <__umoddi3+0x180>
    7c78:	30008a26 	beq	r6,zero,7ea4 <__umoddi3+0x26c>
    7c7c:	00bfffd4 	movui	r2,65535
    7c80:	14008236 	bltu	r2,r16,7e8c <__umoddi3+0x254>
    7c84:	00803fc4 	movi	r2,255
    7c88:	14013636 	bltu	r2,r16,8164 <__umoddi3+0x52c>
    7c8c:	000b883a 	mov	r5,zero
    7c90:	0005883a 	mov	r2,zero
    7c94:	8084d83a 	srl	r2,r16,r2
    7c98:	01000074 	movhi	r4,1
    7c9c:	21346804 	addi	r4,r4,-11872
    7ca0:	01800804 	movi	r6,32
    7ca4:	1105883a 	add	r2,r2,r4
    7ca8:	10c00003 	ldbu	r3,0(r2)
    7cac:	28c7883a 	add	r3,r5,r3
    7cb0:	30efc83a 	sub	r23,r6,r3
    7cb4:	b800941e 	bne	r23,zero,7f08 <__umoddi3+0x2d0>
    7cb8:	802ad43a 	srli	r21,r16,16
    7cbc:	a423c83a 	sub	r17,r20,r16
    7cc0:	0039883a 	mov	fp,zero
    7cc4:	853fffcc 	andi	r20,r16,65535
    7cc8:	8809883a 	mov	r4,r17
    7ccc:	a80b883a 	mov	r5,r21
    7cd0:	00094500 	call	9450 <__udivsi3>
    7cd4:	8809883a 	mov	r4,r17
    7cd8:	a80b883a 	mov	r5,r21
    7cdc:	a0a3383a 	mul	r17,r20,r2
    7ce0:	00094580 	call	9458 <__umodsi3>
    7ce4:	1004943a 	slli	r2,r2,16
    7ce8:	b006d43a 	srli	r3,r22,16
    7cec:	10c4b03a 	or	r2,r2,r3
    7cf0:	1440032e 	bgeu	r2,r17,7d00 <__umoddi3+0xc8>
    7cf4:	1405883a 	add	r2,r2,r16
    7cf8:	14000136 	bltu	r2,r16,7d00 <__umoddi3+0xc8>
    7cfc:	14413536 	bltu	r2,r17,81d4 <__umoddi3+0x59c>
    7d00:	1463c83a 	sub	r17,r2,r17
    7d04:	8809883a 	mov	r4,r17
    7d08:	a80b883a 	mov	r5,r21
    7d0c:	00094500 	call	9450 <__udivsi3>
    7d10:	8809883a 	mov	r4,r17
    7d14:	a0a3383a 	mul	r17,r20,r2
    7d18:	a80b883a 	mov	r5,r21
    7d1c:	00004d06 	br	7e54 <__umoddi3+0x21c>
    7d20:	380d883a 	mov	r6,r7
    7d24:	29c0102e 	bgeu	r5,r7,7d68 <__umoddi3+0x130>
    7d28:	2011883a 	mov	r8,r4
    7d2c:	2813883a 	mov	r9,r5
    7d30:	4005883a 	mov	r2,r8
    7d34:	4807883a 	mov	r3,r9
    7d38:	dfc00e17 	ldw	ra,56(sp)
    7d3c:	df000d17 	ldw	fp,52(sp)
    7d40:	ddc00c17 	ldw	r23,48(sp)
    7d44:	dd800b17 	ldw	r22,44(sp)
    7d48:	dd400a17 	ldw	r21,40(sp)
    7d4c:	dd000917 	ldw	r20,36(sp)
    7d50:	dcc00817 	ldw	r19,32(sp)
    7d54:	dc800717 	ldw	r18,28(sp)
    7d58:	dc400617 	ldw	r17,24(sp)
    7d5c:	dc000517 	ldw	r16,20(sp)
    7d60:	dec00f04 	addi	sp,sp,60
    7d64:	f800283a 	ret
    7d68:	00bfffd4 	movui	r2,65535
    7d6c:	11c05a36 	bltu	r2,r7,7ed8 <__umoddi3+0x2a0>
    7d70:	00803fc4 	movi	r2,255
    7d74:	11c0fe36 	bltu	r2,r7,8170 <__umoddi3+0x538>
    7d78:	000b883a 	mov	r5,zero
    7d7c:	0005883a 	mov	r2,zero
    7d80:	3084d83a 	srl	r2,r6,r2
    7d84:	01000074 	movhi	r4,1
    7d88:	21346804 	addi	r4,r4,-11872
    7d8c:	01c00804 	movi	r7,32
    7d90:	1105883a 	add	r2,r2,r4
    7d94:	10c00003 	ldbu	r3,0(r2)
    7d98:	28c7883a 	add	r3,r5,r3
    7d9c:	38ebc83a 	sub	r21,r7,r3
    7da0:	a800851e 	bne	r21,zero,7fb8 <__umoddi3+0x380>
    7da4:	35005236 	bltu	r6,r20,7ef0 <__umoddi3+0x2b8>
    7da8:	b400512e 	bgeu	r22,r16,7ef0 <__umoddi3+0x2b8>
    7dac:	b011883a 	mov	r8,r22
    7db0:	a013883a 	mov	r9,r20
    7db4:	003fde06 	br	7d30 <__umoddi3+0xf8>
    7db8:	00bfffd4 	movui	r2,65535
    7dbc:	11804036 	bltu	r2,r6,7ec0 <__umoddi3+0x288>
    7dc0:	00803fc4 	movi	r2,255
    7dc4:	1180ed36 	bltu	r2,r6,817c <__umoddi3+0x544>
    7dc8:	000b883a 	mov	r5,zero
    7dcc:	0005883a 	mov	r2,zero
    7dd0:	8084d83a 	srl	r2,r16,r2
    7dd4:	01000074 	movhi	r4,1
    7dd8:	21346804 	addi	r4,r4,-11872
    7ddc:	01800804 	movi	r6,32
    7de0:	1105883a 	add	r2,r2,r4
    7de4:	10c00003 	ldbu	r3,0(r2)
    7de8:	28c7883a 	add	r3,r5,r3
    7dec:	30c7c83a 	sub	r3,r6,r3
    7df0:	1800bf1e 	bne	r3,zero,80f0 <__umoddi3+0x4b8>
    7df4:	0039883a 	mov	fp,zero
    7df8:	802ad43a 	srli	r21,r16,16
    7dfc:	a009883a 	mov	r4,r20
    7e00:	85ffffcc 	andi	r23,r16,65535
    7e04:	a80b883a 	mov	r5,r21
    7e08:	00094500 	call	9450 <__udivsi3>
    7e0c:	a009883a 	mov	r4,r20
    7e10:	a80b883a 	mov	r5,r21
    7e14:	b8a3383a 	mul	r17,r23,r2
    7e18:	00094580 	call	9458 <__umodsi3>
    7e1c:	1004943a 	slli	r2,r2,16
    7e20:	b006d43a 	srli	r3,r22,16
    7e24:	10c4b03a 	or	r2,r2,r3
    7e28:	1440032e 	bgeu	r2,r17,7e38 <__umoddi3+0x200>
    7e2c:	1405883a 	add	r2,r2,r16
    7e30:	14000136 	bltu	r2,r16,7e38 <__umoddi3+0x200>
    7e34:	1440e536 	bltu	r2,r17,81cc <__umoddi3+0x594>
    7e38:	1463c83a 	sub	r17,r2,r17
    7e3c:	8809883a 	mov	r4,r17
    7e40:	a80b883a 	mov	r5,r21
    7e44:	00094500 	call	9450 <__udivsi3>
    7e48:	8809883a 	mov	r4,r17
    7e4c:	b8a3383a 	mul	r17,r23,r2
    7e50:	a80b883a 	mov	r5,r21
    7e54:	00094580 	call	9458 <__umodsi3>
    7e58:	1004943a 	slli	r2,r2,16
    7e5c:	b0ffffcc 	andi	r3,r22,65535
    7e60:	10c4b03a 	or	r2,r2,r3
    7e64:	1440042e 	bgeu	r2,r17,7e78 <__umoddi3+0x240>
    7e68:	1405883a 	add	r2,r2,r16
    7e6c:	14000236 	bltu	r2,r16,7e78 <__umoddi3+0x240>
    7e70:	1440012e 	bgeu	r2,r17,7e78 <__umoddi3+0x240>
    7e74:	1405883a 	add	r2,r2,r16
    7e78:	1445c83a 	sub	r2,r2,r17
    7e7c:	1724d83a 	srl	r18,r2,fp
    7e80:	0013883a 	mov	r9,zero
    7e84:	9011883a 	mov	r8,r18
    7e88:	003fa906 	br	7d30 <__umoddi3+0xf8>
    7e8c:	00804034 	movhi	r2,256
    7e90:	10bfffc4 	addi	r2,r2,-1
    7e94:	1400b036 	bltu	r2,r16,8158 <__umoddi3+0x520>
    7e98:	01400404 	movi	r5,16
    7e9c:	2805883a 	mov	r2,r5
    7ea0:	003f7c06 	br	7c94 <__umoddi3+0x5c>
    7ea4:	01000044 	movi	r4,1
    7ea8:	000b883a 	mov	r5,zero
    7eac:	00094500 	call	9450 <__udivsi3>
    7eb0:	1021883a 	mov	r16,r2
    7eb4:	00bfffd4 	movui	r2,65535
    7eb8:	143ff436 	bltu	r2,r16,7e8c <__umoddi3+0x254>
    7ebc:	003f7106 	br	7c84 <__umoddi3+0x4c>
    7ec0:	00804034 	movhi	r2,256
    7ec4:	10bfffc4 	addi	r2,r2,-1
    7ec8:	1180af36 	bltu	r2,r6,8188 <__umoddi3+0x550>
    7ecc:	01400404 	movi	r5,16
    7ed0:	2805883a 	mov	r2,r5
    7ed4:	003fbe06 	br	7dd0 <__umoddi3+0x198>
    7ed8:	00804034 	movhi	r2,256
    7edc:	10bfffc4 	addi	r2,r2,-1
    7ee0:	11c0ac36 	bltu	r2,r7,8194 <__umoddi3+0x55c>
    7ee4:	01400404 	movi	r5,16
    7ee8:	2805883a 	mov	r2,r5
    7eec:	003fa406 	br	7d80 <__umoddi3+0x148>
    7ef0:	b409c83a 	sub	r4,r22,r16
    7ef4:	b105803a 	cmpltu	r2,r22,r4
    7ef8:	a187c83a 	sub	r3,r20,r6
    7efc:	18a9c83a 	sub	r20,r3,r2
    7f00:	202d883a 	mov	r22,r4
    7f04:	003fa906 	br	7dac <__umoddi3+0x174>
    7f08:	85e0983a 	sll	r16,r16,r23
    7f0c:	35c5c83a 	sub	r2,r6,r23
    7f10:	a0a2d83a 	srl	r17,r20,r2
    7f14:	802ad43a 	srli	r21,r16,16
    7f18:	b084d83a 	srl	r2,r22,r2
    7f1c:	a5c6983a 	sll	r3,r20,r23
    7f20:	8809883a 	mov	r4,r17
    7f24:	a80b883a 	mov	r5,r21
    7f28:	1886b03a 	or	r3,r3,r2
    7f2c:	d8c00115 	stw	r3,4(sp)
    7f30:	853fffcc 	andi	r20,r16,65535
    7f34:	00094500 	call	9450 <__udivsi3>
    7f38:	8809883a 	mov	r4,r17
    7f3c:	a80b883a 	mov	r5,r21
    7f40:	a0a3383a 	mul	r17,r20,r2
    7f44:	00094580 	call	9458 <__umodsi3>
    7f48:	d9000117 	ldw	r4,4(sp)
    7f4c:	1004943a 	slli	r2,r2,16
    7f50:	b839883a 	mov	fp,r23
    7f54:	2006d43a 	srli	r3,r4,16
    7f58:	10c4b03a 	or	r2,r2,r3
    7f5c:	1440022e 	bgeu	r2,r17,7f68 <__umoddi3+0x330>
    7f60:	1405883a 	add	r2,r2,r16
    7f64:	1400962e 	bgeu	r2,r16,81c0 <__umoddi3+0x588>
    7f68:	1463c83a 	sub	r17,r2,r17
    7f6c:	8809883a 	mov	r4,r17
    7f70:	a80b883a 	mov	r5,r21
    7f74:	00094500 	call	9450 <__udivsi3>
    7f78:	8809883a 	mov	r4,r17
    7f7c:	a80b883a 	mov	r5,r21
    7f80:	a0a3383a 	mul	r17,r20,r2
    7f84:	00094580 	call	9458 <__umodsi3>
    7f88:	d9400117 	ldw	r5,4(sp)
    7f8c:	1004943a 	slli	r2,r2,16
    7f90:	28ffffcc 	andi	r3,r5,65535
    7f94:	10c4b03a 	or	r2,r2,r3
    7f98:	1440042e 	bgeu	r2,r17,7fac <__umoddi3+0x374>
    7f9c:	1405883a 	add	r2,r2,r16
    7fa0:	14000236 	bltu	r2,r16,7fac <__umoddi3+0x374>
    7fa4:	1440012e 	bgeu	r2,r17,7fac <__umoddi3+0x374>
    7fa8:	1405883a 	add	r2,r2,r16
    7fac:	b5ec983a 	sll	r22,r22,r23
    7fb0:	1463c83a 	sub	r17,r2,r17
    7fb4:	003f4406 	br	7cc8 <__umoddi3+0x90>
    7fb8:	3d4fc83a 	sub	r7,r7,r21
    7fbc:	3546983a 	sll	r3,r6,r21
    7fc0:	81c4d83a 	srl	r2,r16,r7
    7fc4:	a1e2d83a 	srl	r17,r20,r7
    7fc8:	a54c983a 	sll	r6,r20,r21
    7fcc:	18aeb03a 	or	r23,r3,r2
    7fd0:	b828d43a 	srli	r20,r23,16
    7fd4:	b1c4d83a 	srl	r2,r22,r7
    7fd8:	8809883a 	mov	r4,r17
    7fdc:	a00b883a 	mov	r5,r20
    7fe0:	308cb03a 	or	r6,r6,r2
    7fe4:	d9c00315 	stw	r7,12(sp)
    7fe8:	d9800215 	stw	r6,8(sp)
    7fec:	00094500 	call	9450 <__udivsi3>
    7ff0:	8809883a 	mov	r4,r17
    7ff4:	a00b883a 	mov	r5,r20
    7ff8:	1039883a 	mov	fp,r2
    7ffc:	00094580 	call	9458 <__umodsi3>
    8000:	b8ffffcc 	andi	r3,r23,65535
    8004:	d8c00415 	stw	r3,16(sp)
    8008:	d9000217 	ldw	r4,8(sp)
    800c:	d9400417 	ldw	r5,16(sp)
    8010:	1004943a 	slli	r2,r2,16
    8014:	2006d43a 	srli	r3,r4,16
    8018:	8560983a 	sll	r16,r16,r21
    801c:	2f23383a 	mul	r17,r5,fp
    8020:	10c4b03a 	or	r2,r2,r3
    8024:	dc000015 	stw	r16,0(sp)
    8028:	b56c983a 	sll	r22,r22,r21
    802c:	1440032e 	bgeu	r2,r17,803c <__umoddi3+0x404>
    8030:	15c5883a 	add	r2,r2,r23
    8034:	e73fffc4 	addi	fp,fp,-1
    8038:	15c05d2e 	bgeu	r2,r23,81b0 <__umoddi3+0x578>
    803c:	1463c83a 	sub	r17,r2,r17
    8040:	8809883a 	mov	r4,r17
    8044:	a00b883a 	mov	r5,r20
    8048:	00094500 	call	9450 <__udivsi3>
    804c:	8809883a 	mov	r4,r17
    8050:	a00b883a 	mov	r5,r20
    8054:	1021883a 	mov	r16,r2
    8058:	00094580 	call	9458 <__umodsi3>
    805c:	d8c00417 	ldw	r3,16(sp)
    8060:	d9000217 	ldw	r4,8(sp)
    8064:	1004943a 	slli	r2,r2,16
    8068:	1c23383a 	mul	r17,r3,r16
    806c:	20ffffcc 	andi	r3,r4,65535
    8070:	10ceb03a 	or	r7,r2,r3
    8074:	3c40032e 	bgeu	r7,r17,8084 <__umoddi3+0x44c>
    8078:	3dcf883a 	add	r7,r7,r23
    807c:	843fffc4 	addi	r16,r16,-1
    8080:	3dc0472e 	bgeu	r7,r23,81a0 <__umoddi3+0x568>
    8084:	e004943a 	slli	r2,fp,16
    8088:	d9400017 	ldw	r5,0(sp)
    808c:	3c4fc83a 	sub	r7,r7,r17
    8090:	8084b03a 	or	r2,r16,r2
    8094:	28ffffcc 	andi	r3,r5,65535
    8098:	280cd43a 	srli	r6,r5,16
    809c:	100ad43a 	srli	r5,r2,16
    80a0:	10bfffcc 	andi	r2,r2,65535
    80a4:	10d1383a 	mul	r8,r2,r3
    80a8:	28c7383a 	mul	r3,r5,r3
    80ac:	1185383a 	mul	r2,r2,r6
    80b0:	4008d43a 	srli	r4,r8,16
    80b4:	298b383a 	mul	r5,r5,r6
    80b8:	10c5883a 	add	r2,r2,r3
    80bc:	2089883a 	add	r4,r4,r2
    80c0:	20c0022e 	bgeu	r4,r3,80cc <__umoddi3+0x494>
    80c4:	00800074 	movhi	r2,1
    80c8:	288b883a 	add	r5,r5,r2
    80cc:	2004d43a 	srli	r2,r4,16
    80d0:	2008943a 	slli	r4,r4,16
    80d4:	40ffffcc 	andi	r3,r8,65535
    80d8:	288b883a 	add	r5,r5,r2
    80dc:	20c9883a 	add	r4,r4,r3
    80e0:	39400b36 	bltu	r7,r5,8110 <__umoddi3+0x4d8>
    80e4:	39403d26 	beq	r7,r5,81dc <__umoddi3+0x5a4>
    80e8:	394bc83a 	sub	r5,r7,r5
    80ec:	00000f06 	br	812c <__umoddi3+0x4f4>
    80f0:	30c5c83a 	sub	r2,r6,r3
    80f4:	1839883a 	mov	fp,r3
    80f8:	b084d83a 	srl	r2,r22,r2
    80fc:	a0c6983a 	sll	r3,r20,r3
    8100:	8720983a 	sll	r16,r16,fp
    8104:	b72c983a 	sll	r22,r22,fp
    8108:	18a8b03a 	or	r20,r3,r2
    810c:	003f3a06 	br	7df8 <__umoddi3+0x1c0>
    8110:	d8c00017 	ldw	r3,0(sp)
    8114:	20c5c83a 	sub	r2,r4,r3
    8118:	2089803a 	cmpltu	r4,r4,r2
    811c:	2dc7c83a 	sub	r3,r5,r23
    8120:	1907c83a 	sub	r3,r3,r4
    8124:	38cbc83a 	sub	r5,r7,r3
    8128:	1009883a 	mov	r4,r2
    812c:	b105c83a 	sub	r2,r22,r4
    8130:	b087803a 	cmpltu	r3,r22,r2
    8134:	28c7c83a 	sub	r3,r5,r3
    8138:	d9400317 	ldw	r5,12(sp)
    813c:	1544d83a 	srl	r2,r2,r21
    8140:	1948983a 	sll	r4,r3,r5
    8144:	1d46d83a 	srl	r3,r3,r21
    8148:	20a4b03a 	or	r18,r4,r2
    814c:	9011883a 	mov	r8,r18
    8150:	1813883a 	mov	r9,r3
    8154:	003ef606 	br	7d30 <__umoddi3+0xf8>
    8158:	01400604 	movi	r5,24
    815c:	2805883a 	mov	r2,r5
    8160:	003ecc06 	br	7c94 <__umoddi3+0x5c>
    8164:	01400204 	movi	r5,8
    8168:	2805883a 	mov	r2,r5
    816c:	003ec906 	br	7c94 <__umoddi3+0x5c>
    8170:	01400204 	movi	r5,8
    8174:	2805883a 	mov	r2,r5
    8178:	003f0106 	br	7d80 <__umoddi3+0x148>
    817c:	01400204 	movi	r5,8
    8180:	2805883a 	mov	r2,r5
    8184:	003f1206 	br	7dd0 <__umoddi3+0x198>
    8188:	01400604 	movi	r5,24
    818c:	2805883a 	mov	r2,r5
    8190:	003f0f06 	br	7dd0 <__umoddi3+0x198>
    8194:	01400604 	movi	r5,24
    8198:	2805883a 	mov	r2,r5
    819c:	003ef806 	br	7d80 <__umoddi3+0x148>
    81a0:	3c7fb82e 	bgeu	r7,r17,8084 <__umoddi3+0x44c>
    81a4:	843fffc4 	addi	r16,r16,-1
    81a8:	3dcf883a 	add	r7,r7,r23
    81ac:	003fb506 	br	8084 <__umoddi3+0x44c>
    81b0:	147fa22e 	bgeu	r2,r17,803c <__umoddi3+0x404>
    81b4:	e73fffc4 	addi	fp,fp,-1
    81b8:	15c5883a 	add	r2,r2,r23
    81bc:	003f9f06 	br	803c <__umoddi3+0x404>
    81c0:	147f692e 	bgeu	r2,r17,7f68 <__umoddi3+0x330>
    81c4:	1405883a 	add	r2,r2,r16
    81c8:	003f6706 	br	7f68 <__umoddi3+0x330>
    81cc:	1405883a 	add	r2,r2,r16
    81d0:	003f1906 	br	7e38 <__umoddi3+0x200>
    81d4:	1405883a 	add	r2,r2,r16
    81d8:	003ec906 	br	7d00 <__umoddi3+0xc8>
    81dc:	b13fcc36 	bltu	r22,r4,8110 <__umoddi3+0x4d8>
    81e0:	000b883a 	mov	r5,zero
    81e4:	003fd106 	br	812c <__umoddi3+0x4f4>

000081e8 <_fpadd_parts>:
    81e8:	defff804 	addi	sp,sp,-32
    81ec:	dcc00315 	stw	r19,12(sp)
    81f0:	2027883a 	mov	r19,r4
    81f4:	21000017 	ldw	r4,0(r4)
    81f8:	00c00044 	movi	r3,1
    81fc:	dd400515 	stw	r21,20(sp)
    8200:	dd000415 	stw	r20,16(sp)
    8204:	ddc00715 	stw	r23,28(sp)
    8208:	dd800615 	stw	r22,24(sp)
    820c:	dc800215 	stw	r18,8(sp)
    8210:	dc400115 	stw	r17,4(sp)
    8214:	dc000015 	stw	r16,0(sp)
    8218:	282b883a 	mov	r21,r5
    821c:	3029883a 	mov	r20,r6
    8220:	1900632e 	bgeu	r3,r4,83b0 <_fpadd_parts+0x1c8>
    8224:	28800017 	ldw	r2,0(r5)
    8228:	1880812e 	bgeu	r3,r2,8430 <_fpadd_parts+0x248>
    822c:	00c00104 	movi	r3,4
    8230:	20c0dc26 	beq	r4,r3,85a4 <_fpadd_parts+0x3bc>
    8234:	10c07e26 	beq	r2,r3,8430 <_fpadd_parts+0x248>
    8238:	00c00084 	movi	r3,2
    823c:	10c06726 	beq	r2,r3,83dc <_fpadd_parts+0x1f4>
    8240:	20c07b26 	beq	r4,r3,8430 <_fpadd_parts+0x248>
    8244:	9dc00217 	ldw	r23,8(r19)
    8248:	28c00217 	ldw	r3,8(r5)
    824c:	9c400317 	ldw	r17,12(r19)
    8250:	2bc00317 	ldw	r15,12(r5)
    8254:	b8cdc83a 	sub	r6,r23,r3
    8258:	9c800417 	ldw	r18,16(r19)
    825c:	2c000417 	ldw	r16,16(r5)
    8260:	3009883a 	mov	r4,r6
    8264:	30009716 	blt	r6,zero,84c4 <_fpadd_parts+0x2dc>
    8268:	00800fc4 	movi	r2,63
    826c:	11806b16 	blt	r2,r6,841c <_fpadd_parts+0x234>
    8270:	0100a40e 	bge	zero,r4,8504 <_fpadd_parts+0x31c>
    8274:	35bff804 	addi	r22,r6,-32
    8278:	b000bc16 	blt	r22,zero,856c <_fpadd_parts+0x384>
    827c:	8596d83a 	srl	r11,r16,r22
    8280:	0019883a 	mov	r12,zero
    8284:	0013883a 	mov	r9,zero
    8288:	01000044 	movi	r4,1
    828c:	0015883a 	mov	r10,zero
    8290:	b000be16 	blt	r22,zero,858c <_fpadd_parts+0x3a4>
    8294:	2590983a 	sll	r8,r4,r22
    8298:	000f883a 	mov	r7,zero
    829c:	00bfffc4 	movi	r2,-1
    82a0:	3889883a 	add	r4,r7,r2
    82a4:	408b883a 	add	r5,r8,r2
    82a8:	21cd803a 	cmpltu	r6,r4,r7
    82ac:	314b883a 	add	r5,r6,r5
    82b0:	7904703a 	and	r2,r15,r4
    82b4:	8146703a 	and	r3,r16,r5
    82b8:	10c4b03a 	or	r2,r2,r3
    82bc:	10000226 	beq	r2,zero,82c8 <_fpadd_parts+0xe0>
    82c0:	02400044 	movi	r9,1
    82c4:	0015883a 	mov	r10,zero
    82c8:	5a5eb03a 	or	r15,r11,r9
    82cc:	62a0b03a 	or	r16,r12,r10
    82d0:	99400117 	ldw	r5,4(r19)
    82d4:	a8800117 	ldw	r2,4(r21)
    82d8:	28806e26 	beq	r5,r2,8494 <_fpadd_parts+0x2ac>
    82dc:	28006626 	beq	r5,zero,8478 <_fpadd_parts+0x290>
    82e0:	7c45c83a 	sub	r2,r15,r17
    82e4:	7889803a 	cmpltu	r4,r15,r2
    82e8:	8487c83a 	sub	r3,r16,r18
    82ec:	1909c83a 	sub	r4,r3,r4
    82f0:	100d883a 	mov	r6,r2
    82f4:	200f883a 	mov	r7,r4
    82f8:	38007716 	blt	r7,zero,84d8 <_fpadd_parts+0x2f0>
    82fc:	a5c00215 	stw	r23,8(r20)
    8300:	a1c00415 	stw	r7,16(r20)
    8304:	a0000115 	stw	zero,4(r20)
    8308:	a1800315 	stw	r6,12(r20)
    830c:	a2000317 	ldw	r8,12(r20)
    8310:	a2400417 	ldw	r9,16(r20)
    8314:	00bfffc4 	movi	r2,-1
    8318:	408b883a 	add	r5,r8,r2
    831c:	2a09803a 	cmpltu	r4,r5,r8
    8320:	488d883a 	add	r6,r9,r2
    8324:	01c40034 	movhi	r7,4096
    8328:	39ffffc4 	addi	r7,r7,-1
    832c:	218d883a 	add	r6,r4,r6
    8330:	39801736 	bltu	r7,r6,8390 <_fpadd_parts+0x1a8>
    8334:	31c06526 	beq	r6,r7,84cc <_fpadd_parts+0x2e4>
    8338:	a3000217 	ldw	r12,8(r20)
    833c:	4209883a 	add	r4,r8,r8
    8340:	00bfffc4 	movi	r2,-1
    8344:	220f803a 	cmpltu	r7,r4,r8
    8348:	4a4b883a 	add	r5,r9,r9
    834c:	394f883a 	add	r7,r7,r5
    8350:	2095883a 	add	r10,r4,r2
    8354:	3897883a 	add	r11,r7,r2
    8358:	510d803a 	cmpltu	r6,r10,r4
    835c:	6099883a 	add	r12,r12,r2
    8360:	32d7883a 	add	r11,r6,r11
    8364:	00840034 	movhi	r2,4096
    8368:	10bfffc4 	addi	r2,r2,-1
    836c:	2011883a 	mov	r8,r4
    8370:	3813883a 	mov	r9,r7
    8374:	a1000315 	stw	r4,12(r20)
    8378:	a1c00415 	stw	r7,16(r20)
    837c:	a3000215 	stw	r12,8(r20)
    8380:	12c00336 	bltu	r2,r11,8390 <_fpadd_parts+0x1a8>
    8384:	58bfed1e 	bne	r11,r2,833c <_fpadd_parts+0x154>
    8388:	00bfff84 	movi	r2,-2
    838c:	12bfeb2e 	bgeu	r2,r10,833c <_fpadd_parts+0x154>
    8390:	a2800417 	ldw	r10,16(r20)
    8394:	008000c4 	movi	r2,3
    8398:	00c80034 	movhi	r3,8192
    839c:	18ffffc4 	addi	r3,r3,-1
    83a0:	a2400317 	ldw	r9,12(r20)
    83a4:	a0800015 	stw	r2,0(r20)
    83a8:	1a802336 	bltu	r3,r10,8438 <_fpadd_parts+0x250>
    83ac:	a027883a 	mov	r19,r20
    83b0:	9805883a 	mov	r2,r19
    83b4:	ddc00717 	ldw	r23,28(sp)
    83b8:	dd800617 	ldw	r22,24(sp)
    83bc:	dd400517 	ldw	r21,20(sp)
    83c0:	dd000417 	ldw	r20,16(sp)
    83c4:	dcc00317 	ldw	r19,12(sp)
    83c8:	dc800217 	ldw	r18,8(sp)
    83cc:	dc400117 	ldw	r17,4(sp)
    83d0:	dc000017 	ldw	r16,0(sp)
    83d4:	dec00804 	addi	sp,sp,32
    83d8:	f800283a 	ret
    83dc:	20fff41e 	bne	r4,r3,83b0 <_fpadd_parts+0x1c8>
    83e0:	31000015 	stw	r4,0(r6)
    83e4:	98800117 	ldw	r2,4(r19)
    83e8:	30800115 	stw	r2,4(r6)
    83ec:	98c00217 	ldw	r3,8(r19)
    83f0:	30c00215 	stw	r3,8(r6)
    83f4:	98800317 	ldw	r2,12(r19)
    83f8:	30800315 	stw	r2,12(r6)
    83fc:	98c00417 	ldw	r3,16(r19)
    8400:	30c00415 	stw	r3,16(r6)
    8404:	98800117 	ldw	r2,4(r19)
    8408:	28c00117 	ldw	r3,4(r5)
    840c:	3027883a 	mov	r19,r6
    8410:	10c4703a 	and	r2,r2,r3
    8414:	30800115 	stw	r2,4(r6)
    8418:	003fe506 	br	83b0 <_fpadd_parts+0x1c8>
    841c:	1dc02616 	blt	r3,r23,84b8 <_fpadd_parts+0x2d0>
    8420:	0023883a 	mov	r17,zero
    8424:	182f883a 	mov	r23,r3
    8428:	0025883a 	mov	r18,zero
    842c:	003fa806 	br	82d0 <_fpadd_parts+0xe8>
    8430:	a827883a 	mov	r19,r21
    8434:	003fde06 	br	83b0 <_fpadd_parts+0x1c8>
    8438:	01800044 	movi	r6,1
    843c:	500497fa 	slli	r2,r10,31
    8440:	4808d07a 	srli	r4,r9,1
    8444:	518ad83a 	srl	r5,r10,r6
    8448:	a2000217 	ldw	r8,8(r20)
    844c:	1108b03a 	or	r4,r2,r4
    8450:	0007883a 	mov	r3,zero
    8454:	4984703a 	and	r2,r9,r6
    8458:	208cb03a 	or	r6,r4,r2
    845c:	28ceb03a 	or	r7,r5,r3
    8460:	42000044 	addi	r8,r8,1
    8464:	a027883a 	mov	r19,r20
    8468:	a1c00415 	stw	r7,16(r20)
    846c:	a2000215 	stw	r8,8(r20)
    8470:	a1800315 	stw	r6,12(r20)
    8474:	003fce06 	br	83b0 <_fpadd_parts+0x1c8>
    8478:	8bc5c83a 	sub	r2,r17,r15
    847c:	8889803a 	cmpltu	r4,r17,r2
    8480:	9407c83a 	sub	r3,r18,r16
    8484:	1909c83a 	sub	r4,r3,r4
    8488:	100d883a 	mov	r6,r2
    848c:	200f883a 	mov	r7,r4
    8490:	003f9906 	br	82f8 <_fpadd_parts+0x110>
    8494:	7c45883a 	add	r2,r15,r17
    8498:	13c9803a 	cmpltu	r4,r2,r15
    849c:	8487883a 	add	r3,r16,r18
    84a0:	20c9883a 	add	r4,r4,r3
    84a4:	a1400115 	stw	r5,4(r20)
    84a8:	a5c00215 	stw	r23,8(r20)
    84ac:	a0800315 	stw	r2,12(r20)
    84b0:	a1000415 	stw	r4,16(r20)
    84b4:	003fb606 	br	8390 <_fpadd_parts+0x1a8>
    84b8:	001f883a 	mov	r15,zero
    84bc:	0021883a 	mov	r16,zero
    84c0:	003f8306 	br	82d0 <_fpadd_parts+0xe8>
    84c4:	018dc83a 	sub	r6,zero,r6
    84c8:	003f6706 	br	8268 <_fpadd_parts+0x80>
    84cc:	00bfff84 	movi	r2,-2
    84d0:	117faf36 	bltu	r2,r5,8390 <_fpadd_parts+0x1a8>
    84d4:	003f9806 	br	8338 <_fpadd_parts+0x150>
    84d8:	0005883a 	mov	r2,zero
    84dc:	1189c83a 	sub	r4,r2,r6
    84e0:	1105803a 	cmpltu	r2,r2,r4
    84e4:	01cbc83a 	sub	r5,zero,r7
    84e8:	2885c83a 	sub	r2,r5,r2
    84ec:	01800044 	movi	r6,1
    84f0:	a1800115 	stw	r6,4(r20)
    84f4:	a5c00215 	stw	r23,8(r20)
    84f8:	a1000315 	stw	r4,12(r20)
    84fc:	a0800415 	stw	r2,16(r20)
    8500:	003f8206 	br	830c <_fpadd_parts+0x124>
    8504:	203f7226 	beq	r4,zero,82d0 <_fpadd_parts+0xe8>
    8508:	35bff804 	addi	r22,r6,-32
    850c:	b9af883a 	add	r23,r23,r6
    8510:	b0003116 	blt	r22,zero,85d8 <_fpadd_parts+0x3f0>
    8514:	959ad83a 	srl	r13,r18,r22
    8518:	001d883a 	mov	r14,zero
    851c:	000f883a 	mov	r7,zero
    8520:	01000044 	movi	r4,1
    8524:	0011883a 	mov	r8,zero
    8528:	b0002516 	blt	r22,zero,85c0 <_fpadd_parts+0x3d8>
    852c:	2594983a 	sll	r10,r4,r22
    8530:	0013883a 	mov	r9,zero
    8534:	00bfffc4 	movi	r2,-1
    8538:	4889883a 	add	r4,r9,r2
    853c:	508b883a 	add	r5,r10,r2
    8540:	224d803a 	cmpltu	r6,r4,r9
    8544:	314b883a 	add	r5,r6,r5
    8548:	8904703a 	and	r2,r17,r4
    854c:	9146703a 	and	r3,r18,r5
    8550:	10c4b03a 	or	r2,r2,r3
    8554:	10000226 	beq	r2,zero,8560 <_fpadd_parts+0x378>
    8558:	01c00044 	movi	r7,1
    855c:	0011883a 	mov	r8,zero
    8560:	69e2b03a 	or	r17,r13,r7
    8564:	7224b03a 	or	r18,r14,r8
    8568:	003f5906 	br	82d0 <_fpadd_parts+0xe8>
    856c:	8407883a 	add	r3,r16,r16
    8570:	008007c4 	movi	r2,31
    8574:	1185c83a 	sub	r2,r2,r6
    8578:	1886983a 	sll	r3,r3,r2
    857c:	7996d83a 	srl	r11,r15,r6
    8580:	8198d83a 	srl	r12,r16,r6
    8584:	1ad6b03a 	or	r11,r3,r11
    8588:	003f3e06 	br	8284 <_fpadd_parts+0x9c>
    858c:	2006d07a 	srli	r3,r4,1
    8590:	008007c4 	movi	r2,31
    8594:	1185c83a 	sub	r2,r2,r6
    8598:	1890d83a 	srl	r8,r3,r2
    859c:	218e983a 	sll	r7,r4,r6
    85a0:	003f3e06 	br	829c <_fpadd_parts+0xb4>
    85a4:	113f821e 	bne	r2,r4,83b0 <_fpadd_parts+0x1c8>
    85a8:	28c00117 	ldw	r3,4(r5)
    85ac:	98800117 	ldw	r2,4(r19)
    85b0:	10ff7f26 	beq	r2,r3,83b0 <_fpadd_parts+0x1c8>
    85b4:	04c00074 	movhi	r19,1
    85b8:	9cf46304 	addi	r19,r19,-11892
    85bc:	003f7c06 	br	83b0 <_fpadd_parts+0x1c8>
    85c0:	2006d07a 	srli	r3,r4,1
    85c4:	008007c4 	movi	r2,31
    85c8:	1185c83a 	sub	r2,r2,r6
    85cc:	1894d83a 	srl	r10,r3,r2
    85d0:	2192983a 	sll	r9,r4,r6
    85d4:	003fd706 	br	8534 <_fpadd_parts+0x34c>
    85d8:	9487883a 	add	r3,r18,r18
    85dc:	008007c4 	movi	r2,31
    85e0:	1185c83a 	sub	r2,r2,r6
    85e4:	1886983a 	sll	r3,r3,r2
    85e8:	899ad83a 	srl	r13,r17,r6
    85ec:	919cd83a 	srl	r14,r18,r6
    85f0:	1b5ab03a 	or	r13,r3,r13
    85f4:	003fc906 	br	851c <_fpadd_parts+0x334>

000085f8 <__subdf3>:
    85f8:	deffea04 	addi	sp,sp,-88
    85fc:	dcc01415 	stw	r19,80(sp)
    8600:	dcc00404 	addi	r19,sp,16
    8604:	2011883a 	mov	r8,r4
    8608:	2813883a 	mov	r9,r5
    860c:	dc401315 	stw	r17,76(sp)
    8610:	d809883a 	mov	r4,sp
    8614:	980b883a 	mov	r5,r19
    8618:	dc400904 	addi	r17,sp,36
    861c:	dfc01515 	stw	ra,84(sp)
    8620:	da400115 	stw	r9,4(sp)
    8624:	d9c00315 	stw	r7,12(sp)
    8628:	da000015 	stw	r8,0(sp)
    862c:	d9800215 	stw	r6,8(sp)
    8630:	000988c0 	call	988c <__unpack_d>
    8634:	d9000204 	addi	r4,sp,8
    8638:	880b883a 	mov	r5,r17
    863c:	000988c0 	call	988c <__unpack_d>
    8640:	d8800a17 	ldw	r2,40(sp)
    8644:	880b883a 	mov	r5,r17
    8648:	9809883a 	mov	r4,r19
    864c:	d9800e04 	addi	r6,sp,56
    8650:	1080005c 	xori	r2,r2,1
    8654:	d8800a15 	stw	r2,40(sp)
    8658:	00081e80 	call	81e8 <_fpadd_parts>
    865c:	1009883a 	mov	r4,r2
    8660:	00095780 	call	9578 <__pack_d>
    8664:	dfc01517 	ldw	ra,84(sp)
    8668:	dcc01417 	ldw	r19,80(sp)
    866c:	dc401317 	ldw	r17,76(sp)
    8670:	dec01604 	addi	sp,sp,88
    8674:	f800283a 	ret

00008678 <__adddf3>:
    8678:	deffea04 	addi	sp,sp,-88
    867c:	dcc01415 	stw	r19,80(sp)
    8680:	dcc00404 	addi	r19,sp,16
    8684:	2011883a 	mov	r8,r4
    8688:	2813883a 	mov	r9,r5
    868c:	dc401315 	stw	r17,76(sp)
    8690:	d809883a 	mov	r4,sp
    8694:	980b883a 	mov	r5,r19
    8698:	dc400904 	addi	r17,sp,36
    869c:	dfc01515 	stw	ra,84(sp)
    86a0:	da400115 	stw	r9,4(sp)
    86a4:	d9c00315 	stw	r7,12(sp)
    86a8:	da000015 	stw	r8,0(sp)
    86ac:	d9800215 	stw	r6,8(sp)
    86b0:	000988c0 	call	988c <__unpack_d>
    86b4:	d9000204 	addi	r4,sp,8
    86b8:	880b883a 	mov	r5,r17
    86bc:	000988c0 	call	988c <__unpack_d>
    86c0:	d9800e04 	addi	r6,sp,56
    86c4:	9809883a 	mov	r4,r19
    86c8:	880b883a 	mov	r5,r17
    86cc:	00081e80 	call	81e8 <_fpadd_parts>
    86d0:	1009883a 	mov	r4,r2
    86d4:	00095780 	call	9578 <__pack_d>
    86d8:	dfc01517 	ldw	ra,84(sp)
    86dc:	dcc01417 	ldw	r19,80(sp)
    86e0:	dc401317 	ldw	r17,76(sp)
    86e4:	dec01604 	addi	sp,sp,88
    86e8:	f800283a 	ret

000086ec <__muldf3>:
    86ec:	deffe004 	addi	sp,sp,-128
    86f0:	dc401815 	stw	r17,96(sp)
    86f4:	dc400404 	addi	r17,sp,16
    86f8:	2011883a 	mov	r8,r4
    86fc:	2813883a 	mov	r9,r5
    8700:	dc001715 	stw	r16,92(sp)
    8704:	d809883a 	mov	r4,sp
    8708:	880b883a 	mov	r5,r17
    870c:	dc000904 	addi	r16,sp,36
    8710:	dfc01f15 	stw	ra,124(sp)
    8714:	da400115 	stw	r9,4(sp)
    8718:	d9c00315 	stw	r7,12(sp)
    871c:	da000015 	stw	r8,0(sp)
    8720:	d9800215 	stw	r6,8(sp)
    8724:	ddc01e15 	stw	r23,120(sp)
    8728:	dd801d15 	stw	r22,116(sp)
    872c:	dd401c15 	stw	r21,112(sp)
    8730:	dd001b15 	stw	r20,108(sp)
    8734:	dcc01a15 	stw	r19,104(sp)
    8738:	dc801915 	stw	r18,100(sp)
    873c:	000988c0 	call	988c <__unpack_d>
    8740:	d9000204 	addi	r4,sp,8
    8744:	800b883a 	mov	r5,r16
    8748:	000988c0 	call	988c <__unpack_d>
    874c:	d9000417 	ldw	r4,16(sp)
    8750:	00800044 	movi	r2,1
    8754:	1100102e 	bgeu	r2,r4,8798 <__muldf3+0xac>
    8758:	d8c00917 	ldw	r3,36(sp)
    875c:	10c0062e 	bgeu	r2,r3,8778 <__muldf3+0x8c>
    8760:	00800104 	movi	r2,4
    8764:	20800a26 	beq	r4,r2,8790 <__muldf3+0xa4>
    8768:	1880cc26 	beq	r3,r2,8a9c <__muldf3+0x3b0>
    876c:	00800084 	movi	r2,2
    8770:	20800926 	beq	r4,r2,8798 <__muldf3+0xac>
    8774:	1880191e 	bne	r3,r2,87dc <__muldf3+0xf0>
    8778:	d8c00a17 	ldw	r3,40(sp)
    877c:	d8800517 	ldw	r2,20(sp)
    8780:	8009883a 	mov	r4,r16
    8784:	10c4c03a 	cmpne	r2,r2,r3
    8788:	d8800a15 	stw	r2,40(sp)
    878c:	00000706 	br	87ac <__muldf3+0xc0>
    8790:	00800084 	movi	r2,2
    8794:	1880c326 	beq	r3,r2,8aa4 <__muldf3+0x3b8>
    8798:	d8800517 	ldw	r2,20(sp)
    879c:	d8c00a17 	ldw	r3,40(sp)
    87a0:	8809883a 	mov	r4,r17
    87a4:	10c4c03a 	cmpne	r2,r2,r3
    87a8:	d8800515 	stw	r2,20(sp)
    87ac:	00095780 	call	9578 <__pack_d>
    87b0:	dfc01f17 	ldw	ra,124(sp)
    87b4:	ddc01e17 	ldw	r23,120(sp)
    87b8:	dd801d17 	ldw	r22,116(sp)
    87bc:	dd401c17 	ldw	r21,112(sp)
    87c0:	dd001b17 	ldw	r20,108(sp)
    87c4:	dcc01a17 	ldw	r19,104(sp)
    87c8:	dc801917 	ldw	r18,100(sp)
    87cc:	dc401817 	ldw	r17,96(sp)
    87d0:	dc001717 	ldw	r16,92(sp)
    87d4:	dec02004 	addi	sp,sp,128
    87d8:	f800283a 	ret
    87dc:	dd800717 	ldw	r22,28(sp)
    87e0:	dc800c17 	ldw	r18,48(sp)
    87e4:	002b883a 	mov	r21,zero
    87e8:	0023883a 	mov	r17,zero
    87ec:	a80b883a 	mov	r5,r21
    87f0:	b00d883a 	mov	r6,r22
    87f4:	880f883a 	mov	r7,r17
    87f8:	ddc00817 	ldw	r23,32(sp)
    87fc:	dcc00d17 	ldw	r19,52(sp)
    8800:	9009883a 	mov	r4,r18
    8804:	00094600 	call	9460 <__muldi3>
    8808:	001b883a 	mov	r13,zero
    880c:	680f883a 	mov	r7,r13
    8810:	b009883a 	mov	r4,r22
    8814:	000b883a 	mov	r5,zero
    8818:	980d883a 	mov	r6,r19
    881c:	b82d883a 	mov	r22,r23
    8820:	002f883a 	mov	r23,zero
    8824:	db401615 	stw	r13,88(sp)
    8828:	d8801315 	stw	r2,76(sp)
    882c:	d8c01415 	stw	r3,80(sp)
    8830:	dcc01515 	stw	r19,84(sp)
    8834:	00094600 	call	9460 <__muldi3>
    8838:	b00d883a 	mov	r6,r22
    883c:	000b883a 	mov	r5,zero
    8840:	9009883a 	mov	r4,r18
    8844:	b80f883a 	mov	r7,r23
    8848:	1021883a 	mov	r16,r2
    884c:	1823883a 	mov	r17,r3
    8850:	00094600 	call	9460 <__muldi3>
    8854:	8085883a 	add	r2,r16,r2
    8858:	140d803a 	cmpltu	r6,r2,r16
    885c:	88c7883a 	add	r3,r17,r3
    8860:	30cd883a 	add	r6,r6,r3
    8864:	1029883a 	mov	r20,r2
    8868:	302b883a 	mov	r21,r6
    886c:	da801317 	ldw	r10,76(sp)
    8870:	dac01417 	ldw	r11,80(sp)
    8874:	db001517 	ldw	r12,84(sp)
    8878:	db401617 	ldw	r13,88(sp)
    887c:	3440612e 	bgeu	r6,r17,8a04 <__muldf3+0x318>
    8880:	0009883a 	mov	r4,zero
    8884:	5105883a 	add	r2,r10,r4
    8888:	128d803a 	cmpltu	r6,r2,r10
    888c:	5d07883a 	add	r3,r11,r20
    8890:	30cd883a 	add	r6,r6,r3
    8894:	0021883a 	mov	r16,zero
    8898:	04400044 	movi	r17,1
    889c:	1025883a 	mov	r18,r2
    88a0:	3027883a 	mov	r19,r6
    88a4:	32c06236 	bltu	r6,r11,8a30 <__muldf3+0x344>
    88a8:	59807a26 	beq	r11,r6,8a94 <__muldf3+0x3a8>
    88ac:	680b883a 	mov	r5,r13
    88b0:	b80f883a 	mov	r7,r23
    88b4:	6009883a 	mov	r4,r12
    88b8:	b00d883a 	mov	r6,r22
    88bc:	00094600 	call	9460 <__muldi3>
    88c0:	1009883a 	mov	r4,r2
    88c4:	000f883a 	mov	r7,zero
    88c8:	1545883a 	add	r2,r2,r21
    88cc:	1111803a 	cmpltu	r8,r2,r4
    88d0:	19c7883a 	add	r3,r3,r7
    88d4:	40c7883a 	add	r3,r8,r3
    88d8:	88cb883a 	add	r5,r17,r3
    88dc:	d8c00617 	ldw	r3,24(sp)
    88e0:	8089883a 	add	r4,r16,r2
    88e4:	d8800b17 	ldw	r2,44(sp)
    88e8:	18c00104 	addi	r3,r3,4
    88ec:	240d803a 	cmpltu	r6,r4,r16
    88f0:	10c7883a 	add	r3,r2,r3
    88f4:	2013883a 	mov	r9,r4
    88f8:	d8800a17 	ldw	r2,40(sp)
    88fc:	d9000517 	ldw	r4,20(sp)
    8900:	314d883a 	add	r6,r6,r5
    8904:	3015883a 	mov	r10,r6
    8908:	2088c03a 	cmpne	r4,r4,r2
    890c:	00880034 	movhi	r2,8192
    8910:	10bfffc4 	addi	r2,r2,-1
    8914:	d9000f15 	stw	r4,60(sp)
    8918:	d8c01015 	stw	r3,64(sp)
    891c:	1180162e 	bgeu	r2,r6,8978 <__muldf3+0x28c>
    8920:	1811883a 	mov	r8,r3
    8924:	101f883a 	mov	r15,r2
    8928:	980497fa 	slli	r2,r19,31
    892c:	9016d07a 	srli	r11,r18,1
    8930:	500697fa 	slli	r3,r10,31
    8934:	480cd07a 	srli	r6,r9,1
    8938:	500ed07a 	srli	r7,r10,1
    893c:	12d6b03a 	or	r11,r2,r11
    8940:	00800044 	movi	r2,1
    8944:	198cb03a 	or	r6,r3,r6
    8948:	4888703a 	and	r4,r9,r2
    894c:	9818d07a 	srli	r12,r19,1
    8950:	001b883a 	mov	r13,zero
    8954:	03a00034 	movhi	r14,32768
    8958:	3013883a 	mov	r9,r6
    895c:	3815883a 	mov	r10,r7
    8960:	4091883a 	add	r8,r8,r2
    8964:	20000226 	beq	r4,zero,8970 <__muldf3+0x284>
    8968:	5b64b03a 	or	r18,r11,r13
    896c:	63a6b03a 	or	r19,r12,r14
    8970:	7abfed36 	bltu	r15,r10,8928 <__muldf3+0x23c>
    8974:	da001015 	stw	r8,64(sp)
    8978:	00840034 	movhi	r2,4096
    897c:	10bfffc4 	addi	r2,r2,-1
    8980:	12801436 	bltu	r2,r10,89d4 <__muldf3+0x2e8>
    8984:	da001017 	ldw	r8,64(sp)
    8988:	101f883a 	mov	r15,r2
    898c:	4a45883a 	add	r2,r9,r9
    8990:	124d803a 	cmpltu	r6,r2,r9
    8994:	5287883a 	add	r3,r10,r10
    8998:	9497883a 	add	r11,r18,r18
    899c:	5c8f803a 	cmpltu	r7,r11,r18
    89a0:	9cd9883a 	add	r12,r19,r19
    89a4:	01000044 	movi	r4,1
    89a8:	30cd883a 	add	r6,r6,r3
    89ac:	3b0f883a 	add	r7,r7,r12
    89b0:	423fffc4 	addi	r8,r8,-1
    89b4:	1013883a 	mov	r9,r2
    89b8:	3015883a 	mov	r10,r6
    89bc:	111ab03a 	or	r13,r2,r4
    89c0:	98003016 	blt	r19,zero,8a84 <__muldf3+0x398>
    89c4:	5825883a 	mov	r18,r11
    89c8:	3827883a 	mov	r19,r7
    89cc:	7abfef2e 	bgeu	r15,r10,898c <__muldf3+0x2a0>
    89d0:	da001015 	stw	r8,64(sp)
    89d4:	00803fc4 	movi	r2,255
    89d8:	488e703a 	and	r7,r9,r2
    89dc:	00802004 	movi	r2,128
    89e0:	0007883a 	mov	r3,zero
    89e4:	0011883a 	mov	r8,zero
    89e8:	38801826 	beq	r7,r2,8a4c <__muldf3+0x360>
    89ec:	008000c4 	movi	r2,3
    89f0:	d9000e04 	addi	r4,sp,56
    89f4:	da801215 	stw	r10,72(sp)
    89f8:	d8800e15 	stw	r2,56(sp)
    89fc:	da401115 	stw	r9,68(sp)
    8a00:	003f6a06 	br	87ac <__muldf3+0xc0>
    8a04:	89802126 	beq	r17,r6,8a8c <__muldf3+0x3a0>
    8a08:	0009883a 	mov	r4,zero
    8a0c:	5105883a 	add	r2,r10,r4
    8a10:	128d803a 	cmpltu	r6,r2,r10
    8a14:	5d07883a 	add	r3,r11,r20
    8a18:	30cd883a 	add	r6,r6,r3
    8a1c:	0021883a 	mov	r16,zero
    8a20:	0023883a 	mov	r17,zero
    8a24:	1025883a 	mov	r18,r2
    8a28:	3027883a 	mov	r19,r6
    8a2c:	32ff9e2e 	bgeu	r6,r11,88a8 <__muldf3+0x1bc>
    8a30:	00800044 	movi	r2,1
    8a34:	8089883a 	add	r4,r16,r2
    8a38:	240d803a 	cmpltu	r6,r4,r16
    8a3c:	344d883a 	add	r6,r6,r17
    8a40:	2021883a 	mov	r16,r4
    8a44:	3023883a 	mov	r17,r6
    8a48:	003f9806 	br	88ac <__muldf3+0x1c0>
    8a4c:	403fe71e 	bne	r8,zero,89ec <__muldf3+0x300>
    8a50:	01004004 	movi	r4,256
    8a54:	4904703a 	and	r2,r9,r4
    8a58:	10c4b03a 	or	r2,r2,r3
    8a5c:	103fe31e 	bne	r2,zero,89ec <__muldf3+0x300>
    8a60:	94c4b03a 	or	r2,r18,r19
    8a64:	103fe126 	beq	r2,zero,89ec <__muldf3+0x300>
    8a68:	49c5883a 	add	r2,r9,r7
    8a6c:	1251803a 	cmpltu	r8,r2,r9
    8a70:	4291883a 	add	r8,r8,r10
    8a74:	013fc004 	movi	r4,-256
    8a78:	1112703a 	and	r9,r2,r4
    8a7c:	4015883a 	mov	r10,r8
    8a80:	003fda06 	br	89ec <__muldf3+0x300>
    8a84:	6813883a 	mov	r9,r13
    8a88:	003fce06 	br	89c4 <__muldf3+0x2d8>
    8a8c:	143f7c36 	bltu	r2,r16,8880 <__muldf3+0x194>
    8a90:	003fdd06 	br	8a08 <__muldf3+0x31c>
    8a94:	12bf852e 	bgeu	r2,r10,88ac <__muldf3+0x1c0>
    8a98:	003fe506 	br	8a30 <__muldf3+0x344>
    8a9c:	00800084 	movi	r2,2
    8aa0:	20bf351e 	bne	r4,r2,8778 <__muldf3+0x8c>
    8aa4:	01000074 	movhi	r4,1
    8aa8:	21346304 	addi	r4,r4,-11892
    8aac:	003f3f06 	br	87ac <__muldf3+0xc0>

00008ab0 <__divdf3>:
    8ab0:	deffed04 	addi	sp,sp,-76
    8ab4:	dcc01115 	stw	r19,68(sp)
    8ab8:	dcc00404 	addi	r19,sp,16
    8abc:	2011883a 	mov	r8,r4
    8ac0:	2813883a 	mov	r9,r5
    8ac4:	dc000e15 	stw	r16,56(sp)
    8ac8:	d809883a 	mov	r4,sp
    8acc:	980b883a 	mov	r5,r19
    8ad0:	dc000904 	addi	r16,sp,36
    8ad4:	dfc01215 	stw	ra,72(sp)
    8ad8:	da400115 	stw	r9,4(sp)
    8adc:	d9c00315 	stw	r7,12(sp)
    8ae0:	da000015 	stw	r8,0(sp)
    8ae4:	d9800215 	stw	r6,8(sp)
    8ae8:	dc801015 	stw	r18,64(sp)
    8aec:	dc400f15 	stw	r17,60(sp)
    8af0:	000988c0 	call	988c <__unpack_d>
    8af4:	d9000204 	addi	r4,sp,8
    8af8:	800b883a 	mov	r5,r16
    8afc:	000988c0 	call	988c <__unpack_d>
    8b00:	d9000417 	ldw	r4,16(sp)
    8b04:	00800044 	movi	r2,1
    8b08:	11000b2e 	bgeu	r2,r4,8b38 <__divdf3+0x88>
    8b0c:	d9400917 	ldw	r5,36(sp)
    8b10:	1140762e 	bgeu	r2,r5,8cec <__divdf3+0x23c>
    8b14:	d8800517 	ldw	r2,20(sp)
    8b18:	d8c00a17 	ldw	r3,40(sp)
    8b1c:	01800104 	movi	r6,4
    8b20:	10c4f03a 	xor	r2,r2,r3
    8b24:	d8800515 	stw	r2,20(sp)
    8b28:	21800226 	beq	r4,r6,8b34 <__divdf3+0x84>
    8b2c:	00800084 	movi	r2,2
    8b30:	2080141e 	bne	r4,r2,8b84 <__divdf3+0xd4>
    8b34:	29000926 	beq	r5,r4,8b5c <__divdf3+0xac>
    8b38:	9809883a 	mov	r4,r19
    8b3c:	00095780 	call	9578 <__pack_d>
    8b40:	dfc01217 	ldw	ra,72(sp)
    8b44:	dcc01117 	ldw	r19,68(sp)
    8b48:	dc801017 	ldw	r18,64(sp)
    8b4c:	dc400f17 	ldw	r17,60(sp)
    8b50:	dc000e17 	ldw	r16,56(sp)
    8b54:	dec01304 	addi	sp,sp,76
    8b58:	f800283a 	ret
    8b5c:	01000074 	movhi	r4,1
    8b60:	21346304 	addi	r4,r4,-11892
    8b64:	00095780 	call	9578 <__pack_d>
    8b68:	dfc01217 	ldw	ra,72(sp)
    8b6c:	dcc01117 	ldw	r19,68(sp)
    8b70:	dc801017 	ldw	r18,64(sp)
    8b74:	dc400f17 	ldw	r17,60(sp)
    8b78:	dc000e17 	ldw	r16,56(sp)
    8b7c:	dec01304 	addi	sp,sp,76
    8b80:	f800283a 	ret
    8b84:	29805b26 	beq	r5,r6,8cf4 <__divdf3+0x244>
    8b88:	28802d26 	beq	r5,r2,8c40 <__divdf3+0x190>
    8b8c:	d8c00617 	ldw	r3,24(sp)
    8b90:	d8800b17 	ldw	r2,44(sp)
    8b94:	d9c00817 	ldw	r7,32(sp)
    8b98:	dc400d17 	ldw	r17,52(sp)
    8b9c:	188bc83a 	sub	r5,r3,r2
    8ba0:	d9800717 	ldw	r6,28(sp)
    8ba4:	dc000c17 	ldw	r16,48(sp)
    8ba8:	d9400615 	stw	r5,24(sp)
    8bac:	3c403836 	bltu	r7,r17,8c90 <__divdf3+0x1e0>
    8bb0:	89c03626 	beq	r17,r7,8c8c <__divdf3+0x1dc>
    8bb4:	0015883a 	mov	r10,zero
    8bb8:	001d883a 	mov	r14,zero
    8bbc:	02c40034 	movhi	r11,4096
    8bc0:	001f883a 	mov	r15,zero
    8bc4:	003f883a 	mov	ra,zero
    8bc8:	04800f44 	movi	r18,61
    8bcc:	00000f06 	br	8c0c <__divdf3+0x15c>
    8bd0:	601d883a 	mov	r14,r12
    8bd4:	681f883a 	mov	r15,r13
    8bd8:	400d883a 	mov	r6,r8
    8bdc:	100f883a 	mov	r7,r2
    8be0:	3191883a 	add	r8,r6,r6
    8be4:	5808d07a 	srli	r4,r11,1
    8be8:	4185803a 	cmpltu	r2,r8,r6
    8bec:	39d3883a 	add	r9,r7,r7
    8bf0:	28c6b03a 	or	r3,r5,r3
    8bf4:	1245883a 	add	r2,r2,r9
    8bf8:	1815883a 	mov	r10,r3
    8bfc:	2017883a 	mov	r11,r4
    8c00:	400d883a 	mov	r6,r8
    8c04:	100f883a 	mov	r7,r2
    8c08:	fc801726 	beq	ra,r18,8c68 <__divdf3+0x1b8>
    8c0c:	580a97fa 	slli	r5,r11,31
    8c10:	5006d07a 	srli	r3,r10,1
    8c14:	ffc00044 	addi	ra,ra,1
    8c18:	3c7ff136 	bltu	r7,r17,8be0 <__divdf3+0x130>
    8c1c:	3411c83a 	sub	r8,r6,r16
    8c20:	3205803a 	cmpltu	r2,r6,r8
    8c24:	3c53c83a 	sub	r9,r7,r17
    8c28:	7298b03a 	or	r12,r14,r10
    8c2c:	7adab03a 	or	r13,r15,r11
    8c30:	4885c83a 	sub	r2,r9,r2
    8c34:	89ffe61e 	bne	r17,r7,8bd0 <__divdf3+0x120>
    8c38:	343fe936 	bltu	r6,r16,8be0 <__divdf3+0x130>
    8c3c:	003fe406 	br	8bd0 <__divdf3+0x120>
    8c40:	9809883a 	mov	r4,r19
    8c44:	d9800415 	stw	r6,16(sp)
    8c48:	00095780 	call	9578 <__pack_d>
    8c4c:	dfc01217 	ldw	ra,72(sp)
    8c50:	dcc01117 	ldw	r19,68(sp)
    8c54:	dc801017 	ldw	r18,64(sp)
    8c58:	dc400f17 	ldw	r17,60(sp)
    8c5c:	dc000e17 	ldw	r16,56(sp)
    8c60:	dec01304 	addi	sp,sp,76
    8c64:	f800283a 	ret
    8c68:	00803fc4 	movi	r2,255
    8c6c:	7090703a 	and	r8,r14,r2
    8c70:	00802004 	movi	r2,128
    8c74:	0007883a 	mov	r3,zero
    8c78:	0013883a 	mov	r9,zero
    8c7c:	40800d26 	beq	r8,r2,8cb4 <__divdf3+0x204>
    8c80:	dbc00815 	stw	r15,32(sp)
    8c84:	db800715 	stw	r14,28(sp)
    8c88:	003fab06 	br	8b38 <__divdf3+0x88>
    8c8c:	343fc92e 	bgeu	r6,r16,8bb4 <__divdf3+0x104>
    8c90:	3185883a 	add	r2,r6,r6
    8c94:	1189803a 	cmpltu	r4,r2,r6
    8c98:	39c7883a 	add	r3,r7,r7
    8c9c:	20c9883a 	add	r4,r4,r3
    8ca0:	297fffc4 	addi	r5,r5,-1
    8ca4:	100d883a 	mov	r6,r2
    8ca8:	200f883a 	mov	r7,r4
    8cac:	d9400615 	stw	r5,24(sp)
    8cb0:	003fc006 	br	8bb4 <__divdf3+0x104>
    8cb4:	483ff21e 	bne	r9,zero,8c80 <__divdf3+0x1d0>
    8cb8:	01004004 	movi	r4,256
    8cbc:	7104703a 	and	r2,r14,r4
    8cc0:	10c4b03a 	or	r2,r2,r3
    8cc4:	103fee1e 	bne	r2,zero,8c80 <__divdf3+0x1d0>
    8cc8:	31c4b03a 	or	r2,r6,r7
    8ccc:	103fec26 	beq	r2,zero,8c80 <__divdf3+0x1d0>
    8cd0:	7205883a 	add	r2,r14,r8
    8cd4:	1391803a 	cmpltu	r8,r2,r14
    8cd8:	43d1883a 	add	r8,r8,r15
    8cdc:	013fc004 	movi	r4,-256
    8ce0:	111c703a 	and	r14,r2,r4
    8ce4:	401f883a 	mov	r15,r8
    8ce8:	003fe506 	br	8c80 <__divdf3+0x1d0>
    8cec:	8009883a 	mov	r4,r16
    8cf0:	003f9206 	br	8b3c <__divdf3+0x8c>
    8cf4:	9809883a 	mov	r4,r19
    8cf8:	d8000715 	stw	zero,28(sp)
    8cfc:	d8000815 	stw	zero,32(sp)
    8d00:	d8000615 	stw	zero,24(sp)
    8d04:	003f8d06 	br	8b3c <__divdf3+0x8c>

00008d08 <__eqdf2>:
    8d08:	deffef04 	addi	sp,sp,-68
    8d0c:	dc400f15 	stw	r17,60(sp)
    8d10:	dc400404 	addi	r17,sp,16
    8d14:	2005883a 	mov	r2,r4
    8d18:	2807883a 	mov	r3,r5
    8d1c:	dc000e15 	stw	r16,56(sp)
    8d20:	d809883a 	mov	r4,sp
    8d24:	880b883a 	mov	r5,r17
    8d28:	dc000904 	addi	r16,sp,36
    8d2c:	d8c00115 	stw	r3,4(sp)
    8d30:	d8800015 	stw	r2,0(sp)
    8d34:	d9800215 	stw	r6,8(sp)
    8d38:	dfc01015 	stw	ra,64(sp)
    8d3c:	d9c00315 	stw	r7,12(sp)
    8d40:	000988c0 	call	988c <__unpack_d>
    8d44:	d9000204 	addi	r4,sp,8
    8d48:	800b883a 	mov	r5,r16
    8d4c:	000988c0 	call	988c <__unpack_d>
    8d50:	d8800417 	ldw	r2,16(sp)
    8d54:	00c00044 	movi	r3,1
    8d58:	180d883a 	mov	r6,r3
    8d5c:	1880062e 	bgeu	r3,r2,8d78 <__eqdf2+0x70>
    8d60:	d8800917 	ldw	r2,36(sp)
    8d64:	8809883a 	mov	r4,r17
    8d68:	800b883a 	mov	r5,r16
    8d6c:	1880022e 	bgeu	r3,r2,8d78 <__eqdf2+0x70>
    8d70:	00099c40 	call	99c4 <__fpcmp_parts_d>
    8d74:	100d883a 	mov	r6,r2
    8d78:	3005883a 	mov	r2,r6
    8d7c:	dfc01017 	ldw	ra,64(sp)
    8d80:	dc400f17 	ldw	r17,60(sp)
    8d84:	dc000e17 	ldw	r16,56(sp)
    8d88:	dec01104 	addi	sp,sp,68
    8d8c:	f800283a 	ret

00008d90 <__nedf2>:
    8d90:	deffef04 	addi	sp,sp,-68
    8d94:	dc400f15 	stw	r17,60(sp)
    8d98:	dc400404 	addi	r17,sp,16
    8d9c:	2005883a 	mov	r2,r4
    8da0:	2807883a 	mov	r3,r5
    8da4:	dc000e15 	stw	r16,56(sp)
    8da8:	d809883a 	mov	r4,sp
    8dac:	880b883a 	mov	r5,r17
    8db0:	dc000904 	addi	r16,sp,36
    8db4:	d8c00115 	stw	r3,4(sp)
    8db8:	d8800015 	stw	r2,0(sp)
    8dbc:	d9800215 	stw	r6,8(sp)
    8dc0:	dfc01015 	stw	ra,64(sp)
    8dc4:	d9c00315 	stw	r7,12(sp)
    8dc8:	000988c0 	call	988c <__unpack_d>
    8dcc:	d9000204 	addi	r4,sp,8
    8dd0:	800b883a 	mov	r5,r16
    8dd4:	000988c0 	call	988c <__unpack_d>
    8dd8:	d8800417 	ldw	r2,16(sp)
    8ddc:	00c00044 	movi	r3,1
    8de0:	180d883a 	mov	r6,r3
    8de4:	1880062e 	bgeu	r3,r2,8e00 <__nedf2+0x70>
    8de8:	d8800917 	ldw	r2,36(sp)
    8dec:	8809883a 	mov	r4,r17
    8df0:	800b883a 	mov	r5,r16
    8df4:	1880022e 	bgeu	r3,r2,8e00 <__nedf2+0x70>
    8df8:	00099c40 	call	99c4 <__fpcmp_parts_d>
    8dfc:	100d883a 	mov	r6,r2
    8e00:	3005883a 	mov	r2,r6
    8e04:	dfc01017 	ldw	ra,64(sp)
    8e08:	dc400f17 	ldw	r17,60(sp)
    8e0c:	dc000e17 	ldw	r16,56(sp)
    8e10:	dec01104 	addi	sp,sp,68
    8e14:	f800283a 	ret

00008e18 <__gtdf2>:
    8e18:	deffef04 	addi	sp,sp,-68
    8e1c:	dc400f15 	stw	r17,60(sp)
    8e20:	dc400404 	addi	r17,sp,16
    8e24:	2005883a 	mov	r2,r4
    8e28:	2807883a 	mov	r3,r5
    8e2c:	dc000e15 	stw	r16,56(sp)
    8e30:	d809883a 	mov	r4,sp
    8e34:	880b883a 	mov	r5,r17
    8e38:	dc000904 	addi	r16,sp,36
    8e3c:	d8c00115 	stw	r3,4(sp)
    8e40:	d8800015 	stw	r2,0(sp)
    8e44:	d9800215 	stw	r6,8(sp)
    8e48:	dfc01015 	stw	ra,64(sp)
    8e4c:	d9c00315 	stw	r7,12(sp)
    8e50:	000988c0 	call	988c <__unpack_d>
    8e54:	d9000204 	addi	r4,sp,8
    8e58:	800b883a 	mov	r5,r16
    8e5c:	000988c0 	call	988c <__unpack_d>
    8e60:	d8800417 	ldw	r2,16(sp)
    8e64:	00c00044 	movi	r3,1
    8e68:	01bfffc4 	movi	r6,-1
    8e6c:	1880062e 	bgeu	r3,r2,8e88 <__gtdf2+0x70>
    8e70:	d8800917 	ldw	r2,36(sp)
    8e74:	8809883a 	mov	r4,r17
    8e78:	800b883a 	mov	r5,r16
    8e7c:	1880022e 	bgeu	r3,r2,8e88 <__gtdf2+0x70>
    8e80:	00099c40 	call	99c4 <__fpcmp_parts_d>
    8e84:	100d883a 	mov	r6,r2
    8e88:	3005883a 	mov	r2,r6
    8e8c:	dfc01017 	ldw	ra,64(sp)
    8e90:	dc400f17 	ldw	r17,60(sp)
    8e94:	dc000e17 	ldw	r16,56(sp)
    8e98:	dec01104 	addi	sp,sp,68
    8e9c:	f800283a 	ret

00008ea0 <__gedf2>:
    8ea0:	deffef04 	addi	sp,sp,-68
    8ea4:	dc400f15 	stw	r17,60(sp)
    8ea8:	dc400404 	addi	r17,sp,16
    8eac:	2005883a 	mov	r2,r4
    8eb0:	2807883a 	mov	r3,r5
    8eb4:	dc000e15 	stw	r16,56(sp)
    8eb8:	d809883a 	mov	r4,sp
    8ebc:	880b883a 	mov	r5,r17
    8ec0:	dc000904 	addi	r16,sp,36
    8ec4:	d8c00115 	stw	r3,4(sp)
    8ec8:	d8800015 	stw	r2,0(sp)
    8ecc:	d9800215 	stw	r6,8(sp)
    8ed0:	dfc01015 	stw	ra,64(sp)
    8ed4:	d9c00315 	stw	r7,12(sp)
    8ed8:	000988c0 	call	988c <__unpack_d>
    8edc:	d9000204 	addi	r4,sp,8
    8ee0:	800b883a 	mov	r5,r16
    8ee4:	000988c0 	call	988c <__unpack_d>
    8ee8:	d8800417 	ldw	r2,16(sp)
    8eec:	00c00044 	movi	r3,1
    8ef0:	01bfffc4 	movi	r6,-1
    8ef4:	1880062e 	bgeu	r3,r2,8f10 <__gedf2+0x70>
    8ef8:	d8800917 	ldw	r2,36(sp)
    8efc:	8809883a 	mov	r4,r17
    8f00:	800b883a 	mov	r5,r16
    8f04:	1880022e 	bgeu	r3,r2,8f10 <__gedf2+0x70>
    8f08:	00099c40 	call	99c4 <__fpcmp_parts_d>
    8f0c:	100d883a 	mov	r6,r2
    8f10:	3005883a 	mov	r2,r6
    8f14:	dfc01017 	ldw	ra,64(sp)
    8f18:	dc400f17 	ldw	r17,60(sp)
    8f1c:	dc000e17 	ldw	r16,56(sp)
    8f20:	dec01104 	addi	sp,sp,68
    8f24:	f800283a 	ret

00008f28 <__ltdf2>:
    8f28:	deffef04 	addi	sp,sp,-68
    8f2c:	dc400f15 	stw	r17,60(sp)
    8f30:	dc400404 	addi	r17,sp,16
    8f34:	2005883a 	mov	r2,r4
    8f38:	2807883a 	mov	r3,r5
    8f3c:	dc000e15 	stw	r16,56(sp)
    8f40:	d809883a 	mov	r4,sp
    8f44:	880b883a 	mov	r5,r17
    8f48:	dc000904 	addi	r16,sp,36
    8f4c:	d8c00115 	stw	r3,4(sp)
    8f50:	d8800015 	stw	r2,0(sp)
    8f54:	d9800215 	stw	r6,8(sp)
    8f58:	dfc01015 	stw	ra,64(sp)
    8f5c:	d9c00315 	stw	r7,12(sp)
    8f60:	000988c0 	call	988c <__unpack_d>
    8f64:	d9000204 	addi	r4,sp,8
    8f68:	800b883a 	mov	r5,r16
    8f6c:	000988c0 	call	988c <__unpack_d>
    8f70:	d8800417 	ldw	r2,16(sp)
    8f74:	00c00044 	movi	r3,1
    8f78:	180d883a 	mov	r6,r3
    8f7c:	1880062e 	bgeu	r3,r2,8f98 <__ltdf2+0x70>
    8f80:	d8800917 	ldw	r2,36(sp)
    8f84:	8809883a 	mov	r4,r17
    8f88:	800b883a 	mov	r5,r16
    8f8c:	1880022e 	bgeu	r3,r2,8f98 <__ltdf2+0x70>
    8f90:	00099c40 	call	99c4 <__fpcmp_parts_d>
    8f94:	100d883a 	mov	r6,r2
    8f98:	3005883a 	mov	r2,r6
    8f9c:	dfc01017 	ldw	ra,64(sp)
    8fa0:	dc400f17 	ldw	r17,60(sp)
    8fa4:	dc000e17 	ldw	r16,56(sp)
    8fa8:	dec01104 	addi	sp,sp,68
    8fac:	f800283a 	ret

00008fb0 <__floatsidf>:
    8fb0:	2006d7fa 	srli	r3,r4,31
    8fb4:	defff604 	addi	sp,sp,-40
    8fb8:	008000c4 	movi	r2,3
    8fbc:	dfc00915 	stw	ra,36(sp)
    8fc0:	dcc00815 	stw	r19,32(sp)
    8fc4:	dc800715 	stw	r18,28(sp)
    8fc8:	dc400615 	stw	r17,24(sp)
    8fcc:	dc000515 	stw	r16,20(sp)
    8fd0:	d8800015 	stw	r2,0(sp)
    8fd4:	d8c00115 	stw	r3,4(sp)
    8fd8:	20000f1e 	bne	r4,zero,9018 <__floatsidf+0x68>
    8fdc:	00800084 	movi	r2,2
    8fe0:	d8800015 	stw	r2,0(sp)
    8fe4:	d809883a 	mov	r4,sp
    8fe8:	00095780 	call	9578 <__pack_d>
    8fec:	1009883a 	mov	r4,r2
    8ff0:	180b883a 	mov	r5,r3
    8ff4:	2005883a 	mov	r2,r4
    8ff8:	2807883a 	mov	r3,r5
    8ffc:	dfc00917 	ldw	ra,36(sp)
    9000:	dcc00817 	ldw	r19,32(sp)
    9004:	dc800717 	ldw	r18,28(sp)
    9008:	dc400617 	ldw	r17,24(sp)
    900c:	dc000517 	ldw	r16,20(sp)
    9010:	dec00a04 	addi	sp,sp,40
    9014:	f800283a 	ret
    9018:	00800f04 	movi	r2,60
    901c:	1807003a 	cmpeq	r3,r3,zero
    9020:	d8800215 	stw	r2,8(sp)
    9024:	18001126 	beq	r3,zero,906c <__floatsidf+0xbc>
    9028:	0027883a 	mov	r19,zero
    902c:	2025883a 	mov	r18,r4
    9030:	d9000315 	stw	r4,12(sp)
    9034:	dcc00415 	stw	r19,16(sp)
    9038:	00094f80 	call	94f8 <__clzsi2>
    903c:	11000744 	addi	r4,r2,29
    9040:	013fe80e 	bge	zero,r4,8fe4 <__floatsidf+0x34>
    9044:	10bfff44 	addi	r2,r2,-3
    9048:	10000c16 	blt	r2,zero,907c <__floatsidf+0xcc>
    904c:	90a2983a 	sll	r17,r18,r2
    9050:	0021883a 	mov	r16,zero
    9054:	d8800217 	ldw	r2,8(sp)
    9058:	dc400415 	stw	r17,16(sp)
    905c:	dc000315 	stw	r16,12(sp)
    9060:	1105c83a 	sub	r2,r2,r4
    9064:	d8800215 	stw	r2,8(sp)
    9068:	003fde06 	br	8fe4 <__floatsidf+0x34>
    906c:	00a00034 	movhi	r2,32768
    9070:	20800a26 	beq	r4,r2,909c <__floatsidf+0xec>
    9074:	0109c83a 	sub	r4,zero,r4
    9078:	003feb06 	br	9028 <__floatsidf+0x78>
    907c:	9006d07a 	srli	r3,r18,1
    9080:	008007c4 	movi	r2,31
    9084:	1105c83a 	sub	r2,r2,r4
    9088:	1886d83a 	srl	r3,r3,r2
    908c:	9922983a 	sll	r17,r19,r4
    9090:	9120983a 	sll	r16,r18,r4
    9094:	1c62b03a 	or	r17,r3,r17
    9098:	003fee06 	br	9054 <__floatsidf+0xa4>
    909c:	0009883a 	mov	r4,zero
    90a0:	01707834 	movhi	r5,49632
    90a4:	003fd306 	br	8ff4 <__floatsidf+0x44>

000090a8 <__fixdfsi>:
    90a8:	defff804 	addi	sp,sp,-32
    90ac:	2005883a 	mov	r2,r4
    90b0:	2807883a 	mov	r3,r5
    90b4:	d809883a 	mov	r4,sp
    90b8:	d9400204 	addi	r5,sp,8
    90bc:	d8c00115 	stw	r3,4(sp)
    90c0:	d8800015 	stw	r2,0(sp)
    90c4:	dfc00715 	stw	ra,28(sp)
    90c8:	000988c0 	call	988c <__unpack_d>
    90cc:	d8c00217 	ldw	r3,8(sp)
    90d0:	00800084 	movi	r2,2
    90d4:	1880051e 	bne	r3,r2,90ec <__fixdfsi+0x44>
    90d8:	0007883a 	mov	r3,zero
    90dc:	1805883a 	mov	r2,r3
    90e0:	dfc00717 	ldw	ra,28(sp)
    90e4:	dec00804 	addi	sp,sp,32
    90e8:	f800283a 	ret
    90ec:	00800044 	movi	r2,1
    90f0:	10fff92e 	bgeu	r2,r3,90d8 <__fixdfsi+0x30>
    90f4:	00800104 	movi	r2,4
    90f8:	18800426 	beq	r3,r2,910c <__fixdfsi+0x64>
    90fc:	d8c00417 	ldw	r3,16(sp)
    9100:	183ff516 	blt	r3,zero,90d8 <__fixdfsi+0x30>
    9104:	00800784 	movi	r2,30
    9108:	10c0080e 	bge	r2,r3,912c <__fixdfsi+0x84>
    910c:	d8800317 	ldw	r2,12(sp)
    9110:	1000121e 	bne	r2,zero,915c <__fixdfsi+0xb4>
    9114:	00e00034 	movhi	r3,32768
    9118:	18ffffc4 	addi	r3,r3,-1
    911c:	1805883a 	mov	r2,r3
    9120:	dfc00717 	ldw	ra,28(sp)
    9124:	dec00804 	addi	sp,sp,32
    9128:	f800283a 	ret
    912c:	00800f04 	movi	r2,60
    9130:	10d1c83a 	sub	r8,r2,r3
    9134:	40bff804 	addi	r2,r8,-32
    9138:	d9800517 	ldw	r6,20(sp)
    913c:	d9c00617 	ldw	r7,24(sp)
    9140:	10000816 	blt	r2,zero,9164 <__fixdfsi+0xbc>
    9144:	3888d83a 	srl	r4,r7,r2
    9148:	d8800317 	ldw	r2,12(sp)
    914c:	2007883a 	mov	r3,r4
    9150:	103fe226 	beq	r2,zero,90dc <__fixdfsi+0x34>
    9154:	0107c83a 	sub	r3,zero,r4
    9158:	003fe006 	br	90dc <__fixdfsi+0x34>
    915c:	00e00034 	movhi	r3,32768
    9160:	003fde06 	br	90dc <__fixdfsi+0x34>
    9164:	39c7883a 	add	r3,r7,r7
    9168:	008007c4 	movi	r2,31
    916c:	1205c83a 	sub	r2,r2,r8
    9170:	1886983a 	sll	r3,r3,r2
    9174:	3208d83a 	srl	r4,r6,r8
    9178:	1908b03a 	or	r4,r3,r4
    917c:	003ff206 	br	9148 <__fixdfsi+0xa0>

00009180 <__floatunsidf>:
    9180:	defff204 	addi	sp,sp,-56
    9184:	dfc00d15 	stw	ra,52(sp)
    9188:	ddc00c15 	stw	r23,48(sp)
    918c:	dd800b15 	stw	r22,44(sp)
    9190:	dd400a15 	stw	r21,40(sp)
    9194:	dd000915 	stw	r20,36(sp)
    9198:	dcc00815 	stw	r19,32(sp)
    919c:	dc800715 	stw	r18,28(sp)
    91a0:	dc400615 	stw	r17,24(sp)
    91a4:	dc000515 	stw	r16,20(sp)
    91a8:	d8000115 	stw	zero,4(sp)
    91ac:	20000f1e 	bne	r4,zero,91ec <__floatunsidf+0x6c>
    91b0:	00800084 	movi	r2,2
    91b4:	d8800015 	stw	r2,0(sp)
    91b8:	d809883a 	mov	r4,sp
    91bc:	00095780 	call	9578 <__pack_d>
    91c0:	dfc00d17 	ldw	ra,52(sp)
    91c4:	ddc00c17 	ldw	r23,48(sp)
    91c8:	dd800b17 	ldw	r22,44(sp)
    91cc:	dd400a17 	ldw	r21,40(sp)
    91d0:	dd000917 	ldw	r20,36(sp)
    91d4:	dcc00817 	ldw	r19,32(sp)
    91d8:	dc800717 	ldw	r18,28(sp)
    91dc:	dc400617 	ldw	r17,24(sp)
    91e0:	dc000517 	ldw	r16,20(sp)
    91e4:	dec00e04 	addi	sp,sp,56
    91e8:	f800283a 	ret
    91ec:	008000c4 	movi	r2,3
    91f0:	00c00f04 	movi	r3,60
    91f4:	002f883a 	mov	r23,zero
    91f8:	202d883a 	mov	r22,r4
    91fc:	d8800015 	stw	r2,0(sp)
    9200:	d8c00215 	stw	r3,8(sp)
    9204:	d9000315 	stw	r4,12(sp)
    9208:	ddc00415 	stw	r23,16(sp)
    920c:	00094f80 	call	94f8 <__clzsi2>
    9210:	12400744 	addi	r9,r2,29
    9214:	48000b16 	blt	r9,zero,9244 <__floatunsidf+0xc4>
    9218:	483fe726 	beq	r9,zero,91b8 <__floatunsidf+0x38>
    921c:	10bfff44 	addi	r2,r2,-3
    9220:	10002e16 	blt	r2,zero,92dc <__floatunsidf+0x15c>
    9224:	b0a2983a 	sll	r17,r22,r2
    9228:	0021883a 	mov	r16,zero
    922c:	d8800217 	ldw	r2,8(sp)
    9230:	dc400415 	stw	r17,16(sp)
    9234:	dc000315 	stw	r16,12(sp)
    9238:	1245c83a 	sub	r2,r2,r9
    923c:	d8800215 	stw	r2,8(sp)
    9240:	003fdd06 	br	91b8 <__floatunsidf+0x38>
    9244:	0255c83a 	sub	r10,zero,r9
    9248:	51bff804 	addi	r6,r10,-32
    924c:	30001b16 	blt	r6,zero,92bc <__floatunsidf+0x13c>
    9250:	b9a8d83a 	srl	r20,r23,r6
    9254:	002b883a 	mov	r21,zero
    9258:	000f883a 	mov	r7,zero
    925c:	01000044 	movi	r4,1
    9260:	0011883a 	mov	r8,zero
    9264:	30002516 	blt	r6,zero,92fc <__floatunsidf+0x17c>
    9268:	21a6983a 	sll	r19,r4,r6
    926c:	0025883a 	mov	r18,zero
    9270:	00bfffc4 	movi	r2,-1
    9274:	9089883a 	add	r4,r18,r2
    9278:	988b883a 	add	r5,r19,r2
    927c:	248d803a 	cmpltu	r6,r4,r18
    9280:	314b883a 	add	r5,r6,r5
    9284:	b104703a 	and	r2,r22,r4
    9288:	b946703a 	and	r3,r23,r5
    928c:	10c4b03a 	or	r2,r2,r3
    9290:	10000226 	beq	r2,zero,929c <__floatunsidf+0x11c>
    9294:	01c00044 	movi	r7,1
    9298:	0011883a 	mov	r8,zero
    929c:	d9000217 	ldw	r4,8(sp)
    92a0:	a1c4b03a 	or	r2,r20,r7
    92a4:	aa06b03a 	or	r3,r21,r8
    92a8:	2249c83a 	sub	r4,r4,r9
    92ac:	d8c00415 	stw	r3,16(sp)
    92b0:	d9000215 	stw	r4,8(sp)
    92b4:	d8800315 	stw	r2,12(sp)
    92b8:	003fbf06 	br	91b8 <__floatunsidf+0x38>
    92bc:	bdc7883a 	add	r3,r23,r23
    92c0:	008007c4 	movi	r2,31
    92c4:	1285c83a 	sub	r2,r2,r10
    92c8:	1886983a 	sll	r3,r3,r2
    92cc:	b2a8d83a 	srl	r20,r22,r10
    92d0:	baaad83a 	srl	r21,r23,r10
    92d4:	1d28b03a 	or	r20,r3,r20
    92d8:	003fdf06 	br	9258 <__floatunsidf+0xd8>
    92dc:	b006d07a 	srli	r3,r22,1
    92e0:	008007c4 	movi	r2,31
    92e4:	1245c83a 	sub	r2,r2,r9
    92e8:	1886d83a 	srl	r3,r3,r2
    92ec:	ba62983a 	sll	r17,r23,r9
    92f0:	b260983a 	sll	r16,r22,r9
    92f4:	1c62b03a 	or	r17,r3,r17
    92f8:	003fcc06 	br	922c <__floatunsidf+0xac>
    92fc:	2006d07a 	srli	r3,r4,1
    9300:	008007c4 	movi	r2,31
    9304:	1285c83a 	sub	r2,r2,r10
    9308:	18a6d83a 	srl	r19,r3,r2
    930c:	22a4983a 	sll	r18,r4,r10
    9310:	003fd706 	br	9270 <__floatunsidf+0xf0>

00009314 <udivmodsi4>:
    9314:	29001b2e 	bgeu	r5,r4,9384 <udivmodsi4+0x70>
    9318:	28001a16 	blt	r5,zero,9384 <udivmodsi4+0x70>
    931c:	00800044 	movi	r2,1
    9320:	0007883a 	mov	r3,zero
    9324:	01c007c4 	movi	r7,31
    9328:	00000306 	br	9338 <udivmodsi4+0x24>
    932c:	19c01326 	beq	r3,r7,937c <udivmodsi4+0x68>
    9330:	18c00044 	addi	r3,r3,1
    9334:	28000416 	blt	r5,zero,9348 <udivmodsi4+0x34>
    9338:	294b883a 	add	r5,r5,r5
    933c:	1085883a 	add	r2,r2,r2
    9340:	293ffa36 	bltu	r5,r4,932c <udivmodsi4+0x18>
    9344:	10000d26 	beq	r2,zero,937c <udivmodsi4+0x68>
    9348:	0007883a 	mov	r3,zero
    934c:	21400236 	bltu	r4,r5,9358 <udivmodsi4+0x44>
    9350:	2149c83a 	sub	r4,r4,r5
    9354:	1886b03a 	or	r3,r3,r2
    9358:	1004d07a 	srli	r2,r2,1
    935c:	280ad07a 	srli	r5,r5,1
    9360:	103ffa1e 	bne	r2,zero,934c <udivmodsi4+0x38>
    9364:	30000226 	beq	r6,zero,9370 <udivmodsi4+0x5c>
    9368:	2005883a 	mov	r2,r4
    936c:	f800283a 	ret
    9370:	1809883a 	mov	r4,r3
    9374:	2005883a 	mov	r2,r4
    9378:	f800283a 	ret
    937c:	0007883a 	mov	r3,zero
    9380:	003ff806 	br	9364 <udivmodsi4+0x50>
    9384:	00800044 	movi	r2,1
    9388:	0007883a 	mov	r3,zero
    938c:	003fef06 	br	934c <udivmodsi4+0x38>

00009390 <__divsi3>:
    9390:	defffe04 	addi	sp,sp,-8
    9394:	dc000015 	stw	r16,0(sp)
    9398:	dfc00115 	stw	ra,4(sp)
    939c:	0021883a 	mov	r16,zero
    93a0:	20000c16 	blt	r4,zero,93d4 <__divsi3+0x44>
    93a4:	000d883a 	mov	r6,zero
    93a8:	28000e16 	blt	r5,zero,93e4 <__divsi3+0x54>
    93ac:	00093140 	call	9314 <udivmodsi4>
    93b0:	1007883a 	mov	r3,r2
    93b4:	8005003a 	cmpeq	r2,r16,zero
    93b8:	1000011e 	bne	r2,zero,93c0 <__divsi3+0x30>
    93bc:	00c7c83a 	sub	r3,zero,r3
    93c0:	1805883a 	mov	r2,r3
    93c4:	dfc00117 	ldw	ra,4(sp)
    93c8:	dc000017 	ldw	r16,0(sp)
    93cc:	dec00204 	addi	sp,sp,8
    93d0:	f800283a 	ret
    93d4:	0109c83a 	sub	r4,zero,r4
    93d8:	04000044 	movi	r16,1
    93dc:	000d883a 	mov	r6,zero
    93e0:	283ff20e 	bge	r5,zero,93ac <__divsi3+0x1c>
    93e4:	014bc83a 	sub	r5,zero,r5
    93e8:	8021003a 	cmpeq	r16,r16,zero
    93ec:	003fef06 	br	93ac <__divsi3+0x1c>

000093f0 <__modsi3>:
    93f0:	deffff04 	addi	sp,sp,-4
    93f4:	dfc00015 	stw	ra,0(sp)
    93f8:	01800044 	movi	r6,1
    93fc:	2807883a 	mov	r3,r5
    9400:	20000416 	blt	r4,zero,9414 <__modsi3+0x24>
    9404:	28000c16 	blt	r5,zero,9438 <__modsi3+0x48>
    9408:	dfc00017 	ldw	ra,0(sp)
    940c:	dec00104 	addi	sp,sp,4
    9410:	00093141 	jmpi	9314 <udivmodsi4>
    9414:	0109c83a 	sub	r4,zero,r4
    9418:	28000b16 	blt	r5,zero,9448 <__modsi3+0x58>
    941c:	180b883a 	mov	r5,r3
    9420:	01800044 	movi	r6,1
    9424:	00093140 	call	9314 <udivmodsi4>
    9428:	0085c83a 	sub	r2,zero,r2
    942c:	dfc00017 	ldw	ra,0(sp)
    9430:	dec00104 	addi	sp,sp,4
    9434:	f800283a 	ret
    9438:	014bc83a 	sub	r5,zero,r5
    943c:	dfc00017 	ldw	ra,0(sp)
    9440:	dec00104 	addi	sp,sp,4
    9444:	00093141 	jmpi	9314 <udivmodsi4>
    9448:	0147c83a 	sub	r3,zero,r5
    944c:	003ff306 	br	941c <__modsi3+0x2c>

00009450 <__udivsi3>:
    9450:	000d883a 	mov	r6,zero
    9454:	00093141 	jmpi	9314 <udivmodsi4>

00009458 <__umodsi3>:
    9458:	01800044 	movi	r6,1
    945c:	00093141 	jmpi	9314 <udivmodsi4>

00009460 <__muldi3>:
    9460:	2011883a 	mov	r8,r4
    9464:	427fffcc 	andi	r9,r8,65535
    9468:	4018d43a 	srli	r12,r8,16
    946c:	32bfffcc 	andi	r10,r6,65535
    9470:	3016d43a 	srli	r11,r6,16
    9474:	4a85383a 	mul	r2,r9,r10
    9478:	6295383a 	mul	r10,r12,r10
    947c:	4ad3383a 	mul	r9,r9,r11
    9480:	113fffcc 	andi	r4,r2,65535
    9484:	1004d43a 	srli	r2,r2,16
    9488:	4a93883a 	add	r9,r9,r10
    948c:	3807883a 	mov	r3,r7
    9490:	1245883a 	add	r2,r2,r9
    9494:	280f883a 	mov	r7,r5
    9498:	180b883a 	mov	r5,r3
    949c:	1006943a 	slli	r3,r2,16
    94a0:	defffd04 	addi	sp,sp,-12
    94a4:	dc800215 	stw	r18,8(sp)
    94a8:	1907883a 	add	r3,r3,r4
    94ac:	dc400115 	stw	r17,4(sp)
    94b0:	dc000015 	stw	r16,0(sp)
    94b4:	4165383a 	mul	r18,r8,r5
    94b8:	31e3383a 	mul	r17,r6,r7
    94bc:	1012d43a 	srli	r9,r2,16
    94c0:	62d9383a 	mul	r12,r12,r11
    94c4:	181f883a 	mov	r15,r3
    94c8:	1280022e 	bgeu	r2,r10,94d4 <__muldi3+0x74>
    94cc:	00800074 	movhi	r2,1
    94d0:	6099883a 	add	r12,r12,r2
    94d4:	624d883a 	add	r6,r12,r9
    94d8:	9187883a 	add	r3,r18,r6
    94dc:	88c7883a 	add	r3,r17,r3
    94e0:	7805883a 	mov	r2,r15
    94e4:	dc800217 	ldw	r18,8(sp)
    94e8:	dc400117 	ldw	r17,4(sp)
    94ec:	dc000017 	ldw	r16,0(sp)
    94f0:	dec00304 	addi	sp,sp,12
    94f4:	f800283a 	ret

000094f8 <__clzsi2>:
    94f8:	00bfffd4 	movui	r2,65535
    94fc:	11000e36 	bltu	r2,r4,9538 <__clzsi2+0x40>
    9500:	00803fc4 	movi	r2,255
    9504:	01400204 	movi	r5,8
    9508:	0007883a 	mov	r3,zero
    950c:	11001036 	bltu	r2,r4,9550 <__clzsi2+0x58>
    9510:	000b883a 	mov	r5,zero
    9514:	20c6d83a 	srl	r3,r4,r3
    9518:	00800074 	movhi	r2,1
    951c:	10b46804 	addi	r2,r2,-11872
    9520:	1887883a 	add	r3,r3,r2
    9524:	18800003 	ldbu	r2,0(r3)
    9528:	00c00804 	movi	r3,32
    952c:	2885883a 	add	r2,r5,r2
    9530:	1885c83a 	sub	r2,r3,r2
    9534:	f800283a 	ret
    9538:	01400404 	movi	r5,16
    953c:	00804034 	movhi	r2,256
    9540:	10bfffc4 	addi	r2,r2,-1
    9544:	2807883a 	mov	r3,r5
    9548:	113ff22e 	bgeu	r2,r4,9514 <__clzsi2+0x1c>
    954c:	01400604 	movi	r5,24
    9550:	2807883a 	mov	r3,r5
    9554:	20c6d83a 	srl	r3,r4,r3
    9558:	00800074 	movhi	r2,1
    955c:	10b46804 	addi	r2,r2,-11872
    9560:	1887883a 	add	r3,r3,r2
    9564:	18800003 	ldbu	r2,0(r3)
    9568:	00c00804 	movi	r3,32
    956c:	2885883a 	add	r2,r5,r2
    9570:	1885c83a 	sub	r2,r3,r2
    9574:	f800283a 	ret

00009578 <__pack_d>:
    9578:	20c00017 	ldw	r3,0(r4)
    957c:	defffd04 	addi	sp,sp,-12
    9580:	dc000015 	stw	r16,0(sp)
    9584:	dc800215 	stw	r18,8(sp)
    9588:	dc400115 	stw	r17,4(sp)
    958c:	00800044 	movi	r2,1
    9590:	22000317 	ldw	r8,12(r4)
    9594:	001f883a 	mov	r15,zero
    9598:	22400417 	ldw	r9,16(r4)
    959c:	24000117 	ldw	r16,4(r4)
    95a0:	10c0552e 	bgeu	r2,r3,96f8 <__pack_d+0x180>
    95a4:	00800104 	movi	r2,4
    95a8:	18804f26 	beq	r3,r2,96e8 <__pack_d+0x170>
    95ac:	00800084 	movi	r2,2
    95b0:	18800226 	beq	r3,r2,95bc <__pack_d+0x44>
    95b4:	4244b03a 	or	r2,r8,r9
    95b8:	10001a1e 	bne	r2,zero,9624 <__pack_d+0xac>
    95bc:	000d883a 	mov	r6,zero
    95c0:	000f883a 	mov	r7,zero
    95c4:	0011883a 	mov	r8,zero
    95c8:	00800434 	movhi	r2,16
    95cc:	10bfffc4 	addi	r2,r2,-1
    95d0:	301d883a 	mov	r14,r6
    95d4:	3884703a 	and	r2,r7,r2
    95d8:	400a953a 	slli	r5,r8,20
    95dc:	79bffc2c 	andhi	r6,r15,65520
    95e0:	308cb03a 	or	r6,r6,r2
    95e4:	00e00434 	movhi	r3,32784
    95e8:	18ffffc4 	addi	r3,r3,-1
    95ec:	800497fa 	slli	r2,r16,31
    95f0:	30c6703a 	and	r3,r6,r3
    95f4:	1946b03a 	or	r3,r3,r5
    95f8:	01600034 	movhi	r5,32768
    95fc:	297fffc4 	addi	r5,r5,-1
    9600:	194a703a 	and	r5,r3,r5
    9604:	288ab03a 	or	r5,r5,r2
    9608:	2807883a 	mov	r3,r5
    960c:	7005883a 	mov	r2,r14
    9610:	dc800217 	ldw	r18,8(sp)
    9614:	dc400117 	ldw	r17,4(sp)
    9618:	dc000017 	ldw	r16,0(sp)
    961c:	dec00304 	addi	sp,sp,12
    9620:	f800283a 	ret
    9624:	21000217 	ldw	r4,8(r4)
    9628:	00bf0084 	movi	r2,-1022
    962c:	20803f16 	blt	r4,r2,972c <__pack_d+0x1b4>
    9630:	0080ffc4 	movi	r2,1023
    9634:	11002c16 	blt	r2,r4,96e8 <__pack_d+0x170>
    9638:	00803fc4 	movi	r2,255
    963c:	408c703a 	and	r6,r8,r2
    9640:	00802004 	movi	r2,128
    9644:	0007883a 	mov	r3,zero
    9648:	000f883a 	mov	r7,zero
    964c:	2280ffc4 	addi	r10,r4,1023
    9650:	30801e26 	beq	r6,r2,96cc <__pack_d+0x154>
    9654:	00801fc4 	movi	r2,127
    9658:	4089883a 	add	r4,r8,r2
    965c:	220d803a 	cmpltu	r6,r4,r8
    9660:	324d883a 	add	r6,r6,r9
    9664:	2011883a 	mov	r8,r4
    9668:	3013883a 	mov	r9,r6
    966c:	00880034 	movhi	r2,8192
    9670:	10bfffc4 	addi	r2,r2,-1
    9674:	12400d36 	bltu	r2,r9,96ac <__pack_d+0x134>
    9678:	4804963a 	slli	r2,r9,24
    967c:	400cd23a 	srli	r6,r8,8
    9680:	480ed23a 	srli	r7,r9,8
    9684:	013fffc4 	movi	r4,-1
    9688:	118cb03a 	or	r6,r2,r6
    968c:	01400434 	movhi	r5,16
    9690:	297fffc4 	addi	r5,r5,-1
    9694:	3104703a 	and	r2,r6,r4
    9698:	3946703a 	and	r3,r7,r5
    969c:	5201ffcc 	andi	r8,r10,2047
    96a0:	100d883a 	mov	r6,r2
    96a4:	180f883a 	mov	r7,r3
    96a8:	003fc706 	br	95c8 <__pack_d+0x50>
    96ac:	480897fa 	slli	r4,r9,31
    96b0:	4004d07a 	srli	r2,r8,1
    96b4:	4806d07a 	srli	r3,r9,1
    96b8:	52800044 	addi	r10,r10,1
    96bc:	2084b03a 	or	r2,r4,r2
    96c0:	1011883a 	mov	r8,r2
    96c4:	1813883a 	mov	r9,r3
    96c8:	003feb06 	br	9678 <__pack_d+0x100>
    96cc:	383fe11e 	bne	r7,zero,9654 <__pack_d+0xdc>
    96d0:	01004004 	movi	r4,256
    96d4:	4104703a 	and	r2,r8,r4
    96d8:	10c4b03a 	or	r2,r2,r3
    96dc:	103fe326 	beq	r2,zero,966c <__pack_d+0xf4>
    96e0:	3005883a 	mov	r2,r6
    96e4:	003fdc06 	br	9658 <__pack_d+0xe0>
    96e8:	000d883a 	mov	r6,zero
    96ec:	000f883a 	mov	r7,zero
    96f0:	0201ffc4 	movi	r8,2047
    96f4:	003fb406 	br	95c8 <__pack_d+0x50>
    96f8:	0005883a 	mov	r2,zero
    96fc:	00c00234 	movhi	r3,8
    9700:	408cb03a 	or	r6,r8,r2
    9704:	48ceb03a 	or	r7,r9,r3
    9708:	013fffc4 	movi	r4,-1
    970c:	01400434 	movhi	r5,16
    9710:	297fffc4 	addi	r5,r5,-1
    9714:	3104703a 	and	r2,r6,r4
    9718:	3946703a 	and	r3,r7,r5
    971c:	100d883a 	mov	r6,r2
    9720:	180f883a 	mov	r7,r3
    9724:	0201ffc4 	movi	r8,2047
    9728:	003fa706 	br	95c8 <__pack_d+0x50>
    972c:	1109c83a 	sub	r4,r2,r4
    9730:	00800e04 	movi	r2,56
    9734:	11004316 	blt	r2,r4,9844 <__pack_d+0x2cc>
    9738:	21fff804 	addi	r7,r4,-32
    973c:	38004516 	blt	r7,zero,9854 <__pack_d+0x2dc>
    9740:	49d8d83a 	srl	r12,r9,r7
    9744:	001b883a 	mov	r13,zero
    9748:	0023883a 	mov	r17,zero
    974c:	01400044 	movi	r5,1
    9750:	0025883a 	mov	r18,zero
    9754:	38004716 	blt	r7,zero,9874 <__pack_d+0x2fc>
    9758:	29d6983a 	sll	r11,r5,r7
    975c:	0015883a 	mov	r10,zero
    9760:	00bfffc4 	movi	r2,-1
    9764:	5089883a 	add	r4,r10,r2
    9768:	588b883a 	add	r5,r11,r2
    976c:	228d803a 	cmpltu	r6,r4,r10
    9770:	314b883a 	add	r5,r6,r5
    9774:	4104703a 	and	r2,r8,r4
    9778:	4946703a 	and	r3,r9,r5
    977c:	10c4b03a 	or	r2,r2,r3
    9780:	10000226 	beq	r2,zero,978c <__pack_d+0x214>
    9784:	04400044 	movi	r17,1
    9788:	0025883a 	mov	r18,zero
    978c:	00803fc4 	movi	r2,255
    9790:	644eb03a 	or	r7,r12,r17
    9794:	3892703a 	and	r9,r7,r2
    9798:	00802004 	movi	r2,128
    979c:	6c90b03a 	or	r8,r13,r18
    97a0:	0015883a 	mov	r10,zero
    97a4:	48801626 	beq	r9,r2,9800 <__pack_d+0x288>
    97a8:	01001fc4 	movi	r4,127
    97ac:	3905883a 	add	r2,r7,r4
    97b0:	11cd803a 	cmpltu	r6,r2,r7
    97b4:	320d883a 	add	r6,r6,r8
    97b8:	100f883a 	mov	r7,r2
    97bc:	00840034 	movhi	r2,4096
    97c0:	10bfffc4 	addi	r2,r2,-1
    97c4:	3011883a 	mov	r8,r6
    97c8:	0007883a 	mov	r3,zero
    97cc:	11801b36 	bltu	r2,r6,983c <__pack_d+0x2c4>
    97d0:	4004963a 	slli	r2,r8,24
    97d4:	3808d23a 	srli	r4,r7,8
    97d8:	400ad23a 	srli	r5,r8,8
    97dc:	1813883a 	mov	r9,r3
    97e0:	1108b03a 	or	r4,r2,r4
    97e4:	00bfffc4 	movi	r2,-1
    97e8:	00c00434 	movhi	r3,16
    97ec:	18ffffc4 	addi	r3,r3,-1
    97f0:	208c703a 	and	r6,r4,r2
    97f4:	28ce703a 	and	r7,r5,r3
    97f8:	4a01ffcc 	andi	r8,r9,2047
    97fc:	003f7206 	br	95c8 <__pack_d+0x50>
    9800:	503fe91e 	bne	r10,zero,97a8 <__pack_d+0x230>
    9804:	01004004 	movi	r4,256
    9808:	3904703a 	and	r2,r7,r4
    980c:	0007883a 	mov	r3,zero
    9810:	10c4b03a 	or	r2,r2,r3
    9814:	10000626 	beq	r2,zero,9830 <__pack_d+0x2b8>
    9818:	3a45883a 	add	r2,r7,r9
    981c:	11cd803a 	cmpltu	r6,r2,r7
    9820:	320d883a 	add	r6,r6,r8
    9824:	100f883a 	mov	r7,r2
    9828:	3011883a 	mov	r8,r6
    982c:	0007883a 	mov	r3,zero
    9830:	00840034 	movhi	r2,4096
    9834:	10bfffc4 	addi	r2,r2,-1
    9838:	123fe52e 	bgeu	r2,r8,97d0 <__pack_d+0x258>
    983c:	00c00044 	movi	r3,1
    9840:	003fe306 	br	97d0 <__pack_d+0x258>
    9844:	0009883a 	mov	r4,zero
    9848:	0013883a 	mov	r9,zero
    984c:	000b883a 	mov	r5,zero
    9850:	003fe406 	br	97e4 <__pack_d+0x26c>
    9854:	4a47883a 	add	r3,r9,r9
    9858:	008007c4 	movi	r2,31
    985c:	1105c83a 	sub	r2,r2,r4
    9860:	1886983a 	sll	r3,r3,r2
    9864:	4118d83a 	srl	r12,r8,r4
    9868:	491ad83a 	srl	r13,r9,r4
    986c:	1b18b03a 	or	r12,r3,r12
    9870:	003fb506 	br	9748 <__pack_d+0x1d0>
    9874:	2806d07a 	srli	r3,r5,1
    9878:	008007c4 	movi	r2,31
    987c:	1105c83a 	sub	r2,r2,r4
    9880:	1896d83a 	srl	r11,r3,r2
    9884:	2914983a 	sll	r10,r5,r4
    9888:	003fb506 	br	9760 <__pack_d+0x1e8>

0000988c <__unpack_d>:
    988c:	20c00117 	ldw	r3,4(r4)
    9890:	22400017 	ldw	r9,0(r4)
    9894:	00800434 	movhi	r2,16
    9898:	10bfffc4 	addi	r2,r2,-1
    989c:	1808d53a 	srli	r4,r3,20
    98a0:	180cd7fa 	srli	r6,r3,31
    98a4:	1894703a 	and	r10,r3,r2
    98a8:	2201ffcc 	andi	r8,r4,2047
    98ac:	281b883a 	mov	r13,r5
    98b0:	4817883a 	mov	r11,r9
    98b4:	29800115 	stw	r6,4(r5)
    98b8:	5019883a 	mov	r12,r10
    98bc:	40001e1e 	bne	r8,zero,9938 <__unpack_d+0xac>
    98c0:	4a84b03a 	or	r2,r9,r10
    98c4:	10001926 	beq	r2,zero,992c <__unpack_d+0xa0>
    98c8:	4804d63a 	srli	r2,r9,24
    98cc:	500c923a 	slli	r6,r10,8
    98d0:	013f0084 	movi	r4,-1022
    98d4:	00c40034 	movhi	r3,4096
    98d8:	18ffffc4 	addi	r3,r3,-1
    98dc:	118cb03a 	or	r6,r2,r6
    98e0:	008000c4 	movi	r2,3
    98e4:	480a923a 	slli	r5,r9,8
    98e8:	68800015 	stw	r2,0(r13)
    98ec:	69000215 	stw	r4,8(r13)
    98f0:	19800b36 	bltu	r3,r6,9920 <__unpack_d+0x94>
    98f4:	200f883a 	mov	r7,r4
    98f8:	1811883a 	mov	r8,r3
    98fc:	2945883a 	add	r2,r5,r5
    9900:	1149803a 	cmpltu	r4,r2,r5
    9904:	3187883a 	add	r3,r6,r6
    9908:	20c9883a 	add	r4,r4,r3
    990c:	100b883a 	mov	r5,r2
    9910:	200d883a 	mov	r6,r4
    9914:	39ffffc4 	addi	r7,r7,-1
    9918:	413ff82e 	bgeu	r8,r4,98fc <__unpack_d+0x70>
    991c:	69c00215 	stw	r7,8(r13)
    9920:	69800415 	stw	r6,16(r13)
    9924:	69400315 	stw	r5,12(r13)
    9928:	f800283a 	ret
    992c:	00800084 	movi	r2,2
    9930:	28800015 	stw	r2,0(r5)
    9934:	f800283a 	ret
    9938:	0081ffc4 	movi	r2,2047
    993c:	40800f26 	beq	r8,r2,997c <__unpack_d+0xf0>
    9940:	480cd63a 	srli	r6,r9,24
    9944:	5006923a 	slli	r3,r10,8
    9948:	4804923a 	slli	r2,r9,8
    994c:	0009883a 	mov	r4,zero
    9950:	30c6b03a 	or	r3,r6,r3
    9954:	01440034 	movhi	r5,4096
    9958:	110cb03a 	or	r6,r2,r4
    995c:	423f0044 	addi	r8,r8,-1023
    9960:	194eb03a 	or	r7,r3,r5
    9964:	008000c4 	movi	r2,3
    9968:	69c00415 	stw	r7,16(r13)
    996c:	6a000215 	stw	r8,8(r13)
    9970:	68800015 	stw	r2,0(r13)
    9974:	69800315 	stw	r6,12(r13)
    9978:	f800283a 	ret
    997c:	4a84b03a 	or	r2,r9,r10
    9980:	1000031e 	bne	r2,zero,9990 <__unpack_d+0x104>
    9984:	00800104 	movi	r2,4
    9988:	28800015 	stw	r2,0(r5)
    998c:	f800283a 	ret
    9990:	0009883a 	mov	r4,zero
    9994:	01400234 	movhi	r5,8
    9998:	4904703a 	and	r2,r9,r4
    999c:	5146703a 	and	r3,r10,r5
    99a0:	10c4b03a 	or	r2,r2,r3
    99a4:	10000526 	beq	r2,zero,99bc <__unpack_d+0x130>
    99a8:	00800044 	movi	r2,1
    99ac:	68800015 	stw	r2,0(r13)
    99b0:	6b000415 	stw	r12,16(r13)
    99b4:	6ac00315 	stw	r11,12(r13)
    99b8:	f800283a 	ret
    99bc:	68000015 	stw	zero,0(r13)
    99c0:	003ffb06 	br	99b0 <__unpack_d+0x124>

000099c4 <__fpcmp_parts_d>:
    99c4:	21800017 	ldw	r6,0(r4)
    99c8:	00c00044 	movi	r3,1
    99cc:	19800a2e 	bgeu	r3,r6,99f8 <__fpcmp_parts_d+0x34>
    99d0:	28800017 	ldw	r2,0(r5)
    99d4:	1880082e 	bgeu	r3,r2,99f8 <__fpcmp_parts_d+0x34>
    99d8:	00c00104 	movi	r3,4
    99dc:	30c02626 	beq	r6,r3,9a78 <__fpcmp_parts_d+0xb4>
    99e0:	10c02226 	beq	r2,r3,9a6c <__fpcmp_parts_d+0xa8>
    99e4:	00c00084 	movi	r3,2
    99e8:	30c00526 	beq	r6,r3,9a00 <__fpcmp_parts_d+0x3c>
    99ec:	10c0071e 	bne	r2,r3,9a0c <__fpcmp_parts_d+0x48>
    99f0:	20800117 	ldw	r2,4(r4)
    99f4:	1000091e 	bne	r2,zero,9a1c <__fpcmp_parts_d+0x58>
    99f8:	00800044 	movi	r2,1
    99fc:	f800283a 	ret
    9a00:	10c01a1e 	bne	r2,r3,9a6c <__fpcmp_parts_d+0xa8>
    9a04:	0005883a 	mov	r2,zero
    9a08:	f800283a 	ret
    9a0c:	22000117 	ldw	r8,4(r4)
    9a10:	28800117 	ldw	r2,4(r5)
    9a14:	40800326 	beq	r8,r2,9a24 <__fpcmp_parts_d+0x60>
    9a18:	403ff726 	beq	r8,zero,99f8 <__fpcmp_parts_d+0x34>
    9a1c:	00bfffc4 	movi	r2,-1
    9a20:	f800283a 	ret
    9a24:	20c00217 	ldw	r3,8(r4)
    9a28:	28800217 	ldw	r2,8(r5)
    9a2c:	10fffa16 	blt	r2,r3,9a18 <__fpcmp_parts_d+0x54>
    9a30:	18800916 	blt	r3,r2,9a58 <__fpcmp_parts_d+0x94>
    9a34:	21c00417 	ldw	r7,16(r4)
    9a38:	28c00417 	ldw	r3,16(r5)
    9a3c:	21800317 	ldw	r6,12(r4)
    9a40:	28800317 	ldw	r2,12(r5)
    9a44:	19fff436 	bltu	r3,r7,9a18 <__fpcmp_parts_d+0x54>
    9a48:	38c00526 	beq	r7,r3,9a60 <__fpcmp_parts_d+0x9c>
    9a4c:	38c00236 	bltu	r7,r3,9a58 <__fpcmp_parts_d+0x94>
    9a50:	19ffec1e 	bne	r3,r7,9a04 <__fpcmp_parts_d+0x40>
    9a54:	30bfeb2e 	bgeu	r6,r2,9a04 <__fpcmp_parts_d+0x40>
    9a58:	403fe71e 	bne	r8,zero,99f8 <__fpcmp_parts_d+0x34>
    9a5c:	003fef06 	br	9a1c <__fpcmp_parts_d+0x58>
    9a60:	11bffa2e 	bgeu	r2,r6,9a4c <__fpcmp_parts_d+0x88>
    9a64:	403fe426 	beq	r8,zero,99f8 <__fpcmp_parts_d+0x34>
    9a68:	003fec06 	br	9a1c <__fpcmp_parts_d+0x58>
    9a6c:	28800117 	ldw	r2,4(r5)
    9a70:	103fe11e 	bne	r2,zero,99f8 <__fpcmp_parts_d+0x34>
    9a74:	003fe906 	br	9a1c <__fpcmp_parts_d+0x58>
    9a78:	11bfdd1e 	bne	r2,r6,99f0 <__fpcmp_parts_d+0x2c>
    9a7c:	28c00117 	ldw	r3,4(r5)
    9a80:	20800117 	ldw	r2,4(r4)
    9a84:	1885c83a 	sub	r2,r3,r2
    9a88:	f800283a 	ret

00009a8c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    9a8c:	defff804 	addi	sp,sp,-32
    9a90:	dfc00715 	stw	ra,28(sp)
    9a94:	df000615 	stw	fp,24(sp)
    9a98:	df000604 	addi	fp,sp,24
    9a9c:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    9aa0:	e0bffc17 	ldw	r2,-16(fp)
    9aa4:	1004803a 	cmplt	r2,r2,zero
    9aa8:	1000081e 	bne	r2,zero,9acc <close+0x40>
    9aac:	e0bffc17 	ldw	r2,-16(fp)
    9ab0:	10800324 	muli	r2,r2,12
    9ab4:	1007883a 	mov	r3,r2
    9ab8:	00800074 	movhi	r2,1
    9abc:	10b6cc04 	addi	r2,r2,-9424
    9ac0:	1887883a 	add	r3,r3,r2
    9ac4:	e0ffff15 	stw	r3,-4(fp)
    9ac8:	00000106 	br	9ad0 <close+0x44>
    9acc:	e03fff15 	stw	zero,-4(fp)
    9ad0:	e0bfff17 	ldw	r2,-4(fp)
    9ad4:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
    9ad8:	e0bffb17 	ldw	r2,-20(fp)
    9adc:	1005003a 	cmpeq	r2,r2,zero
    9ae0:	10001d1e 	bne	r2,zero,9b58 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    9ae4:	e0bffb17 	ldw	r2,-20(fp)
    9ae8:	10800017 	ldw	r2,0(r2)
    9aec:	10800417 	ldw	r2,16(r2)
    9af0:	1005003a 	cmpeq	r2,r2,zero
    9af4:	1000071e 	bne	r2,zero,9b14 <close+0x88>
    9af8:	e0bffb17 	ldw	r2,-20(fp)
    9afc:	10800017 	ldw	r2,0(r2)
    9b00:	10800417 	ldw	r2,16(r2)
    9b04:	e13ffb17 	ldw	r4,-20(fp)
    9b08:	103ee83a 	callr	r2
    9b0c:	e0bffe15 	stw	r2,-8(fp)
    9b10:	00000106 	br	9b18 <close+0x8c>
    9b14:	e03ffe15 	stw	zero,-8(fp)
    9b18:	e0bffe17 	ldw	r2,-8(fp)
    9b1c:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    9b20:	e13ffc17 	ldw	r4,-16(fp)
    9b24:	000a2d00 	call	a2d0 <alt_release_fd>
    if (rval < 0)
    9b28:	e0bffa17 	ldw	r2,-24(fp)
    9b2c:	1004403a 	cmpge	r2,r2,zero
    9b30:	1000071e 	bne	r2,zero,9b50 <close+0xc4>
    {
      ALT_ERRNO = -rval;
    9b34:	0009b880 	call	9b88 <alt_get_errno>
    9b38:	e0fffa17 	ldw	r3,-24(fp)
    9b3c:	00c7c83a 	sub	r3,zero,r3
    9b40:	10c00015 	stw	r3,0(r2)
      return -1;
    9b44:	00bfffc4 	movi	r2,-1
    9b48:	e0bffd15 	stw	r2,-12(fp)
    9b4c:	00000806 	br	9b70 <close+0xe4>
    }
    return 0;
    9b50:	e03ffd15 	stw	zero,-12(fp)
    9b54:	00000606 	br	9b70 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    9b58:	0009b880 	call	9b88 <alt_get_errno>
    9b5c:	1007883a 	mov	r3,r2
    9b60:	00801444 	movi	r2,81
    9b64:	18800015 	stw	r2,0(r3)
    return -1;
    9b68:	00bfffc4 	movi	r2,-1
    9b6c:	e0bffd15 	stw	r2,-12(fp)
    9b70:	e0bffd17 	ldw	r2,-12(fp)
  }
}
    9b74:	e037883a 	mov	sp,fp
    9b78:	dfc00117 	ldw	ra,4(sp)
    9b7c:	df000017 	ldw	fp,0(sp)
    9b80:	dec00204 	addi	sp,sp,8
    9b84:	f800283a 	ret

00009b88 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9b88:	defffd04 	addi	sp,sp,-12
    9b8c:	dfc00215 	stw	ra,8(sp)
    9b90:	df000115 	stw	fp,4(sp)
    9b94:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    9b98:	00800074 	movhi	r2,1
    9b9c:	10bbb104 	addi	r2,r2,-4412
    9ba0:	10800017 	ldw	r2,0(r2)
    9ba4:	1005003a 	cmpeq	r2,r2,zero
    9ba8:	1000061e 	bne	r2,zero,9bc4 <alt_get_errno+0x3c>
    9bac:	00800074 	movhi	r2,1
    9bb0:	10bbb104 	addi	r2,r2,-4412
    9bb4:	10800017 	ldw	r2,0(r2)
    9bb8:	103ee83a 	callr	r2
    9bbc:	e0bfff15 	stw	r2,-4(fp)
    9bc0:	00000306 	br	9bd0 <alt_get_errno+0x48>
    9bc4:	00800074 	movhi	r2,1
    9bc8:	1082b504 	addi	r2,r2,2772
    9bcc:	e0bfff15 	stw	r2,-4(fp)
    9bd0:	e0bfff17 	ldw	r2,-4(fp)
}
    9bd4:	e037883a 	mov	sp,fp
    9bd8:	dfc00117 	ldw	ra,4(sp)
    9bdc:	df000017 	ldw	fp,0(sp)
    9be0:	dec00204 	addi	sp,sp,8
    9be4:	f800283a 	ret

00009be8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    9be8:	defffc04 	addi	sp,sp,-16
    9bec:	df000315 	stw	fp,12(sp)
    9bf0:	df000304 	addi	fp,sp,12
    9bf4:	e13ffd15 	stw	r4,-12(fp)
    9bf8:	e17ffe15 	stw	r5,-8(fp)
    9bfc:	e1bfff15 	stw	r6,-4(fp)
  return len;
    9c00:	e0bfff17 	ldw	r2,-4(fp)
}
    9c04:	e037883a 	mov	sp,fp
    9c08:	df000017 	ldw	fp,0(sp)
    9c0c:	dec00104 	addi	sp,sp,4
    9c10:	f800283a 	ret

00009c14 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    9c14:	defff904 	addi	sp,sp,-28
    9c18:	dfc00615 	stw	ra,24(sp)
    9c1c:	df000515 	stw	fp,20(sp)
    9c20:	df000504 	addi	fp,sp,20
    9c24:	e13ffc15 	stw	r4,-16(fp)
    9c28:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    9c2c:	e0bffc17 	ldw	r2,-16(fp)
    9c30:	1004803a 	cmplt	r2,r2,zero
    9c34:	1000081e 	bne	r2,zero,9c58 <fstat+0x44>
    9c38:	e0bffc17 	ldw	r2,-16(fp)
    9c3c:	10800324 	muli	r2,r2,12
    9c40:	1007883a 	mov	r3,r2
    9c44:	00800074 	movhi	r2,1
    9c48:	10b6cc04 	addi	r2,r2,-9424
    9c4c:	1887883a 	add	r3,r3,r2
    9c50:	e0ffff15 	stw	r3,-4(fp)
    9c54:	00000106 	br	9c5c <fstat+0x48>
    9c58:	e03fff15 	stw	zero,-4(fp)
    9c5c:	e0bfff17 	ldw	r2,-4(fp)
    9c60:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    9c64:	e0bffb17 	ldw	r2,-20(fp)
    9c68:	1005003a 	cmpeq	r2,r2,zero
    9c6c:	1000121e 	bne	r2,zero,9cb8 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    9c70:	e0bffb17 	ldw	r2,-20(fp)
    9c74:	10800017 	ldw	r2,0(r2)
    9c78:	10800817 	ldw	r2,32(r2)
    9c7c:	1005003a 	cmpeq	r2,r2,zero
    9c80:	1000081e 	bne	r2,zero,9ca4 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
    9c84:	e0bffb17 	ldw	r2,-20(fp)
    9c88:	10800017 	ldw	r2,0(r2)
    9c8c:	10800817 	ldw	r2,32(r2)
    9c90:	e13ffb17 	ldw	r4,-20(fp)
    9c94:	e17ffd17 	ldw	r5,-12(fp)
    9c98:	103ee83a 	callr	r2
    9c9c:	e0bffe15 	stw	r2,-8(fp)
    9ca0:	00000b06 	br	9cd0 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    9ca4:	e0fffd17 	ldw	r3,-12(fp)
    9ca8:	00880004 	movi	r2,8192
    9cac:	18800115 	stw	r2,4(r3)
      return 0;
    9cb0:	e03ffe15 	stw	zero,-8(fp)
    9cb4:	00000606 	br	9cd0 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    9cb8:	0009ce80 	call	9ce8 <alt_get_errno>
    9cbc:	1007883a 	mov	r3,r2
    9cc0:	00801444 	movi	r2,81
    9cc4:	18800015 	stw	r2,0(r3)
    return -1;
    9cc8:	00bfffc4 	movi	r2,-1
    9ccc:	e0bffe15 	stw	r2,-8(fp)
    9cd0:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    9cd4:	e037883a 	mov	sp,fp
    9cd8:	dfc00117 	ldw	ra,4(sp)
    9cdc:	df000017 	ldw	fp,0(sp)
    9ce0:	dec00204 	addi	sp,sp,8
    9ce4:	f800283a 	ret

00009ce8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9ce8:	defffd04 	addi	sp,sp,-12
    9cec:	dfc00215 	stw	ra,8(sp)
    9cf0:	df000115 	stw	fp,4(sp)
    9cf4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    9cf8:	00800074 	movhi	r2,1
    9cfc:	10bbb104 	addi	r2,r2,-4412
    9d00:	10800017 	ldw	r2,0(r2)
    9d04:	1005003a 	cmpeq	r2,r2,zero
    9d08:	1000061e 	bne	r2,zero,9d24 <alt_get_errno+0x3c>
    9d0c:	00800074 	movhi	r2,1
    9d10:	10bbb104 	addi	r2,r2,-4412
    9d14:	10800017 	ldw	r2,0(r2)
    9d18:	103ee83a 	callr	r2
    9d1c:	e0bfff15 	stw	r2,-4(fp)
    9d20:	00000306 	br	9d30 <alt_get_errno+0x48>
    9d24:	00800074 	movhi	r2,1
    9d28:	1082b504 	addi	r2,r2,2772
    9d2c:	e0bfff15 	stw	r2,-4(fp)
    9d30:	e0bfff17 	ldw	r2,-4(fp)
}
    9d34:	e037883a 	mov	sp,fp
    9d38:	dfc00117 	ldw	ra,4(sp)
    9d3c:	df000017 	ldw	fp,0(sp)
    9d40:	dec00204 	addi	sp,sp,8
    9d44:	f800283a 	ret

00009d48 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    9d48:	deffeb04 	addi	sp,sp,-84
    9d4c:	dfc01415 	stw	ra,80(sp)
    9d50:	df001315 	stw	fp,76(sp)
    9d54:	df001304 	addi	fp,sp,76
    9d58:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    9d5c:	e0bffd17 	ldw	r2,-12(fp)
    9d60:	1004803a 	cmplt	r2,r2,zero
    9d64:	1000081e 	bne	r2,zero,9d88 <isatty+0x40>
    9d68:	e0bffd17 	ldw	r2,-12(fp)
    9d6c:	10800324 	muli	r2,r2,12
    9d70:	1007883a 	mov	r3,r2
    9d74:	00800074 	movhi	r2,1
    9d78:	10b6cc04 	addi	r2,r2,-9424
    9d7c:	1887883a 	add	r3,r3,r2
    9d80:	e0ffff15 	stw	r3,-4(fp)
    9d84:	00000106 	br	9d8c <isatty+0x44>
    9d88:	e03fff15 	stw	zero,-4(fp)
    9d8c:	e0bfff17 	ldw	r2,-4(fp)
    9d90:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
    9d94:	e0bfed17 	ldw	r2,-76(fp)
    9d98:	1005003a 	cmpeq	r2,r2,zero
    9d9c:	10000f1e 	bne	r2,zero,9ddc <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    9da0:	e0bfed17 	ldw	r2,-76(fp)
    9da4:	10800017 	ldw	r2,0(r2)
    9da8:	10800817 	ldw	r2,32(r2)
    9dac:	1004c03a 	cmpne	r2,r2,zero
    9db0:	1000031e 	bne	r2,zero,9dc0 <isatty+0x78>
    {
      return 1;
    9db4:	00800044 	movi	r2,1
    9db8:	e0bffe15 	stw	r2,-8(fp)
    9dbc:	00000c06 	br	9df0 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    9dc0:	e17fee04 	addi	r5,fp,-72
    9dc4:	e13ffd17 	ldw	r4,-12(fp)
    9dc8:	0009c140 	call	9c14 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    9dcc:	e0bfef17 	ldw	r2,-68(fp)
    9dd0:	10880020 	cmpeqi	r2,r2,8192
    9dd4:	e0bffe15 	stw	r2,-8(fp)
    9dd8:	00000506 	br	9df0 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    9ddc:	0009e080 	call	9e08 <alt_get_errno>
    9de0:	1007883a 	mov	r3,r2
    9de4:	00801444 	movi	r2,81
    9de8:	18800015 	stw	r2,0(r3)
    return 0;
    9dec:	e03ffe15 	stw	zero,-8(fp)
    9df0:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    9df4:	e037883a 	mov	sp,fp
    9df8:	dfc00117 	ldw	ra,4(sp)
    9dfc:	df000017 	ldw	fp,0(sp)
    9e00:	dec00204 	addi	sp,sp,8
    9e04:	f800283a 	ret

00009e08 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9e08:	defffd04 	addi	sp,sp,-12
    9e0c:	dfc00215 	stw	ra,8(sp)
    9e10:	df000115 	stw	fp,4(sp)
    9e14:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    9e18:	00800074 	movhi	r2,1
    9e1c:	10bbb104 	addi	r2,r2,-4412
    9e20:	10800017 	ldw	r2,0(r2)
    9e24:	1005003a 	cmpeq	r2,r2,zero
    9e28:	1000061e 	bne	r2,zero,9e44 <alt_get_errno+0x3c>
    9e2c:	00800074 	movhi	r2,1
    9e30:	10bbb104 	addi	r2,r2,-4412
    9e34:	10800017 	ldw	r2,0(r2)
    9e38:	103ee83a 	callr	r2
    9e3c:	e0bfff15 	stw	r2,-4(fp)
    9e40:	00000306 	br	9e50 <alt_get_errno+0x48>
    9e44:	00800074 	movhi	r2,1
    9e48:	1082b504 	addi	r2,r2,2772
    9e4c:	e0bfff15 	stw	r2,-4(fp)
    9e50:	e0bfff17 	ldw	r2,-4(fp)
}
    9e54:	e037883a 	mov	sp,fp
    9e58:	dfc00117 	ldw	ra,4(sp)
    9e5c:	df000017 	ldw	fp,0(sp)
    9e60:	dec00204 	addi	sp,sp,8
    9e64:	f800283a 	ret

00009e68 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    9e68:	defffe04 	addi	sp,sp,-8
    9e6c:	dfc00115 	stw	ra,4(sp)
    9e70:	df000015 	stw	fp,0(sp)
    9e74:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    9e78:	01000074 	movhi	r4,1
    9e7c:	213bb604 	addi	r4,r4,-4392
    9e80:	01400074 	movhi	r5,1
    9e84:	2974bd04 	addi	r5,r5,-11532
    9e88:	01800074 	movhi	r6,1
    9e8c:	31bbb604 	addi	r6,r6,-4392
    9e90:	0009ee80 	call	9ee8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    9e94:	01000034 	movhi	r4,0
    9e98:	21000804 	addi	r4,r4,32
    9e9c:	01400034 	movhi	r5,0
    9ea0:	29400804 	addi	r5,r5,32
    9ea4:	01800034 	movhi	r6,0
    9ea8:	31806d04 	addi	r6,r6,436
    9eac:	0009ee80 	call	9ee8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    9eb0:	01000074 	movhi	r4,1
    9eb4:	2133d404 	addi	r4,r4,-12464
    9eb8:	01400074 	movhi	r5,1
    9ebc:	2973d404 	addi	r5,r5,-12464
    9ec0:	01800074 	movhi	r6,1
    9ec4:	31b4bd04 	addi	r6,r6,-11532
    9ec8:	0009ee80 	call	9ee8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    9ecc:	000bd240 	call	bd24 <alt_dcache_flush_all>
  alt_icache_flush_all();
    9ed0:	000bf1c0 	call	bf1c <alt_icache_flush_all>
}
    9ed4:	e037883a 	mov	sp,fp
    9ed8:	dfc00117 	ldw	ra,4(sp)
    9edc:	df000017 	ldw	fp,0(sp)
    9ee0:	dec00204 	addi	sp,sp,8
    9ee4:	f800283a 	ret

00009ee8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    9ee8:	defffc04 	addi	sp,sp,-16
    9eec:	df000315 	stw	fp,12(sp)
    9ef0:	df000304 	addi	fp,sp,12
    9ef4:	e13ffd15 	stw	r4,-12(fp)
    9ef8:	e17ffe15 	stw	r5,-8(fp)
    9efc:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    9f00:	e0fffe17 	ldw	r3,-8(fp)
    9f04:	e0bffd17 	ldw	r2,-12(fp)
    9f08:	18800e26 	beq	r3,r2,9f44 <alt_load_section+0x5c>
  {
    while( to != end )
    9f0c:	00000a06 	br	9f38 <alt_load_section+0x50>
    {
      *to++ = *from++;
    9f10:	e0bffd17 	ldw	r2,-12(fp)
    9f14:	10c00017 	ldw	r3,0(r2)
    9f18:	e0bffe17 	ldw	r2,-8(fp)
    9f1c:	10c00015 	stw	r3,0(r2)
    9f20:	e0bffe17 	ldw	r2,-8(fp)
    9f24:	10800104 	addi	r2,r2,4
    9f28:	e0bffe15 	stw	r2,-8(fp)
    9f2c:	e0bffd17 	ldw	r2,-12(fp)
    9f30:	10800104 	addi	r2,r2,4
    9f34:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    9f38:	e0fffe17 	ldw	r3,-8(fp)
    9f3c:	e0bfff17 	ldw	r2,-4(fp)
    9f40:	18bff31e 	bne	r3,r2,9f10 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    9f44:	e037883a 	mov	sp,fp
    9f48:	df000017 	ldw	fp,0(sp)
    9f4c:	dec00104 	addi	sp,sp,4
    9f50:	f800283a 	ret

00009f54 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    9f54:	defff804 	addi	sp,sp,-32
    9f58:	dfc00715 	stw	ra,28(sp)
    9f5c:	df000615 	stw	fp,24(sp)
    9f60:	df000604 	addi	fp,sp,24
    9f64:	e13ffc15 	stw	r4,-16(fp)
    9f68:	e17ffd15 	stw	r5,-12(fp)
    9f6c:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    9f70:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    9f74:	e0bffc17 	ldw	r2,-16(fp)
    9f78:	1004803a 	cmplt	r2,r2,zero
    9f7c:	1000081e 	bne	r2,zero,9fa0 <lseek+0x4c>
    9f80:	e0bffc17 	ldw	r2,-16(fp)
    9f84:	10800324 	muli	r2,r2,12
    9f88:	1007883a 	mov	r3,r2
    9f8c:	00800074 	movhi	r2,1
    9f90:	10b6cc04 	addi	r2,r2,-9424
    9f94:	1887883a 	add	r3,r3,r2
    9f98:	e0ffff15 	stw	r3,-4(fp)
    9f9c:	00000106 	br	9fa4 <lseek+0x50>
    9fa0:	e03fff15 	stw	zero,-4(fp)
    9fa4:	e0bfff17 	ldw	r2,-4(fp)
    9fa8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
    9fac:	e0bffb17 	ldw	r2,-20(fp)
    9fb0:	1005003a 	cmpeq	r2,r2,zero
    9fb4:	1000111e 	bne	r2,zero,9ffc <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    9fb8:	e0bffb17 	ldw	r2,-20(fp)
    9fbc:	10800017 	ldw	r2,0(r2)
    9fc0:	10800717 	ldw	r2,28(r2)
    9fc4:	1005003a 	cmpeq	r2,r2,zero
    9fc8:	1000091e 	bne	r2,zero,9ff0 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    9fcc:	e0bffb17 	ldw	r2,-20(fp)
    9fd0:	10800017 	ldw	r2,0(r2)
    9fd4:	10800717 	ldw	r2,28(r2)
    9fd8:	e13ffb17 	ldw	r4,-20(fp)
    9fdc:	e17ffd17 	ldw	r5,-12(fp)
    9fe0:	e1bffe17 	ldw	r6,-8(fp)
    9fe4:	103ee83a 	callr	r2
    9fe8:	e0bffa15 	stw	r2,-24(fp)
    9fec:	00000506 	br	a004 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    9ff0:	00bfde84 	movi	r2,-134
    9ff4:	e0bffa15 	stw	r2,-24(fp)
    9ff8:	00000206 	br	a004 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
    9ffc:	00bfebc4 	movi	r2,-81
    a000:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
    a004:	e0bffa17 	ldw	r2,-24(fp)
    a008:	1004403a 	cmpge	r2,r2,zero
    a00c:	1000071e 	bne	r2,zero,a02c <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
    a010:	000a0440 	call	a044 <alt_get_errno>
    a014:	1007883a 	mov	r3,r2
    a018:	e0bffa17 	ldw	r2,-24(fp)
    a01c:	0085c83a 	sub	r2,zero,r2
    a020:	18800015 	stw	r2,0(r3)
    rc = -1;
    a024:	00bfffc4 	movi	r2,-1
    a028:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
    a02c:	e0bffa17 	ldw	r2,-24(fp)
}
    a030:	e037883a 	mov	sp,fp
    a034:	dfc00117 	ldw	ra,4(sp)
    a038:	df000017 	ldw	fp,0(sp)
    a03c:	dec00204 	addi	sp,sp,8
    a040:	f800283a 	ret

0000a044 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    a044:	defffd04 	addi	sp,sp,-12
    a048:	dfc00215 	stw	ra,8(sp)
    a04c:	df000115 	stw	fp,4(sp)
    a050:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    a054:	00800074 	movhi	r2,1
    a058:	10bbb104 	addi	r2,r2,-4412
    a05c:	10800017 	ldw	r2,0(r2)
    a060:	1005003a 	cmpeq	r2,r2,zero
    a064:	1000061e 	bne	r2,zero,a080 <alt_get_errno+0x3c>
    a068:	00800074 	movhi	r2,1
    a06c:	10bbb104 	addi	r2,r2,-4412
    a070:	10800017 	ldw	r2,0(r2)
    a074:	103ee83a 	callr	r2
    a078:	e0bfff15 	stw	r2,-4(fp)
    a07c:	00000306 	br	a08c <alt_get_errno+0x48>
    a080:	00800074 	movhi	r2,1
    a084:	1082b504 	addi	r2,r2,2772
    a088:	e0bfff15 	stw	r2,-4(fp)
    a08c:	e0bfff17 	ldw	r2,-4(fp)
}
    a090:	e037883a 	mov	sp,fp
    a094:	dfc00117 	ldw	ra,4(sp)
    a098:	df000017 	ldw	fp,0(sp)
    a09c:	dec00204 	addi	sp,sp,8
    a0a0:	f800283a 	ret

0000a0a4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    a0a4:	defffd04 	addi	sp,sp,-12
    a0a8:	dfc00215 	stw	ra,8(sp)
    a0ac:	df000115 	stw	fp,4(sp)
    a0b0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    a0b4:	0009883a 	mov	r4,zero
    a0b8:	000a56c0 	call	a56c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    a0bc:	000a5a00 	call	a5a0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    a0c0:	01000074 	movhi	r4,1
    a0c4:	2134ab04 	addi	r4,r4,-11604
    a0c8:	01400074 	movhi	r5,1
    a0cc:	2974ab04 	addi	r5,r5,-11604
    a0d0:	01800074 	movhi	r6,1
    a0d4:	31b4ab04 	addi	r6,r6,-11604
    a0d8:	000c2dc0 	call	c2dc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    a0dc:	000be540 	call	be54 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    a0e0:	01000074 	movhi	r4,1
    a0e4:	212fae04 	addi	r4,r4,-16712
    a0e8:	000cad80 	call	cad8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    a0ec:	d1271017 	ldw	r4,-25536(gp)
    a0f0:	d1671117 	ldw	r5,-25532(gp)
    a0f4:	d1a71217 	ldw	r6,-25528(gp)
    a0f8:	00001f00 	call	1f0 <main>
    a0fc:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    a100:	01000044 	movi	r4,1
    a104:	0009a8c0 	call	9a8c <close>
  exit (result);
    a108:	e13fff17 	ldw	r4,-4(fp)
    a10c:	000caec0 	call	caec <exit>

0000a110 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    a110:	defffe04 	addi	sp,sp,-8
    a114:	df000115 	stw	fp,4(sp)
    a118:	df000104 	addi	fp,sp,4
    a11c:	e13fff15 	stw	r4,-4(fp)
}
    a120:	e037883a 	mov	sp,fp
    a124:	df000017 	ldw	fp,0(sp)
    a128:	dec00104 	addi	sp,sp,4
    a12c:	f800283a 	ret

0000a130 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    a130:	defffe04 	addi	sp,sp,-8
    a134:	df000115 	stw	fp,4(sp)
    a138:	df000104 	addi	fp,sp,4
    a13c:	e13fff15 	stw	r4,-4(fp)
}
    a140:	e037883a 	mov	sp,fp
    a144:	df000017 	ldw	fp,0(sp)
    a148:	dec00104 	addi	sp,sp,4
    a14c:	f800283a 	ret

0000a150 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    a150:	defff704 	addi	sp,sp,-36
    a154:	dfc00815 	stw	ra,32(sp)
    a158:	df000715 	stw	fp,28(sp)
    a15c:	df000704 	addi	fp,sp,28
    a160:	e13ffb15 	stw	r4,-20(fp)
    a164:	e17ffc15 	stw	r5,-16(fp)
    a168:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    a16c:	e0bffb17 	ldw	r2,-20(fp)
    a170:	1004803a 	cmplt	r2,r2,zero
    a174:	1000081e 	bne	r2,zero,a198 <read+0x48>
    a178:	e0bffb17 	ldw	r2,-20(fp)
    a17c:	10800324 	muli	r2,r2,12
    a180:	1007883a 	mov	r3,r2
    a184:	00800074 	movhi	r2,1
    a188:	10b6cc04 	addi	r2,r2,-9424
    a18c:	1887883a 	add	r3,r3,r2
    a190:	e0ffff15 	stw	r3,-4(fp)
    a194:	00000106 	br	a19c <read+0x4c>
    a198:	e03fff15 	stw	zero,-4(fp)
    a19c:	e0bfff17 	ldw	r2,-4(fp)
    a1a0:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    a1a4:	e0bffa17 	ldw	r2,-24(fp)
    a1a8:	1005003a 	cmpeq	r2,r2,zero
    a1ac:	1000241e 	bne	r2,zero,a240 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    a1b0:	e0bffa17 	ldw	r2,-24(fp)
    a1b4:	10800217 	ldw	r2,8(r2)
    a1b8:	108000cc 	andi	r2,r2,3
    a1bc:	10800060 	cmpeqi	r2,r2,1
    a1c0:	10001a1e 	bne	r2,zero,a22c <read+0xdc>
    a1c4:	e0bffa17 	ldw	r2,-24(fp)
    a1c8:	10800017 	ldw	r2,0(r2)
    a1cc:	10800517 	ldw	r2,20(r2)
    a1d0:	1005003a 	cmpeq	r2,r2,zero
    a1d4:	1000151e 	bne	r2,zero,a22c <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    a1d8:	e0bffa17 	ldw	r2,-24(fp)
    a1dc:	10800017 	ldw	r2,0(r2)
    a1e0:	10800517 	ldw	r2,20(r2)
    a1e4:	e17ffc17 	ldw	r5,-16(fp)
    a1e8:	e1bffd17 	ldw	r6,-12(fp)
    a1ec:	e13ffa17 	ldw	r4,-24(fp)
    a1f0:	103ee83a 	callr	r2
    a1f4:	e0bff915 	stw	r2,-28(fp)
    a1f8:	e0bff917 	ldw	r2,-28(fp)
    a1fc:	1004403a 	cmpge	r2,r2,zero
    a200:	1000071e 	bne	r2,zero,a220 <read+0xd0>
        {
          ALT_ERRNO = -rval;
    a204:	000a2700 	call	a270 <alt_get_errno>
    a208:	e0fff917 	ldw	r3,-28(fp)
    a20c:	00c7c83a 	sub	r3,zero,r3
    a210:	10c00015 	stw	r3,0(r2)
          return -1;
    a214:	00bfffc4 	movi	r2,-1
    a218:	e0bffe15 	stw	r2,-8(fp)
    a21c:	00000e06 	br	a258 <read+0x108>
        }
        return rval;
    a220:	e0bff917 	ldw	r2,-28(fp)
    a224:	e0bffe15 	stw	r2,-8(fp)
    a228:	00000b06 	br	a258 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
    a22c:	000a2700 	call	a270 <alt_get_errno>
    a230:	1007883a 	mov	r3,r2
    a234:	00800344 	movi	r2,13
    a238:	18800015 	stw	r2,0(r3)
    a23c:	00000406 	br	a250 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    a240:	000a2700 	call	a270 <alt_get_errno>
    a244:	1007883a 	mov	r3,r2
    a248:	00801444 	movi	r2,81
    a24c:	18800015 	stw	r2,0(r3)
  }
  return -1;
    a250:	00bfffc4 	movi	r2,-1
    a254:	e0bffe15 	stw	r2,-8(fp)
    a258:	e0bffe17 	ldw	r2,-8(fp)
}
    a25c:	e037883a 	mov	sp,fp
    a260:	dfc00117 	ldw	ra,4(sp)
    a264:	df000017 	ldw	fp,0(sp)
    a268:	dec00204 	addi	sp,sp,8
    a26c:	f800283a 	ret

0000a270 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    a270:	defffd04 	addi	sp,sp,-12
    a274:	dfc00215 	stw	ra,8(sp)
    a278:	df000115 	stw	fp,4(sp)
    a27c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    a280:	00800074 	movhi	r2,1
    a284:	10bbb104 	addi	r2,r2,-4412
    a288:	10800017 	ldw	r2,0(r2)
    a28c:	1005003a 	cmpeq	r2,r2,zero
    a290:	1000061e 	bne	r2,zero,a2ac <alt_get_errno+0x3c>
    a294:	00800074 	movhi	r2,1
    a298:	10bbb104 	addi	r2,r2,-4412
    a29c:	10800017 	ldw	r2,0(r2)
    a2a0:	103ee83a 	callr	r2
    a2a4:	e0bfff15 	stw	r2,-4(fp)
    a2a8:	00000306 	br	a2b8 <alt_get_errno+0x48>
    a2ac:	00800074 	movhi	r2,1
    a2b0:	1082b504 	addi	r2,r2,2772
    a2b4:	e0bfff15 	stw	r2,-4(fp)
    a2b8:	e0bfff17 	ldw	r2,-4(fp)
}
    a2bc:	e037883a 	mov	sp,fp
    a2c0:	dfc00117 	ldw	ra,4(sp)
    a2c4:	df000017 	ldw	fp,0(sp)
    a2c8:	dec00204 	addi	sp,sp,8
    a2cc:	f800283a 	ret

0000a2d0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    a2d0:	defffe04 	addi	sp,sp,-8
    a2d4:	df000115 	stw	fp,4(sp)
    a2d8:	df000104 	addi	fp,sp,4
    a2dc:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    a2e0:	e0bfff17 	ldw	r2,-4(fp)
    a2e4:	108000d0 	cmplti	r2,r2,3
    a2e8:	10000d1e 	bne	r2,zero,a320 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    a2ec:	e0bfff17 	ldw	r2,-4(fp)
    a2f0:	00c00074 	movhi	r3,1
    a2f4:	18f6cc04 	addi	r3,r3,-9424
    a2f8:	10800324 	muli	r2,r2,12
    a2fc:	10c5883a 	add	r2,r2,r3
    a300:	10800204 	addi	r2,r2,8
    a304:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    a308:	e0bfff17 	ldw	r2,-4(fp)
    a30c:	00c00074 	movhi	r3,1
    a310:	18f6cc04 	addi	r3,r3,-9424
    a314:	10800324 	muli	r2,r2,12
    a318:	10c5883a 	add	r2,r2,r3
    a31c:	10000015 	stw	zero,0(r2)
  }
}
    a320:	e037883a 	mov	sp,fp
    a324:	df000017 	ldw	fp,0(sp)
    a328:	dec00104 	addi	sp,sp,4
    a32c:	f800283a 	ret

0000a330 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    a330:	defff804 	addi	sp,sp,-32
    a334:	df000715 	stw	fp,28(sp)
    a338:	df000704 	addi	fp,sp,28
    a33c:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a340:	0005303a 	rdctl	r2,status
    a344:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a348:	e0fffb17 	ldw	r3,-20(fp)
    a34c:	00bfff84 	movi	r2,-2
    a350:	1884703a 	and	r2,r3,r2
    a354:	1001703a 	wrctl	status,r2
  
  return context;
    a358:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    a35c:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    a360:	d0a00c17 	ldw	r2,-32720(gp)
    a364:	10c000c4 	addi	r3,r2,3
    a368:	00bfff04 	movi	r2,-4
    a36c:	1884703a 	and	r2,r3,r2
    a370:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    a374:	d0e00c17 	ldw	r3,-32720(gp)
    a378:	e0bffe17 	ldw	r2,-8(fp)
    a37c:	1887883a 	add	r3,r3,r2
    a380:	00802034 	movhi	r2,128
    a384:	10800004 	addi	r2,r2,0
    a388:	10c0072e 	bgeu	r2,r3,a3a8 <sbrk+0x78>
    a38c:	e0bffd17 	ldw	r2,-12(fp)
    a390:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a394:	e0bffa17 	ldw	r2,-24(fp)
    a398:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    a39c:	00bfffc4 	movi	r2,-1
    a3a0:	e0bfff15 	stw	r2,-4(fp)
    a3a4:	00000c06 	br	a3d8 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
    a3a8:	d0a00c17 	ldw	r2,-32720(gp)
    a3ac:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
    a3b0:	d0e00c17 	ldw	r3,-32720(gp)
    a3b4:	e0bffe17 	ldw	r2,-8(fp)
    a3b8:	1885883a 	add	r2,r3,r2
    a3bc:	d0a00c15 	stw	r2,-32720(gp)
    a3c0:	e0bffd17 	ldw	r2,-12(fp)
    a3c4:	e0bff915 	stw	r2,-28(fp)
    a3c8:	e0bff917 	ldw	r2,-28(fp)
    a3cc:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    a3d0:	e0bffc17 	ldw	r2,-16(fp)
    a3d4:	e0bfff15 	stw	r2,-4(fp)
    a3d8:	e0bfff17 	ldw	r2,-4(fp)
} 
    a3dc:	e037883a 	mov	sp,fp
    a3e0:	df000017 	ldw	fp,0(sp)
    a3e4:	dec00104 	addi	sp,sp,4
    a3e8:	f800283a 	ret

0000a3ec <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    a3ec:	defff704 	addi	sp,sp,-36
    a3f0:	dfc00815 	stw	ra,32(sp)
    a3f4:	df000715 	stw	fp,28(sp)
    a3f8:	df000704 	addi	fp,sp,28
    a3fc:	e13ffb15 	stw	r4,-20(fp)
    a400:	e17ffc15 	stw	r5,-16(fp)
    a404:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    a408:	e0bffb17 	ldw	r2,-20(fp)
    a40c:	1004803a 	cmplt	r2,r2,zero
    a410:	1000081e 	bne	r2,zero,a434 <write+0x48>
    a414:	e0bffb17 	ldw	r2,-20(fp)
    a418:	10800324 	muli	r2,r2,12
    a41c:	1007883a 	mov	r3,r2
    a420:	00800074 	movhi	r2,1
    a424:	10b6cc04 	addi	r2,r2,-9424
    a428:	1887883a 	add	r3,r3,r2
    a42c:	e0ffff15 	stw	r3,-4(fp)
    a430:	00000106 	br	a438 <write+0x4c>
    a434:	e03fff15 	stw	zero,-4(fp)
    a438:	e0bfff17 	ldw	r2,-4(fp)
    a43c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    a440:	e0bffa17 	ldw	r2,-24(fp)
    a444:	1005003a 	cmpeq	r2,r2,zero
    a448:	1000241e 	bne	r2,zero,a4dc <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    a44c:	e0bffa17 	ldw	r2,-24(fp)
    a450:	10800217 	ldw	r2,8(r2)
    a454:	108000cc 	andi	r2,r2,3
    a458:	1005003a 	cmpeq	r2,r2,zero
    a45c:	10001a1e 	bne	r2,zero,a4c8 <write+0xdc>
    a460:	e0bffa17 	ldw	r2,-24(fp)
    a464:	10800017 	ldw	r2,0(r2)
    a468:	10800617 	ldw	r2,24(r2)
    a46c:	1005003a 	cmpeq	r2,r2,zero
    a470:	1000151e 	bne	r2,zero,a4c8 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    a474:	e0bffa17 	ldw	r2,-24(fp)
    a478:	10800017 	ldw	r2,0(r2)
    a47c:	10800617 	ldw	r2,24(r2)
    a480:	e17ffc17 	ldw	r5,-16(fp)
    a484:	e1bffd17 	ldw	r6,-12(fp)
    a488:	e13ffa17 	ldw	r4,-24(fp)
    a48c:	103ee83a 	callr	r2
    a490:	e0bff915 	stw	r2,-28(fp)
    a494:	e0bff917 	ldw	r2,-28(fp)
    a498:	1004403a 	cmpge	r2,r2,zero
    a49c:	1000071e 	bne	r2,zero,a4bc <write+0xd0>
      {
        ALT_ERRNO = -rval;
    a4a0:	000a50c0 	call	a50c <alt_get_errno>
    a4a4:	e0fff917 	ldw	r3,-28(fp)
    a4a8:	00c7c83a 	sub	r3,zero,r3
    a4ac:	10c00015 	stw	r3,0(r2)
        return -1;
    a4b0:	00bfffc4 	movi	r2,-1
    a4b4:	e0bffe15 	stw	r2,-8(fp)
    a4b8:	00000e06 	br	a4f4 <write+0x108>
      }
      return rval;
    a4bc:	e0bff917 	ldw	r2,-28(fp)
    a4c0:	e0bffe15 	stw	r2,-8(fp)
    a4c4:	00000b06 	br	a4f4 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
    a4c8:	000a50c0 	call	a50c <alt_get_errno>
    a4cc:	1007883a 	mov	r3,r2
    a4d0:	00800344 	movi	r2,13
    a4d4:	18800015 	stw	r2,0(r3)
    a4d8:	00000406 	br	a4ec <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    a4dc:	000a50c0 	call	a50c <alt_get_errno>
    a4e0:	1007883a 	mov	r3,r2
    a4e4:	00801444 	movi	r2,81
    a4e8:	18800015 	stw	r2,0(r3)
  }
  return -1;
    a4ec:	00bfffc4 	movi	r2,-1
    a4f0:	e0bffe15 	stw	r2,-8(fp)
    a4f4:	e0bffe17 	ldw	r2,-8(fp)
}
    a4f8:	e037883a 	mov	sp,fp
    a4fc:	dfc00117 	ldw	ra,4(sp)
    a500:	df000017 	ldw	fp,0(sp)
    a504:	dec00204 	addi	sp,sp,8
    a508:	f800283a 	ret

0000a50c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    a50c:	defffd04 	addi	sp,sp,-12
    a510:	dfc00215 	stw	ra,8(sp)
    a514:	df000115 	stw	fp,4(sp)
    a518:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    a51c:	00800074 	movhi	r2,1
    a520:	10bbb104 	addi	r2,r2,-4412
    a524:	10800017 	ldw	r2,0(r2)
    a528:	1005003a 	cmpeq	r2,r2,zero
    a52c:	1000061e 	bne	r2,zero,a548 <alt_get_errno+0x3c>
    a530:	00800074 	movhi	r2,1
    a534:	10bbb104 	addi	r2,r2,-4412
    a538:	10800017 	ldw	r2,0(r2)
    a53c:	103ee83a 	callr	r2
    a540:	e0bfff15 	stw	r2,-4(fp)
    a544:	00000306 	br	a554 <alt_get_errno+0x48>
    a548:	00800074 	movhi	r2,1
    a54c:	1082b504 	addi	r2,r2,2772
    a550:	e0bfff15 	stw	r2,-4(fp)
    a554:	e0bfff17 	ldw	r2,-4(fp)
}
    a558:	e037883a 	mov	sp,fp
    a55c:	dfc00117 	ldw	ra,4(sp)
    a560:	df000017 	ldw	fp,0(sp)
    a564:	dec00204 	addi	sp,sp,8
    a568:	f800283a 	ret

0000a56c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    a56c:	defffd04 	addi	sp,sp,-12
    a570:	dfc00215 	stw	ra,8(sp)
    a574:	df000115 	stw	fp,4(sp)
    a578:	df000104 	addi	fp,sp,4
    a57c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
    a580:	000c7bc0 	call	c7bc <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    a584:	00800044 	movi	r2,1
    a588:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    a58c:	e037883a 	mov	sp,fp
    a590:	dfc00117 	ldw	ra,4(sp)
    a594:	df000017 	ldw	fp,0(sp)
    a598:	dec00204 	addi	sp,sp,8
    a59c:	f800283a 	ret

0000a5a0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    a5a0:	defffe04 	addi	sp,sp,-8
    a5a4:	dfc00115 	stw	ra,4(sp)
    a5a8:	df000015 	stw	fp,0(sp)
    a5ac:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER0, timer0);
    a5b0:	01040034 	movhi	r4,4096
    a5b4:	21002004 	addi	r4,r4,128
    a5b8:	000b883a 	mov	r5,zero
    a5bc:	01800044 	movi	r6,1
    a5c0:	01c00044 	movi	r7,1
    a5c4:	000b1900 	call	b190 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER1, timer1);
    ALTERA_AVALON_TIMER_INIT ( TIMER2, timer2);
    ALTERA_AVALON_TIMER_INIT ( TIMER3, timer3);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    a5c8:	01000074 	movhi	r4,1
    a5cc:	21373604 	addi	r4,r4,-9000
    a5d0:	000b883a 	mov	r5,zero
    a5d4:	000d883a 	mov	r6,zero
    a5d8:	000a7bc0 	call	a7bc <altera_avalon_jtag_uart_init>
    a5dc:	01000074 	movhi	r4,1
    a5e0:	21372c04 	addi	r4,r4,-9040
    a5e4:	000a63c0 	call	a63c <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_PORT0, SPI_port0);
    ALTERA_AVALON_SPI_INIT ( SPI_PORT1, SPI_port1);
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    ALTERA_AVALON_UART_INIT ( SERIAL_PORT0, Serial_port0);
    a5e8:	01000074 	movhi	r4,1
    a5ec:	213b4e04 	addi	r4,r4,-4808
    a5f0:	000b883a 	mov	r5,zero
    a5f4:	01800144 	movi	r6,5
    a5f8:	000b3180 	call	b318 <altera_avalon_uart_init>
    a5fc:	01000074 	movhi	r4,1
    a600:	213b4404 	addi	r4,r4,-4848
    a604:	000a63c0 	call	a63c <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( SERIAL_PORT1, Serial_port1);
    a608:	01000074 	movhi	r4,1
    a60c:	213b7f04 	addi	r4,r4,-4612
    a610:	000b883a 	mov	r5,zero
    a614:	01800184 	movi	r6,6
    a618:	000b3180 	call	b318 <altera_avalon_uart_init>
    a61c:	01000074 	movhi	r4,1
    a620:	213b7504 	addi	r4,r4,-4652
    a624:	000a63c0 	call	a63c <alt_dev_reg>
}
    a628:	e037883a 	mov	sp,fp
    a62c:	dfc00117 	ldw	ra,4(sp)
    a630:	df000017 	ldw	fp,0(sp)
    a634:	dec00204 	addi	sp,sp,8
    a638:	f800283a 	ret

0000a63c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    a63c:	defffd04 	addi	sp,sp,-12
    a640:	dfc00215 	stw	ra,8(sp)
    a644:	df000115 	stw	fp,4(sp)
    a648:	df000104 	addi	fp,sp,4
    a64c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    a650:	e13fff17 	ldw	r4,-4(fp)
    a654:	01400074 	movhi	r5,1
    a658:	297bae04 	addi	r5,r5,-4424
    a65c:	000bd400 	call	bd40 <alt_dev_llist_insert>
}
    a660:	e037883a 	mov	sp,fp
    a664:	dfc00117 	ldw	ra,4(sp)
    a668:	df000017 	ldw	fp,0(sp)
    a66c:	dec00204 	addi	sp,sp,8
    a670:	f800283a 	ret

0000a674 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    a674:	defffa04 	addi	sp,sp,-24
    a678:	dfc00515 	stw	ra,20(sp)
    a67c:	df000415 	stw	fp,16(sp)
    a680:	df000404 	addi	fp,sp,16
    a684:	e13ffd15 	stw	r4,-12(fp)
    a688:	e17ffe15 	stw	r5,-8(fp)
    a68c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    a690:	e0bffd17 	ldw	r2,-12(fp)
    a694:	10800017 	ldw	r2,0(r2)
    a698:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    a69c:	e0bffc17 	ldw	r2,-16(fp)
    a6a0:	11000a04 	addi	r4,r2,40
    a6a4:	e0bffd17 	ldw	r2,-12(fp)
    a6a8:	11c00217 	ldw	r7,8(r2)
    a6ac:	e17ffe17 	ldw	r5,-8(fp)
    a6b0:	e1bfff17 	ldw	r6,-4(fp)
    a6b4:	000acbc0 	call	acbc <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    a6b8:	e037883a 	mov	sp,fp
    a6bc:	dfc00117 	ldw	ra,4(sp)
    a6c0:	df000017 	ldw	fp,0(sp)
    a6c4:	dec00204 	addi	sp,sp,8
    a6c8:	f800283a 	ret

0000a6cc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    a6cc:	defffa04 	addi	sp,sp,-24
    a6d0:	dfc00515 	stw	ra,20(sp)
    a6d4:	df000415 	stw	fp,16(sp)
    a6d8:	df000404 	addi	fp,sp,16
    a6dc:	e13ffd15 	stw	r4,-12(fp)
    a6e0:	e17ffe15 	stw	r5,-8(fp)
    a6e4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    a6e8:	e0bffd17 	ldw	r2,-12(fp)
    a6ec:	10800017 	ldw	r2,0(r2)
    a6f0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    a6f4:	e0bffc17 	ldw	r2,-16(fp)
    a6f8:	11000a04 	addi	r4,r2,40
    a6fc:	e0bffd17 	ldw	r2,-12(fp)
    a700:	11c00217 	ldw	r7,8(r2)
    a704:	e17ffe17 	ldw	r5,-8(fp)
    a708:	e1bfff17 	ldw	r6,-4(fp)
    a70c:	000aee00 	call	aee0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    a710:	e037883a 	mov	sp,fp
    a714:	dfc00117 	ldw	ra,4(sp)
    a718:	df000017 	ldw	fp,0(sp)
    a71c:	dec00204 	addi	sp,sp,8
    a720:	f800283a 	ret

0000a724 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    a724:	defffc04 	addi	sp,sp,-16
    a728:	dfc00315 	stw	ra,12(sp)
    a72c:	df000215 	stw	fp,8(sp)
    a730:	df000204 	addi	fp,sp,8
    a734:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    a738:	e0bfff17 	ldw	r2,-4(fp)
    a73c:	10800017 	ldw	r2,0(r2)
    a740:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    a744:	e0bffe17 	ldw	r2,-8(fp)
    a748:	11000a04 	addi	r4,r2,40
    a74c:	e0bfff17 	ldw	r2,-4(fp)
    a750:	11400217 	ldw	r5,8(r2)
    a754:	000ab540 	call	ab54 <altera_avalon_jtag_uart_close>
}
    a758:	e037883a 	mov	sp,fp
    a75c:	dfc00117 	ldw	ra,4(sp)
    a760:	df000017 	ldw	fp,0(sp)
    a764:	dec00204 	addi	sp,sp,8
    a768:	f800283a 	ret

0000a76c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    a76c:	defffa04 	addi	sp,sp,-24
    a770:	dfc00515 	stw	ra,20(sp)
    a774:	df000415 	stw	fp,16(sp)
    a778:	df000404 	addi	fp,sp,16
    a77c:	e13ffd15 	stw	r4,-12(fp)
    a780:	e17ffe15 	stw	r5,-8(fp)
    a784:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    a788:	e0bffd17 	ldw	r2,-12(fp)
    a78c:	10800017 	ldw	r2,0(r2)
    a790:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    a794:	e0bffc17 	ldw	r2,-16(fp)
    a798:	11000a04 	addi	r4,r2,40
    a79c:	e17ffe17 	ldw	r5,-8(fp)
    a7a0:	e1bfff17 	ldw	r6,-4(fp)
    a7a4:	000abc80 	call	abc8 <altera_avalon_jtag_uart_ioctl>
}
    a7a8:	e037883a 	mov	sp,fp
    a7ac:	dfc00117 	ldw	ra,4(sp)
    a7b0:	df000017 	ldw	fp,0(sp)
    a7b4:	dec00204 	addi	sp,sp,8
    a7b8:	f800283a 	ret

0000a7bc <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    a7bc:	defffa04 	addi	sp,sp,-24
    a7c0:	dfc00515 	stw	ra,20(sp)
    a7c4:	df000415 	stw	fp,16(sp)
    a7c8:	df000404 	addi	fp,sp,16
    a7cc:	e13ffd15 	stw	r4,-12(fp)
    a7d0:	e17ffe15 	stw	r5,-8(fp)
    a7d4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    a7d8:	e0fffd17 	ldw	r3,-12(fp)
    a7dc:	00800044 	movi	r2,1
    a7e0:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    a7e4:	e0bffd17 	ldw	r2,-12(fp)
    a7e8:	10800017 	ldw	r2,0(r2)
    a7ec:	11000104 	addi	r4,r2,4
    a7f0:	e0bffd17 	ldw	r2,-12(fp)
    a7f4:	10800817 	ldw	r2,32(r2)
    a7f8:	1007883a 	mov	r3,r2
    a7fc:	2005883a 	mov	r2,r4
    a800:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    a804:	e13ffe17 	ldw	r4,-8(fp)
    a808:	e17fff17 	ldw	r5,-4(fp)
    a80c:	d8000015 	stw	zero,0(sp)
    a810:	01800074 	movhi	r6,1
    a814:	31aa1f04 	addi	r6,r6,-22404
    a818:	e1fffd17 	ldw	r7,-12(fp)
    a81c:	000bf4c0 	call	bf4c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    a820:	e0bffd17 	ldw	r2,-12(fp)
    a824:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    a828:	e0bffd17 	ldw	r2,-12(fp)
    a82c:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    a830:	00800074 	movhi	r2,1
    a834:	1082ba04 	addi	r2,r2,2792
    a838:	10800017 	ldw	r2,0(r2)
    a83c:	100b883a 	mov	r5,r2
    a840:	01800074 	movhi	r6,1
    a844:	31aaa904 	addi	r6,r6,-21852
    a848:	e1fffd17 	ldw	r7,-12(fp)
    a84c:	000bbd00 	call	bbd0 <alt_alarm_start>
    a850:	1004403a 	cmpge	r2,r2,zero
    a854:	1000041e 	bne	r2,zero,a868 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    a858:	e0fffd17 	ldw	r3,-12(fp)
    a85c:	00a00034 	movhi	r2,32768
    a860:	10bfffc4 	addi	r2,r2,-1
    a864:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    a868:	e037883a 	mov	sp,fp
    a86c:	dfc00117 	ldw	ra,4(sp)
    a870:	df000017 	ldw	fp,0(sp)
    a874:	dec00204 	addi	sp,sp,8
    a878:	f800283a 	ret

0000a87c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    a87c:	defff804 	addi	sp,sp,-32
    a880:	df000715 	stw	fp,28(sp)
    a884:	df000704 	addi	fp,sp,28
    a888:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    a88c:	e0bfff17 	ldw	r2,-4(fp)
    a890:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
    a894:	e0bffe17 	ldw	r2,-8(fp)
    a898:	10800017 	ldw	r2,0(r2)
    a89c:	e0bffd15 	stw	r2,-12(fp)
    a8a0:	00000006 	br	a8a4 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    a8a4:	e0bffd17 	ldw	r2,-12(fp)
    a8a8:	10800104 	addi	r2,r2,4
    a8ac:	10800037 	ldwio	r2,0(r2)
    a8b0:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    a8b4:	e0bffc17 	ldw	r2,-16(fp)
    a8b8:	1080c00c 	andi	r2,r2,768
    a8bc:	1005003a 	cmpeq	r2,r2,zero
    a8c0:	1000741e 	bne	r2,zero,aa94 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    a8c4:	e0bffc17 	ldw	r2,-16(fp)
    a8c8:	1080400c 	andi	r2,r2,256
    a8cc:	1005003a 	cmpeq	r2,r2,zero
    a8d0:	1000351e 	bne	r2,zero,a9a8 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    a8d4:	00800074 	movhi	r2,1
    a8d8:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    a8dc:	e0bffe17 	ldw	r2,-8(fp)
    a8e0:	10800a17 	ldw	r2,40(r2)
    a8e4:	10800044 	addi	r2,r2,1
    a8e8:	1081ffcc 	andi	r2,r2,2047
    a8ec:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
    a8f0:	e0bffe17 	ldw	r2,-8(fp)
    a8f4:	10c00b17 	ldw	r3,44(r2)
    a8f8:	e0bffa17 	ldw	r2,-24(fp)
    a8fc:	18801626 	beq	r3,r2,a958 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    a900:	e0bffd17 	ldw	r2,-12(fp)
    a904:	10800037 	ldwio	r2,0(r2)
    a908:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    a90c:	e0bffb17 	ldw	r2,-20(fp)
    a910:	10a0000c 	andi	r2,r2,32768
    a914:	1005003a 	cmpeq	r2,r2,zero
    a918:	10000f1e 	bne	r2,zero,a958 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    a91c:	e0bffe17 	ldw	r2,-8(fp)
    a920:	10c00a17 	ldw	r3,40(r2)
    a924:	e0bffb17 	ldw	r2,-20(fp)
    a928:	1009883a 	mov	r4,r2
    a92c:	e0bffe17 	ldw	r2,-8(fp)
    a930:	1885883a 	add	r2,r3,r2
    a934:	10800e04 	addi	r2,r2,56
    a938:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    a93c:	e0bffe17 	ldw	r2,-8(fp)
    a940:	10800a17 	ldw	r2,40(r2)
    a944:	10800044 	addi	r2,r2,1
    a948:	10c1ffcc 	andi	r3,r2,2047
    a94c:	e0bffe17 	ldw	r2,-8(fp)
    a950:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    a954:	003fe106 	br	a8dc <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    a958:	e0bffb17 	ldw	r2,-20(fp)
    a95c:	10bfffec 	andhi	r2,r2,65535
    a960:	1005003a 	cmpeq	r2,r2,zero
    a964:	1000101e 	bne	r2,zero,a9a8 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    a968:	e0bffe17 	ldw	r2,-8(fp)
    a96c:	10c00817 	ldw	r3,32(r2)
    a970:	00bfff84 	movi	r2,-2
    a974:	1886703a 	and	r3,r3,r2
    a978:	e0bffe17 	ldw	r2,-8(fp)
    a97c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    a980:	e0bffd17 	ldw	r2,-12(fp)
    a984:	11000104 	addi	r4,r2,4
    a988:	e0bffe17 	ldw	r2,-8(fp)
    a98c:	10800817 	ldw	r2,32(r2)
    a990:	1007883a 	mov	r3,r2
    a994:	2005883a 	mov	r2,r4
    a998:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    a99c:	e0bffd17 	ldw	r2,-12(fp)
    a9a0:	10800104 	addi	r2,r2,4
    a9a4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    a9a8:	e0bffc17 	ldw	r2,-16(fp)
    a9ac:	1080800c 	andi	r2,r2,512
    a9b0:	1005003a 	cmpeq	r2,r2,zero
    a9b4:	103fbb1e 	bne	r2,zero,a8a4 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    a9b8:	e0bffc17 	ldw	r2,-16(fp)
    a9bc:	10bfffec 	andhi	r2,r2,65535
    a9c0:	1004d43a 	srli	r2,r2,16
    a9c4:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    a9c8:	00001506 	br	aa20 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    a9cc:	e13ffd17 	ldw	r4,-12(fp)
    a9d0:	e0bffe17 	ldw	r2,-8(fp)
    a9d4:	10c00d17 	ldw	r3,52(r2)
    a9d8:	e0bffe17 	ldw	r2,-8(fp)
    a9dc:	1885883a 	add	r2,r3,r2
    a9e0:	10820e04 	addi	r2,r2,2104
    a9e4:	10800003 	ldbu	r2,0(r2)
    a9e8:	10c03fcc 	andi	r3,r2,255
    a9ec:	18c0201c 	xori	r3,r3,128
    a9f0:	18ffe004 	addi	r3,r3,-128
    a9f4:	2005883a 	mov	r2,r4
    a9f8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    a9fc:	e0bffe17 	ldw	r2,-8(fp)
    aa00:	10800d17 	ldw	r2,52(r2)
    aa04:	10800044 	addi	r2,r2,1
    aa08:	10c1ffcc 	andi	r3,r2,2047
    aa0c:	e0bffe17 	ldw	r2,-8(fp)
    aa10:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    aa14:	e0bff917 	ldw	r2,-28(fp)
    aa18:	10bfffc4 	addi	r2,r2,-1
    aa1c:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    aa20:	e0bff917 	ldw	r2,-28(fp)
    aa24:	1005003a 	cmpeq	r2,r2,zero
    aa28:	1000051e 	bne	r2,zero,aa40 <altera_avalon_jtag_uart_irq+0x1c4>
    aa2c:	e0bffe17 	ldw	r2,-8(fp)
    aa30:	10c00d17 	ldw	r3,52(r2)
    aa34:	e0bffe17 	ldw	r2,-8(fp)
    aa38:	10800c17 	ldw	r2,48(r2)
    aa3c:	18bfe31e 	bne	r3,r2,a9cc <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    aa40:	e0bff917 	ldw	r2,-28(fp)
    aa44:	1005003a 	cmpeq	r2,r2,zero
    aa48:	103f961e 	bne	r2,zero,a8a4 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    aa4c:	e0bffe17 	ldw	r2,-8(fp)
    aa50:	10c00817 	ldw	r3,32(r2)
    aa54:	00bfff44 	movi	r2,-3
    aa58:	1886703a 	and	r3,r3,r2
    aa5c:	e0bffe17 	ldw	r2,-8(fp)
    aa60:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    aa64:	e0bffe17 	ldw	r2,-8(fp)
    aa68:	10800017 	ldw	r2,0(r2)
    aa6c:	11000104 	addi	r4,r2,4
    aa70:	e0bffe17 	ldw	r2,-8(fp)
    aa74:	10800817 	ldw	r2,32(r2)
    aa78:	1007883a 	mov	r3,r2
    aa7c:	2005883a 	mov	r2,r4
    aa80:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    aa84:	e0bffd17 	ldw	r2,-12(fp)
    aa88:	10800104 	addi	r2,r2,4
    aa8c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    aa90:	003f8406 	br	a8a4 <altera_avalon_jtag_uart_irq+0x28>
}
    aa94:	e037883a 	mov	sp,fp
    aa98:	df000017 	ldw	fp,0(sp)
    aa9c:	dec00104 	addi	sp,sp,4
    aaa0:	f800283a 	ret

0000aaa4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    aaa4:	defffc04 	addi	sp,sp,-16
    aaa8:	df000315 	stw	fp,12(sp)
    aaac:	df000304 	addi	fp,sp,12
    aab0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    aab4:	e0bfff17 	ldw	r2,-4(fp)
    aab8:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    aabc:	e0bffe17 	ldw	r2,-8(fp)
    aac0:	10800017 	ldw	r2,0(r2)
    aac4:	10800104 	addi	r2,r2,4
    aac8:	10800037 	ldwio	r2,0(r2)
    aacc:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    aad0:	e0bffd17 	ldw	r2,-12(fp)
    aad4:	1081000c 	andi	r2,r2,1024
    aad8:	1005003a 	cmpeq	r2,r2,zero
    aadc:	10000c1e 	bne	r2,zero,ab10 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    aae0:	e0bffe17 	ldw	r2,-8(fp)
    aae4:	10800017 	ldw	r2,0(r2)
    aae8:	11000104 	addi	r4,r2,4
    aaec:	e0bffe17 	ldw	r2,-8(fp)
    aaf0:	10800817 	ldw	r2,32(r2)
    aaf4:	10810014 	ori	r2,r2,1024
    aaf8:	1007883a 	mov	r3,r2
    aafc:	2005883a 	mov	r2,r4
    ab00:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
    ab04:	e0bffe17 	ldw	r2,-8(fp)
    ab08:	10000915 	stw	zero,36(r2)
    ab0c:	00000a06 	br	ab38 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    ab10:	e0bffe17 	ldw	r2,-8(fp)
    ab14:	10c00917 	ldw	r3,36(r2)
    ab18:	00a00034 	movhi	r2,32768
    ab1c:	10bfff04 	addi	r2,r2,-4
    ab20:	10c00536 	bltu	r2,r3,ab38 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
    ab24:	e0bffe17 	ldw	r2,-8(fp)
    ab28:	10800917 	ldw	r2,36(r2)
    ab2c:	10c00044 	addi	r3,r2,1
    ab30:	e0bffe17 	ldw	r2,-8(fp)
    ab34:	10c00915 	stw	r3,36(r2)
    ab38:	00800074 	movhi	r2,1
    ab3c:	1082ba04 	addi	r2,r2,2792
    ab40:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    ab44:	e037883a 	mov	sp,fp
    ab48:	df000017 	ldw	fp,0(sp)
    ab4c:	dec00104 	addi	sp,sp,4
    ab50:	f800283a 	ret

0000ab54 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    ab54:	defffc04 	addi	sp,sp,-16
    ab58:	df000315 	stw	fp,12(sp)
    ab5c:	df000304 	addi	fp,sp,12
    ab60:	e13ffd15 	stw	r4,-12(fp)
    ab64:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    ab68:	00000706 	br	ab88 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
    ab6c:	e0bffe17 	ldw	r2,-8(fp)
    ab70:	1090000c 	andi	r2,r2,16384
    ab74:	1005003a 	cmpeq	r2,r2,zero
    ab78:	1000031e 	bne	r2,zero,ab88 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
    ab7c:	00bffd44 	movi	r2,-11
    ab80:	e0bfff15 	stw	r2,-4(fp)
    ab84:	00000b06 	br	abb4 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    ab88:	e0bffd17 	ldw	r2,-12(fp)
    ab8c:	10c00d17 	ldw	r3,52(r2)
    ab90:	e0bffd17 	ldw	r2,-12(fp)
    ab94:	10800c17 	ldw	r2,48(r2)
    ab98:	18800526 	beq	r3,r2,abb0 <altera_avalon_jtag_uart_close+0x5c>
    ab9c:	e0bffd17 	ldw	r2,-12(fp)
    aba0:	10c00917 	ldw	r3,36(r2)
    aba4:	e0bffd17 	ldw	r2,-12(fp)
    aba8:	10800117 	ldw	r2,4(r2)
    abac:	18bfef36 	bltu	r3,r2,ab6c <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    abb0:	e03fff15 	stw	zero,-4(fp)
    abb4:	e0bfff17 	ldw	r2,-4(fp)
}
    abb8:	e037883a 	mov	sp,fp
    abbc:	df000017 	ldw	fp,0(sp)
    abc0:	dec00104 	addi	sp,sp,4
    abc4:	f800283a 	ret

0000abc8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    abc8:	defff804 	addi	sp,sp,-32
    abcc:	df000715 	stw	fp,28(sp)
    abd0:	df000704 	addi	fp,sp,28
    abd4:	e13ffb15 	stw	r4,-20(fp)
    abd8:	e17ffc15 	stw	r5,-16(fp)
    abdc:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
    abe0:	00bff9c4 	movi	r2,-25
    abe4:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
    abe8:	e0bffc17 	ldw	r2,-16(fp)
    abec:	e0bfff15 	stw	r2,-4(fp)
    abf0:	e0ffff17 	ldw	r3,-4(fp)
    abf4:	189a8060 	cmpeqi	r2,r3,27137
    abf8:	1000041e 	bne	r2,zero,ac0c <altera_avalon_jtag_uart_ioctl+0x44>
    abfc:	e0ffff17 	ldw	r3,-4(fp)
    ac00:	189a80a0 	cmpeqi	r2,r3,27138
    ac04:	10001b1e 	bne	r2,zero,ac74 <altera_avalon_jtag_uart_ioctl+0xac>
    ac08:	00002706 	br	aca8 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    ac0c:	e0bffb17 	ldw	r2,-20(fp)
    ac10:	10c00117 	ldw	r3,4(r2)
    ac14:	00a00034 	movhi	r2,32768
    ac18:	10bfffc4 	addi	r2,r2,-1
    ac1c:	18802226 	beq	r3,r2,aca8 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
    ac20:	e0bffd17 	ldw	r2,-12(fp)
    ac24:	10800017 	ldw	r2,0(r2)
    ac28:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    ac2c:	e0bff917 	ldw	r2,-28(fp)
    ac30:	10800090 	cmplti	r2,r2,2
    ac34:	1000071e 	bne	r2,zero,ac54 <altera_avalon_jtag_uart_ioctl+0x8c>
    ac38:	e0fff917 	ldw	r3,-28(fp)
    ac3c:	00a00034 	movhi	r2,32768
    ac40:	10bfffc4 	addi	r2,r2,-1
    ac44:	18800326 	beq	r3,r2,ac54 <altera_avalon_jtag_uart_ioctl+0x8c>
    ac48:	e0bff917 	ldw	r2,-28(fp)
    ac4c:	e0bffe15 	stw	r2,-8(fp)
    ac50:	00000306 	br	ac60 <altera_avalon_jtag_uart_ioctl+0x98>
    ac54:	00e00034 	movhi	r3,32768
    ac58:	18ffff84 	addi	r3,r3,-2
    ac5c:	e0fffe15 	stw	r3,-8(fp)
    ac60:	e0bffb17 	ldw	r2,-20(fp)
    ac64:	e0fffe17 	ldw	r3,-8(fp)
    ac68:	10c00115 	stw	r3,4(r2)
      rc = 0;
    ac6c:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
    ac70:	00000d06 	br	aca8 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    ac74:	e0bffb17 	ldw	r2,-20(fp)
    ac78:	10c00117 	ldw	r3,4(r2)
    ac7c:	00a00034 	movhi	r2,32768
    ac80:	10bfffc4 	addi	r2,r2,-1
    ac84:	18800826 	beq	r3,r2,aca8 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    ac88:	e13ffd17 	ldw	r4,-12(fp)
    ac8c:	e0bffb17 	ldw	r2,-20(fp)
    ac90:	10c00917 	ldw	r3,36(r2)
    ac94:	e0bffb17 	ldw	r2,-20(fp)
    ac98:	10800117 	ldw	r2,4(r2)
    ac9c:	1885803a 	cmpltu	r2,r3,r2
    aca0:	20800015 	stw	r2,0(r4)
      rc = 0;
    aca4:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
    aca8:	e0bffa17 	ldw	r2,-24(fp)
}
    acac:	e037883a 	mov	sp,fp
    acb0:	df000017 	ldw	fp,0(sp)
    acb4:	dec00104 	addi	sp,sp,4
    acb8:	f800283a 	ret

0000acbc <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    acbc:	defff204 	addi	sp,sp,-56
    acc0:	dfc00d15 	stw	ra,52(sp)
    acc4:	df000c15 	stw	fp,48(sp)
    acc8:	df000c04 	addi	fp,sp,48
    accc:	e13ffb15 	stw	r4,-20(fp)
    acd0:	e17ffc15 	stw	r5,-16(fp)
    acd4:	e1bffd15 	stw	r6,-12(fp)
    acd8:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
    acdc:	e0bffc17 	ldw	r2,-16(fp)
    ace0:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    ace4:	00004806 	br	ae08 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    ace8:	e0bffb17 	ldw	r2,-20(fp)
    acec:	10800a17 	ldw	r2,40(r2)
    acf0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    acf4:	e0bffb17 	ldw	r2,-20(fp)
    acf8:	10800b17 	ldw	r2,44(r2)
    acfc:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
    ad00:	e0fff717 	ldw	r3,-36(fp)
    ad04:	e0bff617 	ldw	r2,-40(fp)
    ad08:	18800536 	bltu	r3,r2,ad20 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    ad0c:	e0bff717 	ldw	r2,-36(fp)
    ad10:	e0fff617 	ldw	r3,-40(fp)
    ad14:	10c5c83a 	sub	r2,r2,r3
    ad18:	e0bff815 	stw	r2,-32(fp)
    ad1c:	00000406 	br	ad30 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    ad20:	00820004 	movi	r2,2048
    ad24:	e0fff617 	ldw	r3,-40(fp)
    ad28:	10c5c83a 	sub	r2,r2,r3
    ad2c:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    ad30:	e0bff817 	ldw	r2,-32(fp)
    ad34:	1005003a 	cmpeq	r2,r2,zero
    ad38:	10001f1e 	bne	r2,zero,adb8 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
    ad3c:	e0fffd17 	ldw	r3,-12(fp)
    ad40:	e0bff817 	ldw	r2,-32(fp)
    ad44:	1880022e 	bgeu	r3,r2,ad50 <altera_avalon_jtag_uart_read+0x94>
        n = space;
    ad48:	e0bffd17 	ldw	r2,-12(fp)
    ad4c:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    ad50:	e0bffb17 	ldw	r2,-20(fp)
    ad54:	10c00e04 	addi	r3,r2,56
    ad58:	e0bff617 	ldw	r2,-40(fp)
    ad5c:	1887883a 	add	r3,r3,r2
    ad60:	e0bffa17 	ldw	r2,-24(fp)
    ad64:	1009883a 	mov	r4,r2
    ad68:	180b883a 	mov	r5,r3
    ad6c:	e1bff817 	ldw	r6,-32(fp)
    ad70:	00056e00 	call	56e0 <memcpy>
      ptr   += n;
    ad74:	e0fff817 	ldw	r3,-32(fp)
    ad78:	e0bffa17 	ldw	r2,-24(fp)
    ad7c:	10c5883a 	add	r2,r2,r3
    ad80:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
    ad84:	e0fffd17 	ldw	r3,-12(fp)
    ad88:	e0bff817 	ldw	r2,-32(fp)
    ad8c:	1885c83a 	sub	r2,r3,r2
    ad90:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ad94:	e0fff617 	ldw	r3,-40(fp)
    ad98:	e0bff817 	ldw	r2,-32(fp)
    ad9c:	1885883a 	add	r2,r3,r2
    ada0:	10c1ffcc 	andi	r3,r2,2047
    ada4:	e0bffb17 	ldw	r2,-20(fp)
    ada8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    adac:	e0bffd17 	ldw	r2,-12(fp)
    adb0:	10800048 	cmpgei	r2,r2,1
    adb4:	103fcc1e 	bne	r2,zero,ace8 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
    adb8:	e0fffa17 	ldw	r3,-24(fp)
    adbc:	e0bffc17 	ldw	r2,-16(fp)
    adc0:	1880141e 	bne	r3,r2,ae14 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    adc4:	e0bffe17 	ldw	r2,-8(fp)
    adc8:	1090000c 	andi	r2,r2,16384
    adcc:	1004c03a 	cmpne	r2,r2,zero
    add0:	1000101e 	bne	r2,zero,ae14 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    add4:	e0bffb17 	ldw	r2,-20(fp)
    add8:	10c00a17 	ldw	r3,40(r2)
    addc:	e0bff717 	ldw	r2,-36(fp)
    ade0:	1880051e 	bne	r3,r2,adf8 <altera_avalon_jtag_uart_read+0x13c>
    ade4:	e0bffb17 	ldw	r2,-20(fp)
    ade8:	10c00917 	ldw	r3,36(r2)
    adec:	e0bffb17 	ldw	r2,-20(fp)
    adf0:	10800117 	ldw	r2,4(r2)
    adf4:	18bff736 	bltu	r3,r2,add4 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    adf8:	e0bffb17 	ldw	r2,-20(fp)
    adfc:	10c00a17 	ldw	r3,40(r2)
    ae00:	e0bff717 	ldw	r2,-36(fp)
    ae04:	18800326 	beq	r3,r2,ae14 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    ae08:	e0bffd17 	ldw	r2,-12(fp)
    ae0c:	10800048 	cmpgei	r2,r2,1
    ae10:	103fb51e 	bne	r2,zero,ace8 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    ae14:	e0fffa17 	ldw	r3,-24(fp)
    ae18:	e0bffc17 	ldw	r2,-16(fp)
    ae1c:	18801926 	beq	r3,r2,ae84 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ae20:	0005303a 	rdctl	r2,status
    ae24:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ae28:	e0fff517 	ldw	r3,-44(fp)
    ae2c:	00bfff84 	movi	r2,-2
    ae30:	1884703a 	and	r2,r3,r2
    ae34:	1001703a 	wrctl	status,r2
  
  return context;
    ae38:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    ae3c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    ae40:	e0bffb17 	ldw	r2,-20(fp)
    ae44:	10800817 	ldw	r2,32(r2)
    ae48:	10c00054 	ori	r3,r2,1
    ae4c:	e0bffb17 	ldw	r2,-20(fp)
    ae50:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    ae54:	e0bffb17 	ldw	r2,-20(fp)
    ae58:	10800017 	ldw	r2,0(r2)
    ae5c:	11000104 	addi	r4,r2,4
    ae60:	e0bffb17 	ldw	r2,-20(fp)
    ae64:	10800817 	ldw	r2,32(r2)
    ae68:	1007883a 	mov	r3,r2
    ae6c:	2005883a 	mov	r2,r4
    ae70:	10c00035 	stwio	r3,0(r2)
    ae74:	e0bff917 	ldw	r2,-28(fp)
    ae78:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ae7c:	e0bff417 	ldw	r2,-48(fp)
    ae80:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    ae84:	e0fffa17 	ldw	r3,-24(fp)
    ae88:	e0bffc17 	ldw	r2,-16(fp)
    ae8c:	18800526 	beq	r3,r2,aea4 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
    ae90:	e0fffa17 	ldw	r3,-24(fp)
    ae94:	e0bffc17 	ldw	r2,-16(fp)
    ae98:	1887c83a 	sub	r3,r3,r2
    ae9c:	e0ffff15 	stw	r3,-4(fp)
    aea0:	00000906 	br	aec8 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
    aea4:	e0bffe17 	ldw	r2,-8(fp)
    aea8:	1090000c 	andi	r2,r2,16384
    aeac:	1005003a 	cmpeq	r2,r2,zero
    aeb0:	1000031e 	bne	r2,zero,aec0 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    aeb4:	00bffd44 	movi	r2,-11
    aeb8:	e0bfff15 	stw	r2,-4(fp)
    aebc:	00000206 	br	aec8 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
    aec0:	00bffec4 	movi	r2,-5
    aec4:	e0bfff15 	stw	r2,-4(fp)
    aec8:	e0bfff17 	ldw	r2,-4(fp)
}
    aecc:	e037883a 	mov	sp,fp
    aed0:	dfc00117 	ldw	ra,4(sp)
    aed4:	df000017 	ldw	fp,0(sp)
    aed8:	dec00204 	addi	sp,sp,8
    aedc:	f800283a 	ret

0000aee0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    aee0:	defff204 	addi	sp,sp,-56
    aee4:	dfc00d15 	stw	ra,52(sp)
    aee8:	df000c15 	stw	fp,48(sp)
    aeec:	df000c04 	addi	fp,sp,48
    aef0:	e13ffb15 	stw	r4,-20(fp)
    aef4:	e17ffc15 	stw	r5,-16(fp)
    aef8:	e1bffd15 	stw	r6,-12(fp)
    aefc:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    af00:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    af04:	e0bffc17 	ldw	r2,-16(fp)
    af08:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    af0c:	00003a06 	br	aff8 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    af10:	e0bffb17 	ldw	r2,-20(fp)
    af14:	10800c17 	ldw	r2,48(r2)
    af18:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
    af1c:	e0bffb17 	ldw	r2,-20(fp)
    af20:	10800d17 	ldw	r2,52(r2)
    af24:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
    af28:	e0fffa17 	ldw	r3,-24(fp)
    af2c:	e0bff917 	ldw	r2,-28(fp)
    af30:	1880062e 	bgeu	r3,r2,af4c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    af34:	e0fff917 	ldw	r3,-28(fp)
    af38:	e0bffa17 	ldw	r2,-24(fp)
    af3c:	1885c83a 	sub	r2,r3,r2
    af40:	10bfffc4 	addi	r2,r2,-1
    af44:	e0bff815 	stw	r2,-32(fp)
    af48:	00000c06 	br	af7c <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
    af4c:	e0bff917 	ldw	r2,-28(fp)
    af50:	1005003a 	cmpeq	r2,r2,zero
    af54:	1000051e 	bne	r2,zero,af6c <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    af58:	00820004 	movi	r2,2048
    af5c:	e0fffa17 	ldw	r3,-24(fp)
    af60:	10c5c83a 	sub	r2,r2,r3
    af64:	e0bff815 	stw	r2,-32(fp)
    af68:	00000406 	br	af7c <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    af6c:	0081ffc4 	movi	r2,2047
    af70:	e0fffa17 	ldw	r3,-24(fp)
    af74:	10c5c83a 	sub	r2,r2,r3
    af78:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    af7c:	e0bff817 	ldw	r2,-32(fp)
    af80:	1005003a 	cmpeq	r2,r2,zero
    af84:	10001f1e 	bne	r2,zero,b004 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
    af88:	e0fffd17 	ldw	r3,-12(fp)
    af8c:	e0bff817 	ldw	r2,-32(fp)
    af90:	1880022e 	bgeu	r3,r2,af9c <altera_avalon_jtag_uart_write+0xbc>
        n = count;
    af94:	e0bffd17 	ldw	r2,-12(fp)
    af98:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    af9c:	e0bffb17 	ldw	r2,-20(fp)
    afa0:	10c20e04 	addi	r3,r2,2104
    afa4:	e0bffa17 	ldw	r2,-24(fp)
    afa8:	1885883a 	add	r2,r3,r2
    afac:	e0fffc17 	ldw	r3,-16(fp)
    afb0:	1009883a 	mov	r4,r2
    afb4:	180b883a 	mov	r5,r3
    afb8:	e1bff817 	ldw	r6,-32(fp)
    afbc:	00056e00 	call	56e0 <memcpy>
      ptr   += n;
    afc0:	e0fff817 	ldw	r3,-32(fp)
    afc4:	e0bffc17 	ldw	r2,-16(fp)
    afc8:	10c5883a 	add	r2,r2,r3
    afcc:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
    afd0:	e0fffd17 	ldw	r3,-12(fp)
    afd4:	e0bff817 	ldw	r2,-32(fp)
    afd8:	1885c83a 	sub	r2,r3,r2
    afdc:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    afe0:	e0fffa17 	ldw	r3,-24(fp)
    afe4:	e0bff817 	ldw	r2,-32(fp)
    afe8:	1885883a 	add	r2,r3,r2
    afec:	10c1ffcc 	andi	r3,r2,2047
    aff0:	e0bffb17 	ldw	r2,-20(fp)
    aff4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    aff8:	e0bffd17 	ldw	r2,-12(fp)
    affc:	10800048 	cmpgei	r2,r2,1
    b000:	103fc31e 	bne	r2,zero,af10 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b004:	0005303a 	rdctl	r2,status
    b008:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b00c:	e0fff517 	ldw	r3,-44(fp)
    b010:	00bfff84 	movi	r2,-2
    b014:	1884703a 	and	r2,r3,r2
    b018:	1001703a 	wrctl	status,r2
  
  return context;
    b01c:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    b020:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    b024:	e0bffb17 	ldw	r2,-20(fp)
    b028:	10800817 	ldw	r2,32(r2)
    b02c:	10c00094 	ori	r3,r2,2
    b030:	e0bffb17 	ldw	r2,-20(fp)
    b034:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    b038:	e0bffb17 	ldw	r2,-20(fp)
    b03c:	10800017 	ldw	r2,0(r2)
    b040:	11000104 	addi	r4,r2,4
    b044:	e0bffb17 	ldw	r2,-20(fp)
    b048:	10800817 	ldw	r2,32(r2)
    b04c:	1007883a 	mov	r3,r2
    b050:	2005883a 	mov	r2,r4
    b054:	10c00035 	stwio	r3,0(r2)
    b058:	e0bff717 	ldw	r2,-36(fp)
    b05c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b060:	e0bff417 	ldw	r2,-48(fp)
    b064:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    b068:	e0bffd17 	ldw	r2,-12(fp)
    b06c:	10800050 	cmplti	r2,r2,1
    b070:	1000111e 	bne	r2,zero,b0b8 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
    b074:	e0bffe17 	ldw	r2,-8(fp)
    b078:	1090000c 	andi	r2,r2,16384
    b07c:	1004c03a 	cmpne	r2,r2,zero
    b080:	1000101e 	bne	r2,zero,b0c4 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    b084:	e0bffb17 	ldw	r2,-20(fp)
    b088:	10c00d17 	ldw	r3,52(r2)
    b08c:	e0bff917 	ldw	r2,-28(fp)
    b090:	1880051e 	bne	r3,r2,b0a8 <altera_avalon_jtag_uart_write+0x1c8>
    b094:	e0bffb17 	ldw	r2,-20(fp)
    b098:	10c00917 	ldw	r3,36(r2)
    b09c:	e0bffb17 	ldw	r2,-20(fp)
    b0a0:	10800117 	ldw	r2,4(r2)
    b0a4:	18bff736 	bltu	r3,r2,b084 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
    b0a8:	e0bffb17 	ldw	r2,-20(fp)
    b0ac:	10c00d17 	ldw	r3,52(r2)
    b0b0:	e0bff917 	ldw	r2,-28(fp)
    b0b4:	18800326 	beq	r3,r2,b0c4 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
    b0b8:	e0bffd17 	ldw	r2,-12(fp)
    b0bc:	10800048 	cmpgei	r2,r2,1
    b0c0:	103fcd1e 	bne	r2,zero,aff8 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    b0c4:	e0fffc17 	ldw	r3,-16(fp)
    b0c8:	e0bff617 	ldw	r2,-40(fp)
    b0cc:	18800526 	beq	r3,r2,b0e4 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
    b0d0:	e0fffc17 	ldw	r3,-16(fp)
    b0d4:	e0bff617 	ldw	r2,-40(fp)
    b0d8:	1887c83a 	sub	r3,r3,r2
    b0dc:	e0ffff15 	stw	r3,-4(fp)
    b0e0:	00000906 	br	b108 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
    b0e4:	e0bffe17 	ldw	r2,-8(fp)
    b0e8:	1090000c 	andi	r2,r2,16384
    b0ec:	1005003a 	cmpeq	r2,r2,zero
    b0f0:	1000031e 	bne	r2,zero,b100 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
    b0f4:	00bffd44 	movi	r2,-11
    b0f8:	e0bfff15 	stw	r2,-4(fp)
    b0fc:	00000206 	br	b108 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
    b100:	00bffec4 	movi	r2,-5
    b104:	e0bfff15 	stw	r2,-4(fp)
    b108:	e0bfff17 	ldw	r2,-4(fp)
}
    b10c:	e037883a 	mov	sp,fp
    b110:	dfc00117 	ldw	ra,4(sp)
    b114:	df000017 	ldw	fp,0(sp)
    b118:	dec00204 	addi	sp,sp,8
    b11c:	f800283a 	ret

0000b120 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    b120:	defffa04 	addi	sp,sp,-24
    b124:	dfc00515 	stw	ra,20(sp)
    b128:	df000415 	stw	fp,16(sp)
    b12c:	df000404 	addi	fp,sp,16
    b130:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    b134:	e0bfff17 	ldw	r2,-4(fp)
    b138:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    b13c:	e0bfff17 	ldw	r2,-4(fp)
    b140:	10800104 	addi	r2,r2,4
    b144:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b148:	0005303a 	rdctl	r2,status
    b14c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b150:	e0fffd17 	ldw	r3,-12(fp)
    b154:	00bfff84 	movi	r2,-2
    b158:	1884703a 	and	r2,r3,r2
    b15c:	1001703a 	wrctl	status,r2
  
  return context;
    b160:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    b164:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
    b168:	000c6b00 	call	c6b0 <alt_tick>
    b16c:	e0bffe17 	ldw	r2,-8(fp)
    b170:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b174:	e0bffc17 	ldw	r2,-16(fp)
    b178:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    b17c:	e037883a 	mov	sp,fp
    b180:	dfc00117 	ldw	ra,4(sp)
    b184:	df000017 	ldw	fp,0(sp)
    b188:	dec00204 	addi	sp,sp,8
    b18c:	f800283a 	ret

0000b190 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    b190:	defff804 	addi	sp,sp,-32
    b194:	dfc00715 	stw	ra,28(sp)
    b198:	df000615 	stw	fp,24(sp)
    b19c:	df000604 	addi	fp,sp,24
    b1a0:	e13ffc15 	stw	r4,-16(fp)
    b1a4:	e17ffd15 	stw	r5,-12(fp)
    b1a8:	e1bffe15 	stw	r6,-8(fp)
    b1ac:	e1ffff15 	stw	r7,-4(fp)
    b1b0:	e0bfff17 	ldw	r2,-4(fp)
    b1b4:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    b1b8:	00800074 	movhi	r2,1
    b1bc:	1082ba04 	addi	r2,r2,2792
    b1c0:	10800017 	ldw	r2,0(r2)
    b1c4:	1004c03a 	cmpne	r2,r2,zero
    b1c8:	1000041e 	bne	r2,zero,b1dc <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
    b1cc:	00c00074 	movhi	r3,1
    b1d0:	18c2ba04 	addi	r3,r3,2792
    b1d4:	e0bffb17 	ldw	r2,-20(fp)
    b1d8:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    b1dc:	e0bffc17 	ldw	r2,-16(fp)
    b1e0:	10800104 	addi	r2,r2,4
    b1e4:	1007883a 	mov	r3,r2
    b1e8:	008001c4 	movi	r2,7
    b1ec:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    b1f0:	d8000015 	stw	zero,0(sp)
    b1f4:	e13ffd17 	ldw	r4,-12(fp)
    b1f8:	e17ffe17 	ldw	r5,-8(fp)
    b1fc:	01800074 	movhi	r6,1
    b200:	31ac4804 	addi	r6,r6,-20192
    b204:	e1fffc17 	ldw	r7,-16(fp)
    b208:	000bf4c0 	call	bf4c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    b20c:	e037883a 	mov	sp,fp
    b210:	dfc00117 	ldw	ra,4(sp)
    b214:	df000017 	ldw	fp,0(sp)
    b218:	dec00204 	addi	sp,sp,8
    b21c:	f800283a 	ret

0000b220 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    b220:	defffa04 	addi	sp,sp,-24
    b224:	dfc00515 	stw	ra,20(sp)
    b228:	df000415 	stw	fp,16(sp)
    b22c:	df000404 	addi	fp,sp,16
    b230:	e13ffd15 	stw	r4,-12(fp)
    b234:	e17ffe15 	stw	r5,-8(fp)
    b238:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    b23c:	e0bffd17 	ldw	r2,-12(fp)
    b240:	10800017 	ldw	r2,0(r2)
    b244:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
    b248:	e0bffc17 	ldw	r2,-16(fp)
    b24c:	11000a04 	addi	r4,r2,40
    b250:	e0bffd17 	ldw	r2,-12(fp)
    b254:	11c00217 	ldw	r7,8(r2)
    b258:	e17ffe17 	ldw	r5,-8(fp)
    b25c:	e1bfff17 	ldw	r6,-4(fp)
    b260:	000b7180 	call	b718 <altera_avalon_uart_read>
      fd->fd_flags);
}
    b264:	e037883a 	mov	sp,fp
    b268:	dfc00117 	ldw	ra,4(sp)
    b26c:	df000017 	ldw	fp,0(sp)
    b270:	dec00204 	addi	sp,sp,8
    b274:	f800283a 	ret

0000b278 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    b278:	defffa04 	addi	sp,sp,-24
    b27c:	dfc00515 	stw	ra,20(sp)
    b280:	df000415 	stw	fp,16(sp)
    b284:	df000404 	addi	fp,sp,16
    b288:	e13ffd15 	stw	r4,-12(fp)
    b28c:	e17ffe15 	stw	r5,-8(fp)
    b290:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    b294:	e0bffd17 	ldw	r2,-12(fp)
    b298:	10800017 	ldw	r2,0(r2)
    b29c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
    b2a0:	e0bffc17 	ldw	r2,-16(fp)
    b2a4:	11000a04 	addi	r4,r2,40
    b2a8:	e0bffd17 	ldw	r2,-12(fp)
    b2ac:	11c00217 	ldw	r7,8(r2)
    b2b0:	e17ffe17 	ldw	r5,-8(fp)
    b2b4:	e1bfff17 	ldw	r6,-4(fp)
    b2b8:	000b9a80 	call	b9a8 <altera_avalon_uart_write>
      fd->fd_flags);
}
    b2bc:	e037883a 	mov	sp,fp
    b2c0:	dfc00117 	ldw	ra,4(sp)
    b2c4:	df000017 	ldw	fp,0(sp)
    b2c8:	dec00204 	addi	sp,sp,8
    b2cc:	f800283a 	ret

0000b2d0 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
    b2d0:	defffc04 	addi	sp,sp,-16
    b2d4:	dfc00315 	stw	ra,12(sp)
    b2d8:	df000215 	stw	fp,8(sp)
    b2dc:	df000204 	addi	fp,sp,8
    b2e0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    b2e4:	e0bfff17 	ldw	r2,-4(fp)
    b2e8:	10800017 	ldw	r2,0(r2)
    b2ec:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
    b2f0:	e0bffe17 	ldw	r2,-8(fp)
    b2f4:	11000a04 	addi	r4,r2,40
    b2f8:	e0bfff17 	ldw	r2,-4(fp)
    b2fc:	11400217 	ldw	r5,8(r2)
    b300:	000b6b80 	call	b6b8 <altera_avalon_uart_close>
}
    b304:	e037883a 	mov	sp,fp
    b308:	dfc00117 	ldw	ra,4(sp)
    b30c:	df000017 	ldw	fp,0(sp)
    b310:	dec00204 	addi	sp,sp,8
    b314:	f800283a 	ret

0000b318 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
    b318:	defff704 	addi	sp,sp,-36
    b31c:	dfc00815 	stw	ra,32(sp)
    b320:	df000715 	stw	fp,28(sp)
    b324:	df000704 	addi	fp,sp,28
    b328:	e13ffc15 	stw	r4,-16(fp)
    b32c:	e17ffd15 	stw	r5,-12(fp)
    b330:	e1bffe15 	stw	r6,-8(fp)
  void* base = sp->base;
    b334:	e0bffc17 	ldw	r2,-16(fp)
    b338:	10800017 	ldw	r2,0(r2)
    b33c:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
    b340:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
    b344:	1004c03a 	cmpne	r2,r2,zero
    b348:	1000061e 	bne	r2,zero,b364 <altera_avalon_uart_init+0x4c>
    b34c:	0005883a 	mov	r2,zero
    b350:	1004c03a 	cmpne	r2,r2,zero
    b354:	1000031e 	bne	r2,zero,b364 <altera_avalon_uart_init+0x4c>
    b358:	0005883a 	mov	r2,zero
    b35c:	1005003a 	cmpeq	r2,r2,zero
    b360:	1000031e 	bne	r2,zero,b370 <altera_avalon_uart_init+0x58>
    b364:	00800044 	movi	r2,1
    b368:	e0bfff15 	stw	r2,-4(fp)
    b36c:	00000106 	br	b374 <altera_avalon_uart_init+0x5c>
    b370:	e03fff15 	stw	zero,-4(fp)
    b374:	e0bfff17 	ldw	r2,-4(fp)
    b378:	e0bffa15 	stw	r2,-24(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
    b37c:	e0bffa17 	ldw	r2,-24(fp)
    b380:	1004c03a 	cmpne	r2,r2,zero
    b384:	1000111e 	bne	r2,zero,b3cc <altera_avalon_uart_init+0xb4>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
    b388:	e0fffc17 	ldw	r3,-16(fp)
    b38c:	00832004 	movi	r2,3200
    b390:	18800115 	stw	r2,4(r3)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
    b394:	e0bffb17 	ldw	r2,-20(fp)
    b398:	11000304 	addi	r4,r2,12
    b39c:	e0bffc17 	ldw	r2,-16(fp)
    b3a0:	10800117 	ldw	r2,4(r2)
    b3a4:	1007883a 	mov	r3,r2
    b3a8:	2005883a 	mov	r2,r4
    b3ac:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
    b3b0:	d8000015 	stw	zero,0(sp)
    b3b4:	e13ffd17 	ldw	r4,-12(fp)
    b3b8:	e17ffe17 	ldw	r5,-8(fp)
    b3bc:	01800074 	movhi	r6,1
    b3c0:	31acf804 	addi	r6,r6,-19488
    b3c4:	e1fffc17 	ldw	r7,-16(fp)
    b3c8:	000bf4c0 	call	bf4c <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
    b3cc:	e037883a 	mov	sp,fp
    b3d0:	dfc00117 	ldw	ra,4(sp)
    b3d4:	df000017 	ldw	fp,0(sp)
    b3d8:	dec00204 	addi	sp,sp,8
    b3dc:	f800283a 	ret

0000b3e0 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
    b3e0:	defffa04 	addi	sp,sp,-24
    b3e4:	dfc00515 	stw	ra,20(sp)
    b3e8:	df000415 	stw	fp,16(sp)
    b3ec:	df000404 	addi	fp,sp,16
    b3f0:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
    b3f4:	e0bfff17 	ldw	r2,-4(fp)
    b3f8:	e0bffd15 	stw	r2,-12(fp)
  void* base               = sp->base;
    b3fc:	e0bffd17 	ldw	r2,-12(fp)
    b400:	10800017 	ldw	r2,0(r2)
    b404:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
    b408:	e0bffc17 	ldw	r2,-16(fp)
    b40c:	10800204 	addi	r2,r2,8
    b410:	10800037 	ldwio	r2,0(r2)
    b414:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
    b418:	e0bffc17 	ldw	r2,-16(fp)
    b41c:	10800204 	addi	r2,r2,8
    b420:	10000035 	stwio	zero,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
    b424:	e0bffc17 	ldw	r2,-16(fp)
    b428:	10800204 	addi	r2,r2,8
    b42c:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
    b430:	e0bffe17 	ldw	r2,-8(fp)
    b434:	1080200c 	andi	r2,r2,128
    b438:	1005003a 	cmpeq	r2,r2,zero
    b43c:	1000031e 	bne	r2,zero,b44c <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
    b440:	e13ffd17 	ldw	r4,-12(fp)
    b444:	e17ffe17 	ldw	r5,-8(fp)
    b448:	000b47c0 	call	b47c <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
    b44c:	e0bffe17 	ldw	r2,-8(fp)
    b450:	1081100c 	andi	r2,r2,1088
    b454:	1005003a 	cmpeq	r2,r2,zero
    b458:	1000031e 	bne	r2,zero,b468 <altera_avalon_uart_irq+0x88>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
    b45c:	e13ffd17 	ldw	r4,-12(fp)
    b460:	e17ffe17 	ldw	r5,-8(fp)
    b464:	000b55c0 	call	b55c <altera_avalon_uart_txirq>
  }
  

}
    b468:	e037883a 	mov	sp,fp
    b46c:	dfc00117 	ldw	ra,4(sp)
    b470:	df000017 	ldw	fp,0(sp)
    b474:	dec00204 	addi	sp,sp,8
    b478:	f800283a 	ret

0000b47c <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
    b47c:	defffc04 	addi	sp,sp,-16
    b480:	df000315 	stw	fp,12(sp)
    b484:	df000304 	addi	fp,sp,12
    b488:	e13ffe15 	stw	r4,-8(fp)
    b48c:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
    b490:	e0bfff17 	ldw	r2,-4(fp)
    b494:	108000cc 	andi	r2,r2,3
    b498:	1004c03a 	cmpne	r2,r2,zero
    b49c:	10002b1e 	bne	r2,zero,b54c <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
    b4a0:	e0bffe17 	ldw	r2,-8(fp)
    b4a4:	10800317 	ldw	r2,12(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
    b4a8:	e0bffe17 	ldw	r2,-8(fp)
    b4ac:	10800317 	ldw	r2,12(r2)
    b4b0:	10800044 	addi	r2,r2,1
    b4b4:	10800fcc 	andi	r2,r2,63
    b4b8:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
    b4bc:	e0bffe17 	ldw	r2,-8(fp)
    b4c0:	11000317 	ldw	r4,12(r2)
    b4c4:	e0bffe17 	ldw	r2,-8(fp)
    b4c8:	10800017 	ldw	r2,0(r2)
    b4cc:	10800037 	ldwio	r2,0(r2)
    b4d0:	1007883a 	mov	r3,r2
    b4d4:	e0bffe17 	ldw	r2,-8(fp)
    b4d8:	2085883a 	add	r2,r4,r2
    b4dc:	10800704 	addi	r2,r2,28
    b4e0:	10c00005 	stb	r3,0(r2)

  sp->rx_end = next;
    b4e4:	e0fffe17 	ldw	r3,-8(fp)
    b4e8:	e0bffd17 	ldw	r2,-12(fp)
    b4ec:	18800315 	stw	r2,12(r3)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
    b4f0:	e0bffe17 	ldw	r2,-8(fp)
    b4f4:	10800317 	ldw	r2,12(r2)
    b4f8:	10800044 	addi	r2,r2,1
    b4fc:	10800fcc 	andi	r2,r2,63
    b500:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
    b504:	e0bffe17 	ldw	r2,-8(fp)
    b508:	10c00217 	ldw	r3,8(r2)
    b50c:	e0bffd17 	ldw	r2,-12(fp)
    b510:	18800e1e 	bne	r3,r2,b54c <altera_avalon_uart_rxirq+0xd0>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    b514:	e0bffe17 	ldw	r2,-8(fp)
    b518:	10c00117 	ldw	r3,4(r2)
    b51c:	00bfdfc4 	movi	r2,-129
    b520:	1886703a 	and	r3,r3,r2
    b524:	e0bffe17 	ldw	r2,-8(fp)
    b528:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
    b52c:	e0bffe17 	ldw	r2,-8(fp)
    b530:	10800017 	ldw	r2,0(r2)
    b534:	11000304 	addi	r4,r2,12
    b538:	e0bffe17 	ldw	r2,-8(fp)
    b53c:	10800117 	ldw	r2,4(r2)
    b540:	1007883a 	mov	r3,r2
    b544:	2005883a 	mov	r2,r4
    b548:	10c00035 	stwio	r3,0(r2)
  }   
}
    b54c:	e037883a 	mov	sp,fp
    b550:	df000017 	ldw	fp,0(sp)
    b554:	dec00104 	addi	sp,sp,4
    b558:	f800283a 	ret

0000b55c <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
    b55c:	defffd04 	addi	sp,sp,-12
    b560:	df000215 	stw	fp,8(sp)
    b564:	df000204 	addi	fp,sp,8
    b568:	e13ffe15 	stw	r4,-8(fp)
    b56c:	e17fff15 	stw	r5,-4(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
    b570:	e0bffe17 	ldw	r2,-8(fp)
    b574:	10c00417 	ldw	r3,16(r2)
    b578:	e0bffe17 	ldw	r2,-8(fp)
    b57c:	10800517 	ldw	r2,20(r2)
    b580:	18803626 	beq	r3,r2,b65c <altera_avalon_uart_txirq+0x100>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
    b584:	e0bffe17 	ldw	r2,-8(fp)
    b588:	10800617 	ldw	r2,24(r2)
    b58c:	1080008c 	andi	r2,r2,2
    b590:	1005003a 	cmpeq	r2,r2,zero
    b594:	1000041e 	bne	r2,zero,b5a8 <altera_avalon_uart_txirq+0x4c>
    b598:	e0bfff17 	ldw	r2,-4(fp)
    b59c:	1082000c 	andi	r2,r2,2048
    b5a0:	1005003a 	cmpeq	r2,r2,zero
    b5a4:	10001e1e 	bne	r2,zero,b620 <altera_avalon_uart_txirq+0xc4>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
    b5a8:	e0bffe17 	ldw	r2,-8(fp)
    b5ac:	10800417 	ldw	r2,16(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
    b5b0:	e0bffe17 	ldw	r2,-8(fp)
    b5b4:	10800017 	ldw	r2,0(r2)
    b5b8:	11000104 	addi	r4,r2,4
    b5bc:	e0bffe17 	ldw	r2,-8(fp)
    b5c0:	10c00417 	ldw	r3,16(r2)
    b5c4:	e0bffe17 	ldw	r2,-8(fp)
    b5c8:	1885883a 	add	r2,r3,r2
    b5cc:	10801704 	addi	r2,r2,92
    b5d0:	10800003 	ldbu	r2,0(r2)
    b5d4:	10c03fcc 	andi	r3,r2,255
    b5d8:	2005883a 	mov	r2,r4
    b5dc:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
    b5e0:	e0bffe17 	ldw	r2,-8(fp)
    b5e4:	10800417 	ldw	r2,16(r2)
    b5e8:	10c00044 	addi	r3,r2,1
    b5ec:	e0bffe17 	ldw	r2,-8(fp)
    b5f0:	10c00415 	stw	r3,16(r2)
    b5f4:	e0bffe17 	ldw	r2,-8(fp)
    b5f8:	10800417 	ldw	r2,16(r2)
    b5fc:	10c00fcc 	andi	r3,r2,63
    b600:	e0bffe17 	ldw	r2,-8(fp)
    b604:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
    b608:	e0bffe17 	ldw	r2,-8(fp)
    b60c:	10800117 	ldw	r2,4(r2)
    b610:	10c01014 	ori	r3,r2,64
    b614:	e0bffe17 	ldw	r2,-8(fp)
    b618:	10c00115 	stw	r3,4(r2)
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
    b61c:	00000f06 	br	b65c <altera_avalon_uart_txirq+0x100>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
    b620:	e0bffe17 	ldw	r2,-8(fp)
    b624:	10800017 	ldw	r2,0(r2)
    b628:	10800204 	addi	r2,r2,8
    b62c:	10800037 	ldwio	r2,0(r2)
    b630:	e0bfff15 	stw	r2,-4(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
    b634:	e0bfff17 	ldw	r2,-4(fp)
    b638:	1082000c 	andi	r2,r2,2048
    b63c:	1004c03a 	cmpne	r2,r2,zero
    b640:	1000061e 	bne	r2,zero,b65c <altera_avalon_uart_txirq+0x100>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
    b644:	e0bffe17 	ldw	r2,-8(fp)
    b648:	10c00117 	ldw	r3,4(r2)
    b64c:	00bfefc4 	movi	r2,-65
    b650:	1886703a 	and	r3,r3,r2
    b654:	e0bffe17 	ldw	r2,-8(fp)
    b658:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
    b65c:	e0bffe17 	ldw	r2,-8(fp)
    b660:	10c00417 	ldw	r3,16(r2)
    b664:	e0bffe17 	ldw	r2,-8(fp)
    b668:	10800517 	ldw	r2,20(r2)
    b66c:	1880061e 	bne	r3,r2,b688 <altera_avalon_uart_txirq+0x12c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
    b670:	e0bffe17 	ldw	r2,-8(fp)
    b674:	10c00117 	ldw	r3,4(r2)
    b678:	00beefc4 	movi	r2,-1089
    b67c:	1886703a 	and	r3,r3,r2
    b680:	e0bffe17 	ldw	r2,-8(fp)
    b684:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    b688:	e0bffe17 	ldw	r2,-8(fp)
    b68c:	10800017 	ldw	r2,0(r2)
    b690:	11000304 	addi	r4,r2,12
    b694:	e0bffe17 	ldw	r2,-8(fp)
    b698:	10800117 	ldw	r2,4(r2)
    b69c:	1007883a 	mov	r3,r2
    b6a0:	2005883a 	mov	r2,r4
    b6a4:	10c00035 	stwio	r3,0(r2)
}
    b6a8:	e037883a 	mov	sp,fp
    b6ac:	df000017 	ldw	fp,0(sp)
    b6b0:	dec00104 	addi	sp,sp,4
    b6b4:	f800283a 	ret

0000b6b8 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
    b6b8:	defffc04 	addi	sp,sp,-16
    b6bc:	df000315 	stw	fp,12(sp)
    b6c0:	df000304 	addi	fp,sp,12
    b6c4:	e13ffd15 	stw	r4,-12(fp)
    b6c8:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
    b6cc:	00000706 	br	b6ec <altera_avalon_uart_close+0x34>
    if (flags & O_NONBLOCK) {
    b6d0:	e0bffe17 	ldw	r2,-8(fp)
    b6d4:	1090000c 	andi	r2,r2,16384
    b6d8:	1005003a 	cmpeq	r2,r2,zero
    b6dc:	1000031e 	bne	r2,zero,b6ec <altera_avalon_uart_close+0x34>
      return -EWOULDBLOCK; 
    b6e0:	00bffd44 	movi	r2,-11
    b6e4:	e0bfff15 	stw	r2,-4(fp)
    b6e8:	00000606 	br	b704 <altera_avalon_uart_close+0x4c>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
    b6ec:	e0bffd17 	ldw	r2,-12(fp)
    b6f0:	10c00417 	ldw	r3,16(r2)
    b6f4:	e0bffd17 	ldw	r2,-12(fp)
    b6f8:	10800517 	ldw	r2,20(r2)
    b6fc:	18bff41e 	bne	r3,r2,b6d0 <altera_avalon_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    b700:	e03fff15 	stw	zero,-4(fp)
    b704:	e0bfff17 	ldw	r2,-4(fp)
}
    b708:	e037883a 	mov	sp,fp
    b70c:	df000017 	ldw	fp,0(sp)
    b710:	dec00104 	addi	sp,sp,4
    b714:	f800283a 	ret

0000b718 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
    b718:	defff004 	addi	sp,sp,-64
    b71c:	dfc00f15 	stw	ra,60(sp)
    b720:	df000e15 	stw	fp,56(sp)
    b724:	df000e04 	addi	fp,sp,56
    b728:	e13ffb15 	stw	r4,-20(fp)
    b72c:	e17ffc15 	stw	r5,-16(fp)
    b730:	e1bffd15 	stw	r6,-12(fp)
    b734:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context context;
  int             block;
  alt_u32         next;
  alt_u8          read_would_block = 0;
    b738:	e03ff705 	stb	zero,-36(fp)
  int             count = 0;
    b73c:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
    b740:	e0bffe17 	ldw	r2,-8(fp)
    b744:	1090000c 	andi	r2,r2,16384
    b748:	1005003a 	cmpeq	r2,r2,zero
    b74c:	e0bff915 	stw	r2,-28(fp)
  /*
   * Calculate which slot in the circular buffer is the next one to read
   * data from.
   */

  next = (sp->rx_start + 1) & ALT_AVALON_UART_BUF_MSK;
    b750:	e0bffb17 	ldw	r2,-20(fp)
    b754:	10800217 	ldw	r2,8(r2)
    b758:	10800044 	addi	r2,r2,1
    b75c:	10800fcc 	andi	r2,r2,63
    b760:	e0bff815 	stw	r2,-32(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
    b764:	00001906 	br	b7cc <altera_avalon_uart_read+0xb4>
    {
      count++;
    b768:	e0bff617 	ldw	r2,-40(fp)
    b76c:	10800044 	addi	r2,r2,1
    b770:	e0bff615 	stw	r2,-40(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
    b774:	e0bffb17 	ldw	r2,-20(fp)
    b778:	10c00217 	ldw	r3,8(r2)
    b77c:	e0bffb17 	ldw	r2,-20(fp)
    b780:	1885883a 	add	r2,r3,r2
    b784:	10800704 	addi	r2,r2,28
    b788:	10800003 	ldbu	r2,0(r2)
    b78c:	1007883a 	mov	r3,r2
    b790:	e0bffc17 	ldw	r2,-16(fp)
    b794:	10c00005 	stb	r3,0(r2)
    b798:	e0bffc17 	ldw	r2,-16(fp)
    b79c:	10800044 	addi	r2,r2,1
    b7a0:	e0bffc15 	stw	r2,-16(fp)
      
      sp->rx_start = (++sp->rx_start) & ALT_AVALON_UART_BUF_MSK;
    b7a4:	e0bffb17 	ldw	r2,-20(fp)
    b7a8:	10800217 	ldw	r2,8(r2)
    b7ac:	10c00044 	addi	r3,r2,1
    b7b0:	e0bffb17 	ldw	r2,-20(fp)
    b7b4:	10c00215 	stw	r3,8(r2)
    b7b8:	e0bffb17 	ldw	r2,-20(fp)
    b7bc:	10800217 	ldw	r2,8(r2)
    b7c0:	10c00fcc 	andi	r3,r2,63
    b7c4:	e0bffb17 	ldw	r2,-20(fp)
    b7c8:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
    b7cc:	e0fff617 	ldw	r3,-40(fp)
    b7d0:	e0bffd17 	ldw	r2,-12(fp)
    b7d4:	1880050e 	bge	r3,r2,b7ec <altera_avalon_uart_read+0xd4>
    b7d8:	e0bffb17 	ldw	r2,-20(fp)
    b7dc:	10c00217 	ldw	r3,8(r2)
    b7e0:	e0bffb17 	ldw	r2,-20(fp)
    b7e4:	10800317 	ldw	r2,12(r2)
    b7e8:	18bfdf1e 	bne	r3,r2,b768 <altera_avalon_uart_read+0x50>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
    b7ec:	e0bff617 	ldw	r2,-40(fp)
    b7f0:	1004c03a 	cmpne	r2,r2,zero
    b7f4:	1000271e 	bne	r2,zero,b894 <altera_avalon_uart_read+0x17c>
    b7f8:	e0bffb17 	ldw	r2,-20(fp)
    b7fc:	10c00217 	ldw	r3,8(r2)
    b800:	e0bffb17 	ldw	r2,-20(fp)
    b804:	10800317 	ldw	r2,12(r2)
    b808:	1880221e 	bne	r3,r2,b894 <altera_avalon_uart_read+0x17c>
    {
      if (!block)
    b80c:	e0bff917 	ldw	r2,-28(fp)
    b810:	1004c03a 	cmpne	r2,r2,zero
    b814:	1000061e 	bne	r2,zero,b830 <altera_avalon_uart_read+0x118>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
    b818:	000b9480 	call	b948 <alt_get_errno>
    b81c:	00c002c4 	movi	r3,11
    b820:	10c00015 	stw	r3,0(r2)
        read_would_block = 1;
    b824:	00800044 	movi	r2,1
    b828:	e0bff705 	stb	r2,-36(fp)
        break;
    b82c:	00001f06 	br	b8ac <altera_avalon_uart_read+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b830:	0005303a 	rdctl	r2,status
    b834:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b838:	e0fff517 	ldw	r3,-44(fp)
    b83c:	00bfff84 	movi	r2,-2
    b840:	1884703a 	and	r2,r3,r2
    b844:	1001703a 	wrctl	status,r2
  
  return context;
    b848:	e0bff517 	ldw	r2,-44(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
    b84c:	e0bffa15 	stw	r2,-24(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    b850:	e0bffb17 	ldw	r2,-20(fp)
    b854:	10800117 	ldw	r2,4(r2)
    b858:	10c02014 	ori	r3,r2,128
    b85c:	e0bffb17 	ldw	r2,-20(fp)
    b860:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    b864:	e0bffb17 	ldw	r2,-20(fp)
    b868:	10800017 	ldw	r2,0(r2)
    b86c:	11000304 	addi	r4,r2,12
    b870:	e0bffb17 	ldw	r2,-20(fp)
    b874:	10800117 	ldw	r2,4(r2)
    b878:	1007883a 	mov	r3,r2
    b87c:	2005883a 	mov	r2,r4
    b880:	10c00035 	stwio	r3,0(r2)
    b884:	e0bffa17 	ldw	r2,-24(fp)
    b888:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b88c:	e0bff417 	ldw	r2,-48(fp)
    b890:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
    b894:	e0bff617 	ldw	r2,-40(fp)
    b898:	1004c03a 	cmpne	r2,r2,zero
    b89c:	1000031e 	bne	r2,zero,b8ac <altera_avalon_uart_read+0x194>
    b8a0:	e0bffd17 	ldw	r2,-12(fp)
    b8a4:	1004c03a 	cmpne	r2,r2,zero
    b8a8:	103fc81e 	bne	r2,zero,b7cc <altera_avalon_uart_read+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b8ac:	0005303a 	rdctl	r2,status
    b8b0:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b8b4:	e0fff317 	ldw	r3,-52(fp)
    b8b8:	00bfff84 	movi	r2,-2
    b8bc:	1884703a 	and	r2,r3,r2
    b8c0:	1001703a 	wrctl	status,r2
  
  return context;
    b8c4:	e0bff317 	ldw	r2,-52(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
    b8c8:	e0bffa15 	stw	r2,-24(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    b8cc:	e0bffb17 	ldw	r2,-20(fp)
    b8d0:	10800117 	ldw	r2,4(r2)
    b8d4:	10c02014 	ori	r3,r2,128
    b8d8:	e0bffb17 	ldw	r2,-20(fp)
    b8dc:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    b8e0:	e0bffb17 	ldw	r2,-20(fp)
    b8e4:	10800017 	ldw	r2,0(r2)
    b8e8:	11000304 	addi	r4,r2,12
    b8ec:	e0bffb17 	ldw	r2,-20(fp)
    b8f0:	10800117 	ldw	r2,4(r2)
    b8f4:	1007883a 	mov	r3,r2
    b8f8:	2005883a 	mov	r2,r4
    b8fc:	10c00035 	stwio	r3,0(r2)
    b900:	e0bffa17 	ldw	r2,-24(fp)
    b904:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b908:	e0bff217 	ldw	r2,-56(fp)
    b90c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
    b910:	e0bff703 	ldbu	r2,-36(fp)
    b914:	1005003a 	cmpeq	r2,r2,zero
    b918:	1000031e 	bne	r2,zero,b928 <altera_avalon_uart_read+0x210>
    return ~EWOULDBLOCK;
    b91c:	00bffd04 	movi	r2,-12
    b920:	e0bfff15 	stw	r2,-4(fp)
    b924:	00000206 	br	b930 <altera_avalon_uart_read+0x218>
  }
  else {
    return count;
    b928:	e0bff617 	ldw	r2,-40(fp)
    b92c:	e0bfff15 	stw	r2,-4(fp)
    b930:	e0bfff17 	ldw	r2,-4(fp)
  }
}
    b934:	e037883a 	mov	sp,fp
    b938:	dfc00117 	ldw	ra,4(sp)
    b93c:	df000017 	ldw	fp,0(sp)
    b940:	dec00204 	addi	sp,sp,8
    b944:	f800283a 	ret

0000b948 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b948:	defffd04 	addi	sp,sp,-12
    b94c:	dfc00215 	stw	ra,8(sp)
    b950:	df000115 	stw	fp,4(sp)
    b954:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    b958:	00800074 	movhi	r2,1
    b95c:	10bbb104 	addi	r2,r2,-4412
    b960:	10800017 	ldw	r2,0(r2)
    b964:	1005003a 	cmpeq	r2,r2,zero
    b968:	1000061e 	bne	r2,zero,b984 <alt_get_errno+0x3c>
    b96c:	00800074 	movhi	r2,1
    b970:	10bbb104 	addi	r2,r2,-4412
    b974:	10800017 	ldw	r2,0(r2)
    b978:	103ee83a 	callr	r2
    b97c:	e0bfff15 	stw	r2,-4(fp)
    b980:	00000306 	br	b990 <alt_get_errno+0x48>
    b984:	00800074 	movhi	r2,1
    b988:	1082b504 	addi	r2,r2,2772
    b98c:	e0bfff15 	stw	r2,-4(fp)
    b990:	e0bfff17 	ldw	r2,-4(fp)
}
    b994:	e037883a 	mov	sp,fp
    b998:	dfc00117 	ldw	ra,4(sp)
    b99c:	df000017 	ldw	fp,0(sp)
    b9a0:	dec00204 	addi	sp,sp,8
    b9a4:	f800283a 	ret

0000b9a8 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
    b9a8:	defff204 	addi	sp,sp,-56
    b9ac:	dfc00d15 	stw	ra,52(sp)
    b9b0:	df000c15 	stw	fp,48(sp)
    b9b4:	df000c04 	addi	fp,sp,48
    b9b8:	e13ffc15 	stw	r4,-16(fp)
    b9bc:	e17ffd15 	stw	r5,-12(fp)
    b9c0:	e1bffe15 	stw	r6,-8(fp)
    b9c4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
    b9c8:	e0bffe17 	ldw	r2,-8(fp)
    b9cc:	e0bff815 	stw	r2,-32(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
    b9d0:	e0bfff17 	ldw	r2,-4(fp)
    b9d4:	1090000c 	andi	r2,r2,16384
    b9d8:	e0bffa15 	stw	r2,-24(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
    b9dc:	00004006 	br	bae0 <altera_avalon_uart_write+0x138>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
    b9e0:	e0bffc17 	ldw	r2,-16(fp)
    b9e4:	10800517 	ldw	r2,20(r2)
    b9e8:	10800044 	addi	r2,r2,1
    b9ec:	10800fcc 	andi	r2,r2,63
    b9f0:	e0bff915 	stw	r2,-28(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
    b9f4:	e0bffc17 	ldw	r2,-16(fp)
    b9f8:	10c00417 	ldw	r3,16(r2)
    b9fc:	e0bff917 	ldw	r2,-28(fp)
    ba00:	1880251e 	bne	r3,r2,ba98 <altera_avalon_uart_write+0xf0>
    {
      if (no_block)
    ba04:	e0bffa17 	ldw	r2,-24(fp)
    ba08:	1005003a 	cmpeq	r2,r2,zero
    ba0c:	1000051e 	bne	r2,zero,ba24 <altera_avalon_uart_write+0x7c>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
    ba10:	000bb700 	call	bb70 <alt_get_errno>
    ba14:	1007883a 	mov	r3,r2
    ba18:	008002c4 	movi	r2,11
    ba1c:	18800015 	stw	r2,0(r3)
        break;
    ba20:	00003206 	br	baec <altera_avalon_uart_write+0x144>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ba24:	0005303a 	rdctl	r2,status
    ba28:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ba2c:	e0fff717 	ldw	r3,-36(fp)
    ba30:	00bfff84 	movi	r2,-2
    ba34:	1884703a 	and	r2,r3,r2
    ba38:	1001703a 	wrctl	status,r2
  
  return context;
    ba3c:	e0bff717 	ldw	r2,-36(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
    ba40:	e0bffb15 	stw	r2,-20(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
    ba44:	e0bffc17 	ldw	r2,-16(fp)
    ba48:	10800117 	ldw	r2,4(r2)
    ba4c:	10c11014 	ori	r3,r2,1088
    ba50:	e0bffc17 	ldw	r2,-16(fp)
    ba54:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    ba58:	e0bffc17 	ldw	r2,-16(fp)
    ba5c:	10800017 	ldw	r2,0(r2)
    ba60:	11000304 	addi	r4,r2,12
    ba64:	e0bffc17 	ldw	r2,-16(fp)
    ba68:	10800117 	ldw	r2,4(r2)
    ba6c:	1007883a 	mov	r3,r2
    ba70:	2005883a 	mov	r2,r4
    ba74:	10c00035 	stwio	r3,0(r2)
    ba78:	e0bffb17 	ldw	r2,-20(fp)
    ba7c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ba80:	e0bff617 	ldw	r2,-40(fp)
    ba84:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
    ba88:	e0bffc17 	ldw	r2,-16(fp)
    ba8c:	10c00417 	ldw	r3,16(r2)
    ba90:	e0bff917 	ldw	r2,-28(fp)
    ba94:	18bffc26 	beq	r3,r2,ba88 <altera_avalon_uart_write+0xe0>
      }
    }

    count--;
    ba98:	e0bff817 	ldw	r2,-32(fp)
    ba9c:	10bfffc4 	addi	r2,r2,-1
    baa0:	e0bff815 	stw	r2,-32(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
    baa4:	e0bffc17 	ldw	r2,-16(fp)
    baa8:	10c00517 	ldw	r3,20(r2)
    baac:	e0bffd17 	ldw	r2,-12(fp)
    bab0:	10800003 	ldbu	r2,0(r2)
    bab4:	1009883a 	mov	r4,r2
    bab8:	e0bffc17 	ldw	r2,-16(fp)
    babc:	1885883a 	add	r2,r3,r2
    bac0:	10801704 	addi	r2,r2,92
    bac4:	11000005 	stb	r4,0(r2)
    bac8:	e0bffd17 	ldw	r2,-12(fp)
    bacc:	10800044 	addi	r2,r2,1
    bad0:	e0bffd15 	stw	r2,-12(fp)
    sp->tx_end = next;
    bad4:	e0fffc17 	ldw	r3,-16(fp)
    bad8:	e0bff917 	ldw	r2,-28(fp)
    badc:	18800515 	stw	r2,20(r3)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
    bae0:	e0bff817 	ldw	r2,-32(fp)
    bae4:	1004c03a 	cmpne	r2,r2,zero
    bae8:	103fbd1e 	bne	r2,zero,b9e0 <altera_avalon_uart_write+0x38>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    baec:	0005303a 	rdctl	r2,status
    baf0:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    baf4:	e0fff517 	ldw	r3,-44(fp)
    baf8:	00bfff84 	movi	r2,-2
    bafc:	1884703a 	and	r2,r3,r2
    bb00:	1001703a 	wrctl	status,r2
  
  return context;
    bb04:	e0bff517 	ldw	r2,-44(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
    bb08:	e0bffb15 	stw	r2,-20(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
    bb0c:	e0bffc17 	ldw	r2,-16(fp)
    bb10:	10800117 	ldw	r2,4(r2)
    bb14:	10c11014 	ori	r3,r2,1088
    bb18:	e0bffc17 	ldw	r2,-16(fp)
    bb1c:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    bb20:	e0bffc17 	ldw	r2,-16(fp)
    bb24:	10800017 	ldw	r2,0(r2)
    bb28:	11000304 	addi	r4,r2,12
    bb2c:	e0bffc17 	ldw	r2,-16(fp)
    bb30:	10800117 	ldw	r2,4(r2)
    bb34:	1007883a 	mov	r3,r2
    bb38:	2005883a 	mov	r2,r4
    bb3c:	10c00035 	stwio	r3,0(r2)
    bb40:	e0bffb17 	ldw	r2,-20(fp)
    bb44:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    bb48:	e0bff417 	ldw	r2,-48(fp)
    bb4c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
    bb50:	e0fffe17 	ldw	r3,-8(fp)
    bb54:	e0bff817 	ldw	r2,-32(fp)
    bb58:	1885c83a 	sub	r2,r3,r2
}
    bb5c:	e037883a 	mov	sp,fp
    bb60:	dfc00117 	ldw	ra,4(sp)
    bb64:	df000017 	ldw	fp,0(sp)
    bb68:	dec00204 	addi	sp,sp,8
    bb6c:	f800283a 	ret

0000bb70 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    bb70:	defffd04 	addi	sp,sp,-12
    bb74:	dfc00215 	stw	ra,8(sp)
    bb78:	df000115 	stw	fp,4(sp)
    bb7c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    bb80:	00800074 	movhi	r2,1
    bb84:	10bbb104 	addi	r2,r2,-4412
    bb88:	10800017 	ldw	r2,0(r2)
    bb8c:	1005003a 	cmpeq	r2,r2,zero
    bb90:	1000061e 	bne	r2,zero,bbac <alt_get_errno+0x3c>
    bb94:	00800074 	movhi	r2,1
    bb98:	10bbb104 	addi	r2,r2,-4412
    bb9c:	10800017 	ldw	r2,0(r2)
    bba0:	103ee83a 	callr	r2
    bba4:	e0bfff15 	stw	r2,-4(fp)
    bba8:	00000306 	br	bbb8 <alt_get_errno+0x48>
    bbac:	00800074 	movhi	r2,1
    bbb0:	1082b504 	addi	r2,r2,2772
    bbb4:	e0bfff15 	stw	r2,-4(fp)
    bbb8:	e0bfff17 	ldw	r2,-4(fp)
}
    bbbc:	e037883a 	mov	sp,fp
    bbc0:	dfc00117 	ldw	ra,4(sp)
    bbc4:	df000017 	ldw	fp,0(sp)
    bbc8:	dec00204 	addi	sp,sp,8
    bbcc:	f800283a 	ret

0000bbd0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    bbd0:	defff404 	addi	sp,sp,-48
    bbd4:	df000b15 	stw	fp,44(sp)
    bbd8:	df000b04 	addi	fp,sp,44
    bbdc:	e13ffb15 	stw	r4,-20(fp)
    bbe0:	e17ffc15 	stw	r5,-16(fp)
    bbe4:	e1bffd15 	stw	r6,-12(fp)
    bbe8:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    bbec:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    bbf0:	00800074 	movhi	r2,1
    bbf4:	1082ba04 	addi	r2,r2,2792
    bbf8:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
    bbfc:	1005003a 	cmpeq	r2,r2,zero
    bc00:	1000411e 	bne	r2,zero,bd08 <alt_alarm_start+0x138>
  {
    if (alarm)
    bc04:	e0bffb17 	ldw	r2,-20(fp)
    bc08:	1005003a 	cmpeq	r2,r2,zero
    bc0c:	10003b1e 	bne	r2,zero,bcfc <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
    bc10:	e0fffb17 	ldw	r3,-20(fp)
    bc14:	e0bffd17 	ldw	r2,-12(fp)
    bc18:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
    bc1c:	e0fffb17 	ldw	r3,-20(fp)
    bc20:	e0bffe17 	ldw	r2,-8(fp)
    bc24:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    bc28:	0005303a 	rdctl	r2,status
    bc2c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    bc30:	e0fff817 	ldw	r3,-32(fp)
    bc34:	00bfff84 	movi	r2,-2
    bc38:	1884703a 	and	r2,r3,r2
    bc3c:	1001703a 	wrctl	status,r2
  
  return context;
    bc40:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
    bc44:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    bc48:	00800074 	movhi	r2,1
    bc4c:	1082bb04 	addi	r2,r2,2796
    bc50:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
    bc54:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    bc58:	e0fffc17 	ldw	r3,-16(fp)
    bc5c:	e0bff917 	ldw	r2,-28(fp)
    bc60:	1885883a 	add	r2,r3,r2
    bc64:	10c00044 	addi	r3,r2,1
    bc68:	e0bffb17 	ldw	r2,-20(fp)
    bc6c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    bc70:	e0bffb17 	ldw	r2,-20(fp)
    bc74:	10c00217 	ldw	r3,8(r2)
    bc78:	e0bff917 	ldw	r2,-28(fp)
    bc7c:	1880042e 	bgeu	r3,r2,bc90 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
    bc80:	e0fffb17 	ldw	r3,-20(fp)
    bc84:	00800044 	movi	r2,1
    bc88:	18800405 	stb	r2,16(r3)
    bc8c:	00000206 	br	bc98 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
    bc90:	e0bffb17 	ldw	r2,-20(fp)
    bc94:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    bc98:	e0fffb17 	ldw	r3,-20(fp)
    bc9c:	00800074 	movhi	r2,1
    bca0:	10bbb404 	addi	r2,r2,-4400
    bca4:	e0bff615 	stw	r2,-40(fp)
    bca8:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    bcac:	e0fff717 	ldw	r3,-36(fp)
    bcb0:	e0bff617 	ldw	r2,-40(fp)
    bcb4:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    bcb8:	e0bff617 	ldw	r2,-40(fp)
    bcbc:	10c00017 	ldw	r3,0(r2)
    bcc0:	e0bff717 	ldw	r2,-36(fp)
    bcc4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    bcc8:	e0bff617 	ldw	r2,-40(fp)
    bccc:	10c00017 	ldw	r3,0(r2)
    bcd0:	e0bff717 	ldw	r2,-36(fp)
    bcd4:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    bcd8:	e0fff617 	ldw	r3,-40(fp)
    bcdc:	e0bff717 	ldw	r2,-36(fp)
    bce0:	18800015 	stw	r2,0(r3)
    bce4:	e0bffa17 	ldw	r2,-24(fp)
    bce8:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    bcec:	e0bff517 	ldw	r2,-44(fp)
    bcf0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    bcf4:	e03fff15 	stw	zero,-4(fp)
    bcf8:	00000506 	br	bd10 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
    bcfc:	00bffa84 	movi	r2,-22
    bd00:	e0bfff15 	stw	r2,-4(fp)
    bd04:	00000206 	br	bd10 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
    bd08:	00bfde84 	movi	r2,-134
    bd0c:	e0bfff15 	stw	r2,-4(fp)
    bd10:	e0bfff17 	ldw	r2,-4(fp)
  }
}
    bd14:	e037883a 	mov	sp,fp
    bd18:	df000017 	ldw	fp,0(sp)
    bd1c:	dec00104 	addi	sp,sp,4
    bd20:	f800283a 	ret

0000bd24 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    bd24:	deffff04 	addi	sp,sp,-4
    bd28:	df000015 	stw	fp,0(sp)
    bd2c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    bd30:	e037883a 	mov	sp,fp
    bd34:	df000017 	ldw	fp,0(sp)
    bd38:	dec00104 	addi	sp,sp,4
    bd3c:	f800283a 	ret

0000bd40 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    bd40:	defff904 	addi	sp,sp,-28
    bd44:	dfc00615 	stw	ra,24(sp)
    bd48:	df000515 	stw	fp,20(sp)
    bd4c:	df000504 	addi	fp,sp,20
    bd50:	e13ffd15 	stw	r4,-12(fp)
    bd54:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    bd58:	e0bffd17 	ldw	r2,-12(fp)
    bd5c:	1005003a 	cmpeq	r2,r2,zero
    bd60:	1000041e 	bne	r2,zero,bd74 <alt_dev_llist_insert+0x34>
    bd64:	e0bffd17 	ldw	r2,-12(fp)
    bd68:	10800217 	ldw	r2,8(r2)
    bd6c:	1004c03a 	cmpne	r2,r2,zero
    bd70:	1000071e 	bne	r2,zero,bd90 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
    bd74:	000bdf40 	call	bdf4 <alt_get_errno>
    bd78:	1007883a 	mov	r3,r2
    bd7c:	00800584 	movi	r2,22
    bd80:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    bd84:	00bffa84 	movi	r2,-22
    bd88:	e0bfff15 	stw	r2,-4(fp)
    bd8c:	00001306 	br	bddc <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    bd90:	e0fffd17 	ldw	r3,-12(fp)
    bd94:	e0bffe17 	ldw	r2,-8(fp)
    bd98:	e0bffb15 	stw	r2,-20(fp)
    bd9c:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    bda0:	e0fffc17 	ldw	r3,-16(fp)
    bda4:	e0bffb17 	ldw	r2,-20(fp)
    bda8:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    bdac:	e0bffb17 	ldw	r2,-20(fp)
    bdb0:	10c00017 	ldw	r3,0(r2)
    bdb4:	e0bffc17 	ldw	r2,-16(fp)
    bdb8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    bdbc:	e0bffb17 	ldw	r2,-20(fp)
    bdc0:	10c00017 	ldw	r3,0(r2)
    bdc4:	e0bffc17 	ldw	r2,-16(fp)
    bdc8:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    bdcc:	e0fffb17 	ldw	r3,-20(fp)
    bdd0:	e0bffc17 	ldw	r2,-16(fp)
    bdd4:	18800015 	stw	r2,0(r3)

  return 0;  
    bdd8:	e03fff15 	stw	zero,-4(fp)
    bddc:	e0bfff17 	ldw	r2,-4(fp)
}
    bde0:	e037883a 	mov	sp,fp
    bde4:	dfc00117 	ldw	ra,4(sp)
    bde8:	df000017 	ldw	fp,0(sp)
    bdec:	dec00204 	addi	sp,sp,8
    bdf0:	f800283a 	ret

0000bdf4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    bdf4:	defffd04 	addi	sp,sp,-12
    bdf8:	dfc00215 	stw	ra,8(sp)
    bdfc:	df000115 	stw	fp,4(sp)
    be00:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    be04:	00800074 	movhi	r2,1
    be08:	10bbb104 	addi	r2,r2,-4412
    be0c:	10800017 	ldw	r2,0(r2)
    be10:	1005003a 	cmpeq	r2,r2,zero
    be14:	1000061e 	bne	r2,zero,be30 <alt_get_errno+0x3c>
    be18:	00800074 	movhi	r2,1
    be1c:	10bbb104 	addi	r2,r2,-4412
    be20:	10800017 	ldw	r2,0(r2)
    be24:	103ee83a 	callr	r2
    be28:	e0bfff15 	stw	r2,-4(fp)
    be2c:	00000306 	br	be3c <alt_get_errno+0x48>
    be30:	00800074 	movhi	r2,1
    be34:	1082b504 	addi	r2,r2,2772
    be38:	e0bfff15 	stw	r2,-4(fp)
    be3c:	e0bfff17 	ldw	r2,-4(fp)
}
    be40:	e037883a 	mov	sp,fp
    be44:	dfc00117 	ldw	ra,4(sp)
    be48:	df000017 	ldw	fp,0(sp)
    be4c:	dec00204 	addi	sp,sp,8
    be50:	f800283a 	ret

0000be54 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    be54:	defffd04 	addi	sp,sp,-12
    be58:	dfc00215 	stw	ra,8(sp)
    be5c:	df000115 	stw	fp,4(sp)
    be60:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    be64:	00bfff04 	movi	r2,-4
    be68:	00c00074 	movhi	r3,1
    be6c:	18f3d404 	addi	r3,r3,-12464
    be70:	1885883a 	add	r2,r3,r2
    be74:	e0bfff15 	stw	r2,-4(fp)
    be78:	00000606 	br	be94 <_do_ctors+0x40>
        (*ctor) (); 
    be7c:	e0bfff17 	ldw	r2,-4(fp)
    be80:	10800017 	ldw	r2,0(r2)
    be84:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    be88:	e0bfff17 	ldw	r2,-4(fp)
    be8c:	10bfff04 	addi	r2,r2,-4
    be90:	e0bfff15 	stw	r2,-4(fp)
    be94:	e0ffff17 	ldw	r3,-4(fp)
    be98:	00800074 	movhi	r2,1
    be9c:	10b3d304 	addi	r2,r2,-12468
    bea0:	18bff62e 	bgeu	r3,r2,be7c <_do_ctors+0x28>
        (*ctor) (); 
}
    bea4:	e037883a 	mov	sp,fp
    bea8:	dfc00117 	ldw	ra,4(sp)
    beac:	df000017 	ldw	fp,0(sp)
    beb0:	dec00204 	addi	sp,sp,8
    beb4:	f800283a 	ret

0000beb8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    beb8:	defffd04 	addi	sp,sp,-12
    bebc:	dfc00215 	stw	ra,8(sp)
    bec0:	df000115 	stw	fp,4(sp)
    bec4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    bec8:	00bfff04 	movi	r2,-4
    becc:	00c00074 	movhi	r3,1
    bed0:	18f3d404 	addi	r3,r3,-12464
    bed4:	1885883a 	add	r2,r3,r2
    bed8:	e0bfff15 	stw	r2,-4(fp)
    bedc:	00000606 	br	bef8 <_do_dtors+0x40>
        (*dtor) (); 
    bee0:	e0bfff17 	ldw	r2,-4(fp)
    bee4:	10800017 	ldw	r2,0(r2)
    bee8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    beec:	e0bfff17 	ldw	r2,-4(fp)
    bef0:	10bfff04 	addi	r2,r2,-4
    bef4:	e0bfff15 	stw	r2,-4(fp)
    bef8:	e0ffff17 	ldw	r3,-4(fp)
    befc:	00800074 	movhi	r2,1
    bf00:	10b3d404 	addi	r2,r2,-12464
    bf04:	18bff62e 	bgeu	r3,r2,bee0 <_do_dtors+0x28>
        (*dtor) (); 
}
    bf08:	e037883a 	mov	sp,fp
    bf0c:	dfc00117 	ldw	ra,4(sp)
    bf10:	df000017 	ldw	fp,0(sp)
    bf14:	dec00204 	addi	sp,sp,8
    bf18:	f800283a 	ret

0000bf1c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    bf1c:	defffe04 	addi	sp,sp,-8
    bf20:	dfc00115 	stw	ra,4(sp)
    bf24:	df000015 	stw	fp,0(sp)
    bf28:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    bf2c:	0009883a 	mov	r4,zero
    bf30:	01480004 	movi	r5,8192
    bf34:	000ca480 	call	ca48 <alt_icache_flush>
#endif
}
    bf38:	e037883a 	mov	sp,fp
    bf3c:	dfc00117 	ldw	ra,4(sp)
    bf40:	df000017 	ldw	fp,0(sp)
    bf44:	dec00204 	addi	sp,sp,8
    bf48:	f800283a 	ret

0000bf4c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    bf4c:	defff904 	addi	sp,sp,-28
    bf50:	dfc00615 	stw	ra,24(sp)
    bf54:	df000515 	stw	fp,20(sp)
    bf58:	df000504 	addi	fp,sp,20
    bf5c:	e13ffc15 	stw	r4,-16(fp)
    bf60:	e17ffd15 	stw	r5,-12(fp)
    bf64:	e1bffe15 	stw	r6,-8(fp)
    bf68:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    bf6c:	e0800217 	ldw	r2,8(fp)
    bf70:	d8800015 	stw	r2,0(sp)
    bf74:	e13ffc17 	ldw	r4,-16(fp)
    bf78:	e17ffd17 	ldw	r5,-12(fp)
    bf7c:	e1bffe17 	ldw	r6,-8(fp)
    bf80:	e1ffff17 	ldw	r7,-4(fp)
    bf84:	000c1200 	call	c120 <alt_iic_isr_register>
}  
    bf88:	e037883a 	mov	sp,fp
    bf8c:	dfc00117 	ldw	ra,4(sp)
    bf90:	df000017 	ldw	fp,0(sp)
    bf94:	dec00204 	addi	sp,sp,8
    bf98:	f800283a 	ret

0000bf9c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    bf9c:	defff904 	addi	sp,sp,-28
    bfa0:	df000615 	stw	fp,24(sp)
    bfa4:	df000604 	addi	fp,sp,24
    bfa8:	e13ffe15 	stw	r4,-8(fp)
    bfac:	e17fff15 	stw	r5,-4(fp)
    bfb0:	e0bfff17 	ldw	r2,-4(fp)
    bfb4:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    bfb8:	0005303a 	rdctl	r2,status
    bfbc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    bfc0:	e0fffb17 	ldw	r3,-20(fp)
    bfc4:	00bfff84 	movi	r2,-2
    bfc8:	1884703a 	and	r2,r3,r2
    bfcc:	1001703a 	wrctl	status,r2
  
  return context;
    bfd0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    bfd4:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
    bfd8:	e0fffc17 	ldw	r3,-16(fp)
    bfdc:	00800044 	movi	r2,1
    bfe0:	10c4983a 	sll	r2,r2,r3
    bfe4:	1007883a 	mov	r3,r2
    bfe8:	00800074 	movhi	r2,1
    bfec:	1082b904 	addi	r2,r2,2788
    bff0:	10800017 	ldw	r2,0(r2)
    bff4:	1886b03a 	or	r3,r3,r2
    bff8:	00800074 	movhi	r2,1
    bffc:	1082b904 	addi	r2,r2,2788
    c000:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    c004:	00800074 	movhi	r2,1
    c008:	1082b904 	addi	r2,r2,2788
    c00c:	10800017 	ldw	r2,0(r2)
    c010:	100170fa 	wrctl	ienable,r2
    c014:	e0bffd17 	ldw	r2,-12(fp)
    c018:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c01c:	e0bffa17 	ldw	r2,-24(fp)
    c020:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    c024:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
    c028:	e037883a 	mov	sp,fp
    c02c:	df000017 	ldw	fp,0(sp)
    c030:	dec00104 	addi	sp,sp,4
    c034:	f800283a 	ret

0000c038 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    c038:	defff904 	addi	sp,sp,-28
    c03c:	df000615 	stw	fp,24(sp)
    c040:	df000604 	addi	fp,sp,24
    c044:	e13ffe15 	stw	r4,-8(fp)
    c048:	e17fff15 	stw	r5,-4(fp)
    c04c:	e0bfff17 	ldw	r2,-4(fp)
    c050:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c054:	0005303a 	rdctl	r2,status
    c058:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c05c:	e0fffb17 	ldw	r3,-20(fp)
    c060:	00bfff84 	movi	r2,-2
    c064:	1884703a 	and	r2,r3,r2
    c068:	1001703a 	wrctl	status,r2
  
  return context;
    c06c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    c070:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
    c074:	e0fffc17 	ldw	r3,-16(fp)
    c078:	00800044 	movi	r2,1
    c07c:	10c4983a 	sll	r2,r2,r3
    c080:	0084303a 	nor	r2,zero,r2
    c084:	1007883a 	mov	r3,r2
    c088:	00800074 	movhi	r2,1
    c08c:	1082b904 	addi	r2,r2,2788
    c090:	10800017 	ldw	r2,0(r2)
    c094:	1886703a 	and	r3,r3,r2
    c098:	00800074 	movhi	r2,1
    c09c:	1082b904 	addi	r2,r2,2788
    c0a0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    c0a4:	00800074 	movhi	r2,1
    c0a8:	1082b904 	addi	r2,r2,2788
    c0ac:	10800017 	ldw	r2,0(r2)
    c0b0:	100170fa 	wrctl	ienable,r2
    c0b4:	e0bffd17 	ldw	r2,-12(fp)
    c0b8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c0bc:	e0bffa17 	ldw	r2,-24(fp)
    c0c0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    c0c4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
    c0c8:	e037883a 	mov	sp,fp
    c0cc:	df000017 	ldw	fp,0(sp)
    c0d0:	dec00104 	addi	sp,sp,4
    c0d4:	f800283a 	ret

0000c0d8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    c0d8:	defffc04 	addi	sp,sp,-16
    c0dc:	df000315 	stw	fp,12(sp)
    c0e0:	df000304 	addi	fp,sp,12
    c0e4:	e13ffe15 	stw	r4,-8(fp)
    c0e8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    c0ec:	000530fa 	rdctl	r2,ienable
    c0f0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    c0f4:	e0ffff17 	ldw	r3,-4(fp)
    c0f8:	00800044 	movi	r2,1
    c0fc:	10c4983a 	sll	r2,r2,r3
    c100:	1007883a 	mov	r3,r2
    c104:	e0bffd17 	ldw	r2,-12(fp)
    c108:	1884703a 	and	r2,r3,r2
    c10c:	1004c03a 	cmpne	r2,r2,zero
}
    c110:	e037883a 	mov	sp,fp
    c114:	df000017 	ldw	fp,0(sp)
    c118:	dec00104 	addi	sp,sp,4
    c11c:	f800283a 	ret

0000c120 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    c120:	defff404 	addi	sp,sp,-48
    c124:	dfc00b15 	stw	ra,44(sp)
    c128:	df000a15 	stw	fp,40(sp)
    c12c:	df000a04 	addi	fp,sp,40
    c130:	e13ffb15 	stw	r4,-20(fp)
    c134:	e17ffc15 	stw	r5,-16(fp)
    c138:	e1bffd15 	stw	r6,-12(fp)
    c13c:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
    c140:	00bffa84 	movi	r2,-22
    c144:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    c148:	e0bffc17 	ldw	r2,-16(fp)
    c14c:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    c150:	e0bff917 	ldw	r2,-28(fp)
    c154:	10800808 	cmpgei	r2,r2,32
    c158:	1000291e 	bne	r2,zero,c200 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c15c:	0005303a 	rdctl	r2,status
    c160:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c164:	e0fff717 	ldw	r3,-36(fp)
    c168:	00bfff84 	movi	r2,-2
    c16c:	1884703a 	and	r2,r3,r2
    c170:	1001703a 	wrctl	status,r2
  
  return context;
    c174:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    c178:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
    c17c:	e0bff917 	ldw	r2,-28(fp)
    c180:	00c00074 	movhi	r3,1
    c184:	18c2c604 	addi	r3,r3,2840
    c188:	100490fa 	slli	r2,r2,3
    c18c:	10c7883a 	add	r3,r2,r3
    c190:	e0bffd17 	ldw	r2,-12(fp)
    c194:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
    c198:	e0bff917 	ldw	r2,-28(fp)
    c19c:	00c00074 	movhi	r3,1
    c1a0:	18c2c604 	addi	r3,r3,2840
    c1a4:	100490fa 	slli	r2,r2,3
    c1a8:	10c5883a 	add	r2,r2,r3
    c1ac:	10c00104 	addi	r3,r2,4
    c1b0:	e0bffe17 	ldw	r2,-8(fp)
    c1b4:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    c1b8:	e0bffd17 	ldw	r2,-12(fp)
    c1bc:	1005003a 	cmpeq	r2,r2,zero
    c1c0:	1000051e 	bne	r2,zero,c1d8 <alt_iic_isr_register+0xb8>
    c1c4:	e17ff917 	ldw	r5,-28(fp)
    c1c8:	e13ffb17 	ldw	r4,-20(fp)
    c1cc:	000bf9c0 	call	bf9c <alt_ic_irq_enable>
    c1d0:	e0bfff15 	stw	r2,-4(fp)
    c1d4:	00000406 	br	c1e8 <alt_iic_isr_register+0xc8>
    c1d8:	e17ff917 	ldw	r5,-28(fp)
    c1dc:	e13ffb17 	ldw	r4,-20(fp)
    c1e0:	000c0380 	call	c038 <alt_ic_irq_disable>
    c1e4:	e0bfff15 	stw	r2,-4(fp)
    c1e8:	e0bfff17 	ldw	r2,-4(fp)
    c1ec:	e0bffa15 	stw	r2,-24(fp)
    c1f0:	e0bff817 	ldw	r2,-32(fp)
    c1f4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c1f8:	e0bff617 	ldw	r2,-40(fp)
    c1fc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    c200:	e0bffa17 	ldw	r2,-24(fp)
}
    c204:	e037883a 	mov	sp,fp
    c208:	dfc00117 	ldw	ra,4(sp)
    c20c:	df000017 	ldw	fp,0(sp)
    c210:	dec00204 	addi	sp,sp,8
    c214:	f800283a 	ret

0000c218 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    c218:	defff904 	addi	sp,sp,-28
    c21c:	dfc00615 	stw	ra,24(sp)
    c220:	df000515 	stw	fp,20(sp)
    c224:	df000504 	addi	fp,sp,20
    c228:	e13ffc15 	stw	r4,-16(fp)
    c22c:	e17ffd15 	stw	r5,-12(fp)
    c230:	e1bffe15 	stw	r6,-8(fp)
    c234:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    c238:	e13ffd17 	ldw	r4,-12(fp)
    c23c:	e17ffe17 	ldw	r5,-8(fp)
    c240:	e1bfff17 	ldw	r6,-4(fp)
    c244:	000c4300 	call	c430 <open>
    c248:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    c24c:	e0bffb17 	ldw	r2,-20(fp)
    c250:	1004803a 	cmplt	r2,r2,zero
    c254:	10001c1e 	bne	r2,zero,c2c8 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
    c258:	e0bffb17 	ldw	r2,-20(fp)
    c25c:	00c00074 	movhi	r3,1
    c260:	18f6cc04 	addi	r3,r3,-9424
    c264:	10800324 	muli	r2,r2,12
    c268:	10c5883a 	add	r2,r2,r3
    c26c:	10c00017 	ldw	r3,0(r2)
    c270:	e0bffc17 	ldw	r2,-16(fp)
    c274:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    c278:	e0bffb17 	ldw	r2,-20(fp)
    c27c:	00c00074 	movhi	r3,1
    c280:	18f6cc04 	addi	r3,r3,-9424
    c284:	10800324 	muli	r2,r2,12
    c288:	10c5883a 	add	r2,r2,r3
    c28c:	10800104 	addi	r2,r2,4
    c290:	10c00017 	ldw	r3,0(r2)
    c294:	e0bffc17 	ldw	r2,-16(fp)
    c298:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    c29c:	e0bffb17 	ldw	r2,-20(fp)
    c2a0:	00c00074 	movhi	r3,1
    c2a4:	18f6cc04 	addi	r3,r3,-9424
    c2a8:	10800324 	muli	r2,r2,12
    c2ac:	10c5883a 	add	r2,r2,r3
    c2b0:	10800204 	addi	r2,r2,8
    c2b4:	10c00017 	ldw	r3,0(r2)
    c2b8:	e0bffc17 	ldw	r2,-16(fp)
    c2bc:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    c2c0:	e13ffb17 	ldw	r4,-20(fp)
    c2c4:	000a2d00 	call	a2d0 <alt_release_fd>
  }
} 
    c2c8:	e037883a 	mov	sp,fp
    c2cc:	dfc00117 	ldw	ra,4(sp)
    c2d0:	df000017 	ldw	fp,0(sp)
    c2d4:	dec00204 	addi	sp,sp,8
    c2d8:	f800283a 	ret

0000c2dc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    c2dc:	defffb04 	addi	sp,sp,-20
    c2e0:	dfc00415 	stw	ra,16(sp)
    c2e4:	df000315 	stw	fp,12(sp)
    c2e8:	df000304 	addi	fp,sp,12
    c2ec:	e13ffd15 	stw	r4,-12(fp)
    c2f0:	e17ffe15 	stw	r5,-8(fp)
    c2f4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    c2f8:	01000074 	movhi	r4,1
    c2fc:	2136cf04 	addi	r4,r4,-9412
    c300:	e17ffd17 	ldw	r5,-12(fp)
    c304:	01800044 	movi	r6,1
    c308:	01c07fc4 	movi	r7,511
    c30c:	000c2180 	call	c218 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    c310:	01000074 	movhi	r4,1
    c314:	2136cc04 	addi	r4,r4,-9424
    c318:	e17ffe17 	ldw	r5,-8(fp)
    c31c:	000d883a 	mov	r6,zero
    c320:	01c07fc4 	movi	r7,511
    c324:	000c2180 	call	c218 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    c328:	01000074 	movhi	r4,1
    c32c:	2136d204 	addi	r4,r4,-9400
    c330:	e17fff17 	ldw	r5,-4(fp)
    c334:	01800044 	movi	r6,1
    c338:	01c07fc4 	movi	r7,511
    c33c:	000c2180 	call	c218 <alt_open_fd>
}  
    c340:	e037883a 	mov	sp,fp
    c344:	dfc00117 	ldw	ra,4(sp)
    c348:	df000017 	ldw	fp,0(sp)
    c34c:	dec00204 	addi	sp,sp,8
    c350:	f800283a 	ret

0000c354 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    c354:	defffc04 	addi	sp,sp,-16
    c358:	df000315 	stw	fp,12(sp)
    c35c:	df000304 	addi	fp,sp,12
    c360:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    c364:	e0bffe17 	ldw	r2,-8(fp)
    c368:	10800217 	ldw	r2,8(r2)
    c36c:	10d00034 	orhi	r3,r2,16384
    c370:	e0bffe17 	ldw	r2,-8(fp)
    c374:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    c378:	e03ffd15 	stw	zero,-12(fp)
    c37c:	00002006 	br	c400 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    c380:	e0bffd17 	ldw	r2,-12(fp)
    c384:	00c00074 	movhi	r3,1
    c388:	18f6cc04 	addi	r3,r3,-9424
    c38c:	10800324 	muli	r2,r2,12
    c390:	10c5883a 	add	r2,r2,r3
    c394:	10c00017 	ldw	r3,0(r2)
    c398:	e0bffe17 	ldw	r2,-8(fp)
    c39c:	10800017 	ldw	r2,0(r2)
    c3a0:	1880141e 	bne	r3,r2,c3f4 <alt_file_locked+0xa0>
    c3a4:	e0bffd17 	ldw	r2,-12(fp)
    c3a8:	00c00074 	movhi	r3,1
    c3ac:	18f6cc04 	addi	r3,r3,-9424
    c3b0:	10800324 	muli	r2,r2,12
    c3b4:	10c5883a 	add	r2,r2,r3
    c3b8:	10800204 	addi	r2,r2,8
    c3bc:	10800017 	ldw	r2,0(r2)
    c3c0:	1004403a 	cmpge	r2,r2,zero
    c3c4:	10000b1e 	bne	r2,zero,c3f4 <alt_file_locked+0xa0>
    c3c8:	e0bffd17 	ldw	r2,-12(fp)
    c3cc:	10800324 	muli	r2,r2,12
    c3d0:	1007883a 	mov	r3,r2
    c3d4:	00800074 	movhi	r2,1
    c3d8:	10b6cc04 	addi	r2,r2,-9424
    c3dc:	1887883a 	add	r3,r3,r2
    c3e0:	e0bffe17 	ldw	r2,-8(fp)
    c3e4:	18800326 	beq	r3,r2,c3f4 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    c3e8:	00bffcc4 	movi	r2,-13
    c3ec:	e0bfff15 	stw	r2,-4(fp)
    c3f0:	00000a06 	br	c41c <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    c3f4:	e0bffd17 	ldw	r2,-12(fp)
    c3f8:	10800044 	addi	r2,r2,1
    c3fc:	e0bffd15 	stw	r2,-12(fp)
    c400:	00800074 	movhi	r2,1
    c404:	10bbb004 	addi	r2,r2,-4416
    c408:	10800017 	ldw	r2,0(r2)
    c40c:	1007883a 	mov	r3,r2
    c410:	e0bffd17 	ldw	r2,-12(fp)
    c414:	18bfda2e 	bgeu	r3,r2,c380 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    c418:	e03fff15 	stw	zero,-4(fp)
    c41c:	e0bfff17 	ldw	r2,-4(fp)
}
    c420:	e037883a 	mov	sp,fp
    c424:	df000017 	ldw	fp,0(sp)
    c428:	dec00104 	addi	sp,sp,4
    c42c:	f800283a 	ret

0000c430 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    c430:	defff404 	addi	sp,sp,-48
    c434:	dfc00b15 	stw	ra,44(sp)
    c438:	df000a15 	stw	fp,40(sp)
    c43c:	df000a04 	addi	fp,sp,40
    c440:	e13ffb15 	stw	r4,-20(fp)
    c444:	e17ffc15 	stw	r5,-16(fp)
    c448:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    c44c:	00bfffc4 	movi	r2,-1
    c450:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
    c454:	00bffb44 	movi	r2,-19
    c458:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
    c45c:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    c460:	e13ffb17 	ldw	r4,-20(fp)
    c464:	01400074 	movhi	r5,1
    c468:	297bae04 	addi	r5,r5,-4424
    c46c:	000c7dc0 	call	c7dc <alt_find_dev>
    c470:	e0bffa15 	stw	r2,-24(fp)
    c474:	e0bffa17 	ldw	r2,-24(fp)
    c478:	1004c03a 	cmpne	r2,r2,zero
    c47c:	1000051e 	bne	r2,zero,c494 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    c480:	e13ffb17 	ldw	r4,-20(fp)
    c484:	000c8700 	call	c870 <alt_find_file>
    c488:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
    c48c:	00800044 	movi	r2,1
    c490:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    c494:	e0bffa17 	ldw	r2,-24(fp)
    c498:	1005003a 	cmpeq	r2,r2,zero
    c49c:	1000301e 	bne	r2,zero,c560 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
    c4a0:	e13ffa17 	ldw	r4,-24(fp)
    c4a4:	000c9900 	call	c990 <alt_get_fd>
    c4a8:	e0bff815 	stw	r2,-32(fp)
    c4ac:	e0bff817 	ldw	r2,-32(fp)
    c4b0:	1004403a 	cmpge	r2,r2,zero
    c4b4:	1000031e 	bne	r2,zero,c4c4 <open+0x94>
    {
      status = index;
    c4b8:	e0bff817 	ldw	r2,-32(fp)
    c4bc:	e0bff715 	stw	r2,-36(fp)
    c4c0:	00002906 	br	c568 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
    c4c4:	e0bff817 	ldw	r2,-32(fp)
    c4c8:	10800324 	muli	r2,r2,12
    c4cc:	1007883a 	mov	r3,r2
    c4d0:	00800074 	movhi	r2,1
    c4d4:	10b6cc04 	addi	r2,r2,-9424
    c4d8:	1885883a 	add	r2,r3,r2
    c4dc:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    c4e0:	e0fffc17 	ldw	r3,-16(fp)
    c4e4:	00900034 	movhi	r2,16384
    c4e8:	10bfffc4 	addi	r2,r2,-1
    c4ec:	1886703a 	and	r3,r3,r2
    c4f0:	e0bff917 	ldw	r2,-28(fp)
    c4f4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    c4f8:	e0bff617 	ldw	r2,-40(fp)
    c4fc:	1004c03a 	cmpne	r2,r2,zero
    c500:	1000061e 	bne	r2,zero,c51c <open+0xec>
    c504:	e13ff917 	ldw	r4,-28(fp)
    c508:	000c3540 	call	c354 <alt_file_locked>
    c50c:	e0bff715 	stw	r2,-36(fp)
    c510:	e0bff717 	ldw	r2,-36(fp)
    c514:	1004803a 	cmplt	r2,r2,zero
    c518:	1000131e 	bne	r2,zero,c568 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    c51c:	e0bffa17 	ldw	r2,-24(fp)
    c520:	10800317 	ldw	r2,12(r2)
    c524:	1005003a 	cmpeq	r2,r2,zero
    c528:	1000091e 	bne	r2,zero,c550 <open+0x120>
    c52c:	e0bffa17 	ldw	r2,-24(fp)
    c530:	10800317 	ldw	r2,12(r2)
    c534:	e13ff917 	ldw	r4,-28(fp)
    c538:	e17ffb17 	ldw	r5,-20(fp)
    c53c:	e1bffc17 	ldw	r6,-16(fp)
    c540:	e1fffd17 	ldw	r7,-12(fp)
    c544:	103ee83a 	callr	r2
    c548:	e0bfff15 	stw	r2,-4(fp)
    c54c:	00000106 	br	c554 <open+0x124>
    c550:	e03fff15 	stw	zero,-4(fp)
    c554:	e0bfff17 	ldw	r2,-4(fp)
    c558:	e0bff715 	stw	r2,-36(fp)
    c55c:	00000206 	br	c568 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
    c560:	00bffb44 	movi	r2,-19
    c564:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    c568:	e0bff717 	ldw	r2,-36(fp)
    c56c:	1004403a 	cmpge	r2,r2,zero
    c570:	1000091e 	bne	r2,zero,c598 <open+0x168>
  {
    alt_release_fd (index);  
    c574:	e13ff817 	ldw	r4,-32(fp)
    c578:	000a2d00 	call	a2d0 <alt_release_fd>
    ALT_ERRNO = -status;
    c57c:	000c5b80 	call	c5b8 <alt_get_errno>
    c580:	e0fff717 	ldw	r3,-36(fp)
    c584:	00c7c83a 	sub	r3,zero,r3
    c588:	10c00015 	stw	r3,0(r2)
    return -1;
    c58c:	00bfffc4 	movi	r2,-1
    c590:	e0bffe15 	stw	r2,-8(fp)
    c594:	00000206 	br	c5a0 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
    c598:	e0bff817 	ldw	r2,-32(fp)
    c59c:	e0bffe15 	stw	r2,-8(fp)
    c5a0:	e0bffe17 	ldw	r2,-8(fp)
}
    c5a4:	e037883a 	mov	sp,fp
    c5a8:	dfc00117 	ldw	ra,4(sp)
    c5ac:	df000017 	ldw	fp,0(sp)
    c5b0:	dec00204 	addi	sp,sp,8
    c5b4:	f800283a 	ret

0000c5b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    c5b8:	defffd04 	addi	sp,sp,-12
    c5bc:	dfc00215 	stw	ra,8(sp)
    c5c0:	df000115 	stw	fp,4(sp)
    c5c4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    c5c8:	00800074 	movhi	r2,1
    c5cc:	10bbb104 	addi	r2,r2,-4412
    c5d0:	10800017 	ldw	r2,0(r2)
    c5d4:	1005003a 	cmpeq	r2,r2,zero
    c5d8:	1000061e 	bne	r2,zero,c5f4 <alt_get_errno+0x3c>
    c5dc:	00800074 	movhi	r2,1
    c5e0:	10bbb104 	addi	r2,r2,-4412
    c5e4:	10800017 	ldw	r2,0(r2)
    c5e8:	103ee83a 	callr	r2
    c5ec:	e0bfff15 	stw	r2,-4(fp)
    c5f0:	00000306 	br	c600 <alt_get_errno+0x48>
    c5f4:	00800074 	movhi	r2,1
    c5f8:	1082b504 	addi	r2,r2,2772
    c5fc:	e0bfff15 	stw	r2,-4(fp)
    c600:	e0bfff17 	ldw	r2,-4(fp)
}
    c604:	e037883a 	mov	sp,fp
    c608:	dfc00117 	ldw	ra,4(sp)
    c60c:	df000017 	ldw	fp,0(sp)
    c610:	dec00204 	addi	sp,sp,8
    c614:	f800283a 	ret

0000c618 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    c618:	defffa04 	addi	sp,sp,-24
    c61c:	df000515 	stw	fp,20(sp)
    c620:	df000504 	addi	fp,sp,20
    c624:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c628:	0005303a 	rdctl	r2,status
    c62c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c630:	e0fffd17 	ldw	r3,-12(fp)
    c634:	00bfff84 	movi	r2,-2
    c638:	1884703a 	and	r2,r3,r2
    c63c:	1001703a 	wrctl	status,r2
  
  return context;
    c640:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    c644:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
    c648:	e0bfff17 	ldw	r2,-4(fp)
    c64c:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    c650:	e0bffc17 	ldw	r2,-16(fp)
    c654:	10c00017 	ldw	r3,0(r2)
    c658:	e0bffc17 	ldw	r2,-16(fp)
    c65c:	10800117 	ldw	r2,4(r2)
    c660:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
    c664:	e0bffc17 	ldw	r2,-16(fp)
    c668:	10c00117 	ldw	r3,4(r2)
    c66c:	e0bffc17 	ldw	r2,-16(fp)
    c670:	10800017 	ldw	r2,0(r2)
    c674:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    c678:	e0fffc17 	ldw	r3,-16(fp)
    c67c:	e0bffc17 	ldw	r2,-16(fp)
    c680:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
    c684:	e0fffc17 	ldw	r3,-16(fp)
    c688:	e0bffc17 	ldw	r2,-16(fp)
    c68c:	18800015 	stw	r2,0(r3)
    c690:	e0bffe17 	ldw	r2,-8(fp)
    c694:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c698:	e0bffb17 	ldw	r2,-20(fp)
    c69c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    c6a0:	e037883a 	mov	sp,fp
    c6a4:	df000017 	ldw	fp,0(sp)
    c6a8:	dec00104 	addi	sp,sp,4
    c6ac:	f800283a 	ret

0000c6b0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    c6b0:	defffb04 	addi	sp,sp,-20
    c6b4:	dfc00415 	stw	ra,16(sp)
    c6b8:	df000315 	stw	fp,12(sp)
    c6bc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    c6c0:	d0a00e17 	ldw	r2,-32712(gp)
    c6c4:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    c6c8:	d0a71517 	ldw	r2,-25516(gp)
    c6cc:	10800044 	addi	r2,r2,1
    c6d0:	d0a71515 	stw	r2,-25516(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    c6d4:	00003106 	br	c79c <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
    c6d8:	e0bffe17 	ldw	r2,-8(fp)
    c6dc:	10800017 	ldw	r2,0(r2)
    c6e0:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    c6e4:	e0bffe17 	ldw	r2,-8(fp)
    c6e8:	10800403 	ldbu	r2,16(r2)
    c6ec:	10803fcc 	andi	r2,r2,255
    c6f0:	1005003a 	cmpeq	r2,r2,zero
    c6f4:	1000051e 	bne	r2,zero,c70c <alt_tick+0x5c>
    c6f8:	d0a71517 	ldw	r2,-25516(gp)
    c6fc:	1004c03a 	cmpne	r2,r2,zero
    c700:	1000021e 	bne	r2,zero,c70c <alt_tick+0x5c>
    {
      alarm->rollover = 0;
    c704:	e0bffe17 	ldw	r2,-8(fp)
    c708:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    c70c:	e0bffe17 	ldw	r2,-8(fp)
    c710:	10c00217 	ldw	r3,8(r2)
    c714:	d0a71517 	ldw	r2,-25516(gp)
    c718:	10c01e36 	bltu	r2,r3,c794 <alt_tick+0xe4>
    c71c:	e0bffe17 	ldw	r2,-8(fp)
    c720:	10800403 	ldbu	r2,16(r2)
    c724:	10803fcc 	andi	r2,r2,255
    c728:	1004c03a 	cmpne	r2,r2,zero
    c72c:	1000191e 	bne	r2,zero,c794 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
    c730:	e0bffe17 	ldw	r2,-8(fp)
    c734:	10c00317 	ldw	r3,12(r2)
    c738:	e0bffe17 	ldw	r2,-8(fp)
    c73c:	11000517 	ldw	r4,20(r2)
    c740:	183ee83a 	callr	r3
    c744:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    c748:	e0bffd17 	ldw	r2,-12(fp)
    c74c:	1004c03a 	cmpne	r2,r2,zero
    c750:	1000031e 	bne	r2,zero,c760 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
    c754:	e13ffe17 	ldw	r4,-8(fp)
    c758:	000c6180 	call	c618 <alt_alarm_stop>
    c75c:	00000d06 	br	c794 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
    c760:	e0bffe17 	ldw	r2,-8(fp)
    c764:	10c00217 	ldw	r3,8(r2)
    c768:	e0bffd17 	ldw	r2,-12(fp)
    c76c:	1887883a 	add	r3,r3,r2
    c770:	e0bffe17 	ldw	r2,-8(fp)
    c774:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    c778:	e0bffe17 	ldw	r2,-8(fp)
    c77c:	10c00217 	ldw	r3,8(r2)
    c780:	d0a71517 	ldw	r2,-25516(gp)
    c784:	1880032e 	bgeu	r3,r2,c794 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
    c788:	e0fffe17 	ldw	r3,-8(fp)
    c78c:	00800044 	movi	r2,1
    c790:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
    c794:	e0bfff17 	ldw	r2,-4(fp)
    c798:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    c79c:	d0e00e04 	addi	r3,gp,-32712
    c7a0:	e0bffe17 	ldw	r2,-8(fp)
    c7a4:	10ffcc1e 	bne	r2,r3,c6d8 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    c7a8:	e037883a 	mov	sp,fp
    c7ac:	dfc00117 	ldw	ra,4(sp)
    c7b0:	df000017 	ldw	fp,0(sp)
    c7b4:	dec00204 	addi	sp,sp,8
    c7b8:	f800283a 	ret

0000c7bc <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    c7bc:	deffff04 	addi	sp,sp,-4
    c7c0:	df000015 	stw	fp,0(sp)
    c7c4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    c7c8:	000170fa 	wrctl	ienable,zero
}
    c7cc:	e037883a 	mov	sp,fp
    c7d0:	df000017 	ldw	fp,0(sp)
    c7d4:	dec00104 	addi	sp,sp,4
    c7d8:	f800283a 	ret

0000c7dc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    c7dc:	defff904 	addi	sp,sp,-28
    c7e0:	dfc00615 	stw	ra,24(sp)
    c7e4:	df000515 	stw	fp,20(sp)
    c7e8:	df000504 	addi	fp,sp,20
    c7ec:	e13ffd15 	stw	r4,-12(fp)
    c7f0:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
    c7f4:	e0bffe17 	ldw	r2,-8(fp)
    c7f8:	10800017 	ldw	r2,0(r2)
    c7fc:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    c800:	e13ffd17 	ldw	r4,-12(fp)
    c804:	00004740 	call	474 <strlen>
    c808:	10800044 	addi	r2,r2,1
    c80c:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    c810:	00000d06 	br	c848 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    c814:	e0bffc17 	ldw	r2,-16(fp)
    c818:	11000217 	ldw	r4,8(r2)
    c81c:	e1bffb17 	ldw	r6,-20(fp)
    c820:	e17ffd17 	ldw	r5,-12(fp)
    c824:	000cb240 	call	cb24 <memcmp>
    c828:	1004c03a 	cmpne	r2,r2,zero
    c82c:	1000031e 	bne	r2,zero,c83c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    c830:	e0bffc17 	ldw	r2,-16(fp)
    c834:	e0bfff15 	stw	r2,-4(fp)
    c838:	00000706 	br	c858 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    c83c:	e0bffc17 	ldw	r2,-16(fp)
    c840:	10800017 	ldw	r2,0(r2)
    c844:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    c848:	e0fffe17 	ldw	r3,-8(fp)
    c84c:	e0bffc17 	ldw	r2,-16(fp)
    c850:	10fff01e 	bne	r2,r3,c814 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    c854:	e03fff15 	stw	zero,-4(fp)
    c858:	e0bfff17 	ldw	r2,-4(fp)
}
    c85c:	e037883a 	mov	sp,fp
    c860:	dfc00117 	ldw	ra,4(sp)
    c864:	df000017 	ldw	fp,0(sp)
    c868:	dec00204 	addi	sp,sp,8
    c86c:	f800283a 	ret

0000c870 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    c870:	defffa04 	addi	sp,sp,-24
    c874:	dfc00515 	stw	ra,20(sp)
    c878:	df000415 	stw	fp,16(sp)
    c87c:	df000404 	addi	fp,sp,16
    c880:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    c884:	00800074 	movhi	r2,1
    c888:	10bbac04 	addi	r2,r2,-4432
    c88c:	10800017 	ldw	r2,0(r2)
    c890:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    c894:	00003306 	br	c964 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
    c898:	e0bffd17 	ldw	r2,-12(fp)
    c89c:	11000217 	ldw	r4,8(r2)
    c8a0:	00004740 	call	474 <strlen>
    c8a4:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
    c8a8:	e0bffd17 	ldw	r2,-12(fp)
    c8ac:	10c00217 	ldw	r3,8(r2)
    c8b0:	e0bffc17 	ldw	r2,-16(fp)
    c8b4:	1885883a 	add	r2,r3,r2
    c8b8:	10bfffc4 	addi	r2,r2,-1
    c8bc:	10800003 	ldbu	r2,0(r2)
    c8c0:	10803fcc 	andi	r2,r2,255
    c8c4:	1080201c 	xori	r2,r2,128
    c8c8:	10bfe004 	addi	r2,r2,-128
    c8cc:	10800bd8 	cmpnei	r2,r2,47
    c8d0:	1000031e 	bne	r2,zero,c8e0 <alt_find_file+0x70>
    {
      len -= 1;
    c8d4:	e0bffc17 	ldw	r2,-16(fp)
    c8d8:	10bfffc4 	addi	r2,r2,-1
    c8dc:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    c8e0:	e0bffc17 	ldw	r2,-16(fp)
    c8e4:	1007883a 	mov	r3,r2
    c8e8:	e0bffe17 	ldw	r2,-8(fp)
    c8ec:	1885883a 	add	r2,r3,r2
    c8f0:	10800003 	ldbu	r2,0(r2)
    c8f4:	10803fcc 	andi	r2,r2,255
    c8f8:	1080201c 	xori	r2,r2,128
    c8fc:	10bfe004 	addi	r2,r2,-128
    c900:	10800be0 	cmpeqi	r2,r2,47
    c904:	10000a1e 	bne	r2,zero,c930 <alt_find_file+0xc0>
    c908:	e0bffc17 	ldw	r2,-16(fp)
    c90c:	1007883a 	mov	r3,r2
    c910:	e0bffe17 	ldw	r2,-8(fp)
    c914:	1885883a 	add	r2,r3,r2
    c918:	10800003 	ldbu	r2,0(r2)
    c91c:	10803fcc 	andi	r2,r2,255
    c920:	1080201c 	xori	r2,r2,128
    c924:	10bfe004 	addi	r2,r2,-128
    c928:	1004c03a 	cmpne	r2,r2,zero
    c92c:	10000a1e 	bne	r2,zero,c958 <alt_find_file+0xe8>
    c930:	e0bffd17 	ldw	r2,-12(fp)
    c934:	11000217 	ldw	r4,8(r2)
    c938:	e1bffc17 	ldw	r6,-16(fp)
    c93c:	e17ffe17 	ldw	r5,-8(fp)
    c940:	000cb240 	call	cb24 <memcmp>
    c944:	1004c03a 	cmpne	r2,r2,zero
    c948:	1000031e 	bne	r2,zero,c958 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    c94c:	e0bffd17 	ldw	r2,-12(fp)
    c950:	e0bfff15 	stw	r2,-4(fp)
    c954:	00000806 	br	c978 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
    c958:	e0bffd17 	ldw	r2,-12(fp)
    c95c:	10800017 	ldw	r2,0(r2)
    c960:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    c964:	00c00074 	movhi	r3,1
    c968:	18fbac04 	addi	r3,r3,-4432
    c96c:	e0bffd17 	ldw	r2,-12(fp)
    c970:	10ffc91e 	bne	r2,r3,c898 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    c974:	e03fff15 	stw	zero,-4(fp)
    c978:	e0bfff17 	ldw	r2,-4(fp)
}
    c97c:	e037883a 	mov	sp,fp
    c980:	dfc00117 	ldw	ra,4(sp)
    c984:	df000017 	ldw	fp,0(sp)
    c988:	dec00204 	addi	sp,sp,8
    c98c:	f800283a 	ret

0000c990 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    c990:	defffc04 	addi	sp,sp,-16
    c994:	df000315 	stw	fp,12(sp)
    c998:	df000304 	addi	fp,sp,12
    c99c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    c9a0:	00bffa04 	movi	r2,-24
    c9a4:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    c9a8:	e03ffe15 	stw	zero,-8(fp)
    c9ac:	00001e06 	br	ca28 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
    c9b0:	e0bffe17 	ldw	r2,-8(fp)
    c9b4:	00c00074 	movhi	r3,1
    c9b8:	18f6cc04 	addi	r3,r3,-9424
    c9bc:	10800324 	muli	r2,r2,12
    c9c0:	10c5883a 	add	r2,r2,r3
    c9c4:	10800017 	ldw	r2,0(r2)
    c9c8:	1004c03a 	cmpne	r2,r2,zero
    c9cc:	1000131e 	bne	r2,zero,ca1c <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
    c9d0:	e0bffe17 	ldw	r2,-8(fp)
    c9d4:	00c00074 	movhi	r3,1
    c9d8:	18f6cc04 	addi	r3,r3,-9424
    c9dc:	10800324 	muli	r2,r2,12
    c9e0:	10c7883a 	add	r3,r2,r3
    c9e4:	e0bfff17 	ldw	r2,-4(fp)
    c9e8:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
    c9ec:	00800074 	movhi	r2,1
    c9f0:	10bbb004 	addi	r2,r2,-4416
    c9f4:	10c00017 	ldw	r3,0(r2)
    c9f8:	e0bffe17 	ldw	r2,-8(fp)
    c9fc:	1880040e 	bge	r3,r2,ca10 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
    ca00:	00c00074 	movhi	r3,1
    ca04:	18fbb004 	addi	r3,r3,-4416
    ca08:	e0bffe17 	ldw	r2,-8(fp)
    ca0c:	18800015 	stw	r2,0(r3)
      }
      rc = i;
    ca10:	e0bffe17 	ldw	r2,-8(fp)
    ca14:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    ca18:	00000606 	br	ca34 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    ca1c:	e0bffe17 	ldw	r2,-8(fp)
    ca20:	10800044 	addi	r2,r2,1
    ca24:	e0bffe15 	stw	r2,-8(fp)
    ca28:	e0bffe17 	ldw	r2,-8(fp)
    ca2c:	10800810 	cmplti	r2,r2,32
    ca30:	103fdf1e 	bne	r2,zero,c9b0 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    ca34:	e0bffd17 	ldw	r2,-12(fp)
}
    ca38:	e037883a 	mov	sp,fp
    ca3c:	df000017 	ldw	fp,0(sp)
    ca40:	dec00104 	addi	sp,sp,4
    ca44:	f800283a 	ret

0000ca48 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    ca48:	defffb04 	addi	sp,sp,-20
    ca4c:	df000415 	stw	fp,16(sp)
    ca50:	df000404 	addi	fp,sp,16
    ca54:	e13ffe15 	stw	r4,-8(fp)
    ca58:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    ca5c:	e0bfff17 	ldw	r2,-4(fp)
    ca60:	10880070 	cmpltui	r2,r2,8193
    ca64:	1000021e 	bne	r2,zero,ca70 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    ca68:	00880004 	movi	r2,8192
    ca6c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    ca70:	e0fffe17 	ldw	r3,-8(fp)
    ca74:	e0bfff17 	ldw	r2,-4(fp)
    ca78:	1885883a 	add	r2,r3,r2
    ca7c:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    ca80:	e0bffe17 	ldw	r2,-8(fp)
    ca84:	e0bffd15 	stw	r2,-12(fp)
    ca88:	00000506 	br	caa0 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    ca8c:	e0bffd17 	ldw	r2,-12(fp)
    ca90:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    ca94:	e0bffd17 	ldw	r2,-12(fp)
    ca98:	10800804 	addi	r2,r2,32
    ca9c:	e0bffd15 	stw	r2,-12(fp)
    caa0:	e0fffd17 	ldw	r3,-12(fp)
    caa4:	e0bffc17 	ldw	r2,-16(fp)
    caa8:	18bff836 	bltu	r3,r2,ca8c <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    caac:	e0bffe17 	ldw	r2,-8(fp)
    cab0:	108007cc 	andi	r2,r2,31
    cab4:	1005003a 	cmpeq	r2,r2,zero
    cab8:	1000021e 	bne	r2,zero,cac4 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    cabc:	e0bffd17 	ldw	r2,-12(fp)
    cac0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    cac4:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    cac8:	e037883a 	mov	sp,fp
    cacc:	df000017 	ldw	fp,0(sp)
    cad0:	dec00104 	addi	sp,sp,4
    cad4:	f800283a 	ret

0000cad8 <atexit>:
    cad8:	200b883a 	mov	r5,r4
    cadc:	000d883a 	mov	r6,zero
    cae0:	0009883a 	mov	r4,zero
    cae4:	000f883a 	mov	r7,zero
    cae8:	000cb981 	jmpi	cb98 <__register_exitproc>

0000caec <exit>:
    caec:	defffe04 	addi	sp,sp,-8
    caf0:	000b883a 	mov	r5,zero
    caf4:	dc000015 	stw	r16,0(sp)
    caf8:	dfc00115 	stw	ra,4(sp)
    cafc:	2021883a 	mov	r16,r4
    cb00:	000ccd00 	call	ccd0 <__call_exitprocs>
    cb04:	00800074 	movhi	r2,1
    cb08:	10bba704 	addi	r2,r2,-4452
    cb0c:	11000017 	ldw	r4,0(r2)
    cb10:	20800f17 	ldw	r2,60(r4)
    cb14:	10000126 	beq	r2,zero,cb1c <exit+0x30>
    cb18:	103ee83a 	callr	r2
    cb1c:	8009883a 	mov	r4,r16
    cb20:	000cec00 	call	cec0 <_exit>

0000cb24 <memcmp>:
    cb24:	00c000c4 	movi	r3,3
    cb28:	1980032e 	bgeu	r3,r6,cb38 <memcmp+0x14>
    cb2c:	2144b03a 	or	r2,r4,r5
    cb30:	10c4703a 	and	r2,r2,r3
    cb34:	10000f26 	beq	r2,zero,cb74 <memcmp+0x50>
    cb38:	31ffffc4 	addi	r7,r6,-1
    cb3c:	3000061e 	bne	r6,zero,cb58 <memcmp+0x34>
    cb40:	00000a06 	br	cb6c <memcmp+0x48>
    cb44:	39ffffc4 	addi	r7,r7,-1
    cb48:	00bfffc4 	movi	r2,-1
    cb4c:	21000044 	addi	r4,r4,1
    cb50:	29400044 	addi	r5,r5,1
    cb54:	38800526 	beq	r7,r2,cb6c <memcmp+0x48>
    cb58:	20c00003 	ldbu	r3,0(r4)
    cb5c:	28800003 	ldbu	r2,0(r5)
    cb60:	18bff826 	beq	r3,r2,cb44 <memcmp+0x20>
    cb64:	1885c83a 	sub	r2,r3,r2
    cb68:	f800283a 	ret
    cb6c:	0005883a 	mov	r2,zero
    cb70:	f800283a 	ret
    cb74:	180f883a 	mov	r7,r3
    cb78:	20c00017 	ldw	r3,0(r4)
    cb7c:	28800017 	ldw	r2,0(r5)
    cb80:	18bfed1e 	bne	r3,r2,cb38 <memcmp+0x14>
    cb84:	31bfff04 	addi	r6,r6,-4
    cb88:	21000104 	addi	r4,r4,4
    cb8c:	29400104 	addi	r5,r5,4
    cb90:	39bff936 	bltu	r7,r6,cb78 <memcmp+0x54>
    cb94:	003fe806 	br	cb38 <memcmp+0x14>

0000cb98 <__register_exitproc>:
    cb98:	defffa04 	addi	sp,sp,-24
    cb9c:	00800074 	movhi	r2,1
    cba0:	10bba704 	addi	r2,r2,-4452
    cba4:	dc000015 	stw	r16,0(sp)
    cba8:	14000017 	ldw	r16,0(r2)
    cbac:	dd000415 	stw	r20,16(sp)
    cbb0:	2829883a 	mov	r20,r5
    cbb4:	81405217 	ldw	r5,328(r16)
    cbb8:	dcc00315 	stw	r19,12(sp)
    cbbc:	dc800215 	stw	r18,8(sp)
    cbc0:	dc400115 	stw	r17,4(sp)
    cbc4:	dfc00515 	stw	ra,20(sp)
    cbc8:	2023883a 	mov	r17,r4
    cbcc:	3027883a 	mov	r19,r6
    cbd0:	3825883a 	mov	r18,r7
    cbd4:	28002526 	beq	r5,zero,cc6c <__register_exitproc+0xd4>
    cbd8:	29000117 	ldw	r4,4(r5)
    cbdc:	008007c4 	movi	r2,31
    cbe0:	11002716 	blt	r2,r4,cc80 <__register_exitproc+0xe8>
    cbe4:	8800101e 	bne	r17,zero,cc28 <__register_exitproc+0x90>
    cbe8:	2105883a 	add	r2,r4,r4
    cbec:	1085883a 	add	r2,r2,r2
    cbf0:	20c00044 	addi	r3,r4,1
    cbf4:	1145883a 	add	r2,r2,r5
    cbf8:	0009883a 	mov	r4,zero
    cbfc:	15000215 	stw	r20,8(r2)
    cc00:	28c00115 	stw	r3,4(r5)
    cc04:	2005883a 	mov	r2,r4
    cc08:	dfc00517 	ldw	ra,20(sp)
    cc0c:	dd000417 	ldw	r20,16(sp)
    cc10:	dcc00317 	ldw	r19,12(sp)
    cc14:	dc800217 	ldw	r18,8(sp)
    cc18:	dc400117 	ldw	r17,4(sp)
    cc1c:	dc000017 	ldw	r16,0(sp)
    cc20:	dec00604 	addi	sp,sp,24
    cc24:	f800283a 	ret
    cc28:	29802204 	addi	r6,r5,136
    cc2c:	00800044 	movi	r2,1
    cc30:	110e983a 	sll	r7,r2,r4
    cc34:	30c04017 	ldw	r3,256(r6)
    cc38:	2105883a 	add	r2,r4,r4
    cc3c:	1085883a 	add	r2,r2,r2
    cc40:	1185883a 	add	r2,r2,r6
    cc44:	19c6b03a 	or	r3,r3,r7
    cc48:	14802015 	stw	r18,128(r2)
    cc4c:	14c00015 	stw	r19,0(r2)
    cc50:	00800084 	movi	r2,2
    cc54:	30c04015 	stw	r3,256(r6)
    cc58:	88bfe31e 	bne	r17,r2,cbe8 <__register_exitproc+0x50>
    cc5c:	30804117 	ldw	r2,260(r6)
    cc60:	11c4b03a 	or	r2,r2,r7
    cc64:	30804115 	stw	r2,260(r6)
    cc68:	003fdf06 	br	cbe8 <__register_exitproc+0x50>
    cc6c:	00800074 	movhi	r2,1
    cc70:	10830604 	addi	r2,r2,3096
    cc74:	100b883a 	mov	r5,r2
    cc78:	80805215 	stw	r2,328(r16)
    cc7c:	003fd606 	br	cbd8 <__register_exitproc+0x40>
    cc80:	00800034 	movhi	r2,0
    cc84:	10800004 	addi	r2,r2,0
    cc88:	1000021e 	bne	r2,zero,cc94 <__register_exitproc+0xfc>
    cc8c:	013fffc4 	movi	r4,-1
    cc90:	003fdc06 	br	cc04 <__register_exitproc+0x6c>
    cc94:	01006404 	movi	r4,400
    cc98:	103ee83a 	callr	r2
    cc9c:	1007883a 	mov	r3,r2
    cca0:	103ffa26 	beq	r2,zero,cc8c <__register_exitproc+0xf4>
    cca4:	80805217 	ldw	r2,328(r16)
    cca8:	180b883a 	mov	r5,r3
    ccac:	18000115 	stw	zero,4(r3)
    ccb0:	18800015 	stw	r2,0(r3)
    ccb4:	80c05215 	stw	r3,328(r16)
    ccb8:	18006215 	stw	zero,392(r3)
    ccbc:	18006315 	stw	zero,396(r3)
    ccc0:	0009883a 	mov	r4,zero
    ccc4:	883fc826 	beq	r17,zero,cbe8 <__register_exitproc+0x50>
    ccc8:	003fd706 	br	cc28 <__register_exitproc+0x90>

0000cccc <register_fini>:
    cccc:	f800283a 	ret

0000ccd0 <__call_exitprocs>:
    ccd0:	00800074 	movhi	r2,1
    ccd4:	10bba704 	addi	r2,r2,-4452
    ccd8:	10800017 	ldw	r2,0(r2)
    ccdc:	defff304 	addi	sp,sp,-52
    cce0:	df000b15 	stw	fp,44(sp)
    cce4:	d8800115 	stw	r2,4(sp)
    cce8:	00800034 	movhi	r2,0
    ccec:	10800004 	addi	r2,r2,0
    ccf0:	1005003a 	cmpeq	r2,r2,zero
    ccf4:	d8800215 	stw	r2,8(sp)
    ccf8:	d8800117 	ldw	r2,4(sp)
    ccfc:	dd400815 	stw	r21,32(sp)
    cd00:	dd000715 	stw	r20,28(sp)
    cd04:	10805204 	addi	r2,r2,328
    cd08:	dfc00c15 	stw	ra,48(sp)
    cd0c:	ddc00a15 	stw	r23,40(sp)
    cd10:	dd800915 	stw	r22,36(sp)
    cd14:	dcc00615 	stw	r19,24(sp)
    cd18:	dc800515 	stw	r18,20(sp)
    cd1c:	dc400415 	stw	r17,16(sp)
    cd20:	dc000315 	stw	r16,12(sp)
    cd24:	282b883a 	mov	r21,r5
    cd28:	2039883a 	mov	fp,r4
    cd2c:	d8800015 	stw	r2,0(sp)
    cd30:	2829003a 	cmpeq	r20,r5,zero
    cd34:	d8800117 	ldw	r2,4(sp)
    cd38:	14405217 	ldw	r17,328(r2)
    cd3c:	88001026 	beq	r17,zero,cd80 <__call_exitprocs+0xb0>
    cd40:	ddc00017 	ldw	r23,0(sp)
    cd44:	88800117 	ldw	r2,4(r17)
    cd48:	8c802204 	addi	r18,r17,136
    cd4c:	143fffc4 	addi	r16,r2,-1
    cd50:	80000916 	blt	r16,zero,cd78 <__call_exitprocs+0xa8>
    cd54:	05bfffc4 	movi	r22,-1
    cd58:	a000151e 	bne	r20,zero,cdb0 <__call_exitprocs+0xe0>
    cd5c:	8409883a 	add	r4,r16,r16
    cd60:	2105883a 	add	r2,r4,r4
    cd64:	1485883a 	add	r2,r2,r18
    cd68:	10c02017 	ldw	r3,128(r2)
    cd6c:	a8c01126 	beq	r21,r3,cdb4 <__call_exitprocs+0xe4>
    cd70:	843fffc4 	addi	r16,r16,-1
    cd74:	85bff81e 	bne	r16,r22,cd58 <__call_exitprocs+0x88>
    cd78:	d8800217 	ldw	r2,8(sp)
    cd7c:	10003126 	beq	r2,zero,ce44 <__call_exitprocs+0x174>
    cd80:	dfc00c17 	ldw	ra,48(sp)
    cd84:	df000b17 	ldw	fp,44(sp)
    cd88:	ddc00a17 	ldw	r23,40(sp)
    cd8c:	dd800917 	ldw	r22,36(sp)
    cd90:	dd400817 	ldw	r21,32(sp)
    cd94:	dd000717 	ldw	r20,28(sp)
    cd98:	dcc00617 	ldw	r19,24(sp)
    cd9c:	dc800517 	ldw	r18,20(sp)
    cda0:	dc400417 	ldw	r17,16(sp)
    cda4:	dc000317 	ldw	r16,12(sp)
    cda8:	dec00d04 	addi	sp,sp,52
    cdac:	f800283a 	ret
    cdb0:	8409883a 	add	r4,r16,r16
    cdb4:	88c00117 	ldw	r3,4(r17)
    cdb8:	2105883a 	add	r2,r4,r4
    cdbc:	1445883a 	add	r2,r2,r17
    cdc0:	18ffffc4 	addi	r3,r3,-1
    cdc4:	11800217 	ldw	r6,8(r2)
    cdc8:	1c001526 	beq	r3,r16,ce20 <__call_exitprocs+0x150>
    cdcc:	10000215 	stw	zero,8(r2)
    cdd0:	303fe726 	beq	r6,zero,cd70 <__call_exitprocs+0xa0>
    cdd4:	00c00044 	movi	r3,1
    cdd8:	1c06983a 	sll	r3,r3,r16
    cddc:	90804017 	ldw	r2,256(r18)
    cde0:	8cc00117 	ldw	r19,4(r17)
    cde4:	1884703a 	and	r2,r3,r2
    cde8:	10001426 	beq	r2,zero,ce3c <__call_exitprocs+0x16c>
    cdec:	90804117 	ldw	r2,260(r18)
    cdf0:	1884703a 	and	r2,r3,r2
    cdf4:	10000c1e 	bne	r2,zero,ce28 <__call_exitprocs+0x158>
    cdf8:	2105883a 	add	r2,r4,r4
    cdfc:	1485883a 	add	r2,r2,r18
    ce00:	11400017 	ldw	r5,0(r2)
    ce04:	e009883a 	mov	r4,fp
    ce08:	303ee83a 	callr	r6
    ce0c:	88800117 	ldw	r2,4(r17)
    ce10:	98bfc81e 	bne	r19,r2,cd34 <__call_exitprocs+0x64>
    ce14:	b8800017 	ldw	r2,0(r23)
    ce18:	147fd526 	beq	r2,r17,cd70 <__call_exitprocs+0xa0>
    ce1c:	003fc506 	br	cd34 <__call_exitprocs+0x64>
    ce20:	8c000115 	stw	r16,4(r17)
    ce24:	003fea06 	br	cdd0 <__call_exitprocs+0x100>
    ce28:	2105883a 	add	r2,r4,r4
    ce2c:	1485883a 	add	r2,r2,r18
    ce30:	11000017 	ldw	r4,0(r2)
    ce34:	303ee83a 	callr	r6
    ce38:	003ff406 	br	ce0c <__call_exitprocs+0x13c>
    ce3c:	303ee83a 	callr	r6
    ce40:	003ff206 	br	ce0c <__call_exitprocs+0x13c>
    ce44:	88800117 	ldw	r2,4(r17)
    ce48:	1000081e 	bne	r2,zero,ce6c <__call_exitprocs+0x19c>
    ce4c:	89000017 	ldw	r4,0(r17)
    ce50:	20000726 	beq	r4,zero,ce70 <__call_exitprocs+0x1a0>
    ce54:	b9000015 	stw	r4,0(r23)
    ce58:	8809883a 	mov	r4,r17
    ce5c:	00000000 	call	0 <__alt_mem_sdram>
    ce60:	bc400017 	ldw	r17,0(r23)
    ce64:	883fb71e 	bne	r17,zero,cd44 <__call_exitprocs+0x74>
    ce68:	003fc506 	br	cd80 <__call_exitprocs+0xb0>
    ce6c:	89000017 	ldw	r4,0(r17)
    ce70:	882f883a 	mov	r23,r17
    ce74:	2023883a 	mov	r17,r4
    ce78:	883fb21e 	bne	r17,zero,cd44 <__call_exitprocs+0x74>
    ce7c:	003fc006 	br	cd80 <__call_exitprocs+0xb0>

0000ce80 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
    ce80:	defffd04 	addi	sp,sp,-12
    ce84:	df000215 	stw	fp,8(sp)
    ce88:	df000204 	addi	fp,sp,8
    ce8c:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
    ce90:	e0bfff17 	ldw	r2,-4(fp)
    ce94:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    ce98:	e0bffe17 	ldw	r2,-8(fp)
    ce9c:	1005003a 	cmpeq	r2,r2,zero
    cea0:	1000021e 	bne	r2,zero,ceac <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
    cea4:	002af070 	cmpltui	zero,zero,43969
    cea8:	00000106 	br	ceb0 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
    ceac:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
    ceb0:	e037883a 	mov	sp,fp
    ceb4:	df000017 	ldw	fp,0(sp)
    ceb8:	dec00104 	addi	sp,sp,4
    cebc:	f800283a 	ret

0000cec0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    cec0:	defffd04 	addi	sp,sp,-12
    cec4:	dfc00215 	stw	ra,8(sp)
    cec8:	df000115 	stw	fp,4(sp)
    cecc:	df000104 	addi	fp,sp,4
    ced0:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
    ced4:	e13fff17 	ldw	r4,-4(fp)
    ced8:	000ce800 	call	ce80 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    cedc:	003fff06 	br	cedc <_exit+0x1c>
    cee0:	00000010 	cmplti	zero,zero,0
    cee4:	00000000 	call	0 <__alt_mem_sdram>
    cee8:	00527a01 	jmpi	527a0 <_gp+0x3b908>
    ceec:	011f7c01 	jmpi	11f7c0 <_gp+0x108928>
    cef0:	001b0c0b 	ldhu	zero,27696(zero)
    cef4:	00000028 	cmpgeui	zero,zero,0
    cef8:	00000018 	cmpnei	zero,zero,0
    cefc:	0000765c 	xori	zero,zero,473
    cf00:	000005dc 	xori	zero,zero,23
    cf04:	400e4400 	call	400e440 <__alt_data_end+0x380e440>
    cf08:	92099170 	cmpltui	r8,r18,9797
    cf0c:	95079308 	cmpgei	r20,r18,7756
    cf10:	97049605 	stb	fp,4696(r18)
    cf14:	90019f03 	ldbu	zero,1660(r18)
    cf18:	9c06940a 	0x9c06940a
    cf1c:	00000002 	0x2
    cf20:	00000028 	cmpgeui	zero,zero,0
    cf24:	00000044 	movi	zero,1
    cf28:	00007c38 	rdprs	zero,zero,496
    cf2c:	000005b0 	cmpltui	zero,zero,22
    cf30:	3c0e4400 	call	3c0e440 <__alt_data_end+0x340e440>
    cf34:	92099168 	cmpgeui	r8,r18,9797
    cf38:	95079308 	cmpgei	r20,r18,7756
    cf3c:	9c039705 	stb	r16,3676(r19)
    cf40:	90019f02 	0x90019f02
    cf44:	9606940a 	0x9606940a
    cf48:	00000004 	movi	zero,0
    cf4c:	0000cccc 	andi	zero,zero,819
