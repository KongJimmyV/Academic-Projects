
lab12.elf:     file format elf32-littlenios2
lab12.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0000fb64 memsz 0x0000fb64 flags r-x
    LOAD off    0x00010b84 vaddr 0x0000fb84 paddr 0x00011974 align 2**12
         filesz 0x00001df0 memsz 0x00001df0 flags rw-
    LOAD off    0x00013764 vaddr 0x00013764 paddr 0x00013764 align 2**12
         filesz 0x00000000 memsz 0x000004f0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000f2f8  000001b4  000001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000006d8  0000f4ac  0000f4ac  000104ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001df0  0000fb84  00011974  00010b84  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000004f0  00013764  00013764  00013764  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00012974  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000e78  00000000  00000000  00012998  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000016a4  00000000  00000000  00013810  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00025a80  00000000  00000000  00014eb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000089ec  00000000  00000000  0003a934  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00016d98  00000000  00000000  00043320  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001ca8  00000000  00000000  0005a0b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000026fb  00000000  00000000  0005bd60  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000dd9b  00000000  00000000  0005e45b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  0006c1f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000c30  00000000  00000000  0006c218  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000703ed  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  000703f0  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000703f3  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000703f4  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000703f5  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000703f9  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000703fd  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00070401  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0007040a  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00070413  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000008  00000000  00000000  0007041c  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000001c  00000000  00000000  00070424  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     000b989e  00000000  00000000  00070440  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001b4 l    d  .text	00000000 .text
0000f4ac l    d  .rodata	00000000 .rodata
0000fb84 l    d  .rwdata	00000000 .rwdata
00013764 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000001ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 lab12.c
0000f4ac l     O .rodata	000000e8 C.6.2602
0000f594 l     O .rodata	000000e8 C.5.2601
0000f67c l     O .rodata	00000160 C.4.2600
00000000 l    df *ABS*	00000000 s_round.c
00000000 l    df *ABS*	00000000 w_pow.c
00000000 l    df *ABS*	00000000 e_pow.c
0000f7e4 l     O .rodata	00000010 bp
0000f7f4 l     O .rodata	00000010 dp_l
0000f804 l     O .rodata	00000010 dp_h
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_finite.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_nan.c
00000000 l    df *ABS*	00000000 s_rint.c
0000f814 l     O .rodata	00000010 TWO52
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 dp-bit.c
000028f0 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
0000fd84 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
00003fdc l     F .text	00000058 __sprint_r
0000f9aa l     O .rodata	00000010 blanks.3452
0000f99a l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00006040 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00007a3c l     F .text	00000058 std
00007b48 l     F .text	00000008 __fp_lock
00007b50 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
00011940 l     O .rwdata	00000004 charset
0000f9dc l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0000fb24 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0000be9c l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 alt_close.c
0000c0e4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000c144 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000c244 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000c364 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000c444 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000c5a0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000c7cc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00011964 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0000ca68 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00010740 l     O .rwdata	00001060 jtag_uart
000117a0 l     O .rwdata	000000c4 Serial_port0
00011864 l     O .rwdata	000000c4 Serial_port1
0000cb98 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000cdd8 l     F .text	00000228 altera_avalon_jtag_uart_irq
0000d000 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000d67c l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
0000d93c l     F .text	0000009c altera_avalon_uart_irq
0000d9d8 l     F .text	000000e0 altera_avalon_uart_rxirq
0000dab8 l     F .text	0000015c altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
0000dea4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
0000e0cc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000e350 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000e774 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0000e8b0 l     F .text	000000dc alt_file_locked
0000eb14 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0000f228 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0000f3dc l     F .text	00000040 alt_sim_halt
00009758 g     F .text	00000094 _mprec_log10
00009844 g     F .text	00000088 __any_on
0000af94 g     F .text	00000070 _isatty_r
0000fafc g     O .rodata	00000028 __mprec_tinytens
0000c600 g     F .text	0000006c alt_main
000139c4 g     O .bss	00000100 alt_irq
00002460 g     F .text	00000018 fabs
0000b004 g     F .text	00000078 _lseek_r
00011974 g       *ABS*	00000000 __flash_rwdata_start
00003410 g     F .text	00000088 __eqdf2
00013c54 g       *ABS*	00000000 __alt_heap_start
00003f64 g     F .text	00000044 printf
0000a9ec g     F .text	00000068 __sseek
00007aa4 g     F .text	000000a4 __sinit
0000038c g     F .text	000001ec play_note
0000877c g     F .text	00000084 _setlocale_r
00007ba4 g     F .text	00000068 __sfmoreglue
0000c68c g     F .text	00000020 __malloc_unlock
00000904 g     F .text	0000010c round
000091d4 g     F .text	000000e0 memmove
00007b94 g     F .text	00000010 _cleanup
000098cc g     F .text	000000bc _Balloc
00013764 g     O .bss	00000004 n
000005b0 g     F .text	00000074 set_pwm0_freq
00003520 g     F .text	00000088 __gtdf2
00003eb4 g     F .text	00000010 __errno
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
0000af20 g     F .text	00000074 _fstat_r
00013780 g     O .bss	00000004 errno
00013788 g     O .bss	00000004 alt_argv
00019928 g       *ABS*	00000000 _gp
00011928 g     O .rwdata	00000008 tempo
000105c0 g     O .rwdata	00000180 alt_fd_list
0000ed38 g     F .text	00000094 alt_find_dev
00003ec4 g     F .text	000000a0 memcpy
00007b88 g     F .text	0000000c _cleanup_r
000036b8 g     F .text	000000f8 __floatsidf
0000e838 g     F .text	00000078 alt_io_redirect
000035a8 g     F .text	00000088 __ltdf2
0000f4ac g       *ABS*	00000000 __DTOR_END__
000096a8 g     F .text	000000b0 __ratio
000006b0 g     F .text	00000074 set_pwm1_freq
0000d218 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00003fa8 g     F .text	00000034 _printf_r
0000bfd8 g     F .text	00000008 __udivsi3
0000c2a4 g     F .text	000000c0 isatty
0000fa0c g     O .rodata	000000c8 __mprec_tens
00008758 g     F .text	00000008 __locale_charset
0000efa4 g     F .text	00000090 alt_icache_flush
00013774 g     O .bss	00000004 __malloc_top_pad
0001193c g     O .rwdata	00000004 __mb_cur_max
00008760 g     F .text	0000000c _localeconv_r
00009fc4 g     F .text	0000003c __i2b
0000813c g     F .text	0000049c __sfvwrite_r
0000a974 g     F .text	00000070 _sbrk_r
0000b07c g     F .text	00000078 _read_r
00010184 g     O .rwdata	0000000c __lc_ctype
0001195c g     O .rwdata	00000004 alt_max_fd
00003cb4 g     F .text	00000138 __unpack_d
0000adfc g     F .text	00000110 _fclose_r
00007a08 g     F .text	00000034 fflush
00013778 g     O .bss	00000004 __malloc_max_sbrked_mem
00002d80 g     F .text	00000074 __adddf3
00009588 g     F .text	00000120 __b2d
0000b6d0 g     F .text	000005b0 __umoddi3
0000c4b0 g     F .text	000000f0 lseek
00011930 g     O .rwdata	00000004 __fdlib_version
00011938 g     O .rwdata	00000004 _global_impure_ptr
0000a340 g     F .text	000005f4 _realloc_r
00013c54 g       *ABS*	00000000 __bss_end
0000e67c g     F .text	000000f8 alt_iic_isr_register
0000ec0c g     F .text	0000010c alt_tick
0000b0f4 g     F .text	000005dc __udivdi3
0000fad4 g     O .rodata	00000028 __mprec_bigtens
0000a220 g     F .text	00000120 __s2b
0000bd08 g     F .text	00000194 __floatunsidf
000094a8 g     F .text	00000060 __mcmp
0000d874 g     F .text	000000c8 altera_avalon_uart_init
00007b70 g     F .text	00000018 __fp_lock_all
0000e634 g     F .text	00000048 alt_ic_irq_enabled
0000eb74 g     F .text	00000098 alt_alarm_stop
00013790 g     O .bss	00000004 alt_irq_active
000000ec g     F .exceptions	000000c8 alt_irq_handler
00010598 g     O .rwdata	00000028 alt_dev_null
000024dc g     F .text	00000210 rint
00000578 g     F .text	00000038 init_pwm0
0000e280 g     F .text	0000001c alt_dcache_flush_all
00009374 g     F .text	00000070 __hi0bits
000037b0 g     F .text	000000d8 __fixdfsi
00011974 g       *ABS*	00000000 __ram_rwdata_end
00011954 g     O .rwdata	00000008 alt_dev_list
0000c948 g     F .text	00000120 write
00000724 g     F .text	0000002c set_pwm1_on
0000fb84 g       *ABS*	00000000 __ram_rodata_end
0000c170 g     F .text	000000d4 fstat
00003630 g     F .text	00000088 __ledf2
0000a100 g     F .text	00000120 __pow5mult
00013768 g     O .bss	00000004 __nlocale_changed
0000bfe0 g     F .text	00000008 __umodsi3
00013c54 g       *ABS*	00000000 end
0000df04 g     F .text	000001c8 altera_avalon_uart_write
0000cd18 g     F .text	000000c0 altera_avalon_jtag_uart_init
00000624 g     F .text	0000002c set_pwm0_on
0000f4a8 g       *ABS*	00000000 __CTOR_LIST__
00800000 g       *ABS*	00000000 __alt_stack_pointer
0000d6ec g     F .text	00000090 alt_avalon_timer_sc_init
0000d7d4 g     F .text	00000058 altera_avalon_uart_write_fd
00003920 g     F .text	00000080 __clzsi2
0000d82c g     F .text	00000048 altera_avalon_uart_close_fd
0000d43c g     F .text	00000240 altera_avalon_jtag_uart_write
00007a94 g     F .text	00000004 __sfp_lock_acquire
000090f0 g     F .text	000000e4 memchr
00004034 g     F .text	00001eac ___vfprintf_internal_r
00007e28 g     F .text	00000314 _free_r
0000f22c g     F .text	000001b0 __call_exitprocs
0001376c g     O .bss	00000004 __mlocale_changed
00011948 g     O .rwdata	00000004 __malloc_sbrk_base
000001b4 g     F .text	0000003c _start
00013794 g     O .bss	00000004 _alt_tick_rate
00009c90 g     F .text	0000014c __lshift
00013798 g     O .bss	00000004 _alt_nticks
0000c6ac g     F .text	00000120 read
0000cafc g     F .text	0000009c alt_sys_init
0000f0f4 g     F .text	00000134 __register_exitproc
00009ddc g     F .text	000001e8 __multiply
00000e98 g     F .text	00001300 __ieee754_pow
0000d0b0 g     F .text	00000074 altera_avalon_jtag_uart_close
00000a10 g     F .text	00000488 pow
0000fb84 g       *ABS*	00000000 __ram_rwdata_start
0000f4ac g       *ABS*	00000000 __ram_rodata_start
0001379c g     O .bss	00000028 __malloc_current_mallinfo
00009988 g     F .text	0000017c __d2b
0000cbd0 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0000eeec g     F .text	000000b8 alt_get_fd
00003dec g     F .text	000000c8 __fpcmp_parts_d
0000ad8c g     F .text	00000070 _close_r
0000f080 g     F .text	00000074 memcmp
0000cc80 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00013c54 g       *ABS*	00000000 __alt_stack_base
0000ccc8 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00005f04 g     F .text	0000013c __swsetup_r
000031b8 g     F .text	00000258 __divdf3
00007c0c g     F .text	000000f0 __sfp
000097ec g     F .text	00000058 __copybits
00010190 g     O .rwdata	00000408 __malloc_av_
00007aa0 g     F .text	00000004 __sinit_lock_release
00002df4 g     F .text	000003c4 __muldf3
0000aad0 g     F .text	00000060 __sread
0000edcc g     F .text	00000120 alt_find_file
0000e29c g     F .text	000000b4 alt_dev_llist_insert
0000c66c g     F .text	00000020 __malloc_lock
0000c88c g     F .text	000000bc sbrk
0000780c g     F .text	000001fc _fflush_r
0000acd8 g     F .text	000000b4 _calloc_r
00013764 g       *ABS*	00000000 __bss_start
000092b4 g     F .text	00000098 memset
000001f0 g     F .text	0000019c main
00000778 g     F .text	00000058 delay_ms
0001378c g     O .bss	00000004 alt_envp
00000678 g     F .text	00000038 init_pwm1
0001377c g     O .bss	00000004 __malloc_max_total_mem
0000cc28 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0000a9e4 g     F .text	00000008 __sclose
000024c4 g     F .text	00000008 matherr
00800000 g       *ABS*	00000000 __alt_heap_limit
0000af0c g     F .text	00000014 fclose
00013ac4 g     O .bss	00000190 _atexit0
00006258 g     F .text	000015b4 _dtoa_r
000089b0 g     F .text	00000740 _malloc_r
00011960 g     O .rwdata	00000004 alt_errno
000086a0 g     F .text	000000b8 _fwalk
000137c4 g     O .bss	00000200 note
0000bf18 g     F .text	00000060 __divsi3
0000f824 g     O .rodata	00000014 __thenan_df
00007cfc g     F .text	0000012c _malloc_trim_r
0000f4ac g       *ABS*	00000000 __CTOR_END__
00002478 g     F .text	0000001c finite
0000ab30 g     F .text	000000bc strcmp
0000f4ac g       *ABS*	00000000 __flash_rodata_start
0000f4ac g       *ABS*	00000000 __DTOR_LIST__
000028cc g     F .text	00000024 copysign
00003498 g     F .text	00000088 __nedf2
0000fb84 g     O .rwdata	00000200 noteLetter
0000cac8 g     F .text	00000034 alt_irq_init
0000c82c g     F .text	00000060 alt_release_fd
0000f838 g     O .rodata	00000100 __clz_tab
00013770 g     O .bss	00000004 _PathLocale
0000f034 g     F .text	00000014 atexit
0000ac60 g     F .text	00000078 _write_r
00008800 g     F .text	0000001c setlocale
00011934 g     O .rwdata	00000004 _impure_ptr
00013784 g     O .bss	00000004 alt_argc
000026ec g     F .text	000001e0 scalbn
0000e414 g     F .text	00000064 _do_dtors
00000020 g       .exceptions	00000000 alt_irq_entry
00009508 g     F .text	00000080 __ulp
0000a934 g     F .text	00000040 __isinfd
00007b58 g     F .text	00000018 __fp_unlock_all
0001194c g     O .rwdata	00000008 alt_fs_list
00000650 g     F .text	00000028 set_pwm0_off
000024cc g     F .text	00000010 nan
00000750 g     F .text	00000028 set_pwm1_off
00000020 g       *ABS*	00000000 __ram_exceptions_start
0000876c g     F .text	00000010 localeconv
00002198 g     F .text	000002c8 __ieee754_sqrt
0000e4a8 g     F .text	00000050 alt_ic_isr_register
00011974 g       *ABS*	00000000 _edata
0000d77c g     F .text	00000058 altera_avalon_uart_read_fd
00013c54 g       *ABS*	00000000 _end
000001b4 g       *ABS*	00000000 __ram_exceptions_end
0000d124 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0000e594 g     F .text	000000a0 alt_ic_irq_disable
0000aa54 g     F .text	0000007c __swrite
00011944 g     O .rwdata	00000004 __malloc_trim_threshold
0000ed18 g     F .text	00000020 altera_nios2_qsys_irq_init
0000f048 g     F .text	00000038 exit
000085d8 g     F .text	000000c8 _fwalk_reent
00009b04 g     F .text	0000018c __mdiff
0000bf78 g     F .text	00000060 __modsi3
000007d0 g     F .text	00000134 init_note_frequencies
00800000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00007a98 g     F .text	00000004 __sfp_lock_release
00000000 g       *ABS*	00000000 __alt_mem_sdram
0000dc14 g     F .text	00000060 altera_avalon_uart_close
0000f41c g     F .text	00000020 _exit
00002494 g     F .text	00000030 __isnand
0000e12c g     F .text	00000154 alt_alarm_start
00003888 g     F .text	00000098 __muldi3
0000881c g     F .text	00000194 __smakebuf_r
0000abec g     F .text	00000074 strlen
0000e98c g     F .text	00000188 open
0000bc80 g     F .text	00000088 __gedf2
0000e478 g     F .text	00000030 alt_icache_flush_all
00011968 g     O .rwdata	00000004 alt_priority_mask
0000e4f8 g     F .text	0000009c alt_ic_irq_enable
00005ee0 g     F .text	00000024 __vfprintf_internal
0000dc74 g     F .text	00000230 altera_avalon_uart_read
00002d00 g     F .text	00000080 __subdf3
000093e4 g     F .text	000000c4 __lo0bits
0001196c g     O .rwdata	00000008 alt_alarm_list
0000e3b0 g     F .text	00000064 _do_ctors
0000bfe8 g     F .text	000000fc close
0000c3c4 g     F .text	00000080 alt_load
000039a0 g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
00007a9c g     F .text	00000004 __sinit_lock_acquire
0000a000 g     F .text	00000100 __multadd
0000934c g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00880014 	movui	r2,8192
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08406d14 	ori	at,at,436
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  44:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  fc:	0005313a 	rdctl	r2,ipending
 100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 10c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 110:	00800044 	movi	r2,1
 114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 118:	e0ffff17 	ldw	r3,-4(fp)
 11c:	e0bffe17 	ldw	r2,-8(fp)
 120:	1884703a 	and	r2,r3,r2
 124:	1005003a 	cmpeq	r2,r2,zero
 128:	1000161e 	bne	r2,zero,184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 12c:	e0bffd17 	ldw	r2,-12(fp)
 130:	00c00074 	movhi	r3,1
 134:	18ce7104 	addi	r3,r3,14788
 138:	100490fa 	slli	r2,r2,3
 13c:	10c5883a 	add	r2,r2,r3
 140:	11400017 	ldw	r5,0(r2)
 144:	e0bffd17 	ldw	r2,-12(fp)
 148:	00c00074 	movhi	r3,1
 14c:	18ce7104 	addi	r3,r3,14788
 150:	100490fa 	slli	r2,r2,3
 154:	10c5883a 	add	r2,r2,r3
 158:	10800104 	addi	r2,r2,4
 15c:	11000017 	ldw	r4,0(r2)
 160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 164:	0005313a 	rdctl	r2,ipending
 168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 16c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 174:	e0bfff17 	ldw	r2,-4(fp)
 178:	1004c03a 	cmpne	r2,r2,zero
 17c:	103fe31e 	bne	r2,zero,10c <alt_irq_handler+0x20>
 180:	00000706 	br	1a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 184:	e0bffe17 	ldw	r2,-8(fp)
 188:	1085883a 	add	r2,r2,r2
 18c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 190:	e0bffd17 	ldw	r2,-12(fp)
 194:	10800044 	addi	r2,r2,1
 198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 19c:	003fde06 	br	118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 1a0:	e037883a 	mov	sp,fp
 1a4:	dfc00117 	ldw	ra,4(sp)
 1a8:	df000017 	ldw	fp,0(sp)
 1ac:	dec00204 	addi	sp,sp,8
 1b0:	f800283a 	ret

Disassembly of section .text:

000001b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1b4:	06c02034 	movhi	sp,128
    ori sp, sp, %lo(__alt_stack_pointer)
     1b8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     1bc:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     1c0:	d6a64a14 	ori	gp,gp,39208
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1c4:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     1c8:	108dd914 	ori	r2,r2,14180

    movhi r3, %hi(__bss_end)
     1cc:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     1d0:	18cf1514 	ori	r3,r3,15444

    beq r2, r3, 1f
     1d4:	10c00326 	beq	r2,r3,1e4 <_start+0x30>

0:
    stw zero, (r2)
     1d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1e0:	10fffd36 	bltu	r2,r3,1d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1e4:	000c3c40 	call	c3c4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1e8:	000c6000 	call	c600 <alt_main>

000001ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1ec:	003fff06 	br	1ec <alt_after_alt_main>

000001f0 <main>:
void set_pwm1_off();
void delay_ms(int time);
void init_note_frequencies();

int main()
{
     1f0:	deff3004 	addi	sp,sp,-832
     1f4:	dfc0cf15 	stw	ra,828(sp)
     1f8:	df00ce15 	stw	fp,824(sp)
     1fc:	df00ce04 	addi	fp,sp,824
	////////////////////
	// INITIALIZATION
	init_note_frequencies();
     200:	00007d00 	call	7d0 <init_note_frequencies>
	for(n = 0; n < AMOUNT_OF_NOTES; n++) {
     204:	d0278f15 	stw	zero,-25028(gp)
     208:	00001706 	br	268 <main+0x78>
		printf("%d\n", (int)(((int)noteLetter[n]/4)-16097));
     20c:	d0a78f17 	ldw	r2,-25028(gp)
     210:	1085883a 	add	r2,r2,r2
     214:	1085883a 	add	r2,r2,r2
     218:	1007883a 	mov	r3,r2
     21c:	00800074 	movhi	r2,1
     220:	10bee104 	addi	r2,r2,-1148
     224:	1885883a 	add	r2,r3,r2
     228:	e0bfff15 	stw	r2,-4(fp)
     22c:	e0ffff17 	ldw	r3,-4(fp)
     230:	1804403a 	cmpge	r2,r3,zero
     234:	1000031e 	bne	r2,zero,244 <main+0x54>
     238:	e0bfff17 	ldw	r2,-4(fp)
     23c:	108000c4 	addi	r2,r2,3
     240:	e0bfff15 	stw	r2,-4(fp)
     244:	e0ffff17 	ldw	r3,-4(fp)
     248:	1805d0ba 	srai	r2,r3,2
     24c:	117047c4 	addi	r5,r2,-16097
     250:	01000074 	movhi	r4,1
     254:	213df704 	addi	r4,r4,-2084
     258:	0003f640 	call	3f64 <printf>
int main()
{
	////////////////////
	// INITIALIZATION
	init_note_frequencies();
	for(n = 0; n < AMOUNT_OF_NOTES; n++) {
     25c:	d0a78f17 	ldw	r2,-25028(gp)
     260:	10800044 	addi	r2,r2,1
     264:	d0a78f15 	stw	r2,-25028(gp)
     268:	d0a78f17 	ldw	r2,-25028(gp)
     26c:	10802010 	cmplti	r2,r2,128
     270:	103fe61e 	bne	r2,zero,20c <main+0x1c>
		printf("%d\n", (int)(((int)noteLetter[n]/4)-16097));
	}
	// Initialize PWM
	init_pwm0(); // init PWM
     274:	00005780 	call	578 <init_pwm0>
	init_pwm1(); // init PWM
     278:	00006780 	call	678 <init_pwm1>
	 * 77	F5
	 * 79	G5
	 */
	///////////////////////
	// Super Mario Bros.
	tempo = 300.0;	//tempo BPM
     27c:	d0200015 	stw	zero,-32768(gp)
     280:	00c00074 	movhi	r3,1
     284:	18c64b04 	addi	r3,r3,6444
     288:	00901cf4 	movhi	r2,16499
     28c:	10b00004 	addi	r2,r2,-16384
     290:	18800015 	stw	r2,0(r3)

		67,		76,		79,
		0,		64,		0,		0,
		0,		69,		0,		71,
		0,		70,		69,		0,
	};
     294:	00800074 	movhi	r2,1
     298:	10bd9f04 	addi	r2,r2,-2436
     29c:	e13f3304 	addi	r4,fp,-820
     2a0:	100b883a 	mov	r5,r2
     2a4:	01805804 	movi	r6,352
     2a8:	0003ec40 	call	3ec4 <memcpy>

		1/8.0,	0,		0,		1/8.0,
		0,		1/8.0,	0,
		0,		1/8.0,	0,		1/8.0,
		0,		1/8.0,	1/8.0,	0,
	};
     2ac:	00800074 	movhi	r2,1
     2b0:	10bd6504 	addi	r2,r2,-2668
     2b4:	e13f8b04 	addi	r4,fp,-468
     2b8:	100b883a 	mov	r5,r2
     2bc:	01803a04 	movi	r6,232
     2c0:	0003ec40 	call	3ec4 <memcpy>

		1/8.0,	1/4.0,	1/4.0,	1/8.0,
		1/2.0,	1/8.0,	1/4.0,
		1/4.0,	1/8.0,	1/4.0,	1/8.0,
		1/4.0,	1/8.0,	1/8.0,	1/4.0,
	};
     2c4:	00800074 	movhi	r2,1
     2c8:	10bd2b04 	addi	r2,r2,-2900
     2cc:	e13fc504 	addi	r4,fp,-236
     2d0:	100b883a 	mov	r5,r2
     2d4:	01803a04 	movi	r6,232
     2d8:	0003ec40 	call	3ec4 <memcpy>

	for(n = 0; n < 4*8; n++)
     2dc:	d0278f15 	stw	zero,-25028(gp)
     2e0:	00002106 	br	368 <main+0x178>
	{
		play_note(
     2e4:	d0a78f17 	ldw	r2,-25028(gp)
     2e8:	100490fa 	slli	r2,r2,3
     2ec:	e0ff3304 	addi	r3,fp,-820
     2f0:	10c9883a 	add	r4,r2,r3
     2f4:	20800017 	ldw	r2,0(r4)
     2f8:	20c00117 	ldw	r3,4(r4)
     2fc:	1009883a 	mov	r4,r2
     300:	180b883a 	mov	r5,r3
     304:	00037b00 	call	37b0 <__fixdfsi>
     308:	100b883a 	mov	r5,r2
     30c:	d0a78f17 	ldw	r2,-25028(gp)
     310:	100490fa 	slli	r2,r2,3
     314:	e0ff3304 	addi	r3,fp,-820
     318:	10c5883a 	add	r2,r2,r3
     31c:	10805804 	addi	r2,r2,352
     320:	12000017 	ldw	r8,0(r2)
     324:	12400117 	ldw	r9,4(r2)
     328:	d0a78f17 	ldw	r2,-25028(gp)
     32c:	100490fa 	slli	r2,r2,3
     330:	e0ff3304 	addi	r3,fp,-820
     334:	10c5883a 	add	r2,r2,r3
     338:	11009204 	addi	r4,r2,584
     33c:	20800017 	ldw	r2,0(r4)
     340:	20c00117 	ldw	r3,4(r4)
     344:	d8c00015 	stw	r3,0(sp)
     348:	100f883a 	mov	r7,r2
     34c:	2809883a 	mov	r4,r5
     350:	400b883a 	mov	r5,r8
     354:	480d883a 	mov	r6,r9
     358:	000038c0 	call	38c <play_note>
		1/2.0,	1/8.0,	1/4.0,
		1/4.0,	1/8.0,	1/4.0,	1/8.0,
		1/4.0,	1/8.0,	1/8.0,	1/4.0,
	};

	for(n = 0; n < 4*8; n++)
     35c:	d0a78f17 	ldw	r2,-25028(gp)
     360:	10800044 	addi	r2,r2,1
     364:	d0a78f15 	stw	r2,-25028(gp)
     368:	d0a78f17 	ldw	r2,-25028(gp)
     36c:	10800810 	cmplti	r2,r2,32
     370:	103fdc1e 	bne	r2,zero,2e4 <main+0xf4>
		//delay_ms(200); // wait 200 milliseconds
		//set_pwm0_off(); // set PWM0 off
		//delay_ms(50); // wait 50 milliseconds
	//}

	return(0);
     374:	0005883a 	mov	r2,zero
}
     378:	e037883a 	mov	sp,fp
     37c:	dfc00117 	ldw	ra,4(sp)
     380:	df000017 	ldw	fp,0(sp)
     384:	dec00204 	addi	sp,sp,8
     388:	f800283a 	ret

0000038c <play_note>:

void play_note(int midiNumber, double noteLength, double restLength)
{
     38c:	defff704 	addi	sp,sp,-36
     390:	dfc00715 	stw	ra,28(sp)
     394:	df000615 	stw	fp,24(sp)
     398:	df000604 	addi	fp,sp,24
     39c:	e13ffd15 	stw	r4,-12(fp)
     3a0:	e17ffe15 	stw	r5,-8(fp)
     3a4:	e1bfff15 	stw	r6,-4(fp)
     3a8:	e1c00215 	stw	r7,8(fp)
	// set frequency of note
	int hz = note[midiNumber];
     3ac:	e0bffd17 	ldw	r2,-12(fp)
     3b0:	00c00074 	movhi	r3,1
     3b4:	18cdf104 	addi	r3,r3,14276
     3b8:	1085883a 	add	r2,r2,r2
     3bc:	1085883a 	add	r2,r2,r2
     3c0:	10c5883a 	add	r2,r2,r3
     3c4:	10800017 	ldw	r2,0(r2)
     3c8:	e0bffc15 	stw	r2,-16(fp)
	int clk_div = (50000000 / hz);
     3cc:	00c0bef4 	movhi	r3,763
     3d0:	18fc2004 	addi	r3,r3,-3968
     3d4:	e0bffc17 	ldw	r2,-16(fp)
     3d8:	1885283a 	div	r2,r3,r2
     3dc:	e0bffb15 	stw	r2,-20(fp)
	int duty_cycle = (clk_div) / 2;
     3e0:	e0fffb17 	ldw	r3,-20(fp)
     3e4:	1804d7fa 	srli	r2,r3,31
     3e8:	10c5883a 	add	r2,r2,r3
     3ec:	1005d07a 	srai	r2,r2,1
     3f0:	e0bffa15 	stw	r2,-24(fp)

	IOWR_ALTERA_AVALON_PIO_DATA(PWM0_BASE + 4,0); // 0 duty_cycle = off
     3f4:	00840034 	movhi	r2,4096
     3f8:	1080c104 	addi	r2,r2,772
     3fc:	10000035 	stwio	zero,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(PWM0_BASE, clk_div); // set clk_div
     400:	00c40034 	movhi	r3,4096
     404:	18c0c004 	addi	r3,r3,768
     408:	e0bffb17 	ldw	r2,-20(fp)
     40c:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(PWM0_BASE + 4, duty_cycle); // 50% duty cycle
     410:	00c40034 	movhi	r3,4096
     414:	18c0c104 	addi	r3,r3,772
     418:	e0bffa17 	ldw	r2,-24(fp)
     41c:	18800035 	stwio	r2,0(r3)

	// Play note.
	if (hz != note[0])
     420:	00800074 	movhi	r2,1
     424:	108df104 	addi	r2,r2,14276
     428:	10c00017 	ldw	r3,0(r2)
     42c:	e0bffc17 	ldw	r2,-16(fp)
     430:	18802626 	beq	r3,r2,4cc <play_note+0x140>
	{
	set_pwm0_on(); // set PWM0 on
     434:	00006240 	call	624 <set_pwm0_on>
	delay_ms((60000.0/tempo)*noteLength/((double)1/4));
     438:	d0a00017 	ldw	r2,-32768(gp)
     43c:	01000074 	movhi	r4,1
     440:	21064b04 	addi	r4,r4,6444
     444:	20c00017 	ldw	r3,0(r4)
     448:	0009883a 	mov	r4,zero
     44c:	01503b74 	movhi	r5,16621
     450:	29530004 	addi	r5,r5,19456
     454:	100d883a 	mov	r6,r2
     458:	180f883a 	mov	r7,r3
     45c:	00031b80 	call	31b8 <__divdf3>
     460:	1009883a 	mov	r4,r2
     464:	180b883a 	mov	r5,r3
     468:	2005883a 	mov	r2,r4
     46c:	2807883a 	mov	r3,r5
     470:	1009883a 	mov	r4,r2
     474:	180b883a 	mov	r5,r3
     478:	e1bffe17 	ldw	r6,-8(fp)
     47c:	e1ffff17 	ldw	r7,-4(fp)
     480:	0002df40 	call	2df4 <__muldf3>
     484:	1009883a 	mov	r4,r2
     488:	180b883a 	mov	r5,r3
     48c:	2005883a 	mov	r2,r4
     490:	2807883a 	mov	r3,r5
     494:	1009883a 	mov	r4,r2
     498:	180b883a 	mov	r5,r3
     49c:	000d883a 	mov	r6,zero
     4a0:	01cff434 	movhi	r7,16336
     4a4:	00031b80 	call	31b8 <__divdf3>
     4a8:	1009883a 	mov	r4,r2
     4ac:	180b883a 	mov	r5,r3
     4b0:	2005883a 	mov	r2,r4
     4b4:	2807883a 	mov	r3,r5
     4b8:	1009883a 	mov	r4,r2
     4bc:	180b883a 	mov	r5,r3
     4c0:	00037b00 	call	37b0 <__fixdfsi>
     4c4:	1009883a 	mov	r4,r2
     4c8:	00007780 	call	778 <delay_ms>
	}

	// Play rest.
	set_pwm0_off(); // set PWM0 off
     4cc:	00006500 	call	650 <set_pwm0_off>
	delay_ms((60000.0/tempo)*restLength/((double)1/4));
     4d0:	d0a00017 	ldw	r2,-32768(gp)
     4d4:	01000074 	movhi	r4,1
     4d8:	21064b04 	addi	r4,r4,6444
     4dc:	20c00017 	ldw	r3,0(r4)
     4e0:	0009883a 	mov	r4,zero
     4e4:	01503b74 	movhi	r5,16621
     4e8:	29530004 	addi	r5,r5,19456
     4ec:	100d883a 	mov	r6,r2
     4f0:	180f883a 	mov	r7,r3
     4f4:	00031b80 	call	31b8 <__divdf3>
     4f8:	1009883a 	mov	r4,r2
     4fc:	180b883a 	mov	r5,r3
     500:	2005883a 	mov	r2,r4
     504:	2807883a 	mov	r3,r5
     508:	1009883a 	mov	r4,r2
     50c:	180b883a 	mov	r5,r3
     510:	e1800217 	ldw	r6,8(fp)
     514:	e1c00317 	ldw	r7,12(fp)
     518:	0002df40 	call	2df4 <__muldf3>
     51c:	1009883a 	mov	r4,r2
     520:	180b883a 	mov	r5,r3
     524:	2005883a 	mov	r2,r4
     528:	2807883a 	mov	r3,r5
     52c:	1009883a 	mov	r4,r2
     530:	180b883a 	mov	r5,r3
     534:	000d883a 	mov	r6,zero
     538:	01cff434 	movhi	r7,16336
     53c:	00031b80 	call	31b8 <__divdf3>
     540:	1009883a 	mov	r4,r2
     544:	180b883a 	mov	r5,r3
     548:	2005883a 	mov	r2,r4
     54c:	2807883a 	mov	r3,r5
     550:	1009883a 	mov	r4,r2
     554:	180b883a 	mov	r5,r3
     558:	00037b00 	call	37b0 <__fixdfsi>
     55c:	1009883a 	mov	r4,r2
     560:	00007780 	call	778 <delay_ms>

}
     564:	e037883a 	mov	sp,fp
     568:	dfc00117 	ldw	ra,4(sp)
     56c:	df000017 	ldw	fp,0(sp)
     570:	dec00304 	addi	sp,sp,12
     574:	f800283a 	ret

00000578 <init_pwm0>:

////////////////////
// PWM0 functions
void init_pwm0()
{
     578:	deffff04 	addi	sp,sp,-4
     57c:	df000015 	stw	fp,0(sp)
     580:	d839883a 	mov	fp,sp
	IOWR_ALTERA_AVALON_PIO_DATA(PWM0_BASE + 4,0); // 0 duty_cycle = off
     584:	00840034 	movhi	r2,4096
     588:	1080c104 	addi	r2,r2,772
     58c:	10000035 	stwio	zero,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(PWM0_BASE + 8,1); // enable
     590:	00c40034 	movhi	r3,4096
     594:	18c0c204 	addi	r3,r3,776
     598:	00800044 	movi	r2,1
     59c:	18800035 	stwio	r2,0(r3)
}
     5a0:	e037883a 	mov	sp,fp
     5a4:	df000017 	ldw	fp,0(sp)
     5a8:	dec00104 	addi	sp,sp,4
     5ac:	f800283a 	ret

000005b0 <set_pwm0_freq>:

void set_pwm0_freq(int hz)
{
     5b0:	defffc04 	addi	sp,sp,-16
     5b4:	df000315 	stw	fp,12(sp)
     5b8:	df000304 	addi	fp,sp,12
     5bc:	e13fff15 	stw	r4,-4(fp)
	int clk_div = (50000000 / hz);
     5c0:	00c0bef4 	movhi	r3,763
     5c4:	18fc2004 	addi	r3,r3,-3968
     5c8:	e0bfff17 	ldw	r2,-4(fp)
     5cc:	1885283a 	div	r2,r3,r2
     5d0:	e0bffe15 	stw	r2,-8(fp)
	int duty_cycle = (clk_div) / 2;
     5d4:	e0fffe17 	ldw	r3,-8(fp)
     5d8:	1804d7fa 	srli	r2,r3,31
     5dc:	10c5883a 	add	r2,r2,r3
     5e0:	1005d07a 	srai	r2,r2,1
     5e4:	e0bffd15 	stw	r2,-12(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(PWM0_BASE + 4,0); // 0 duty_cycle = off
     5e8:	00840034 	movhi	r2,4096
     5ec:	1080c104 	addi	r2,r2,772
     5f0:	10000035 	stwio	zero,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(PWM0_BASE, clk_div); // set clk_div
     5f4:	00c40034 	movhi	r3,4096
     5f8:	18c0c004 	addi	r3,r3,768
     5fc:	e0bffe17 	ldw	r2,-8(fp)
     600:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(PWM0_BASE + 4, duty_cycle); // 50% duty cycle
     604:	00c40034 	movhi	r3,4096
     608:	18c0c104 	addi	r3,r3,772
     60c:	e0bffd17 	ldw	r2,-12(fp)
     610:	18800035 	stwio	r2,0(r3)
}
     614:	e037883a 	mov	sp,fp
     618:	df000017 	ldw	fp,0(sp)
     61c:	dec00104 	addi	sp,sp,4
     620:	f800283a 	ret

00000624 <set_pwm0_on>:

void set_pwm0_on()
{
     624:	deffff04 	addi	sp,sp,-4
     628:	df000015 	stw	fp,0(sp)
     62c:	d839883a 	mov	fp,sp
	IOWR_ALTERA_AVALON_PIO_DATA(PWM0_BASE + 8,1); // enable
     630:	00c40034 	movhi	r3,4096
     634:	18c0c204 	addi	r3,r3,776
     638:	00800044 	movi	r2,1
     63c:	18800035 	stwio	r2,0(r3)
}
     640:	e037883a 	mov	sp,fp
     644:	df000017 	ldw	fp,0(sp)
     648:	dec00104 	addi	sp,sp,4
     64c:	f800283a 	ret

00000650 <set_pwm0_off>:

void set_pwm0_off()
{
     650:	deffff04 	addi	sp,sp,-4
     654:	df000015 	stw	fp,0(sp)
     658:	d839883a 	mov	fp,sp
	IOWR_ALTERA_AVALON_PIO_DATA(PWM0_BASE + 4,0); // 0 duty_cycle = off
     65c:	00840034 	movhi	r2,4096
     660:	1080c104 	addi	r2,r2,772
     664:	10000035 	stwio	zero,0(r2)
}
     668:	e037883a 	mov	sp,fp
     66c:	df000017 	ldw	fp,0(sp)
     670:	dec00104 	addi	sp,sp,4
     674:	f800283a 	ret

00000678 <init_pwm1>:

////////////////////
// PWM1 functions
void init_pwm1()
{
     678:	deffff04 	addi	sp,sp,-4
     67c:	df000015 	stw	fp,0(sp)
     680:	d839883a 	mov	fp,sp
	IOWR_ALTERA_AVALON_PIO_DATA(PWM1_BASE + 4,0); // 0 duty_cycle = off
     684:	00840034 	movhi	r2,4096
     688:	1080c504 	addi	r2,r2,788
     68c:	10000035 	stwio	zero,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(PWM1_BASE + 8,1); // enable
     690:	00c40034 	movhi	r3,4096
     694:	18c0c604 	addi	r3,r3,792
     698:	00800044 	movi	r2,1
     69c:	18800035 	stwio	r2,0(r3)
}
     6a0:	e037883a 	mov	sp,fp
     6a4:	df000017 	ldw	fp,0(sp)
     6a8:	dec00104 	addi	sp,sp,4
     6ac:	f800283a 	ret

000006b0 <set_pwm1_freq>:

void set_pwm1_freq(int hz)
{
     6b0:	defffc04 	addi	sp,sp,-16
     6b4:	df000315 	stw	fp,12(sp)
     6b8:	df000304 	addi	fp,sp,12
     6bc:	e13fff15 	stw	r4,-4(fp)
	int clk_div = (50000000 / hz);
     6c0:	00c0bef4 	movhi	r3,763
     6c4:	18fc2004 	addi	r3,r3,-3968
     6c8:	e0bfff17 	ldw	r2,-4(fp)
     6cc:	1885283a 	div	r2,r3,r2
     6d0:	e0bffe15 	stw	r2,-8(fp)
	int duty_cycle = (clk_div ) / 2;
     6d4:	e0fffe17 	ldw	r3,-8(fp)
     6d8:	1804d7fa 	srli	r2,r3,31
     6dc:	10c5883a 	add	r2,r2,r3
     6e0:	1005d07a 	srai	r2,r2,1
     6e4:	e0bffd15 	stw	r2,-12(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(PWM1_BASE + 4,0); // 0 duty_cycle = off
     6e8:	00840034 	movhi	r2,4096
     6ec:	1080c504 	addi	r2,r2,788
     6f0:	10000035 	stwio	zero,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(PWM1_BASE, clk_div); // set clk_div
     6f4:	00c40034 	movhi	r3,4096
     6f8:	18c0c404 	addi	r3,r3,784
     6fc:	e0bffe17 	ldw	r2,-8(fp)
     700:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(PWM1_BASE + 4, duty_cycle); // 50% duty cycle
     704:	00c40034 	movhi	r3,4096
     708:	18c0c504 	addi	r3,r3,788
     70c:	e0bffd17 	ldw	r2,-12(fp)
     710:	18800035 	stwio	r2,0(r3)
}
     714:	e037883a 	mov	sp,fp
     718:	df000017 	ldw	fp,0(sp)
     71c:	dec00104 	addi	sp,sp,4
     720:	f800283a 	ret

00000724 <set_pwm1_on>:

void set_pwm1_on()
{
     724:	deffff04 	addi	sp,sp,-4
     728:	df000015 	stw	fp,0(sp)
     72c:	d839883a 	mov	fp,sp
	IOWR_ALTERA_AVALON_PIO_DATA(PWM1_BASE + 8,1); // enable
     730:	00c40034 	movhi	r3,4096
     734:	18c0c604 	addi	r3,r3,792
     738:	00800044 	movi	r2,1
     73c:	18800035 	stwio	r2,0(r3)
}
     740:	e037883a 	mov	sp,fp
     744:	df000017 	ldw	fp,0(sp)
     748:	dec00104 	addi	sp,sp,4
     74c:	f800283a 	ret

00000750 <set_pwm1_off>:

void set_pwm1_off()
{
     750:	deffff04 	addi	sp,sp,-4
     754:	df000015 	stw	fp,0(sp)
     758:	d839883a 	mov	fp,sp
	IOWR_ALTERA_AVALON_PIO_DATA(PWM1_BASE + 4,0); // 0 duty_cycle = off
     75c:	00840034 	movhi	r2,4096
     760:	1080c504 	addi	r2,r2,788
     764:	10000035 	stwio	zero,0(r2)
}
     768:	e037883a 	mov	sp,fp
     76c:	df000017 	ldw	fp,0(sp)
     770:	dec00104 	addi	sp,sp,4
     774:	f800283a 	ret

00000778 <delay_ms>:

/////////////////////
// Other functions
void delay_ms(int time)
{
     778:	defffb04 	addi	sp,sp,-20
     77c:	df000415 	stw	fp,16(sp)
     780:	df000404 	addi	fp,sp,16
     784:	e13fff15 	stw	r4,-4(fp)
	int i;
	int delay = time * 447;
     788:	e0bfff17 	ldw	r2,-4(fp)
     78c:	10806fe4 	muli	r2,r2,447
     790:	e0bffd15 	stw	r2,-12(fp)
	int dummy;
	for(i = 0; i < delay; i++)
     794:	e03ffe15 	stw	zero,-8(fp)
     798:	00000606 	br	7b4 <delay_ms+0x3c>
		dummy++;
     79c:	e0bffc17 	ldw	r2,-16(fp)
     7a0:	10800044 	addi	r2,r2,1
     7a4:	e0bffc15 	stw	r2,-16(fp)
void delay_ms(int time)
{
	int i;
	int delay = time * 447;
	int dummy;
	for(i = 0; i < delay; i++)
     7a8:	e0bffe17 	ldw	r2,-8(fp)
     7ac:	10800044 	addi	r2,r2,1
     7b0:	e0bffe15 	stw	r2,-8(fp)
     7b4:	e0fffe17 	ldw	r3,-8(fp)
     7b8:	e0bffd17 	ldw	r2,-12(fp)
     7bc:	18bff716 	blt	r3,r2,79c <delay_ms+0x24>
		dummy++;
}
     7c0:	e037883a 	mov	sp,fp
     7c4:	df000017 	ldw	fp,0(sp)
     7c8:	dec00104 	addi	sp,sp,4
     7cc:	f800283a 	ret

000007d0 <init_note_frequencies>:

void init_note_frequencies()
{
     7d0:	defffd04 	addi	sp,sp,-12
     7d4:	dfc00215 	stw	ra,8(sp)
     7d8:	df000115 	stw	fp,4(sp)
     7dc:	dc000015 	stw	r16,0(sp)
     7e0:	d839883a 	mov	fp,sp
	// MIDI note frequencies
	for(n = 0; n < AMOUNT_OF_NOTES; n++)
     7e4:	d0278f15 	stw	zero,-25028(gp)
     7e8:	00003d06 	br	8e0 <init_note_frequencies+0x110>
	{
		// frequency = 440 × 2^((note number − 69) / 12)
		note[n] = round(440.0 * pow(2.0, ((double)(n) - 69.0) / 12.0 ));
     7ec:	d4278f17 	ldw	r16,-25028(gp)
     7f0:	d1278f17 	ldw	r4,-25028(gp)
     7f4:	00036b80 	call	36b8 <__floatsidf>
     7f8:	100b883a 	mov	r5,r2
     7fc:	180d883a 	mov	r6,r3
     800:	2809883a 	mov	r4,r5
     804:	300b883a 	mov	r5,r6
     808:	000d883a 	mov	r6,zero
     80c:	01d01474 	movhi	r7,16465
     810:	39d00004 	addi	r7,r7,16384
     814:	0002d000 	call	2d00 <__subdf3>
     818:	1009883a 	mov	r4,r2
     81c:	180b883a 	mov	r5,r3
     820:	2005883a 	mov	r2,r4
     824:	2807883a 	mov	r3,r5
     828:	1009883a 	mov	r4,r2
     82c:	180b883a 	mov	r5,r3
     830:	000d883a 	mov	r6,zero
     834:	01d00a34 	movhi	r7,16424
     838:	00031b80 	call	31b8 <__divdf3>
     83c:	1009883a 	mov	r4,r2
     840:	180b883a 	mov	r5,r3
     844:	2005883a 	mov	r2,r4
     848:	2807883a 	mov	r3,r5
     84c:	0009883a 	mov	r4,zero
     850:	01500034 	movhi	r5,16384
     854:	100d883a 	mov	r6,r2
     858:	180f883a 	mov	r7,r3
     85c:	0000a100 	call	a10 <pow>
     860:	1009883a 	mov	r4,r2
     864:	180b883a 	mov	r5,r3
     868:	2005883a 	mov	r2,r4
     86c:	2807883a 	mov	r3,r5
     870:	1009883a 	mov	r4,r2
     874:	180b883a 	mov	r5,r3
     878:	000d883a 	mov	r6,zero
     87c:	01d01f34 	movhi	r7,16508
     880:	39e00004 	addi	r7,r7,-32768
     884:	0002df40 	call	2df4 <__muldf3>
     888:	1009883a 	mov	r4,r2
     88c:	180b883a 	mov	r5,r3
     890:	2005883a 	mov	r2,r4
     894:	2807883a 	mov	r3,r5
     898:	1009883a 	mov	r4,r2
     89c:	180b883a 	mov	r5,r3
     8a0:	00009040 	call	904 <round>
     8a4:	100b883a 	mov	r5,r2
     8a8:	180d883a 	mov	r6,r3
     8ac:	2809883a 	mov	r4,r5
     8b0:	300b883a 	mov	r5,r6
     8b4:	00037b00 	call	37b0 <__fixdfsi>
     8b8:	1009883a 	mov	r4,r2
     8bc:	00c00074 	movhi	r3,1
     8c0:	18cdf104 	addi	r3,r3,14276
     8c4:	8405883a 	add	r2,r16,r16
     8c8:	1085883a 	add	r2,r2,r2
     8cc:	10c5883a 	add	r2,r2,r3
     8d0:	11000015 	stw	r4,0(r2)
}

void init_note_frequencies()
{
	// MIDI note frequencies
	for(n = 0; n < AMOUNT_OF_NOTES; n++)
     8d4:	d0a78f17 	ldw	r2,-25028(gp)
     8d8:	10800044 	addi	r2,r2,1
     8dc:	d0a78f15 	stw	r2,-25028(gp)
     8e0:	d0a78f17 	ldw	r2,-25028(gp)
     8e4:	10802010 	cmplti	r2,r2,128
     8e8:	103fc01e 	bne	r2,zero,7ec <init_note_frequencies+0x1c>
	{
		// frequency = 440 × 2^((note number − 69) / 12)
		note[n] = round(440.0 * pow(2.0, ((double)(n) - 69.0) / 12.0 ));
		//note[n] = n*2;
	}
}
     8ec:	e037883a 	mov	sp,fp
     8f0:	dfc00217 	ldw	ra,8(sp)
     8f4:	df000117 	ldw	fp,4(sp)
     8f8:	dc000017 	ldw	r16,0(sp)
     8fc:	dec00304 	addi	sp,sp,12
     900:	f800283a 	ret

00000904 <round>:
     904:	289ffc2c 	andhi	r2,r5,32752
     908:	101bd53a 	srai	r13,r2,20
     90c:	deffff04 	addi	sp,sp,-4
     910:	008004c4 	movi	r2,19
     914:	6abf0044 	addi	r10,r13,-1023
     918:	dfc00015 	stw	ra,0(sp)
     91c:	2011883a 	mov	r8,r4
     920:	2813883a 	mov	r9,r5
     924:	2817883a 	mov	r11,r5
     928:	12801316 	blt	r2,r10,978 <round+0x74>
     92c:	50003016 	blt	r10,zero,9f0 <round+0xec>
     930:	00800434 	movhi	r2,16
     934:	10bfffc4 	addi	r2,r2,-1
     938:	1289d83a 	sra	r4,r2,r10
     93c:	2146703a 	and	r3,r4,r5
     940:	18002926 	beq	r3,zero,9e8 <round+0xe4>
     944:	00800234 	movhi	r2,8
     948:	1285d83a 	sra	r2,r2,r10
     94c:	0106303a 	nor	r3,zero,r4
     950:	0009883a 	mov	r4,zero
     954:	5885883a 	add	r2,r11,r2
     958:	1896703a 	and	r11,r3,r2
     95c:	2011883a 	mov	r8,r4
     960:	5813883a 	mov	r9,r11
     964:	4005883a 	mov	r2,r8
     968:	4807883a 	mov	r3,r9
     96c:	dfc00017 	ldw	ra,0(sp)
     970:	dec00104 	addi	sp,sp,4
     974:	f800283a 	ret
     978:	03800cc4 	movi	r14,51
     97c:	72800e16 	blt	r14,r10,9b8 <round+0xb4>
     980:	68befb44 	addi	r2,r13,-1043
     984:	00ffffc4 	movi	r3,-1
     988:	188ad83a 	srl	r5,r3,r2
     98c:	2148703a 	and	r4,r4,r5
     990:	203ff426 	beq	r4,zero,964 <round+0x60>
     994:	7287c83a 	sub	r3,r14,r10
     998:	00800044 	movi	r2,1
     99c:	10c4983a 	sll	r2,r2,r3
     9a0:	4087883a 	add	r3,r8,r2
     9a4:	1a00012e 	bgeu	r3,r8,9ac <round+0xa8>
     9a8:	4ac00044 	addi	r11,r9,1
     9ac:	0144303a 	nor	r2,zero,r5
     9b0:	1888703a 	and	r4,r3,r2
     9b4:	003fe906 	br	95c <round+0x58>
     9b8:	00810004 	movi	r2,1024
     9bc:	50bfe91e 	bne	r10,r2,964 <round+0x60>
     9c0:	400d883a 	mov	r6,r8
     9c4:	280f883a 	mov	r7,r5
     9c8:	0002d800 	call	2d80 <__adddf3>
     9cc:	1011883a 	mov	r8,r2
     9d0:	1813883a 	mov	r9,r3
     9d4:	4005883a 	mov	r2,r8
     9d8:	4807883a 	mov	r3,r9
     9dc:	dfc00017 	ldw	ra,0(sp)
     9e0:	dec00104 	addi	sp,sp,4
     9e4:	f800283a 	ret
     9e8:	403fd61e 	bne	r8,zero,944 <round+0x40>
     9ec:	003fdd06 	br	964 <round+0x60>
     9f0:	00bfffc4 	movi	r2,-1
     9f4:	2ae0002c 	andhi	r11,r5,32768
     9f8:	50800226 	beq	r10,r2,a04 <round+0x100>
     9fc:	0009883a 	mov	r4,zero
     a00:	003fd606 	br	95c <round+0x58>
     a04:	5acffc34 	orhi	r11,r11,16368
     a08:	0009883a 	mov	r4,zero
     a0c:	003fd306 	br	95c <round+0x58>

00000a10 <pow>:
     a10:	deffee04 	addi	sp,sp,-72
     a14:	ddc01015 	stw	r23,64(sp)
     a18:	05c00074 	movhi	r23,1
     a1c:	bdc64c04 	addi	r23,r23,6448
     a20:	dd800f15 	stw	r22,60(sp)
     a24:	dd400e15 	stw	r21,56(sp)
     a28:	dd000d15 	stw	r20,52(sp)
     a2c:	dcc00c15 	stw	r19,48(sp)
     a30:	dc800b15 	stw	r18,44(sp)
     a34:	dc400a15 	stw	r17,40(sp)
     a38:	dc000915 	stw	r16,36(sp)
     a3c:	2029883a 	mov	r20,r4
     a40:	dfc01115 	stw	ra,68(sp)
     a44:	3025883a 	mov	r18,r6
     a48:	282b883a 	mov	r21,r5
     a4c:	3827883a 	mov	r19,r7
     a50:	0000e980 	call	e98 <__ieee754_pow>
     a54:	b9000017 	ldw	r4,0(r23)
     a58:	05bfffc4 	movi	r22,-1
     a5c:	1021883a 	mov	r16,r2
     a60:	1823883a 	mov	r17,r3
     a64:	25800426 	beq	r4,r22,a78 <pow+0x68>
     a68:	9009883a 	mov	r4,r18
     a6c:	980b883a 	mov	r5,r19
     a70:	00024940 	call	2494 <__isnand>
     a74:	10000d26 	beq	r2,zero,aac <pow+0x9c>
     a78:	8005883a 	mov	r2,r16
     a7c:	8807883a 	mov	r3,r17
     a80:	dfc01117 	ldw	ra,68(sp)
     a84:	ddc01017 	ldw	r23,64(sp)
     a88:	dd800f17 	ldw	r22,60(sp)
     a8c:	dd400e17 	ldw	r21,56(sp)
     a90:	dd000d17 	ldw	r20,52(sp)
     a94:	dcc00c17 	ldw	r19,48(sp)
     a98:	dc800b17 	ldw	r18,44(sp)
     a9c:	dc400a17 	ldw	r17,40(sp)
     aa0:	dc000917 	ldw	r16,36(sp)
     aa4:	dec01204 	addi	sp,sp,72
     aa8:	f800283a 	ret
     aac:	a009883a 	mov	r4,r20
     ab0:	a80b883a 	mov	r5,r21
     ab4:	00024940 	call	2494 <__isnand>
     ab8:	1000151e 	bne	r2,zero,b10 <pow+0x100>
     abc:	000d883a 	mov	r6,zero
     ac0:	000f883a 	mov	r7,zero
     ac4:	a009883a 	mov	r4,r20
     ac8:	a80b883a 	mov	r5,r21
     acc:	00034100 	call	3410 <__eqdf2>
     ad0:	1000541e 	bne	r2,zero,c24 <pow+0x214>
     ad4:	000d883a 	mov	r6,zero
     ad8:	000f883a 	mov	r7,zero
     adc:	9009883a 	mov	r4,r18
     ae0:	980b883a 	mov	r5,r19
     ae4:	00034100 	call	3410 <__eqdf2>
     ae8:	10002c1e 	bne	r2,zero,b9c <pow+0x18c>
     aec:	b8800017 	ldw	r2,0(r23)
     af0:	d8000615 	stw	zero,24(sp)
     af4:	d8000715 	stw	zero,28(sp)
     af8:	10001226 	beq	r2,zero,b44 <pow+0x134>
     afc:	008ffc34 	movhi	r2,16368
     b00:	d8800715 	stw	r2,28(sp)
     b04:	dc000617 	ldw	r16,24(sp)
     b08:	dc400717 	ldw	r17,28(sp)
     b0c:	003fda06 	br	a78 <pow+0x68>
     b10:	000d883a 	mov	r6,zero
     b14:	000f883a 	mov	r7,zero
     b18:	9009883a 	mov	r4,r18
     b1c:	980b883a 	mov	r5,r19
     b20:	00034100 	call	3410 <__eqdf2>
     b24:	103fd41e 	bne	r2,zero,a78 <pow+0x68>
     b28:	b8c00017 	ldw	r3,0(r23)
     b2c:	010ffc34 	movhi	r4,16368
     b30:	d8000615 	stw	zero,24(sp)
     b34:	d9000715 	stw	r4,28(sp)
     b38:	1d801526 	beq	r3,r22,b90 <pow+0x180>
     b3c:	00800084 	movi	r2,2
     b40:	18801326 	beq	r3,r2,b90 <pow+0x180>
     b44:	00800074 	movhi	r2,1
     b48:	10bdf804 	addi	r2,r2,-2080
     b4c:	00c00044 	movi	r3,1
     b50:	d809883a 	mov	r4,sp
     b54:	dcc00515 	stw	r19,20(sp)
     b58:	dd400315 	stw	r21,12(sp)
     b5c:	d8800115 	stw	r2,4(sp)
     b60:	d8c00015 	stw	r3,0(sp)
     b64:	dc800415 	stw	r18,16(sp)
     b68:	dd000215 	stw	r20,8(sp)
     b6c:	d8000815 	stw	zero,32(sp)
     b70:	00024c40 	call	24c4 <matherr>
     b74:	10002726 	beq	r2,zero,c14 <pow+0x204>
     b78:	d8800817 	ldw	r2,32(sp)
     b7c:	103fe126 	beq	r2,zero,b04 <pow+0xf4>
     b80:	0003eb40 	call	3eb4 <__errno>
     b84:	d8c00817 	ldw	r3,32(sp)
     b88:	10c00015 	stw	r3,0(r2)
     b8c:	003fdd06 	br	b04 <pow+0xf4>
     b90:	d9000715 	stw	r4,28(sp)
     b94:	d8000615 	stw	zero,24(sp)
     b98:	003fda06 	br	b04 <pow+0xf4>
     b9c:	9009883a 	mov	r4,r18
     ba0:	980b883a 	mov	r5,r19
     ba4:	00024780 	call	2478 <finite>
     ba8:	103fb326 	beq	r2,zero,a78 <pow+0x68>
     bac:	000d883a 	mov	r6,zero
     bb0:	000f883a 	mov	r7,zero
     bb4:	9009883a 	mov	r4,r18
     bb8:	980b883a 	mov	r5,r19
     bbc:	00035a80 	call	35a8 <__ltdf2>
     bc0:	103fad0e 	bge	r2,zero,a78 <pow+0x68>
     bc4:	b9000017 	ldw	r4,0(r23)
     bc8:	00800044 	movi	r2,1
     bcc:	00c00074 	movhi	r3,1
     bd0:	18fdf804 	addi	r3,r3,-2080
     bd4:	d8800015 	stw	r2,0(sp)
     bd8:	d8c00115 	stw	r3,4(sp)
     bdc:	dd400315 	stw	r21,12(sp)
     be0:	dcc00515 	stw	r19,20(sp)
     be4:	d8000815 	stw	zero,32(sp)
     be8:	dd000215 	stw	r20,8(sp)
     bec:	dc800415 	stw	r18,16(sp)
     bf0:	20005626 	beq	r4,zero,d4c <pow+0x33c>
     bf4:	00bffc34 	movhi	r2,65520
     bf8:	d8800715 	stw	r2,28(sp)
     bfc:	00800084 	movi	r2,2
     c00:	d8000615 	stw	zero,24(sp)
     c04:	20800326 	beq	r4,r2,c14 <pow+0x204>
     c08:	d809883a 	mov	r4,sp
     c0c:	00024c40 	call	24c4 <matherr>
     c10:	103fd91e 	bne	r2,zero,b78 <pow+0x168>
     c14:	0003eb40 	call	3eb4 <__errno>
     c18:	00c00844 	movi	r3,33
     c1c:	10c00015 	stw	r3,0(r2)
     c20:	003fd506 	br	b78 <pow+0x168>
     c24:	8009883a 	mov	r4,r16
     c28:	880b883a 	mov	r5,r17
     c2c:	00024780 	call	2478 <finite>
     c30:	10002426 	beq	r2,zero,cc4 <pow+0x2b4>
     c34:	000d883a 	mov	r6,zero
     c38:	000f883a 	mov	r7,zero
     c3c:	8009883a 	mov	r4,r16
     c40:	880b883a 	mov	r5,r17
     c44:	00034100 	call	3410 <__eqdf2>
     c48:	103f8b1e 	bne	r2,zero,a78 <pow+0x68>
     c4c:	a009883a 	mov	r4,r20
     c50:	a80b883a 	mov	r5,r21
     c54:	00024780 	call	2478 <finite>
     c58:	103f8726 	beq	r2,zero,a78 <pow+0x68>
     c5c:	9009883a 	mov	r4,r18
     c60:	980b883a 	mov	r5,r19
     c64:	00024780 	call	2478 <finite>
     c68:	103f8326 	beq	r2,zero,a78 <pow+0x68>
     c6c:	b9000017 	ldw	r4,0(r23)
     c70:	00800104 	movi	r2,4
     c74:	d8800015 	stw	r2,0(sp)
     c78:	00c00074 	movhi	r3,1
     c7c:	18fdf804 	addi	r3,r3,-2080
     c80:	00800084 	movi	r2,2
     c84:	d8c00115 	stw	r3,4(sp)
     c88:	dd400315 	stw	r21,12(sp)
     c8c:	dcc00515 	stw	r19,20(sp)
     c90:	d8000815 	stw	zero,32(sp)
     c94:	dd000215 	stw	r20,8(sp)
     c98:	dc800415 	stw	r18,16(sp)
     c9c:	d8000615 	stw	zero,24(sp)
     ca0:	d8000715 	stw	zero,28(sp)
     ca4:	20800326 	beq	r4,r2,cb4 <pow+0x2a4>
     ca8:	d809883a 	mov	r4,sp
     cac:	00024c40 	call	24c4 <matherr>
     cb0:	103fb11e 	bne	r2,zero,b78 <pow+0x168>
     cb4:	0003eb40 	call	3eb4 <__errno>
     cb8:	00c00884 	movi	r3,34
     cbc:	10c00015 	stw	r3,0(r2)
     cc0:	003fad06 	br	b78 <pow+0x168>
     cc4:	a009883a 	mov	r4,r20
     cc8:	a80b883a 	mov	r5,r21
     ccc:	00024780 	call	2478 <finite>
     cd0:	103fd826 	beq	r2,zero,c34 <pow+0x224>
     cd4:	9009883a 	mov	r4,r18
     cd8:	980b883a 	mov	r5,r19
     cdc:	00024780 	call	2478 <finite>
     ce0:	103fd426 	beq	r2,zero,c34 <pow+0x224>
     ce4:	880b883a 	mov	r5,r17
     ce8:	8009883a 	mov	r4,r16
     cec:	00024940 	call	2494 <__isnand>
     cf0:	10001926 	beq	r2,zero,d58 <pow+0x348>
     cf4:	bc000017 	ldw	r16,0(r23)
     cf8:	00800044 	movi	r2,1
     cfc:	00c00074 	movhi	r3,1
     d00:	18fdf804 	addi	r3,r3,-2080
     d04:	d8800015 	stw	r2,0(sp)
     d08:	d8c00115 	stw	r3,4(sp)
     d0c:	dd400315 	stw	r21,12(sp)
     d10:	dcc00515 	stw	r19,20(sp)
     d14:	d8000815 	stw	zero,32(sp)
     d18:	dd000215 	stw	r20,8(sp)
     d1c:	dc800415 	stw	r18,16(sp)
     d20:	80000a26 	beq	r16,zero,d4c <pow+0x33c>
     d24:	0009883a 	mov	r4,zero
     d28:	000d883a 	mov	r6,zero
     d2c:	000b883a 	mov	r5,zero
     d30:	000f883a 	mov	r7,zero
     d34:	00031b80 	call	31b8 <__divdf3>
     d38:	d8800615 	stw	r2,24(sp)
     d3c:	00800084 	movi	r2,2
     d40:	d8c00715 	stw	r3,28(sp)
     d44:	80bfb01e 	bne	r16,r2,c08 <pow+0x1f8>
     d48:	003fb206 	br	c14 <pow+0x204>
     d4c:	d8000615 	stw	zero,24(sp)
     d50:	d8000715 	stw	zero,28(sp)
     d54:	003fac06 	br	c08 <pow+0x1f8>
     d58:	b8800017 	ldw	r2,0(r23)
     d5c:	00c000c4 	movi	r3,3
     d60:	01000074 	movhi	r4,1
     d64:	213df804 	addi	r4,r4,-2080
     d68:	d8c00015 	stw	r3,0(sp)
     d6c:	d9000115 	stw	r4,4(sp)
     d70:	d8000815 	stw	zero,32(sp)
     d74:	dd000215 	stw	r20,8(sp)
     d78:	dd400315 	stw	r21,12(sp)
     d7c:	dc800415 	stw	r18,16(sp)
     d80:	dcc00515 	stw	r19,20(sp)
     d84:	1000251e 	bne	r2,zero,e1c <pow+0x40c>
     d88:	05b80034 	movhi	r22,57344
     d8c:	0091fc34 	movhi	r2,18416
     d90:	10bfffc4 	addi	r2,r2,-1
     d94:	000d883a 	mov	r6,zero
     d98:	000f883a 	mov	r7,zero
     d9c:	a80b883a 	mov	r5,r21
     da0:	a009883a 	mov	r4,r20
     da4:	d8800715 	stw	r2,28(sp)
     da8:	dd800615 	stw	r22,24(sp)
     dac:	00035a80 	call	35a8 <__ltdf2>
     db0:	103fbd0e 	bge	r2,zero,ca8 <pow+0x298>
     db4:	0005883a 	mov	r2,zero
     db8:	00cff834 	movhi	r3,16352
     dbc:	180f883a 	mov	r7,r3
     dc0:	100d883a 	mov	r6,r2
     dc4:	980b883a 	mov	r5,r19
     dc8:	9009883a 	mov	r4,r18
     dcc:	0002df40 	call	2df4 <__muldf3>
     dd0:	1009883a 	mov	r4,r2
     dd4:	180b883a 	mov	r5,r3
     dd8:	1021883a 	mov	r16,r2
     ddc:	1823883a 	mov	r17,r3
     de0:	00024dc0 	call	24dc <rint>
     de4:	180f883a 	mov	r7,r3
     de8:	8009883a 	mov	r4,r16
     dec:	880b883a 	mov	r5,r17
     df0:	100d883a 	mov	r6,r2
     df4:	00034980 	call	3498 <__nedf2>
     df8:	10000426 	beq	r2,zero,e0c <pow+0x3fc>
     dfc:	00b1fc34 	movhi	r2,51184
     e00:	10bfffc4 	addi	r2,r2,-1
     e04:	dd800615 	stw	r22,24(sp)
     e08:	d8800715 	stw	r2,28(sp)
     e0c:	b8c00017 	ldw	r3,0(r23)
     e10:	00800084 	movi	r2,2
     e14:	18bfa41e 	bne	r3,r2,ca8 <pow+0x298>
     e18:	003fa606 	br	cb4 <pow+0x2a4>
     e1c:	009ffc34 	movhi	r2,32752
     e20:	000d883a 	mov	r6,zero
     e24:	000f883a 	mov	r7,zero
     e28:	a80b883a 	mov	r5,r21
     e2c:	a009883a 	mov	r4,r20
     e30:	d8800715 	stw	r2,28(sp)
     e34:	d8000615 	stw	zero,24(sp)
     e38:	00035a80 	call	35a8 <__ltdf2>
     e3c:	103ff30e 	bge	r2,zero,e0c <pow+0x3fc>
     e40:	0005883a 	mov	r2,zero
     e44:	00cff834 	movhi	r3,16352
     e48:	180f883a 	mov	r7,r3
     e4c:	100d883a 	mov	r6,r2
     e50:	980b883a 	mov	r5,r19
     e54:	9009883a 	mov	r4,r18
     e58:	0002df40 	call	2df4 <__muldf3>
     e5c:	1009883a 	mov	r4,r2
     e60:	180b883a 	mov	r5,r3
     e64:	1021883a 	mov	r16,r2
     e68:	1823883a 	mov	r17,r3
     e6c:	00024dc0 	call	24dc <rint>
     e70:	180f883a 	mov	r7,r3
     e74:	8009883a 	mov	r4,r16
     e78:	880b883a 	mov	r5,r17
     e7c:	100d883a 	mov	r6,r2
     e80:	00034980 	call	3498 <__nedf2>
     e84:	103fe126 	beq	r2,zero,e0c <pow+0x3fc>
     e88:	00bffc34 	movhi	r2,65520
     e8c:	d8800715 	stw	r2,28(sp)
     e90:	d8000615 	stw	zero,24(sp)
     e94:	003fdd06 	br	e0c <pow+0x3fc>

00000e98 <__ieee754_pow>:
     e98:	deffbb04 	addi	sp,sp,-276
     e9c:	3005883a 	mov	r2,r6
     ea0:	dd404015 	stw	r21,256(sp)
     ea4:	dd003f15 	stw	r20,252(sp)
     ea8:	d9802815 	stw	r6,160(sp)
     eac:	2029883a 	mov	r20,r4
     eb0:	282b883a 	mov	r21,r5
     eb4:	3009883a 	mov	r4,r6
     eb8:	380b883a 	mov	r5,r7
     ebc:	01a00034 	movhi	r6,32768
     ec0:	31bfffc4 	addi	r6,r6,-1
     ec4:	dc003b15 	stw	r16,236(sp)
     ec8:	29a0703a 	and	r16,r5,r6
     ecc:	1404b03a 	or	r2,r2,r16
     ed0:	dd804115 	stw	r22,260(sp)
     ed4:	dc403c15 	stw	r17,240(sp)
     ed8:	d9c02915 	stw	r7,164(sp)
     edc:	382d883a 	mov	r22,r7
     ee0:	dfc04415 	stw	ra,272(sp)
     ee4:	200f883a 	mov	r7,r4
     ee8:	df004315 	stw	fp,268(sp)
     eec:	ddc04215 	stw	r23,264(sp)
     ef0:	dcc03e15 	stw	r19,248(sp)
     ef4:	dc803d15 	stw	r18,244(sp)
     ef8:	a023883a 	mov	r17,r20
     efc:	2809883a 	mov	r4,r5
     f00:	10000826 	beq	r2,zero,f24 <__ieee754_pow+0x8c>
     f04:	a9a4703a 	and	r18,r21,r6
     f08:	009ffc34 	movhi	r2,32752
     f0c:	a827883a 	mov	r19,r21
     f10:	1480180e 	bge	r2,r18,f74 <__ieee754_pow+0xdc>
     f14:	00b00434 	movhi	r2,49168
     f18:	9085883a 	add	r2,r18,r2
     f1c:	8884b03a 	or	r2,r17,r2
     f20:	1000321e 	bne	r2,zero,fec <__ieee754_pow+0x154>
     f24:	0009883a 	mov	r4,zero
     f28:	014ffc34 	movhi	r5,16368
     f2c:	d9002815 	stw	r4,160(sp)
     f30:	d9402915 	stw	r5,164(sp)
     f34:	d9002817 	ldw	r4,160(sp)
     f38:	d9402917 	ldw	r5,164(sp)
     f3c:	2005883a 	mov	r2,r4
     f40:	2807883a 	mov	r3,r5
     f44:	dfc04417 	ldw	ra,272(sp)
     f48:	df004317 	ldw	fp,268(sp)
     f4c:	ddc04217 	ldw	r23,264(sp)
     f50:	dd804117 	ldw	r22,260(sp)
     f54:	dd404017 	ldw	r21,256(sp)
     f58:	dd003f17 	ldw	r20,252(sp)
     f5c:	dcc03e17 	ldw	r19,248(sp)
     f60:	dc803d17 	ldw	r18,244(sp)
     f64:	dc403c17 	ldw	r17,240(sp)
     f68:	dc003b17 	ldw	r16,236(sp)
     f6c:	dec04504 	addi	sp,sp,276
     f70:	f800283a 	ret
     f74:	90802b26 	beq	r18,r2,1024 <__ieee754_pow+0x18c>
     f78:	143fe616 	blt	r2,r16,f14 <__ieee754_pow+0x7c>
     f7c:	80806126 	beq	r16,r2,1104 <__ieee754_pow+0x26c>
     f80:	982e403a 	cmpge	r23,r19,zero
     f84:	b8004e26 	beq	r23,zero,10c0 <__ieee754_pow+0x228>
     f88:	0039883a 	mov	fp,zero
     f8c:	3800281e 	bne	r7,zero,1030 <__ieee754_pow+0x198>
     f90:	009ffc34 	movhi	r2,32752
     f94:	80804f26 	beq	r16,r2,10d4 <__ieee754_pow+0x23c>
     f98:	008ffc34 	movhi	r2,16368
     f9c:	80808226 	beq	r16,r2,11a8 <__ieee754_pow+0x310>
     fa0:	00900034 	movhi	r2,16384
     fa4:	20828426 	beq	r4,r2,19b8 <__ieee754_pow+0xb20>
     fa8:	008ff834 	movhi	r2,16352
     fac:	2080201e 	bne	r4,r2,1030 <__ieee754_pow+0x198>
     fb0:	98001f16 	blt	r19,zero,1030 <__ieee754_pow+0x198>
     fb4:	a80b883a 	mov	r5,r21
     fb8:	a009883a 	mov	r4,r20
     fbc:	dfc04417 	ldw	ra,272(sp)
     fc0:	df004317 	ldw	fp,268(sp)
     fc4:	ddc04217 	ldw	r23,264(sp)
     fc8:	dd804117 	ldw	r22,260(sp)
     fcc:	dd404017 	ldw	r21,256(sp)
     fd0:	dd003f17 	ldw	r20,252(sp)
     fd4:	dcc03e17 	ldw	r19,248(sp)
     fd8:	dc803d17 	ldw	r18,244(sp)
     fdc:	dc403c17 	ldw	r17,240(sp)
     fe0:	dc003b17 	ldw	r16,236(sp)
     fe4:	dec04504 	addi	sp,sp,276
     fe8:	00021981 	jmpi	2198 <__ieee754_sqrt>
     fec:	01000074 	movhi	r4,1
     ff0:	213e5e04 	addi	r4,r4,-1672
     ff4:	dfc04417 	ldw	ra,272(sp)
     ff8:	df004317 	ldw	fp,268(sp)
     ffc:	ddc04217 	ldw	r23,264(sp)
    1000:	dd804117 	ldw	r22,260(sp)
    1004:	dd404017 	ldw	r21,256(sp)
    1008:	dd003f17 	ldw	r20,252(sp)
    100c:	dcc03e17 	ldw	r19,248(sp)
    1010:	dc803d17 	ldw	r18,244(sp)
    1014:	dc403c17 	ldw	r17,240(sp)
    1018:	dc003b17 	ldw	r16,236(sp)
    101c:	dec04504 	addi	sp,sp,276
    1020:	00024cc1 	jmpi	24cc <nan>
    1024:	a03fbb1e 	bne	r20,zero,f14 <__ieee754_pow+0x7c>
    1028:	003fd306 	br	f78 <__ieee754_pow+0xe0>
    102c:	0039883a 	mov	fp,zero
    1030:	a009883a 	mov	r4,r20
    1034:	a80b883a 	mov	r5,r21
    1038:	00024600 	call	2460 <fabs>
    103c:	1015883a 	mov	r10,r2
    1040:	1817883a 	mov	r11,r3
    1044:	88001226 	beq	r17,zero,1090 <__ieee754_pow+0x1f8>
    1048:	9804d7fa 	srli	r2,r19,31
    104c:	10bfffc4 	addi	r2,r2,-1
    1050:	1706b03a 	or	r3,r2,fp
    1054:	d8802515 	stw	r2,148(sp)
    1058:	18002c1e 	bne	r3,zero,110c <__ieee754_pow+0x274>
    105c:	a80f883a 	mov	r7,r21
    1060:	a009883a 	mov	r4,r20
    1064:	a80b883a 	mov	r5,r21
    1068:	a00d883a 	mov	r6,r20
    106c:	0002d000 	call	2d00 <__subdf3>
    1070:	1009883a 	mov	r4,r2
    1074:	180b883a 	mov	r5,r3
    1078:	100d883a 	mov	r6,r2
    107c:	180f883a 	mov	r7,r3
    1080:	00031b80 	call	31b8 <__divdf3>
    1084:	d8802815 	stw	r2,160(sp)
    1088:	d8c02915 	stw	r3,164(sp)
    108c:	003fa906 	br	f34 <__ieee754_pow+0x9c>
    1090:	009ffc34 	movhi	r2,32752
    1094:	90800326 	beq	r18,r2,10a4 <__ieee754_pow+0x20c>
    1098:	90000226 	beq	r18,zero,10a4 <__ieee754_pow+0x20c>
    109c:	008ffc34 	movhi	r2,16368
    10a0:	90bfe91e 	bne	r18,r2,1048 <__ieee754_pow+0x1b0>
    10a4:	b0026316 	blt	r22,zero,1a34 <__ieee754_pow+0xb9c>
    10a8:	5011883a 	mov	r8,r10
    10ac:	5813883a 	mov	r9,r11
    10b0:	b8023126 	beq	r23,zero,1978 <__ieee754_pow+0xae0>
    10b4:	da002815 	stw	r8,160(sp)
    10b8:	da402915 	stw	r9,164(sp)
    10bc:	003f9d06 	br	f34 <__ieee754_pow+0x9c>
    10c0:	0090d034 	movhi	r2,17216
    10c4:	10bfffc4 	addi	r2,r2,-1
    10c8:	1400270e 	bge	r2,r16,1168 <__ieee754_pow+0x2d0>
    10cc:	07000084 	movi	fp,2
    10d0:	003fae06 	br	f8c <__ieee754_pow+0xf4>
    10d4:	00b00434 	movhi	r2,49168
    10d8:	9085883a 	add	r2,r18,r2
    10dc:	8884b03a 	or	r2,r17,r2
    10e0:	103f9026 	beq	r2,zero,f24 <__ieee754_pow+0x8c>
    10e4:	008ffc34 	movhi	r2,16368
    10e8:	10bfffc4 	addi	r2,r2,-1
    10ec:	1482d00e 	bge	r2,r18,1c30 <__ieee754_pow+0xd98>
    10f0:	b03f900e 	bge	r22,zero,f34 <__ieee754_pow+0x9c>
    10f4:	0005883a 	mov	r2,zero
    10f8:	d8802815 	stw	r2,160(sp)
    10fc:	d8802915 	stw	r2,164(sp)
    1100:	003f8c06 	br	f34 <__ieee754_pow+0x9c>
    1104:	383f9e26 	beq	r7,zero,f80 <__ieee754_pow+0xe8>
    1108:	003f8206 	br	f14 <__ieee754_pow+0x7c>
    110c:	00907834 	movhi	r2,16864
    1110:	1400290e 	bge	r2,r16,11b8 <__ieee754_pow+0x320>
    1114:	0090fc34 	movhi	r2,17392
    1118:	1402500e 	bge	r2,r16,1a5c <__ieee754_pow+0xbc4>
    111c:	008ffc34 	movhi	r2,16368
    1120:	10bfffc4 	addi	r2,r2,-1
    1124:	14800b0e 	bge	r2,r18,1154 <__ieee754_pow+0x2bc>
    1128:	05800b0e 	bge	zero,r22,1158 <__ieee754_pow+0x2c0>
    112c:	00a20034 	movhi	r2,34816
    1130:	109d6704 	addi	r2,r2,30108
    1134:	00df8e34 	movhi	r3,32312
    1138:	18f90f04 	addi	r3,r3,-7108
    113c:	100d883a 	mov	r6,r2
    1140:	180f883a 	mov	r7,r3
    1144:	1009883a 	mov	r4,r2
    1148:	180b883a 	mov	r5,r3
    114c:	0002df40 	call	2df4 <__muldf3>
    1150:	003fcc06 	br	1084 <__ieee754_pow+0x1ec>
    1154:	b03ff516 	blt	r22,zero,112c <__ieee754_pow+0x294>
    1158:	0007883a 	mov	r3,zero
    115c:	d8c02815 	stw	r3,160(sp)
    1160:	d8c02915 	stw	r3,164(sp)
    1164:	003f7306 	br	f34 <__ieee754_pow+0x9c>
    1168:	008ffc34 	movhi	r2,16368
    116c:	10bfffc4 	addi	r2,r2,-1
    1170:	143f850e 	bge	r2,r16,f88 <__ieee754_pow+0xf0>
    1174:	8005d53a 	srai	r2,r16,20
    1178:	01400504 	movi	r5,20
    117c:	10ff0044 	addi	r3,r2,-1023
    1180:	28c3e10e 	bge	r5,r3,2108 <__ieee754_pow+0x1270>
    1184:	00800d04 	movi	r2,52
    1188:	10c5c83a 	sub	r2,r2,r3
    118c:	3886d83a 	srl	r3,r7,r2
    1190:	1884983a 	sll	r2,r3,r2
    1194:	38bf7c1e 	bne	r7,r2,f88 <__ieee754_pow+0xf0>
    1198:	18c0004c 	andi	r3,r3,1
    119c:	00800084 	movi	r2,2
    11a0:	10f9c83a 	sub	fp,r2,r3
    11a4:	003f7906 	br	f8c <__ieee754_pow+0xf4>
    11a8:	b0038516 	blt	r22,zero,1fc0 <__ieee754_pow+0x1128>
    11ac:	dd002815 	stw	r20,160(sp)
    11b0:	dd402915 	stw	r21,164(sp)
    11b4:	003f5f06 	br	f34 <__ieee754_pow+0x9c>
    11b8:	00800434 	movhi	r2,16
    11bc:	10bfffc4 	addi	r2,r2,-1
    11c0:	1482900e 	bge	r2,r18,1c04 <__ieee754_pow+0xd6c>
    11c4:	000b883a 	mov	r5,zero
    11c8:	9005d53a 	srai	r2,r18,20
    11cc:	00c00434 	movhi	r3,16
    11d0:	18ffffc4 	addi	r3,r3,-1
    11d4:	90c8703a 	and	r4,r18,r3
    11d8:	2887883a 	add	r3,r5,r2
    11dc:	18bf0044 	addi	r2,r3,-1023
    11e0:	d8800015 	stw	r2,0(sp)
    11e4:	00800134 	movhi	r2,4
    11e8:	10a62384 	addi	r2,r2,-26482
    11ec:	250ffc34 	orhi	r20,r4,16368
    11f0:	1101ee0e 	bge	r2,r4,19ac <__ieee754_pow+0xb14>
    11f4:	00800334 	movhi	r2,12
    11f8:	10ad9e44 	addi	r2,r2,-18823
    11fc:	1101e716 	blt	r2,r4,199c <__ieee754_pow+0xb04>
    1200:	01000044 	movi	r4,1
    1204:	04000334 	movhi	r16,12
    1208:	200890fa 	slli	r4,r4,3
    120c:	da800115 	stw	r10,4(sp)
    1210:	dd000215 	stw	r20,8(sp)
    1214:	d9002c15 	stw	r4,176(sp)
    1218:	d9402c17 	ldw	r5,176(sp)
    121c:	01000074 	movhi	r4,1
    1220:	213df904 	addi	r4,r4,-2076
    1224:	a02bd07a 	srai	r21,r20,1
    1228:	2909883a 	add	r4,r5,r4
    122c:	25800017 	ldw	r22,0(r4)
    1230:	25c00117 	ldw	r23,4(r4)
    1234:	a00b883a 	mov	r5,r20
    1238:	5009883a 	mov	r4,r10
    123c:	b00d883a 	mov	r6,r22
    1240:	b80f883a 	mov	r7,r23
    1244:	0002d000 	call	2d00 <__subdf3>
    1248:	d9000117 	ldw	r4,4(sp)
    124c:	a00b883a 	mov	r5,r20
    1250:	b00d883a 	mov	r6,r22
    1254:	b80f883a 	mov	r7,r23
    1258:	1025883a 	mov	r18,r2
    125c:	1827883a 	mov	r19,r3
    1260:	0002d800 	call	2d80 <__adddf3>
    1264:	0011883a 	mov	r8,zero
    1268:	024ffc34 	movhi	r9,16368
    126c:	480b883a 	mov	r5,r9
    1270:	4009883a 	mov	r4,r8
    1274:	180f883a 	mov	r7,r3
    1278:	100d883a 	mov	r6,r2
    127c:	00031b80 	call	31b8 <__divdf3>
    1280:	d8c02e15 	stw	r3,184(sp)
    1284:	d8800f15 	stw	r2,60(sp)
    1288:	d8802d15 	stw	r2,180(sp)
    128c:	d8802e17 	ldw	r2,184(sp)
    1290:	d9800f17 	ldw	r6,60(sp)
    1294:	9009883a 	mov	r4,r18
    1298:	980b883a 	mov	r5,r19
    129c:	100f883a 	mov	r7,r2
    12a0:	dc800b15 	stw	r18,44(sp)
    12a4:	dcc00c15 	stw	r19,48(sp)
    12a8:	d8801015 	stw	r2,64(sp)
    12ac:	0002df40 	call	2df4 <__muldf3>
    12b0:	d8c03015 	stw	r3,192(sp)
    12b4:	d9003017 	ldw	r4,192(sp)
    12b8:	d8802f15 	stw	r2,188(sp)
    12bc:	d8800315 	stw	r2,12(sp)
    12c0:	ad480034 	orhi	r21,r21,8192
    12c4:	0005883a 	mov	r2,zero
    12c8:	ac2b883a 	add	r21,r21,r16
    12cc:	000b883a 	mov	r5,zero
    12d0:	1021883a 	mov	r16,r2
    12d4:	2005883a 	mov	r2,r4
    12d8:	800d883a 	mov	r6,r16
    12dc:	a80f883a 	mov	r7,r21
    12e0:	d9000415 	stw	r4,16(sp)
    12e4:	d9002715 	stw	r4,156(sp)
    12e8:	d9402615 	stw	r5,152(sp)
    12ec:	d9401615 	stw	r5,88(sp)
    12f0:	d9001715 	stw	r4,92(sp)
    12f4:	100b883a 	mov	r5,r2
    12f8:	0009883a 	mov	r4,zero
    12fc:	0002df40 	call	2df4 <__muldf3>
    1300:	d9000b17 	ldw	r4,44(sp)
    1304:	980b883a 	mov	r5,r19
    1308:	180f883a 	mov	r7,r3
    130c:	100d883a 	mov	r6,r2
    1310:	0002d000 	call	2d00 <__subdf3>
    1314:	8009883a 	mov	r4,r16
    1318:	a80b883a 	mov	r5,r21
    131c:	b80f883a 	mov	r7,r23
    1320:	b00d883a 	mov	r6,r22
    1324:	1021883a 	mov	r16,r2
    1328:	1823883a 	mov	r17,r3
    132c:	0002d000 	call	2d00 <__subdf3>
    1330:	d9000117 	ldw	r4,4(sp)
    1334:	a00b883a 	mov	r5,r20
    1338:	180f883a 	mov	r7,r3
    133c:	100d883a 	mov	r6,r2
    1340:	0002d000 	call	2d00 <__subdf3>
    1344:	d9001617 	ldw	r4,88(sp)
    1348:	d9402717 	ldw	r5,156(sp)
    134c:	180f883a 	mov	r7,r3
    1350:	100d883a 	mov	r6,r2
    1354:	0002df40 	call	2df4 <__muldf3>
    1358:	180f883a 	mov	r7,r3
    135c:	880b883a 	mov	r5,r17
    1360:	8009883a 	mov	r4,r16
    1364:	100d883a 	mov	r6,r2
    1368:	0002d000 	call	2d00 <__subdf3>
    136c:	d9000f17 	ldw	r4,60(sp)
    1370:	d9402e17 	ldw	r5,184(sp)
    1374:	180f883a 	mov	r7,r3
    1378:	100d883a 	mov	r6,r2
    137c:	0002df40 	call	2df4 <__muldf3>
    1380:	d9000317 	ldw	r4,12(sp)
    1384:	d9403017 	ldw	r5,192(sp)
    1388:	d8803115 	stw	r2,196(sp)
    138c:	200d883a 	mov	r6,r4
    1390:	280f883a 	mov	r7,r5
    1394:	d8c03215 	stw	r3,200(sp)
    1398:	0002df40 	call	2df4 <__muldf3>
    139c:	1009883a 	mov	r4,r2
    13a0:	180b883a 	mov	r5,r3
    13a4:	100d883a 	mov	r6,r2
    13a8:	180f883a 	mov	r7,r3
    13ac:	1021883a 	mov	r16,r2
    13b0:	1823883a 	mov	r17,r3
    13b4:	0002df40 	call	2df4 <__muldf3>
    13b8:	02129174 	movhi	r8,19013
    13bc:	4213bbc4 	addi	r8,r8,20207
    13c0:	024ff2b4 	movhi	r9,16330
    13c4:	4a5f8a04 	addi	r9,r9,32296
    13c8:	480f883a 	mov	r7,r9
    13cc:	8009883a 	mov	r4,r16
    13d0:	880b883a 	mov	r5,r17
    13d4:	400d883a 	mov	r6,r8
    13d8:	1029883a 	mov	r20,r2
    13dc:	182b883a 	mov	r21,r3
    13e0:	0002df40 	call	2df4 <__muldf3>
    13e4:	0224f2b4 	movhi	r8,37834
    13e8:	4236d944 	addi	r8,r8,-9371
    13ec:	024ff3b4 	movhi	r9,16334
    13f0:	4a619284 	addi	r9,r9,-31158
    13f4:	480f883a 	mov	r7,r9
    13f8:	400d883a 	mov	r6,r8
    13fc:	180b883a 	mov	r5,r3
    1400:	1009883a 	mov	r4,r2
    1404:	0002d800 	call	2d80 <__adddf3>
    1408:	180f883a 	mov	r7,r3
    140c:	8009883a 	mov	r4,r16
    1410:	880b883a 	mov	r5,r17
    1414:	100d883a 	mov	r6,r2
    1418:	0002df40 	call	2df4 <__muldf3>
    141c:	022a4774 	movhi	r8,43293
    1420:	42104044 	addi	r8,r8,16641
    1424:	024ff474 	movhi	r9,16337
    1428:	4a5d1804 	addi	r9,r9,29792
    142c:	480f883a 	mov	r7,r9
    1430:	400d883a 	mov	r6,r8
    1434:	180b883a 	mov	r5,r3
    1438:	1009883a 	mov	r4,r2
    143c:	0002d800 	call	2d80 <__adddf3>
    1440:	180f883a 	mov	r7,r3
    1444:	8009883a 	mov	r4,r16
    1448:	880b883a 	mov	r5,r17
    144c:	100d883a 	mov	r6,r2
    1450:	0002df40 	call	2df4 <__muldf3>
    1454:	021463f4 	movhi	r8,20879
    1458:	42099344 	addi	r8,r8,9805
    145c:	024ff574 	movhi	r9,16341
    1460:	4a555544 	addi	r9,r9,21845
    1464:	480f883a 	mov	r7,r9
    1468:	400d883a 	mov	r6,r8
    146c:	180b883a 	mov	r5,r3
    1470:	1009883a 	mov	r4,r2
    1474:	0002d800 	call	2d80 <__adddf3>
    1478:	180f883a 	mov	r7,r3
    147c:	8009883a 	mov	r4,r16
    1480:	880b883a 	mov	r5,r17
    1484:	100d883a 	mov	r6,r2
    1488:	0002df40 	call	2df4 <__muldf3>
    148c:	0236dc34 	movhi	r8,56176
    1490:	422affc4 	addi	r8,r8,-21505
    1494:	024ff6f4 	movhi	r9,16347
    1498:	4a5b6d84 	addi	r9,r9,28086
    149c:	480f883a 	mov	r7,r9
    14a0:	400d883a 	mov	r6,r8
    14a4:	180b883a 	mov	r5,r3
    14a8:	1009883a 	mov	r4,r2
    14ac:	0002d800 	call	2d80 <__adddf3>
    14b0:	180f883a 	mov	r7,r3
    14b4:	8009883a 	mov	r4,r16
    14b8:	880b883a 	mov	r5,r17
    14bc:	100d883a 	mov	r6,r2
    14c0:	0002df40 	call	2df4 <__muldf3>
    14c4:	020cccf4 	movhi	r8,13107
    14c8:	420cc0c4 	addi	r8,r8,13059
    14cc:	024ff8f4 	movhi	r9,16355
    14d0:	4a4cccc4 	addi	r9,r9,13107
    14d4:	480f883a 	mov	r7,r9
    14d8:	400d883a 	mov	r6,r8
    14dc:	180b883a 	mov	r5,r3
    14e0:	1009883a 	mov	r4,r2
    14e4:	0002d800 	call	2d80 <__adddf3>
    14e8:	180f883a 	mov	r7,r3
    14ec:	a80b883a 	mov	r5,r21
    14f0:	a009883a 	mov	r4,r20
    14f4:	100d883a 	mov	r6,r2
    14f8:	0002df40 	call	2df4 <__muldf3>
    14fc:	d9000317 	ldw	r4,12(sp)
    1500:	d9403017 	ldw	r5,192(sp)
    1504:	d9801617 	ldw	r6,88(sp)
    1508:	d9c02717 	ldw	r7,156(sp)
    150c:	1021883a 	mov	r16,r2
    1510:	1823883a 	mov	r17,r3
    1514:	0002d800 	call	2d80 <__adddf3>
    1518:	d9003117 	ldw	r4,196(sp)
    151c:	d9403217 	ldw	r5,200(sp)
    1520:	180f883a 	mov	r7,r3
    1524:	100d883a 	mov	r6,r2
    1528:	d9001415 	stw	r4,80(sp)
    152c:	d9401515 	stw	r5,84(sp)
    1530:	0002df40 	call	2df4 <__muldf3>
    1534:	180f883a 	mov	r7,r3
    1538:	8009883a 	mov	r4,r16
    153c:	880b883a 	mov	r5,r17
    1540:	100d883a 	mov	r6,r2
    1544:	0002d800 	call	2d80 <__adddf3>
    1548:	d9001617 	ldw	r4,88(sp)
    154c:	d9402717 	ldw	r5,156(sp)
    1550:	d8803315 	stw	r2,204(sp)
    1554:	200d883a 	mov	r6,r4
    1558:	280f883a 	mov	r7,r5
    155c:	d8c03415 	stw	r3,208(sp)
    1560:	0002df40 	call	2df4 <__muldf3>
    1564:	182f883a 	mov	r23,r3
    1568:	05500234 	movhi	r21,16392
    156c:	0029883a 	mov	r20,zero
    1570:	b80b883a 	mov	r5,r23
    1574:	a00d883a 	mov	r6,r20
    1578:	a80f883a 	mov	r7,r21
    157c:	1009883a 	mov	r4,r2
    1580:	d8800715 	stw	r2,28(sp)
    1584:	d8c00815 	stw	r3,32(sp)
    1588:	0002d800 	call	2d80 <__adddf3>
    158c:	d9003317 	ldw	r4,204(sp)
    1590:	d9403417 	ldw	r5,208(sp)
    1594:	180f883a 	mov	r7,r3
    1598:	100d883a 	mov	r6,r2
    159c:	d9000515 	stw	r4,20(sp)
    15a0:	d9400615 	stw	r5,24(sp)
    15a4:	0002d800 	call	2d80 <__adddf3>
    15a8:	d9001617 	ldw	r4,88(sp)
    15ac:	d9402717 	ldw	r5,156(sp)
    15b0:	0025883a 	mov	r18,zero
    15b4:	900d883a 	mov	r6,r18
    15b8:	180f883a 	mov	r7,r3
    15bc:	1823883a 	mov	r17,r3
    15c0:	0002df40 	call	2df4 <__muldf3>
    15c4:	d9001417 	ldw	r4,80(sp)
    15c8:	d9403217 	ldw	r5,200(sp)
    15cc:	880f883a 	mov	r7,r17
    15d0:	900d883a 	mov	r6,r18
    15d4:	d8803515 	stw	r2,212(sp)
    15d8:	d8c03615 	stw	r3,216(sp)
    15dc:	0002df40 	call	2df4 <__muldf3>
    15e0:	a80f883a 	mov	r7,r21
    15e4:	880b883a 	mov	r5,r17
    15e8:	000d883a 	mov	r6,zero
    15ec:	9009883a 	mov	r4,r18
    15f0:	1021883a 	mov	r16,r2
    15f4:	1823883a 	mov	r17,r3
    15f8:	0002d000 	call	2d00 <__subdf3>
    15fc:	d9800717 	ldw	r6,28(sp)
    1600:	b80f883a 	mov	r7,r23
    1604:	180b883a 	mov	r5,r3
    1608:	1009883a 	mov	r4,r2
    160c:	0002d000 	call	2d00 <__subdf3>
    1610:	d9000517 	ldw	r4,20(sp)
    1614:	d9403417 	ldw	r5,208(sp)
    1618:	180f883a 	mov	r7,r3
    161c:	100d883a 	mov	r6,r2
    1620:	0002d000 	call	2d00 <__subdf3>
    1624:	d9000317 	ldw	r4,12(sp)
    1628:	d9403017 	ldw	r5,192(sp)
    162c:	180f883a 	mov	r7,r3
    1630:	100d883a 	mov	r6,r2
    1634:	0002df40 	call	2df4 <__muldf3>
    1638:	180f883a 	mov	r7,r3
    163c:	880b883a 	mov	r5,r17
    1640:	8009883a 	mov	r4,r16
    1644:	100d883a 	mov	r6,r2
    1648:	0002d800 	call	2d80 <__adddf3>
    164c:	102d883a 	mov	r22,r2
    1650:	d9003617 	ldw	r4,216(sp)
    1654:	d8803517 	ldw	r2,212(sp)
    1658:	d9403617 	ldw	r5,216(sp)
    165c:	182f883a 	mov	r23,r3
    1660:	b00d883a 	mov	r6,r22
    1664:	b80f883a 	mov	r7,r23
    1668:	d9000a15 	stw	r4,40(sp)
    166c:	1009883a 	mov	r4,r2
    1670:	054ffbf4 	movhi	r21,16367
    1674:	ad71c244 	addi	r21,r21,-14583
    1678:	dd800d15 	stw	r22,52(sp)
    167c:	ddc00e15 	stw	r23,56(sp)
    1680:	05380034 	movhi	r20,57344
    1684:	d8800915 	stw	r2,36(sp)
    1688:	0002d800 	call	2d80 <__adddf3>
    168c:	180b883a 	mov	r5,r3
    1690:	a00d883a 	mov	r6,r20
    1694:	a80f883a 	mov	r7,r21
    1698:	9009883a 	mov	r4,r18
    169c:	1823883a 	mov	r17,r3
    16a0:	0002df40 	call	2df4 <__muldf3>
    16a4:	020516f4 	movhi	r8,5211
    16a8:	42007d44 	addi	r8,r8,501
    16ac:	026f8fb4 	movhi	r9,48702
    16b0:	4a4bf804 	addi	r9,r9,12256
    16b4:	480f883a 	mov	r7,r9
    16b8:	400d883a 	mov	r6,r8
    16bc:	880b883a 	mov	r5,r17
    16c0:	9009883a 	mov	r4,r18
    16c4:	d8803715 	stw	r2,220(sp)
    16c8:	d8c03815 	stw	r3,224(sp)
    16cc:	0002df40 	call	2df4 <__muldf3>
    16d0:	d9800917 	ldw	r6,36(sp)
    16d4:	d9c03617 	ldw	r7,216(sp)
    16d8:	880b883a 	mov	r5,r17
    16dc:	9009883a 	mov	r4,r18
    16e0:	1021883a 	mov	r16,r2
    16e4:	1823883a 	mov	r17,r3
    16e8:	0002d000 	call	2d00 <__subdf3>
    16ec:	d9000d17 	ldw	r4,52(sp)
    16f0:	b80b883a 	mov	r5,r23
    16f4:	180f883a 	mov	r7,r3
    16f8:	100d883a 	mov	r6,r2
    16fc:	0002d000 	call	2d00 <__subdf3>
    1700:	180b883a 	mov	r5,r3
    1704:	a80f883a 	mov	r7,r21
    1708:	01b70eb4 	movhi	r6,56378
    170c:	3180ff44 	addi	r6,r6,1021
    1710:	1009883a 	mov	r4,r2
    1714:	0002df40 	call	2df4 <__muldf3>
    1718:	180f883a 	mov	r7,r3
    171c:	880b883a 	mov	r5,r17
    1720:	8009883a 	mov	r4,r16
    1724:	100d883a 	mov	r6,r2
    1728:	0002d800 	call	2d80 <__adddf3>
    172c:	d9402c17 	ldw	r5,176(sp)
    1730:	01000074 	movhi	r4,1
    1734:	213dfd04 	addi	r4,r4,-2060
    1738:	2909883a 	add	r4,r5,r4
    173c:	22400117 	ldw	r9,4(r4)
    1740:	22000017 	ldw	r8,0(r4)
    1744:	180b883a 	mov	r5,r3
    1748:	480f883a 	mov	r7,r9
    174c:	400d883a 	mov	r6,r8
    1750:	1009883a 	mov	r4,r2
    1754:	0002d800 	call	2d80 <__adddf3>
    1758:	d9000017 	ldw	r4,0(sp)
    175c:	182f883a 	mov	r23,r3
    1760:	102d883a 	mov	r22,r2
    1764:	00036b80 	call	36b8 <__floatsidf>
    1768:	d9402c17 	ldw	r5,176(sp)
    176c:	01000074 	movhi	r4,1
    1770:	213e0104 	addi	r4,r4,-2044
    1774:	b00d883a 	mov	r6,r22
    1778:	2911883a 	add	r8,r5,r4
    177c:	d9003717 	ldw	r4,220(sp)
    1780:	d9403817 	ldw	r5,224(sp)
    1784:	45000017 	ldw	r20,0(r8)
    1788:	d9002315 	stw	r4,140(sp)
    178c:	d9003817 	ldw	r4,224(sp)
    1790:	45400117 	ldw	r21,4(r8)
    1794:	b80f883a 	mov	r7,r23
    1798:	d9002415 	stw	r4,144(sp)
    179c:	d9002317 	ldw	r4,140(sp)
    17a0:	1021883a 	mov	r16,r2
    17a4:	1823883a 	mov	r17,r3
    17a8:	dd802115 	stw	r22,132(sp)
    17ac:	ddc02215 	stw	r23,136(sp)
    17b0:	0002d800 	call	2d80 <__adddf3>
    17b4:	180b883a 	mov	r5,r3
    17b8:	1009883a 	mov	r4,r2
    17bc:	a00d883a 	mov	r6,r20
    17c0:	a80f883a 	mov	r7,r21
    17c4:	0002d800 	call	2d80 <__adddf3>
    17c8:	180f883a 	mov	r7,r3
    17cc:	8009883a 	mov	r4,r16
    17d0:	880b883a 	mov	r5,r17
    17d4:	100d883a 	mov	r6,r2
    17d8:	0002d800 	call	2d80 <__adddf3>
    17dc:	180b883a 	mov	r5,r3
    17e0:	0009883a 	mov	r4,zero
    17e4:	800d883a 	mov	r6,r16
    17e8:	880f883a 	mov	r7,r17
    17ec:	d9001b15 	stw	r4,108(sp)
    17f0:	d8c01c15 	stw	r3,112(sp)
    17f4:	0002d000 	call	2d00 <__subdf3>
    17f8:	180b883a 	mov	r5,r3
    17fc:	a80f883a 	mov	r7,r21
    1800:	1009883a 	mov	r4,r2
    1804:	a00d883a 	mov	r6,r20
    1808:	0002d000 	call	2d00 <__subdf3>
    180c:	d9802317 	ldw	r6,140(sp)
    1810:	d9c03817 	ldw	r7,224(sp)
    1814:	180b883a 	mov	r5,r3
    1818:	1009883a 	mov	r4,r2
    181c:	0002d000 	call	2d00 <__subdf3>
    1820:	d9002117 	ldw	r4,132(sp)
    1824:	1011883a 	mov	r8,r2
    1828:	1813883a 	mov	r9,r3
    182c:	b80b883a 	mov	r5,r23
    1830:	480f883a 	mov	r7,r9
    1834:	400d883a 	mov	r6,r8
    1838:	0002d000 	call	2d00 <__subdf3>
    183c:	1823883a 	mov	r17,r3
    1840:	d8c02517 	ldw	r3,148(sp)
    1844:	1021883a 	mov	r16,r2
    1848:	e0bfffc4 	addi	r2,fp,-1
    184c:	1884b03a 	or	r2,r3,r2
    1850:	1000731e 	bne	r2,zero,1a20 <__ieee754_pow+0xb88>
    1854:	0009883a 	mov	r4,zero
    1858:	016ffc34 	movhi	r5,49136
    185c:	d9001915 	stw	r4,100(sp)
    1860:	d9401a15 	stw	r5,104(sp)
    1864:	d9402917 	ldw	r5,164(sp)
    1868:	d9002817 	ldw	r4,160(sp)
    186c:	0029883a 	mov	r20,zero
    1870:	a00d883a 	mov	r6,r20
    1874:	280f883a 	mov	r7,r5
    1878:	2827883a 	mov	r19,r5
    187c:	0002d000 	call	2d00 <__subdf3>
    1880:	d9001b17 	ldw	r4,108(sp)
    1884:	d9401c17 	ldw	r5,112(sp)
    1888:	180f883a 	mov	r7,r3
    188c:	100d883a 	mov	r6,r2
    1890:	0002df40 	call	2df4 <__muldf3>
    1894:	d9c02917 	ldw	r7,164(sp)
    1898:	d9802817 	ldw	r6,160(sp)
    189c:	880b883a 	mov	r5,r17
    18a0:	8009883a 	mov	r4,r16
    18a4:	1823883a 	mov	r17,r3
    18a8:	1021883a 	mov	r16,r2
    18ac:	0002df40 	call	2df4 <__muldf3>
    18b0:	180f883a 	mov	r7,r3
    18b4:	880b883a 	mov	r5,r17
    18b8:	8009883a 	mov	r4,r16
    18bc:	100d883a 	mov	r6,r2
    18c0:	0002d800 	call	2d80 <__adddf3>
    18c4:	d9401c17 	ldw	r5,112(sp)
    18c8:	d9001b17 	ldw	r4,108(sp)
    18cc:	a00d883a 	mov	r6,r20
    18d0:	980f883a 	mov	r7,r19
    18d4:	1029883a 	mov	r20,r2
    18d8:	182b883a 	mov	r21,r3
    18dc:	0002df40 	call	2df4 <__muldf3>
    18e0:	1025883a 	mov	r18,r2
    18e4:	1827883a 	mov	r19,r3
    18e8:	a009883a 	mov	r4,r20
    18ec:	a80b883a 	mov	r5,r21
    18f0:	900d883a 	mov	r6,r18
    18f4:	980f883a 	mov	r7,r19
    18f8:	dd001d15 	stw	r20,116(sp)
    18fc:	dc801f15 	stw	r18,124(sp)
    1900:	dd401e15 	stw	r21,120(sp)
    1904:	dcc02015 	stw	r19,128(sp)
    1908:	0002d800 	call	2d80 <__adddf3>
    190c:	1823883a 	mov	r17,r3
    1910:	01102434 	movhi	r4,16528
    1914:	213fffc4 	addi	r4,r4,-1
    1918:	1021883a 	mov	r16,r2
    191c:	182f883a 	mov	r23,r3
    1920:	dc401815 	stw	r17,96(sp)
    1924:	100b883a 	mov	r5,r2
    1928:	20c02c0e 	bge	r4,r3,19dc <__ieee754_pow+0xb44>
    192c:	00afdc34 	movhi	r2,49008
    1930:	1885883a 	add	r2,r3,r2
    1934:	2884b03a 	or	r2,r5,r2
    1938:	1001a626 	beq	r2,zero,1fd4 <__ieee754_pow+0x113c>
    193c:	04220034 	movhi	r16,34816
    1940:	841d6704 	addi	r16,r16,30108
    1944:	045f8e34 	movhi	r17,32312
    1948:	8c790f04 	addi	r17,r17,-7108
    194c:	d9401a17 	ldw	r5,104(sp)
    1950:	d9001917 	ldw	r4,100(sp)
    1954:	800d883a 	mov	r6,r16
    1958:	880f883a 	mov	r7,r17
    195c:	0002df40 	call	2df4 <__muldf3>
    1960:	180b883a 	mov	r5,r3
    1964:	800d883a 	mov	r6,r16
    1968:	880f883a 	mov	r7,r17
    196c:	1009883a 	mov	r4,r2
    1970:	0002df40 	call	2df4 <__muldf3>
    1974:	003dc306 	br	1084 <__ieee754_pow+0x1ec>
    1978:	00b00434 	movhi	r2,49168
    197c:	9085883a 	add	r2,r18,r2
    1980:	e084b03a 	or	r2,fp,r2
    1984:	1000af1e 	bne	r2,zero,1c44 <__ieee754_pow+0xdac>
    1988:	480f883a 	mov	r7,r9
    198c:	4009883a 	mov	r4,r8
    1990:	480b883a 	mov	r5,r9
    1994:	400d883a 	mov	r6,r8
    1998:	003db406 	br	106c <__ieee754_pow+0x1d4>
    199c:	00bffc34 	movhi	r2,65520
    19a0:	18ff0084 	addi	r3,r3,-1022
    19a4:	a0a9883a 	add	r20,r20,r2
    19a8:	d8c00015 	stw	r3,0(sp)
    19ac:	0009883a 	mov	r4,zero
    19b0:	04000234 	movhi	r16,8
    19b4:	003e1406 	br	1208 <__ieee754_pow+0x370>
    19b8:	a80f883a 	mov	r7,r21
    19bc:	a009883a 	mov	r4,r20
    19c0:	a80b883a 	mov	r5,r21
    19c4:	a00d883a 	mov	r6,r20
    19c8:	0002df40 	call	2df4 <__muldf3>
    19cc:	180b883a 	mov	r5,r3
    19d0:	d8802815 	stw	r2,160(sp)
    19d4:	d9402915 	stw	r5,164(sp)
    19d8:	003d5606 	br	f34 <__ieee754_pow+0x9c>
    19dc:	d9001817 	ldw	r4,96(sp)
    19e0:	00a00034 	movhi	r2,32768
    19e4:	10bfffc4 	addi	r2,r2,-1
    19e8:	00d02474 	movhi	r3,16529
    19ec:	18f2ffc4 	addi	r3,r3,-13313
    19f0:	20b8703a 	and	fp,r4,r2
    19f4:	1f009d0e 	bge	r3,fp,1c6c <__ieee754_pow+0xdd4>
    19f8:	008fdbf4 	movhi	r2,16239
    19fc:	108d0004 	addi	r2,r2,13312
    1a00:	2085883a 	add	r2,r4,r2
    1a04:	1144b03a 	or	r2,r2,r5
    1a08:	1001c626 	beq	r2,zero,2124 <__ieee754_pow+0x128c>
    1a0c:	0430be74 	movhi	r16,49913
    1a10:	843cd644 	addi	r16,r16,-3239
    1a14:	04406974 	movhi	r17,421
    1a18:	8c5b87c4 	addi	r17,r17,28191
    1a1c:	003fcb06 	br	194c <__ieee754_pow+0xab4>
    1a20:	0005883a 	mov	r2,zero
    1a24:	00cffc34 	movhi	r3,16368
    1a28:	d8801915 	stw	r2,100(sp)
    1a2c:	d8c01a15 	stw	r3,104(sp)
    1a30:	003f8c06 	br	1864 <__ieee754_pow+0x9cc>
    1a34:	0005883a 	mov	r2,zero
    1a38:	00cffc34 	movhi	r3,16368
    1a3c:	180b883a 	mov	r5,r3
    1a40:	580f883a 	mov	r7,r11
    1a44:	1009883a 	mov	r4,r2
    1a48:	500d883a 	mov	r6,r10
    1a4c:	00031b80 	call	31b8 <__divdf3>
    1a50:	1011883a 	mov	r8,r2
    1a54:	1813883a 	mov	r9,r3
    1a58:	003d9506 	br	10b0 <__ieee754_pow+0x218>
    1a5c:	008ffc34 	movhi	r2,16368
    1a60:	10bfff84 	addi	r2,r2,-2
    1a64:	14bdbb0e 	bge	r2,r18,1154 <__ieee754_pow+0x2bc>
    1a68:	008ffc34 	movhi	r2,16368
    1a6c:	14bdae16 	blt	r2,r18,1128 <__ieee754_pow+0x290>
    1a70:	580b883a 	mov	r5,r11
    1a74:	5009883a 	mov	r4,r10
    1a78:	000d883a 	mov	r6,zero
    1a7c:	100f883a 	mov	r7,r2
    1a80:	0002d000 	call	2d00 <__subdf3>
    1a84:	1021883a 	mov	r16,r2
    1a88:	1823883a 	mov	r17,r3
    1a8c:	00980034 	movhi	r2,24576
    1a90:	00cffdf4 	movhi	r3,16375
    1a94:	18c551c4 	addi	r3,r3,5447
    1a98:	8009883a 	mov	r4,r16
    1a9c:	880b883a 	mov	r5,r17
    1aa0:	180f883a 	mov	r7,r3
    1aa4:	100d883a 	mov	r6,r2
    1aa8:	0002df40 	call	2df4 <__muldf3>
    1aac:	023e17b4 	movhi	r8,63582
    1ab0:	4237d104 	addi	r8,r8,-8380
    1ab4:	024f9574 	movhi	r9,15957
    1ab8:	4a6b82c4 	addi	r9,r9,-20981
    1abc:	480f883a 	mov	r7,r9
    1ac0:	400d883a 	mov	r6,r8
    1ac4:	8009883a 	mov	r4,r16
    1ac8:	880b883a 	mov	r5,r17
    1acc:	102d883a 	mov	r22,r2
    1ad0:	182f883a 	mov	r23,r3
    1ad4:	0002df40 	call	2df4 <__muldf3>
    1ad8:	8009883a 	mov	r4,r16
    1adc:	880b883a 	mov	r5,r17
    1ae0:	800d883a 	mov	r6,r16
    1ae4:	880f883a 	mov	r7,r17
    1ae8:	d8802a15 	stw	r2,168(sp)
    1aec:	d8c02b15 	stw	r3,172(sp)
    1af0:	0002df40 	call	2df4 <__muldf3>
    1af4:	0011883a 	mov	r8,zero
    1af8:	026ff434 	movhi	r9,49104
    1afc:	480f883a 	mov	r7,r9
    1b00:	8009883a 	mov	r4,r16
    1b04:	880b883a 	mov	r5,r17
    1b08:	400d883a 	mov	r6,r8
    1b0c:	1029883a 	mov	r20,r2
    1b10:	182b883a 	mov	r21,r3
    1b14:	0002df40 	call	2df4 <__muldf3>
    1b18:	02155574 	movhi	r8,21845
    1b1c:	42155544 	addi	r8,r8,21845
    1b20:	024ff574 	movhi	r9,16341
    1b24:	4a555544 	addi	r9,r9,21845
    1b28:	480f883a 	mov	r7,r9
    1b2c:	400d883a 	mov	r6,r8
    1b30:	180b883a 	mov	r5,r3
    1b34:	1009883a 	mov	r4,r2
    1b38:	0002d800 	call	2d80 <__adddf3>
    1b3c:	180f883a 	mov	r7,r3
    1b40:	8009883a 	mov	r4,r16
    1b44:	880b883a 	mov	r5,r17
    1b48:	100d883a 	mov	r6,r2
    1b4c:	0002df40 	call	2df4 <__muldf3>
    1b50:	0011883a 	mov	r8,zero
    1b54:	024ff834 	movhi	r9,16352
    1b58:	480b883a 	mov	r5,r9
    1b5c:	4009883a 	mov	r4,r8
    1b60:	180f883a 	mov	r7,r3
    1b64:	100d883a 	mov	r6,r2
    1b68:	0002d000 	call	2d00 <__subdf3>
    1b6c:	180f883a 	mov	r7,r3
    1b70:	a80b883a 	mov	r5,r21
    1b74:	a009883a 	mov	r4,r20
    1b78:	100d883a 	mov	r6,r2
    1b7c:	0002df40 	call	2df4 <__muldf3>
    1b80:	02194b34 	movhi	r8,25900
    1b84:	4220bf84 	addi	r8,r8,-32002
    1b88:	026ffdf4 	movhi	r9,49143
    1b8c:	4a4551c4 	addi	r9,r9,5447
    1b90:	480f883a 	mov	r7,r9
    1b94:	400d883a 	mov	r6,r8
    1b98:	180b883a 	mov	r5,r3
    1b9c:	1009883a 	mov	r4,r2
    1ba0:	0002df40 	call	2df4 <__muldf3>
    1ba4:	d9402b17 	ldw	r5,172(sp)
    1ba8:	d9002a17 	ldw	r4,168(sp)
    1bac:	180f883a 	mov	r7,r3
    1bb0:	100d883a 	mov	r6,r2
    1bb4:	0002d800 	call	2d80 <__adddf3>
    1bb8:	100d883a 	mov	r6,r2
    1bbc:	b009883a 	mov	r4,r22
    1bc0:	b80b883a 	mov	r5,r23
    1bc4:	180f883a 	mov	r7,r3
    1bc8:	1021883a 	mov	r16,r2
    1bcc:	1823883a 	mov	r17,r3
    1bd0:	0002d800 	call	2d80 <__adddf3>
    1bd4:	180b883a 	mov	r5,r3
    1bd8:	0009883a 	mov	r4,zero
    1bdc:	b00d883a 	mov	r6,r22
    1be0:	b80f883a 	mov	r7,r23
    1be4:	d9001b15 	stw	r4,108(sp)
    1be8:	d8c01c15 	stw	r3,112(sp)
    1bec:	0002d000 	call	2d00 <__subdf3>
    1bf0:	1011883a 	mov	r8,r2
    1bf4:	1813883a 	mov	r9,r3
    1bf8:	8009883a 	mov	r4,r16
    1bfc:	880b883a 	mov	r5,r17
    1c00:	003f0b06 	br	1830 <__ieee754_pow+0x998>
    1c04:	0005883a 	mov	r2,zero
    1c08:	00d0d034 	movhi	r3,17216
    1c0c:	580b883a 	mov	r5,r11
    1c10:	5009883a 	mov	r4,r10
    1c14:	180f883a 	mov	r7,r3
    1c18:	100d883a 	mov	r6,r2
    1c1c:	0002df40 	call	2df4 <__muldf3>
    1c20:	1015883a 	mov	r10,r2
    1c24:	1825883a 	mov	r18,r3
    1c28:	017ff2c4 	movi	r5,-53
    1c2c:	003d6606 	br	11c8 <__ieee754_pow+0x330>
    1c30:	b03d300e 	bge	r22,zero,10f4 <__ieee754_pow+0x25c>
    1c34:	d9402917 	ldw	r5,164(sp)
    1c38:	28e0003c 	xorhi	r3,r5,32768
    1c3c:	d8c02915 	stw	r3,164(sp)
    1c40:	003cbc06 	br	f34 <__ieee754_pow+0x9c>
    1c44:	00800044 	movi	r2,1
    1c48:	e0bd1a1e 	bne	fp,r2,10b4 <__ieee754_pow+0x21c>
    1c4c:	48e0003c 	xorhi	r3,r9,32768
    1c50:	da002815 	stw	r8,160(sp)
    1c54:	d8c02915 	stw	r3,164(sp)
    1c58:	003cb606 	br	f34 <__ieee754_pow+0x9c>
    1c5c:	d9001817 	ldw	r4,96(sp)
    1c60:	00a00034 	movhi	r2,32768
    1c64:	10bfffc4 	addi	r2,r2,-1
    1c68:	20b8703a 	and	fp,r4,r2
    1c6c:	008ff834 	movhi	r2,16352
    1c70:	1700fc16 	blt	r2,fp,2064 <__ieee754_pow+0x11cc>
    1c74:	0039883a 	mov	fp,zero
    1c78:	d8001315 	stw	zero,76(sp)
    1c7c:	0025883a 	mov	r18,zero
    1c80:	0005883a 	mov	r2,zero
    1c84:	00cff9b4 	movhi	r3,16358
    1c88:	18cb90c4 	addi	r3,r3,11843
    1c8c:	9009883a 	mov	r4,r18
    1c90:	b80b883a 	mov	r5,r23
    1c94:	180f883a 	mov	r7,r3
    1c98:	100d883a 	mov	r6,r2
    1c9c:	0002df40 	call	2df4 <__muldf3>
    1ca0:	d9c02017 	ldw	r7,128(sp)
    1ca4:	d9801f17 	ldw	r6,124(sp)
    1ca8:	9009883a 	mov	r4,r18
    1cac:	b80b883a 	mov	r5,r23
    1cb0:	b823883a 	mov	r17,r23
    1cb4:	102d883a 	mov	r22,r2
    1cb8:	182f883a 	mov	r23,r3
    1cbc:	0002d000 	call	2d00 <__subdf3>
    1cc0:	d9401e17 	ldw	r5,120(sp)
    1cc4:	d9001d17 	ldw	r4,116(sp)
    1cc8:	180f883a 	mov	r7,r3
    1ccc:	100d883a 	mov	r6,r2
    1cd0:	0002d000 	call	2d00 <__subdf3>
    1cd4:	023fbeb4 	movhi	r8,65274
    1cd8:	420e7bc4 	addi	r8,r8,14831
    1cdc:	024ff9b4 	movhi	r9,16358
    1ce0:	4a4b9084 	addi	r9,r9,11842
    1ce4:	480f883a 	mov	r7,r9
    1ce8:	400d883a 	mov	r6,r8
    1cec:	180b883a 	mov	r5,r3
    1cf0:	1009883a 	mov	r4,r2
    1cf4:	0002df40 	call	2df4 <__muldf3>
    1cf8:	02032a34 	movhi	r8,3240
    1cfc:	421b0e44 	addi	r8,r8,27705
    1d00:	026f8834 	movhi	r9,48672
    1d04:	4a571844 	addi	r9,r9,23649
    1d08:	480f883a 	mov	r7,r9
    1d0c:	400d883a 	mov	r6,r8
    1d10:	9009883a 	mov	r4,r18
    1d14:	880b883a 	mov	r5,r17
    1d18:	1021883a 	mov	r16,r2
    1d1c:	1823883a 	mov	r17,r3
    1d20:	0002df40 	call	2df4 <__muldf3>
    1d24:	180f883a 	mov	r7,r3
    1d28:	880b883a 	mov	r5,r17
    1d2c:	8009883a 	mov	r4,r16
    1d30:	100d883a 	mov	r6,r2
    1d34:	0002d800 	call	2d80 <__adddf3>
    1d38:	100d883a 	mov	r6,r2
    1d3c:	b009883a 	mov	r4,r22
    1d40:	b80b883a 	mov	r5,r23
    1d44:	180f883a 	mov	r7,r3
    1d48:	1021883a 	mov	r16,r2
    1d4c:	1823883a 	mov	r17,r3
    1d50:	0002d800 	call	2d80 <__adddf3>
    1d54:	1009883a 	mov	r4,r2
    1d58:	180b883a 	mov	r5,r3
    1d5c:	b00d883a 	mov	r6,r22
    1d60:	b80f883a 	mov	r7,r23
    1d64:	d8803915 	stw	r2,228(sp)
    1d68:	d8c03a15 	stw	r3,232(sp)
    1d6c:	d8801115 	stw	r2,68(sp)
    1d70:	d8c01215 	stw	r3,72(sp)
    1d74:	0002d000 	call	2d00 <__subdf3>
    1d78:	180f883a 	mov	r7,r3
    1d7c:	8009883a 	mov	r4,r16
    1d80:	880b883a 	mov	r5,r17
    1d84:	100d883a 	mov	r6,r2
    1d88:	0002d000 	call	2d00 <__subdf3>
    1d8c:	d9001117 	ldw	r4,68(sp)
    1d90:	d9403a17 	ldw	r5,232(sp)
    1d94:	1029883a 	mov	r20,r2
    1d98:	200d883a 	mov	r6,r4
    1d9c:	280f883a 	mov	r7,r5
    1da0:	182b883a 	mov	r21,r3
    1da4:	0002df40 	call	2df4 <__muldf3>
    1da8:	1021883a 	mov	r16,r2
    1dac:	1823883a 	mov	r17,r3
    1db0:	009caff4 	movhi	r2,29375
    1db4:	10a93404 	addi	r2,r2,-23344
    1db8:	00cf99b4 	movhi	r3,15974
    1dbc:	18cdda44 	addi	r3,r3,14185
    1dc0:	8009883a 	mov	r4,r16
    1dc4:	880b883a 	mov	r5,r17
    1dc8:	180f883a 	mov	r7,r3
    1dcc:	100d883a 	mov	r6,r2
    1dd0:	0002df40 	call	2df4 <__muldf3>
    1dd4:	023174b4 	movhi	r8,50642
    1dd8:	421afc44 	addi	r8,r8,27633
    1ddc:	024faf34 	movhi	r9,16060
    1de0:	4a6f5044 	addi	r9,r9,-17087
    1de4:	480f883a 	mov	r7,r9
    1de8:	400d883a 	mov	r6,r8
    1dec:	180b883a 	mov	r5,r3
    1df0:	1009883a 	mov	r4,r2
    1df4:	0002d000 	call	2d00 <__subdf3>
    1df8:	180f883a 	mov	r7,r3
    1dfc:	8009883a 	mov	r4,r16
    1e00:	880b883a 	mov	r5,r17
    1e04:	100d883a 	mov	r6,r2
    1e08:	0002df40 	call	2df4 <__muldf3>
    1e0c:	022bc9b4 	movhi	r8,44838
    1e10:	42378b04 	addi	r8,r8,-8660
    1e14:	024fc474 	movhi	r9,16145
    1e18:	4a559a84 	addi	r9,r9,22122
    1e1c:	480f883a 	mov	r7,r9
    1e20:	400d883a 	mov	r6,r8
    1e24:	180b883a 	mov	r5,r3
    1e28:	1009883a 	mov	r4,r2
    1e2c:	0002d800 	call	2d80 <__adddf3>
    1e30:	180f883a 	mov	r7,r3
    1e34:	8009883a 	mov	r4,r16
    1e38:	880b883a 	mov	r5,r17
    1e3c:	100d883a 	mov	r6,r2
    1e40:	0002df40 	call	2df4 <__muldf3>
    1e44:	0205aff4 	movhi	r8,5823
    1e48:	422f64c4 	addi	r8,r8,-17005
    1e4c:	024fd9f4 	movhi	r9,16231
    1e50:	4a705b04 	addi	r9,r9,-16020
    1e54:	480f883a 	mov	r7,r9
    1e58:	400d883a 	mov	r6,r8
    1e5c:	180b883a 	mov	r5,r3
    1e60:	1009883a 	mov	r4,r2
    1e64:	0002d000 	call	2d00 <__subdf3>
    1e68:	180f883a 	mov	r7,r3
    1e6c:	8009883a 	mov	r4,r16
    1e70:	880b883a 	mov	r5,r17
    1e74:	100d883a 	mov	r6,r2
    1e78:	0002df40 	call	2df4 <__muldf3>
    1e7c:	02155574 	movhi	r8,21845
    1e80:	42154f84 	addi	r8,r8,21822
    1e84:	024ff174 	movhi	r9,16325
    1e88:	4a555544 	addi	r9,r9,21845
    1e8c:	480f883a 	mov	r7,r9
    1e90:	400d883a 	mov	r6,r8
    1e94:	180b883a 	mov	r5,r3
    1e98:	1009883a 	mov	r4,r2
    1e9c:	0002d800 	call	2d80 <__adddf3>
    1ea0:	180f883a 	mov	r7,r3
    1ea4:	8009883a 	mov	r4,r16
    1ea8:	880b883a 	mov	r5,r17
    1eac:	100d883a 	mov	r6,r2
    1eb0:	0002df40 	call	2df4 <__muldf3>
    1eb4:	d9001117 	ldw	r4,68(sp)
    1eb8:	d9403a17 	ldw	r5,232(sp)
    1ebc:	180f883a 	mov	r7,r3
    1ec0:	100d883a 	mov	r6,r2
    1ec4:	0002d000 	call	2d00 <__subdf3>
    1ec8:	d9001117 	ldw	r4,68(sp)
    1ecc:	d9403a17 	ldw	r5,232(sp)
    1ed0:	100d883a 	mov	r6,r2
    1ed4:	180f883a 	mov	r7,r3
    1ed8:	1021883a 	mov	r16,r2
    1edc:	1823883a 	mov	r17,r3
    1ee0:	0002df40 	call	2df4 <__muldf3>
    1ee4:	0011883a 	mov	r8,zero
    1ee8:	02500034 	movhi	r9,16384
    1eec:	480f883a 	mov	r7,r9
    1ef0:	400d883a 	mov	r6,r8
    1ef4:	8009883a 	mov	r4,r16
    1ef8:	880b883a 	mov	r5,r17
    1efc:	1021883a 	mov	r16,r2
    1f00:	1823883a 	mov	r17,r3
    1f04:	0002d000 	call	2d00 <__subdf3>
    1f08:	180f883a 	mov	r7,r3
    1f0c:	880b883a 	mov	r5,r17
    1f10:	8009883a 	mov	r4,r16
    1f14:	100d883a 	mov	r6,r2
    1f18:	00031b80 	call	31b8 <__divdf3>
    1f1c:	d9001117 	ldw	r4,68(sp)
    1f20:	d9403a17 	ldw	r5,232(sp)
    1f24:	a00d883a 	mov	r6,r20
    1f28:	a80f883a 	mov	r7,r21
    1f2c:	1025883a 	mov	r18,r2
    1f30:	1827883a 	mov	r19,r3
    1f34:	0002df40 	call	2df4 <__muldf3>
    1f38:	180f883a 	mov	r7,r3
    1f3c:	a009883a 	mov	r4,r20
    1f40:	a80b883a 	mov	r5,r21
    1f44:	100d883a 	mov	r6,r2
    1f48:	0002d800 	call	2d80 <__adddf3>
    1f4c:	180f883a 	mov	r7,r3
    1f50:	980b883a 	mov	r5,r19
    1f54:	9009883a 	mov	r4,r18
    1f58:	100d883a 	mov	r6,r2
    1f5c:	0002d000 	call	2d00 <__subdf3>
    1f60:	d9801117 	ldw	r6,68(sp)
    1f64:	d9c03a17 	ldw	r7,232(sp)
    1f68:	180b883a 	mov	r5,r3
    1f6c:	1009883a 	mov	r4,r2
    1f70:	0002d000 	call	2d00 <__subdf3>
    1f74:	0011883a 	mov	r8,zero
    1f78:	024ffc34 	movhi	r9,16368
    1f7c:	480b883a 	mov	r5,r9
    1f80:	180f883a 	mov	r7,r3
    1f84:	4009883a 	mov	r4,r8
    1f88:	100d883a 	mov	r6,r2
    1f8c:	0002d000 	call	2d00 <__subdf3>
    1f90:	100b883a 	mov	r5,r2
    1f94:	d8801317 	ldw	r2,76(sp)
    1f98:	10d5883a 	add	r10,r2,r3
    1f9c:	5005d53a 	srai	r2,r10,20
    1fa0:	0080720e 	bge	zero,r2,216c <__ieee754_pow+0x12d4>
    1fa4:	2811883a 	mov	r8,r5
    1fa8:	5013883a 	mov	r9,r10
    1fac:	d9c01a17 	ldw	r7,104(sp)
    1fb0:	d9801917 	ldw	r6,100(sp)
    1fb4:	480b883a 	mov	r5,r9
    1fb8:	4009883a 	mov	r4,r8
    1fbc:	003e8206 	br	19c8 <__ieee754_pow+0xb30>
    1fc0:	0009883a 	mov	r4,zero
    1fc4:	800b883a 	mov	r5,r16
    1fc8:	a80f883a 	mov	r7,r21
    1fcc:	a00d883a 	mov	r6,r20
    1fd0:	003c2b06 	br	1080 <__ieee754_pow+0x1e8>
    1fd4:	d9001d17 	ldw	r4,116(sp)
    1fd8:	00994b34 	movhi	r2,25900
    1fdc:	10a0bf84 	addi	r2,r2,-32002
    1fe0:	00cf25f4 	movhi	r3,15511
    1fe4:	18c551c4 	addi	r3,r3,5447
    1fe8:	a80b883a 	mov	r5,r21
    1fec:	180f883a 	mov	r7,r3
    1ff0:	100d883a 	mov	r6,r2
    1ff4:	0002d800 	call	2d80 <__adddf3>
    1ff8:	d9801f17 	ldw	r6,124(sp)
    1ffc:	880b883a 	mov	r5,r17
    2000:	8009883a 	mov	r4,r16
    2004:	980f883a 	mov	r7,r19
    2008:	1021883a 	mov	r16,r2
    200c:	1823883a 	mov	r17,r3
    2010:	0002d000 	call	2d00 <__subdf3>
    2014:	180f883a 	mov	r7,r3
    2018:	880b883a 	mov	r5,r17
    201c:	8009883a 	mov	r4,r16
    2020:	100d883a 	mov	r6,r2
    2024:	00035200 	call	3520 <__gtdf2>
    2028:	00bf0c0e 	bge	zero,r2,1c5c <__ieee754_pow+0xdc4>
    202c:	04220034 	movhi	r16,34816
    2030:	841d6704 	addi	r16,r16,30108
    2034:	045f8e34 	movhi	r17,32312
    2038:	8c790f04 	addi	r17,r17,-7108
    203c:	d9401a17 	ldw	r5,104(sp)
    2040:	d9001917 	ldw	r4,100(sp)
    2044:	800d883a 	mov	r6,r16
    2048:	880f883a 	mov	r7,r17
    204c:	0002df40 	call	2df4 <__muldf3>
    2050:	180b883a 	mov	r5,r3
    2054:	800d883a 	mov	r6,r16
    2058:	880f883a 	mov	r7,r17
    205c:	1009883a 	mov	r4,r2
    2060:	003e5906 	br	19c8 <__ieee754_pow+0xb30>
    2064:	e005d53a 	srai	r2,fp,20
    2068:	01800434 	movhi	r6,16
    206c:	d9401817 	ldw	r5,96(sp)
    2070:	10bf0084 	addi	r2,r2,-1022
    2074:	308dd83a 	sra	r6,r6,r2
    2078:	02000434 	movhi	r8,16
    207c:	423fffc4 	addi	r8,r8,-1
    2080:	0005883a 	mov	r2,zero
    2084:	298d883a 	add	r6,r5,r6
    2088:	318b883a 	add	r5,r6,r6
    208c:	320e703a 	and	r7,r6,r8
    2090:	1013883a 	mov	r9,r2
    2094:	280ad57a 	srli	r5,r5,21
    2098:	d8801817 	ldw	r2,96(sp)
    209c:	01000504 	movi	r4,20
    20a0:	297f0044 	addi	r5,r5,-1023
    20a4:	4151d83a 	sra	r8,r8,r5
    20a8:	39c00434 	orhi	r7,r7,16
    20ac:	2149c83a 	sub	r4,r4,r5
    20b0:	0210303a 	nor	r8,zero,r8
    20b4:	3939d83a 	sra	fp,r7,r4
    20b8:	320e703a 	and	r7,r6,r8
    20bc:	10002916 	blt	r2,zero,2164 <__ieee754_pow+0x12cc>
    20c0:	d9402017 	ldw	r5,128(sp)
    20c4:	d9001f17 	ldw	r4,124(sp)
    20c8:	480d883a 	mov	r6,r9
    20cc:	0002d000 	call	2d00 <__subdf3>
    20d0:	180b883a 	mov	r5,r3
    20d4:	d9402015 	stw	r5,128(sp)
    20d8:	280f883a 	mov	r7,r5
    20dc:	d9001d17 	ldw	r4,116(sp)
    20e0:	d9401e17 	ldw	r5,120(sp)
    20e4:	1007883a 	mov	r3,r2
    20e8:	180d883a 	mov	r6,r3
    20ec:	d8801f15 	stw	r2,124(sp)
    20f0:	0002d800 	call	2d80 <__adddf3>
    20f4:	180b883a 	mov	r5,r3
    20f8:	e006953a 	slli	r3,fp,20
    20fc:	282f883a 	mov	r23,r5
    2100:	d8c01315 	stw	r3,76(sp)
    2104:	003edd06 	br	1c7c <__ieee754_pow+0xde4>
    2108:	383bc81e 	bne	r7,zero,102c <__ieee754_pow+0x194>
    210c:	28c5c83a 	sub	r2,r5,r3
    2110:	8087d83a 	sra	r3,r16,r2
    2114:	1884983a 	sll	r2,r3,r2
    2118:	80801b26 	beq	r16,r2,2188 <__ieee754_pow+0x12f0>
    211c:	0039883a 	mov	fp,zero
    2120:	003b9d06 	br	f98 <__ieee754_pow+0x100>
    2124:	d9801f17 	ldw	r6,124(sp)
    2128:	8009883a 	mov	r4,r16
    212c:	880b883a 	mov	r5,r17
    2130:	980f883a 	mov	r7,r19
    2134:	0002d000 	call	2d00 <__subdf3>
    2138:	d9001d17 	ldw	r4,116(sp)
    213c:	a80b883a 	mov	r5,r21
    2140:	180f883a 	mov	r7,r3
    2144:	100d883a 	mov	r6,r2
    2148:	00036300 	call	3630 <__ledf2>
    214c:	00bfc516 	blt	zero,r2,2064 <__ieee754_pow+0x11cc>
    2150:	0430be74 	movhi	r16,49913
    2154:	843cd644 	addi	r16,r16,-3239
    2158:	04406974 	movhi	r17,421
    215c:	8c5b87c4 	addi	r17,r17,28191
    2160:	003fb606 	br	203c <__ieee754_pow+0x11a4>
    2164:	0739c83a 	sub	fp,zero,fp
    2168:	003fd506 	br	20c0 <__ieee754_pow+0x1228>
    216c:	2809883a 	mov	r4,r5
    2170:	e00d883a 	mov	r6,fp
    2174:	180b883a 	mov	r5,r3
    2178:	00026ec0 	call	26ec <scalbn>
    217c:	1011883a 	mov	r8,r2
    2180:	1813883a 	mov	r9,r3
    2184:	003f8906 	br	1fac <__ieee754_pow+0x1114>
    2188:	18c0004c 	andi	r3,r3,1
    218c:	00800084 	movi	r2,2
    2190:	10f9c83a 	sub	fp,r2,r3
    2194:	003b8006 	br	f98 <__ieee754_pow+0x100>

00002198 <__ieee754_sqrt>:
    2198:	defffd04 	addi	sp,sp,-12
    219c:	dc000015 	stw	r16,0(sp)
    21a0:	009ffc34 	movhi	r2,32752
    21a4:	2021883a 	mov	r16,r4
    21a8:	291ffc2c 	andhi	r4,r5,32752
    21ac:	dc400115 	stw	r17,4(sp)
    21b0:	dfc00215 	stw	ra,8(sp)
    21b4:	2823883a 	mov	r17,r5
    21b8:	280f883a 	mov	r7,r5
    21bc:	2807883a 	mov	r3,r5
    21c0:	8011883a 	mov	r8,r16
    21c4:	20807d26 	beq	r4,r2,23bc <__ieee754_sqrt+0x224>
    21c8:	01408d0e 	bge	zero,r5,2400 <__ieee754_sqrt+0x268>
    21cc:	380dd53a 	srai	r6,r7,20
    21d0:	3000131e 	bne	r6,zero,2220 <__ieee754_sqrt+0x88>
    21d4:	1800041e 	bne	r3,zero,21e8 <__ieee754_sqrt+0x50>
    21d8:	400ed2fa 	srli	r7,r8,11
    21dc:	31bffac4 	addi	r6,r6,-21
    21e0:	4010957a 	slli	r8,r8,21
    21e4:	383ffc26 	beq	r7,zero,21d8 <__ieee754_sqrt+0x40>
    21e8:	3880042c 	andhi	r2,r7,16
    21ec:	1000991e 	bne	r2,zero,2454 <__ieee754_sqrt+0x2bc>
    21f0:	0009883a 	mov	r4,zero
    21f4:	39cf883a 	add	r7,r7,r7
    21f8:	3880042c 	andhi	r2,r7,16
    21fc:	21000044 	addi	r4,r4,1
    2200:	103ffc26 	beq	r2,zero,21f4 <__ieee754_sqrt+0x5c>
    2204:	00800804 	movi	r2,32
    2208:	1105c83a 	sub	r2,r2,r4
    220c:	4086d83a 	srl	r3,r8,r2
    2210:	4110983a 	sll	r8,r8,r4
    2214:	3105c83a 	sub	r2,r6,r4
    2218:	38ceb03a 	or	r7,r7,r3
    221c:	11800044 	addi	r6,r2,1
    2220:	31bf0044 	addi	r6,r6,-1023
    2224:	30c0004c 	andi	r3,r6,1
    2228:	00800434 	movhi	r2,16
    222c:	10bfffc4 	addi	r2,r2,-1
    2230:	3884703a 	and	r2,r7,r2
    2234:	1807003a 	cmpeq	r3,r3,zero
    2238:	11000434 	orhi	r4,r2,16
    223c:	18005426 	beq	r3,zero,2390 <__ieee754_sqrt+0x1f8>
    2240:	4004d7fa 	srli	r2,r8,31
    2244:	4207883a 	add	r3,r8,r8
    2248:	02800834 	movhi	r10,32
    224c:	1105883a 	add	r2,r2,r4
    2250:	2089883a 	add	r4,r4,r2
    2254:	0011883a 	mov	r8,zero
    2258:	000b883a 	mov	r5,zero
    225c:	0013883a 	mov	r9,zero
    2260:	02c00584 	movi	r11,22
    2264:	520f883a 	add	r7,r10,r8
    2268:	1804d7fa 	srli	r2,r3,31
    226c:	4a400044 	addi	r9,r9,1
    2270:	18c7883a 	add	r3,r3,r3
    2274:	21c00316 	blt	r4,r7,2284 <__ieee754_sqrt+0xec>
    2278:	21c9c83a 	sub	r4,r4,r7
    227c:	2a8b883a 	add	r5,r5,r10
    2280:	51d1883a 	add	r8,r10,r7
    2284:	1105883a 	add	r2,r2,r4
    2288:	5014d07a 	srli	r10,r10,1
    228c:	2089883a 	add	r4,r4,r2
    2290:	4afff41e 	bne	r9,r11,2264 <__ieee754_sqrt+0xcc>
    2294:	02600034 	movhi	r9,32768
    2298:	0017883a 	mov	r11,zero
    229c:	0019883a 	mov	r12,zero
    22a0:	0015883a 	mov	r10,zero
    22a4:	4821883a 	mov	r16,r9
    22a8:	03c00804 	movi	r15,32
    22ac:	00000806 	br	22d0 <__ieee754_sqrt+0x138>
    22b0:	22003426 	beq	r4,r8,2384 <__ieee754_sqrt+0x1ec>
    22b4:	1804d7fa 	srli	r2,r3,31
    22b8:	52800044 	addi	r10,r10,1
    22bc:	18c7883a 	add	r3,r3,r3
    22c0:	1105883a 	add	r2,r2,r4
    22c4:	2089883a 	add	r4,r4,r2
    22c8:	4812d07a 	srli	r9,r9,1
    22cc:	53c01326 	beq	r10,r15,231c <__ieee754_sqrt+0x184>
    22d0:	4acf883a 	add	r7,r9,r11
    22d4:	413ff60e 	bge	r8,r4,22b0 <__ieee754_sqrt+0x118>
    22d8:	38a0002c 	andhi	r2,r7,32768
    22dc:	3a57883a 	add	r11,r7,r9
    22e0:	14002426 	beq	r2,r16,2374 <__ieee754_sqrt+0x1dc>
    22e4:	4005883a 	mov	r2,r8
    22e8:	2209c83a 	sub	r4,r4,r8
    22ec:	19c0012e 	bgeu	r3,r7,22f4 <__ieee754_sqrt+0x15c>
    22f0:	213fffc4 	addi	r4,r4,-1
    22f4:	19c7c83a 	sub	r3,r3,r7
    22f8:	1011883a 	mov	r8,r2
    22fc:	1804d7fa 	srli	r2,r3,31
    2300:	52800044 	addi	r10,r10,1
    2304:	6259883a 	add	r12,r12,r9
    2308:	1105883a 	add	r2,r2,r4
    230c:	18c7883a 	add	r3,r3,r3
    2310:	2089883a 	add	r4,r4,r2
    2314:	4812d07a 	srli	r9,r9,1
    2318:	53ffed1e 	bne	r10,r15,22d0 <__ieee754_sqrt+0x138>
    231c:	20c4b03a 	or	r2,r4,r3
    2320:	1000201e 	bne	r2,zero,23a4 <__ieee754_sqrt+0x20c>
    2324:	600ed07a 	srli	r7,r12,1
    2328:	2880004c 	andi	r2,r5,1
    232c:	1005003a 	cmpeq	r2,r2,zero
    2330:	1000011e 	bne	r2,zero,2338 <__ieee754_sqrt+0x1a0>
    2334:	39e00034 	orhi	r7,r7,32768
    2338:	300dd07a 	srai	r6,r6,1
    233c:	280bd07a 	srai	r5,r5,1
    2340:	010ff834 	movhi	r4,16352
    2344:	300c953a 	slli	r6,r6,20
    2348:	290b883a 	add	r5,r5,r4
    234c:	3821883a 	mov	r16,r7
    2350:	299d883a 	add	r14,r5,r6
    2354:	7023883a 	mov	r17,r14
    2358:	8005883a 	mov	r2,r16
    235c:	8807883a 	mov	r3,r17
    2360:	dfc00217 	ldw	ra,8(sp)
    2364:	dc400117 	ldw	r17,4(sp)
    2368:	dc000017 	ldw	r16,0(sp)
    236c:	dec00304 	addi	sp,sp,12
    2370:	f800283a 	ret
    2374:	5884703a 	and	r2,r11,r2
    2378:	103fda1e 	bne	r2,zero,22e4 <__ieee754_sqrt+0x14c>
    237c:	40800044 	addi	r2,r8,1
    2380:	003fd906 	br	22e8 <__ieee754_sqrt+0x150>
    2384:	19ffd42e 	bgeu	r3,r7,22d8 <__ieee754_sqrt+0x140>
    2388:	2011883a 	mov	r8,r4
    238c:	003fc906 	br	22b4 <__ieee754_sqrt+0x11c>
    2390:	4004d7fa 	srli	r2,r8,31
    2394:	4211883a 	add	r8,r8,r8
    2398:	1105883a 	add	r2,r2,r4
    239c:	2089883a 	add	r4,r4,r2
    23a0:	003fa706 	br	2240 <__ieee754_sqrt+0xa8>
    23a4:	00bfffc4 	movi	r2,-1
    23a8:	60802726 	beq	r12,r2,2448 <__ieee754_sqrt+0x2b0>
    23ac:	6080004c 	andi	r2,r12,1
    23b0:	6085883a 	add	r2,r12,r2
    23b4:	100ed07a 	srli	r7,r2,1
    23b8:	003fdb06 	br	2328 <__ieee754_sqrt+0x190>
    23bc:	8009883a 	mov	r4,r16
    23c0:	800d883a 	mov	r6,r16
    23c4:	0002df40 	call	2df4 <__muldf3>
    23c8:	180f883a 	mov	r7,r3
    23cc:	880b883a 	mov	r5,r17
    23d0:	8009883a 	mov	r4,r16
    23d4:	100d883a 	mov	r6,r2
    23d8:	0002d800 	call	2d80 <__adddf3>
    23dc:	1021883a 	mov	r16,r2
    23e0:	1823883a 	mov	r17,r3
    23e4:	8005883a 	mov	r2,r16
    23e8:	8807883a 	mov	r3,r17
    23ec:	dfc00217 	ldw	ra,8(sp)
    23f0:	dc400117 	ldw	r17,4(sp)
    23f4:	dc000017 	ldw	r16,0(sp)
    23f8:	dec00304 	addi	sp,sp,12
    23fc:	f800283a 	ret
    2400:	00a00034 	movhi	r2,32768
    2404:	10bfffc4 	addi	r2,r2,-1
    2408:	2884703a 	and	r2,r5,r2
    240c:	8084b03a 	or	r2,r16,r2
    2410:	103fd126 	beq	r2,zero,2358 <__ieee754_sqrt+0x1c0>
    2414:	283f6d26 	beq	r5,zero,21cc <__ieee754_sqrt+0x34>
    2418:	280f883a 	mov	r7,r5
    241c:	8009883a 	mov	r4,r16
    2420:	800d883a 	mov	r6,r16
    2424:	0002d000 	call	2d00 <__subdf3>
    2428:	1009883a 	mov	r4,r2
    242c:	180b883a 	mov	r5,r3
    2430:	100d883a 	mov	r6,r2
    2434:	180f883a 	mov	r7,r3
    2438:	00031b80 	call	31b8 <__divdf3>
    243c:	1021883a 	mov	r16,r2
    2440:	1823883a 	mov	r17,r3
    2444:	003fc406 	br	2358 <__ieee754_sqrt+0x1c0>
    2448:	29400044 	addi	r5,r5,1
    244c:	000f883a 	mov	r7,zero
    2450:	003fb506 	br	2328 <__ieee754_sqrt+0x190>
    2454:	0009883a 	mov	r4,zero
    2458:	00800804 	movi	r2,32
    245c:	003f6b06 	br	220c <__ieee754_sqrt+0x74>

00002460 <fabs>:
    2460:	01e00034 	movhi	r7,32768
    2464:	39ffffc4 	addi	r7,r7,-1
    2468:	394e703a 	and	r7,r7,r5
    246c:	2005883a 	mov	r2,r4
    2470:	3807883a 	mov	r3,r7
    2474:	f800283a 	ret

00002478 <finite>:
    2478:	00a00034 	movhi	r2,32768
    247c:	10bfffc4 	addi	r2,r2,-1
    2480:	2884703a 	and	r2,r5,r2
    2484:	01600434 	movhi	r5,32784
    2488:	1145883a 	add	r2,r2,r5
    248c:	1004d7fa 	srli	r2,r2,31
    2490:	f800283a 	ret

00002494 <__isnand>:
    2494:	200d883a 	mov	r6,r4
    2498:	0109c83a 	sub	r4,zero,r4
    249c:	2188b03a 	or	r4,r4,r6
    24a0:	2008d7fa 	srli	r4,r4,31
    24a4:	00a00034 	movhi	r2,32768
    24a8:	10bfffc4 	addi	r2,r2,-1
    24ac:	1144703a 	and	r2,r2,r5
    24b0:	2088b03a 	or	r4,r4,r2
    24b4:	009ffc34 	movhi	r2,32752
    24b8:	1105c83a 	sub	r2,r2,r4
    24bc:	1004d7fa 	srli	r2,r2,31
    24c0:	f800283a 	ret

000024c4 <matherr>:
    24c4:	0005883a 	mov	r2,zero
    24c8:	f800283a 	ret

000024cc <nan>:
    24cc:	015ffe34 	movhi	r5,32760
    24d0:	0005883a 	mov	r2,zero
    24d4:	2807883a 	mov	r3,r5
    24d8:	f800283a 	ret

000024dc <rint>:
    24dc:	2015883a 	mov	r10,r4
    24e0:	2809d53a 	srai	r4,r5,20
    24e4:	defff904 	addi	sp,sp,-28
    24e8:	034004c4 	movi	r13,19
    24ec:	2101ffcc 	andi	r4,r4,2047
    24f0:	227f0044 	addi	r9,r4,-1023
    24f4:	dc800415 	stw	r18,16(sp)
    24f8:	dfc00615 	stw	ra,24(sp)
    24fc:	dcc00515 	stw	r19,20(sp)
    2500:	dc400315 	stw	r17,12(sp)
    2504:	dc000215 	stw	r16,8(sp)
    2508:	2817883a 	mov	r11,r5
    250c:	500d883a 	mov	r6,r10
    2510:	2824d7fa 	srli	r18,r5,31
    2514:	6a403016 	blt	r13,r9,25d8 <rint+0xfc>
    2518:	48004916 	blt	r9,zero,2640 <rint+0x164>
    251c:	00800434 	movhi	r2,16
    2520:	10bfffc4 	addi	r2,r2,-1
    2524:	1247d83a 	sra	r3,r2,r9
    2528:	2809883a 	mov	r4,r5
    252c:	1944703a 	and	r2,r3,r5
    2530:	5084b03a 	or	r2,r10,r2
    2534:	10001f26 	beq	r2,zero,25b4 <rint+0xd8>
    2538:	180ad07a 	srli	r5,r3,1
    253c:	5944703a 	and	r2,r11,r5
    2540:	5084b03a 	or	r2,r10,r2
    2544:	10000626 	beq	r2,zero,2560 <rint+0x84>
    2548:	4b406626 	beq	r9,r13,26e4 <rint+0x208>
    254c:	00c000b4 	movhi	r3,2
    2550:	1a47d83a 	sra	r3,r3,r9
    2554:	0144303a 	nor	r2,zero,r5
    2558:	5884703a 	and	r2,r11,r2
    255c:	10c8b03a 	or	r4,r2,r3
    2560:	900690fa 	slli	r3,r18,3
    2564:	00800074 	movhi	r2,1
    2568:	10be0504 	addi	r2,r2,-2028
    256c:	200f883a 	mov	r7,r4
    2570:	1887883a 	add	r3,r3,r2
    2574:	1c000017 	ldw	r16,0(r3)
    2578:	1c400117 	ldw	r17,4(r3)
    257c:	8009883a 	mov	r4,r16
    2580:	880b883a 	mov	r5,r17
    2584:	0002d800 	call	2d80 <__adddf3>
    2588:	d8800015 	stw	r2,0(sp)
    258c:	d8c00115 	stw	r3,4(sp)
    2590:	d8800017 	ldw	r2,0(sp)
    2594:	d8c00117 	ldw	r3,4(sp)
    2598:	880f883a 	mov	r7,r17
    259c:	800d883a 	mov	r6,r16
    25a0:	180b883a 	mov	r5,r3
    25a4:	1009883a 	mov	r4,r2
    25a8:	0002d000 	call	2d00 <__subdf3>
    25ac:	1015883a 	mov	r10,r2
    25b0:	1817883a 	mov	r11,r3
    25b4:	5005883a 	mov	r2,r10
    25b8:	5807883a 	mov	r3,r11
    25bc:	dfc00617 	ldw	ra,24(sp)
    25c0:	dcc00517 	ldw	r19,20(sp)
    25c4:	dc800417 	ldw	r18,16(sp)
    25c8:	dc400317 	ldw	r17,12(sp)
    25cc:	dc000217 	ldw	r16,8(sp)
    25d0:	dec00704 	addi	sp,sp,28
    25d4:	f800283a 	ret
    25d8:	00800cc4 	movi	r2,51
    25dc:	12400f16 	blt	r2,r9,261c <rint+0x140>
    25e0:	213efb44 	addi	r4,r4,-1043
    25e4:	00bfffc4 	movi	r2,-1
    25e8:	1104d83a 	srl	r2,r2,r4
    25ec:	5086703a 	and	r3,r10,r2
    25f0:	183ff026 	beq	r3,zero,25b4 <rint+0xd8>
    25f4:	100ad07a 	srli	r5,r2,1
    25f8:	5144703a 	and	r2,r10,r5
    25fc:	10000526 	beq	r2,zero,2614 <rint+0x138>
    2600:	00d00034 	movhi	r3,16384
    2604:	1907d83a 	sra	r3,r3,r4
    2608:	0144303a 	nor	r2,zero,r5
    260c:	5084703a 	and	r2,r10,r2
    2610:	10ccb03a 	or	r6,r2,r3
    2614:	5809883a 	mov	r4,r11
    2618:	003fd106 	br	2560 <rint+0x84>
    261c:	00810004 	movi	r2,1024
    2620:	48bfe41e 	bne	r9,r2,25b4 <rint+0xd8>
    2624:	5009883a 	mov	r4,r10
    2628:	500d883a 	mov	r6,r10
    262c:	280f883a 	mov	r7,r5
    2630:	0002d800 	call	2d80 <__adddf3>
    2634:	1015883a 	mov	r10,r2
    2638:	1817883a 	mov	r11,r3
    263c:	003fdd06 	br	25b4 <rint+0xd8>
    2640:	04e00034 	movhi	r19,32768
    2644:	9cffffc4 	addi	r19,r19,-1
    2648:	2cc4703a 	and	r2,r5,r19
    264c:	5084b03a 	or	r2,r10,r2
    2650:	103fd826 	beq	r2,zero,25b4 <rint+0xd8>
    2654:	00c00434 	movhi	r3,16
    2658:	18ffffc4 	addi	r3,r3,-1
    265c:	28c6703a 	and	r3,r5,r3
    2660:	50c6b03a 	or	r3,r10,r3
    2664:	00cdc83a 	sub	r6,zero,r3
    2668:	900a90fa 	slli	r5,r18,3
    266c:	1986b03a 	or	r3,r3,r6
    2670:	01000074 	movhi	r4,1
    2674:	213e0504 	addi	r4,r4,-2028
    2678:	1806d33a 	srli	r3,r3,12
    267c:	290b883a 	add	r5,r5,r4
    2680:	2c000017 	ldw	r16,0(r5)
    2684:	2c400117 	ldw	r17,4(r5)
    2688:	593fffac 	andhi	r4,r11,65534
    268c:	18c0022c 	andhi	r3,r3,8
    2690:	1906b03a 	or	r3,r3,r4
    2694:	500d883a 	mov	r6,r10
    2698:	180f883a 	mov	r7,r3
    269c:	8009883a 	mov	r4,r16
    26a0:	880b883a 	mov	r5,r17
    26a4:	0002d800 	call	2d80 <__adddf3>
    26a8:	d8800015 	stw	r2,0(sp)
    26ac:	d8c00115 	stw	r3,4(sp)
    26b0:	d8800017 	ldw	r2,0(sp)
    26b4:	d8c00117 	ldw	r3,4(sp)
    26b8:	880f883a 	mov	r7,r17
    26bc:	800d883a 	mov	r6,r16
    26c0:	180b883a 	mov	r5,r3
    26c4:	1009883a 	mov	r4,r2
    26c8:	0002d000 	call	2d00 <__subdf3>
    26cc:	901297fa 	slli	r9,r18,31
    26d0:	98d0703a 	and	r8,r19,r3
    26d4:	1015883a 	mov	r10,r2
    26d8:	4250b03a 	or	r8,r8,r9
    26dc:	4017883a 	mov	r11,r8
    26e0:	003fb406 	br	25b4 <rint+0xd8>
    26e4:	01900034 	movhi	r6,16384
    26e8:	003f9d06 	br	2560 <rint+0x84>

000026ec <scalbn>:
    26ec:	2011883a 	mov	r8,r4
    26f0:	291ffc2c 	andhi	r4,r5,32752
    26f4:	2009d53a 	srai	r4,r4,20
    26f8:	defffd04 	addi	sp,sp,-12
    26fc:	dc000015 	stw	r16,0(sp)
    2700:	dfc00215 	stw	ra,8(sp)
    2704:	dc400115 	stw	r17,4(sp)
    2708:	2813883a 	mov	r9,r5
    270c:	2815883a 	mov	r10,r5
    2710:	3021883a 	mov	r16,r6
    2714:	2000281e 	bne	r4,zero,27b8 <scalbn+0xcc>
    2718:	00a00034 	movhi	r2,32768
    271c:	10bfffc4 	addi	r2,r2,-1
    2720:	2884703a 	and	r2,r5,r2
    2724:	4084b03a 	or	r2,r8,r2
    2728:	10001826 	beq	r2,zero,278c <scalbn+0xa0>
    272c:	0005883a 	mov	r2,zero
    2730:	00d0d434 	movhi	r3,17232
    2734:	4009883a 	mov	r4,r8
    2738:	100d883a 	mov	r6,r2
    273c:	180f883a 	mov	r7,r3
    2740:	0002df40 	call	2df4 <__muldf3>
    2744:	100b883a 	mov	r5,r2
    2748:	1011883a 	mov	r8,r2
    274c:	00bffff4 	movhi	r2,65535
    2750:	108f2c04 	addi	r2,r2,15536
    2754:	180d883a 	mov	r6,r3
    2758:	1813883a 	mov	r9,r3
    275c:	8080120e 	bge	r16,r2,27a8 <scalbn+0xbc>
    2760:	00b0be74 	movhi	r2,49913
    2764:	10bcd644 	addi	r2,r2,-3239
    2768:	00c06974 	movhi	r3,421
    276c:	18db87c4 	addi	r3,r3,28191
    2770:	2809883a 	mov	r4,r5
    2774:	180f883a 	mov	r7,r3
    2778:	300b883a 	mov	r5,r6
    277c:	100d883a 	mov	r6,r2
    2780:	0002df40 	call	2df4 <__muldf3>
    2784:	1011883a 	mov	r8,r2
    2788:	1813883a 	mov	r9,r3
    278c:	4005883a 	mov	r2,r8
    2790:	4807883a 	mov	r3,r9
    2794:	dfc00217 	ldw	ra,8(sp)
    2798:	dc400117 	ldw	r17,4(sp)
    279c:	dc000017 	ldw	r16,0(sp)
    27a0:	dec00304 	addi	sp,sp,12
    27a4:	f800283a 	ret
    27a8:	189ffc2c 	andhi	r2,r3,32752
    27ac:	1005d53a 	srai	r2,r2,20
    27b0:	1815883a 	mov	r10,r3
    27b4:	113ff284 	addi	r4,r2,-54
    27b8:	0081ffc4 	movi	r2,2047
    27bc:	20801126 	beq	r4,r2,2804 <scalbn+0x118>
    27c0:	2409883a 	add	r4,r4,r16
    27c4:	0081ff84 	movi	r2,2046
    27c8:	11001c16 	blt	r2,r4,283c <scalbn+0x150>
    27cc:	0100290e 	bge	zero,r4,2874 <scalbn+0x188>
    27d0:	200a953a 	slli	r5,r4,20
    27d4:	01200434 	movhi	r4,32784
    27d8:	213fffc4 	addi	r4,r4,-1
    27dc:	5108703a 	and	r4,r10,r4
    27e0:	2148b03a 	or	r4,r4,r5
    27e4:	2013883a 	mov	r9,r4
    27e8:	4005883a 	mov	r2,r8
    27ec:	4807883a 	mov	r3,r9
    27f0:	dfc00217 	ldw	ra,8(sp)
    27f4:	dc400117 	ldw	r17,4(sp)
    27f8:	dc000017 	ldw	r16,0(sp)
    27fc:	dec00304 	addi	sp,sp,12
    2800:	f800283a 	ret
    2804:	480f883a 	mov	r7,r9
    2808:	4009883a 	mov	r4,r8
    280c:	480b883a 	mov	r5,r9
    2810:	400d883a 	mov	r6,r8
    2814:	0002d800 	call	2d80 <__adddf3>
    2818:	1011883a 	mov	r8,r2
    281c:	1813883a 	mov	r9,r3
    2820:	4005883a 	mov	r2,r8
    2824:	4807883a 	mov	r3,r9
    2828:	dfc00217 	ldw	ra,8(sp)
    282c:	dc400117 	ldw	r17,4(sp)
    2830:	dc000017 	ldw	r16,0(sp)
    2834:	dec00304 	addi	sp,sp,12
    2838:	f800283a 	ret
    283c:	04220034 	movhi	r16,34816
    2840:	841d6704 	addi	r16,r16,30108
    2844:	045f8e34 	movhi	r17,32312
    2848:	8c790f04 	addi	r17,r17,-7108
    284c:	480f883a 	mov	r7,r9
    2850:	400d883a 	mov	r6,r8
    2854:	8009883a 	mov	r4,r16
    2858:	880b883a 	mov	r5,r17
    285c:	00028cc0 	call	28cc <copysign>
    2860:	180b883a 	mov	r5,r3
    2864:	800d883a 	mov	r6,r16
    2868:	880f883a 	mov	r7,r17
    286c:	1009883a 	mov	r4,r2
    2870:	003fc306 	br	2780 <scalbn+0x94>
    2874:	00bff284 	movi	r2,-54
    2878:	11000716 	blt	r2,r4,2898 <scalbn+0x1ac>
    287c:	00b0d414 	movui	r2,50000
    2880:	143fee16 	blt	r2,r16,283c <scalbn+0x150>
    2884:	0430be74 	movhi	r16,49913
    2888:	843cd644 	addi	r16,r16,-3239
    288c:	04406974 	movhi	r17,421
    2890:	8c5b87c4 	addi	r17,r17,28191
    2894:	003fed06 	br	284c <scalbn+0x160>
    2898:	21000d84 	addi	r4,r4,54
    289c:	2008953a 	slli	r4,r4,20
    28a0:	01e00434 	movhi	r7,32784
    28a4:	39ffffc4 	addi	r7,r7,-1
    28a8:	51ce703a 	and	r7,r10,r7
    28ac:	390eb03a 	or	r7,r7,r4
    28b0:	024f2434 	movhi	r9,15504
    28b4:	4009883a 	mov	r4,r8
    28b8:	0011883a 	mov	r8,zero
    28bc:	380b883a 	mov	r5,r7
    28c0:	400d883a 	mov	r6,r8
    28c4:	480f883a 	mov	r7,r9
    28c8:	003fad06 	br	2780 <scalbn+0x94>

000028cc <copysign>:
    28cc:	3813883a 	mov	r9,r7
    28d0:	01e00034 	movhi	r7,32768
    28d4:	39ffffc4 	addi	r7,r7,-1
    28d8:	394e703a 	and	r7,r7,r5
    28dc:	4aa0002c 	andhi	r10,r9,32768
    28e0:	3a8eb03a 	or	r7,r7,r10
    28e4:	2005883a 	mov	r2,r4
    28e8:	3807883a 	mov	r3,r7
    28ec:	f800283a 	ret

000028f0 <_fpadd_parts>:
    28f0:	defff804 	addi	sp,sp,-32
    28f4:	dcc00315 	stw	r19,12(sp)
    28f8:	2027883a 	mov	r19,r4
    28fc:	21000017 	ldw	r4,0(r4)
    2900:	00c00044 	movi	r3,1
    2904:	dd400515 	stw	r21,20(sp)
    2908:	dd000415 	stw	r20,16(sp)
    290c:	ddc00715 	stw	r23,28(sp)
    2910:	dd800615 	stw	r22,24(sp)
    2914:	dc800215 	stw	r18,8(sp)
    2918:	dc400115 	stw	r17,4(sp)
    291c:	dc000015 	stw	r16,0(sp)
    2920:	282b883a 	mov	r21,r5
    2924:	3029883a 	mov	r20,r6
    2928:	1900632e 	bgeu	r3,r4,2ab8 <_fpadd_parts+0x1c8>
    292c:	28800017 	ldw	r2,0(r5)
    2930:	1880812e 	bgeu	r3,r2,2b38 <_fpadd_parts+0x248>
    2934:	00c00104 	movi	r3,4
    2938:	20c0dc26 	beq	r4,r3,2cac <_fpadd_parts+0x3bc>
    293c:	10c07e26 	beq	r2,r3,2b38 <_fpadd_parts+0x248>
    2940:	00c00084 	movi	r3,2
    2944:	10c06726 	beq	r2,r3,2ae4 <_fpadd_parts+0x1f4>
    2948:	20c07b26 	beq	r4,r3,2b38 <_fpadd_parts+0x248>
    294c:	9dc00217 	ldw	r23,8(r19)
    2950:	28c00217 	ldw	r3,8(r5)
    2954:	9c400317 	ldw	r17,12(r19)
    2958:	2bc00317 	ldw	r15,12(r5)
    295c:	b8cdc83a 	sub	r6,r23,r3
    2960:	9c800417 	ldw	r18,16(r19)
    2964:	2c000417 	ldw	r16,16(r5)
    2968:	3009883a 	mov	r4,r6
    296c:	30009716 	blt	r6,zero,2bcc <_fpadd_parts+0x2dc>
    2970:	00800fc4 	movi	r2,63
    2974:	11806b16 	blt	r2,r6,2b24 <_fpadd_parts+0x234>
    2978:	0100a40e 	bge	zero,r4,2c0c <_fpadd_parts+0x31c>
    297c:	35bff804 	addi	r22,r6,-32
    2980:	b000bc16 	blt	r22,zero,2c74 <_fpadd_parts+0x384>
    2984:	8596d83a 	srl	r11,r16,r22
    2988:	0019883a 	mov	r12,zero
    298c:	0013883a 	mov	r9,zero
    2990:	01000044 	movi	r4,1
    2994:	0015883a 	mov	r10,zero
    2998:	b000be16 	blt	r22,zero,2c94 <_fpadd_parts+0x3a4>
    299c:	2590983a 	sll	r8,r4,r22
    29a0:	000f883a 	mov	r7,zero
    29a4:	00bfffc4 	movi	r2,-1
    29a8:	3889883a 	add	r4,r7,r2
    29ac:	408b883a 	add	r5,r8,r2
    29b0:	21cd803a 	cmpltu	r6,r4,r7
    29b4:	314b883a 	add	r5,r6,r5
    29b8:	7904703a 	and	r2,r15,r4
    29bc:	8146703a 	and	r3,r16,r5
    29c0:	10c4b03a 	or	r2,r2,r3
    29c4:	10000226 	beq	r2,zero,29d0 <_fpadd_parts+0xe0>
    29c8:	02400044 	movi	r9,1
    29cc:	0015883a 	mov	r10,zero
    29d0:	5a5eb03a 	or	r15,r11,r9
    29d4:	62a0b03a 	or	r16,r12,r10
    29d8:	99400117 	ldw	r5,4(r19)
    29dc:	a8800117 	ldw	r2,4(r21)
    29e0:	28806e26 	beq	r5,r2,2b9c <_fpadd_parts+0x2ac>
    29e4:	28006626 	beq	r5,zero,2b80 <_fpadd_parts+0x290>
    29e8:	7c45c83a 	sub	r2,r15,r17
    29ec:	7889803a 	cmpltu	r4,r15,r2
    29f0:	8487c83a 	sub	r3,r16,r18
    29f4:	1909c83a 	sub	r4,r3,r4
    29f8:	100d883a 	mov	r6,r2
    29fc:	200f883a 	mov	r7,r4
    2a00:	38007716 	blt	r7,zero,2be0 <_fpadd_parts+0x2f0>
    2a04:	a5c00215 	stw	r23,8(r20)
    2a08:	a1c00415 	stw	r7,16(r20)
    2a0c:	a0000115 	stw	zero,4(r20)
    2a10:	a1800315 	stw	r6,12(r20)
    2a14:	a2000317 	ldw	r8,12(r20)
    2a18:	a2400417 	ldw	r9,16(r20)
    2a1c:	00bfffc4 	movi	r2,-1
    2a20:	408b883a 	add	r5,r8,r2
    2a24:	2a09803a 	cmpltu	r4,r5,r8
    2a28:	488d883a 	add	r6,r9,r2
    2a2c:	01c40034 	movhi	r7,4096
    2a30:	39ffffc4 	addi	r7,r7,-1
    2a34:	218d883a 	add	r6,r4,r6
    2a38:	39801736 	bltu	r7,r6,2a98 <_fpadd_parts+0x1a8>
    2a3c:	31c06526 	beq	r6,r7,2bd4 <_fpadd_parts+0x2e4>
    2a40:	a3000217 	ldw	r12,8(r20)
    2a44:	4209883a 	add	r4,r8,r8
    2a48:	00bfffc4 	movi	r2,-1
    2a4c:	220f803a 	cmpltu	r7,r4,r8
    2a50:	4a4b883a 	add	r5,r9,r9
    2a54:	394f883a 	add	r7,r7,r5
    2a58:	2095883a 	add	r10,r4,r2
    2a5c:	3897883a 	add	r11,r7,r2
    2a60:	510d803a 	cmpltu	r6,r10,r4
    2a64:	6099883a 	add	r12,r12,r2
    2a68:	32d7883a 	add	r11,r6,r11
    2a6c:	00840034 	movhi	r2,4096
    2a70:	10bfffc4 	addi	r2,r2,-1
    2a74:	2011883a 	mov	r8,r4
    2a78:	3813883a 	mov	r9,r7
    2a7c:	a1000315 	stw	r4,12(r20)
    2a80:	a1c00415 	stw	r7,16(r20)
    2a84:	a3000215 	stw	r12,8(r20)
    2a88:	12c00336 	bltu	r2,r11,2a98 <_fpadd_parts+0x1a8>
    2a8c:	58bfed1e 	bne	r11,r2,2a44 <_fpadd_parts+0x154>
    2a90:	00bfff84 	movi	r2,-2
    2a94:	12bfeb2e 	bgeu	r2,r10,2a44 <_fpadd_parts+0x154>
    2a98:	a2800417 	ldw	r10,16(r20)
    2a9c:	008000c4 	movi	r2,3
    2aa0:	00c80034 	movhi	r3,8192
    2aa4:	18ffffc4 	addi	r3,r3,-1
    2aa8:	a2400317 	ldw	r9,12(r20)
    2aac:	a0800015 	stw	r2,0(r20)
    2ab0:	1a802336 	bltu	r3,r10,2b40 <_fpadd_parts+0x250>
    2ab4:	a027883a 	mov	r19,r20
    2ab8:	9805883a 	mov	r2,r19
    2abc:	ddc00717 	ldw	r23,28(sp)
    2ac0:	dd800617 	ldw	r22,24(sp)
    2ac4:	dd400517 	ldw	r21,20(sp)
    2ac8:	dd000417 	ldw	r20,16(sp)
    2acc:	dcc00317 	ldw	r19,12(sp)
    2ad0:	dc800217 	ldw	r18,8(sp)
    2ad4:	dc400117 	ldw	r17,4(sp)
    2ad8:	dc000017 	ldw	r16,0(sp)
    2adc:	dec00804 	addi	sp,sp,32
    2ae0:	f800283a 	ret
    2ae4:	20fff41e 	bne	r4,r3,2ab8 <_fpadd_parts+0x1c8>
    2ae8:	31000015 	stw	r4,0(r6)
    2aec:	98800117 	ldw	r2,4(r19)
    2af0:	30800115 	stw	r2,4(r6)
    2af4:	98c00217 	ldw	r3,8(r19)
    2af8:	30c00215 	stw	r3,8(r6)
    2afc:	98800317 	ldw	r2,12(r19)
    2b00:	30800315 	stw	r2,12(r6)
    2b04:	98c00417 	ldw	r3,16(r19)
    2b08:	30c00415 	stw	r3,16(r6)
    2b0c:	98800117 	ldw	r2,4(r19)
    2b10:	28c00117 	ldw	r3,4(r5)
    2b14:	3027883a 	mov	r19,r6
    2b18:	10c4703a 	and	r2,r2,r3
    2b1c:	30800115 	stw	r2,4(r6)
    2b20:	003fe506 	br	2ab8 <_fpadd_parts+0x1c8>
    2b24:	1dc02616 	blt	r3,r23,2bc0 <_fpadd_parts+0x2d0>
    2b28:	0023883a 	mov	r17,zero
    2b2c:	182f883a 	mov	r23,r3
    2b30:	0025883a 	mov	r18,zero
    2b34:	003fa806 	br	29d8 <_fpadd_parts+0xe8>
    2b38:	a827883a 	mov	r19,r21
    2b3c:	003fde06 	br	2ab8 <_fpadd_parts+0x1c8>
    2b40:	01800044 	movi	r6,1
    2b44:	500497fa 	slli	r2,r10,31
    2b48:	4808d07a 	srli	r4,r9,1
    2b4c:	518ad83a 	srl	r5,r10,r6
    2b50:	a2000217 	ldw	r8,8(r20)
    2b54:	1108b03a 	or	r4,r2,r4
    2b58:	0007883a 	mov	r3,zero
    2b5c:	4984703a 	and	r2,r9,r6
    2b60:	208cb03a 	or	r6,r4,r2
    2b64:	28ceb03a 	or	r7,r5,r3
    2b68:	42000044 	addi	r8,r8,1
    2b6c:	a027883a 	mov	r19,r20
    2b70:	a1c00415 	stw	r7,16(r20)
    2b74:	a2000215 	stw	r8,8(r20)
    2b78:	a1800315 	stw	r6,12(r20)
    2b7c:	003fce06 	br	2ab8 <_fpadd_parts+0x1c8>
    2b80:	8bc5c83a 	sub	r2,r17,r15
    2b84:	8889803a 	cmpltu	r4,r17,r2
    2b88:	9407c83a 	sub	r3,r18,r16
    2b8c:	1909c83a 	sub	r4,r3,r4
    2b90:	100d883a 	mov	r6,r2
    2b94:	200f883a 	mov	r7,r4
    2b98:	003f9906 	br	2a00 <_fpadd_parts+0x110>
    2b9c:	7c45883a 	add	r2,r15,r17
    2ba0:	13c9803a 	cmpltu	r4,r2,r15
    2ba4:	8487883a 	add	r3,r16,r18
    2ba8:	20c9883a 	add	r4,r4,r3
    2bac:	a1400115 	stw	r5,4(r20)
    2bb0:	a5c00215 	stw	r23,8(r20)
    2bb4:	a0800315 	stw	r2,12(r20)
    2bb8:	a1000415 	stw	r4,16(r20)
    2bbc:	003fb606 	br	2a98 <_fpadd_parts+0x1a8>
    2bc0:	001f883a 	mov	r15,zero
    2bc4:	0021883a 	mov	r16,zero
    2bc8:	003f8306 	br	29d8 <_fpadd_parts+0xe8>
    2bcc:	018dc83a 	sub	r6,zero,r6
    2bd0:	003f6706 	br	2970 <_fpadd_parts+0x80>
    2bd4:	00bfff84 	movi	r2,-2
    2bd8:	117faf36 	bltu	r2,r5,2a98 <_fpadd_parts+0x1a8>
    2bdc:	003f9806 	br	2a40 <_fpadd_parts+0x150>
    2be0:	0005883a 	mov	r2,zero
    2be4:	1189c83a 	sub	r4,r2,r6
    2be8:	1105803a 	cmpltu	r2,r2,r4
    2bec:	01cbc83a 	sub	r5,zero,r7
    2bf0:	2885c83a 	sub	r2,r5,r2
    2bf4:	01800044 	movi	r6,1
    2bf8:	a1800115 	stw	r6,4(r20)
    2bfc:	a5c00215 	stw	r23,8(r20)
    2c00:	a1000315 	stw	r4,12(r20)
    2c04:	a0800415 	stw	r2,16(r20)
    2c08:	003f8206 	br	2a14 <_fpadd_parts+0x124>
    2c0c:	203f7226 	beq	r4,zero,29d8 <_fpadd_parts+0xe8>
    2c10:	35bff804 	addi	r22,r6,-32
    2c14:	b9af883a 	add	r23,r23,r6
    2c18:	b0003116 	blt	r22,zero,2ce0 <_fpadd_parts+0x3f0>
    2c1c:	959ad83a 	srl	r13,r18,r22
    2c20:	001d883a 	mov	r14,zero
    2c24:	000f883a 	mov	r7,zero
    2c28:	01000044 	movi	r4,1
    2c2c:	0011883a 	mov	r8,zero
    2c30:	b0002516 	blt	r22,zero,2cc8 <_fpadd_parts+0x3d8>
    2c34:	2594983a 	sll	r10,r4,r22
    2c38:	0013883a 	mov	r9,zero
    2c3c:	00bfffc4 	movi	r2,-1
    2c40:	4889883a 	add	r4,r9,r2
    2c44:	508b883a 	add	r5,r10,r2
    2c48:	224d803a 	cmpltu	r6,r4,r9
    2c4c:	314b883a 	add	r5,r6,r5
    2c50:	8904703a 	and	r2,r17,r4
    2c54:	9146703a 	and	r3,r18,r5
    2c58:	10c4b03a 	or	r2,r2,r3
    2c5c:	10000226 	beq	r2,zero,2c68 <_fpadd_parts+0x378>
    2c60:	01c00044 	movi	r7,1
    2c64:	0011883a 	mov	r8,zero
    2c68:	69e2b03a 	or	r17,r13,r7
    2c6c:	7224b03a 	or	r18,r14,r8
    2c70:	003f5906 	br	29d8 <_fpadd_parts+0xe8>
    2c74:	8407883a 	add	r3,r16,r16
    2c78:	008007c4 	movi	r2,31
    2c7c:	1185c83a 	sub	r2,r2,r6
    2c80:	1886983a 	sll	r3,r3,r2
    2c84:	7996d83a 	srl	r11,r15,r6
    2c88:	8198d83a 	srl	r12,r16,r6
    2c8c:	1ad6b03a 	or	r11,r3,r11
    2c90:	003f3e06 	br	298c <_fpadd_parts+0x9c>
    2c94:	2006d07a 	srli	r3,r4,1
    2c98:	008007c4 	movi	r2,31
    2c9c:	1185c83a 	sub	r2,r2,r6
    2ca0:	1890d83a 	srl	r8,r3,r2
    2ca4:	218e983a 	sll	r7,r4,r6
    2ca8:	003f3e06 	br	29a4 <_fpadd_parts+0xb4>
    2cac:	113f821e 	bne	r2,r4,2ab8 <_fpadd_parts+0x1c8>
    2cb0:	28c00117 	ldw	r3,4(r5)
    2cb4:	98800117 	ldw	r2,4(r19)
    2cb8:	10ff7f26 	beq	r2,r3,2ab8 <_fpadd_parts+0x1c8>
    2cbc:	04c00074 	movhi	r19,1
    2cc0:	9cfe0904 	addi	r19,r19,-2012
    2cc4:	003f7c06 	br	2ab8 <_fpadd_parts+0x1c8>
    2cc8:	2006d07a 	srli	r3,r4,1
    2ccc:	008007c4 	movi	r2,31
    2cd0:	1185c83a 	sub	r2,r2,r6
    2cd4:	1894d83a 	srl	r10,r3,r2
    2cd8:	2192983a 	sll	r9,r4,r6
    2cdc:	003fd706 	br	2c3c <_fpadd_parts+0x34c>
    2ce0:	9487883a 	add	r3,r18,r18
    2ce4:	008007c4 	movi	r2,31
    2ce8:	1185c83a 	sub	r2,r2,r6
    2cec:	1886983a 	sll	r3,r3,r2
    2cf0:	899ad83a 	srl	r13,r17,r6
    2cf4:	919cd83a 	srl	r14,r18,r6
    2cf8:	1b5ab03a 	or	r13,r3,r13
    2cfc:	003fc906 	br	2c24 <_fpadd_parts+0x334>

00002d00 <__subdf3>:
    2d00:	deffea04 	addi	sp,sp,-88
    2d04:	dcc01415 	stw	r19,80(sp)
    2d08:	dcc00404 	addi	r19,sp,16
    2d0c:	2011883a 	mov	r8,r4
    2d10:	2813883a 	mov	r9,r5
    2d14:	dc401315 	stw	r17,76(sp)
    2d18:	d809883a 	mov	r4,sp
    2d1c:	980b883a 	mov	r5,r19
    2d20:	dc400904 	addi	r17,sp,36
    2d24:	dfc01515 	stw	ra,84(sp)
    2d28:	da400115 	stw	r9,4(sp)
    2d2c:	d9c00315 	stw	r7,12(sp)
    2d30:	da000015 	stw	r8,0(sp)
    2d34:	d9800215 	stw	r6,8(sp)
    2d38:	0003cb40 	call	3cb4 <__unpack_d>
    2d3c:	d9000204 	addi	r4,sp,8
    2d40:	880b883a 	mov	r5,r17
    2d44:	0003cb40 	call	3cb4 <__unpack_d>
    2d48:	d8800a17 	ldw	r2,40(sp)
    2d4c:	880b883a 	mov	r5,r17
    2d50:	9809883a 	mov	r4,r19
    2d54:	d9800e04 	addi	r6,sp,56
    2d58:	1080005c 	xori	r2,r2,1
    2d5c:	d8800a15 	stw	r2,40(sp)
    2d60:	00028f00 	call	28f0 <_fpadd_parts>
    2d64:	1009883a 	mov	r4,r2
    2d68:	00039a00 	call	39a0 <__pack_d>
    2d6c:	dfc01517 	ldw	ra,84(sp)
    2d70:	dcc01417 	ldw	r19,80(sp)
    2d74:	dc401317 	ldw	r17,76(sp)
    2d78:	dec01604 	addi	sp,sp,88
    2d7c:	f800283a 	ret

00002d80 <__adddf3>:
    2d80:	deffea04 	addi	sp,sp,-88
    2d84:	dcc01415 	stw	r19,80(sp)
    2d88:	dcc00404 	addi	r19,sp,16
    2d8c:	2011883a 	mov	r8,r4
    2d90:	2813883a 	mov	r9,r5
    2d94:	dc401315 	stw	r17,76(sp)
    2d98:	d809883a 	mov	r4,sp
    2d9c:	980b883a 	mov	r5,r19
    2da0:	dc400904 	addi	r17,sp,36
    2da4:	dfc01515 	stw	ra,84(sp)
    2da8:	da400115 	stw	r9,4(sp)
    2dac:	d9c00315 	stw	r7,12(sp)
    2db0:	da000015 	stw	r8,0(sp)
    2db4:	d9800215 	stw	r6,8(sp)
    2db8:	0003cb40 	call	3cb4 <__unpack_d>
    2dbc:	d9000204 	addi	r4,sp,8
    2dc0:	880b883a 	mov	r5,r17
    2dc4:	0003cb40 	call	3cb4 <__unpack_d>
    2dc8:	d9800e04 	addi	r6,sp,56
    2dcc:	9809883a 	mov	r4,r19
    2dd0:	880b883a 	mov	r5,r17
    2dd4:	00028f00 	call	28f0 <_fpadd_parts>
    2dd8:	1009883a 	mov	r4,r2
    2ddc:	00039a00 	call	39a0 <__pack_d>
    2de0:	dfc01517 	ldw	ra,84(sp)
    2de4:	dcc01417 	ldw	r19,80(sp)
    2de8:	dc401317 	ldw	r17,76(sp)
    2dec:	dec01604 	addi	sp,sp,88
    2df0:	f800283a 	ret

00002df4 <__muldf3>:
    2df4:	deffe004 	addi	sp,sp,-128
    2df8:	dc401815 	stw	r17,96(sp)
    2dfc:	dc400404 	addi	r17,sp,16
    2e00:	2011883a 	mov	r8,r4
    2e04:	2813883a 	mov	r9,r5
    2e08:	dc001715 	stw	r16,92(sp)
    2e0c:	d809883a 	mov	r4,sp
    2e10:	880b883a 	mov	r5,r17
    2e14:	dc000904 	addi	r16,sp,36
    2e18:	dfc01f15 	stw	ra,124(sp)
    2e1c:	da400115 	stw	r9,4(sp)
    2e20:	d9c00315 	stw	r7,12(sp)
    2e24:	da000015 	stw	r8,0(sp)
    2e28:	d9800215 	stw	r6,8(sp)
    2e2c:	ddc01e15 	stw	r23,120(sp)
    2e30:	dd801d15 	stw	r22,116(sp)
    2e34:	dd401c15 	stw	r21,112(sp)
    2e38:	dd001b15 	stw	r20,108(sp)
    2e3c:	dcc01a15 	stw	r19,104(sp)
    2e40:	dc801915 	stw	r18,100(sp)
    2e44:	0003cb40 	call	3cb4 <__unpack_d>
    2e48:	d9000204 	addi	r4,sp,8
    2e4c:	800b883a 	mov	r5,r16
    2e50:	0003cb40 	call	3cb4 <__unpack_d>
    2e54:	d9000417 	ldw	r4,16(sp)
    2e58:	00800044 	movi	r2,1
    2e5c:	1100102e 	bgeu	r2,r4,2ea0 <__muldf3+0xac>
    2e60:	d8c00917 	ldw	r3,36(sp)
    2e64:	10c0062e 	bgeu	r2,r3,2e80 <__muldf3+0x8c>
    2e68:	00800104 	movi	r2,4
    2e6c:	20800a26 	beq	r4,r2,2e98 <__muldf3+0xa4>
    2e70:	1880cc26 	beq	r3,r2,31a4 <__muldf3+0x3b0>
    2e74:	00800084 	movi	r2,2
    2e78:	20800926 	beq	r4,r2,2ea0 <__muldf3+0xac>
    2e7c:	1880191e 	bne	r3,r2,2ee4 <__muldf3+0xf0>
    2e80:	d8c00a17 	ldw	r3,40(sp)
    2e84:	d8800517 	ldw	r2,20(sp)
    2e88:	8009883a 	mov	r4,r16
    2e8c:	10c4c03a 	cmpne	r2,r2,r3
    2e90:	d8800a15 	stw	r2,40(sp)
    2e94:	00000706 	br	2eb4 <__muldf3+0xc0>
    2e98:	00800084 	movi	r2,2
    2e9c:	1880c326 	beq	r3,r2,31ac <__muldf3+0x3b8>
    2ea0:	d8800517 	ldw	r2,20(sp)
    2ea4:	d8c00a17 	ldw	r3,40(sp)
    2ea8:	8809883a 	mov	r4,r17
    2eac:	10c4c03a 	cmpne	r2,r2,r3
    2eb0:	d8800515 	stw	r2,20(sp)
    2eb4:	00039a00 	call	39a0 <__pack_d>
    2eb8:	dfc01f17 	ldw	ra,124(sp)
    2ebc:	ddc01e17 	ldw	r23,120(sp)
    2ec0:	dd801d17 	ldw	r22,116(sp)
    2ec4:	dd401c17 	ldw	r21,112(sp)
    2ec8:	dd001b17 	ldw	r20,108(sp)
    2ecc:	dcc01a17 	ldw	r19,104(sp)
    2ed0:	dc801917 	ldw	r18,100(sp)
    2ed4:	dc401817 	ldw	r17,96(sp)
    2ed8:	dc001717 	ldw	r16,92(sp)
    2edc:	dec02004 	addi	sp,sp,128
    2ee0:	f800283a 	ret
    2ee4:	dd800717 	ldw	r22,28(sp)
    2ee8:	dc800c17 	ldw	r18,48(sp)
    2eec:	002b883a 	mov	r21,zero
    2ef0:	0023883a 	mov	r17,zero
    2ef4:	a80b883a 	mov	r5,r21
    2ef8:	b00d883a 	mov	r6,r22
    2efc:	880f883a 	mov	r7,r17
    2f00:	ddc00817 	ldw	r23,32(sp)
    2f04:	dcc00d17 	ldw	r19,52(sp)
    2f08:	9009883a 	mov	r4,r18
    2f0c:	00038880 	call	3888 <__muldi3>
    2f10:	001b883a 	mov	r13,zero
    2f14:	680f883a 	mov	r7,r13
    2f18:	b009883a 	mov	r4,r22
    2f1c:	000b883a 	mov	r5,zero
    2f20:	980d883a 	mov	r6,r19
    2f24:	b82d883a 	mov	r22,r23
    2f28:	002f883a 	mov	r23,zero
    2f2c:	db401615 	stw	r13,88(sp)
    2f30:	d8801315 	stw	r2,76(sp)
    2f34:	d8c01415 	stw	r3,80(sp)
    2f38:	dcc01515 	stw	r19,84(sp)
    2f3c:	00038880 	call	3888 <__muldi3>
    2f40:	b00d883a 	mov	r6,r22
    2f44:	000b883a 	mov	r5,zero
    2f48:	9009883a 	mov	r4,r18
    2f4c:	b80f883a 	mov	r7,r23
    2f50:	1021883a 	mov	r16,r2
    2f54:	1823883a 	mov	r17,r3
    2f58:	00038880 	call	3888 <__muldi3>
    2f5c:	8085883a 	add	r2,r16,r2
    2f60:	140d803a 	cmpltu	r6,r2,r16
    2f64:	88c7883a 	add	r3,r17,r3
    2f68:	30cd883a 	add	r6,r6,r3
    2f6c:	1029883a 	mov	r20,r2
    2f70:	302b883a 	mov	r21,r6
    2f74:	da801317 	ldw	r10,76(sp)
    2f78:	dac01417 	ldw	r11,80(sp)
    2f7c:	db001517 	ldw	r12,84(sp)
    2f80:	db401617 	ldw	r13,88(sp)
    2f84:	3440612e 	bgeu	r6,r17,310c <__muldf3+0x318>
    2f88:	0009883a 	mov	r4,zero
    2f8c:	5105883a 	add	r2,r10,r4
    2f90:	128d803a 	cmpltu	r6,r2,r10
    2f94:	5d07883a 	add	r3,r11,r20
    2f98:	30cd883a 	add	r6,r6,r3
    2f9c:	0021883a 	mov	r16,zero
    2fa0:	04400044 	movi	r17,1
    2fa4:	1025883a 	mov	r18,r2
    2fa8:	3027883a 	mov	r19,r6
    2fac:	32c06236 	bltu	r6,r11,3138 <__muldf3+0x344>
    2fb0:	59807a26 	beq	r11,r6,319c <__muldf3+0x3a8>
    2fb4:	680b883a 	mov	r5,r13
    2fb8:	b80f883a 	mov	r7,r23
    2fbc:	6009883a 	mov	r4,r12
    2fc0:	b00d883a 	mov	r6,r22
    2fc4:	00038880 	call	3888 <__muldi3>
    2fc8:	1009883a 	mov	r4,r2
    2fcc:	000f883a 	mov	r7,zero
    2fd0:	1545883a 	add	r2,r2,r21
    2fd4:	1111803a 	cmpltu	r8,r2,r4
    2fd8:	19c7883a 	add	r3,r3,r7
    2fdc:	40c7883a 	add	r3,r8,r3
    2fe0:	88cb883a 	add	r5,r17,r3
    2fe4:	d8c00617 	ldw	r3,24(sp)
    2fe8:	8089883a 	add	r4,r16,r2
    2fec:	d8800b17 	ldw	r2,44(sp)
    2ff0:	18c00104 	addi	r3,r3,4
    2ff4:	240d803a 	cmpltu	r6,r4,r16
    2ff8:	10c7883a 	add	r3,r2,r3
    2ffc:	2013883a 	mov	r9,r4
    3000:	d8800a17 	ldw	r2,40(sp)
    3004:	d9000517 	ldw	r4,20(sp)
    3008:	314d883a 	add	r6,r6,r5
    300c:	3015883a 	mov	r10,r6
    3010:	2088c03a 	cmpne	r4,r4,r2
    3014:	00880034 	movhi	r2,8192
    3018:	10bfffc4 	addi	r2,r2,-1
    301c:	d9000f15 	stw	r4,60(sp)
    3020:	d8c01015 	stw	r3,64(sp)
    3024:	1180162e 	bgeu	r2,r6,3080 <__muldf3+0x28c>
    3028:	1811883a 	mov	r8,r3
    302c:	101f883a 	mov	r15,r2
    3030:	980497fa 	slli	r2,r19,31
    3034:	9016d07a 	srli	r11,r18,1
    3038:	500697fa 	slli	r3,r10,31
    303c:	480cd07a 	srli	r6,r9,1
    3040:	500ed07a 	srli	r7,r10,1
    3044:	12d6b03a 	or	r11,r2,r11
    3048:	00800044 	movi	r2,1
    304c:	198cb03a 	or	r6,r3,r6
    3050:	4888703a 	and	r4,r9,r2
    3054:	9818d07a 	srli	r12,r19,1
    3058:	001b883a 	mov	r13,zero
    305c:	03a00034 	movhi	r14,32768
    3060:	3013883a 	mov	r9,r6
    3064:	3815883a 	mov	r10,r7
    3068:	4091883a 	add	r8,r8,r2
    306c:	20000226 	beq	r4,zero,3078 <__muldf3+0x284>
    3070:	5b64b03a 	or	r18,r11,r13
    3074:	63a6b03a 	or	r19,r12,r14
    3078:	7abfed36 	bltu	r15,r10,3030 <__muldf3+0x23c>
    307c:	da001015 	stw	r8,64(sp)
    3080:	00840034 	movhi	r2,4096
    3084:	10bfffc4 	addi	r2,r2,-1
    3088:	12801436 	bltu	r2,r10,30dc <__muldf3+0x2e8>
    308c:	da001017 	ldw	r8,64(sp)
    3090:	101f883a 	mov	r15,r2
    3094:	4a45883a 	add	r2,r9,r9
    3098:	124d803a 	cmpltu	r6,r2,r9
    309c:	5287883a 	add	r3,r10,r10
    30a0:	9497883a 	add	r11,r18,r18
    30a4:	5c8f803a 	cmpltu	r7,r11,r18
    30a8:	9cd9883a 	add	r12,r19,r19
    30ac:	01000044 	movi	r4,1
    30b0:	30cd883a 	add	r6,r6,r3
    30b4:	3b0f883a 	add	r7,r7,r12
    30b8:	423fffc4 	addi	r8,r8,-1
    30bc:	1013883a 	mov	r9,r2
    30c0:	3015883a 	mov	r10,r6
    30c4:	111ab03a 	or	r13,r2,r4
    30c8:	98003016 	blt	r19,zero,318c <__muldf3+0x398>
    30cc:	5825883a 	mov	r18,r11
    30d0:	3827883a 	mov	r19,r7
    30d4:	7abfef2e 	bgeu	r15,r10,3094 <__muldf3+0x2a0>
    30d8:	da001015 	stw	r8,64(sp)
    30dc:	00803fc4 	movi	r2,255
    30e0:	488e703a 	and	r7,r9,r2
    30e4:	00802004 	movi	r2,128
    30e8:	0007883a 	mov	r3,zero
    30ec:	0011883a 	mov	r8,zero
    30f0:	38801826 	beq	r7,r2,3154 <__muldf3+0x360>
    30f4:	008000c4 	movi	r2,3
    30f8:	d9000e04 	addi	r4,sp,56
    30fc:	da801215 	stw	r10,72(sp)
    3100:	d8800e15 	stw	r2,56(sp)
    3104:	da401115 	stw	r9,68(sp)
    3108:	003f6a06 	br	2eb4 <__muldf3+0xc0>
    310c:	89802126 	beq	r17,r6,3194 <__muldf3+0x3a0>
    3110:	0009883a 	mov	r4,zero
    3114:	5105883a 	add	r2,r10,r4
    3118:	128d803a 	cmpltu	r6,r2,r10
    311c:	5d07883a 	add	r3,r11,r20
    3120:	30cd883a 	add	r6,r6,r3
    3124:	0021883a 	mov	r16,zero
    3128:	0023883a 	mov	r17,zero
    312c:	1025883a 	mov	r18,r2
    3130:	3027883a 	mov	r19,r6
    3134:	32ff9e2e 	bgeu	r6,r11,2fb0 <__muldf3+0x1bc>
    3138:	00800044 	movi	r2,1
    313c:	8089883a 	add	r4,r16,r2
    3140:	240d803a 	cmpltu	r6,r4,r16
    3144:	344d883a 	add	r6,r6,r17
    3148:	2021883a 	mov	r16,r4
    314c:	3023883a 	mov	r17,r6
    3150:	003f9806 	br	2fb4 <__muldf3+0x1c0>
    3154:	403fe71e 	bne	r8,zero,30f4 <__muldf3+0x300>
    3158:	01004004 	movi	r4,256
    315c:	4904703a 	and	r2,r9,r4
    3160:	10c4b03a 	or	r2,r2,r3
    3164:	103fe31e 	bne	r2,zero,30f4 <__muldf3+0x300>
    3168:	94c4b03a 	or	r2,r18,r19
    316c:	103fe126 	beq	r2,zero,30f4 <__muldf3+0x300>
    3170:	49c5883a 	add	r2,r9,r7
    3174:	1251803a 	cmpltu	r8,r2,r9
    3178:	4291883a 	add	r8,r8,r10
    317c:	013fc004 	movi	r4,-256
    3180:	1112703a 	and	r9,r2,r4
    3184:	4015883a 	mov	r10,r8
    3188:	003fda06 	br	30f4 <__muldf3+0x300>
    318c:	6813883a 	mov	r9,r13
    3190:	003fce06 	br	30cc <__muldf3+0x2d8>
    3194:	143f7c36 	bltu	r2,r16,2f88 <__muldf3+0x194>
    3198:	003fdd06 	br	3110 <__muldf3+0x31c>
    319c:	12bf852e 	bgeu	r2,r10,2fb4 <__muldf3+0x1c0>
    31a0:	003fe506 	br	3138 <__muldf3+0x344>
    31a4:	00800084 	movi	r2,2
    31a8:	20bf351e 	bne	r4,r2,2e80 <__muldf3+0x8c>
    31ac:	01000074 	movhi	r4,1
    31b0:	213e0904 	addi	r4,r4,-2012
    31b4:	003f3f06 	br	2eb4 <__muldf3+0xc0>

000031b8 <__divdf3>:
    31b8:	deffed04 	addi	sp,sp,-76
    31bc:	dcc01115 	stw	r19,68(sp)
    31c0:	dcc00404 	addi	r19,sp,16
    31c4:	2011883a 	mov	r8,r4
    31c8:	2813883a 	mov	r9,r5
    31cc:	dc000e15 	stw	r16,56(sp)
    31d0:	d809883a 	mov	r4,sp
    31d4:	980b883a 	mov	r5,r19
    31d8:	dc000904 	addi	r16,sp,36
    31dc:	dfc01215 	stw	ra,72(sp)
    31e0:	da400115 	stw	r9,4(sp)
    31e4:	d9c00315 	stw	r7,12(sp)
    31e8:	da000015 	stw	r8,0(sp)
    31ec:	d9800215 	stw	r6,8(sp)
    31f0:	dc801015 	stw	r18,64(sp)
    31f4:	dc400f15 	stw	r17,60(sp)
    31f8:	0003cb40 	call	3cb4 <__unpack_d>
    31fc:	d9000204 	addi	r4,sp,8
    3200:	800b883a 	mov	r5,r16
    3204:	0003cb40 	call	3cb4 <__unpack_d>
    3208:	d9000417 	ldw	r4,16(sp)
    320c:	00800044 	movi	r2,1
    3210:	11000b2e 	bgeu	r2,r4,3240 <__divdf3+0x88>
    3214:	d9400917 	ldw	r5,36(sp)
    3218:	1140762e 	bgeu	r2,r5,33f4 <__divdf3+0x23c>
    321c:	d8800517 	ldw	r2,20(sp)
    3220:	d8c00a17 	ldw	r3,40(sp)
    3224:	01800104 	movi	r6,4
    3228:	10c4f03a 	xor	r2,r2,r3
    322c:	d8800515 	stw	r2,20(sp)
    3230:	21800226 	beq	r4,r6,323c <__divdf3+0x84>
    3234:	00800084 	movi	r2,2
    3238:	2080141e 	bne	r4,r2,328c <__divdf3+0xd4>
    323c:	29000926 	beq	r5,r4,3264 <__divdf3+0xac>
    3240:	9809883a 	mov	r4,r19
    3244:	00039a00 	call	39a0 <__pack_d>
    3248:	dfc01217 	ldw	ra,72(sp)
    324c:	dcc01117 	ldw	r19,68(sp)
    3250:	dc801017 	ldw	r18,64(sp)
    3254:	dc400f17 	ldw	r17,60(sp)
    3258:	dc000e17 	ldw	r16,56(sp)
    325c:	dec01304 	addi	sp,sp,76
    3260:	f800283a 	ret
    3264:	01000074 	movhi	r4,1
    3268:	213e0904 	addi	r4,r4,-2012
    326c:	00039a00 	call	39a0 <__pack_d>
    3270:	dfc01217 	ldw	ra,72(sp)
    3274:	dcc01117 	ldw	r19,68(sp)
    3278:	dc801017 	ldw	r18,64(sp)
    327c:	dc400f17 	ldw	r17,60(sp)
    3280:	dc000e17 	ldw	r16,56(sp)
    3284:	dec01304 	addi	sp,sp,76
    3288:	f800283a 	ret
    328c:	29805b26 	beq	r5,r6,33fc <__divdf3+0x244>
    3290:	28802d26 	beq	r5,r2,3348 <__divdf3+0x190>
    3294:	d8c00617 	ldw	r3,24(sp)
    3298:	d8800b17 	ldw	r2,44(sp)
    329c:	d9c00817 	ldw	r7,32(sp)
    32a0:	dc400d17 	ldw	r17,52(sp)
    32a4:	188bc83a 	sub	r5,r3,r2
    32a8:	d9800717 	ldw	r6,28(sp)
    32ac:	dc000c17 	ldw	r16,48(sp)
    32b0:	d9400615 	stw	r5,24(sp)
    32b4:	3c403836 	bltu	r7,r17,3398 <__divdf3+0x1e0>
    32b8:	89c03626 	beq	r17,r7,3394 <__divdf3+0x1dc>
    32bc:	0015883a 	mov	r10,zero
    32c0:	001d883a 	mov	r14,zero
    32c4:	02c40034 	movhi	r11,4096
    32c8:	001f883a 	mov	r15,zero
    32cc:	003f883a 	mov	ra,zero
    32d0:	04800f44 	movi	r18,61
    32d4:	00000f06 	br	3314 <__divdf3+0x15c>
    32d8:	601d883a 	mov	r14,r12
    32dc:	681f883a 	mov	r15,r13
    32e0:	400d883a 	mov	r6,r8
    32e4:	100f883a 	mov	r7,r2
    32e8:	3191883a 	add	r8,r6,r6
    32ec:	5808d07a 	srli	r4,r11,1
    32f0:	4185803a 	cmpltu	r2,r8,r6
    32f4:	39d3883a 	add	r9,r7,r7
    32f8:	28c6b03a 	or	r3,r5,r3
    32fc:	1245883a 	add	r2,r2,r9
    3300:	1815883a 	mov	r10,r3
    3304:	2017883a 	mov	r11,r4
    3308:	400d883a 	mov	r6,r8
    330c:	100f883a 	mov	r7,r2
    3310:	fc801726 	beq	ra,r18,3370 <__divdf3+0x1b8>
    3314:	580a97fa 	slli	r5,r11,31
    3318:	5006d07a 	srli	r3,r10,1
    331c:	ffc00044 	addi	ra,ra,1
    3320:	3c7ff136 	bltu	r7,r17,32e8 <__divdf3+0x130>
    3324:	3411c83a 	sub	r8,r6,r16
    3328:	3205803a 	cmpltu	r2,r6,r8
    332c:	3c53c83a 	sub	r9,r7,r17
    3330:	7298b03a 	or	r12,r14,r10
    3334:	7adab03a 	or	r13,r15,r11
    3338:	4885c83a 	sub	r2,r9,r2
    333c:	89ffe61e 	bne	r17,r7,32d8 <__divdf3+0x120>
    3340:	343fe936 	bltu	r6,r16,32e8 <__divdf3+0x130>
    3344:	003fe406 	br	32d8 <__divdf3+0x120>
    3348:	9809883a 	mov	r4,r19
    334c:	d9800415 	stw	r6,16(sp)
    3350:	00039a00 	call	39a0 <__pack_d>
    3354:	dfc01217 	ldw	ra,72(sp)
    3358:	dcc01117 	ldw	r19,68(sp)
    335c:	dc801017 	ldw	r18,64(sp)
    3360:	dc400f17 	ldw	r17,60(sp)
    3364:	dc000e17 	ldw	r16,56(sp)
    3368:	dec01304 	addi	sp,sp,76
    336c:	f800283a 	ret
    3370:	00803fc4 	movi	r2,255
    3374:	7090703a 	and	r8,r14,r2
    3378:	00802004 	movi	r2,128
    337c:	0007883a 	mov	r3,zero
    3380:	0013883a 	mov	r9,zero
    3384:	40800d26 	beq	r8,r2,33bc <__divdf3+0x204>
    3388:	dbc00815 	stw	r15,32(sp)
    338c:	db800715 	stw	r14,28(sp)
    3390:	003fab06 	br	3240 <__divdf3+0x88>
    3394:	343fc92e 	bgeu	r6,r16,32bc <__divdf3+0x104>
    3398:	3185883a 	add	r2,r6,r6
    339c:	1189803a 	cmpltu	r4,r2,r6
    33a0:	39c7883a 	add	r3,r7,r7
    33a4:	20c9883a 	add	r4,r4,r3
    33a8:	297fffc4 	addi	r5,r5,-1
    33ac:	100d883a 	mov	r6,r2
    33b0:	200f883a 	mov	r7,r4
    33b4:	d9400615 	stw	r5,24(sp)
    33b8:	003fc006 	br	32bc <__divdf3+0x104>
    33bc:	483ff21e 	bne	r9,zero,3388 <__divdf3+0x1d0>
    33c0:	01004004 	movi	r4,256
    33c4:	7104703a 	and	r2,r14,r4
    33c8:	10c4b03a 	or	r2,r2,r3
    33cc:	103fee1e 	bne	r2,zero,3388 <__divdf3+0x1d0>
    33d0:	31c4b03a 	or	r2,r6,r7
    33d4:	103fec26 	beq	r2,zero,3388 <__divdf3+0x1d0>
    33d8:	7205883a 	add	r2,r14,r8
    33dc:	1391803a 	cmpltu	r8,r2,r14
    33e0:	43d1883a 	add	r8,r8,r15
    33e4:	013fc004 	movi	r4,-256
    33e8:	111c703a 	and	r14,r2,r4
    33ec:	401f883a 	mov	r15,r8
    33f0:	003fe506 	br	3388 <__divdf3+0x1d0>
    33f4:	8009883a 	mov	r4,r16
    33f8:	003f9206 	br	3244 <__divdf3+0x8c>
    33fc:	9809883a 	mov	r4,r19
    3400:	d8000715 	stw	zero,28(sp)
    3404:	d8000815 	stw	zero,32(sp)
    3408:	d8000615 	stw	zero,24(sp)
    340c:	003f8d06 	br	3244 <__divdf3+0x8c>

00003410 <__eqdf2>:
    3410:	deffef04 	addi	sp,sp,-68
    3414:	dc400f15 	stw	r17,60(sp)
    3418:	dc400404 	addi	r17,sp,16
    341c:	2005883a 	mov	r2,r4
    3420:	2807883a 	mov	r3,r5
    3424:	dc000e15 	stw	r16,56(sp)
    3428:	d809883a 	mov	r4,sp
    342c:	880b883a 	mov	r5,r17
    3430:	dc000904 	addi	r16,sp,36
    3434:	d8c00115 	stw	r3,4(sp)
    3438:	d8800015 	stw	r2,0(sp)
    343c:	d9800215 	stw	r6,8(sp)
    3440:	dfc01015 	stw	ra,64(sp)
    3444:	d9c00315 	stw	r7,12(sp)
    3448:	0003cb40 	call	3cb4 <__unpack_d>
    344c:	d9000204 	addi	r4,sp,8
    3450:	800b883a 	mov	r5,r16
    3454:	0003cb40 	call	3cb4 <__unpack_d>
    3458:	d8800417 	ldw	r2,16(sp)
    345c:	00c00044 	movi	r3,1
    3460:	180d883a 	mov	r6,r3
    3464:	1880062e 	bgeu	r3,r2,3480 <__eqdf2+0x70>
    3468:	d8800917 	ldw	r2,36(sp)
    346c:	8809883a 	mov	r4,r17
    3470:	800b883a 	mov	r5,r16
    3474:	1880022e 	bgeu	r3,r2,3480 <__eqdf2+0x70>
    3478:	0003dec0 	call	3dec <__fpcmp_parts_d>
    347c:	100d883a 	mov	r6,r2
    3480:	3005883a 	mov	r2,r6
    3484:	dfc01017 	ldw	ra,64(sp)
    3488:	dc400f17 	ldw	r17,60(sp)
    348c:	dc000e17 	ldw	r16,56(sp)
    3490:	dec01104 	addi	sp,sp,68
    3494:	f800283a 	ret

00003498 <__nedf2>:
    3498:	deffef04 	addi	sp,sp,-68
    349c:	dc400f15 	stw	r17,60(sp)
    34a0:	dc400404 	addi	r17,sp,16
    34a4:	2005883a 	mov	r2,r4
    34a8:	2807883a 	mov	r3,r5
    34ac:	dc000e15 	stw	r16,56(sp)
    34b0:	d809883a 	mov	r4,sp
    34b4:	880b883a 	mov	r5,r17
    34b8:	dc000904 	addi	r16,sp,36
    34bc:	d8c00115 	stw	r3,4(sp)
    34c0:	d8800015 	stw	r2,0(sp)
    34c4:	d9800215 	stw	r6,8(sp)
    34c8:	dfc01015 	stw	ra,64(sp)
    34cc:	d9c00315 	stw	r7,12(sp)
    34d0:	0003cb40 	call	3cb4 <__unpack_d>
    34d4:	d9000204 	addi	r4,sp,8
    34d8:	800b883a 	mov	r5,r16
    34dc:	0003cb40 	call	3cb4 <__unpack_d>
    34e0:	d8800417 	ldw	r2,16(sp)
    34e4:	00c00044 	movi	r3,1
    34e8:	180d883a 	mov	r6,r3
    34ec:	1880062e 	bgeu	r3,r2,3508 <__nedf2+0x70>
    34f0:	d8800917 	ldw	r2,36(sp)
    34f4:	8809883a 	mov	r4,r17
    34f8:	800b883a 	mov	r5,r16
    34fc:	1880022e 	bgeu	r3,r2,3508 <__nedf2+0x70>
    3500:	0003dec0 	call	3dec <__fpcmp_parts_d>
    3504:	100d883a 	mov	r6,r2
    3508:	3005883a 	mov	r2,r6
    350c:	dfc01017 	ldw	ra,64(sp)
    3510:	dc400f17 	ldw	r17,60(sp)
    3514:	dc000e17 	ldw	r16,56(sp)
    3518:	dec01104 	addi	sp,sp,68
    351c:	f800283a 	ret

00003520 <__gtdf2>:
    3520:	deffef04 	addi	sp,sp,-68
    3524:	dc400f15 	stw	r17,60(sp)
    3528:	dc400404 	addi	r17,sp,16
    352c:	2005883a 	mov	r2,r4
    3530:	2807883a 	mov	r3,r5
    3534:	dc000e15 	stw	r16,56(sp)
    3538:	d809883a 	mov	r4,sp
    353c:	880b883a 	mov	r5,r17
    3540:	dc000904 	addi	r16,sp,36
    3544:	d8c00115 	stw	r3,4(sp)
    3548:	d8800015 	stw	r2,0(sp)
    354c:	d9800215 	stw	r6,8(sp)
    3550:	dfc01015 	stw	ra,64(sp)
    3554:	d9c00315 	stw	r7,12(sp)
    3558:	0003cb40 	call	3cb4 <__unpack_d>
    355c:	d9000204 	addi	r4,sp,8
    3560:	800b883a 	mov	r5,r16
    3564:	0003cb40 	call	3cb4 <__unpack_d>
    3568:	d8800417 	ldw	r2,16(sp)
    356c:	00c00044 	movi	r3,1
    3570:	01bfffc4 	movi	r6,-1
    3574:	1880062e 	bgeu	r3,r2,3590 <__gtdf2+0x70>
    3578:	d8800917 	ldw	r2,36(sp)
    357c:	8809883a 	mov	r4,r17
    3580:	800b883a 	mov	r5,r16
    3584:	1880022e 	bgeu	r3,r2,3590 <__gtdf2+0x70>
    3588:	0003dec0 	call	3dec <__fpcmp_parts_d>
    358c:	100d883a 	mov	r6,r2
    3590:	3005883a 	mov	r2,r6
    3594:	dfc01017 	ldw	ra,64(sp)
    3598:	dc400f17 	ldw	r17,60(sp)
    359c:	dc000e17 	ldw	r16,56(sp)
    35a0:	dec01104 	addi	sp,sp,68
    35a4:	f800283a 	ret

000035a8 <__ltdf2>:
    35a8:	deffef04 	addi	sp,sp,-68
    35ac:	dc400f15 	stw	r17,60(sp)
    35b0:	dc400404 	addi	r17,sp,16
    35b4:	2005883a 	mov	r2,r4
    35b8:	2807883a 	mov	r3,r5
    35bc:	dc000e15 	stw	r16,56(sp)
    35c0:	d809883a 	mov	r4,sp
    35c4:	880b883a 	mov	r5,r17
    35c8:	dc000904 	addi	r16,sp,36
    35cc:	d8c00115 	stw	r3,4(sp)
    35d0:	d8800015 	stw	r2,0(sp)
    35d4:	d9800215 	stw	r6,8(sp)
    35d8:	dfc01015 	stw	ra,64(sp)
    35dc:	d9c00315 	stw	r7,12(sp)
    35e0:	0003cb40 	call	3cb4 <__unpack_d>
    35e4:	d9000204 	addi	r4,sp,8
    35e8:	800b883a 	mov	r5,r16
    35ec:	0003cb40 	call	3cb4 <__unpack_d>
    35f0:	d8800417 	ldw	r2,16(sp)
    35f4:	00c00044 	movi	r3,1
    35f8:	180d883a 	mov	r6,r3
    35fc:	1880062e 	bgeu	r3,r2,3618 <__ltdf2+0x70>
    3600:	d8800917 	ldw	r2,36(sp)
    3604:	8809883a 	mov	r4,r17
    3608:	800b883a 	mov	r5,r16
    360c:	1880022e 	bgeu	r3,r2,3618 <__ltdf2+0x70>
    3610:	0003dec0 	call	3dec <__fpcmp_parts_d>
    3614:	100d883a 	mov	r6,r2
    3618:	3005883a 	mov	r2,r6
    361c:	dfc01017 	ldw	ra,64(sp)
    3620:	dc400f17 	ldw	r17,60(sp)
    3624:	dc000e17 	ldw	r16,56(sp)
    3628:	dec01104 	addi	sp,sp,68
    362c:	f800283a 	ret

00003630 <__ledf2>:
    3630:	deffef04 	addi	sp,sp,-68
    3634:	dc400f15 	stw	r17,60(sp)
    3638:	dc400404 	addi	r17,sp,16
    363c:	2005883a 	mov	r2,r4
    3640:	2807883a 	mov	r3,r5
    3644:	dc000e15 	stw	r16,56(sp)
    3648:	d809883a 	mov	r4,sp
    364c:	880b883a 	mov	r5,r17
    3650:	dc000904 	addi	r16,sp,36
    3654:	d8c00115 	stw	r3,4(sp)
    3658:	d8800015 	stw	r2,0(sp)
    365c:	d9800215 	stw	r6,8(sp)
    3660:	dfc01015 	stw	ra,64(sp)
    3664:	d9c00315 	stw	r7,12(sp)
    3668:	0003cb40 	call	3cb4 <__unpack_d>
    366c:	d9000204 	addi	r4,sp,8
    3670:	800b883a 	mov	r5,r16
    3674:	0003cb40 	call	3cb4 <__unpack_d>
    3678:	d8800417 	ldw	r2,16(sp)
    367c:	00c00044 	movi	r3,1
    3680:	180d883a 	mov	r6,r3
    3684:	1880062e 	bgeu	r3,r2,36a0 <__ledf2+0x70>
    3688:	d8800917 	ldw	r2,36(sp)
    368c:	8809883a 	mov	r4,r17
    3690:	800b883a 	mov	r5,r16
    3694:	1880022e 	bgeu	r3,r2,36a0 <__ledf2+0x70>
    3698:	0003dec0 	call	3dec <__fpcmp_parts_d>
    369c:	100d883a 	mov	r6,r2
    36a0:	3005883a 	mov	r2,r6
    36a4:	dfc01017 	ldw	ra,64(sp)
    36a8:	dc400f17 	ldw	r17,60(sp)
    36ac:	dc000e17 	ldw	r16,56(sp)
    36b0:	dec01104 	addi	sp,sp,68
    36b4:	f800283a 	ret

000036b8 <__floatsidf>:
    36b8:	2006d7fa 	srli	r3,r4,31
    36bc:	defff604 	addi	sp,sp,-40
    36c0:	008000c4 	movi	r2,3
    36c4:	dfc00915 	stw	ra,36(sp)
    36c8:	dcc00815 	stw	r19,32(sp)
    36cc:	dc800715 	stw	r18,28(sp)
    36d0:	dc400615 	stw	r17,24(sp)
    36d4:	dc000515 	stw	r16,20(sp)
    36d8:	d8800015 	stw	r2,0(sp)
    36dc:	d8c00115 	stw	r3,4(sp)
    36e0:	20000f1e 	bne	r4,zero,3720 <__floatsidf+0x68>
    36e4:	00800084 	movi	r2,2
    36e8:	d8800015 	stw	r2,0(sp)
    36ec:	d809883a 	mov	r4,sp
    36f0:	00039a00 	call	39a0 <__pack_d>
    36f4:	1009883a 	mov	r4,r2
    36f8:	180b883a 	mov	r5,r3
    36fc:	2005883a 	mov	r2,r4
    3700:	2807883a 	mov	r3,r5
    3704:	dfc00917 	ldw	ra,36(sp)
    3708:	dcc00817 	ldw	r19,32(sp)
    370c:	dc800717 	ldw	r18,28(sp)
    3710:	dc400617 	ldw	r17,24(sp)
    3714:	dc000517 	ldw	r16,20(sp)
    3718:	dec00a04 	addi	sp,sp,40
    371c:	f800283a 	ret
    3720:	00800f04 	movi	r2,60
    3724:	1807003a 	cmpeq	r3,r3,zero
    3728:	d8800215 	stw	r2,8(sp)
    372c:	18001126 	beq	r3,zero,3774 <__floatsidf+0xbc>
    3730:	0027883a 	mov	r19,zero
    3734:	2025883a 	mov	r18,r4
    3738:	d9000315 	stw	r4,12(sp)
    373c:	dcc00415 	stw	r19,16(sp)
    3740:	00039200 	call	3920 <__clzsi2>
    3744:	11000744 	addi	r4,r2,29
    3748:	013fe80e 	bge	zero,r4,36ec <__floatsidf+0x34>
    374c:	10bfff44 	addi	r2,r2,-3
    3750:	10000c16 	blt	r2,zero,3784 <__floatsidf+0xcc>
    3754:	90a2983a 	sll	r17,r18,r2
    3758:	0021883a 	mov	r16,zero
    375c:	d8800217 	ldw	r2,8(sp)
    3760:	dc400415 	stw	r17,16(sp)
    3764:	dc000315 	stw	r16,12(sp)
    3768:	1105c83a 	sub	r2,r2,r4
    376c:	d8800215 	stw	r2,8(sp)
    3770:	003fde06 	br	36ec <__floatsidf+0x34>
    3774:	00a00034 	movhi	r2,32768
    3778:	20800a26 	beq	r4,r2,37a4 <__floatsidf+0xec>
    377c:	0109c83a 	sub	r4,zero,r4
    3780:	003feb06 	br	3730 <__floatsidf+0x78>
    3784:	9006d07a 	srli	r3,r18,1
    3788:	008007c4 	movi	r2,31
    378c:	1105c83a 	sub	r2,r2,r4
    3790:	1886d83a 	srl	r3,r3,r2
    3794:	9922983a 	sll	r17,r19,r4
    3798:	9120983a 	sll	r16,r18,r4
    379c:	1c62b03a 	or	r17,r3,r17
    37a0:	003fee06 	br	375c <__floatsidf+0xa4>
    37a4:	0009883a 	mov	r4,zero
    37a8:	01707834 	movhi	r5,49632
    37ac:	003fd306 	br	36fc <__floatsidf+0x44>

000037b0 <__fixdfsi>:
    37b0:	defff804 	addi	sp,sp,-32
    37b4:	2005883a 	mov	r2,r4
    37b8:	2807883a 	mov	r3,r5
    37bc:	d809883a 	mov	r4,sp
    37c0:	d9400204 	addi	r5,sp,8
    37c4:	d8c00115 	stw	r3,4(sp)
    37c8:	d8800015 	stw	r2,0(sp)
    37cc:	dfc00715 	stw	ra,28(sp)
    37d0:	0003cb40 	call	3cb4 <__unpack_d>
    37d4:	d8c00217 	ldw	r3,8(sp)
    37d8:	00800084 	movi	r2,2
    37dc:	1880051e 	bne	r3,r2,37f4 <__fixdfsi+0x44>
    37e0:	0007883a 	mov	r3,zero
    37e4:	1805883a 	mov	r2,r3
    37e8:	dfc00717 	ldw	ra,28(sp)
    37ec:	dec00804 	addi	sp,sp,32
    37f0:	f800283a 	ret
    37f4:	00800044 	movi	r2,1
    37f8:	10fff92e 	bgeu	r2,r3,37e0 <__fixdfsi+0x30>
    37fc:	00800104 	movi	r2,4
    3800:	18800426 	beq	r3,r2,3814 <__fixdfsi+0x64>
    3804:	d8c00417 	ldw	r3,16(sp)
    3808:	183ff516 	blt	r3,zero,37e0 <__fixdfsi+0x30>
    380c:	00800784 	movi	r2,30
    3810:	10c0080e 	bge	r2,r3,3834 <__fixdfsi+0x84>
    3814:	d8800317 	ldw	r2,12(sp)
    3818:	1000121e 	bne	r2,zero,3864 <__fixdfsi+0xb4>
    381c:	00e00034 	movhi	r3,32768
    3820:	18ffffc4 	addi	r3,r3,-1
    3824:	1805883a 	mov	r2,r3
    3828:	dfc00717 	ldw	ra,28(sp)
    382c:	dec00804 	addi	sp,sp,32
    3830:	f800283a 	ret
    3834:	00800f04 	movi	r2,60
    3838:	10d1c83a 	sub	r8,r2,r3
    383c:	40bff804 	addi	r2,r8,-32
    3840:	d9800517 	ldw	r6,20(sp)
    3844:	d9c00617 	ldw	r7,24(sp)
    3848:	10000816 	blt	r2,zero,386c <__fixdfsi+0xbc>
    384c:	3888d83a 	srl	r4,r7,r2
    3850:	d8800317 	ldw	r2,12(sp)
    3854:	2007883a 	mov	r3,r4
    3858:	103fe226 	beq	r2,zero,37e4 <__fixdfsi+0x34>
    385c:	0107c83a 	sub	r3,zero,r4
    3860:	003fe006 	br	37e4 <__fixdfsi+0x34>
    3864:	00e00034 	movhi	r3,32768
    3868:	003fde06 	br	37e4 <__fixdfsi+0x34>
    386c:	39c7883a 	add	r3,r7,r7
    3870:	008007c4 	movi	r2,31
    3874:	1205c83a 	sub	r2,r2,r8
    3878:	1886983a 	sll	r3,r3,r2
    387c:	3208d83a 	srl	r4,r6,r8
    3880:	1908b03a 	or	r4,r3,r4
    3884:	003ff206 	br	3850 <__fixdfsi+0xa0>

00003888 <__muldi3>:
    3888:	2011883a 	mov	r8,r4
    388c:	427fffcc 	andi	r9,r8,65535
    3890:	4018d43a 	srli	r12,r8,16
    3894:	32bfffcc 	andi	r10,r6,65535
    3898:	3016d43a 	srli	r11,r6,16
    389c:	4a85383a 	mul	r2,r9,r10
    38a0:	6295383a 	mul	r10,r12,r10
    38a4:	4ad3383a 	mul	r9,r9,r11
    38a8:	113fffcc 	andi	r4,r2,65535
    38ac:	1004d43a 	srli	r2,r2,16
    38b0:	4a93883a 	add	r9,r9,r10
    38b4:	3807883a 	mov	r3,r7
    38b8:	1245883a 	add	r2,r2,r9
    38bc:	280f883a 	mov	r7,r5
    38c0:	180b883a 	mov	r5,r3
    38c4:	1006943a 	slli	r3,r2,16
    38c8:	defffd04 	addi	sp,sp,-12
    38cc:	dc800215 	stw	r18,8(sp)
    38d0:	1907883a 	add	r3,r3,r4
    38d4:	dc400115 	stw	r17,4(sp)
    38d8:	dc000015 	stw	r16,0(sp)
    38dc:	4165383a 	mul	r18,r8,r5
    38e0:	31e3383a 	mul	r17,r6,r7
    38e4:	1012d43a 	srli	r9,r2,16
    38e8:	62d9383a 	mul	r12,r12,r11
    38ec:	181f883a 	mov	r15,r3
    38f0:	1280022e 	bgeu	r2,r10,38fc <__muldi3+0x74>
    38f4:	00800074 	movhi	r2,1
    38f8:	6099883a 	add	r12,r12,r2
    38fc:	624d883a 	add	r6,r12,r9
    3900:	9187883a 	add	r3,r18,r6
    3904:	88c7883a 	add	r3,r17,r3
    3908:	7805883a 	mov	r2,r15
    390c:	dc800217 	ldw	r18,8(sp)
    3910:	dc400117 	ldw	r17,4(sp)
    3914:	dc000017 	ldw	r16,0(sp)
    3918:	dec00304 	addi	sp,sp,12
    391c:	f800283a 	ret

00003920 <__clzsi2>:
    3920:	00bfffd4 	movui	r2,65535
    3924:	11000e36 	bltu	r2,r4,3960 <__clzsi2+0x40>
    3928:	00803fc4 	movi	r2,255
    392c:	01400204 	movi	r5,8
    3930:	0007883a 	mov	r3,zero
    3934:	11001036 	bltu	r2,r4,3978 <__clzsi2+0x58>
    3938:	000b883a 	mov	r5,zero
    393c:	20c6d83a 	srl	r3,r4,r3
    3940:	00800074 	movhi	r2,1
    3944:	10be0e04 	addi	r2,r2,-1992
    3948:	1887883a 	add	r3,r3,r2
    394c:	18800003 	ldbu	r2,0(r3)
    3950:	00c00804 	movi	r3,32
    3954:	2885883a 	add	r2,r5,r2
    3958:	1885c83a 	sub	r2,r3,r2
    395c:	f800283a 	ret
    3960:	01400404 	movi	r5,16
    3964:	00804034 	movhi	r2,256
    3968:	10bfffc4 	addi	r2,r2,-1
    396c:	2807883a 	mov	r3,r5
    3970:	113ff22e 	bgeu	r2,r4,393c <__clzsi2+0x1c>
    3974:	01400604 	movi	r5,24
    3978:	2807883a 	mov	r3,r5
    397c:	20c6d83a 	srl	r3,r4,r3
    3980:	00800074 	movhi	r2,1
    3984:	10be0e04 	addi	r2,r2,-1992
    3988:	1887883a 	add	r3,r3,r2
    398c:	18800003 	ldbu	r2,0(r3)
    3990:	00c00804 	movi	r3,32
    3994:	2885883a 	add	r2,r5,r2
    3998:	1885c83a 	sub	r2,r3,r2
    399c:	f800283a 	ret

000039a0 <__pack_d>:
    39a0:	20c00017 	ldw	r3,0(r4)
    39a4:	defffd04 	addi	sp,sp,-12
    39a8:	dc000015 	stw	r16,0(sp)
    39ac:	dc800215 	stw	r18,8(sp)
    39b0:	dc400115 	stw	r17,4(sp)
    39b4:	00800044 	movi	r2,1
    39b8:	22000317 	ldw	r8,12(r4)
    39bc:	001f883a 	mov	r15,zero
    39c0:	22400417 	ldw	r9,16(r4)
    39c4:	24000117 	ldw	r16,4(r4)
    39c8:	10c0552e 	bgeu	r2,r3,3b20 <__pack_d+0x180>
    39cc:	00800104 	movi	r2,4
    39d0:	18804f26 	beq	r3,r2,3b10 <__pack_d+0x170>
    39d4:	00800084 	movi	r2,2
    39d8:	18800226 	beq	r3,r2,39e4 <__pack_d+0x44>
    39dc:	4244b03a 	or	r2,r8,r9
    39e0:	10001a1e 	bne	r2,zero,3a4c <__pack_d+0xac>
    39e4:	000d883a 	mov	r6,zero
    39e8:	000f883a 	mov	r7,zero
    39ec:	0011883a 	mov	r8,zero
    39f0:	00800434 	movhi	r2,16
    39f4:	10bfffc4 	addi	r2,r2,-1
    39f8:	301d883a 	mov	r14,r6
    39fc:	3884703a 	and	r2,r7,r2
    3a00:	400a953a 	slli	r5,r8,20
    3a04:	79bffc2c 	andhi	r6,r15,65520
    3a08:	308cb03a 	or	r6,r6,r2
    3a0c:	00e00434 	movhi	r3,32784
    3a10:	18ffffc4 	addi	r3,r3,-1
    3a14:	800497fa 	slli	r2,r16,31
    3a18:	30c6703a 	and	r3,r6,r3
    3a1c:	1946b03a 	or	r3,r3,r5
    3a20:	01600034 	movhi	r5,32768
    3a24:	297fffc4 	addi	r5,r5,-1
    3a28:	194a703a 	and	r5,r3,r5
    3a2c:	288ab03a 	or	r5,r5,r2
    3a30:	2807883a 	mov	r3,r5
    3a34:	7005883a 	mov	r2,r14
    3a38:	dc800217 	ldw	r18,8(sp)
    3a3c:	dc400117 	ldw	r17,4(sp)
    3a40:	dc000017 	ldw	r16,0(sp)
    3a44:	dec00304 	addi	sp,sp,12
    3a48:	f800283a 	ret
    3a4c:	21000217 	ldw	r4,8(r4)
    3a50:	00bf0084 	movi	r2,-1022
    3a54:	20803f16 	blt	r4,r2,3b54 <__pack_d+0x1b4>
    3a58:	0080ffc4 	movi	r2,1023
    3a5c:	11002c16 	blt	r2,r4,3b10 <__pack_d+0x170>
    3a60:	00803fc4 	movi	r2,255
    3a64:	408c703a 	and	r6,r8,r2
    3a68:	00802004 	movi	r2,128
    3a6c:	0007883a 	mov	r3,zero
    3a70:	000f883a 	mov	r7,zero
    3a74:	2280ffc4 	addi	r10,r4,1023
    3a78:	30801e26 	beq	r6,r2,3af4 <__pack_d+0x154>
    3a7c:	00801fc4 	movi	r2,127
    3a80:	4089883a 	add	r4,r8,r2
    3a84:	220d803a 	cmpltu	r6,r4,r8
    3a88:	324d883a 	add	r6,r6,r9
    3a8c:	2011883a 	mov	r8,r4
    3a90:	3013883a 	mov	r9,r6
    3a94:	00880034 	movhi	r2,8192
    3a98:	10bfffc4 	addi	r2,r2,-1
    3a9c:	12400d36 	bltu	r2,r9,3ad4 <__pack_d+0x134>
    3aa0:	4804963a 	slli	r2,r9,24
    3aa4:	400cd23a 	srli	r6,r8,8
    3aa8:	480ed23a 	srli	r7,r9,8
    3aac:	013fffc4 	movi	r4,-1
    3ab0:	118cb03a 	or	r6,r2,r6
    3ab4:	01400434 	movhi	r5,16
    3ab8:	297fffc4 	addi	r5,r5,-1
    3abc:	3104703a 	and	r2,r6,r4
    3ac0:	3946703a 	and	r3,r7,r5
    3ac4:	5201ffcc 	andi	r8,r10,2047
    3ac8:	100d883a 	mov	r6,r2
    3acc:	180f883a 	mov	r7,r3
    3ad0:	003fc706 	br	39f0 <__pack_d+0x50>
    3ad4:	480897fa 	slli	r4,r9,31
    3ad8:	4004d07a 	srli	r2,r8,1
    3adc:	4806d07a 	srli	r3,r9,1
    3ae0:	52800044 	addi	r10,r10,1
    3ae4:	2084b03a 	or	r2,r4,r2
    3ae8:	1011883a 	mov	r8,r2
    3aec:	1813883a 	mov	r9,r3
    3af0:	003feb06 	br	3aa0 <__pack_d+0x100>
    3af4:	383fe11e 	bne	r7,zero,3a7c <__pack_d+0xdc>
    3af8:	01004004 	movi	r4,256
    3afc:	4104703a 	and	r2,r8,r4
    3b00:	10c4b03a 	or	r2,r2,r3
    3b04:	103fe326 	beq	r2,zero,3a94 <__pack_d+0xf4>
    3b08:	3005883a 	mov	r2,r6
    3b0c:	003fdc06 	br	3a80 <__pack_d+0xe0>
    3b10:	000d883a 	mov	r6,zero
    3b14:	000f883a 	mov	r7,zero
    3b18:	0201ffc4 	movi	r8,2047
    3b1c:	003fb406 	br	39f0 <__pack_d+0x50>
    3b20:	0005883a 	mov	r2,zero
    3b24:	00c00234 	movhi	r3,8
    3b28:	408cb03a 	or	r6,r8,r2
    3b2c:	48ceb03a 	or	r7,r9,r3
    3b30:	013fffc4 	movi	r4,-1
    3b34:	01400434 	movhi	r5,16
    3b38:	297fffc4 	addi	r5,r5,-1
    3b3c:	3104703a 	and	r2,r6,r4
    3b40:	3946703a 	and	r3,r7,r5
    3b44:	100d883a 	mov	r6,r2
    3b48:	180f883a 	mov	r7,r3
    3b4c:	0201ffc4 	movi	r8,2047
    3b50:	003fa706 	br	39f0 <__pack_d+0x50>
    3b54:	1109c83a 	sub	r4,r2,r4
    3b58:	00800e04 	movi	r2,56
    3b5c:	11004316 	blt	r2,r4,3c6c <__pack_d+0x2cc>
    3b60:	21fff804 	addi	r7,r4,-32
    3b64:	38004516 	blt	r7,zero,3c7c <__pack_d+0x2dc>
    3b68:	49d8d83a 	srl	r12,r9,r7
    3b6c:	001b883a 	mov	r13,zero
    3b70:	0023883a 	mov	r17,zero
    3b74:	01400044 	movi	r5,1
    3b78:	0025883a 	mov	r18,zero
    3b7c:	38004716 	blt	r7,zero,3c9c <__pack_d+0x2fc>
    3b80:	29d6983a 	sll	r11,r5,r7
    3b84:	0015883a 	mov	r10,zero
    3b88:	00bfffc4 	movi	r2,-1
    3b8c:	5089883a 	add	r4,r10,r2
    3b90:	588b883a 	add	r5,r11,r2
    3b94:	228d803a 	cmpltu	r6,r4,r10
    3b98:	314b883a 	add	r5,r6,r5
    3b9c:	4104703a 	and	r2,r8,r4
    3ba0:	4946703a 	and	r3,r9,r5
    3ba4:	10c4b03a 	or	r2,r2,r3
    3ba8:	10000226 	beq	r2,zero,3bb4 <__pack_d+0x214>
    3bac:	04400044 	movi	r17,1
    3bb0:	0025883a 	mov	r18,zero
    3bb4:	00803fc4 	movi	r2,255
    3bb8:	644eb03a 	or	r7,r12,r17
    3bbc:	3892703a 	and	r9,r7,r2
    3bc0:	00802004 	movi	r2,128
    3bc4:	6c90b03a 	or	r8,r13,r18
    3bc8:	0015883a 	mov	r10,zero
    3bcc:	48801626 	beq	r9,r2,3c28 <__pack_d+0x288>
    3bd0:	01001fc4 	movi	r4,127
    3bd4:	3905883a 	add	r2,r7,r4
    3bd8:	11cd803a 	cmpltu	r6,r2,r7
    3bdc:	320d883a 	add	r6,r6,r8
    3be0:	100f883a 	mov	r7,r2
    3be4:	00840034 	movhi	r2,4096
    3be8:	10bfffc4 	addi	r2,r2,-1
    3bec:	3011883a 	mov	r8,r6
    3bf0:	0007883a 	mov	r3,zero
    3bf4:	11801b36 	bltu	r2,r6,3c64 <__pack_d+0x2c4>
    3bf8:	4004963a 	slli	r2,r8,24
    3bfc:	3808d23a 	srli	r4,r7,8
    3c00:	400ad23a 	srli	r5,r8,8
    3c04:	1813883a 	mov	r9,r3
    3c08:	1108b03a 	or	r4,r2,r4
    3c0c:	00bfffc4 	movi	r2,-1
    3c10:	00c00434 	movhi	r3,16
    3c14:	18ffffc4 	addi	r3,r3,-1
    3c18:	208c703a 	and	r6,r4,r2
    3c1c:	28ce703a 	and	r7,r5,r3
    3c20:	4a01ffcc 	andi	r8,r9,2047
    3c24:	003f7206 	br	39f0 <__pack_d+0x50>
    3c28:	503fe91e 	bne	r10,zero,3bd0 <__pack_d+0x230>
    3c2c:	01004004 	movi	r4,256
    3c30:	3904703a 	and	r2,r7,r4
    3c34:	0007883a 	mov	r3,zero
    3c38:	10c4b03a 	or	r2,r2,r3
    3c3c:	10000626 	beq	r2,zero,3c58 <__pack_d+0x2b8>
    3c40:	3a45883a 	add	r2,r7,r9
    3c44:	11cd803a 	cmpltu	r6,r2,r7
    3c48:	320d883a 	add	r6,r6,r8
    3c4c:	100f883a 	mov	r7,r2
    3c50:	3011883a 	mov	r8,r6
    3c54:	0007883a 	mov	r3,zero
    3c58:	00840034 	movhi	r2,4096
    3c5c:	10bfffc4 	addi	r2,r2,-1
    3c60:	123fe52e 	bgeu	r2,r8,3bf8 <__pack_d+0x258>
    3c64:	00c00044 	movi	r3,1
    3c68:	003fe306 	br	3bf8 <__pack_d+0x258>
    3c6c:	0009883a 	mov	r4,zero
    3c70:	0013883a 	mov	r9,zero
    3c74:	000b883a 	mov	r5,zero
    3c78:	003fe406 	br	3c0c <__pack_d+0x26c>
    3c7c:	4a47883a 	add	r3,r9,r9
    3c80:	008007c4 	movi	r2,31
    3c84:	1105c83a 	sub	r2,r2,r4
    3c88:	1886983a 	sll	r3,r3,r2
    3c8c:	4118d83a 	srl	r12,r8,r4
    3c90:	491ad83a 	srl	r13,r9,r4
    3c94:	1b18b03a 	or	r12,r3,r12
    3c98:	003fb506 	br	3b70 <__pack_d+0x1d0>
    3c9c:	2806d07a 	srli	r3,r5,1
    3ca0:	008007c4 	movi	r2,31
    3ca4:	1105c83a 	sub	r2,r2,r4
    3ca8:	1896d83a 	srl	r11,r3,r2
    3cac:	2914983a 	sll	r10,r5,r4
    3cb0:	003fb506 	br	3b88 <__pack_d+0x1e8>

00003cb4 <__unpack_d>:
    3cb4:	20c00117 	ldw	r3,4(r4)
    3cb8:	22400017 	ldw	r9,0(r4)
    3cbc:	00800434 	movhi	r2,16
    3cc0:	10bfffc4 	addi	r2,r2,-1
    3cc4:	1808d53a 	srli	r4,r3,20
    3cc8:	180cd7fa 	srli	r6,r3,31
    3ccc:	1894703a 	and	r10,r3,r2
    3cd0:	2201ffcc 	andi	r8,r4,2047
    3cd4:	281b883a 	mov	r13,r5
    3cd8:	4817883a 	mov	r11,r9
    3cdc:	29800115 	stw	r6,4(r5)
    3ce0:	5019883a 	mov	r12,r10
    3ce4:	40001e1e 	bne	r8,zero,3d60 <__unpack_d+0xac>
    3ce8:	4a84b03a 	or	r2,r9,r10
    3cec:	10001926 	beq	r2,zero,3d54 <__unpack_d+0xa0>
    3cf0:	4804d63a 	srli	r2,r9,24
    3cf4:	500c923a 	slli	r6,r10,8
    3cf8:	013f0084 	movi	r4,-1022
    3cfc:	00c40034 	movhi	r3,4096
    3d00:	18ffffc4 	addi	r3,r3,-1
    3d04:	118cb03a 	or	r6,r2,r6
    3d08:	008000c4 	movi	r2,3
    3d0c:	480a923a 	slli	r5,r9,8
    3d10:	68800015 	stw	r2,0(r13)
    3d14:	69000215 	stw	r4,8(r13)
    3d18:	19800b36 	bltu	r3,r6,3d48 <__unpack_d+0x94>
    3d1c:	200f883a 	mov	r7,r4
    3d20:	1811883a 	mov	r8,r3
    3d24:	2945883a 	add	r2,r5,r5
    3d28:	1149803a 	cmpltu	r4,r2,r5
    3d2c:	3187883a 	add	r3,r6,r6
    3d30:	20c9883a 	add	r4,r4,r3
    3d34:	100b883a 	mov	r5,r2
    3d38:	200d883a 	mov	r6,r4
    3d3c:	39ffffc4 	addi	r7,r7,-1
    3d40:	413ff82e 	bgeu	r8,r4,3d24 <__unpack_d+0x70>
    3d44:	69c00215 	stw	r7,8(r13)
    3d48:	69800415 	stw	r6,16(r13)
    3d4c:	69400315 	stw	r5,12(r13)
    3d50:	f800283a 	ret
    3d54:	00800084 	movi	r2,2
    3d58:	28800015 	stw	r2,0(r5)
    3d5c:	f800283a 	ret
    3d60:	0081ffc4 	movi	r2,2047
    3d64:	40800f26 	beq	r8,r2,3da4 <__unpack_d+0xf0>
    3d68:	480cd63a 	srli	r6,r9,24
    3d6c:	5006923a 	slli	r3,r10,8
    3d70:	4804923a 	slli	r2,r9,8
    3d74:	0009883a 	mov	r4,zero
    3d78:	30c6b03a 	or	r3,r6,r3
    3d7c:	01440034 	movhi	r5,4096
    3d80:	110cb03a 	or	r6,r2,r4
    3d84:	423f0044 	addi	r8,r8,-1023
    3d88:	194eb03a 	or	r7,r3,r5
    3d8c:	008000c4 	movi	r2,3
    3d90:	69c00415 	stw	r7,16(r13)
    3d94:	6a000215 	stw	r8,8(r13)
    3d98:	68800015 	stw	r2,0(r13)
    3d9c:	69800315 	stw	r6,12(r13)
    3da0:	f800283a 	ret
    3da4:	4a84b03a 	or	r2,r9,r10
    3da8:	1000031e 	bne	r2,zero,3db8 <__unpack_d+0x104>
    3dac:	00800104 	movi	r2,4
    3db0:	28800015 	stw	r2,0(r5)
    3db4:	f800283a 	ret
    3db8:	0009883a 	mov	r4,zero
    3dbc:	01400234 	movhi	r5,8
    3dc0:	4904703a 	and	r2,r9,r4
    3dc4:	5146703a 	and	r3,r10,r5
    3dc8:	10c4b03a 	or	r2,r2,r3
    3dcc:	10000526 	beq	r2,zero,3de4 <__unpack_d+0x130>
    3dd0:	00800044 	movi	r2,1
    3dd4:	68800015 	stw	r2,0(r13)
    3dd8:	6b000415 	stw	r12,16(r13)
    3ddc:	6ac00315 	stw	r11,12(r13)
    3de0:	f800283a 	ret
    3de4:	68000015 	stw	zero,0(r13)
    3de8:	003ffb06 	br	3dd8 <__unpack_d+0x124>

00003dec <__fpcmp_parts_d>:
    3dec:	21800017 	ldw	r6,0(r4)
    3df0:	00c00044 	movi	r3,1
    3df4:	19800a2e 	bgeu	r3,r6,3e20 <__fpcmp_parts_d+0x34>
    3df8:	28800017 	ldw	r2,0(r5)
    3dfc:	1880082e 	bgeu	r3,r2,3e20 <__fpcmp_parts_d+0x34>
    3e00:	00c00104 	movi	r3,4
    3e04:	30c02626 	beq	r6,r3,3ea0 <__fpcmp_parts_d+0xb4>
    3e08:	10c02226 	beq	r2,r3,3e94 <__fpcmp_parts_d+0xa8>
    3e0c:	00c00084 	movi	r3,2
    3e10:	30c00526 	beq	r6,r3,3e28 <__fpcmp_parts_d+0x3c>
    3e14:	10c0071e 	bne	r2,r3,3e34 <__fpcmp_parts_d+0x48>
    3e18:	20800117 	ldw	r2,4(r4)
    3e1c:	1000091e 	bne	r2,zero,3e44 <__fpcmp_parts_d+0x58>
    3e20:	00800044 	movi	r2,1
    3e24:	f800283a 	ret
    3e28:	10c01a1e 	bne	r2,r3,3e94 <__fpcmp_parts_d+0xa8>
    3e2c:	0005883a 	mov	r2,zero
    3e30:	f800283a 	ret
    3e34:	22000117 	ldw	r8,4(r4)
    3e38:	28800117 	ldw	r2,4(r5)
    3e3c:	40800326 	beq	r8,r2,3e4c <__fpcmp_parts_d+0x60>
    3e40:	403ff726 	beq	r8,zero,3e20 <__fpcmp_parts_d+0x34>
    3e44:	00bfffc4 	movi	r2,-1
    3e48:	f800283a 	ret
    3e4c:	20c00217 	ldw	r3,8(r4)
    3e50:	28800217 	ldw	r2,8(r5)
    3e54:	10fffa16 	blt	r2,r3,3e40 <__fpcmp_parts_d+0x54>
    3e58:	18800916 	blt	r3,r2,3e80 <__fpcmp_parts_d+0x94>
    3e5c:	21c00417 	ldw	r7,16(r4)
    3e60:	28c00417 	ldw	r3,16(r5)
    3e64:	21800317 	ldw	r6,12(r4)
    3e68:	28800317 	ldw	r2,12(r5)
    3e6c:	19fff436 	bltu	r3,r7,3e40 <__fpcmp_parts_d+0x54>
    3e70:	38c00526 	beq	r7,r3,3e88 <__fpcmp_parts_d+0x9c>
    3e74:	38c00236 	bltu	r7,r3,3e80 <__fpcmp_parts_d+0x94>
    3e78:	19ffec1e 	bne	r3,r7,3e2c <__fpcmp_parts_d+0x40>
    3e7c:	30bfeb2e 	bgeu	r6,r2,3e2c <__fpcmp_parts_d+0x40>
    3e80:	403fe71e 	bne	r8,zero,3e20 <__fpcmp_parts_d+0x34>
    3e84:	003fef06 	br	3e44 <__fpcmp_parts_d+0x58>
    3e88:	11bffa2e 	bgeu	r2,r6,3e74 <__fpcmp_parts_d+0x88>
    3e8c:	403fe426 	beq	r8,zero,3e20 <__fpcmp_parts_d+0x34>
    3e90:	003fec06 	br	3e44 <__fpcmp_parts_d+0x58>
    3e94:	28800117 	ldw	r2,4(r5)
    3e98:	103fe11e 	bne	r2,zero,3e20 <__fpcmp_parts_d+0x34>
    3e9c:	003fe906 	br	3e44 <__fpcmp_parts_d+0x58>
    3ea0:	11bfdd1e 	bne	r2,r6,3e18 <__fpcmp_parts_d+0x2c>
    3ea4:	28c00117 	ldw	r3,4(r5)
    3ea8:	20800117 	ldw	r2,4(r4)
    3eac:	1885c83a 	sub	r2,r3,r2
    3eb0:	f800283a 	ret

00003eb4 <__errno>:
    3eb4:	00c00074 	movhi	r3,1
    3eb8:	18c64d04 	addi	r3,r3,6452
    3ebc:	18800017 	ldw	r2,0(r3)
    3ec0:	f800283a 	ret

00003ec4 <memcpy>:
    3ec4:	01c003c4 	movi	r7,15
    3ec8:	2007883a 	mov	r3,r4
    3ecc:	3980032e 	bgeu	r7,r6,3edc <memcpy+0x18>
    3ed0:	2904b03a 	or	r2,r5,r4
    3ed4:	108000cc 	andi	r2,r2,3
    3ed8:	10000926 	beq	r2,zero,3f00 <memcpy+0x3c>
    3edc:	30000626 	beq	r6,zero,3ef8 <memcpy+0x34>
    3ee0:	30cd883a 	add	r6,r6,r3
    3ee4:	28800003 	ldbu	r2,0(r5)
    3ee8:	29400044 	addi	r5,r5,1
    3eec:	18800005 	stb	r2,0(r3)
    3ef0:	18c00044 	addi	r3,r3,1
    3ef4:	30fffb1e 	bne	r6,r3,3ee4 <memcpy+0x20>
    3ef8:	2005883a 	mov	r2,r4
    3efc:	f800283a 	ret
    3f00:	3811883a 	mov	r8,r7
    3f04:	200f883a 	mov	r7,r4
    3f08:	28c00017 	ldw	r3,0(r5)
    3f0c:	31bffc04 	addi	r6,r6,-16
    3f10:	38c00015 	stw	r3,0(r7)
    3f14:	28800117 	ldw	r2,4(r5)
    3f18:	38800115 	stw	r2,4(r7)
    3f1c:	28c00217 	ldw	r3,8(r5)
    3f20:	38c00215 	stw	r3,8(r7)
    3f24:	28800317 	ldw	r2,12(r5)
    3f28:	29400404 	addi	r5,r5,16
    3f2c:	38800315 	stw	r2,12(r7)
    3f30:	39c00404 	addi	r7,r7,16
    3f34:	41bff436 	bltu	r8,r6,3f08 <memcpy+0x44>
    3f38:	008000c4 	movi	r2,3
    3f3c:	1180072e 	bgeu	r2,r6,3f5c <memcpy+0x98>
    3f40:	1007883a 	mov	r3,r2
    3f44:	28800017 	ldw	r2,0(r5)
    3f48:	31bfff04 	addi	r6,r6,-4
    3f4c:	29400104 	addi	r5,r5,4
    3f50:	38800015 	stw	r2,0(r7)
    3f54:	39c00104 	addi	r7,r7,4
    3f58:	19bffa36 	bltu	r3,r6,3f44 <memcpy+0x80>
    3f5c:	3807883a 	mov	r3,r7
    3f60:	003fde06 	br	3edc <memcpy+0x18>

00003f64 <printf>:
    3f64:	defffb04 	addi	sp,sp,-20
    3f68:	dfc00115 	stw	ra,4(sp)
    3f6c:	d9400215 	stw	r5,8(sp)
    3f70:	d9800315 	stw	r6,12(sp)
    3f74:	d9c00415 	stw	r7,16(sp)
    3f78:	00800074 	movhi	r2,1
    3f7c:	10864d04 	addi	r2,r2,6452
    3f80:	10c00017 	ldw	r3,0(r2)
    3f84:	200b883a 	mov	r5,r4
    3f88:	d8800204 	addi	r2,sp,8
    3f8c:	19000217 	ldw	r4,8(r3)
    3f90:	100d883a 	mov	r6,r2
    3f94:	d8800015 	stw	r2,0(sp)
    3f98:	0005ee00 	call	5ee0 <__vfprintf_internal>
    3f9c:	dfc00117 	ldw	ra,4(sp)
    3fa0:	dec00504 	addi	sp,sp,20
    3fa4:	f800283a 	ret

00003fa8 <_printf_r>:
    3fa8:	defffc04 	addi	sp,sp,-16
    3fac:	dfc00115 	stw	ra,4(sp)
    3fb0:	d9800215 	stw	r6,8(sp)
    3fb4:	d9c00315 	stw	r7,12(sp)
    3fb8:	280d883a 	mov	r6,r5
    3fbc:	21400217 	ldw	r5,8(r4)
    3fc0:	d8c00204 	addi	r3,sp,8
    3fc4:	180f883a 	mov	r7,r3
    3fc8:	d8c00015 	stw	r3,0(sp)
    3fcc:	00040340 	call	4034 <___vfprintf_internal_r>
    3fd0:	dfc00117 	ldw	ra,4(sp)
    3fd4:	dec00404 	addi	sp,sp,16
    3fd8:	f800283a 	ret

00003fdc <__sprint_r>:
    3fdc:	30800217 	ldw	r2,8(r6)
    3fe0:	defffe04 	addi	sp,sp,-8
    3fe4:	dc000015 	stw	r16,0(sp)
    3fe8:	dfc00115 	stw	ra,4(sp)
    3fec:	3021883a 	mov	r16,r6
    3ff0:	0007883a 	mov	r3,zero
    3ff4:	1000061e 	bne	r2,zero,4010 <__sprint_r+0x34>
    3ff8:	1805883a 	mov	r2,r3
    3ffc:	30000115 	stw	zero,4(r6)
    4000:	dfc00117 	ldw	ra,4(sp)
    4004:	dc000017 	ldw	r16,0(sp)
    4008:	dec00204 	addi	sp,sp,8
    400c:	f800283a 	ret
    4010:	000813c0 	call	813c <__sfvwrite_r>
    4014:	1007883a 	mov	r3,r2
    4018:	1805883a 	mov	r2,r3
    401c:	80000115 	stw	zero,4(r16)
    4020:	80000215 	stw	zero,8(r16)
    4024:	dfc00117 	ldw	ra,4(sp)
    4028:	dc000017 	ldw	r16,0(sp)
    402c:	dec00204 	addi	sp,sp,8
    4030:	f800283a 	ret

00004034 <___vfprintf_internal_r>:
    4034:	defea404 	addi	sp,sp,-1392
    4038:	dd815815 	stw	r22,1376(sp)
    403c:	dc015215 	stw	r16,1352(sp)
    4040:	d9c15115 	stw	r7,1348(sp)
    4044:	dfc15b15 	stw	ra,1388(sp)
    4048:	df015a15 	stw	fp,1384(sp)
    404c:	ddc15915 	stw	r23,1380(sp)
    4050:	dd415715 	stw	r21,1372(sp)
    4054:	dd015615 	stw	r20,1368(sp)
    4058:	dcc15515 	stw	r19,1364(sp)
    405c:	dc815415 	stw	r18,1360(sp)
    4060:	dc415315 	stw	r17,1356(sp)
    4064:	282d883a 	mov	r22,r5
    4068:	3021883a 	mov	r16,r6
    406c:	d9014f15 	stw	r4,1340(sp)
    4070:	00087600 	call	8760 <_localeconv_r>
    4074:	10800017 	ldw	r2,0(r2)
    4078:	d9c15117 	ldw	r7,1348(sp)
    407c:	d8814915 	stw	r2,1316(sp)
    4080:	d8814f17 	ldw	r2,1340(sp)
    4084:	10000226 	beq	r2,zero,4090 <___vfprintf_internal_r+0x5c>
    4088:	10800e17 	ldw	r2,56(r2)
    408c:	10020d26 	beq	r2,zero,48c4 <___vfprintf_internal_r+0x890>
    4090:	b080030b 	ldhu	r2,12(r22)
    4094:	1080020c 	andi	r2,r2,8
    4098:	10020e26 	beq	r2,zero,48d4 <___vfprintf_internal_r+0x8a0>
    409c:	b0800417 	ldw	r2,16(r22)
    40a0:	10020c26 	beq	r2,zero,48d4 <___vfprintf_internal_r+0x8a0>
    40a4:	b200030b 	ldhu	r8,12(r22)
    40a8:	00800284 	movi	r2,10
    40ac:	40c0068c 	andi	r3,r8,26
    40b0:	18802f1e 	bne	r3,r2,4170 <___vfprintf_internal_r+0x13c>
    40b4:	b080038f 	ldh	r2,14(r22)
    40b8:	10002d16 	blt	r2,zero,4170 <___vfprintf_internal_r+0x13c>
    40bc:	b240038b 	ldhu	r9,14(r22)
    40c0:	b2800717 	ldw	r10,28(r22)
    40c4:	b2c00917 	ldw	r11,36(r22)
    40c8:	d9014f17 	ldw	r4,1340(sp)
    40cc:	dc402904 	addi	r17,sp,164
    40d0:	d8804004 	addi	r2,sp,256
    40d4:	00c10004 	movi	r3,1024
    40d8:	423fff4c 	andi	r8,r8,65533
    40dc:	800d883a 	mov	r6,r16
    40e0:	880b883a 	mov	r5,r17
    40e4:	da002c0d 	sth	r8,176(sp)
    40e8:	da402c8d 	sth	r9,178(sp)
    40ec:	da803015 	stw	r10,192(sp)
    40f0:	dac03215 	stw	r11,200(sp)
    40f4:	d8802d15 	stw	r2,180(sp)
    40f8:	d8c02e15 	stw	r3,184(sp)
    40fc:	d8802915 	stw	r2,164(sp)
    4100:	d8c02b15 	stw	r3,172(sp)
    4104:	d8002f15 	stw	zero,188(sp)
    4108:	00040340 	call	4034 <___vfprintf_internal_r>
    410c:	d8814b15 	stw	r2,1324(sp)
    4110:	10000416 	blt	r2,zero,4124 <___vfprintf_internal_r+0xf0>
    4114:	d9014f17 	ldw	r4,1340(sp)
    4118:	880b883a 	mov	r5,r17
    411c:	000780c0 	call	780c <_fflush_r>
    4120:	1002321e 	bne	r2,zero,49ec <___vfprintf_internal_r+0x9b8>
    4124:	d8802c0b 	ldhu	r2,176(sp)
    4128:	1080100c 	andi	r2,r2,64
    412c:	10000326 	beq	r2,zero,413c <___vfprintf_internal_r+0x108>
    4130:	b080030b 	ldhu	r2,12(r22)
    4134:	10801014 	ori	r2,r2,64
    4138:	b080030d 	sth	r2,12(r22)
    413c:	d8814b17 	ldw	r2,1324(sp)
    4140:	dfc15b17 	ldw	ra,1388(sp)
    4144:	df015a17 	ldw	fp,1384(sp)
    4148:	ddc15917 	ldw	r23,1380(sp)
    414c:	dd815817 	ldw	r22,1376(sp)
    4150:	dd415717 	ldw	r21,1372(sp)
    4154:	dd015617 	ldw	r20,1368(sp)
    4158:	dcc15517 	ldw	r19,1364(sp)
    415c:	dc815417 	ldw	r18,1360(sp)
    4160:	dc415317 	ldw	r17,1356(sp)
    4164:	dc015217 	ldw	r16,1352(sp)
    4168:	dec15c04 	addi	sp,sp,1392
    416c:	f800283a 	ret
    4170:	0005883a 	mov	r2,zero
    4174:	0007883a 	mov	r3,zero
    4178:	dd401904 	addi	r21,sp,100
    417c:	d8814215 	stw	r2,1288(sp)
    4180:	802f883a 	mov	r23,r16
    4184:	d8c14315 	stw	r3,1292(sp)
    4188:	d8014b15 	stw	zero,1324(sp)
    418c:	d8014815 	stw	zero,1312(sp)
    4190:	d8014415 	stw	zero,1296(sp)
    4194:	d8014715 	stw	zero,1308(sp)
    4198:	dd400c15 	stw	r21,48(sp)
    419c:	d8000e15 	stw	zero,56(sp)
    41a0:	d8000d15 	stw	zero,52(sp)
    41a4:	b8800007 	ldb	r2,0(r23)
    41a8:	10001926 	beq	r2,zero,4210 <___vfprintf_internal_r+0x1dc>
    41ac:	00c00944 	movi	r3,37
    41b0:	10c01726 	beq	r2,r3,4210 <___vfprintf_internal_r+0x1dc>
    41b4:	b821883a 	mov	r16,r23
    41b8:	00000106 	br	41c0 <___vfprintf_internal_r+0x18c>
    41bc:	10c00326 	beq	r2,r3,41cc <___vfprintf_internal_r+0x198>
    41c0:	84000044 	addi	r16,r16,1
    41c4:	80800007 	ldb	r2,0(r16)
    41c8:	103ffc1e 	bne	r2,zero,41bc <___vfprintf_internal_r+0x188>
    41cc:	85e7c83a 	sub	r19,r16,r23
    41d0:	98000e26 	beq	r19,zero,420c <___vfprintf_internal_r+0x1d8>
    41d4:	dc800e17 	ldw	r18,56(sp)
    41d8:	dc400d17 	ldw	r17,52(sp)
    41dc:	008001c4 	movi	r2,7
    41e0:	94e5883a 	add	r18,r18,r19
    41e4:	8c400044 	addi	r17,r17,1
    41e8:	adc00015 	stw	r23,0(r21)
    41ec:	dc800e15 	stw	r18,56(sp)
    41f0:	acc00115 	stw	r19,4(r21)
    41f4:	dc400d15 	stw	r17,52(sp)
    41f8:	14428b16 	blt	r2,r17,4c28 <___vfprintf_internal_r+0xbf4>
    41fc:	ad400204 	addi	r21,r21,8
    4200:	d9014b17 	ldw	r4,1324(sp)
    4204:	24c9883a 	add	r4,r4,r19
    4208:	d9014b15 	stw	r4,1324(sp)
    420c:	802f883a 	mov	r23,r16
    4210:	b8800007 	ldb	r2,0(r23)
    4214:	10013c26 	beq	r2,zero,4708 <___vfprintf_internal_r+0x6d4>
    4218:	bdc00044 	addi	r23,r23,1
    421c:	d8000405 	stb	zero,16(sp)
    4220:	b8c00007 	ldb	r3,0(r23)
    4224:	04ffffc4 	movi	r19,-1
    4228:	d8014c15 	stw	zero,1328(sp)
    422c:	d8014a15 	stw	zero,1320(sp)
    4230:	d8c14d15 	stw	r3,1332(sp)
    4234:	bdc00044 	addi	r23,r23,1
    4238:	d9414d17 	ldw	r5,1332(sp)
    423c:	00801604 	movi	r2,88
    4240:	28fff804 	addi	r3,r5,-32
    4244:	10c06036 	bltu	r2,r3,43c8 <___vfprintf_internal_r+0x394>
    4248:	18c5883a 	add	r2,r3,r3
    424c:	1085883a 	add	r2,r2,r2
    4250:	00c00034 	movhi	r3,0
    4254:	18d09904 	addi	r3,r3,16996
    4258:	10c5883a 	add	r2,r2,r3
    425c:	11000017 	ldw	r4,0(r2)
    4260:	2000683a 	jmp	r4
    4264:	000051d8 	cmpnei	zero,zero,327
    4268:	000043c8 	cmpgei	zero,zero,271
    426c:	000043c8 	cmpgei	zero,zero,271
    4270:	000051c4 	movi	zero,327
    4274:	000043c8 	cmpgei	zero,zero,271
    4278:	000043c8 	cmpgei	zero,zero,271
    427c:	000043c8 	cmpgei	zero,zero,271
    4280:	000043c8 	cmpgei	zero,zero,271
    4284:	000043c8 	cmpgei	zero,zero,271
    4288:	000043c8 	cmpgei	zero,zero,271
    428c:	00004fa4 	muli	zero,zero,318
    4290:	000051b4 	movhi	zero,326
    4294:	000043c8 	cmpgei	zero,zero,271
    4298:	00004fbc 	xorhi	zero,zero,318
    429c:	00005250 	cmplti	zero,zero,329
    42a0:	000043c8 	cmpgei	zero,zero,271
    42a4:	0000523c 	xorhi	zero,zero,328
    42a8:	00005204 	movi	zero,328
    42ac:	00005204 	movi	zero,328
    42b0:	00005204 	movi	zero,328
    42b4:	00005204 	movi	zero,328
    42b8:	00005204 	movi	zero,328
    42bc:	00005204 	movi	zero,328
    42c0:	00005204 	movi	zero,328
    42c4:	00005204 	movi	zero,328
    42c8:	00005204 	movi	zero,328
    42cc:	000043c8 	cmpgei	zero,zero,271
    42d0:	000043c8 	cmpgei	zero,zero,271
    42d4:	000043c8 	cmpgei	zero,zero,271
    42d8:	000043c8 	cmpgei	zero,zero,271
    42dc:	000043c8 	cmpgei	zero,zero,271
    42e0:	000043c8 	cmpgei	zero,zero,271
    42e4:	000043c8 	cmpgei	zero,zero,271
    42e8:	000043c8 	cmpgei	zero,zero,271
    42ec:	000043c8 	cmpgei	zero,zero,271
    42f0:	000043c8 	cmpgei	zero,zero,271
    42f4:	00004a20 	cmpeqi	zero,zero,296
    42f8:	0000508c 	andi	zero,zero,322
    42fc:	000043c8 	cmpgei	zero,zero,271
    4300:	0000508c 	andi	zero,zero,322
    4304:	000043c8 	cmpgei	zero,zero,271
    4308:	000043c8 	cmpgei	zero,zero,271
    430c:	000043c8 	cmpgei	zero,zero,271
    4310:	000043c8 	cmpgei	zero,zero,271
    4314:	000051f0 	cmpltui	zero,zero,327
    4318:	000043c8 	cmpgei	zero,zero,271
    431c:	000043c8 	cmpgei	zero,zero,271
    4320:	00004ad4 	movui	zero,299
    4324:	000043c8 	cmpgei	zero,zero,271
    4328:	000043c8 	cmpgei	zero,zero,271
    432c:	000043c8 	cmpgei	zero,zero,271
    4330:	000043c8 	cmpgei	zero,zero,271
    4334:	000043c8 	cmpgei	zero,zero,271
    4338:	00004b20 	cmpeqi	zero,zero,300
    433c:	000043c8 	cmpgei	zero,zero,271
    4340:	000043c8 	cmpgei	zero,zero,271
    4344:	00005140 	call	514 <play_note+0x188>
    4348:	000043c8 	cmpgei	zero,zero,271
    434c:	000043c8 	cmpgei	zero,zero,271
    4350:	000043c8 	cmpgei	zero,zero,271
    4354:	000043c8 	cmpgei	zero,zero,271
    4358:	000043c8 	cmpgei	zero,zero,271
    435c:	000043c8 	cmpgei	zero,zero,271
    4360:	000043c8 	cmpgei	zero,zero,271
    4364:	000043c8 	cmpgei	zero,zero,271
    4368:	000043c8 	cmpgei	zero,zero,271
    436c:	000043c8 	cmpgei	zero,zero,271
    4370:	00005114 	movui	zero,324
    4374:	00004a2c 	andhi	zero,zero,296
    4378:	0000508c 	andi	zero,zero,322
    437c:	0000508c 	andi	zero,zero,322
    4380:	0000508c 	andi	zero,zero,322
    4384:	00005078 	rdprs	zero,zero,321
    4388:	00004a2c 	andhi	zero,zero,296
    438c:	000043c8 	cmpgei	zero,zero,271
    4390:	000043c8 	cmpgei	zero,zero,271
    4394:	00005000 	call	500 <play_note+0x174>
    4398:	000043c8 	cmpgei	zero,zero,271
    439c:	00004fd0 	cmplti	zero,zero,319
    43a0:	00004ae0 	cmpeqi	zero,zero,299
    43a4:	00005030 	cmpltui	zero,zero,320
    43a8:	0000501c 	xori	zero,zero,320
    43ac:	000043c8 	cmpgei	zero,zero,271
    43b0:	000052ac 	andhi	zero,zero,330
    43b4:	000043c8 	cmpgei	zero,zero,271
    43b8:	00004b2c 	andhi	zero,zero,300
    43bc:	000043c8 	cmpgei	zero,zero,271
    43c0:	000043c8 	cmpgei	zero,zero,271
    43c4:	000051a4 	muli	zero,zero,326
    43c8:	d9014d17 	ldw	r4,1332(sp)
    43cc:	2000ce26 	beq	r4,zero,4708 <___vfprintf_internal_r+0x6d4>
    43d0:	01400044 	movi	r5,1
    43d4:	d9800f04 	addi	r6,sp,60
    43d8:	d9c14015 	stw	r7,1280(sp)
    43dc:	d9414515 	stw	r5,1300(sp)
    43e0:	d9814115 	stw	r6,1284(sp)
    43e4:	280f883a 	mov	r7,r5
    43e8:	d9000f05 	stb	r4,60(sp)
    43ec:	d8000405 	stb	zero,16(sp)
    43f0:	d8014615 	stw	zero,1304(sp)
    43f4:	d8c14c17 	ldw	r3,1328(sp)
    43f8:	1880008c 	andi	r2,r3,2
    43fc:	1005003a 	cmpeq	r2,r2,zero
    4400:	d8815015 	stw	r2,1344(sp)
    4404:	1000031e 	bne	r2,zero,4414 <___vfprintf_internal_r+0x3e0>
    4408:	d9014517 	ldw	r4,1300(sp)
    440c:	21000084 	addi	r4,r4,2
    4410:	d9014515 	stw	r4,1300(sp)
    4414:	d9414c17 	ldw	r5,1328(sp)
    4418:	2940210c 	andi	r5,r5,132
    441c:	d9414e15 	stw	r5,1336(sp)
    4420:	28002d1e 	bne	r5,zero,44d8 <___vfprintf_internal_r+0x4a4>
    4424:	d9814a17 	ldw	r6,1320(sp)
    4428:	d8814517 	ldw	r2,1300(sp)
    442c:	30a1c83a 	sub	r16,r6,r2
    4430:	0400290e 	bge	zero,r16,44d8 <___vfprintf_internal_r+0x4a4>
    4434:	00800404 	movi	r2,16
    4438:	1404580e 	bge	r2,r16,559c <___vfprintf_internal_r+0x1568>
    443c:	dc800e17 	ldw	r18,56(sp)
    4440:	dc400d17 	ldw	r17,52(sp)
    4444:	1027883a 	mov	r19,r2
    4448:	07000074 	movhi	fp,1
    444c:	e73e6a84 	addi	fp,fp,-1622
    4450:	050001c4 	movi	r20,7
    4454:	00000306 	br	4464 <___vfprintf_internal_r+0x430>
    4458:	843ffc04 	addi	r16,r16,-16
    445c:	ad400204 	addi	r21,r21,8
    4460:	9c00130e 	bge	r19,r16,44b0 <___vfprintf_internal_r+0x47c>
    4464:	94800404 	addi	r18,r18,16
    4468:	8c400044 	addi	r17,r17,1
    446c:	af000015 	stw	fp,0(r21)
    4470:	acc00115 	stw	r19,4(r21)
    4474:	dc800e15 	stw	r18,56(sp)
    4478:	dc400d15 	stw	r17,52(sp)
    447c:	a47ff60e 	bge	r20,r17,4458 <___vfprintf_internal_r+0x424>
    4480:	d9014f17 	ldw	r4,1340(sp)
    4484:	b00b883a 	mov	r5,r22
    4488:	d9800c04 	addi	r6,sp,48
    448c:	d9c15115 	stw	r7,1348(sp)
    4490:	0003fdc0 	call	3fdc <__sprint_r>
    4494:	d9c15117 	ldw	r7,1348(sp)
    4498:	10009e1e 	bne	r2,zero,4714 <___vfprintf_internal_r+0x6e0>
    449c:	843ffc04 	addi	r16,r16,-16
    44a0:	dc800e17 	ldw	r18,56(sp)
    44a4:	dc400d17 	ldw	r17,52(sp)
    44a8:	dd401904 	addi	r21,sp,100
    44ac:	9c3fed16 	blt	r19,r16,4464 <___vfprintf_internal_r+0x430>
    44b0:	9425883a 	add	r18,r18,r16
    44b4:	8c400044 	addi	r17,r17,1
    44b8:	008001c4 	movi	r2,7
    44bc:	af000015 	stw	fp,0(r21)
    44c0:	ac000115 	stw	r16,4(r21)
    44c4:	dc800e15 	stw	r18,56(sp)
    44c8:	dc400d15 	stw	r17,52(sp)
    44cc:	1441f516 	blt	r2,r17,4ca4 <___vfprintf_internal_r+0xc70>
    44d0:	ad400204 	addi	r21,r21,8
    44d4:	00000206 	br	44e0 <___vfprintf_internal_r+0x4ac>
    44d8:	dc800e17 	ldw	r18,56(sp)
    44dc:	dc400d17 	ldw	r17,52(sp)
    44e0:	d8800407 	ldb	r2,16(sp)
    44e4:	10000b26 	beq	r2,zero,4514 <___vfprintf_internal_r+0x4e0>
    44e8:	00800044 	movi	r2,1
    44ec:	94800044 	addi	r18,r18,1
    44f0:	8c400044 	addi	r17,r17,1
    44f4:	a8800115 	stw	r2,4(r21)
    44f8:	d8c00404 	addi	r3,sp,16
    44fc:	008001c4 	movi	r2,7
    4500:	a8c00015 	stw	r3,0(r21)
    4504:	dc800e15 	stw	r18,56(sp)
    4508:	dc400d15 	stw	r17,52(sp)
    450c:	1441da16 	blt	r2,r17,4c78 <___vfprintf_internal_r+0xc44>
    4510:	ad400204 	addi	r21,r21,8
    4514:	d9015017 	ldw	r4,1344(sp)
    4518:	20000b1e 	bne	r4,zero,4548 <___vfprintf_internal_r+0x514>
    451c:	d8800444 	addi	r2,sp,17
    4520:	94800084 	addi	r18,r18,2
    4524:	8c400044 	addi	r17,r17,1
    4528:	a8800015 	stw	r2,0(r21)
    452c:	00c00084 	movi	r3,2
    4530:	008001c4 	movi	r2,7
    4534:	a8c00115 	stw	r3,4(r21)
    4538:	dc800e15 	stw	r18,56(sp)
    453c:	dc400d15 	stw	r17,52(sp)
    4540:	1441c216 	blt	r2,r17,4c4c <___vfprintf_internal_r+0xc18>
    4544:	ad400204 	addi	r21,r21,8
    4548:	d9414e17 	ldw	r5,1336(sp)
    454c:	00802004 	movi	r2,128
    4550:	2880b126 	beq	r5,r2,4818 <___vfprintf_internal_r+0x7e4>
    4554:	d8c14617 	ldw	r3,1304(sp)
    4558:	19e1c83a 	sub	r16,r3,r7
    455c:	0400260e 	bge	zero,r16,45f8 <___vfprintf_internal_r+0x5c4>
    4560:	00800404 	movi	r2,16
    4564:	1403c90e 	bge	r2,r16,548c <___vfprintf_internal_r+0x1458>
    4568:	1027883a 	mov	r19,r2
    456c:	07000074 	movhi	fp,1
    4570:	e73e6684 	addi	fp,fp,-1638
    4574:	050001c4 	movi	r20,7
    4578:	00000306 	br	4588 <___vfprintf_internal_r+0x554>
    457c:	843ffc04 	addi	r16,r16,-16
    4580:	ad400204 	addi	r21,r21,8
    4584:	9c00130e 	bge	r19,r16,45d4 <___vfprintf_internal_r+0x5a0>
    4588:	94800404 	addi	r18,r18,16
    458c:	8c400044 	addi	r17,r17,1
    4590:	af000015 	stw	fp,0(r21)
    4594:	acc00115 	stw	r19,4(r21)
    4598:	dc800e15 	stw	r18,56(sp)
    459c:	dc400d15 	stw	r17,52(sp)
    45a0:	a47ff60e 	bge	r20,r17,457c <___vfprintf_internal_r+0x548>
    45a4:	d9014f17 	ldw	r4,1340(sp)
    45a8:	b00b883a 	mov	r5,r22
    45ac:	d9800c04 	addi	r6,sp,48
    45b0:	d9c15115 	stw	r7,1348(sp)
    45b4:	0003fdc0 	call	3fdc <__sprint_r>
    45b8:	d9c15117 	ldw	r7,1348(sp)
    45bc:	1000551e 	bne	r2,zero,4714 <___vfprintf_internal_r+0x6e0>
    45c0:	843ffc04 	addi	r16,r16,-16
    45c4:	dc800e17 	ldw	r18,56(sp)
    45c8:	dc400d17 	ldw	r17,52(sp)
    45cc:	dd401904 	addi	r21,sp,100
    45d0:	9c3fed16 	blt	r19,r16,4588 <___vfprintf_internal_r+0x554>
    45d4:	9425883a 	add	r18,r18,r16
    45d8:	8c400044 	addi	r17,r17,1
    45dc:	008001c4 	movi	r2,7
    45e0:	af000015 	stw	fp,0(r21)
    45e4:	ac000115 	stw	r16,4(r21)
    45e8:	dc800e15 	stw	r18,56(sp)
    45ec:	dc400d15 	stw	r17,52(sp)
    45f0:	14418216 	blt	r2,r17,4bfc <___vfprintf_internal_r+0xbc8>
    45f4:	ad400204 	addi	r21,r21,8
    45f8:	d9014c17 	ldw	r4,1328(sp)
    45fc:	2080400c 	andi	r2,r4,256
    4600:	10004a1e 	bne	r2,zero,472c <___vfprintf_internal_r+0x6f8>
    4604:	d9414117 	ldw	r5,1284(sp)
    4608:	91e5883a 	add	r18,r18,r7
    460c:	8c400044 	addi	r17,r17,1
    4610:	008001c4 	movi	r2,7
    4614:	a9400015 	stw	r5,0(r21)
    4618:	a9c00115 	stw	r7,4(r21)
    461c:	dc800e15 	stw	r18,56(sp)
    4620:	dc400d15 	stw	r17,52(sp)
    4624:	14416716 	blt	r2,r17,4bc4 <___vfprintf_internal_r+0xb90>
    4628:	a8c00204 	addi	r3,r21,8
    462c:	d9814c17 	ldw	r6,1328(sp)
    4630:	3080010c 	andi	r2,r6,4
    4634:	10002826 	beq	r2,zero,46d8 <___vfprintf_internal_r+0x6a4>
    4638:	d8814a17 	ldw	r2,1320(sp)
    463c:	d9014517 	ldw	r4,1300(sp)
    4640:	1121c83a 	sub	r16,r2,r4
    4644:	0400240e 	bge	zero,r16,46d8 <___vfprintf_internal_r+0x6a4>
    4648:	00800404 	movi	r2,16
    464c:	14044f0e 	bge	r2,r16,578c <___vfprintf_internal_r+0x1758>
    4650:	dc400d17 	ldw	r17,52(sp)
    4654:	1027883a 	mov	r19,r2
    4658:	07000074 	movhi	fp,1
    465c:	e73e6a84 	addi	fp,fp,-1622
    4660:	050001c4 	movi	r20,7
    4664:	00000306 	br	4674 <___vfprintf_internal_r+0x640>
    4668:	843ffc04 	addi	r16,r16,-16
    466c:	18c00204 	addi	r3,r3,8
    4670:	9c00110e 	bge	r19,r16,46b8 <___vfprintf_internal_r+0x684>
    4674:	94800404 	addi	r18,r18,16
    4678:	8c400044 	addi	r17,r17,1
    467c:	1f000015 	stw	fp,0(r3)
    4680:	1cc00115 	stw	r19,4(r3)
    4684:	dc800e15 	stw	r18,56(sp)
    4688:	dc400d15 	stw	r17,52(sp)
    468c:	a47ff60e 	bge	r20,r17,4668 <___vfprintf_internal_r+0x634>
    4690:	d9014f17 	ldw	r4,1340(sp)
    4694:	b00b883a 	mov	r5,r22
    4698:	d9800c04 	addi	r6,sp,48
    469c:	0003fdc0 	call	3fdc <__sprint_r>
    46a0:	10001c1e 	bne	r2,zero,4714 <___vfprintf_internal_r+0x6e0>
    46a4:	843ffc04 	addi	r16,r16,-16
    46a8:	dc800e17 	ldw	r18,56(sp)
    46ac:	dc400d17 	ldw	r17,52(sp)
    46b0:	d8c01904 	addi	r3,sp,100
    46b4:	9c3fef16 	blt	r19,r16,4674 <___vfprintf_internal_r+0x640>
    46b8:	9425883a 	add	r18,r18,r16
    46bc:	8c400044 	addi	r17,r17,1
    46c0:	008001c4 	movi	r2,7
    46c4:	1f000015 	stw	fp,0(r3)
    46c8:	1c000115 	stw	r16,4(r3)
    46cc:	dc800e15 	stw	r18,56(sp)
    46d0:	dc400d15 	stw	r17,52(sp)
    46d4:	1440cb16 	blt	r2,r17,4a04 <___vfprintf_internal_r+0x9d0>
    46d8:	d8814a17 	ldw	r2,1320(sp)
    46dc:	d9414517 	ldw	r5,1300(sp)
    46e0:	1140010e 	bge	r2,r5,46e8 <___vfprintf_internal_r+0x6b4>
    46e4:	2805883a 	mov	r2,r5
    46e8:	d9814b17 	ldw	r6,1324(sp)
    46ec:	308d883a 	add	r6,r6,r2
    46f0:	d9814b15 	stw	r6,1324(sp)
    46f4:	90013b1e 	bne	r18,zero,4be4 <___vfprintf_internal_r+0xbb0>
    46f8:	d9c14017 	ldw	r7,1280(sp)
    46fc:	dd401904 	addi	r21,sp,100
    4700:	d8000d15 	stw	zero,52(sp)
    4704:	003ea706 	br	41a4 <___vfprintf_internal_r+0x170>
    4708:	d8800e17 	ldw	r2,56(sp)
    470c:	10053f1e 	bne	r2,zero,5c0c <___vfprintf_internal_r+0x1bd8>
    4710:	d8000d15 	stw	zero,52(sp)
    4714:	b080030b 	ldhu	r2,12(r22)
    4718:	1080100c 	andi	r2,r2,64
    471c:	103e8726 	beq	r2,zero,413c <___vfprintf_internal_r+0x108>
    4720:	00bfffc4 	movi	r2,-1
    4724:	d8814b15 	stw	r2,1324(sp)
    4728:	003e8406 	br	413c <___vfprintf_internal_r+0x108>
    472c:	d9814d17 	ldw	r6,1332(sp)
    4730:	00801944 	movi	r2,101
    4734:	11806e16 	blt	r2,r6,48f0 <___vfprintf_internal_r+0x8bc>
    4738:	d9414717 	ldw	r5,1308(sp)
    473c:	00c00044 	movi	r3,1
    4740:	1943430e 	bge	r3,r5,5450 <___vfprintf_internal_r+0x141c>
    4744:	d8814117 	ldw	r2,1284(sp)
    4748:	94800044 	addi	r18,r18,1
    474c:	8c400044 	addi	r17,r17,1
    4750:	a8800015 	stw	r2,0(r21)
    4754:	008001c4 	movi	r2,7
    4758:	a8c00115 	stw	r3,4(r21)
    475c:	dc800e15 	stw	r18,56(sp)
    4760:	dc400d15 	stw	r17,52(sp)
    4764:	1441ca16 	blt	r2,r17,4e90 <___vfprintf_internal_r+0xe5c>
    4768:	a8c00204 	addi	r3,r21,8
    476c:	d9014917 	ldw	r4,1316(sp)
    4770:	00800044 	movi	r2,1
    4774:	94800044 	addi	r18,r18,1
    4778:	8c400044 	addi	r17,r17,1
    477c:	18800115 	stw	r2,4(r3)
    4780:	008001c4 	movi	r2,7
    4784:	19000015 	stw	r4,0(r3)
    4788:	dc800e15 	stw	r18,56(sp)
    478c:	dc400d15 	stw	r17,52(sp)
    4790:	1441b616 	blt	r2,r17,4e6c <___vfprintf_internal_r+0xe38>
    4794:	1cc00204 	addi	r19,r3,8
    4798:	d9014217 	ldw	r4,1288(sp)
    479c:	d9414317 	ldw	r5,1292(sp)
    47a0:	000d883a 	mov	r6,zero
    47a4:	000f883a 	mov	r7,zero
    47a8:	00034980 	call	3498 <__nedf2>
    47ac:	10017426 	beq	r2,zero,4d80 <___vfprintf_internal_r+0xd4c>
    47b0:	d9414717 	ldw	r5,1308(sp)
    47b4:	d9814117 	ldw	r6,1284(sp)
    47b8:	8c400044 	addi	r17,r17,1
    47bc:	2c85883a 	add	r2,r5,r18
    47c0:	14bfffc4 	addi	r18,r2,-1
    47c4:	28bfffc4 	addi	r2,r5,-1
    47c8:	30c00044 	addi	r3,r6,1
    47cc:	98800115 	stw	r2,4(r19)
    47d0:	008001c4 	movi	r2,7
    47d4:	98c00015 	stw	r3,0(r19)
    47d8:	dc800e15 	stw	r18,56(sp)
    47dc:	dc400d15 	stw	r17,52(sp)
    47e0:	14418e16 	blt	r2,r17,4e1c <___vfprintf_internal_r+0xde8>
    47e4:	9cc00204 	addi	r19,r19,8
    47e8:	d9414817 	ldw	r5,1312(sp)
    47ec:	d8800804 	addi	r2,sp,32
    47f0:	8c400044 	addi	r17,r17,1
    47f4:	9165883a 	add	r18,r18,r5
    47f8:	98800015 	stw	r2,0(r19)
    47fc:	008001c4 	movi	r2,7
    4800:	99400115 	stw	r5,4(r19)
    4804:	dc800e15 	stw	r18,56(sp)
    4808:	dc400d15 	stw	r17,52(sp)
    480c:	1440ed16 	blt	r2,r17,4bc4 <___vfprintf_internal_r+0xb90>
    4810:	98c00204 	addi	r3,r19,8
    4814:	003f8506 	br	462c <___vfprintf_internal_r+0x5f8>
    4818:	d9814a17 	ldw	r6,1320(sp)
    481c:	d8814517 	ldw	r2,1300(sp)
    4820:	30a1c83a 	sub	r16,r6,r2
    4824:	043f4b0e 	bge	zero,r16,4554 <___vfprintf_internal_r+0x520>
    4828:	00800404 	movi	r2,16
    482c:	1404340e 	bge	r2,r16,5900 <___vfprintf_internal_r+0x18cc>
    4830:	1027883a 	mov	r19,r2
    4834:	07000074 	movhi	fp,1
    4838:	e73e6684 	addi	fp,fp,-1638
    483c:	050001c4 	movi	r20,7
    4840:	00000306 	br	4850 <___vfprintf_internal_r+0x81c>
    4844:	843ffc04 	addi	r16,r16,-16
    4848:	ad400204 	addi	r21,r21,8
    484c:	9c00130e 	bge	r19,r16,489c <___vfprintf_internal_r+0x868>
    4850:	94800404 	addi	r18,r18,16
    4854:	8c400044 	addi	r17,r17,1
    4858:	af000015 	stw	fp,0(r21)
    485c:	acc00115 	stw	r19,4(r21)
    4860:	dc800e15 	stw	r18,56(sp)
    4864:	dc400d15 	stw	r17,52(sp)
    4868:	a47ff60e 	bge	r20,r17,4844 <___vfprintf_internal_r+0x810>
    486c:	d9014f17 	ldw	r4,1340(sp)
    4870:	b00b883a 	mov	r5,r22
    4874:	d9800c04 	addi	r6,sp,48
    4878:	d9c15115 	stw	r7,1348(sp)
    487c:	0003fdc0 	call	3fdc <__sprint_r>
    4880:	d9c15117 	ldw	r7,1348(sp)
    4884:	103fa31e 	bne	r2,zero,4714 <___vfprintf_internal_r+0x6e0>
    4888:	843ffc04 	addi	r16,r16,-16
    488c:	dc800e17 	ldw	r18,56(sp)
    4890:	dc400d17 	ldw	r17,52(sp)
    4894:	dd401904 	addi	r21,sp,100
    4898:	9c3fed16 	blt	r19,r16,4850 <___vfprintf_internal_r+0x81c>
    489c:	9425883a 	add	r18,r18,r16
    48a0:	8c400044 	addi	r17,r17,1
    48a4:	008001c4 	movi	r2,7
    48a8:	af000015 	stw	fp,0(r21)
    48ac:	ac000115 	stw	r16,4(r21)
    48b0:	dc800e15 	stw	r18,56(sp)
    48b4:	dc400d15 	stw	r17,52(sp)
    48b8:	14416116 	blt	r2,r17,4e40 <___vfprintf_internal_r+0xe0c>
    48bc:	ad400204 	addi	r21,r21,8
    48c0:	003f2406 	br	4554 <___vfprintf_internal_r+0x520>
    48c4:	d9014f17 	ldw	r4,1340(sp)
    48c8:	0007aa40 	call	7aa4 <__sinit>
    48cc:	d9c15117 	ldw	r7,1348(sp)
    48d0:	003def06 	br	4090 <___vfprintf_internal_r+0x5c>
    48d4:	d9014f17 	ldw	r4,1340(sp)
    48d8:	b00b883a 	mov	r5,r22
    48dc:	d9c15115 	stw	r7,1348(sp)
    48e0:	0005f040 	call	5f04 <__swsetup_r>
    48e4:	d9c15117 	ldw	r7,1348(sp)
    48e8:	103dee26 	beq	r2,zero,40a4 <___vfprintf_internal_r+0x70>
    48ec:	003f8c06 	br	4720 <___vfprintf_internal_r+0x6ec>
    48f0:	d9014217 	ldw	r4,1288(sp)
    48f4:	d9414317 	ldw	r5,1292(sp)
    48f8:	000d883a 	mov	r6,zero
    48fc:	000f883a 	mov	r7,zero
    4900:	00034100 	call	3410 <__eqdf2>
    4904:	1000f21e 	bne	r2,zero,4cd0 <___vfprintf_internal_r+0xc9c>
    4908:	00800074 	movhi	r2,1
    490c:	10be6604 	addi	r2,r2,-1640
    4910:	94800044 	addi	r18,r18,1
    4914:	8c400044 	addi	r17,r17,1
    4918:	a8800015 	stw	r2,0(r21)
    491c:	00c00044 	movi	r3,1
    4920:	008001c4 	movi	r2,7
    4924:	a8c00115 	stw	r3,4(r21)
    4928:	dc800e15 	stw	r18,56(sp)
    492c:	dc400d15 	stw	r17,52(sp)
    4930:	1442fa16 	blt	r2,r17,551c <___vfprintf_internal_r+0x14e8>
    4934:	a8c00204 	addi	r3,r21,8
    4938:	d8800517 	ldw	r2,20(sp)
    493c:	d9014717 	ldw	r4,1308(sp)
    4940:	11015c0e 	bge	r2,r4,4eb4 <___vfprintf_internal_r+0xe80>
    4944:	dc400d17 	ldw	r17,52(sp)
    4948:	d9814917 	ldw	r6,1316(sp)
    494c:	00800044 	movi	r2,1
    4950:	94800044 	addi	r18,r18,1
    4954:	8c400044 	addi	r17,r17,1
    4958:	18800115 	stw	r2,4(r3)
    495c:	008001c4 	movi	r2,7
    4960:	19800015 	stw	r6,0(r3)
    4964:	dc800e15 	stw	r18,56(sp)
    4968:	dc400d15 	stw	r17,52(sp)
    496c:	14431016 	blt	r2,r17,55b0 <___vfprintf_internal_r+0x157c>
    4970:	18c00204 	addi	r3,r3,8
    4974:	d8814717 	ldw	r2,1308(sp)
    4978:	143fffc4 	addi	r16,r2,-1
    497c:	043f2b0e 	bge	zero,r16,462c <___vfprintf_internal_r+0x5f8>
    4980:	00800404 	movi	r2,16
    4984:	1402a20e 	bge	r2,r16,5410 <___vfprintf_internal_r+0x13dc>
    4988:	dc400d17 	ldw	r17,52(sp)
    498c:	1027883a 	mov	r19,r2
    4990:	07000074 	movhi	fp,1
    4994:	e73e6684 	addi	fp,fp,-1638
    4998:	050001c4 	movi	r20,7
    499c:	00000306 	br	49ac <___vfprintf_internal_r+0x978>
    49a0:	18c00204 	addi	r3,r3,8
    49a4:	843ffc04 	addi	r16,r16,-16
    49a8:	9c029c0e 	bge	r19,r16,541c <___vfprintf_internal_r+0x13e8>
    49ac:	94800404 	addi	r18,r18,16
    49b0:	8c400044 	addi	r17,r17,1
    49b4:	1f000015 	stw	fp,0(r3)
    49b8:	1cc00115 	stw	r19,4(r3)
    49bc:	dc800e15 	stw	r18,56(sp)
    49c0:	dc400d15 	stw	r17,52(sp)
    49c4:	a47ff60e 	bge	r20,r17,49a0 <___vfprintf_internal_r+0x96c>
    49c8:	d9014f17 	ldw	r4,1340(sp)
    49cc:	b00b883a 	mov	r5,r22
    49d0:	d9800c04 	addi	r6,sp,48
    49d4:	0003fdc0 	call	3fdc <__sprint_r>
    49d8:	103f4e1e 	bne	r2,zero,4714 <___vfprintf_internal_r+0x6e0>
    49dc:	dc800e17 	ldw	r18,56(sp)
    49e0:	dc400d17 	ldw	r17,52(sp)
    49e4:	d8c01904 	addi	r3,sp,100
    49e8:	003fee06 	br	49a4 <___vfprintf_internal_r+0x970>
    49ec:	d8802c0b 	ldhu	r2,176(sp)
    49f0:	00ffffc4 	movi	r3,-1
    49f4:	d8c14b15 	stw	r3,1324(sp)
    49f8:	1080100c 	andi	r2,r2,64
    49fc:	103dcc1e 	bne	r2,zero,4130 <___vfprintf_internal_r+0xfc>
    4a00:	003dce06 	br	413c <___vfprintf_internal_r+0x108>
    4a04:	d9014f17 	ldw	r4,1340(sp)
    4a08:	b00b883a 	mov	r5,r22
    4a0c:	d9800c04 	addi	r6,sp,48
    4a10:	0003fdc0 	call	3fdc <__sprint_r>
    4a14:	103f3f1e 	bne	r2,zero,4714 <___vfprintf_internal_r+0x6e0>
    4a18:	dc800e17 	ldw	r18,56(sp)
    4a1c:	003f2e06 	br	46d8 <___vfprintf_internal_r+0x6a4>
    4a20:	d9414c17 	ldw	r5,1328(sp)
    4a24:	29400414 	ori	r5,r5,16
    4a28:	d9414c15 	stw	r5,1328(sp)
    4a2c:	d9814c17 	ldw	r6,1328(sp)
    4a30:	3080080c 	andi	r2,r6,32
    4a34:	10014f1e 	bne	r2,zero,4f74 <___vfprintf_internal_r+0xf40>
    4a38:	d8c14c17 	ldw	r3,1328(sp)
    4a3c:	1880040c 	andi	r2,r3,16
    4a40:	1002ea1e 	bne	r2,zero,55ec <___vfprintf_internal_r+0x15b8>
    4a44:	d9014c17 	ldw	r4,1328(sp)
    4a48:	2080100c 	andi	r2,r4,64
    4a4c:	1002e726 	beq	r2,zero,55ec <___vfprintf_internal_r+0x15b8>
    4a50:	3880000f 	ldh	r2,0(r7)
    4a54:	39c00104 	addi	r7,r7,4
    4a58:	d9c14015 	stw	r7,1280(sp)
    4a5c:	1023d7fa 	srai	r17,r2,31
    4a60:	1021883a 	mov	r16,r2
    4a64:	88037216 	blt	r17,zero,5830 <___vfprintf_internal_r+0x17fc>
    4a68:	01000044 	movi	r4,1
    4a6c:	98000416 	blt	r19,zero,4a80 <___vfprintf_internal_r+0xa4c>
    4a70:	d8c14c17 	ldw	r3,1328(sp)
    4a74:	00bfdfc4 	movi	r2,-129
    4a78:	1886703a 	and	r3,r3,r2
    4a7c:	d8c14c15 	stw	r3,1328(sp)
    4a80:	8444b03a 	or	r2,r16,r17
    4a84:	1002261e 	bne	r2,zero,5320 <___vfprintf_internal_r+0x12ec>
    4a88:	9802251e 	bne	r19,zero,5320 <___vfprintf_internal_r+0x12ec>
    4a8c:	20803fcc 	andi	r2,r4,255
    4a90:	10029b26 	beq	r2,zero,5500 <___vfprintf_internal_r+0x14cc>
    4a94:	d8c01904 	addi	r3,sp,100
    4a98:	dd000f04 	addi	r20,sp,60
    4a9c:	d8c14115 	stw	r3,1284(sp)
    4aa0:	d8c14117 	ldw	r3,1284(sp)
    4aa4:	dcc14515 	stw	r19,1300(sp)
    4aa8:	a0c5c83a 	sub	r2,r20,r3
    4aac:	11c00a04 	addi	r7,r2,40
    4ab0:	99c0010e 	bge	r19,r7,4ab8 <___vfprintf_internal_r+0xa84>
    4ab4:	d9c14515 	stw	r7,1300(sp)
    4ab8:	dcc14615 	stw	r19,1304(sp)
    4abc:	d8800407 	ldb	r2,16(sp)
    4ac0:	103e4c26 	beq	r2,zero,43f4 <___vfprintf_internal_r+0x3c0>
    4ac4:	d8814517 	ldw	r2,1300(sp)
    4ac8:	10800044 	addi	r2,r2,1
    4acc:	d8814515 	stw	r2,1300(sp)
    4ad0:	003e4806 	br	43f4 <___vfprintf_internal_r+0x3c0>
    4ad4:	d9814c17 	ldw	r6,1328(sp)
    4ad8:	31800414 	ori	r6,r6,16
    4adc:	d9814c15 	stw	r6,1328(sp)
    4ae0:	d8c14c17 	ldw	r3,1328(sp)
    4ae4:	1880080c 	andi	r2,r3,32
    4ae8:	1001271e 	bne	r2,zero,4f88 <___vfprintf_internal_r+0xf54>
    4aec:	d9414c17 	ldw	r5,1328(sp)
    4af0:	2880040c 	andi	r2,r5,16
    4af4:	1002b61e 	bne	r2,zero,55d0 <___vfprintf_internal_r+0x159c>
    4af8:	d9814c17 	ldw	r6,1328(sp)
    4afc:	3080100c 	andi	r2,r6,64
    4b00:	1002b326 	beq	r2,zero,55d0 <___vfprintf_internal_r+0x159c>
    4b04:	3c00000b 	ldhu	r16,0(r7)
    4b08:	0009883a 	mov	r4,zero
    4b0c:	39c00104 	addi	r7,r7,4
    4b10:	0023883a 	mov	r17,zero
    4b14:	d9c14015 	stw	r7,1280(sp)
    4b18:	d8000405 	stb	zero,16(sp)
    4b1c:	003fd306 	br	4a6c <___vfprintf_internal_r+0xa38>
    4b20:	d9014c17 	ldw	r4,1328(sp)
    4b24:	21000414 	ori	r4,r4,16
    4b28:	d9014c15 	stw	r4,1328(sp)
    4b2c:	d9414c17 	ldw	r5,1328(sp)
    4b30:	2880080c 	andi	r2,r5,32
    4b34:	1001081e 	bne	r2,zero,4f58 <___vfprintf_internal_r+0xf24>
    4b38:	d8c14c17 	ldw	r3,1328(sp)
    4b3c:	1880040c 	andi	r2,r3,16
    4b40:	1002b01e 	bne	r2,zero,5604 <___vfprintf_internal_r+0x15d0>
    4b44:	d9014c17 	ldw	r4,1328(sp)
    4b48:	2080100c 	andi	r2,r4,64
    4b4c:	1002ad26 	beq	r2,zero,5604 <___vfprintf_internal_r+0x15d0>
    4b50:	3c00000b 	ldhu	r16,0(r7)
    4b54:	01000044 	movi	r4,1
    4b58:	39c00104 	addi	r7,r7,4
    4b5c:	0023883a 	mov	r17,zero
    4b60:	d9c14015 	stw	r7,1280(sp)
    4b64:	d8000405 	stb	zero,16(sp)
    4b68:	003fc006 	br	4a6c <___vfprintf_internal_r+0xa38>
    4b6c:	d9014f17 	ldw	r4,1340(sp)
    4b70:	b00b883a 	mov	r5,r22
    4b74:	d9800c04 	addi	r6,sp,48
    4b78:	0003fdc0 	call	3fdc <__sprint_r>
    4b7c:	103ee51e 	bne	r2,zero,4714 <___vfprintf_internal_r+0x6e0>
    4b80:	dc800e17 	ldw	r18,56(sp)
    4b84:	d8c01904 	addi	r3,sp,100
    4b88:	d9814c17 	ldw	r6,1328(sp)
    4b8c:	3080004c 	andi	r2,r6,1
    4b90:	1005003a 	cmpeq	r2,r2,zero
    4b94:	103ea51e 	bne	r2,zero,462c <___vfprintf_internal_r+0x5f8>
    4b98:	00800044 	movi	r2,1
    4b9c:	dc400d17 	ldw	r17,52(sp)
    4ba0:	18800115 	stw	r2,4(r3)
    4ba4:	d8814917 	ldw	r2,1316(sp)
    4ba8:	94800044 	addi	r18,r18,1
    4bac:	8c400044 	addi	r17,r17,1
    4bb0:	18800015 	stw	r2,0(r3)
    4bb4:	008001c4 	movi	r2,7
    4bb8:	dc800e15 	stw	r18,56(sp)
    4bbc:	dc400d15 	stw	r17,52(sp)
    4bc0:	14421e0e 	bge	r2,r17,543c <___vfprintf_internal_r+0x1408>
    4bc4:	d9014f17 	ldw	r4,1340(sp)
    4bc8:	b00b883a 	mov	r5,r22
    4bcc:	d9800c04 	addi	r6,sp,48
    4bd0:	0003fdc0 	call	3fdc <__sprint_r>
    4bd4:	103ecf1e 	bne	r2,zero,4714 <___vfprintf_internal_r+0x6e0>
    4bd8:	dc800e17 	ldw	r18,56(sp)
    4bdc:	d8c01904 	addi	r3,sp,100
    4be0:	003e9206 	br	462c <___vfprintf_internal_r+0x5f8>
    4be4:	d9014f17 	ldw	r4,1340(sp)
    4be8:	b00b883a 	mov	r5,r22
    4bec:	d9800c04 	addi	r6,sp,48
    4bf0:	0003fdc0 	call	3fdc <__sprint_r>
    4bf4:	103ec026 	beq	r2,zero,46f8 <___vfprintf_internal_r+0x6c4>
    4bf8:	003ec606 	br	4714 <___vfprintf_internal_r+0x6e0>
    4bfc:	d9014f17 	ldw	r4,1340(sp)
    4c00:	b00b883a 	mov	r5,r22
    4c04:	d9800c04 	addi	r6,sp,48
    4c08:	d9c15115 	stw	r7,1348(sp)
    4c0c:	0003fdc0 	call	3fdc <__sprint_r>
    4c10:	d9c15117 	ldw	r7,1348(sp)
    4c14:	103ebf1e 	bne	r2,zero,4714 <___vfprintf_internal_r+0x6e0>
    4c18:	dc800e17 	ldw	r18,56(sp)
    4c1c:	dc400d17 	ldw	r17,52(sp)
    4c20:	dd401904 	addi	r21,sp,100
    4c24:	003e7406 	br	45f8 <___vfprintf_internal_r+0x5c4>
    4c28:	d9014f17 	ldw	r4,1340(sp)
    4c2c:	b00b883a 	mov	r5,r22
    4c30:	d9800c04 	addi	r6,sp,48
    4c34:	d9c15115 	stw	r7,1348(sp)
    4c38:	0003fdc0 	call	3fdc <__sprint_r>
    4c3c:	d9c15117 	ldw	r7,1348(sp)
    4c40:	103eb41e 	bne	r2,zero,4714 <___vfprintf_internal_r+0x6e0>
    4c44:	dd401904 	addi	r21,sp,100
    4c48:	003d6d06 	br	4200 <___vfprintf_internal_r+0x1cc>
    4c4c:	d9014f17 	ldw	r4,1340(sp)
    4c50:	b00b883a 	mov	r5,r22
    4c54:	d9800c04 	addi	r6,sp,48
    4c58:	d9c15115 	stw	r7,1348(sp)
    4c5c:	0003fdc0 	call	3fdc <__sprint_r>
    4c60:	d9c15117 	ldw	r7,1348(sp)
    4c64:	103eab1e 	bne	r2,zero,4714 <___vfprintf_internal_r+0x6e0>
    4c68:	dc800e17 	ldw	r18,56(sp)
    4c6c:	dc400d17 	ldw	r17,52(sp)
    4c70:	dd401904 	addi	r21,sp,100
    4c74:	003e3406 	br	4548 <___vfprintf_internal_r+0x514>
    4c78:	d9014f17 	ldw	r4,1340(sp)
    4c7c:	b00b883a 	mov	r5,r22
    4c80:	d9800c04 	addi	r6,sp,48
    4c84:	d9c15115 	stw	r7,1348(sp)
    4c88:	0003fdc0 	call	3fdc <__sprint_r>
    4c8c:	d9c15117 	ldw	r7,1348(sp)
    4c90:	103ea01e 	bne	r2,zero,4714 <___vfprintf_internal_r+0x6e0>
    4c94:	dc800e17 	ldw	r18,56(sp)
    4c98:	dc400d17 	ldw	r17,52(sp)
    4c9c:	dd401904 	addi	r21,sp,100
    4ca0:	003e1c06 	br	4514 <___vfprintf_internal_r+0x4e0>
    4ca4:	d9014f17 	ldw	r4,1340(sp)
    4ca8:	b00b883a 	mov	r5,r22
    4cac:	d9800c04 	addi	r6,sp,48
    4cb0:	d9c15115 	stw	r7,1348(sp)
    4cb4:	0003fdc0 	call	3fdc <__sprint_r>
    4cb8:	d9c15117 	ldw	r7,1348(sp)
    4cbc:	103e951e 	bne	r2,zero,4714 <___vfprintf_internal_r+0x6e0>
    4cc0:	dc800e17 	ldw	r18,56(sp)
    4cc4:	dc400d17 	ldw	r17,52(sp)
    4cc8:	dd401904 	addi	r21,sp,100
    4ccc:	003e0406 	br	44e0 <___vfprintf_internal_r+0x4ac>
    4cd0:	d9000517 	ldw	r4,20(sp)
    4cd4:	0102520e 	bge	zero,r4,5620 <___vfprintf_internal_r+0x15ec>
    4cd8:	d9814717 	ldw	r6,1308(sp)
    4cdc:	21807a16 	blt	r4,r6,4ec8 <___vfprintf_internal_r+0xe94>
    4ce0:	d8814117 	ldw	r2,1284(sp)
    4ce4:	91a5883a 	add	r18,r18,r6
    4ce8:	8c400044 	addi	r17,r17,1
    4cec:	a8800015 	stw	r2,0(r21)
    4cf0:	008001c4 	movi	r2,7
    4cf4:	a9800115 	stw	r6,4(r21)
    4cf8:	dc800e15 	stw	r18,56(sp)
    4cfc:	dc400d15 	stw	r17,52(sp)
    4d00:	1442f616 	blt	r2,r17,58dc <___vfprintf_internal_r+0x18a8>
    4d04:	a8c00204 	addi	r3,r21,8
    4d08:	d9414717 	ldw	r5,1308(sp)
    4d0c:	2161c83a 	sub	r16,r4,r5
    4d10:	043f9d0e 	bge	zero,r16,4b88 <___vfprintf_internal_r+0xb54>
    4d14:	00800404 	movi	r2,16
    4d18:	1402130e 	bge	r2,r16,5568 <___vfprintf_internal_r+0x1534>
    4d1c:	dc400d17 	ldw	r17,52(sp)
    4d20:	1027883a 	mov	r19,r2
    4d24:	07000074 	movhi	fp,1
    4d28:	e73e6684 	addi	fp,fp,-1638
    4d2c:	050001c4 	movi	r20,7
    4d30:	00000306 	br	4d40 <___vfprintf_internal_r+0xd0c>
    4d34:	18c00204 	addi	r3,r3,8
    4d38:	843ffc04 	addi	r16,r16,-16
    4d3c:	9c020d0e 	bge	r19,r16,5574 <___vfprintf_internal_r+0x1540>
    4d40:	94800404 	addi	r18,r18,16
    4d44:	8c400044 	addi	r17,r17,1
    4d48:	1f000015 	stw	fp,0(r3)
    4d4c:	1cc00115 	stw	r19,4(r3)
    4d50:	dc800e15 	stw	r18,56(sp)
    4d54:	dc400d15 	stw	r17,52(sp)
    4d58:	a47ff60e 	bge	r20,r17,4d34 <___vfprintf_internal_r+0xd00>
    4d5c:	d9014f17 	ldw	r4,1340(sp)
    4d60:	b00b883a 	mov	r5,r22
    4d64:	d9800c04 	addi	r6,sp,48
    4d68:	0003fdc0 	call	3fdc <__sprint_r>
    4d6c:	103e691e 	bne	r2,zero,4714 <___vfprintf_internal_r+0x6e0>
    4d70:	dc800e17 	ldw	r18,56(sp)
    4d74:	dc400d17 	ldw	r17,52(sp)
    4d78:	d8c01904 	addi	r3,sp,100
    4d7c:	003fee06 	br	4d38 <___vfprintf_internal_r+0xd04>
    4d80:	d8814717 	ldw	r2,1308(sp)
    4d84:	143fffc4 	addi	r16,r2,-1
    4d88:	043e970e 	bge	zero,r16,47e8 <___vfprintf_internal_r+0x7b4>
    4d8c:	00800404 	movi	r2,16
    4d90:	1400180e 	bge	r2,r16,4df4 <___vfprintf_internal_r+0xdc0>
    4d94:	1029883a 	mov	r20,r2
    4d98:	07000074 	movhi	fp,1
    4d9c:	e73e6684 	addi	fp,fp,-1638
    4da0:	054001c4 	movi	r21,7
    4da4:	00000306 	br	4db4 <___vfprintf_internal_r+0xd80>
    4da8:	9cc00204 	addi	r19,r19,8
    4dac:	843ffc04 	addi	r16,r16,-16
    4db0:	a400120e 	bge	r20,r16,4dfc <___vfprintf_internal_r+0xdc8>
    4db4:	94800404 	addi	r18,r18,16
    4db8:	8c400044 	addi	r17,r17,1
    4dbc:	9f000015 	stw	fp,0(r19)
    4dc0:	9d000115 	stw	r20,4(r19)
    4dc4:	dc800e15 	stw	r18,56(sp)
    4dc8:	dc400d15 	stw	r17,52(sp)
    4dcc:	ac7ff60e 	bge	r21,r17,4da8 <___vfprintf_internal_r+0xd74>
    4dd0:	d9014f17 	ldw	r4,1340(sp)
    4dd4:	b00b883a 	mov	r5,r22
    4dd8:	d9800c04 	addi	r6,sp,48
    4ddc:	0003fdc0 	call	3fdc <__sprint_r>
    4de0:	103e4c1e 	bne	r2,zero,4714 <___vfprintf_internal_r+0x6e0>
    4de4:	dc800e17 	ldw	r18,56(sp)
    4de8:	dc400d17 	ldw	r17,52(sp)
    4dec:	dcc01904 	addi	r19,sp,100
    4df0:	003fee06 	br	4dac <___vfprintf_internal_r+0xd78>
    4df4:	07000074 	movhi	fp,1
    4df8:	e73e6684 	addi	fp,fp,-1638
    4dfc:	9425883a 	add	r18,r18,r16
    4e00:	8c400044 	addi	r17,r17,1
    4e04:	008001c4 	movi	r2,7
    4e08:	9f000015 	stw	fp,0(r19)
    4e0c:	9c000115 	stw	r16,4(r19)
    4e10:	dc800e15 	stw	r18,56(sp)
    4e14:	dc400d15 	stw	r17,52(sp)
    4e18:	147e720e 	bge	r2,r17,47e4 <___vfprintf_internal_r+0x7b0>
    4e1c:	d9014f17 	ldw	r4,1340(sp)
    4e20:	b00b883a 	mov	r5,r22
    4e24:	d9800c04 	addi	r6,sp,48
    4e28:	0003fdc0 	call	3fdc <__sprint_r>
    4e2c:	103e391e 	bne	r2,zero,4714 <___vfprintf_internal_r+0x6e0>
    4e30:	dc800e17 	ldw	r18,56(sp)
    4e34:	dc400d17 	ldw	r17,52(sp)
    4e38:	dcc01904 	addi	r19,sp,100
    4e3c:	003e6a06 	br	47e8 <___vfprintf_internal_r+0x7b4>
    4e40:	d9014f17 	ldw	r4,1340(sp)
    4e44:	b00b883a 	mov	r5,r22
    4e48:	d9800c04 	addi	r6,sp,48
    4e4c:	d9c15115 	stw	r7,1348(sp)
    4e50:	0003fdc0 	call	3fdc <__sprint_r>
    4e54:	d9c15117 	ldw	r7,1348(sp)
    4e58:	103e2e1e 	bne	r2,zero,4714 <___vfprintf_internal_r+0x6e0>
    4e5c:	dc800e17 	ldw	r18,56(sp)
    4e60:	dc400d17 	ldw	r17,52(sp)
    4e64:	dd401904 	addi	r21,sp,100
    4e68:	003dba06 	br	4554 <___vfprintf_internal_r+0x520>
    4e6c:	d9014f17 	ldw	r4,1340(sp)
    4e70:	b00b883a 	mov	r5,r22
    4e74:	d9800c04 	addi	r6,sp,48
    4e78:	0003fdc0 	call	3fdc <__sprint_r>
    4e7c:	103e251e 	bne	r2,zero,4714 <___vfprintf_internal_r+0x6e0>
    4e80:	dc800e17 	ldw	r18,56(sp)
    4e84:	dc400d17 	ldw	r17,52(sp)
    4e88:	dcc01904 	addi	r19,sp,100
    4e8c:	003e4206 	br	4798 <___vfprintf_internal_r+0x764>
    4e90:	d9014f17 	ldw	r4,1340(sp)
    4e94:	b00b883a 	mov	r5,r22
    4e98:	d9800c04 	addi	r6,sp,48
    4e9c:	0003fdc0 	call	3fdc <__sprint_r>
    4ea0:	103e1c1e 	bne	r2,zero,4714 <___vfprintf_internal_r+0x6e0>
    4ea4:	dc800e17 	ldw	r18,56(sp)
    4ea8:	dc400d17 	ldw	r17,52(sp)
    4eac:	d8c01904 	addi	r3,sp,100
    4eb0:	003e2e06 	br	476c <___vfprintf_internal_r+0x738>
    4eb4:	d9414c17 	ldw	r5,1328(sp)
    4eb8:	2880004c 	andi	r2,r5,1
    4ebc:	1005003a 	cmpeq	r2,r2,zero
    4ec0:	103dda1e 	bne	r2,zero,462c <___vfprintf_internal_r+0x5f8>
    4ec4:	003e9f06 	br	4944 <___vfprintf_internal_r+0x910>
    4ec8:	d8c14117 	ldw	r3,1284(sp)
    4ecc:	9125883a 	add	r18,r18,r4
    4ed0:	8c400044 	addi	r17,r17,1
    4ed4:	008001c4 	movi	r2,7
    4ed8:	a8c00015 	stw	r3,0(r21)
    4edc:	a9000115 	stw	r4,4(r21)
    4ee0:	dc800e15 	stw	r18,56(sp)
    4ee4:	dc400d15 	stw	r17,52(sp)
    4ee8:	14426616 	blt	r2,r17,5884 <___vfprintf_internal_r+0x1850>
    4eec:	a8c00204 	addi	r3,r21,8
    4ef0:	d9414917 	ldw	r5,1316(sp)
    4ef4:	00800044 	movi	r2,1
    4ef8:	94800044 	addi	r18,r18,1
    4efc:	8c400044 	addi	r17,r17,1
    4f00:	18800115 	stw	r2,4(r3)
    4f04:	008001c4 	movi	r2,7
    4f08:	19400015 	stw	r5,0(r3)
    4f0c:	dc800e15 	stw	r18,56(sp)
    4f10:	dc400d15 	stw	r17,52(sp)
    4f14:	2021883a 	mov	r16,r4
    4f18:	14425016 	blt	r2,r17,585c <___vfprintf_internal_r+0x1828>
    4f1c:	19400204 	addi	r5,r3,8
    4f20:	d9814717 	ldw	r6,1308(sp)
    4f24:	8c400044 	addi	r17,r17,1
    4f28:	dc400d15 	stw	r17,52(sp)
    4f2c:	3107c83a 	sub	r3,r6,r4
    4f30:	d9014117 	ldw	r4,1284(sp)
    4f34:	90e5883a 	add	r18,r18,r3
    4f38:	28c00115 	stw	r3,4(r5)
    4f3c:	8105883a 	add	r2,r16,r4
    4f40:	28800015 	stw	r2,0(r5)
    4f44:	008001c4 	movi	r2,7
    4f48:	dc800e15 	stw	r18,56(sp)
    4f4c:	147f1d16 	blt	r2,r17,4bc4 <___vfprintf_internal_r+0xb90>
    4f50:	28c00204 	addi	r3,r5,8
    4f54:	003db506 	br	462c <___vfprintf_internal_r+0x5f8>
    4f58:	3c000017 	ldw	r16,0(r7)
    4f5c:	3c400117 	ldw	r17,4(r7)
    4f60:	39800204 	addi	r6,r7,8
    4f64:	01000044 	movi	r4,1
    4f68:	d9814015 	stw	r6,1280(sp)
    4f6c:	d8000405 	stb	zero,16(sp)
    4f70:	003ebe06 	br	4a6c <___vfprintf_internal_r+0xa38>
    4f74:	3c000017 	ldw	r16,0(r7)
    4f78:	3c400117 	ldw	r17,4(r7)
    4f7c:	38800204 	addi	r2,r7,8
    4f80:	d8814015 	stw	r2,1280(sp)
    4f84:	003eb706 	br	4a64 <___vfprintf_internal_r+0xa30>
    4f88:	3c000017 	ldw	r16,0(r7)
    4f8c:	3c400117 	ldw	r17,4(r7)
    4f90:	39000204 	addi	r4,r7,8
    4f94:	d9014015 	stw	r4,1280(sp)
    4f98:	0009883a 	mov	r4,zero
    4f9c:	d8000405 	stb	zero,16(sp)
    4fa0:	003eb206 	br	4a6c <___vfprintf_internal_r+0xa38>
    4fa4:	38c00017 	ldw	r3,0(r7)
    4fa8:	39c00104 	addi	r7,r7,4
    4fac:	d8c14a15 	stw	r3,1320(sp)
    4fb0:	1800d10e 	bge	r3,zero,52f8 <___vfprintf_internal_r+0x12c4>
    4fb4:	00c7c83a 	sub	r3,zero,r3
    4fb8:	d8c14a15 	stw	r3,1320(sp)
    4fbc:	d9014c17 	ldw	r4,1328(sp)
    4fc0:	b8c00007 	ldb	r3,0(r23)
    4fc4:	21000114 	ori	r4,r4,4
    4fc8:	d9014c15 	stw	r4,1328(sp)
    4fcc:	003c9806 	br	4230 <___vfprintf_internal_r+0x1fc>
    4fd0:	d9814c17 	ldw	r6,1328(sp)
    4fd4:	3080080c 	andi	r2,r6,32
    4fd8:	1001f026 	beq	r2,zero,579c <___vfprintf_internal_r+0x1768>
    4fdc:	d9014b17 	ldw	r4,1324(sp)
    4fe0:	38800017 	ldw	r2,0(r7)
    4fe4:	39c00104 	addi	r7,r7,4
    4fe8:	d9c14015 	stw	r7,1280(sp)
    4fec:	2007d7fa 	srai	r3,r4,31
    4ff0:	d9c14017 	ldw	r7,1280(sp)
    4ff4:	11000015 	stw	r4,0(r2)
    4ff8:	10c00115 	stw	r3,4(r2)
    4ffc:	003c6906 	br	41a4 <___vfprintf_internal_r+0x170>
    5000:	b8c00007 	ldb	r3,0(r23)
    5004:	00801b04 	movi	r2,108
    5008:	18824f26 	beq	r3,r2,5948 <___vfprintf_internal_r+0x1914>
    500c:	d9414c17 	ldw	r5,1328(sp)
    5010:	29400414 	ori	r5,r5,16
    5014:	d9414c15 	stw	r5,1328(sp)
    5018:	003c8506 	br	4230 <___vfprintf_internal_r+0x1fc>
    501c:	d9814c17 	ldw	r6,1328(sp)
    5020:	b8c00007 	ldb	r3,0(r23)
    5024:	31800814 	ori	r6,r6,32
    5028:	d9814c15 	stw	r6,1328(sp)
    502c:	003c8006 	br	4230 <___vfprintf_internal_r+0x1fc>
    5030:	d8814c17 	ldw	r2,1328(sp)
    5034:	3c000017 	ldw	r16,0(r7)
    5038:	00c01e04 	movi	r3,120
    503c:	10800094 	ori	r2,r2,2
    5040:	d8814c15 	stw	r2,1328(sp)
    5044:	39c00104 	addi	r7,r7,4
    5048:	01400074 	movhi	r5,1
    504c:	297e4f04 	addi	r5,r5,-1732
    5050:	00800c04 	movi	r2,48
    5054:	0023883a 	mov	r17,zero
    5058:	01000084 	movi	r4,2
    505c:	d9c14015 	stw	r7,1280(sp)
    5060:	d8c14d15 	stw	r3,1332(sp)
    5064:	d9414415 	stw	r5,1296(sp)
    5068:	d8800445 	stb	r2,17(sp)
    506c:	d8c00485 	stb	r3,18(sp)
    5070:	d8000405 	stb	zero,16(sp)
    5074:	003e7d06 	br	4a6c <___vfprintf_internal_r+0xa38>
    5078:	d8814c17 	ldw	r2,1328(sp)
    507c:	b8c00007 	ldb	r3,0(r23)
    5080:	10801014 	ori	r2,r2,64
    5084:	d8814c15 	stw	r2,1328(sp)
    5088:	003c6906 	br	4230 <___vfprintf_internal_r+0x1fc>
    508c:	d9414c17 	ldw	r5,1328(sp)
    5090:	2880020c 	andi	r2,r5,8
    5094:	1001df26 	beq	r2,zero,5814 <___vfprintf_internal_r+0x17e0>
    5098:	39800017 	ldw	r6,0(r7)
    509c:	38800204 	addi	r2,r7,8
    50a0:	d8814015 	stw	r2,1280(sp)
    50a4:	d9814215 	stw	r6,1288(sp)
    50a8:	39c00117 	ldw	r7,4(r7)
    50ac:	d9c14315 	stw	r7,1292(sp)
    50b0:	d9014217 	ldw	r4,1288(sp)
    50b4:	d9414317 	ldw	r5,1292(sp)
    50b8:	000a9340 	call	a934 <__isinfd>
    50bc:	10021726 	beq	r2,zero,591c <___vfprintf_internal_r+0x18e8>
    50c0:	d9014217 	ldw	r4,1288(sp)
    50c4:	d9414317 	ldw	r5,1292(sp)
    50c8:	000d883a 	mov	r6,zero
    50cc:	000f883a 	mov	r7,zero
    50d0:	00035a80 	call	35a8 <__ltdf2>
    50d4:	1002ca16 	blt	r2,zero,5c00 <___vfprintf_internal_r+0x1bcc>
    50d8:	d9414d17 	ldw	r5,1332(sp)
    50dc:	008011c4 	movi	r2,71
    50e0:	11420a16 	blt	r2,r5,590c <___vfprintf_internal_r+0x18d8>
    50e4:	01800074 	movhi	r6,1
    50e8:	31be5404 	addi	r6,r6,-1712
    50ec:	d9814115 	stw	r6,1284(sp)
    50f0:	d9014c17 	ldw	r4,1328(sp)
    50f4:	00c000c4 	movi	r3,3
    50f8:	00bfdfc4 	movi	r2,-129
    50fc:	2088703a 	and	r4,r4,r2
    5100:	180f883a 	mov	r7,r3
    5104:	d8c14515 	stw	r3,1300(sp)
    5108:	d9014c15 	stw	r4,1328(sp)
    510c:	d8014615 	stw	zero,1304(sp)
    5110:	003e6a06 	br	4abc <___vfprintf_internal_r+0xa88>
    5114:	38800017 	ldw	r2,0(r7)
    5118:	00c00044 	movi	r3,1
    511c:	39c00104 	addi	r7,r7,4
    5120:	d9c14015 	stw	r7,1280(sp)
    5124:	d9000f04 	addi	r4,sp,60
    5128:	180f883a 	mov	r7,r3
    512c:	d8c14515 	stw	r3,1300(sp)
    5130:	d9014115 	stw	r4,1284(sp)
    5134:	d8800f05 	stb	r2,60(sp)
    5138:	d8000405 	stb	zero,16(sp)
    513c:	003cac06 	br	43f0 <___vfprintf_internal_r+0x3bc>
    5140:	01400074 	movhi	r5,1
    5144:	297e5a04 	addi	r5,r5,-1688
    5148:	d9414415 	stw	r5,1296(sp)
    514c:	d9814c17 	ldw	r6,1328(sp)
    5150:	3080080c 	andi	r2,r6,32
    5154:	1000f926 	beq	r2,zero,553c <___vfprintf_internal_r+0x1508>
    5158:	3c000017 	ldw	r16,0(r7)
    515c:	3c400117 	ldw	r17,4(r7)
    5160:	38800204 	addi	r2,r7,8
    5164:	d8814015 	stw	r2,1280(sp)
    5168:	d9414c17 	ldw	r5,1328(sp)
    516c:	2880004c 	andi	r2,r5,1
    5170:	1005003a 	cmpeq	r2,r2,zero
    5174:	1000b31e 	bne	r2,zero,5444 <___vfprintf_internal_r+0x1410>
    5178:	8444b03a 	or	r2,r16,r17
    517c:	1000b126 	beq	r2,zero,5444 <___vfprintf_internal_r+0x1410>
    5180:	d9814d17 	ldw	r6,1332(sp)
    5184:	29400094 	ori	r5,r5,2
    5188:	00800c04 	movi	r2,48
    518c:	01000084 	movi	r4,2
    5190:	d9414c15 	stw	r5,1328(sp)
    5194:	d8800445 	stb	r2,17(sp)
    5198:	d9800485 	stb	r6,18(sp)
    519c:	d8000405 	stb	zero,16(sp)
    51a0:	003e3206 	br	4a6c <___vfprintf_internal_r+0xa38>
    51a4:	01800074 	movhi	r6,1
    51a8:	31be4f04 	addi	r6,r6,-1732
    51ac:	d9814415 	stw	r6,1296(sp)
    51b0:	003fe606 	br	514c <___vfprintf_internal_r+0x1118>
    51b4:	00800ac4 	movi	r2,43
    51b8:	d8800405 	stb	r2,16(sp)
    51bc:	b8c00007 	ldb	r3,0(r23)
    51c0:	003c1b06 	br	4230 <___vfprintf_internal_r+0x1fc>
    51c4:	d8814c17 	ldw	r2,1328(sp)
    51c8:	b8c00007 	ldb	r3,0(r23)
    51cc:	10800054 	ori	r2,r2,1
    51d0:	d8814c15 	stw	r2,1328(sp)
    51d4:	003c1606 	br	4230 <___vfprintf_internal_r+0x1fc>
    51d8:	d8800407 	ldb	r2,16(sp)
    51dc:	1000461e 	bne	r2,zero,52f8 <___vfprintf_internal_r+0x12c4>
    51e0:	00800804 	movi	r2,32
    51e4:	d8800405 	stb	r2,16(sp)
    51e8:	b8c00007 	ldb	r3,0(r23)
    51ec:	003c1006 	br	4230 <___vfprintf_internal_r+0x1fc>
    51f0:	d9814c17 	ldw	r6,1328(sp)
    51f4:	b8c00007 	ldb	r3,0(r23)
    51f8:	31800214 	ori	r6,r6,8
    51fc:	d9814c15 	stw	r6,1328(sp)
    5200:	003c0b06 	br	4230 <___vfprintf_internal_r+0x1fc>
    5204:	0007883a 	mov	r3,zero
    5208:	01000244 	movi	r4,9
    520c:	188002a4 	muli	r2,r3,10
    5210:	b8c00007 	ldb	r3,0(r23)
    5214:	d9814d17 	ldw	r6,1332(sp)
    5218:	bdc00044 	addi	r23,r23,1
    521c:	d8c14d15 	stw	r3,1332(sp)
    5220:	d9414d17 	ldw	r5,1332(sp)
    5224:	3085883a 	add	r2,r6,r2
    5228:	10fff404 	addi	r3,r2,-48
    522c:	28bff404 	addi	r2,r5,-48
    5230:	20bff62e 	bgeu	r4,r2,520c <___vfprintf_internal_r+0x11d8>
    5234:	d8c14a15 	stw	r3,1320(sp)
    5238:	003bff06 	br	4238 <___vfprintf_internal_r+0x204>
    523c:	d9414c17 	ldw	r5,1328(sp)
    5240:	b8c00007 	ldb	r3,0(r23)
    5244:	29402014 	ori	r5,r5,128
    5248:	d9414c15 	stw	r5,1328(sp)
    524c:	003bf806 	br	4230 <___vfprintf_internal_r+0x1fc>
    5250:	b8c00007 	ldb	r3,0(r23)
    5254:	00800a84 	movi	r2,42
    5258:	bdc00044 	addi	r23,r23,1
    525c:	18831526 	beq	r3,r2,5eb4 <___vfprintf_internal_r+0x1e80>
    5260:	d8c14d15 	stw	r3,1332(sp)
    5264:	18bff404 	addi	r2,r3,-48
    5268:	00c00244 	movi	r3,9
    526c:	18827836 	bltu	r3,r2,5c50 <___vfprintf_internal_r+0x1c1c>
    5270:	000d883a 	mov	r6,zero
    5274:	308002a4 	muli	r2,r6,10
    5278:	b9800007 	ldb	r6,0(r23)
    527c:	d9414d17 	ldw	r5,1332(sp)
    5280:	bdc00044 	addi	r23,r23,1
    5284:	d9814d15 	stw	r6,1332(sp)
    5288:	d9014d17 	ldw	r4,1332(sp)
    528c:	1145883a 	add	r2,r2,r5
    5290:	11bff404 	addi	r6,r2,-48
    5294:	20bff404 	addi	r2,r4,-48
    5298:	18bff62e 	bgeu	r3,r2,5274 <___vfprintf_internal_r+0x1240>
    529c:	3027883a 	mov	r19,r6
    52a0:	303be50e 	bge	r6,zero,4238 <___vfprintf_internal_r+0x204>
    52a4:	04ffffc4 	movi	r19,-1
    52a8:	003be306 	br	4238 <___vfprintf_internal_r+0x204>
    52ac:	d8000405 	stb	zero,16(sp)
    52b0:	39800017 	ldw	r6,0(r7)
    52b4:	39c00104 	addi	r7,r7,4
    52b8:	d9c14015 	stw	r7,1280(sp)
    52bc:	d9814115 	stw	r6,1284(sp)
    52c0:	3001c926 	beq	r6,zero,59e8 <___vfprintf_internal_r+0x19b4>
    52c4:	98000e16 	blt	r19,zero,5300 <___vfprintf_internal_r+0x12cc>
    52c8:	d9014117 	ldw	r4,1284(sp)
    52cc:	000b883a 	mov	r5,zero
    52d0:	980d883a 	mov	r6,r19
    52d4:	00090f00 	call	90f0 <memchr>
    52d8:	10025926 	beq	r2,zero,5c40 <___vfprintf_internal_r+0x1c0c>
    52dc:	d8c14117 	ldw	r3,1284(sp)
    52e0:	10cfc83a 	sub	r7,r2,r3
    52e4:	99c19e16 	blt	r19,r7,5960 <___vfprintf_internal_r+0x192c>
    52e8:	d9c14515 	stw	r7,1300(sp)
    52ec:	38000916 	blt	r7,zero,5314 <___vfprintf_internal_r+0x12e0>
    52f0:	d8014615 	stw	zero,1304(sp)
    52f4:	003df106 	br	4abc <___vfprintf_internal_r+0xa88>
    52f8:	b8c00007 	ldb	r3,0(r23)
    52fc:	003bcc06 	br	4230 <___vfprintf_internal_r+0x1fc>
    5300:	d9014117 	ldw	r4,1284(sp)
    5304:	000abec0 	call	abec <strlen>
    5308:	d8814515 	stw	r2,1300(sp)
    530c:	100f883a 	mov	r7,r2
    5310:	103ff70e 	bge	r2,zero,52f0 <___vfprintf_internal_r+0x12bc>
    5314:	d8014515 	stw	zero,1300(sp)
    5318:	d8014615 	stw	zero,1304(sp)
    531c:	003de706 	br	4abc <___vfprintf_internal_r+0xa88>
    5320:	20c03fcc 	andi	r3,r4,255
    5324:	00800044 	movi	r2,1
    5328:	18802d26 	beq	r3,r2,53e0 <___vfprintf_internal_r+0x13ac>
    532c:	18800e36 	bltu	r3,r2,5368 <___vfprintf_internal_r+0x1334>
    5330:	00800084 	movi	r2,2
    5334:	1880fa26 	beq	r3,r2,5720 <___vfprintf_internal_r+0x16ec>
    5338:	01000074 	movhi	r4,1
    533c:	213e5f04 	addi	r4,r4,-1668
    5340:	000abec0 	call	abec <strlen>
    5344:	100f883a 	mov	r7,r2
    5348:	dcc14515 	stw	r19,1300(sp)
    534c:	9880010e 	bge	r19,r2,5354 <___vfprintf_internal_r+0x1320>
    5350:	d8814515 	stw	r2,1300(sp)
    5354:	00800074 	movhi	r2,1
    5358:	10be5f04 	addi	r2,r2,-1668
    535c:	dcc14615 	stw	r19,1304(sp)
    5360:	d8814115 	stw	r2,1284(sp)
    5364:	003dd506 	br	4abc <___vfprintf_internal_r+0xa88>
    5368:	d9401904 	addi	r5,sp,100
    536c:	dd000f04 	addi	r20,sp,60
    5370:	d9414115 	stw	r5,1284(sp)
    5374:	880a977a 	slli	r5,r17,29
    5378:	d9814117 	ldw	r6,1284(sp)
    537c:	8004d0fa 	srli	r2,r16,3
    5380:	8806d0fa 	srli	r3,r17,3
    5384:	810001cc 	andi	r4,r16,7
    5388:	2884b03a 	or	r2,r5,r2
    538c:	31bfffc4 	addi	r6,r6,-1
    5390:	21000c04 	addi	r4,r4,48
    5394:	d9814115 	stw	r6,1284(sp)
    5398:	10cab03a 	or	r5,r2,r3
    539c:	31000005 	stb	r4,0(r6)
    53a0:	1021883a 	mov	r16,r2
    53a4:	1823883a 	mov	r17,r3
    53a8:	283ff21e 	bne	r5,zero,5374 <___vfprintf_internal_r+0x1340>
    53ac:	d8c14c17 	ldw	r3,1328(sp)
    53b0:	1880004c 	andi	r2,r3,1
    53b4:	1005003a 	cmpeq	r2,r2,zero
    53b8:	103db91e 	bne	r2,zero,4aa0 <___vfprintf_internal_r+0xa6c>
    53bc:	20803fcc 	andi	r2,r4,255
    53c0:	1080201c 	xori	r2,r2,128
    53c4:	10bfe004 	addi	r2,r2,-128
    53c8:	00c00c04 	movi	r3,48
    53cc:	10fdb426 	beq	r2,r3,4aa0 <___vfprintf_internal_r+0xa6c>
    53d0:	31bfffc4 	addi	r6,r6,-1
    53d4:	d9814115 	stw	r6,1284(sp)
    53d8:	30c00005 	stb	r3,0(r6)
    53dc:	003db006 	br	4aa0 <___vfprintf_internal_r+0xa6c>
    53e0:	88800068 	cmpgeui	r2,r17,1
    53e4:	10002c1e 	bne	r2,zero,5498 <___vfprintf_internal_r+0x1464>
    53e8:	8800021e 	bne	r17,zero,53f4 <___vfprintf_internal_r+0x13c0>
    53ec:	00800244 	movi	r2,9
    53f0:	14002936 	bltu	r2,r16,5498 <___vfprintf_internal_r+0x1464>
    53f4:	d90018c4 	addi	r4,sp,99
    53f8:	dd000f04 	addi	r20,sp,60
    53fc:	d9014115 	stw	r4,1284(sp)
    5400:	d9014117 	ldw	r4,1284(sp)
    5404:	80800c04 	addi	r2,r16,48
    5408:	20800005 	stb	r2,0(r4)
    540c:	003da406 	br	4aa0 <___vfprintf_internal_r+0xa6c>
    5410:	dc400d17 	ldw	r17,52(sp)
    5414:	07000074 	movhi	fp,1
    5418:	e73e6684 	addi	fp,fp,-1638
    541c:	9425883a 	add	r18,r18,r16
    5420:	8c400044 	addi	r17,r17,1
    5424:	008001c4 	movi	r2,7
    5428:	1f000015 	stw	fp,0(r3)
    542c:	1c000115 	stw	r16,4(r3)
    5430:	dc800e15 	stw	r18,56(sp)
    5434:	dc400d15 	stw	r17,52(sp)
    5438:	147de216 	blt	r2,r17,4bc4 <___vfprintf_internal_r+0xb90>
    543c:	18c00204 	addi	r3,r3,8
    5440:	003c7a06 	br	462c <___vfprintf_internal_r+0x5f8>
    5444:	01000084 	movi	r4,2
    5448:	d8000405 	stb	zero,16(sp)
    544c:	003d8706 	br	4a6c <___vfprintf_internal_r+0xa38>
    5450:	d9814c17 	ldw	r6,1328(sp)
    5454:	30c4703a 	and	r2,r6,r3
    5458:	1005003a 	cmpeq	r2,r2,zero
    545c:	103cb926 	beq	r2,zero,4744 <___vfprintf_internal_r+0x710>
    5460:	d9014117 	ldw	r4,1284(sp)
    5464:	94800044 	addi	r18,r18,1
    5468:	8c400044 	addi	r17,r17,1
    546c:	008001c4 	movi	r2,7
    5470:	a9000015 	stw	r4,0(r21)
    5474:	a8c00115 	stw	r3,4(r21)
    5478:	dc800e15 	stw	r18,56(sp)
    547c:	dc400d15 	stw	r17,52(sp)
    5480:	147e6616 	blt	r2,r17,4e1c <___vfprintf_internal_r+0xde8>
    5484:	acc00204 	addi	r19,r21,8
    5488:	003cd706 	br	47e8 <___vfprintf_internal_r+0x7b4>
    548c:	07000074 	movhi	fp,1
    5490:	e73e6684 	addi	fp,fp,-1638
    5494:	003c4f06 	br	45d4 <___vfprintf_internal_r+0x5a0>
    5498:	dd000f04 	addi	r20,sp,60
    549c:	dc801904 	addi	r18,sp,100
    54a0:	8009883a 	mov	r4,r16
    54a4:	880b883a 	mov	r5,r17
    54a8:	01800284 	movi	r6,10
    54ac:	000f883a 	mov	r7,zero
    54b0:	000b6d00 	call	b6d0 <__umoddi3>
    54b4:	12000c04 	addi	r8,r2,48
    54b8:	94bfffc4 	addi	r18,r18,-1
    54bc:	8009883a 	mov	r4,r16
    54c0:	880b883a 	mov	r5,r17
    54c4:	01800284 	movi	r6,10
    54c8:	000f883a 	mov	r7,zero
    54cc:	92000005 	stb	r8,0(r18)
    54d0:	000b0f40 	call	b0f4 <__udivdi3>
    54d4:	1009883a 	mov	r4,r2
    54d8:	1021883a 	mov	r16,r2
    54dc:	18800068 	cmpgeui	r2,r3,1
    54e0:	1823883a 	mov	r17,r3
    54e4:	103fee1e 	bne	r2,zero,54a0 <___vfprintf_internal_r+0x146c>
    54e8:	1800021e 	bne	r3,zero,54f4 <___vfprintf_internal_r+0x14c0>
    54ec:	00800244 	movi	r2,9
    54f0:	113feb36 	bltu	r2,r4,54a0 <___vfprintf_internal_r+0x146c>
    54f4:	94bfffc4 	addi	r18,r18,-1
    54f8:	dc814115 	stw	r18,1284(sp)
    54fc:	003fc006 	br	5400 <___vfprintf_internal_r+0x13cc>
    5500:	d9014c17 	ldw	r4,1328(sp)
    5504:	2080004c 	andi	r2,r4,1
    5508:	10009a1e 	bne	r2,zero,5774 <___vfprintf_internal_r+0x1740>
    550c:	d9401904 	addi	r5,sp,100
    5510:	dd000f04 	addi	r20,sp,60
    5514:	d9414115 	stw	r5,1284(sp)
    5518:	003d6106 	br	4aa0 <___vfprintf_internal_r+0xa6c>
    551c:	d9014f17 	ldw	r4,1340(sp)
    5520:	b00b883a 	mov	r5,r22
    5524:	d9800c04 	addi	r6,sp,48
    5528:	0003fdc0 	call	3fdc <__sprint_r>
    552c:	103c791e 	bne	r2,zero,4714 <___vfprintf_internal_r+0x6e0>
    5530:	dc800e17 	ldw	r18,56(sp)
    5534:	d8c01904 	addi	r3,sp,100
    5538:	003cff06 	br	4938 <___vfprintf_internal_r+0x904>
    553c:	d8c14c17 	ldw	r3,1328(sp)
    5540:	1880040c 	andi	r2,r3,16
    5544:	1000711e 	bne	r2,zero,570c <___vfprintf_internal_r+0x16d8>
    5548:	d9014c17 	ldw	r4,1328(sp)
    554c:	2080100c 	andi	r2,r4,64
    5550:	10006e26 	beq	r2,zero,570c <___vfprintf_internal_r+0x16d8>
    5554:	3c00000b 	ldhu	r16,0(r7)
    5558:	0023883a 	mov	r17,zero
    555c:	39c00104 	addi	r7,r7,4
    5560:	d9c14015 	stw	r7,1280(sp)
    5564:	003f0006 	br	5168 <___vfprintf_internal_r+0x1134>
    5568:	dc400d17 	ldw	r17,52(sp)
    556c:	07000074 	movhi	fp,1
    5570:	e73e6684 	addi	fp,fp,-1638
    5574:	9425883a 	add	r18,r18,r16
    5578:	8c400044 	addi	r17,r17,1
    557c:	008001c4 	movi	r2,7
    5580:	1f000015 	stw	fp,0(r3)
    5584:	1c000115 	stw	r16,4(r3)
    5588:	dc800e15 	stw	r18,56(sp)
    558c:	dc400d15 	stw	r17,52(sp)
    5590:	147d7616 	blt	r2,r17,4b6c <___vfprintf_internal_r+0xb38>
    5594:	18c00204 	addi	r3,r3,8
    5598:	003d7b06 	br	4b88 <___vfprintf_internal_r+0xb54>
    559c:	dc800e17 	ldw	r18,56(sp)
    55a0:	dc400d17 	ldw	r17,52(sp)
    55a4:	07000074 	movhi	fp,1
    55a8:	e73e6a84 	addi	fp,fp,-1622
    55ac:	003bc006 	br	44b0 <___vfprintf_internal_r+0x47c>
    55b0:	d9014f17 	ldw	r4,1340(sp)
    55b4:	b00b883a 	mov	r5,r22
    55b8:	d9800c04 	addi	r6,sp,48
    55bc:	0003fdc0 	call	3fdc <__sprint_r>
    55c0:	103c541e 	bne	r2,zero,4714 <___vfprintf_internal_r+0x6e0>
    55c4:	dc800e17 	ldw	r18,56(sp)
    55c8:	d8c01904 	addi	r3,sp,100
    55cc:	003ce906 	br	4974 <___vfprintf_internal_r+0x940>
    55d0:	3c000017 	ldw	r16,0(r7)
    55d4:	0009883a 	mov	r4,zero
    55d8:	39c00104 	addi	r7,r7,4
    55dc:	0023883a 	mov	r17,zero
    55e0:	d9c14015 	stw	r7,1280(sp)
    55e4:	d8000405 	stb	zero,16(sp)
    55e8:	003d2006 	br	4a6c <___vfprintf_internal_r+0xa38>
    55ec:	38800017 	ldw	r2,0(r7)
    55f0:	39c00104 	addi	r7,r7,4
    55f4:	d9c14015 	stw	r7,1280(sp)
    55f8:	1023d7fa 	srai	r17,r2,31
    55fc:	1021883a 	mov	r16,r2
    5600:	003d1806 	br	4a64 <___vfprintf_internal_r+0xa30>
    5604:	3c000017 	ldw	r16,0(r7)
    5608:	01000044 	movi	r4,1
    560c:	39c00104 	addi	r7,r7,4
    5610:	0023883a 	mov	r17,zero
    5614:	d9c14015 	stw	r7,1280(sp)
    5618:	d8000405 	stb	zero,16(sp)
    561c:	003d1306 	br	4a6c <___vfprintf_internal_r+0xa38>
    5620:	00800074 	movhi	r2,1
    5624:	10be6604 	addi	r2,r2,-1640
    5628:	94800044 	addi	r18,r18,1
    562c:	8c400044 	addi	r17,r17,1
    5630:	a8800015 	stw	r2,0(r21)
    5634:	00c00044 	movi	r3,1
    5638:	008001c4 	movi	r2,7
    563c:	a8c00115 	stw	r3,4(r21)
    5640:	dc800e15 	stw	r18,56(sp)
    5644:	dc400d15 	stw	r17,52(sp)
    5648:	1440ca16 	blt	r2,r17,5974 <___vfprintf_internal_r+0x1940>
    564c:	a8c00204 	addi	r3,r21,8
    5650:	2000061e 	bne	r4,zero,566c <___vfprintf_internal_r+0x1638>
    5654:	d9414717 	ldw	r5,1308(sp)
    5658:	2800041e 	bne	r5,zero,566c <___vfprintf_internal_r+0x1638>
    565c:	d9814c17 	ldw	r6,1328(sp)
    5660:	3080004c 	andi	r2,r6,1
    5664:	1005003a 	cmpeq	r2,r2,zero
    5668:	103bf01e 	bne	r2,zero,462c <___vfprintf_internal_r+0x5f8>
    566c:	00800044 	movi	r2,1
    5670:	dc400d17 	ldw	r17,52(sp)
    5674:	18800115 	stw	r2,4(r3)
    5678:	d8814917 	ldw	r2,1316(sp)
    567c:	94800044 	addi	r18,r18,1
    5680:	8c400044 	addi	r17,r17,1
    5684:	18800015 	stw	r2,0(r3)
    5688:	008001c4 	movi	r2,7
    568c:	dc800e15 	stw	r18,56(sp)
    5690:	dc400d15 	stw	r17,52(sp)
    5694:	1440ca16 	blt	r2,r17,59c0 <___vfprintf_internal_r+0x198c>
    5698:	18c00204 	addi	r3,r3,8
    569c:	0121c83a 	sub	r16,zero,r4
    56a0:	0400500e 	bge	zero,r16,57e4 <___vfprintf_internal_r+0x17b0>
    56a4:	00800404 	movi	r2,16
    56a8:	1400800e 	bge	r2,r16,58ac <___vfprintf_internal_r+0x1878>
    56ac:	1027883a 	mov	r19,r2
    56b0:	07000074 	movhi	fp,1
    56b4:	e73e6684 	addi	fp,fp,-1638
    56b8:	050001c4 	movi	r20,7
    56bc:	00000306 	br	56cc <___vfprintf_internal_r+0x1698>
    56c0:	18c00204 	addi	r3,r3,8
    56c4:	843ffc04 	addi	r16,r16,-16
    56c8:	9c007a0e 	bge	r19,r16,58b4 <___vfprintf_internal_r+0x1880>
    56cc:	94800404 	addi	r18,r18,16
    56d0:	8c400044 	addi	r17,r17,1
    56d4:	1f000015 	stw	fp,0(r3)
    56d8:	1cc00115 	stw	r19,4(r3)
    56dc:	dc800e15 	stw	r18,56(sp)
    56e0:	dc400d15 	stw	r17,52(sp)
    56e4:	a47ff60e 	bge	r20,r17,56c0 <___vfprintf_internal_r+0x168c>
    56e8:	d9014f17 	ldw	r4,1340(sp)
    56ec:	b00b883a 	mov	r5,r22
    56f0:	d9800c04 	addi	r6,sp,48
    56f4:	0003fdc0 	call	3fdc <__sprint_r>
    56f8:	103c061e 	bne	r2,zero,4714 <___vfprintf_internal_r+0x6e0>
    56fc:	dc800e17 	ldw	r18,56(sp)
    5700:	dc400d17 	ldw	r17,52(sp)
    5704:	d8c01904 	addi	r3,sp,100
    5708:	003fee06 	br	56c4 <___vfprintf_internal_r+0x1690>
    570c:	3c000017 	ldw	r16,0(r7)
    5710:	0023883a 	mov	r17,zero
    5714:	39c00104 	addi	r7,r7,4
    5718:	d9c14015 	stw	r7,1280(sp)
    571c:	003e9206 	br	5168 <___vfprintf_internal_r+0x1134>
    5720:	d9401904 	addi	r5,sp,100
    5724:	dd000f04 	addi	r20,sp,60
    5728:	d9414115 	stw	r5,1284(sp)
    572c:	d9814417 	ldw	r6,1296(sp)
    5730:	880a973a 	slli	r5,r17,28
    5734:	8004d13a 	srli	r2,r16,4
    5738:	810003cc 	andi	r4,r16,15
    573c:	3109883a 	add	r4,r6,r4
    5740:	2884b03a 	or	r2,r5,r2
    5744:	21400003 	ldbu	r5,0(r4)
    5748:	d9014117 	ldw	r4,1284(sp)
    574c:	8806d13a 	srli	r3,r17,4
    5750:	1021883a 	mov	r16,r2
    5754:	213fffc4 	addi	r4,r4,-1
    5758:	d9014115 	stw	r4,1284(sp)
    575c:	d9814117 	ldw	r6,1284(sp)
    5760:	10c8b03a 	or	r4,r2,r3
    5764:	1823883a 	mov	r17,r3
    5768:	31400005 	stb	r5,0(r6)
    576c:	203fef1e 	bne	r4,zero,572c <___vfprintf_internal_r+0x16f8>
    5770:	003ccb06 	br	4aa0 <___vfprintf_internal_r+0xa6c>
    5774:	00800c04 	movi	r2,48
    5778:	d98018c4 	addi	r6,sp,99
    577c:	dd000f04 	addi	r20,sp,60
    5780:	d88018c5 	stb	r2,99(sp)
    5784:	d9814115 	stw	r6,1284(sp)
    5788:	003cc506 	br	4aa0 <___vfprintf_internal_r+0xa6c>
    578c:	dc400d17 	ldw	r17,52(sp)
    5790:	07000074 	movhi	fp,1
    5794:	e73e6a84 	addi	fp,fp,-1622
    5798:	003bc706 	br	46b8 <___vfprintf_internal_r+0x684>
    579c:	d9414c17 	ldw	r5,1328(sp)
    57a0:	2880040c 	andi	r2,r5,16
    57a4:	10007c26 	beq	r2,zero,5998 <___vfprintf_internal_r+0x1964>
    57a8:	38800017 	ldw	r2,0(r7)
    57ac:	39c00104 	addi	r7,r7,4
    57b0:	d9c14015 	stw	r7,1280(sp)
    57b4:	d9814b17 	ldw	r6,1324(sp)
    57b8:	d9c14017 	ldw	r7,1280(sp)
    57bc:	11800015 	stw	r6,0(r2)
    57c0:	003a7806 	br	41a4 <___vfprintf_internal_r+0x170>
    57c4:	d9014f17 	ldw	r4,1340(sp)
    57c8:	b00b883a 	mov	r5,r22
    57cc:	d9800c04 	addi	r6,sp,48
    57d0:	0003fdc0 	call	3fdc <__sprint_r>
    57d4:	103bcf1e 	bne	r2,zero,4714 <___vfprintf_internal_r+0x6e0>
    57d8:	dc800e17 	ldw	r18,56(sp)
    57dc:	dc400d17 	ldw	r17,52(sp)
    57e0:	d8c01904 	addi	r3,sp,100
    57e4:	d9014717 	ldw	r4,1308(sp)
    57e8:	d9414117 	ldw	r5,1284(sp)
    57ec:	8c400044 	addi	r17,r17,1
    57f0:	9125883a 	add	r18,r18,r4
    57f4:	008001c4 	movi	r2,7
    57f8:	19400015 	stw	r5,0(r3)
    57fc:	19000115 	stw	r4,4(r3)
    5800:	dc800e15 	stw	r18,56(sp)
    5804:	dc400d15 	stw	r17,52(sp)
    5808:	147cee16 	blt	r2,r17,4bc4 <___vfprintf_internal_r+0xb90>
    580c:	18c00204 	addi	r3,r3,8
    5810:	003b8606 	br	462c <___vfprintf_internal_r+0x5f8>
    5814:	38c00017 	ldw	r3,0(r7)
    5818:	39000204 	addi	r4,r7,8
    581c:	d9014015 	stw	r4,1280(sp)
    5820:	d8c14215 	stw	r3,1288(sp)
    5824:	39c00117 	ldw	r7,4(r7)
    5828:	d9c14315 	stw	r7,1292(sp)
    582c:	003e2006 	br	50b0 <___vfprintf_internal_r+0x107c>
    5830:	0005883a 	mov	r2,zero
    5834:	1409c83a 	sub	r4,r2,r16
    5838:	1105803a 	cmpltu	r2,r2,r4
    583c:	044bc83a 	sub	r5,zero,r17
    5840:	2885c83a 	sub	r2,r5,r2
    5844:	2021883a 	mov	r16,r4
    5848:	1023883a 	mov	r17,r2
    584c:	01000044 	movi	r4,1
    5850:	00800b44 	movi	r2,45
    5854:	d8800405 	stb	r2,16(sp)
    5858:	003c8406 	br	4a6c <___vfprintf_internal_r+0xa38>
    585c:	d9014f17 	ldw	r4,1340(sp)
    5860:	b00b883a 	mov	r5,r22
    5864:	d9800c04 	addi	r6,sp,48
    5868:	0003fdc0 	call	3fdc <__sprint_r>
    586c:	103ba91e 	bne	r2,zero,4714 <___vfprintf_internal_r+0x6e0>
    5870:	dc800e17 	ldw	r18,56(sp)
    5874:	dc400d17 	ldw	r17,52(sp)
    5878:	d9000517 	ldw	r4,20(sp)
    587c:	d9401904 	addi	r5,sp,100
    5880:	003da706 	br	4f20 <___vfprintf_internal_r+0xeec>
    5884:	d9014f17 	ldw	r4,1340(sp)
    5888:	b00b883a 	mov	r5,r22
    588c:	d9800c04 	addi	r6,sp,48
    5890:	0003fdc0 	call	3fdc <__sprint_r>
    5894:	103b9f1e 	bne	r2,zero,4714 <___vfprintf_internal_r+0x6e0>
    5898:	dc800e17 	ldw	r18,56(sp)
    589c:	dc400d17 	ldw	r17,52(sp)
    58a0:	d9000517 	ldw	r4,20(sp)
    58a4:	d8c01904 	addi	r3,sp,100
    58a8:	003d9106 	br	4ef0 <___vfprintf_internal_r+0xebc>
    58ac:	07000074 	movhi	fp,1
    58b0:	e73e6684 	addi	fp,fp,-1638
    58b4:	9425883a 	add	r18,r18,r16
    58b8:	8c400044 	addi	r17,r17,1
    58bc:	008001c4 	movi	r2,7
    58c0:	1f000015 	stw	fp,0(r3)
    58c4:	1c000115 	stw	r16,4(r3)
    58c8:	dc800e15 	stw	r18,56(sp)
    58cc:	dc400d15 	stw	r17,52(sp)
    58d0:	147fbc16 	blt	r2,r17,57c4 <___vfprintf_internal_r+0x1790>
    58d4:	18c00204 	addi	r3,r3,8
    58d8:	003fc206 	br	57e4 <___vfprintf_internal_r+0x17b0>
    58dc:	d9014f17 	ldw	r4,1340(sp)
    58e0:	b00b883a 	mov	r5,r22
    58e4:	d9800c04 	addi	r6,sp,48
    58e8:	0003fdc0 	call	3fdc <__sprint_r>
    58ec:	103b891e 	bne	r2,zero,4714 <___vfprintf_internal_r+0x6e0>
    58f0:	dc800e17 	ldw	r18,56(sp)
    58f4:	d9000517 	ldw	r4,20(sp)
    58f8:	d8c01904 	addi	r3,sp,100
    58fc:	003d0206 	br	4d08 <___vfprintf_internal_r+0xcd4>
    5900:	07000074 	movhi	fp,1
    5904:	e73e6684 	addi	fp,fp,-1638
    5908:	003be406 	br	489c <___vfprintf_internal_r+0x868>
    590c:	00800074 	movhi	r2,1
    5910:	10be5504 	addi	r2,r2,-1708
    5914:	d8814115 	stw	r2,1284(sp)
    5918:	003df506 	br	50f0 <___vfprintf_internal_r+0x10bc>
    591c:	d9014217 	ldw	r4,1288(sp)
    5920:	d9414317 	ldw	r5,1292(sp)
    5924:	00024940 	call	2494 <__isnand>
    5928:	10003926 	beq	r2,zero,5a10 <___vfprintf_internal_r+0x19dc>
    592c:	d9414d17 	ldw	r5,1332(sp)
    5930:	008011c4 	movi	r2,71
    5934:	1140ce16 	blt	r2,r5,5c70 <___vfprintf_internal_r+0x1c3c>
    5938:	01800074 	movhi	r6,1
    593c:	31be5604 	addi	r6,r6,-1704
    5940:	d9814115 	stw	r6,1284(sp)
    5944:	003dea06 	br	50f0 <___vfprintf_internal_r+0x10bc>
    5948:	d9014c17 	ldw	r4,1328(sp)
    594c:	bdc00044 	addi	r23,r23,1
    5950:	b8c00007 	ldb	r3,0(r23)
    5954:	21000814 	ori	r4,r4,32
    5958:	d9014c15 	stw	r4,1328(sp)
    595c:	003a3406 	br	4230 <___vfprintf_internal_r+0x1fc>
    5960:	dcc14515 	stw	r19,1300(sp)
    5964:	98011016 	blt	r19,zero,5da8 <___vfprintf_internal_r+0x1d74>
    5968:	980f883a 	mov	r7,r19
    596c:	d8014615 	stw	zero,1304(sp)
    5970:	003c5206 	br	4abc <___vfprintf_internal_r+0xa88>
    5974:	d9014f17 	ldw	r4,1340(sp)
    5978:	b00b883a 	mov	r5,r22
    597c:	d9800c04 	addi	r6,sp,48
    5980:	0003fdc0 	call	3fdc <__sprint_r>
    5984:	103b631e 	bne	r2,zero,4714 <___vfprintf_internal_r+0x6e0>
    5988:	dc800e17 	ldw	r18,56(sp)
    598c:	d9000517 	ldw	r4,20(sp)
    5990:	d8c01904 	addi	r3,sp,100
    5994:	003f2e06 	br	5650 <___vfprintf_internal_r+0x161c>
    5998:	d8c14c17 	ldw	r3,1328(sp)
    599c:	1880100c 	andi	r2,r3,64
    59a0:	1000a026 	beq	r2,zero,5c24 <___vfprintf_internal_r+0x1bf0>
    59a4:	38800017 	ldw	r2,0(r7)
    59a8:	39c00104 	addi	r7,r7,4
    59ac:	d9c14015 	stw	r7,1280(sp)
    59b0:	d9014b17 	ldw	r4,1324(sp)
    59b4:	d9c14017 	ldw	r7,1280(sp)
    59b8:	1100000d 	sth	r4,0(r2)
    59bc:	0039f906 	br	41a4 <___vfprintf_internal_r+0x170>
    59c0:	d9014f17 	ldw	r4,1340(sp)
    59c4:	b00b883a 	mov	r5,r22
    59c8:	d9800c04 	addi	r6,sp,48
    59cc:	0003fdc0 	call	3fdc <__sprint_r>
    59d0:	103b501e 	bne	r2,zero,4714 <___vfprintf_internal_r+0x6e0>
    59d4:	dc800e17 	ldw	r18,56(sp)
    59d8:	dc400d17 	ldw	r17,52(sp)
    59dc:	d9000517 	ldw	r4,20(sp)
    59e0:	d8c01904 	addi	r3,sp,100
    59e4:	003f2d06 	br	569c <___vfprintf_internal_r+0x1668>
    59e8:	00800184 	movi	r2,6
    59ec:	14c09a36 	bltu	r2,r19,5c58 <___vfprintf_internal_r+0x1c24>
    59f0:	dcc14515 	stw	r19,1300(sp)
    59f4:	9800010e 	bge	r19,zero,59fc <___vfprintf_internal_r+0x19c8>
    59f8:	d8014515 	stw	zero,1300(sp)
    59fc:	00800074 	movhi	r2,1
    5a00:	10be5804 	addi	r2,r2,-1696
    5a04:	980f883a 	mov	r7,r19
    5a08:	d8814115 	stw	r2,1284(sp)
    5a0c:	003a7806 	br	43f0 <___vfprintf_internal_r+0x3bc>
    5a10:	00bfffc4 	movi	r2,-1
    5a14:	9880e226 	beq	r19,r2,5da0 <___vfprintf_internal_r+0x1d6c>
    5a18:	d9414d17 	ldw	r5,1332(sp)
    5a1c:	008019c4 	movi	r2,103
    5a20:	2880dc26 	beq	r5,r2,5d94 <___vfprintf_internal_r+0x1d60>
    5a24:	008011c4 	movi	r2,71
    5a28:	2880da26 	beq	r5,r2,5d94 <___vfprintf_internal_r+0x1d60>
    5a2c:	d9414c17 	ldw	r5,1328(sp)
    5a30:	d9014317 	ldw	r4,1292(sp)
    5a34:	d9814217 	ldw	r6,1288(sp)
    5a38:	29404014 	ori	r5,r5,256
    5a3c:	d9414c15 	stw	r5,1328(sp)
    5a40:	2000cc16 	blt	r4,zero,5d74 <___vfprintf_internal_r+0x1d40>
    5a44:	3021883a 	mov	r16,r6
    5a48:	2023883a 	mov	r17,r4
    5a4c:	0039883a 	mov	fp,zero
    5a50:	d9414d17 	ldw	r5,1332(sp)
    5a54:	00801984 	movi	r2,102
    5a58:	2880b726 	beq	r5,r2,5d38 <___vfprintf_internal_r+0x1d04>
    5a5c:	00801184 	movi	r2,70
    5a60:	2880b526 	beq	r5,r2,5d38 <___vfprintf_internal_r+0x1d04>
    5a64:	00801944 	movi	r2,101
    5a68:	2880c826 	beq	r5,r2,5d8c <___vfprintf_internal_r+0x1d58>
    5a6c:	00801144 	movi	r2,69
    5a70:	2880c626 	beq	r5,r2,5d8c <___vfprintf_internal_r+0x1d58>
    5a74:	9829883a 	mov	r20,r19
    5a78:	d9014f17 	ldw	r4,1340(sp)
    5a7c:	d8800504 	addi	r2,sp,20
    5a80:	880d883a 	mov	r6,r17
    5a84:	d8800115 	stw	r2,4(sp)
    5a88:	d8c00604 	addi	r3,sp,24
    5a8c:	d8800704 	addi	r2,sp,28
    5a90:	800b883a 	mov	r5,r16
    5a94:	01c00084 	movi	r7,2
    5a98:	d8c00215 	stw	r3,8(sp)
    5a9c:	d8800315 	stw	r2,12(sp)
    5aa0:	dd000015 	stw	r20,0(sp)
    5aa4:	00062580 	call	6258 <_dtoa_r>
    5aa8:	d9814d17 	ldw	r6,1332(sp)
    5aac:	d8814115 	stw	r2,1284(sp)
    5ab0:	008019c4 	movi	r2,103
    5ab4:	30809526 	beq	r6,r2,5d0c <___vfprintf_internal_r+0x1cd8>
    5ab8:	d8c14d17 	ldw	r3,1332(sp)
    5abc:	008011c4 	movi	r2,71
    5ac0:	18809226 	beq	r3,r2,5d0c <___vfprintf_internal_r+0x1cd8>
    5ac4:	d9414117 	ldw	r5,1284(sp)
    5ac8:	d9814d17 	ldw	r6,1332(sp)
    5acc:	00801984 	movi	r2,102
    5ad0:	2d25883a 	add	r18,r5,r20
    5ad4:	30808626 	beq	r6,r2,5cf0 <___vfprintf_internal_r+0x1cbc>
    5ad8:	00801184 	movi	r2,70
    5adc:	30808426 	beq	r6,r2,5cf0 <___vfprintf_internal_r+0x1cbc>
    5ae0:	000d883a 	mov	r6,zero
    5ae4:	000f883a 	mov	r7,zero
    5ae8:	880b883a 	mov	r5,r17
    5aec:	8009883a 	mov	r4,r16
    5af0:	00034100 	call	3410 <__eqdf2>
    5af4:	1000751e 	bne	r2,zero,5ccc <___vfprintf_internal_r+0x1c98>
    5af8:	9005883a 	mov	r2,r18
    5afc:	dc800715 	stw	r18,28(sp)
    5b00:	d9014117 	ldw	r4,1284(sp)
    5b04:	d9414d17 	ldw	r5,1332(sp)
    5b08:	00c019c4 	movi	r3,103
    5b0c:	1125c83a 	sub	r18,r2,r4
    5b10:	28c06826 	beq	r5,r3,5cb4 <___vfprintf_internal_r+0x1c80>
    5b14:	008011c4 	movi	r2,71
    5b18:	28806626 	beq	r5,r2,5cb4 <___vfprintf_internal_r+0x1c80>
    5b1c:	d9000517 	ldw	r4,20(sp)
    5b20:	d8c14d17 	ldw	r3,1332(sp)
    5b24:	00801944 	movi	r2,101
    5b28:	10c05516 	blt	r2,r3,5c80 <___vfprintf_internal_r+0x1c4c>
    5b2c:	213fffc4 	addi	r4,r4,-1
    5b30:	d9000515 	stw	r4,20(sp)
    5b34:	d8c00805 	stb	r3,32(sp)
    5b38:	2021883a 	mov	r16,r4
    5b3c:	2000c116 	blt	r4,zero,5e44 <___vfprintf_internal_r+0x1e10>
    5b40:	00800ac4 	movi	r2,43
    5b44:	d8800845 	stb	r2,33(sp)
    5b48:	00800244 	movi	r2,9
    5b4c:	1400af0e 	bge	r2,r16,5e0c <___vfprintf_internal_r+0x1dd8>
    5b50:	1027883a 	mov	r19,r2
    5b54:	dc400b84 	addi	r17,sp,46
    5b58:	8009883a 	mov	r4,r16
    5b5c:	01400284 	movi	r5,10
    5b60:	000bf780 	call	bf78 <__modsi3>
    5b64:	10800c04 	addi	r2,r2,48
    5b68:	8c7fffc4 	addi	r17,r17,-1
    5b6c:	8009883a 	mov	r4,r16
    5b70:	01400284 	movi	r5,10
    5b74:	88800005 	stb	r2,0(r17)
    5b78:	000bf180 	call	bf18 <__divsi3>
    5b7c:	1021883a 	mov	r16,r2
    5b80:	98bff516 	blt	r19,r2,5b58 <___vfprintf_internal_r+0x1b24>
    5b84:	10c00c04 	addi	r3,r2,48
    5b88:	d88009c4 	addi	r2,sp,39
    5b8c:	108001c4 	addi	r2,r2,7
    5b90:	897fffc4 	addi	r5,r17,-1
    5b94:	88ffffc5 	stb	r3,-1(r17)
    5b98:	2880a72e 	bgeu	r5,r2,5e38 <___vfprintf_internal_r+0x1e04>
    5b9c:	1009883a 	mov	r4,r2
    5ba0:	d9800804 	addi	r6,sp,32
    5ba4:	d8c00884 	addi	r3,sp,34
    5ba8:	28800003 	ldbu	r2,0(r5)
    5bac:	29400044 	addi	r5,r5,1
    5bb0:	18800005 	stb	r2,0(r3)
    5bb4:	18c00044 	addi	r3,r3,1
    5bb8:	293ffb36 	bltu	r5,r4,5ba8 <___vfprintf_internal_r+0x1b74>
    5bbc:	1987c83a 	sub	r3,r3,r6
    5bc0:	00800044 	movi	r2,1
    5bc4:	d8c14815 	stw	r3,1312(sp)
    5bc8:	90cf883a 	add	r7,r18,r3
    5bcc:	1480960e 	bge	r2,r18,5e28 <___vfprintf_internal_r+0x1df4>
    5bd0:	39c00044 	addi	r7,r7,1
    5bd4:	d9c14515 	stw	r7,1300(sp)
    5bd8:	38003416 	blt	r7,zero,5cac <___vfprintf_internal_r+0x1c78>
    5bdc:	e0803fcc 	andi	r2,fp,255
    5be0:	1080201c 	xori	r2,r2,128
    5be4:	10bfe004 	addi	r2,r2,-128
    5be8:	10004e26 	beq	r2,zero,5d24 <___vfprintf_internal_r+0x1cf0>
    5bec:	00800b44 	movi	r2,45
    5bf0:	dc814715 	stw	r18,1308(sp)
    5bf4:	d8014615 	stw	zero,1304(sp)
    5bf8:	d8800405 	stb	r2,16(sp)
    5bfc:	003bb106 	br	4ac4 <___vfprintf_internal_r+0xa90>
    5c00:	00800b44 	movi	r2,45
    5c04:	d8800405 	stb	r2,16(sp)
    5c08:	003d3306 	br	50d8 <___vfprintf_internal_r+0x10a4>
    5c0c:	d9014f17 	ldw	r4,1340(sp)
    5c10:	b00b883a 	mov	r5,r22
    5c14:	d9800c04 	addi	r6,sp,48
    5c18:	0003fdc0 	call	3fdc <__sprint_r>
    5c1c:	103abd1e 	bne	r2,zero,4714 <___vfprintf_internal_r+0x6e0>
    5c20:	003abb06 	br	4710 <___vfprintf_internal_r+0x6dc>
    5c24:	38800017 	ldw	r2,0(r7)
    5c28:	39c00104 	addi	r7,r7,4
    5c2c:	d9c14015 	stw	r7,1280(sp)
    5c30:	d9414b17 	ldw	r5,1324(sp)
    5c34:	d9c14017 	ldw	r7,1280(sp)
    5c38:	11400015 	stw	r5,0(r2)
    5c3c:	00395906 	br	41a4 <___vfprintf_internal_r+0x170>
    5c40:	980f883a 	mov	r7,r19
    5c44:	dcc14515 	stw	r19,1300(sp)
    5c48:	d8014615 	stw	zero,1304(sp)
    5c4c:	003b9b06 	br	4abc <___vfprintf_internal_r+0xa88>
    5c50:	0027883a 	mov	r19,zero
    5c54:	00397806 	br	4238 <___vfprintf_internal_r+0x204>
    5c58:	00c00074 	movhi	r3,1
    5c5c:	18fe5804 	addi	r3,r3,-1696
    5c60:	100f883a 	mov	r7,r2
    5c64:	d8814515 	stw	r2,1300(sp)
    5c68:	d8c14115 	stw	r3,1284(sp)
    5c6c:	0039e006 	br	43f0 <___vfprintf_internal_r+0x3bc>
    5c70:	00800074 	movhi	r2,1
    5c74:	10be5704 	addi	r2,r2,-1700
    5c78:	d8814115 	stw	r2,1284(sp)
    5c7c:	003d1c06 	br	50f0 <___vfprintf_internal_r+0x10bc>
    5c80:	d9414d17 	ldw	r5,1332(sp)
    5c84:	00801984 	movi	r2,102
    5c88:	28804926 	beq	r5,r2,5db0 <___vfprintf_internal_r+0x1d7c>
    5c8c:	200f883a 	mov	r7,r4
    5c90:	24805716 	blt	r4,r18,5df0 <___vfprintf_internal_r+0x1dbc>
    5c94:	d9414c17 	ldw	r5,1328(sp)
    5c98:	2880004c 	andi	r2,r5,1
    5c9c:	10000126 	beq	r2,zero,5ca4 <___vfprintf_internal_r+0x1c70>
    5ca0:	21c00044 	addi	r7,r4,1
    5ca4:	d9c14515 	stw	r7,1300(sp)
    5ca8:	383fcc0e 	bge	r7,zero,5bdc <___vfprintf_internal_r+0x1ba8>
    5cac:	d8014515 	stw	zero,1300(sp)
    5cb0:	003fca06 	br	5bdc <___vfprintf_internal_r+0x1ba8>
    5cb4:	d9000517 	ldw	r4,20(sp)
    5cb8:	00bfff04 	movi	r2,-4
    5cbc:	1100480e 	bge	r2,r4,5de0 <___vfprintf_internal_r+0x1dac>
    5cc0:	99004716 	blt	r19,r4,5de0 <___vfprintf_internal_r+0x1dac>
    5cc4:	d8c14d15 	stw	r3,1332(sp)
    5cc8:	003ff006 	br	5c8c <___vfprintf_internal_r+0x1c58>
    5ccc:	d8800717 	ldw	r2,28(sp)
    5cd0:	14bf8b2e 	bgeu	r2,r18,5b00 <___vfprintf_internal_r+0x1acc>
    5cd4:	9007883a 	mov	r3,r18
    5cd8:	01000c04 	movi	r4,48
    5cdc:	11000005 	stb	r4,0(r2)
    5ce0:	10800044 	addi	r2,r2,1
    5ce4:	d8800715 	stw	r2,28(sp)
    5ce8:	18bffc1e 	bne	r3,r2,5cdc <___vfprintf_internal_r+0x1ca8>
    5cec:	003f8406 	br	5b00 <___vfprintf_internal_r+0x1acc>
    5cf0:	d8814117 	ldw	r2,1284(sp)
    5cf4:	10c00007 	ldb	r3,0(r2)
    5cf8:	00800c04 	movi	r2,48
    5cfc:	18805b26 	beq	r3,r2,5e6c <___vfprintf_internal_r+0x1e38>
    5d00:	d9000517 	ldw	r4,20(sp)
    5d04:	9125883a 	add	r18,r18,r4
    5d08:	003f7506 	br	5ae0 <___vfprintf_internal_r+0x1aac>
    5d0c:	d9014c17 	ldw	r4,1328(sp)
    5d10:	2080004c 	andi	r2,r4,1
    5d14:	1005003a 	cmpeq	r2,r2,zero
    5d18:	103f6a26 	beq	r2,zero,5ac4 <___vfprintf_internal_r+0x1a90>
    5d1c:	d8800717 	ldw	r2,28(sp)
    5d20:	003f7706 	br	5b00 <___vfprintf_internal_r+0x1acc>
    5d24:	d9c14515 	stw	r7,1300(sp)
    5d28:	38004d16 	blt	r7,zero,5e60 <___vfprintf_internal_r+0x1e2c>
    5d2c:	dc814715 	stw	r18,1308(sp)
    5d30:	d8014615 	stw	zero,1304(sp)
    5d34:	003b6106 	br	4abc <___vfprintf_internal_r+0xa88>
    5d38:	d9014f17 	ldw	r4,1340(sp)
    5d3c:	d8800504 	addi	r2,sp,20
    5d40:	d8800115 	stw	r2,4(sp)
    5d44:	d8c00604 	addi	r3,sp,24
    5d48:	d8800704 	addi	r2,sp,28
    5d4c:	800b883a 	mov	r5,r16
    5d50:	880d883a 	mov	r6,r17
    5d54:	01c000c4 	movi	r7,3
    5d58:	d8c00215 	stw	r3,8(sp)
    5d5c:	d8800315 	stw	r2,12(sp)
    5d60:	dcc00015 	stw	r19,0(sp)
    5d64:	9829883a 	mov	r20,r19
    5d68:	00062580 	call	6258 <_dtoa_r>
    5d6c:	d8814115 	stw	r2,1284(sp)
    5d70:	003f5106 	br	5ab8 <___vfprintf_internal_r+0x1a84>
    5d74:	d8c14217 	ldw	r3,1288(sp)
    5d78:	d9014317 	ldw	r4,1292(sp)
    5d7c:	07000b44 	movi	fp,45
    5d80:	1821883a 	mov	r16,r3
    5d84:	2460003c 	xorhi	r17,r4,32768
    5d88:	003f3106 	br	5a50 <___vfprintf_internal_r+0x1a1c>
    5d8c:	9d000044 	addi	r20,r19,1
    5d90:	003f3906 	br	5a78 <___vfprintf_internal_r+0x1a44>
    5d94:	983f251e 	bne	r19,zero,5a2c <___vfprintf_internal_r+0x19f8>
    5d98:	04c00044 	movi	r19,1
    5d9c:	003f2306 	br	5a2c <___vfprintf_internal_r+0x19f8>
    5da0:	04c00184 	movi	r19,6
    5da4:	003f2106 	br	5a2c <___vfprintf_internal_r+0x19f8>
    5da8:	d8014515 	stw	zero,1300(sp)
    5dac:	003eee06 	br	5968 <___vfprintf_internal_r+0x1934>
    5db0:	200f883a 	mov	r7,r4
    5db4:	0100370e 	bge	zero,r4,5e94 <___vfprintf_internal_r+0x1e60>
    5db8:	9800031e 	bne	r19,zero,5dc8 <___vfprintf_internal_r+0x1d94>
    5dbc:	d9814c17 	ldw	r6,1328(sp)
    5dc0:	3080004c 	andi	r2,r6,1
    5dc4:	103fb726 	beq	r2,zero,5ca4 <___vfprintf_internal_r+0x1c70>
    5dc8:	20800044 	addi	r2,r4,1
    5dcc:	98a7883a 	add	r19,r19,r2
    5dd0:	dcc14515 	stw	r19,1300(sp)
    5dd4:	980f883a 	mov	r7,r19
    5dd8:	983f800e 	bge	r19,zero,5bdc <___vfprintf_internal_r+0x1ba8>
    5ddc:	003fb306 	br	5cac <___vfprintf_internal_r+0x1c78>
    5de0:	d9814d17 	ldw	r6,1332(sp)
    5de4:	31bfff84 	addi	r6,r6,-2
    5de8:	d9814d15 	stw	r6,1332(sp)
    5dec:	003f4c06 	br	5b20 <___vfprintf_internal_r+0x1aec>
    5df0:	0100180e 	bge	zero,r4,5e54 <___vfprintf_internal_r+0x1e20>
    5df4:	00800044 	movi	r2,1
    5df8:	1485883a 	add	r2,r2,r18
    5dfc:	d8814515 	stw	r2,1300(sp)
    5e00:	100f883a 	mov	r7,r2
    5e04:	103f750e 	bge	r2,zero,5bdc <___vfprintf_internal_r+0x1ba8>
    5e08:	003fa806 	br	5cac <___vfprintf_internal_r+0x1c78>
    5e0c:	80c00c04 	addi	r3,r16,48
    5e10:	00800c04 	movi	r2,48
    5e14:	d8c008c5 	stb	r3,35(sp)
    5e18:	d9800804 	addi	r6,sp,32
    5e1c:	d8c00904 	addi	r3,sp,36
    5e20:	d8800885 	stb	r2,34(sp)
    5e24:	003f6506 	br	5bbc <___vfprintf_internal_r+0x1b88>
    5e28:	d9014c17 	ldw	r4,1328(sp)
    5e2c:	2084703a 	and	r2,r4,r2
    5e30:	103f9c26 	beq	r2,zero,5ca4 <___vfprintf_internal_r+0x1c70>
    5e34:	003f6606 	br	5bd0 <___vfprintf_internal_r+0x1b9c>
    5e38:	d9800804 	addi	r6,sp,32
    5e3c:	d8c00884 	addi	r3,sp,34
    5e40:	003f5e06 	br	5bbc <___vfprintf_internal_r+0x1b88>
    5e44:	00800b44 	movi	r2,45
    5e48:	0121c83a 	sub	r16,zero,r4
    5e4c:	d8800845 	stb	r2,33(sp)
    5e50:	003f3d06 	br	5b48 <___vfprintf_internal_r+0x1b14>
    5e54:	00800084 	movi	r2,2
    5e58:	1105c83a 	sub	r2,r2,r4
    5e5c:	003fe606 	br	5df8 <___vfprintf_internal_r+0x1dc4>
    5e60:	d8014515 	stw	zero,1300(sp)
    5e64:	dc814715 	stw	r18,1308(sp)
    5e68:	003fb106 	br	5d30 <___vfprintf_internal_r+0x1cfc>
    5e6c:	000d883a 	mov	r6,zero
    5e70:	000f883a 	mov	r7,zero
    5e74:	8009883a 	mov	r4,r16
    5e78:	880b883a 	mov	r5,r17
    5e7c:	00034980 	call	3498 <__nedf2>
    5e80:	103f9f26 	beq	r2,zero,5d00 <___vfprintf_internal_r+0x1ccc>
    5e84:	00800044 	movi	r2,1
    5e88:	1509c83a 	sub	r4,r2,r20
    5e8c:	d9000515 	stw	r4,20(sp)
    5e90:	003f9b06 	br	5d00 <___vfprintf_internal_r+0x1ccc>
    5e94:	98000d1e 	bne	r19,zero,5ecc <___vfprintf_internal_r+0x1e98>
    5e98:	d8c14c17 	ldw	r3,1328(sp)
    5e9c:	1880004c 	andi	r2,r3,1
    5ea0:	10000a1e 	bne	r2,zero,5ecc <___vfprintf_internal_r+0x1e98>
    5ea4:	01000044 	movi	r4,1
    5ea8:	200f883a 	mov	r7,r4
    5eac:	d9014515 	stw	r4,1300(sp)
    5eb0:	003f4a06 	br	5bdc <___vfprintf_internal_r+0x1ba8>
    5eb4:	3cc00017 	ldw	r19,0(r7)
    5eb8:	39c00104 	addi	r7,r7,4
    5ebc:	983d0e0e 	bge	r19,zero,52f8 <___vfprintf_internal_r+0x12c4>
    5ec0:	b8c00007 	ldb	r3,0(r23)
    5ec4:	04ffffc4 	movi	r19,-1
    5ec8:	0038d906 	br	4230 <___vfprintf_internal_r+0x1fc>
    5ecc:	9cc00084 	addi	r19,r19,2
    5ed0:	dcc14515 	stw	r19,1300(sp)
    5ed4:	980f883a 	mov	r7,r19
    5ed8:	983f400e 	bge	r19,zero,5bdc <___vfprintf_internal_r+0x1ba8>
    5edc:	003f7306 	br	5cac <___vfprintf_internal_r+0x1c78>

00005ee0 <__vfprintf_internal>:
    5ee0:	00800074 	movhi	r2,1
    5ee4:	10864d04 	addi	r2,r2,6452
    5ee8:	2013883a 	mov	r9,r4
    5eec:	11000017 	ldw	r4,0(r2)
    5ef0:	2805883a 	mov	r2,r5
    5ef4:	300f883a 	mov	r7,r6
    5ef8:	480b883a 	mov	r5,r9
    5efc:	100d883a 	mov	r6,r2
    5f00:	00040341 	jmpi	4034 <___vfprintf_internal_r>

00005f04 <__swsetup_r>:
    5f04:	00800074 	movhi	r2,1
    5f08:	10864d04 	addi	r2,r2,6452
    5f0c:	10c00017 	ldw	r3,0(r2)
    5f10:	defffd04 	addi	sp,sp,-12
    5f14:	dc400115 	stw	r17,4(sp)
    5f18:	dc000015 	stw	r16,0(sp)
    5f1c:	dfc00215 	stw	ra,8(sp)
    5f20:	2023883a 	mov	r17,r4
    5f24:	2821883a 	mov	r16,r5
    5f28:	18000226 	beq	r3,zero,5f34 <__swsetup_r+0x30>
    5f2c:	18800e17 	ldw	r2,56(r3)
    5f30:	10001f26 	beq	r2,zero,5fb0 <__swsetup_r+0xac>
    5f34:	8100030b 	ldhu	r4,12(r16)
    5f38:	2080020c 	andi	r2,r4,8
    5f3c:	10002826 	beq	r2,zero,5fe0 <__swsetup_r+0xdc>
    5f40:	81400417 	ldw	r5,16(r16)
    5f44:	28001d26 	beq	r5,zero,5fbc <__swsetup_r+0xb8>
    5f48:	2080004c 	andi	r2,r4,1
    5f4c:	1005003a 	cmpeq	r2,r2,zero
    5f50:	10000b26 	beq	r2,zero,5f80 <__swsetup_r+0x7c>
    5f54:	2080008c 	andi	r2,r4,2
    5f58:	10001226 	beq	r2,zero,5fa4 <__swsetup_r+0xa0>
    5f5c:	0005883a 	mov	r2,zero
    5f60:	80800215 	stw	r2,8(r16)
    5f64:	28000b26 	beq	r5,zero,5f94 <__swsetup_r+0x90>
    5f68:	0005883a 	mov	r2,zero
    5f6c:	dfc00217 	ldw	ra,8(sp)
    5f70:	dc400117 	ldw	r17,4(sp)
    5f74:	dc000017 	ldw	r16,0(sp)
    5f78:	dec00304 	addi	sp,sp,12
    5f7c:	f800283a 	ret
    5f80:	80800517 	ldw	r2,20(r16)
    5f84:	80000215 	stw	zero,8(r16)
    5f88:	0085c83a 	sub	r2,zero,r2
    5f8c:	80800615 	stw	r2,24(r16)
    5f90:	283ff51e 	bne	r5,zero,5f68 <__swsetup_r+0x64>
    5f94:	2080200c 	andi	r2,r4,128
    5f98:	103ff326 	beq	r2,zero,5f68 <__swsetup_r+0x64>
    5f9c:	00bfffc4 	movi	r2,-1
    5fa0:	003ff206 	br	5f6c <__swsetup_r+0x68>
    5fa4:	80800517 	ldw	r2,20(r16)
    5fa8:	80800215 	stw	r2,8(r16)
    5fac:	003fed06 	br	5f64 <__swsetup_r+0x60>
    5fb0:	1809883a 	mov	r4,r3
    5fb4:	0007aa40 	call	7aa4 <__sinit>
    5fb8:	003fde06 	br	5f34 <__swsetup_r+0x30>
    5fbc:	20c0a00c 	andi	r3,r4,640
    5fc0:	00808004 	movi	r2,512
    5fc4:	18bfe026 	beq	r3,r2,5f48 <__swsetup_r+0x44>
    5fc8:	8809883a 	mov	r4,r17
    5fcc:	800b883a 	mov	r5,r16
    5fd0:	000881c0 	call	881c <__smakebuf_r>
    5fd4:	8100030b 	ldhu	r4,12(r16)
    5fd8:	81400417 	ldw	r5,16(r16)
    5fdc:	003fda06 	br	5f48 <__swsetup_r+0x44>
    5fe0:	2080040c 	andi	r2,r4,16
    5fe4:	103fed26 	beq	r2,zero,5f9c <__swsetup_r+0x98>
    5fe8:	2080010c 	andi	r2,r4,4
    5fec:	10001226 	beq	r2,zero,6038 <__swsetup_r+0x134>
    5ff0:	81400c17 	ldw	r5,48(r16)
    5ff4:	28000526 	beq	r5,zero,600c <__swsetup_r+0x108>
    5ff8:	80801004 	addi	r2,r16,64
    5ffc:	28800226 	beq	r5,r2,6008 <__swsetup_r+0x104>
    6000:	8809883a 	mov	r4,r17
    6004:	0007e280 	call	7e28 <_free_r>
    6008:	80000c15 	stw	zero,48(r16)
    600c:	8080030b 	ldhu	r2,12(r16)
    6010:	81400417 	ldw	r5,16(r16)
    6014:	80000115 	stw	zero,4(r16)
    6018:	10bff6cc 	andi	r2,r2,65499
    601c:	8080030d 	sth	r2,12(r16)
    6020:	81400015 	stw	r5,0(r16)
    6024:	8080030b 	ldhu	r2,12(r16)
    6028:	10800214 	ori	r2,r2,8
    602c:	113fffcc 	andi	r4,r2,65535
    6030:	8080030d 	sth	r2,12(r16)
    6034:	003fc306 	br	5f44 <__swsetup_r+0x40>
    6038:	81400417 	ldw	r5,16(r16)
    603c:	003ff906 	br	6024 <__swsetup_r+0x120>

00006040 <quorem>:
    6040:	28c00417 	ldw	r3,16(r5)
    6044:	20800417 	ldw	r2,16(r4)
    6048:	defff604 	addi	sp,sp,-40
    604c:	ddc00715 	stw	r23,28(sp)
    6050:	dd400515 	stw	r21,20(sp)
    6054:	dfc00915 	stw	ra,36(sp)
    6058:	df000815 	stw	fp,32(sp)
    605c:	dd800615 	stw	r22,24(sp)
    6060:	dd000415 	stw	r20,16(sp)
    6064:	dcc00315 	stw	r19,12(sp)
    6068:	dc800215 	stw	r18,8(sp)
    606c:	dc400115 	stw	r17,4(sp)
    6070:	dc000015 	stw	r16,0(sp)
    6074:	202f883a 	mov	r23,r4
    6078:	282b883a 	mov	r21,r5
    607c:	10c07416 	blt	r2,r3,6250 <quorem+0x210>
    6080:	1c7fffc4 	addi	r17,r3,-1
    6084:	8c45883a 	add	r2,r17,r17
    6088:	1085883a 	add	r2,r2,r2
    608c:	2c000504 	addi	r16,r5,20
    6090:	24c00504 	addi	r19,r4,20
    6094:	14ed883a 	add	r22,r2,r19
    6098:	80a5883a 	add	r18,r16,r2
    609c:	b7000017 	ldw	fp,0(r22)
    60a0:	91400017 	ldw	r5,0(r18)
    60a4:	e009883a 	mov	r4,fp
    60a8:	29400044 	addi	r5,r5,1
    60ac:	000bfd80 	call	bfd8 <__udivsi3>
    60b0:	1029883a 	mov	r20,r2
    60b4:	10003c1e 	bne	r2,zero,61a8 <quorem+0x168>
    60b8:	a80b883a 	mov	r5,r21
    60bc:	b809883a 	mov	r4,r23
    60c0:	00094a80 	call	94a8 <__mcmp>
    60c4:	10002b16 	blt	r2,zero,6174 <quorem+0x134>
    60c8:	a5000044 	addi	r20,r20,1
    60cc:	980f883a 	mov	r7,r19
    60d0:	0011883a 	mov	r8,zero
    60d4:	0009883a 	mov	r4,zero
    60d8:	81400017 	ldw	r5,0(r16)
    60dc:	38c00017 	ldw	r3,0(r7)
    60e0:	84000104 	addi	r16,r16,4
    60e4:	28bfffcc 	andi	r2,r5,65535
    60e8:	2085883a 	add	r2,r4,r2
    60ec:	11bfffcc 	andi	r6,r2,65535
    60f0:	193fffcc 	andi	r4,r3,65535
    60f4:	1004d43a 	srli	r2,r2,16
    60f8:	280ad43a 	srli	r5,r5,16
    60fc:	2189c83a 	sub	r4,r4,r6
    6100:	2209883a 	add	r4,r4,r8
    6104:	1806d43a 	srli	r3,r3,16
    6108:	288b883a 	add	r5,r5,r2
    610c:	200dd43a 	srai	r6,r4,16
    6110:	28bfffcc 	andi	r2,r5,65535
    6114:	1887c83a 	sub	r3,r3,r2
    6118:	1987883a 	add	r3,r3,r6
    611c:	3900000d 	sth	r4,0(r7)
    6120:	38c0008d 	sth	r3,2(r7)
    6124:	2808d43a 	srli	r4,r5,16
    6128:	39c00104 	addi	r7,r7,4
    612c:	1811d43a 	srai	r8,r3,16
    6130:	943fe92e 	bgeu	r18,r16,60d8 <quorem+0x98>
    6134:	8c45883a 	add	r2,r17,r17
    6138:	1085883a 	add	r2,r2,r2
    613c:	9885883a 	add	r2,r19,r2
    6140:	10c00017 	ldw	r3,0(r2)
    6144:	18000b1e 	bne	r3,zero,6174 <quorem+0x134>
    6148:	113fff04 	addi	r4,r2,-4
    614c:	9900082e 	bgeu	r19,r4,6170 <quorem+0x130>
    6150:	10bfff17 	ldw	r2,-4(r2)
    6154:	10000326 	beq	r2,zero,6164 <quorem+0x124>
    6158:	00000506 	br	6170 <quorem+0x130>
    615c:	20800017 	ldw	r2,0(r4)
    6160:	1000031e 	bne	r2,zero,6170 <quorem+0x130>
    6164:	213fff04 	addi	r4,r4,-4
    6168:	8c7fffc4 	addi	r17,r17,-1
    616c:	993ffb36 	bltu	r19,r4,615c <quorem+0x11c>
    6170:	bc400415 	stw	r17,16(r23)
    6174:	a005883a 	mov	r2,r20
    6178:	dfc00917 	ldw	ra,36(sp)
    617c:	df000817 	ldw	fp,32(sp)
    6180:	ddc00717 	ldw	r23,28(sp)
    6184:	dd800617 	ldw	r22,24(sp)
    6188:	dd400517 	ldw	r21,20(sp)
    618c:	dd000417 	ldw	r20,16(sp)
    6190:	dcc00317 	ldw	r19,12(sp)
    6194:	dc800217 	ldw	r18,8(sp)
    6198:	dc400117 	ldw	r17,4(sp)
    619c:	dc000017 	ldw	r16,0(sp)
    61a0:	dec00a04 	addi	sp,sp,40
    61a4:	f800283a 	ret
    61a8:	980f883a 	mov	r7,r19
    61ac:	8011883a 	mov	r8,r16
    61b0:	0013883a 	mov	r9,zero
    61b4:	000d883a 	mov	r6,zero
    61b8:	40c00017 	ldw	r3,0(r8)
    61bc:	39000017 	ldw	r4,0(r7)
    61c0:	42000104 	addi	r8,r8,4
    61c4:	18bfffcc 	andi	r2,r3,65535
    61c8:	a085383a 	mul	r2,r20,r2
    61cc:	1806d43a 	srli	r3,r3,16
    61d0:	217fffcc 	andi	r5,r4,65535
    61d4:	3085883a 	add	r2,r6,r2
    61d8:	11bfffcc 	andi	r6,r2,65535
    61dc:	a0c7383a 	mul	r3,r20,r3
    61e0:	1004d43a 	srli	r2,r2,16
    61e4:	298bc83a 	sub	r5,r5,r6
    61e8:	2a4b883a 	add	r5,r5,r9
    61ec:	2008d43a 	srli	r4,r4,16
    61f0:	1887883a 	add	r3,r3,r2
    61f4:	280dd43a 	srai	r6,r5,16
    61f8:	18bfffcc 	andi	r2,r3,65535
    61fc:	2089c83a 	sub	r4,r4,r2
    6200:	2189883a 	add	r4,r4,r6
    6204:	3900008d 	sth	r4,2(r7)
    6208:	3940000d 	sth	r5,0(r7)
    620c:	180cd43a 	srli	r6,r3,16
    6210:	39c00104 	addi	r7,r7,4
    6214:	2013d43a 	srai	r9,r4,16
    6218:	923fe72e 	bgeu	r18,r8,61b8 <quorem+0x178>
    621c:	e03fa61e 	bne	fp,zero,60b8 <quorem+0x78>
    6220:	b0ffff04 	addi	r3,r22,-4
    6224:	98c0082e 	bgeu	r19,r3,6248 <quorem+0x208>
    6228:	b0bfff17 	ldw	r2,-4(r22)
    622c:	10000326 	beq	r2,zero,623c <quorem+0x1fc>
    6230:	00000506 	br	6248 <quorem+0x208>
    6234:	18800017 	ldw	r2,0(r3)
    6238:	1000031e 	bne	r2,zero,6248 <quorem+0x208>
    623c:	18ffff04 	addi	r3,r3,-4
    6240:	8c7fffc4 	addi	r17,r17,-1
    6244:	98fffb36 	bltu	r19,r3,6234 <quorem+0x1f4>
    6248:	bc400415 	stw	r17,16(r23)
    624c:	003f9a06 	br	60b8 <quorem+0x78>
    6250:	0005883a 	mov	r2,zero
    6254:	003fc806 	br	6178 <quorem+0x138>

00006258 <_dtoa_r>:
    6258:	22001017 	ldw	r8,64(r4)
    625c:	deffda04 	addi	sp,sp,-152
    6260:	dd402115 	stw	r21,132(sp)
    6264:	dd002015 	stw	r20,128(sp)
    6268:	dc801e15 	stw	r18,120(sp)
    626c:	dc401d15 	stw	r17,116(sp)
    6270:	dfc02515 	stw	ra,148(sp)
    6274:	df002415 	stw	fp,144(sp)
    6278:	ddc02315 	stw	r23,140(sp)
    627c:	dd802215 	stw	r22,136(sp)
    6280:	dcc01f15 	stw	r19,124(sp)
    6284:	dc001c15 	stw	r16,112(sp)
    6288:	d9001615 	stw	r4,88(sp)
    628c:	3023883a 	mov	r17,r6
    6290:	2829883a 	mov	r20,r5
    6294:	d9c01715 	stw	r7,92(sp)
    6298:	dc802817 	ldw	r18,160(sp)
    629c:	302b883a 	mov	r21,r6
    62a0:	40000a26 	beq	r8,zero,62cc <_dtoa_r+0x74>
    62a4:	20801117 	ldw	r2,68(r4)
    62a8:	400b883a 	mov	r5,r8
    62ac:	40800115 	stw	r2,4(r8)
    62b0:	20c01117 	ldw	r3,68(r4)
    62b4:	00800044 	movi	r2,1
    62b8:	10c4983a 	sll	r2,r2,r3
    62bc:	40800215 	stw	r2,8(r8)
    62c0:	000934c0 	call	934c <_Bfree>
    62c4:	d8c01617 	ldw	r3,88(sp)
    62c8:	18001015 	stw	zero,64(r3)
    62cc:	8800a316 	blt	r17,zero,655c <_dtoa_r+0x304>
    62d0:	90000015 	stw	zero,0(r18)
    62d4:	a8dffc2c 	andhi	r3,r21,32752
    62d8:	009ffc34 	movhi	r2,32752
    62dc:	18809126 	beq	r3,r2,6524 <_dtoa_r+0x2cc>
    62e0:	000d883a 	mov	r6,zero
    62e4:	000f883a 	mov	r7,zero
    62e8:	a009883a 	mov	r4,r20
    62ec:	a80b883a 	mov	r5,r21
    62f0:	dd001215 	stw	r20,72(sp)
    62f4:	dd401315 	stw	r21,76(sp)
    62f8:	00034980 	call	3498 <__nedf2>
    62fc:	1000171e 	bne	r2,zero,635c <_dtoa_r+0x104>
    6300:	d9802717 	ldw	r6,156(sp)
    6304:	00800044 	movi	r2,1
    6308:	30800015 	stw	r2,0(r6)
    630c:	d8802917 	ldw	r2,164(sp)
    6310:	10029b26 	beq	r2,zero,6d80 <_dtoa_r+0xb28>
    6314:	d9002917 	ldw	r4,164(sp)
    6318:	00800074 	movhi	r2,1
    631c:	10be6644 	addi	r2,r2,-1639
    6320:	10ffffc4 	addi	r3,r2,-1
    6324:	20800015 	stw	r2,0(r4)
    6328:	1805883a 	mov	r2,r3
    632c:	dfc02517 	ldw	ra,148(sp)
    6330:	df002417 	ldw	fp,144(sp)
    6334:	ddc02317 	ldw	r23,140(sp)
    6338:	dd802217 	ldw	r22,136(sp)
    633c:	dd402117 	ldw	r21,132(sp)
    6340:	dd002017 	ldw	r20,128(sp)
    6344:	dcc01f17 	ldw	r19,124(sp)
    6348:	dc801e17 	ldw	r18,120(sp)
    634c:	dc401d17 	ldw	r17,116(sp)
    6350:	dc001c17 	ldw	r16,112(sp)
    6354:	dec02604 	addi	sp,sp,152
    6358:	f800283a 	ret
    635c:	d9001617 	ldw	r4,88(sp)
    6360:	d9401217 	ldw	r5,72(sp)
    6364:	d8800104 	addi	r2,sp,4
    6368:	a80d883a 	mov	r6,r21
    636c:	d9c00204 	addi	r7,sp,8
    6370:	d8800015 	stw	r2,0(sp)
    6374:	00099880 	call	9988 <__d2b>
    6378:	d8800715 	stw	r2,28(sp)
    637c:	a804d53a 	srli	r2,r21,20
    6380:	1101ffcc 	andi	r4,r2,2047
    6384:	20008626 	beq	r4,zero,65a0 <_dtoa_r+0x348>
    6388:	d8c01217 	ldw	r3,72(sp)
    638c:	00800434 	movhi	r2,16
    6390:	10bfffc4 	addi	r2,r2,-1
    6394:	ddc00117 	ldw	r23,4(sp)
    6398:	a884703a 	and	r2,r21,r2
    639c:	1811883a 	mov	r8,r3
    63a0:	124ffc34 	orhi	r9,r2,16368
    63a4:	25bf0044 	addi	r22,r4,-1023
    63a8:	d8000815 	stw	zero,32(sp)
    63ac:	0005883a 	mov	r2,zero
    63b0:	00cffe34 	movhi	r3,16376
    63b4:	480b883a 	mov	r5,r9
    63b8:	4009883a 	mov	r4,r8
    63bc:	180f883a 	mov	r7,r3
    63c0:	100d883a 	mov	r6,r2
    63c4:	0002d000 	call	2d00 <__subdf3>
    63c8:	0218dbf4 	movhi	r8,25455
    63cc:	4210d844 	addi	r8,r8,17249
    63d0:	024ff4f4 	movhi	r9,16339
    63d4:	4a61e9c4 	addi	r9,r9,-30809
    63d8:	480f883a 	mov	r7,r9
    63dc:	400d883a 	mov	r6,r8
    63e0:	180b883a 	mov	r5,r3
    63e4:	1009883a 	mov	r4,r2
    63e8:	0002df40 	call	2df4 <__muldf3>
    63ec:	0222d874 	movhi	r8,35681
    63f0:	42322cc4 	addi	r8,r8,-14157
    63f4:	024ff1f4 	movhi	r9,16327
    63f8:	4a628a04 	addi	r9,r9,-30168
    63fc:	480f883a 	mov	r7,r9
    6400:	400d883a 	mov	r6,r8
    6404:	180b883a 	mov	r5,r3
    6408:	1009883a 	mov	r4,r2
    640c:	0002d800 	call	2d80 <__adddf3>
    6410:	b009883a 	mov	r4,r22
    6414:	1021883a 	mov	r16,r2
    6418:	1823883a 	mov	r17,r3
    641c:	00036b80 	call	36b8 <__floatsidf>
    6420:	021427f4 	movhi	r8,20639
    6424:	421e7ec4 	addi	r8,r8,31227
    6428:	024ff4f4 	movhi	r9,16339
    642c:	4a5104c4 	addi	r9,r9,17427
    6430:	480f883a 	mov	r7,r9
    6434:	400d883a 	mov	r6,r8
    6438:	180b883a 	mov	r5,r3
    643c:	1009883a 	mov	r4,r2
    6440:	0002df40 	call	2df4 <__muldf3>
    6444:	180f883a 	mov	r7,r3
    6448:	880b883a 	mov	r5,r17
    644c:	100d883a 	mov	r6,r2
    6450:	8009883a 	mov	r4,r16
    6454:	0002d800 	call	2d80 <__adddf3>
    6458:	1009883a 	mov	r4,r2
    645c:	180b883a 	mov	r5,r3
    6460:	1021883a 	mov	r16,r2
    6464:	1823883a 	mov	r17,r3
    6468:	00037b00 	call	37b0 <__fixdfsi>
    646c:	000d883a 	mov	r6,zero
    6470:	000f883a 	mov	r7,zero
    6474:	8009883a 	mov	r4,r16
    6478:	880b883a 	mov	r5,r17
    647c:	d8800d15 	stw	r2,52(sp)
    6480:	00035a80 	call	35a8 <__ltdf2>
    6484:	10031716 	blt	r2,zero,70e4 <_dtoa_r+0xe8c>
    6488:	d8c00d17 	ldw	r3,52(sp)
    648c:	00800584 	movi	r2,22
    6490:	10c1482e 	bgeu	r2,r3,69b4 <_dtoa_r+0x75c>
    6494:	01000044 	movi	r4,1
    6498:	d9000c15 	stw	r4,48(sp)
    649c:	bd85c83a 	sub	r2,r23,r22
    64a0:	11bfffc4 	addi	r6,r2,-1
    64a4:	30030b16 	blt	r6,zero,70d4 <_dtoa_r+0xe7c>
    64a8:	d9800a15 	stw	r6,40(sp)
    64ac:	d8001115 	stw	zero,68(sp)
    64b0:	d8c00d17 	ldw	r3,52(sp)
    64b4:	1802ff16 	blt	r3,zero,70b4 <_dtoa_r+0xe5c>
    64b8:	d9000a17 	ldw	r4,40(sp)
    64bc:	d8c00915 	stw	r3,36(sp)
    64c0:	d8001015 	stw	zero,64(sp)
    64c4:	20c9883a 	add	r4,r4,r3
    64c8:	d9000a15 	stw	r4,40(sp)
    64cc:	d9001717 	ldw	r4,92(sp)
    64d0:	00800244 	movi	r2,9
    64d4:	11004636 	bltu	r2,r4,65f0 <_dtoa_r+0x398>
    64d8:	00800144 	movi	r2,5
    64dc:	11020416 	blt	r2,r4,6cf0 <_dtoa_r+0xa98>
    64e0:	04400044 	movi	r17,1
    64e4:	d8c01717 	ldw	r3,92(sp)
    64e8:	00800144 	movi	r2,5
    64ec:	10c1ed36 	bltu	r2,r3,6ca4 <_dtoa_r+0xa4c>
    64f0:	18c5883a 	add	r2,r3,r3
    64f4:	1085883a 	add	r2,r2,r2
    64f8:	00c00034 	movhi	r3,0
    64fc:	18d94304 	addi	r3,r3,25868
    6500:	10c5883a 	add	r2,r2,r3
    6504:	11000017 	ldw	r4,0(r2)
    6508:	2000683a 	jmp	r4
    650c:	000065f8 	rdprs	zero,zero,407
    6510:	000065f8 	rdprs	zero,zero,407
    6514:	00006ff8 	rdprs	zero,zero,447
    6518:	00006fd0 	cmplti	zero,zero,447
    651c:	00007014 	movui	zero,448
    6520:	00007020 	cmpeqi	zero,zero,448
    6524:	d9002717 	ldw	r4,156(sp)
    6528:	0089c3c4 	movi	r2,9999
    652c:	20800015 	stw	r2,0(r4)
    6530:	a0001026 	beq	r20,zero,6574 <_dtoa_r+0x31c>
    6534:	00c00074 	movhi	r3,1
    6538:	18fe7204 	addi	r3,r3,-1592
    653c:	d9802917 	ldw	r6,164(sp)
    6540:	303f7926 	beq	r6,zero,6328 <_dtoa_r+0xd0>
    6544:	188000c7 	ldb	r2,3(r3)
    6548:	190000c4 	addi	r4,r3,3
    654c:	1000101e 	bne	r2,zero,6590 <_dtoa_r+0x338>
    6550:	d8802917 	ldw	r2,164(sp)
    6554:	11000015 	stw	r4,0(r2)
    6558:	003f7306 	br	6328 <_dtoa_r+0xd0>
    655c:	00a00034 	movhi	r2,32768
    6560:	10bfffc4 	addi	r2,r2,-1
    6564:	00c00044 	movi	r3,1
    6568:	88aa703a 	and	r21,r17,r2
    656c:	90c00015 	stw	r3,0(r18)
    6570:	003f5806 	br	62d4 <_dtoa_r+0x7c>
    6574:	00800434 	movhi	r2,16
    6578:	10bfffc4 	addi	r2,r2,-1
    657c:	a884703a 	and	r2,r21,r2
    6580:	103fec1e 	bne	r2,zero,6534 <_dtoa_r+0x2dc>
    6584:	00c00074 	movhi	r3,1
    6588:	18fe6f04 	addi	r3,r3,-1604
    658c:	003feb06 	br	653c <_dtoa_r+0x2e4>
    6590:	d8802917 	ldw	r2,164(sp)
    6594:	19000204 	addi	r4,r3,8
    6598:	11000015 	stw	r4,0(r2)
    659c:	003f6206 	br	6328 <_dtoa_r+0xd0>
    65a0:	ddc00117 	ldw	r23,4(sp)
    65a4:	d8800217 	ldw	r2,8(sp)
    65a8:	01000804 	movi	r4,32
    65ac:	b8c10c84 	addi	r3,r23,1074
    65b0:	18a3883a 	add	r17,r3,r2
    65b4:	2441b80e 	bge	r4,r17,6c98 <_dtoa_r+0xa40>
    65b8:	00c01004 	movi	r3,64
    65bc:	1c47c83a 	sub	r3,r3,r17
    65c0:	88bff804 	addi	r2,r17,-32
    65c4:	a8c6983a 	sll	r3,r21,r3
    65c8:	a084d83a 	srl	r2,r20,r2
    65cc:	1888b03a 	or	r4,r3,r2
    65d0:	000bd080 	call	bd08 <__floatunsidf>
    65d4:	1011883a 	mov	r8,r2
    65d8:	00bf8434 	movhi	r2,65040
    65dc:	01000044 	movi	r4,1
    65e0:	10d3883a 	add	r9,r2,r3
    65e4:	8dbef344 	addi	r22,r17,-1075
    65e8:	d9000815 	stw	r4,32(sp)
    65ec:	003f6f06 	br	63ac <_dtoa_r+0x154>
    65f0:	d8001715 	stw	zero,92(sp)
    65f4:	04400044 	movi	r17,1
    65f8:	00bfffc4 	movi	r2,-1
    65fc:	00c00044 	movi	r3,1
    6600:	d8800e15 	stw	r2,56(sp)
    6604:	d8002615 	stw	zero,152(sp)
    6608:	d8800f15 	stw	r2,60(sp)
    660c:	d8c00b15 	stw	r3,44(sp)
    6610:	1021883a 	mov	r16,r2
    6614:	d8801617 	ldw	r2,88(sp)
    6618:	10001115 	stw	zero,68(r2)
    661c:	d8801617 	ldw	r2,88(sp)
    6620:	11401117 	ldw	r5,68(r2)
    6624:	1009883a 	mov	r4,r2
    6628:	00098cc0 	call	98cc <_Balloc>
    662c:	d8c01617 	ldw	r3,88(sp)
    6630:	d8800515 	stw	r2,20(sp)
    6634:	18801015 	stw	r2,64(r3)
    6638:	00800384 	movi	r2,14
    663c:	14006836 	bltu	r2,r16,67e0 <_dtoa_r+0x588>
    6640:	8805003a 	cmpeq	r2,r17,zero
    6644:	1000661e 	bne	r2,zero,67e0 <_dtoa_r+0x588>
    6648:	d9000d17 	ldw	r4,52(sp)
    664c:	0102300e 	bge	zero,r4,6f10 <_dtoa_r+0xcb8>
    6650:	208003cc 	andi	r2,r4,15
    6654:	100490fa 	slli	r2,r2,3
    6658:	2025d13a 	srai	r18,r4,4
    665c:	00c00074 	movhi	r3,1
    6660:	18fe8304 	addi	r3,r3,-1524
    6664:	10c5883a 	add	r2,r2,r3
    6668:	90c0040c 	andi	r3,r18,16
    666c:	14000017 	ldw	r16,0(r2)
    6670:	14400117 	ldw	r17,4(r2)
    6674:	18036a1e 	bne	r3,zero,7420 <_dtoa_r+0x11c8>
    6678:	05800084 	movi	r22,2
    667c:	90001026 	beq	r18,zero,66c0 <_dtoa_r+0x468>
    6680:	04c00074 	movhi	r19,1
    6684:	9cfeb504 	addi	r19,r19,-1324
    6688:	9080004c 	andi	r2,r18,1
    668c:	1005003a 	cmpeq	r2,r2,zero
    6690:	1000081e 	bne	r2,zero,66b4 <_dtoa_r+0x45c>
    6694:	99800017 	ldw	r6,0(r19)
    6698:	99c00117 	ldw	r7,4(r19)
    669c:	880b883a 	mov	r5,r17
    66a0:	8009883a 	mov	r4,r16
    66a4:	0002df40 	call	2df4 <__muldf3>
    66a8:	1021883a 	mov	r16,r2
    66ac:	b5800044 	addi	r22,r22,1
    66b0:	1823883a 	mov	r17,r3
    66b4:	9025d07a 	srai	r18,r18,1
    66b8:	9cc00204 	addi	r19,r19,8
    66bc:	903ff21e 	bne	r18,zero,6688 <_dtoa_r+0x430>
    66c0:	a80b883a 	mov	r5,r21
    66c4:	a009883a 	mov	r4,r20
    66c8:	880f883a 	mov	r7,r17
    66cc:	800d883a 	mov	r6,r16
    66d0:	00031b80 	call	31b8 <__divdf3>
    66d4:	1029883a 	mov	r20,r2
    66d8:	182b883a 	mov	r21,r3
    66dc:	d8c00c17 	ldw	r3,48(sp)
    66e0:	1805003a 	cmpeq	r2,r3,zero
    66e4:	1000081e 	bne	r2,zero,6708 <_dtoa_r+0x4b0>
    66e8:	0005883a 	mov	r2,zero
    66ec:	00cffc34 	movhi	r3,16368
    66f0:	180f883a 	mov	r7,r3
    66f4:	a009883a 	mov	r4,r20
    66f8:	a80b883a 	mov	r5,r21
    66fc:	100d883a 	mov	r6,r2
    6700:	00035a80 	call	35a8 <__ltdf2>
    6704:	1003fe16 	blt	r2,zero,7700 <_dtoa_r+0x14a8>
    6708:	b009883a 	mov	r4,r22
    670c:	00036b80 	call	36b8 <__floatsidf>
    6710:	180b883a 	mov	r5,r3
    6714:	1009883a 	mov	r4,r2
    6718:	a00d883a 	mov	r6,r20
    671c:	a80f883a 	mov	r7,r21
    6720:	0002df40 	call	2df4 <__muldf3>
    6724:	0011883a 	mov	r8,zero
    6728:	02500734 	movhi	r9,16412
    672c:	1009883a 	mov	r4,r2
    6730:	180b883a 	mov	r5,r3
    6734:	480f883a 	mov	r7,r9
    6738:	400d883a 	mov	r6,r8
    673c:	0002d800 	call	2d80 <__adddf3>
    6740:	d9000f17 	ldw	r4,60(sp)
    6744:	102d883a 	mov	r22,r2
    6748:	00bf3034 	movhi	r2,64704
    674c:	18b9883a 	add	fp,r3,r2
    6750:	e02f883a 	mov	r23,fp
    6754:	20028f1e 	bne	r4,zero,7194 <_dtoa_r+0xf3c>
    6758:	0005883a 	mov	r2,zero
    675c:	00d00534 	movhi	r3,16404
    6760:	a009883a 	mov	r4,r20
    6764:	a80b883a 	mov	r5,r21
    6768:	180f883a 	mov	r7,r3
    676c:	100d883a 	mov	r6,r2
    6770:	0002d000 	call	2d00 <__subdf3>
    6774:	1009883a 	mov	r4,r2
    6778:	e00f883a 	mov	r7,fp
    677c:	180b883a 	mov	r5,r3
    6780:	b00d883a 	mov	r6,r22
    6784:	1025883a 	mov	r18,r2
    6788:	1827883a 	mov	r19,r3
    678c:	00035200 	call	3520 <__gtdf2>
    6790:	00834f16 	blt	zero,r2,74d0 <_dtoa_r+0x1278>
    6794:	e0e0003c 	xorhi	r3,fp,32768
    6798:	9009883a 	mov	r4,r18
    679c:	980b883a 	mov	r5,r19
    67a0:	180f883a 	mov	r7,r3
    67a4:	b00d883a 	mov	r6,r22
    67a8:	00035a80 	call	35a8 <__ltdf2>
    67ac:	1000080e 	bge	r2,zero,67d0 <_dtoa_r+0x578>
    67b0:	0027883a 	mov	r19,zero
    67b4:	0025883a 	mov	r18,zero
    67b8:	d8802617 	ldw	r2,152(sp)
    67bc:	df000517 	ldw	fp,20(sp)
    67c0:	d8000615 	stw	zero,24(sp)
    67c4:	0084303a 	nor	r2,zero,r2
    67c8:	d8800d15 	stw	r2,52(sp)
    67cc:	00019b06 	br	6e3c <_dtoa_r+0xbe4>
    67d0:	d9801217 	ldw	r6,72(sp)
    67d4:	d8801317 	ldw	r2,76(sp)
    67d8:	3029883a 	mov	r20,r6
    67dc:	102b883a 	mov	r21,r2
    67e0:	d8c00217 	ldw	r3,8(sp)
    67e4:	18008516 	blt	r3,zero,69fc <_dtoa_r+0x7a4>
    67e8:	d9000d17 	ldw	r4,52(sp)
    67ec:	00800384 	movi	r2,14
    67f0:	11008216 	blt	r2,r4,69fc <_dtoa_r+0x7a4>
    67f4:	200490fa 	slli	r2,r4,3
    67f8:	d9802617 	ldw	r6,152(sp)
    67fc:	00c00074 	movhi	r3,1
    6800:	18fe8304 	addi	r3,r3,-1524
    6804:	10c5883a 	add	r2,r2,r3
    6808:	14800017 	ldw	r18,0(r2)
    680c:	14c00117 	ldw	r19,4(r2)
    6810:	30031e16 	blt	r6,zero,748c <_dtoa_r+0x1234>
    6814:	d9000517 	ldw	r4,20(sp)
    6818:	d8c00f17 	ldw	r3,60(sp)
    681c:	a823883a 	mov	r17,r21
    6820:	a021883a 	mov	r16,r20
    6824:	192b883a 	add	r21,r3,r4
    6828:	2039883a 	mov	fp,r4
    682c:	00000f06 	br	686c <_dtoa_r+0x614>
    6830:	0005883a 	mov	r2,zero
    6834:	00d00934 	movhi	r3,16420
    6838:	5009883a 	mov	r4,r10
    683c:	580b883a 	mov	r5,r11
    6840:	180f883a 	mov	r7,r3
    6844:	100d883a 	mov	r6,r2
    6848:	0002df40 	call	2df4 <__muldf3>
    684c:	180b883a 	mov	r5,r3
    6850:	000d883a 	mov	r6,zero
    6854:	000f883a 	mov	r7,zero
    6858:	1009883a 	mov	r4,r2
    685c:	1021883a 	mov	r16,r2
    6860:	1823883a 	mov	r17,r3
    6864:	00034980 	call	3498 <__nedf2>
    6868:	10004526 	beq	r2,zero,6980 <_dtoa_r+0x728>
    686c:	900d883a 	mov	r6,r18
    6870:	980f883a 	mov	r7,r19
    6874:	8009883a 	mov	r4,r16
    6878:	880b883a 	mov	r5,r17
    687c:	00031b80 	call	31b8 <__divdf3>
    6880:	180b883a 	mov	r5,r3
    6884:	1009883a 	mov	r4,r2
    6888:	00037b00 	call	37b0 <__fixdfsi>
    688c:	1009883a 	mov	r4,r2
    6890:	1029883a 	mov	r20,r2
    6894:	00036b80 	call	36b8 <__floatsidf>
    6898:	180f883a 	mov	r7,r3
    689c:	9009883a 	mov	r4,r18
    68a0:	980b883a 	mov	r5,r19
    68a4:	100d883a 	mov	r6,r2
    68a8:	0002df40 	call	2df4 <__muldf3>
    68ac:	180f883a 	mov	r7,r3
    68b0:	880b883a 	mov	r5,r17
    68b4:	8009883a 	mov	r4,r16
    68b8:	100d883a 	mov	r6,r2
    68bc:	0002d000 	call	2d00 <__subdf3>
    68c0:	1015883a 	mov	r10,r2
    68c4:	a0800c04 	addi	r2,r20,48
    68c8:	e0800005 	stb	r2,0(fp)
    68cc:	e7000044 	addi	fp,fp,1
    68d0:	1817883a 	mov	r11,r3
    68d4:	e57fd61e 	bne	fp,r21,6830 <_dtoa_r+0x5d8>
    68d8:	500d883a 	mov	r6,r10
    68dc:	180f883a 	mov	r7,r3
    68e0:	5009883a 	mov	r4,r10
    68e4:	180b883a 	mov	r5,r3
    68e8:	0002d800 	call	2d80 <__adddf3>
    68ec:	100d883a 	mov	r6,r2
    68f0:	9009883a 	mov	r4,r18
    68f4:	980b883a 	mov	r5,r19
    68f8:	180f883a 	mov	r7,r3
    68fc:	1021883a 	mov	r16,r2
    6900:	1823883a 	mov	r17,r3
    6904:	00035a80 	call	35a8 <__ltdf2>
    6908:	10000816 	blt	r2,zero,692c <_dtoa_r+0x6d4>
    690c:	980b883a 	mov	r5,r19
    6910:	800d883a 	mov	r6,r16
    6914:	880f883a 	mov	r7,r17
    6918:	9009883a 	mov	r4,r18
    691c:	00034100 	call	3410 <__eqdf2>
    6920:	1000171e 	bne	r2,zero,6980 <_dtoa_r+0x728>
    6924:	a080004c 	andi	r2,r20,1
    6928:	10001526 	beq	r2,zero,6980 <_dtoa_r+0x728>
    692c:	d8800d17 	ldw	r2,52(sp)
    6930:	d8800415 	stw	r2,16(sp)
    6934:	e009883a 	mov	r4,fp
    6938:	213fffc4 	addi	r4,r4,-1
    693c:	20c00007 	ldb	r3,0(r4)
    6940:	00800e44 	movi	r2,57
    6944:	1880081e 	bne	r3,r2,6968 <_dtoa_r+0x710>
    6948:	d8800517 	ldw	r2,20(sp)
    694c:	113ffa1e 	bne	r2,r4,6938 <_dtoa_r+0x6e0>
    6950:	d8c00417 	ldw	r3,16(sp)
    6954:	d9800517 	ldw	r6,20(sp)
    6958:	00800c04 	movi	r2,48
    695c:	18c00044 	addi	r3,r3,1
    6960:	d8c00415 	stw	r3,16(sp)
    6964:	30800005 	stb	r2,0(r6)
    6968:	20800003 	ldbu	r2,0(r4)
    696c:	d8c00417 	ldw	r3,16(sp)
    6970:	27000044 	addi	fp,r4,1
    6974:	10800044 	addi	r2,r2,1
    6978:	d8c00d15 	stw	r3,52(sp)
    697c:	20800005 	stb	r2,0(r4)
    6980:	d9001617 	ldw	r4,88(sp)
    6984:	d9400717 	ldw	r5,28(sp)
    6988:	000934c0 	call	934c <_Bfree>
    698c:	e0000005 	stb	zero,0(fp)
    6990:	d9800d17 	ldw	r6,52(sp)
    6994:	d8c02717 	ldw	r3,156(sp)
    6998:	d9002917 	ldw	r4,164(sp)
    699c:	30800044 	addi	r2,r6,1
    69a0:	18800015 	stw	r2,0(r3)
    69a4:	20029c26 	beq	r4,zero,7418 <_dtoa_r+0x11c0>
    69a8:	d8c00517 	ldw	r3,20(sp)
    69ac:	27000015 	stw	fp,0(r4)
    69b0:	003e5d06 	br	6328 <_dtoa_r+0xd0>
    69b4:	d9800d17 	ldw	r6,52(sp)
    69b8:	00c00074 	movhi	r3,1
    69bc:	18fe8304 	addi	r3,r3,-1524
    69c0:	d9001217 	ldw	r4,72(sp)
    69c4:	300490fa 	slli	r2,r6,3
    69c8:	d9401317 	ldw	r5,76(sp)
    69cc:	10c5883a 	add	r2,r2,r3
    69d0:	12000017 	ldw	r8,0(r2)
    69d4:	12400117 	ldw	r9,4(r2)
    69d8:	400d883a 	mov	r6,r8
    69dc:	480f883a 	mov	r7,r9
    69e0:	00035a80 	call	35a8 <__ltdf2>
    69e4:	1000030e 	bge	r2,zero,69f4 <_dtoa_r+0x79c>
    69e8:	d8800d17 	ldw	r2,52(sp)
    69ec:	10bfffc4 	addi	r2,r2,-1
    69f0:	d8800d15 	stw	r2,52(sp)
    69f4:	d8000c15 	stw	zero,48(sp)
    69f8:	003ea806 	br	649c <_dtoa_r+0x244>
    69fc:	d9000b17 	ldw	r4,44(sp)
    6a00:	202cc03a 	cmpne	r22,r4,zero
    6a04:	b000c71e 	bne	r22,zero,6d24 <_dtoa_r+0xacc>
    6a08:	dc001117 	ldw	r16,68(sp)
    6a0c:	dc801017 	ldw	r18,64(sp)
    6a10:	0027883a 	mov	r19,zero
    6a14:	04000b0e 	bge	zero,r16,6a44 <_dtoa_r+0x7ec>
    6a18:	d8c00a17 	ldw	r3,40(sp)
    6a1c:	00c0090e 	bge	zero,r3,6a44 <_dtoa_r+0x7ec>
    6a20:	8005883a 	mov	r2,r16
    6a24:	1c011316 	blt	r3,r16,6e74 <_dtoa_r+0xc1c>
    6a28:	d9000a17 	ldw	r4,40(sp)
    6a2c:	d9801117 	ldw	r6,68(sp)
    6a30:	80a1c83a 	sub	r16,r16,r2
    6a34:	2089c83a 	sub	r4,r4,r2
    6a38:	308dc83a 	sub	r6,r6,r2
    6a3c:	d9000a15 	stw	r4,40(sp)
    6a40:	d9801115 	stw	r6,68(sp)
    6a44:	d8801017 	ldw	r2,64(sp)
    6a48:	0080150e 	bge	zero,r2,6aa0 <_dtoa_r+0x848>
    6a4c:	d8c00b17 	ldw	r3,44(sp)
    6a50:	1805003a 	cmpeq	r2,r3,zero
    6a54:	1001c91e 	bne	r2,zero,717c <_dtoa_r+0xf24>
    6a58:	04800e0e 	bge	zero,r18,6a94 <_dtoa_r+0x83c>
    6a5c:	d9001617 	ldw	r4,88(sp)
    6a60:	980b883a 	mov	r5,r19
    6a64:	900d883a 	mov	r6,r18
    6a68:	000a1000 	call	a100 <__pow5mult>
    6a6c:	d9001617 	ldw	r4,88(sp)
    6a70:	d9800717 	ldw	r6,28(sp)
    6a74:	100b883a 	mov	r5,r2
    6a78:	1027883a 	mov	r19,r2
    6a7c:	0009ddc0 	call	9ddc <__multiply>
    6a80:	d9001617 	ldw	r4,88(sp)
    6a84:	d9400717 	ldw	r5,28(sp)
    6a88:	1023883a 	mov	r17,r2
    6a8c:	000934c0 	call	934c <_Bfree>
    6a90:	dc400715 	stw	r17,28(sp)
    6a94:	d9001017 	ldw	r4,64(sp)
    6a98:	248dc83a 	sub	r6,r4,r18
    6a9c:	30010e1e 	bne	r6,zero,6ed8 <_dtoa_r+0xc80>
    6aa0:	d9001617 	ldw	r4,88(sp)
    6aa4:	04400044 	movi	r17,1
    6aa8:	880b883a 	mov	r5,r17
    6aac:	0009fc40 	call	9fc4 <__i2b>
    6ab0:	d9800917 	ldw	r6,36(sp)
    6ab4:	1025883a 	mov	r18,r2
    6ab8:	0180040e 	bge	zero,r6,6acc <_dtoa_r+0x874>
    6abc:	d9001617 	ldw	r4,88(sp)
    6ac0:	100b883a 	mov	r5,r2
    6ac4:	000a1000 	call	a100 <__pow5mult>
    6ac8:	1025883a 	mov	r18,r2
    6acc:	d8801717 	ldw	r2,92(sp)
    6ad0:	8880f30e 	bge	r17,r2,6ea0 <_dtoa_r+0xc48>
    6ad4:	0023883a 	mov	r17,zero
    6ad8:	d9800917 	ldw	r6,36(sp)
    6adc:	30019e1e 	bne	r6,zero,7158 <_dtoa_r+0xf00>
    6ae0:	00c00044 	movi	r3,1
    6ae4:	d9000a17 	ldw	r4,40(sp)
    6ae8:	20c5883a 	add	r2,r4,r3
    6aec:	10c007cc 	andi	r3,r2,31
    6af0:	1800841e 	bne	r3,zero,6d04 <_dtoa_r+0xaac>
    6af4:	00800704 	movi	r2,28
    6af8:	d9000a17 	ldw	r4,40(sp)
    6afc:	d9801117 	ldw	r6,68(sp)
    6b00:	80a1883a 	add	r16,r16,r2
    6b04:	2089883a 	add	r4,r4,r2
    6b08:	308d883a 	add	r6,r6,r2
    6b0c:	d9000a15 	stw	r4,40(sp)
    6b10:	d9801115 	stw	r6,68(sp)
    6b14:	d8801117 	ldw	r2,68(sp)
    6b18:	0080050e 	bge	zero,r2,6b30 <_dtoa_r+0x8d8>
    6b1c:	d9400717 	ldw	r5,28(sp)
    6b20:	d9001617 	ldw	r4,88(sp)
    6b24:	100d883a 	mov	r6,r2
    6b28:	0009c900 	call	9c90 <__lshift>
    6b2c:	d8800715 	stw	r2,28(sp)
    6b30:	d8c00a17 	ldw	r3,40(sp)
    6b34:	00c0050e 	bge	zero,r3,6b4c <_dtoa_r+0x8f4>
    6b38:	d9001617 	ldw	r4,88(sp)
    6b3c:	900b883a 	mov	r5,r18
    6b40:	180d883a 	mov	r6,r3
    6b44:	0009c900 	call	9c90 <__lshift>
    6b48:	1025883a 	mov	r18,r2
    6b4c:	d9000c17 	ldw	r4,48(sp)
    6b50:	2005003a 	cmpeq	r2,r4,zero
    6b54:	10016f26 	beq	r2,zero,7114 <_dtoa_r+0xebc>
    6b58:	d9000f17 	ldw	r4,60(sp)
    6b5c:	0102170e 	bge	zero,r4,73bc <_dtoa_r+0x1164>
    6b60:	d9800b17 	ldw	r6,44(sp)
    6b64:	3005003a 	cmpeq	r2,r6,zero
    6b68:	1000881e 	bne	r2,zero,6d8c <_dtoa_r+0xb34>
    6b6c:	0400050e 	bge	zero,r16,6b84 <_dtoa_r+0x92c>
    6b70:	d9001617 	ldw	r4,88(sp)
    6b74:	980b883a 	mov	r5,r19
    6b78:	800d883a 	mov	r6,r16
    6b7c:	0009c900 	call	9c90 <__lshift>
    6b80:	1027883a 	mov	r19,r2
    6b84:	8804c03a 	cmpne	r2,r17,zero
    6b88:	1002541e 	bne	r2,zero,74dc <_dtoa_r+0x1284>
    6b8c:	980b883a 	mov	r5,r19
    6b90:	dd800517 	ldw	r22,20(sp)
    6b94:	dcc00615 	stw	r19,24(sp)
    6b98:	a700004c 	andi	fp,r20,1
    6b9c:	2827883a 	mov	r19,r5
    6ba0:	d9000717 	ldw	r4,28(sp)
    6ba4:	900b883a 	mov	r5,r18
    6ba8:	00060400 	call	6040 <quorem>
    6bac:	d9000717 	ldw	r4,28(sp)
    6bb0:	d9400617 	ldw	r5,24(sp)
    6bb4:	1023883a 	mov	r17,r2
    6bb8:	8dc00c04 	addi	r23,r17,48
    6bbc:	00094a80 	call	94a8 <__mcmp>
    6bc0:	d9001617 	ldw	r4,88(sp)
    6bc4:	900b883a 	mov	r5,r18
    6bc8:	980d883a 	mov	r6,r19
    6bcc:	1029883a 	mov	r20,r2
    6bd0:	0009b040 	call	9b04 <__mdiff>
    6bd4:	102b883a 	mov	r21,r2
    6bd8:	10800317 	ldw	r2,12(r2)
    6bdc:	1001281e 	bne	r2,zero,7080 <_dtoa_r+0xe28>
    6be0:	d9000717 	ldw	r4,28(sp)
    6be4:	a80b883a 	mov	r5,r21
    6be8:	00094a80 	call	94a8 <__mcmp>
    6bec:	d9001617 	ldw	r4,88(sp)
    6bf0:	1021883a 	mov	r16,r2
    6bf4:	a80b883a 	mov	r5,r21
    6bf8:	000934c0 	call	934c <_Bfree>
    6bfc:	8000041e 	bne	r16,zero,6c10 <_dtoa_r+0x9b8>
    6c00:	d8801717 	ldw	r2,92(sp)
    6c04:	1000021e 	bne	r2,zero,6c10 <_dtoa_r+0x9b8>
    6c08:	e004c03a 	cmpne	r2,fp,zero
    6c0c:	10011726 	beq	r2,zero,706c <_dtoa_r+0xe14>
    6c10:	a0010616 	blt	r20,zero,702c <_dtoa_r+0xdd4>
    6c14:	a000041e 	bne	r20,zero,6c28 <_dtoa_r+0x9d0>
    6c18:	d8c01717 	ldw	r3,92(sp)
    6c1c:	1800021e 	bne	r3,zero,6c28 <_dtoa_r+0x9d0>
    6c20:	e004c03a 	cmpne	r2,fp,zero
    6c24:	10010126 	beq	r2,zero,702c <_dtoa_r+0xdd4>
    6c28:	04023d16 	blt	zero,r16,7520 <_dtoa_r+0x12c8>
    6c2c:	b5c00005 	stb	r23,0(r22)
    6c30:	d9800517 	ldw	r6,20(sp)
    6c34:	d9000f17 	ldw	r4,60(sp)
    6c38:	b5800044 	addi	r22,r22,1
    6c3c:	3105883a 	add	r2,r6,r4
    6c40:	b0806526 	beq	r22,r2,6dd8 <_dtoa_r+0xb80>
    6c44:	d9400717 	ldw	r5,28(sp)
    6c48:	d9001617 	ldw	r4,88(sp)
    6c4c:	01800284 	movi	r6,10
    6c50:	000f883a 	mov	r7,zero
    6c54:	000a0000 	call	a000 <__multadd>
    6c58:	d8800715 	stw	r2,28(sp)
    6c5c:	d8800617 	ldw	r2,24(sp)
    6c60:	14c10c26 	beq	r2,r19,7094 <_dtoa_r+0xe3c>
    6c64:	d9400617 	ldw	r5,24(sp)
    6c68:	d9001617 	ldw	r4,88(sp)
    6c6c:	01800284 	movi	r6,10
    6c70:	000f883a 	mov	r7,zero
    6c74:	000a0000 	call	a000 <__multadd>
    6c78:	d9001617 	ldw	r4,88(sp)
    6c7c:	980b883a 	mov	r5,r19
    6c80:	01800284 	movi	r6,10
    6c84:	000f883a 	mov	r7,zero
    6c88:	d8800615 	stw	r2,24(sp)
    6c8c:	000a0000 	call	a000 <__multadd>
    6c90:	1027883a 	mov	r19,r2
    6c94:	003fc206 	br	6ba0 <_dtoa_r+0x948>
    6c98:	2445c83a 	sub	r2,r4,r17
    6c9c:	a088983a 	sll	r4,r20,r2
    6ca0:	003e4b06 	br	65d0 <_dtoa_r+0x378>
    6ca4:	01bfffc4 	movi	r6,-1
    6ca8:	00800044 	movi	r2,1
    6cac:	d9800e15 	stw	r6,56(sp)
    6cb0:	d9800f15 	stw	r6,60(sp)
    6cb4:	d8800b15 	stw	r2,44(sp)
    6cb8:	d8c01617 	ldw	r3,88(sp)
    6cbc:	008005c4 	movi	r2,23
    6cc0:	18001115 	stw	zero,68(r3)
    6cc4:	1580082e 	bgeu	r2,r22,6ce8 <_dtoa_r+0xa90>
    6cc8:	00c00104 	movi	r3,4
    6ccc:	0009883a 	mov	r4,zero
    6cd0:	18c7883a 	add	r3,r3,r3
    6cd4:	18800504 	addi	r2,r3,20
    6cd8:	21000044 	addi	r4,r4,1
    6cdc:	b0bffc2e 	bgeu	r22,r2,6cd0 <_dtoa_r+0xa78>
    6ce0:	d9801617 	ldw	r6,88(sp)
    6ce4:	31001115 	stw	r4,68(r6)
    6ce8:	dc000f17 	ldw	r16,60(sp)
    6cec:	003e4b06 	br	661c <_dtoa_r+0x3c4>
    6cf0:	d9801717 	ldw	r6,92(sp)
    6cf4:	0023883a 	mov	r17,zero
    6cf8:	31bfff04 	addi	r6,r6,-4
    6cfc:	d9801715 	stw	r6,92(sp)
    6d00:	003df806 	br	64e4 <_dtoa_r+0x28c>
    6d04:	00800804 	movi	r2,32
    6d08:	10c9c83a 	sub	r4,r2,r3
    6d0c:	00c00104 	movi	r3,4
    6d10:	19005a16 	blt	r3,r4,6e7c <_dtoa_r+0xc24>
    6d14:	008000c4 	movi	r2,3
    6d18:	113f7e16 	blt	r2,r4,6b14 <_dtoa_r+0x8bc>
    6d1c:	20800704 	addi	r2,r4,28
    6d20:	003f7506 	br	6af8 <_dtoa_r+0x8a0>
    6d24:	d9801717 	ldw	r6,92(sp)
    6d28:	00800044 	movi	r2,1
    6d2c:	1180a10e 	bge	r2,r6,6fb4 <_dtoa_r+0xd5c>
    6d30:	d9800f17 	ldw	r6,60(sp)
    6d34:	d8c01017 	ldw	r3,64(sp)
    6d38:	30bfffc4 	addi	r2,r6,-1
    6d3c:	1881c616 	blt	r3,r2,7458 <_dtoa_r+0x1200>
    6d40:	18a5c83a 	sub	r18,r3,r2
    6d44:	d8800f17 	ldw	r2,60(sp)
    6d48:	10026216 	blt	r2,zero,76d4 <_dtoa_r+0x147c>
    6d4c:	dc001117 	ldw	r16,68(sp)
    6d50:	1007883a 	mov	r3,r2
    6d54:	d9800a17 	ldw	r6,40(sp)
    6d58:	d8801117 	ldw	r2,68(sp)
    6d5c:	d9001617 	ldw	r4,88(sp)
    6d60:	30cd883a 	add	r6,r6,r3
    6d64:	10c5883a 	add	r2,r2,r3
    6d68:	01400044 	movi	r5,1
    6d6c:	d9800a15 	stw	r6,40(sp)
    6d70:	d8801115 	stw	r2,68(sp)
    6d74:	0009fc40 	call	9fc4 <__i2b>
    6d78:	1027883a 	mov	r19,r2
    6d7c:	003f2506 	br	6a14 <_dtoa_r+0x7bc>
    6d80:	00c00074 	movhi	r3,1
    6d84:	18fe6604 	addi	r3,r3,-1640
    6d88:	003d6706 	br	6328 <_dtoa_r+0xd0>
    6d8c:	dd800517 	ldw	r22,20(sp)
    6d90:	04000044 	movi	r16,1
    6d94:	00000706 	br	6db4 <_dtoa_r+0xb5c>
    6d98:	d9400717 	ldw	r5,28(sp)
    6d9c:	d9001617 	ldw	r4,88(sp)
    6da0:	01800284 	movi	r6,10
    6da4:	000f883a 	mov	r7,zero
    6da8:	000a0000 	call	a000 <__multadd>
    6dac:	d8800715 	stw	r2,28(sp)
    6db0:	84000044 	addi	r16,r16,1
    6db4:	d9000717 	ldw	r4,28(sp)
    6db8:	900b883a 	mov	r5,r18
    6dbc:	00060400 	call	6040 <quorem>
    6dc0:	15c00c04 	addi	r23,r2,48
    6dc4:	b5c00005 	stb	r23,0(r22)
    6dc8:	d8c00f17 	ldw	r3,60(sp)
    6dcc:	b5800044 	addi	r22,r22,1
    6dd0:	80fff116 	blt	r16,r3,6d98 <_dtoa_r+0xb40>
    6dd4:	d8000615 	stw	zero,24(sp)
    6dd8:	d9400717 	ldw	r5,28(sp)
    6ddc:	d9001617 	ldw	r4,88(sp)
    6de0:	01800044 	movi	r6,1
    6de4:	0009c900 	call	9c90 <__lshift>
    6de8:	1009883a 	mov	r4,r2
    6dec:	900b883a 	mov	r5,r18
    6df0:	d8800715 	stw	r2,28(sp)
    6df4:	00094a80 	call	94a8 <__mcmp>
    6df8:	00803c0e 	bge	zero,r2,6eec <_dtoa_r+0xc94>
    6dfc:	b009883a 	mov	r4,r22
    6e00:	213fffc4 	addi	r4,r4,-1
    6e04:	21400003 	ldbu	r5,0(r4)
    6e08:	00800e44 	movi	r2,57
    6e0c:	28c03fcc 	andi	r3,r5,255
    6e10:	18c0201c 	xori	r3,r3,128
    6e14:	18ffe004 	addi	r3,r3,-128
    6e18:	1881981e 	bne	r3,r2,747c <_dtoa_r+0x1224>
    6e1c:	d9800517 	ldw	r6,20(sp)
    6e20:	21bff71e 	bne	r4,r6,6e00 <_dtoa_r+0xba8>
    6e24:	d8800d17 	ldw	r2,52(sp)
    6e28:	37000044 	addi	fp,r6,1
    6e2c:	10800044 	addi	r2,r2,1
    6e30:	d8800d15 	stw	r2,52(sp)
    6e34:	00800c44 	movi	r2,49
    6e38:	30800005 	stb	r2,0(r6)
    6e3c:	d9001617 	ldw	r4,88(sp)
    6e40:	900b883a 	mov	r5,r18
    6e44:	000934c0 	call	934c <_Bfree>
    6e48:	983ecd26 	beq	r19,zero,6980 <_dtoa_r+0x728>
    6e4c:	d8c00617 	ldw	r3,24(sp)
    6e50:	18000426 	beq	r3,zero,6e64 <_dtoa_r+0xc0c>
    6e54:	1cc00326 	beq	r3,r19,6e64 <_dtoa_r+0xc0c>
    6e58:	d9001617 	ldw	r4,88(sp)
    6e5c:	180b883a 	mov	r5,r3
    6e60:	000934c0 	call	934c <_Bfree>
    6e64:	d9001617 	ldw	r4,88(sp)
    6e68:	980b883a 	mov	r5,r19
    6e6c:	000934c0 	call	934c <_Bfree>
    6e70:	003ec306 	br	6980 <_dtoa_r+0x728>
    6e74:	1805883a 	mov	r2,r3
    6e78:	003eeb06 	br	6a28 <_dtoa_r+0x7d0>
    6e7c:	d9800a17 	ldw	r6,40(sp)
    6e80:	d8c01117 	ldw	r3,68(sp)
    6e84:	20bfff04 	addi	r2,r4,-4
    6e88:	308d883a 	add	r6,r6,r2
    6e8c:	1887883a 	add	r3,r3,r2
    6e90:	80a1883a 	add	r16,r16,r2
    6e94:	d9800a15 	stw	r6,40(sp)
    6e98:	d8c01115 	stw	r3,68(sp)
    6e9c:	003f1d06 	br	6b14 <_dtoa_r+0x8bc>
    6ea0:	a03f0c1e 	bne	r20,zero,6ad4 <_dtoa_r+0x87c>
    6ea4:	00800434 	movhi	r2,16
    6ea8:	10bfffc4 	addi	r2,r2,-1
    6eac:	a884703a 	and	r2,r21,r2
    6eb0:	103f081e 	bne	r2,zero,6ad4 <_dtoa_r+0x87c>
    6eb4:	a89ffc2c 	andhi	r2,r21,32752
    6eb8:	103f0626 	beq	r2,zero,6ad4 <_dtoa_r+0x87c>
    6ebc:	d8c01117 	ldw	r3,68(sp)
    6ec0:	d9000a17 	ldw	r4,40(sp)
    6ec4:	18c00044 	addi	r3,r3,1
    6ec8:	21000044 	addi	r4,r4,1
    6ecc:	d8c01115 	stw	r3,68(sp)
    6ed0:	d9000a15 	stw	r4,40(sp)
    6ed4:	003f0006 	br	6ad8 <_dtoa_r+0x880>
    6ed8:	d9400717 	ldw	r5,28(sp)
    6edc:	d9001617 	ldw	r4,88(sp)
    6ee0:	000a1000 	call	a100 <__pow5mult>
    6ee4:	d8800715 	stw	r2,28(sp)
    6ee8:	003eed06 	br	6aa0 <_dtoa_r+0x848>
    6eec:	1000021e 	bne	r2,zero,6ef8 <_dtoa_r+0xca0>
    6ef0:	b880004c 	andi	r2,r23,1
    6ef4:	103fc11e 	bne	r2,zero,6dfc <_dtoa_r+0xba4>
    6ef8:	b5bfffc4 	addi	r22,r22,-1
    6efc:	b0c00007 	ldb	r3,0(r22)
    6f00:	00800c04 	movi	r2,48
    6f04:	18bffc26 	beq	r3,r2,6ef8 <_dtoa_r+0xca0>
    6f08:	b7000044 	addi	fp,r22,1
    6f0c:	003fcb06 	br	6e3c <_dtoa_r+0xbe4>
    6f10:	d9800d17 	ldw	r6,52(sp)
    6f14:	018fc83a 	sub	r7,zero,r6
    6f18:	3801f726 	beq	r7,zero,76f8 <_dtoa_r+0x14a0>
    6f1c:	398003cc 	andi	r6,r7,15
    6f20:	300c90fa 	slli	r6,r6,3
    6f24:	01400074 	movhi	r5,1
    6f28:	297e8304 	addi	r5,r5,-1524
    6f2c:	d9001217 	ldw	r4,72(sp)
    6f30:	314d883a 	add	r6,r6,r5
    6f34:	30c00117 	ldw	r3,4(r6)
    6f38:	30800017 	ldw	r2,0(r6)
    6f3c:	d9401317 	ldw	r5,76(sp)
    6f40:	3821d13a 	srai	r16,r7,4
    6f44:	100d883a 	mov	r6,r2
    6f48:	180f883a 	mov	r7,r3
    6f4c:	0002df40 	call	2df4 <__muldf3>
    6f50:	1011883a 	mov	r8,r2
    6f54:	1813883a 	mov	r9,r3
    6f58:	1029883a 	mov	r20,r2
    6f5c:	182b883a 	mov	r21,r3
    6f60:	8001e526 	beq	r16,zero,76f8 <_dtoa_r+0x14a0>
    6f64:	05800084 	movi	r22,2
    6f68:	04400074 	movhi	r17,1
    6f6c:	8c7eb504 	addi	r17,r17,-1324
    6f70:	8080004c 	andi	r2,r16,1
    6f74:	1005003a 	cmpeq	r2,r2,zero
    6f78:	1000081e 	bne	r2,zero,6f9c <_dtoa_r+0xd44>
    6f7c:	89800017 	ldw	r6,0(r17)
    6f80:	89c00117 	ldw	r7,4(r17)
    6f84:	480b883a 	mov	r5,r9
    6f88:	4009883a 	mov	r4,r8
    6f8c:	0002df40 	call	2df4 <__muldf3>
    6f90:	1011883a 	mov	r8,r2
    6f94:	b5800044 	addi	r22,r22,1
    6f98:	1813883a 	mov	r9,r3
    6f9c:	8021d07a 	srai	r16,r16,1
    6fa0:	8c400204 	addi	r17,r17,8
    6fa4:	803ff21e 	bne	r16,zero,6f70 <_dtoa_r+0xd18>
    6fa8:	4029883a 	mov	r20,r8
    6fac:	482b883a 	mov	r21,r9
    6fb0:	003dca06 	br	66dc <_dtoa_r+0x484>
    6fb4:	d9000817 	ldw	r4,32(sp)
    6fb8:	2005003a 	cmpeq	r2,r4,zero
    6fbc:	1001f61e 	bne	r2,zero,7798 <_dtoa_r+0x1540>
    6fc0:	dc001117 	ldw	r16,68(sp)
    6fc4:	dc801017 	ldw	r18,64(sp)
    6fc8:	18c10cc4 	addi	r3,r3,1075
    6fcc:	003f6106 	br	6d54 <_dtoa_r+0xafc>
    6fd0:	d8000b15 	stw	zero,44(sp)
    6fd4:	d9802617 	ldw	r6,152(sp)
    6fd8:	d8c00d17 	ldw	r3,52(sp)
    6fdc:	30800044 	addi	r2,r6,1
    6fe0:	18ad883a 	add	r22,r3,r2
    6fe4:	b13fffc4 	addi	r4,r22,-1
    6fe8:	d9000e15 	stw	r4,56(sp)
    6fec:	0581f60e 	bge	zero,r22,77c8 <_dtoa_r+0x1570>
    6ff0:	dd800f15 	stw	r22,60(sp)
    6ff4:	003f3006 	br	6cb8 <_dtoa_r+0xa60>
    6ff8:	d8000b15 	stw	zero,44(sp)
    6ffc:	d9002617 	ldw	r4,152(sp)
    7000:	0101eb0e 	bge	zero,r4,77b0 <_dtoa_r+0x1558>
    7004:	202d883a 	mov	r22,r4
    7008:	d9000e15 	stw	r4,56(sp)
    700c:	d9000f15 	stw	r4,60(sp)
    7010:	003f2906 	br	6cb8 <_dtoa_r+0xa60>
    7014:	01800044 	movi	r6,1
    7018:	d9800b15 	stw	r6,44(sp)
    701c:	003ff706 	br	6ffc <_dtoa_r+0xda4>
    7020:	01000044 	movi	r4,1
    7024:	d9000b15 	stw	r4,44(sp)
    7028:	003fea06 	br	6fd4 <_dtoa_r+0xd7c>
    702c:	04000c0e 	bge	zero,r16,7060 <_dtoa_r+0xe08>
    7030:	d9400717 	ldw	r5,28(sp)
    7034:	d9001617 	ldw	r4,88(sp)
    7038:	01800044 	movi	r6,1
    703c:	0009c900 	call	9c90 <__lshift>
    7040:	1009883a 	mov	r4,r2
    7044:	900b883a 	mov	r5,r18
    7048:	d8800715 	stw	r2,28(sp)
    704c:	00094a80 	call	94a8 <__mcmp>
    7050:	0081e00e 	bge	zero,r2,77d4 <_dtoa_r+0x157c>
    7054:	bdc00044 	addi	r23,r23,1
    7058:	00800e84 	movi	r2,58
    705c:	b881a226 	beq	r23,r2,76e8 <_dtoa_r+0x1490>
    7060:	b7000044 	addi	fp,r22,1
    7064:	b5c00005 	stb	r23,0(r22)
    7068:	003f7406 	br	6e3c <_dtoa_r+0xbe4>
    706c:	00800e44 	movi	r2,57
    7070:	b8819d26 	beq	r23,r2,76e8 <_dtoa_r+0x1490>
    7074:	053ffa0e 	bge	zero,r20,7060 <_dtoa_r+0xe08>
    7078:	8dc00c44 	addi	r23,r17,49
    707c:	003ff806 	br	7060 <_dtoa_r+0xe08>
    7080:	d9001617 	ldw	r4,88(sp)
    7084:	a80b883a 	mov	r5,r21
    7088:	04000044 	movi	r16,1
    708c:	000934c0 	call	934c <_Bfree>
    7090:	003edf06 	br	6c10 <_dtoa_r+0x9b8>
    7094:	d9001617 	ldw	r4,88(sp)
    7098:	980b883a 	mov	r5,r19
    709c:	01800284 	movi	r6,10
    70a0:	000f883a 	mov	r7,zero
    70a4:	000a0000 	call	a000 <__multadd>
    70a8:	1027883a 	mov	r19,r2
    70ac:	d8800615 	stw	r2,24(sp)
    70b0:	003ebb06 	br	6ba0 <_dtoa_r+0x948>
    70b4:	d9801117 	ldw	r6,68(sp)
    70b8:	d8800d17 	ldw	r2,52(sp)
    70bc:	d8000915 	stw	zero,36(sp)
    70c0:	308dc83a 	sub	r6,r6,r2
    70c4:	0087c83a 	sub	r3,zero,r2
    70c8:	d9801115 	stw	r6,68(sp)
    70cc:	d8c01015 	stw	r3,64(sp)
    70d0:	003cfe06 	br	64cc <_dtoa_r+0x274>
    70d4:	018dc83a 	sub	r6,zero,r6
    70d8:	d9801115 	stw	r6,68(sp)
    70dc:	d8000a15 	stw	zero,40(sp)
    70e0:	003cf306 	br	64b0 <_dtoa_r+0x258>
    70e4:	d9000d17 	ldw	r4,52(sp)
    70e8:	00036b80 	call	36b8 <__floatsidf>
    70ec:	880b883a 	mov	r5,r17
    70f0:	8009883a 	mov	r4,r16
    70f4:	180f883a 	mov	r7,r3
    70f8:	100d883a 	mov	r6,r2
    70fc:	00034980 	call	3498 <__nedf2>
    7100:	103ce126 	beq	r2,zero,6488 <_dtoa_r+0x230>
    7104:	d9800d17 	ldw	r6,52(sp)
    7108:	31bfffc4 	addi	r6,r6,-1
    710c:	d9800d15 	stw	r6,52(sp)
    7110:	003cdd06 	br	6488 <_dtoa_r+0x230>
    7114:	d9000717 	ldw	r4,28(sp)
    7118:	900b883a 	mov	r5,r18
    711c:	00094a80 	call	94a8 <__mcmp>
    7120:	103e8d0e 	bge	r2,zero,6b58 <_dtoa_r+0x900>
    7124:	d9400717 	ldw	r5,28(sp)
    7128:	d9001617 	ldw	r4,88(sp)
    712c:	01800284 	movi	r6,10
    7130:	000f883a 	mov	r7,zero
    7134:	000a0000 	call	a000 <__multadd>
    7138:	d9800d17 	ldw	r6,52(sp)
    713c:	d8800715 	stw	r2,28(sp)
    7140:	31bfffc4 	addi	r6,r6,-1
    7144:	d9800d15 	stw	r6,52(sp)
    7148:	b001a71e 	bne	r22,zero,77e8 <_dtoa_r+0x1590>
    714c:	d8800e17 	ldw	r2,56(sp)
    7150:	d8800f15 	stw	r2,60(sp)
    7154:	003e8006 	br	6b58 <_dtoa_r+0x900>
    7158:	90800417 	ldw	r2,16(r18)
    715c:	1085883a 	add	r2,r2,r2
    7160:	1085883a 	add	r2,r2,r2
    7164:	1485883a 	add	r2,r2,r18
    7168:	11000417 	ldw	r4,16(r2)
    716c:	00093740 	call	9374 <__hi0bits>
    7170:	00c00804 	movi	r3,32
    7174:	1887c83a 	sub	r3,r3,r2
    7178:	003e5a06 	br	6ae4 <_dtoa_r+0x88c>
    717c:	d9400717 	ldw	r5,28(sp)
    7180:	d9801017 	ldw	r6,64(sp)
    7184:	d9001617 	ldw	r4,88(sp)
    7188:	000a1000 	call	a100 <__pow5mult>
    718c:	d8800715 	stw	r2,28(sp)
    7190:	003e4306 	br	6aa0 <_dtoa_r+0x848>
    7194:	d9800f17 	ldw	r6,60(sp)
    7198:	d8800d17 	ldw	r2,52(sp)
    719c:	d9800315 	stw	r6,12(sp)
    71a0:	d8800415 	stw	r2,16(sp)
    71a4:	d8c00b17 	ldw	r3,44(sp)
    71a8:	1805003a 	cmpeq	r2,r3,zero
    71ac:	1000e21e 	bne	r2,zero,7538 <_dtoa_r+0x12e0>
    71b0:	d9000317 	ldw	r4,12(sp)
    71b4:	0005883a 	mov	r2,zero
    71b8:	00cff834 	movhi	r3,16352
    71bc:	200c90fa 	slli	r6,r4,3
    71c0:	01000074 	movhi	r4,1
    71c4:	213e8304 	addi	r4,r4,-1524
    71c8:	180b883a 	mov	r5,r3
    71cc:	310d883a 	add	r6,r6,r4
    71d0:	327fff17 	ldw	r9,-4(r6)
    71d4:	323ffe17 	ldw	r8,-8(r6)
    71d8:	1009883a 	mov	r4,r2
    71dc:	480f883a 	mov	r7,r9
    71e0:	400d883a 	mov	r6,r8
    71e4:	00031b80 	call	31b8 <__divdf3>
    71e8:	180b883a 	mov	r5,r3
    71ec:	b00d883a 	mov	r6,r22
    71f0:	b80f883a 	mov	r7,r23
    71f4:	1009883a 	mov	r4,r2
    71f8:	0002d000 	call	2d00 <__subdf3>
    71fc:	a80b883a 	mov	r5,r21
    7200:	a009883a 	mov	r4,r20
    7204:	d8c01915 	stw	r3,100(sp)
    7208:	d8801815 	stw	r2,96(sp)
    720c:	00037b00 	call	37b0 <__fixdfsi>
    7210:	1009883a 	mov	r4,r2
    7214:	1027883a 	mov	r19,r2
    7218:	00036b80 	call	36b8 <__floatsidf>
    721c:	a80b883a 	mov	r5,r21
    7220:	a009883a 	mov	r4,r20
    7224:	180f883a 	mov	r7,r3
    7228:	100d883a 	mov	r6,r2
    722c:	0002d000 	call	2d00 <__subdf3>
    7230:	d9801817 	ldw	r6,96(sp)
    7234:	1823883a 	mov	r17,r3
    7238:	d8801415 	stw	r2,80(sp)
    723c:	302d883a 	mov	r22,r6
    7240:	d9800517 	ldw	r6,20(sp)
    7244:	9cc00c04 	addi	r19,r19,48
    7248:	dc401515 	stw	r17,84(sp)
    724c:	d8c01917 	ldw	r3,100(sp)
    7250:	34c00005 	stb	r19,0(r6)
    7254:	d8800517 	ldw	r2,20(sp)
    7258:	d9401917 	ldw	r5,100(sp)
    725c:	d9801417 	ldw	r6,80(sp)
    7260:	b009883a 	mov	r4,r22
    7264:	880f883a 	mov	r7,r17
    7268:	182f883a 	mov	r23,r3
    726c:	17000044 	addi	fp,r2,1
    7270:	00035200 	call	3520 <__gtdf2>
    7274:	00804e16 	blt	zero,r2,73b0 <_dtoa_r+0x1158>
    7278:	d9801417 	ldw	r6,80(sp)
    727c:	0005883a 	mov	r2,zero
    7280:	00cffc34 	movhi	r3,16368
    7284:	180b883a 	mov	r5,r3
    7288:	880f883a 	mov	r7,r17
    728c:	1009883a 	mov	r4,r2
    7290:	0002d000 	call	2d00 <__subdf3>
    7294:	d9401917 	ldw	r5,100(sp)
    7298:	180f883a 	mov	r7,r3
    729c:	b009883a 	mov	r4,r22
    72a0:	100d883a 	mov	r6,r2
    72a4:	00035200 	call	3520 <__gtdf2>
    72a8:	00bda216 	blt	zero,r2,6934 <_dtoa_r+0x6dc>
    72ac:	d8c00317 	ldw	r3,12(sp)
    72b0:	00800044 	movi	r2,1
    72b4:	10c01216 	blt	r2,r3,7300 <_dtoa_r+0x10a8>
    72b8:	003d4506 	br	67d0 <_dtoa_r+0x578>
    72bc:	d9801417 	ldw	r6,80(sp)
    72c0:	0005883a 	mov	r2,zero
    72c4:	00cffc34 	movhi	r3,16368
    72c8:	180b883a 	mov	r5,r3
    72cc:	880f883a 	mov	r7,r17
    72d0:	1009883a 	mov	r4,r2
    72d4:	0002d000 	call	2d00 <__subdf3>
    72d8:	d9c01b17 	ldw	r7,108(sp)
    72dc:	180b883a 	mov	r5,r3
    72e0:	1009883a 	mov	r4,r2
    72e4:	b00d883a 	mov	r6,r22
    72e8:	00035a80 	call	35a8 <__ltdf2>
    72ec:	103d9116 	blt	r2,zero,6934 <_dtoa_r+0x6dc>
    72f0:	d9800517 	ldw	r6,20(sp)
    72f4:	d9000317 	ldw	r4,12(sp)
    72f8:	3105883a 	add	r2,r6,r4
    72fc:	e0bd3426 	beq	fp,r2,67d0 <_dtoa_r+0x578>
    7300:	04500934 	movhi	r17,16420
    7304:	0021883a 	mov	r16,zero
    7308:	b80b883a 	mov	r5,r23
    730c:	b009883a 	mov	r4,r22
    7310:	800d883a 	mov	r6,r16
    7314:	880f883a 	mov	r7,r17
    7318:	0002df40 	call	2df4 <__muldf3>
    731c:	d9401517 	ldw	r5,84(sp)
    7320:	d9001417 	ldw	r4,80(sp)
    7324:	880f883a 	mov	r7,r17
    7328:	000d883a 	mov	r6,zero
    732c:	d8801a15 	stw	r2,104(sp)
    7330:	d8c01b15 	stw	r3,108(sp)
    7334:	0002df40 	call	2df4 <__muldf3>
    7338:	180b883a 	mov	r5,r3
    733c:	1009883a 	mov	r4,r2
    7340:	1823883a 	mov	r17,r3
    7344:	1021883a 	mov	r16,r2
    7348:	00037b00 	call	37b0 <__fixdfsi>
    734c:	1009883a 	mov	r4,r2
    7350:	102b883a 	mov	r21,r2
    7354:	00036b80 	call	36b8 <__floatsidf>
    7358:	880b883a 	mov	r5,r17
    735c:	8009883a 	mov	r4,r16
    7360:	180f883a 	mov	r7,r3
    7364:	100d883a 	mov	r6,r2
    7368:	0002d000 	call	2d00 <__subdf3>
    736c:	1021883a 	mov	r16,r2
    7370:	d9001b17 	ldw	r4,108(sp)
    7374:	1823883a 	mov	r17,r3
    7378:	dc001415 	stw	r16,80(sp)
    737c:	ad400c04 	addi	r21,r21,48
    7380:	dc401515 	stw	r17,84(sp)
    7384:	d8801a17 	ldw	r2,104(sp)
    7388:	e5400005 	stb	r21,0(fp)
    738c:	202f883a 	mov	r23,r4
    7390:	d9c01b17 	ldw	r7,108(sp)
    7394:	d9001417 	ldw	r4,80(sp)
    7398:	880b883a 	mov	r5,r17
    739c:	100d883a 	mov	r6,r2
    73a0:	102d883a 	mov	r22,r2
    73a4:	e7000044 	addi	fp,fp,1
    73a8:	00035a80 	call	35a8 <__ltdf2>
    73ac:	103fc30e 	bge	r2,zero,72bc <_dtoa_r+0x1064>
    73b0:	d9000417 	ldw	r4,16(sp)
    73b4:	d9000d15 	stw	r4,52(sp)
    73b8:	003d7106 	br	6980 <_dtoa_r+0x728>
    73bc:	d9801717 	ldw	r6,92(sp)
    73c0:	00800084 	movi	r2,2
    73c4:	11bde60e 	bge	r2,r6,6b60 <_dtoa_r+0x908>
    73c8:	203cfb1e 	bne	r4,zero,67b8 <_dtoa_r+0x560>
    73cc:	d9001617 	ldw	r4,88(sp)
    73d0:	900b883a 	mov	r5,r18
    73d4:	01800144 	movi	r6,5
    73d8:	000f883a 	mov	r7,zero
    73dc:	000a0000 	call	a000 <__multadd>
    73e0:	d9000717 	ldw	r4,28(sp)
    73e4:	100b883a 	mov	r5,r2
    73e8:	1025883a 	mov	r18,r2
    73ec:	00094a80 	call	94a8 <__mcmp>
    73f0:	00bcf10e 	bge	zero,r2,67b8 <_dtoa_r+0x560>
    73f4:	d8c00d17 	ldw	r3,52(sp)
    73f8:	d9000517 	ldw	r4,20(sp)
    73fc:	d8000615 	stw	zero,24(sp)
    7400:	18c00044 	addi	r3,r3,1
    7404:	d8c00d15 	stw	r3,52(sp)
    7408:	00800c44 	movi	r2,49
    740c:	27000044 	addi	fp,r4,1
    7410:	20800005 	stb	r2,0(r4)
    7414:	003e8906 	br	6e3c <_dtoa_r+0xbe4>
    7418:	d8c00517 	ldw	r3,20(sp)
    741c:	003bc206 	br	6328 <_dtoa_r+0xd0>
    7420:	01800074 	movhi	r6,1
    7424:	31beb504 	addi	r6,r6,-1324
    7428:	30c00917 	ldw	r3,36(r6)
    742c:	30800817 	ldw	r2,32(r6)
    7430:	d9001217 	ldw	r4,72(sp)
    7434:	d9401317 	ldw	r5,76(sp)
    7438:	180f883a 	mov	r7,r3
    743c:	100d883a 	mov	r6,r2
    7440:	00031b80 	call	31b8 <__divdf3>
    7444:	948003cc 	andi	r18,r18,15
    7448:	058000c4 	movi	r22,3
    744c:	1029883a 	mov	r20,r2
    7450:	182b883a 	mov	r21,r3
    7454:	003c8906 	br	667c <_dtoa_r+0x424>
    7458:	d9001017 	ldw	r4,64(sp)
    745c:	d9800917 	ldw	r6,36(sp)
    7460:	0025883a 	mov	r18,zero
    7464:	1105c83a 	sub	r2,r2,r4
    7468:	2089883a 	add	r4,r4,r2
    746c:	308d883a 	add	r6,r6,r2
    7470:	d9001015 	stw	r4,64(sp)
    7474:	d9800915 	stw	r6,36(sp)
    7478:	003e3206 	br	6d44 <_dtoa_r+0xaec>
    747c:	28800044 	addi	r2,r5,1
    7480:	27000044 	addi	fp,r4,1
    7484:	20800005 	stb	r2,0(r4)
    7488:	003e6c06 	br	6e3c <_dtoa_r+0xbe4>
    748c:	d8800f17 	ldw	r2,60(sp)
    7490:	00bce016 	blt	zero,r2,6814 <_dtoa_r+0x5bc>
    7494:	d9800f17 	ldw	r6,60(sp)
    7498:	303cc51e 	bne	r6,zero,67b0 <_dtoa_r+0x558>
    749c:	0005883a 	mov	r2,zero
    74a0:	00d00534 	movhi	r3,16404
    74a4:	980b883a 	mov	r5,r19
    74a8:	180f883a 	mov	r7,r3
    74ac:	9009883a 	mov	r4,r18
    74b0:	100d883a 	mov	r6,r2
    74b4:	0002df40 	call	2df4 <__muldf3>
    74b8:	180b883a 	mov	r5,r3
    74bc:	a80f883a 	mov	r7,r21
    74c0:	1009883a 	mov	r4,r2
    74c4:	a00d883a 	mov	r6,r20
    74c8:	000bc800 	call	bc80 <__gedf2>
    74cc:	103cb80e 	bge	r2,zero,67b0 <_dtoa_r+0x558>
    74d0:	0027883a 	mov	r19,zero
    74d4:	0025883a 	mov	r18,zero
    74d8:	003fc606 	br	73f4 <_dtoa_r+0x119c>
    74dc:	99400117 	ldw	r5,4(r19)
    74e0:	d9001617 	ldw	r4,88(sp)
    74e4:	00098cc0 	call	98cc <_Balloc>
    74e8:	99800417 	ldw	r6,16(r19)
    74ec:	11000304 	addi	r4,r2,12
    74f0:	99400304 	addi	r5,r19,12
    74f4:	318d883a 	add	r6,r6,r6
    74f8:	318d883a 	add	r6,r6,r6
    74fc:	31800204 	addi	r6,r6,8
    7500:	1023883a 	mov	r17,r2
    7504:	0003ec40 	call	3ec4 <memcpy>
    7508:	d9001617 	ldw	r4,88(sp)
    750c:	880b883a 	mov	r5,r17
    7510:	01800044 	movi	r6,1
    7514:	0009c900 	call	9c90 <__lshift>
    7518:	100b883a 	mov	r5,r2
    751c:	003d9c06 	br	6b90 <_dtoa_r+0x938>
    7520:	00800e44 	movi	r2,57
    7524:	b8807026 	beq	r23,r2,76e8 <_dtoa_r+0x1490>
    7528:	b8800044 	addi	r2,r23,1
    752c:	b7000044 	addi	fp,r22,1
    7530:	b0800005 	stb	r2,0(r22)
    7534:	003e4106 	br	6e3c <_dtoa_r+0xbe4>
    7538:	d8800317 	ldw	r2,12(sp)
    753c:	01800074 	movhi	r6,1
    7540:	31be8304 	addi	r6,r6,-1524
    7544:	b009883a 	mov	r4,r22
    7548:	100e90fa 	slli	r7,r2,3
    754c:	b80b883a 	mov	r5,r23
    7550:	398f883a 	add	r7,r7,r6
    7554:	38bffe17 	ldw	r2,-8(r7)
    7558:	d9800517 	ldw	r6,20(sp)
    755c:	38ffff17 	ldw	r3,-4(r7)
    7560:	37000044 	addi	fp,r6,1
    7564:	180f883a 	mov	r7,r3
    7568:	100d883a 	mov	r6,r2
    756c:	0002df40 	call	2df4 <__muldf3>
    7570:	a80b883a 	mov	r5,r21
    7574:	a009883a 	mov	r4,r20
    7578:	182f883a 	mov	r23,r3
    757c:	102d883a 	mov	r22,r2
    7580:	00037b00 	call	37b0 <__fixdfsi>
    7584:	1009883a 	mov	r4,r2
    7588:	1027883a 	mov	r19,r2
    758c:	00036b80 	call	36b8 <__floatsidf>
    7590:	a80b883a 	mov	r5,r21
    7594:	a009883a 	mov	r4,r20
    7598:	180f883a 	mov	r7,r3
    759c:	100d883a 	mov	r6,r2
    75a0:	0002d000 	call	2d00 <__subdf3>
    75a4:	180b883a 	mov	r5,r3
    75a8:	d8c00517 	ldw	r3,20(sp)
    75ac:	9cc00c04 	addi	r19,r19,48
    75b0:	1009883a 	mov	r4,r2
    75b4:	1cc00005 	stb	r19,0(r3)
    75b8:	2021883a 	mov	r16,r4
    75bc:	d9000317 	ldw	r4,12(sp)
    75c0:	00800044 	movi	r2,1
    75c4:	2823883a 	mov	r17,r5
    75c8:	20802226 	beq	r4,r2,7654 <_dtoa_r+0x13fc>
    75cc:	1029883a 	mov	r20,r2
    75d0:	0005883a 	mov	r2,zero
    75d4:	00d00934 	movhi	r3,16420
    75d8:	180f883a 	mov	r7,r3
    75dc:	100d883a 	mov	r6,r2
    75e0:	880b883a 	mov	r5,r17
    75e4:	8009883a 	mov	r4,r16
    75e8:	0002df40 	call	2df4 <__muldf3>
    75ec:	180b883a 	mov	r5,r3
    75f0:	1009883a 	mov	r4,r2
    75f4:	1823883a 	mov	r17,r3
    75f8:	1021883a 	mov	r16,r2
    75fc:	00037b00 	call	37b0 <__fixdfsi>
    7600:	1009883a 	mov	r4,r2
    7604:	102b883a 	mov	r21,r2
    7608:	00036b80 	call	36b8 <__floatsidf>
    760c:	880b883a 	mov	r5,r17
    7610:	8009883a 	mov	r4,r16
    7614:	180f883a 	mov	r7,r3
    7618:	100d883a 	mov	r6,r2
    761c:	0002d000 	call	2d00 <__subdf3>
    7620:	180b883a 	mov	r5,r3
    7624:	d8c00517 	ldw	r3,20(sp)
    7628:	1009883a 	mov	r4,r2
    762c:	ad400c04 	addi	r21,r21,48
    7630:	1d05883a 	add	r2,r3,r20
    7634:	15400005 	stb	r21,0(r2)
    7638:	2021883a 	mov	r16,r4
    763c:	d9000317 	ldw	r4,12(sp)
    7640:	a5000044 	addi	r20,r20,1
    7644:	2823883a 	mov	r17,r5
    7648:	a13fe11e 	bne	r20,r4,75d0 <_dtoa_r+0x1378>
    764c:	e505883a 	add	r2,fp,r20
    7650:	173fffc4 	addi	fp,r2,-1
    7654:	0025883a 	mov	r18,zero
    7658:	04cff834 	movhi	r19,16352
    765c:	b009883a 	mov	r4,r22
    7660:	b80b883a 	mov	r5,r23
    7664:	900d883a 	mov	r6,r18
    7668:	980f883a 	mov	r7,r19
    766c:	0002d800 	call	2d80 <__adddf3>
    7670:	180b883a 	mov	r5,r3
    7674:	1009883a 	mov	r4,r2
    7678:	800d883a 	mov	r6,r16
    767c:	880f883a 	mov	r7,r17
    7680:	00035a80 	call	35a8 <__ltdf2>
    7684:	103cab16 	blt	r2,zero,6934 <_dtoa_r+0x6dc>
    7688:	0009883a 	mov	r4,zero
    768c:	980b883a 	mov	r5,r19
    7690:	b80f883a 	mov	r7,r23
    7694:	b00d883a 	mov	r6,r22
    7698:	0002d000 	call	2d00 <__subdf3>
    769c:	180b883a 	mov	r5,r3
    76a0:	880f883a 	mov	r7,r17
    76a4:	1009883a 	mov	r4,r2
    76a8:	800d883a 	mov	r6,r16
    76ac:	00035200 	call	3520 <__gtdf2>
    76b0:	00bc470e 	bge	zero,r2,67d0 <_dtoa_r+0x578>
    76b4:	00c00c04 	movi	r3,48
    76b8:	e73fffc4 	addi	fp,fp,-1
    76bc:	e0800007 	ldb	r2,0(fp)
    76c0:	10fffd26 	beq	r2,r3,76b8 <_dtoa_r+0x1460>
    76c4:	d9800417 	ldw	r6,16(sp)
    76c8:	e7000044 	addi	fp,fp,1
    76cc:	d9800d15 	stw	r6,52(sp)
    76d0:	003cab06 	br	6980 <_dtoa_r+0x728>
    76d4:	d8c00f17 	ldw	r3,60(sp)
    76d8:	d9001117 	ldw	r4,68(sp)
    76dc:	20e1c83a 	sub	r16,r4,r3
    76e0:	0007883a 	mov	r3,zero
    76e4:	003d9b06 	br	6d54 <_dtoa_r+0xafc>
    76e8:	00800e44 	movi	r2,57
    76ec:	b0800005 	stb	r2,0(r22)
    76f0:	b5800044 	addi	r22,r22,1
    76f4:	003dc106 	br	6dfc <_dtoa_r+0xba4>
    76f8:	05800084 	movi	r22,2
    76fc:	003bf706 	br	66dc <_dtoa_r+0x484>
    7700:	d9000f17 	ldw	r4,60(sp)
    7704:	013c000e 	bge	zero,r4,6708 <_dtoa_r+0x4b0>
    7708:	d9800e17 	ldw	r6,56(sp)
    770c:	01bc300e 	bge	zero,r6,67d0 <_dtoa_r+0x578>
    7710:	0005883a 	mov	r2,zero
    7714:	00d00934 	movhi	r3,16420
    7718:	a80b883a 	mov	r5,r21
    771c:	180f883a 	mov	r7,r3
    7720:	a009883a 	mov	r4,r20
    7724:	100d883a 	mov	r6,r2
    7728:	0002df40 	call	2df4 <__muldf3>
    772c:	b1000044 	addi	r4,r22,1
    7730:	1021883a 	mov	r16,r2
    7734:	1823883a 	mov	r17,r3
    7738:	00036b80 	call	36b8 <__floatsidf>
    773c:	880b883a 	mov	r5,r17
    7740:	8009883a 	mov	r4,r16
    7744:	180f883a 	mov	r7,r3
    7748:	100d883a 	mov	r6,r2
    774c:	0002df40 	call	2df4 <__muldf3>
    7750:	0011883a 	mov	r8,zero
    7754:	02500734 	movhi	r9,16412
    7758:	180b883a 	mov	r5,r3
    775c:	480f883a 	mov	r7,r9
    7760:	1009883a 	mov	r4,r2
    7764:	400d883a 	mov	r6,r8
    7768:	0002d800 	call	2d80 <__adddf3>
    776c:	102d883a 	mov	r22,r2
    7770:	00bf3034 	movhi	r2,64704
    7774:	10ef883a 	add	r23,r2,r3
    7778:	d8800d17 	ldw	r2,52(sp)
    777c:	d8c00e17 	ldw	r3,56(sp)
    7780:	8029883a 	mov	r20,r16
    7784:	10bfffc4 	addi	r2,r2,-1
    7788:	882b883a 	mov	r21,r17
    778c:	d8800415 	stw	r2,16(sp)
    7790:	d8c00315 	stw	r3,12(sp)
    7794:	003e8306 	br	71a4 <_dtoa_r+0xf4c>
    7798:	d8800117 	ldw	r2,4(sp)
    779c:	dc001117 	ldw	r16,68(sp)
    77a0:	dc801017 	ldw	r18,64(sp)
    77a4:	00c00d84 	movi	r3,54
    77a8:	1887c83a 	sub	r3,r3,r2
    77ac:	003d6906 	br	6d54 <_dtoa_r+0xafc>
    77b0:	01800044 	movi	r6,1
    77b4:	3021883a 	mov	r16,r6
    77b8:	d9800f15 	stw	r6,60(sp)
    77bc:	d9802615 	stw	r6,152(sp)
    77c0:	d9800e15 	stw	r6,56(sp)
    77c4:	003b9306 	br	6614 <_dtoa_r+0x3bc>
    77c8:	b021883a 	mov	r16,r22
    77cc:	dd800f15 	stw	r22,60(sp)
    77d0:	003b9006 	br	6614 <_dtoa_r+0x3bc>
    77d4:	103e221e 	bne	r2,zero,7060 <_dtoa_r+0xe08>
    77d8:	b880004c 	andi	r2,r23,1
    77dc:	1005003a 	cmpeq	r2,r2,zero
    77e0:	103e1f1e 	bne	r2,zero,7060 <_dtoa_r+0xe08>
    77e4:	003e1b06 	br	7054 <_dtoa_r+0xdfc>
    77e8:	d9001617 	ldw	r4,88(sp)
    77ec:	980b883a 	mov	r5,r19
    77f0:	01800284 	movi	r6,10
    77f4:	000f883a 	mov	r7,zero
    77f8:	000a0000 	call	a000 <__multadd>
    77fc:	d8c00e17 	ldw	r3,56(sp)
    7800:	1027883a 	mov	r19,r2
    7804:	d8c00f15 	stw	r3,60(sp)
    7808:	003cd306 	br	6b58 <_dtoa_r+0x900>

0000780c <_fflush_r>:
    780c:	defffb04 	addi	sp,sp,-20
    7810:	dcc00315 	stw	r19,12(sp)
    7814:	dc800215 	stw	r18,8(sp)
    7818:	dfc00415 	stw	ra,16(sp)
    781c:	dc400115 	stw	r17,4(sp)
    7820:	dc000015 	stw	r16,0(sp)
    7824:	2027883a 	mov	r19,r4
    7828:	2825883a 	mov	r18,r5
    782c:	20000226 	beq	r4,zero,7838 <_fflush_r+0x2c>
    7830:	20800e17 	ldw	r2,56(r4)
    7834:	10005626 	beq	r2,zero,7990 <_fflush_r+0x184>
    7838:	9100030b 	ldhu	r4,12(r18)
    783c:	20ffffcc 	andi	r3,r4,65535
    7840:	18e0001c 	xori	r3,r3,32768
    7844:	18e00004 	addi	r3,r3,-32768
    7848:	1880020c 	andi	r2,r3,8
    784c:	1000261e 	bne	r2,zero,78e8 <_fflush_r+0xdc>
    7850:	90c00117 	ldw	r3,4(r18)
    7854:	20820014 	ori	r2,r4,2048
    7858:	9080030d 	sth	r2,12(r18)
    785c:	1009883a 	mov	r4,r2
    7860:	00c0400e 	bge	zero,r3,7964 <_fflush_r+0x158>
    7864:	92000a17 	ldw	r8,40(r18)
    7868:	40004026 	beq	r8,zero,796c <_fflush_r+0x160>
    786c:	2084000c 	andi	r2,r4,4096
    7870:	10005326 	beq	r2,zero,79c0 <_fflush_r+0x1b4>
    7874:	94001417 	ldw	r16,80(r18)
    7878:	9080030b 	ldhu	r2,12(r18)
    787c:	1080010c 	andi	r2,r2,4
    7880:	1000481e 	bne	r2,zero,79a4 <_fflush_r+0x198>
    7884:	91400717 	ldw	r5,28(r18)
    7888:	9809883a 	mov	r4,r19
    788c:	800d883a 	mov	r6,r16
    7890:	000f883a 	mov	r7,zero
    7894:	403ee83a 	callr	r8
    7898:	8080261e 	bne	r16,r2,7934 <_fflush_r+0x128>
    789c:	9080030b 	ldhu	r2,12(r18)
    78a0:	91000417 	ldw	r4,16(r18)
    78a4:	90000115 	stw	zero,4(r18)
    78a8:	10bdffcc 	andi	r2,r2,63487
    78ac:	10ffffcc 	andi	r3,r2,65535
    78b0:	18c4000c 	andi	r3,r3,4096
    78b4:	9080030d 	sth	r2,12(r18)
    78b8:	91000015 	stw	r4,0(r18)
    78bc:	18002b26 	beq	r3,zero,796c <_fflush_r+0x160>
    78c0:	0007883a 	mov	r3,zero
    78c4:	1805883a 	mov	r2,r3
    78c8:	94001415 	stw	r16,80(r18)
    78cc:	dfc00417 	ldw	ra,16(sp)
    78d0:	dcc00317 	ldw	r19,12(sp)
    78d4:	dc800217 	ldw	r18,8(sp)
    78d8:	dc400117 	ldw	r17,4(sp)
    78dc:	dc000017 	ldw	r16,0(sp)
    78e0:	dec00504 	addi	sp,sp,20
    78e4:	f800283a 	ret
    78e8:	94400417 	ldw	r17,16(r18)
    78ec:	88001f26 	beq	r17,zero,796c <_fflush_r+0x160>
    78f0:	90800017 	ldw	r2,0(r18)
    78f4:	18c000cc 	andi	r3,r3,3
    78f8:	94400015 	stw	r17,0(r18)
    78fc:	1461c83a 	sub	r16,r2,r17
    7900:	18002526 	beq	r3,zero,7998 <_fflush_r+0x18c>
    7904:	0005883a 	mov	r2,zero
    7908:	90800215 	stw	r2,8(r18)
    790c:	0400170e 	bge	zero,r16,796c <_fflush_r+0x160>
    7910:	90c00917 	ldw	r3,36(r18)
    7914:	91400717 	ldw	r5,28(r18)
    7918:	880d883a 	mov	r6,r17
    791c:	800f883a 	mov	r7,r16
    7920:	9809883a 	mov	r4,r19
    7924:	183ee83a 	callr	r3
    7928:	88a3883a 	add	r17,r17,r2
    792c:	80a1c83a 	sub	r16,r16,r2
    7930:	00bff616 	blt	zero,r2,790c <_fflush_r+0x100>
    7934:	9080030b 	ldhu	r2,12(r18)
    7938:	00ffffc4 	movi	r3,-1
    793c:	10801014 	ori	r2,r2,64
    7940:	9080030d 	sth	r2,12(r18)
    7944:	1805883a 	mov	r2,r3
    7948:	dfc00417 	ldw	ra,16(sp)
    794c:	dcc00317 	ldw	r19,12(sp)
    7950:	dc800217 	ldw	r18,8(sp)
    7954:	dc400117 	ldw	r17,4(sp)
    7958:	dc000017 	ldw	r16,0(sp)
    795c:	dec00504 	addi	sp,sp,20
    7960:	f800283a 	ret
    7964:	90800f17 	ldw	r2,60(r18)
    7968:	00bfbe16 	blt	zero,r2,7864 <_fflush_r+0x58>
    796c:	0007883a 	mov	r3,zero
    7970:	1805883a 	mov	r2,r3
    7974:	dfc00417 	ldw	ra,16(sp)
    7978:	dcc00317 	ldw	r19,12(sp)
    797c:	dc800217 	ldw	r18,8(sp)
    7980:	dc400117 	ldw	r17,4(sp)
    7984:	dc000017 	ldw	r16,0(sp)
    7988:	dec00504 	addi	sp,sp,20
    798c:	f800283a 	ret
    7990:	0007aa40 	call	7aa4 <__sinit>
    7994:	003fa806 	br	7838 <_fflush_r+0x2c>
    7998:	90800517 	ldw	r2,20(r18)
    799c:	90800215 	stw	r2,8(r18)
    79a0:	003fda06 	br	790c <_fflush_r+0x100>
    79a4:	90800117 	ldw	r2,4(r18)
    79a8:	90c00c17 	ldw	r3,48(r18)
    79ac:	80a1c83a 	sub	r16,r16,r2
    79b0:	183fb426 	beq	r3,zero,7884 <_fflush_r+0x78>
    79b4:	90800f17 	ldw	r2,60(r18)
    79b8:	80a1c83a 	sub	r16,r16,r2
    79bc:	003fb106 	br	7884 <_fflush_r+0x78>
    79c0:	91400717 	ldw	r5,28(r18)
    79c4:	9809883a 	mov	r4,r19
    79c8:	000d883a 	mov	r6,zero
    79cc:	01c00044 	movi	r7,1
    79d0:	403ee83a 	callr	r8
    79d4:	1021883a 	mov	r16,r2
    79d8:	00bfffc4 	movi	r2,-1
    79dc:	80800226 	beq	r16,r2,79e8 <_fflush_r+0x1dc>
    79e0:	92000a17 	ldw	r8,40(r18)
    79e4:	003fa406 	br	7878 <_fflush_r+0x6c>
    79e8:	98c00017 	ldw	r3,0(r19)
    79ec:	00800744 	movi	r2,29
    79f0:	18bfde26 	beq	r3,r2,796c <_fflush_r+0x160>
    79f4:	9080030b 	ldhu	r2,12(r18)
    79f8:	8007883a 	mov	r3,r16
    79fc:	10801014 	ori	r2,r2,64
    7a00:	9080030d 	sth	r2,12(r18)
    7a04:	003fcf06 	br	7944 <_fflush_r+0x138>

00007a08 <fflush>:
    7a08:	01400034 	movhi	r5,0
    7a0c:	295e0304 	addi	r5,r5,30732
    7a10:	2007883a 	mov	r3,r4
    7a14:	20000526 	beq	r4,zero,7a2c <fflush+0x24>
    7a18:	00800074 	movhi	r2,1
    7a1c:	10864d04 	addi	r2,r2,6452
    7a20:	11000017 	ldw	r4,0(r2)
    7a24:	180b883a 	mov	r5,r3
    7a28:	000780c1 	jmpi	780c <_fflush_r>
    7a2c:	00800074 	movhi	r2,1
    7a30:	10864e04 	addi	r2,r2,6456
    7a34:	11000017 	ldw	r4,0(r2)
    7a38:	00085d81 	jmpi	85d8 <_fwalk_reent>

00007a3c <std>:
    7a3c:	00800074 	movhi	r2,1
    7a40:	10aa7904 	addi	r2,r2,-22044
    7a44:	20800b15 	stw	r2,44(r4)
    7a48:	00800074 	movhi	r2,1
    7a4c:	10aab404 	addi	r2,r2,-21808
    7a50:	20800815 	stw	r2,32(r4)
    7a54:	00c00074 	movhi	r3,1
    7a58:	18ea9504 	addi	r3,r3,-21932
    7a5c:	00800074 	movhi	r2,1
    7a60:	10aa7b04 	addi	r2,r2,-22036
    7a64:	2140030d 	sth	r5,12(r4)
    7a68:	2180038d 	sth	r6,14(r4)
    7a6c:	20c00915 	stw	r3,36(r4)
    7a70:	20800a15 	stw	r2,40(r4)
    7a74:	20000015 	stw	zero,0(r4)
    7a78:	20000115 	stw	zero,4(r4)
    7a7c:	20000215 	stw	zero,8(r4)
    7a80:	20000415 	stw	zero,16(r4)
    7a84:	20000515 	stw	zero,20(r4)
    7a88:	20000615 	stw	zero,24(r4)
    7a8c:	21000715 	stw	r4,28(r4)
    7a90:	f800283a 	ret

00007a94 <__sfp_lock_acquire>:
    7a94:	f800283a 	ret

00007a98 <__sfp_lock_release>:
    7a98:	f800283a 	ret

00007a9c <__sinit_lock_acquire>:
    7a9c:	f800283a 	ret

00007aa0 <__sinit_lock_release>:
    7aa0:	f800283a 	ret

00007aa4 <__sinit>:
    7aa4:	20800e17 	ldw	r2,56(r4)
    7aa8:	defffd04 	addi	sp,sp,-12
    7aac:	dc400115 	stw	r17,4(sp)
    7ab0:	dc000015 	stw	r16,0(sp)
    7ab4:	dfc00215 	stw	ra,8(sp)
    7ab8:	04400044 	movi	r17,1
    7abc:	01400104 	movi	r5,4
    7ac0:	000d883a 	mov	r6,zero
    7ac4:	2021883a 	mov	r16,r4
    7ac8:	2200bb04 	addi	r8,r4,748
    7acc:	200f883a 	mov	r7,r4
    7ad0:	10000526 	beq	r2,zero,7ae8 <__sinit+0x44>
    7ad4:	dfc00217 	ldw	ra,8(sp)
    7ad8:	dc400117 	ldw	r17,4(sp)
    7adc:	dc000017 	ldw	r16,0(sp)
    7ae0:	dec00304 	addi	sp,sp,12
    7ae4:	f800283a 	ret
    7ae8:	21000117 	ldw	r4,4(r4)
    7aec:	00800034 	movhi	r2,0
    7af0:	109ee204 	addi	r2,r2,31624
    7af4:	00c000c4 	movi	r3,3
    7af8:	80800f15 	stw	r2,60(r16)
    7afc:	80c0b915 	stw	r3,740(r16)
    7b00:	8200ba15 	stw	r8,744(r16)
    7b04:	84400e15 	stw	r17,56(r16)
    7b08:	8000b815 	stw	zero,736(r16)
    7b0c:	0007a3c0 	call	7a3c <std>
    7b10:	81000217 	ldw	r4,8(r16)
    7b14:	880d883a 	mov	r6,r17
    7b18:	800f883a 	mov	r7,r16
    7b1c:	01400284 	movi	r5,10
    7b20:	0007a3c0 	call	7a3c <std>
    7b24:	81000317 	ldw	r4,12(r16)
    7b28:	800f883a 	mov	r7,r16
    7b2c:	01400484 	movi	r5,18
    7b30:	01800084 	movi	r6,2
    7b34:	dfc00217 	ldw	ra,8(sp)
    7b38:	dc400117 	ldw	r17,4(sp)
    7b3c:	dc000017 	ldw	r16,0(sp)
    7b40:	dec00304 	addi	sp,sp,12
    7b44:	0007a3c1 	jmpi	7a3c <std>

00007b48 <__fp_lock>:
    7b48:	0005883a 	mov	r2,zero
    7b4c:	f800283a 	ret

00007b50 <__fp_unlock>:
    7b50:	0005883a 	mov	r2,zero
    7b54:	f800283a 	ret

00007b58 <__fp_unlock_all>:
    7b58:	00800074 	movhi	r2,1
    7b5c:	10864d04 	addi	r2,r2,6452
    7b60:	11000017 	ldw	r4,0(r2)
    7b64:	01400034 	movhi	r5,0
    7b68:	295ed404 	addi	r5,r5,31568
    7b6c:	00086a01 	jmpi	86a0 <_fwalk>

00007b70 <__fp_lock_all>:
    7b70:	00800074 	movhi	r2,1
    7b74:	10864d04 	addi	r2,r2,6452
    7b78:	11000017 	ldw	r4,0(r2)
    7b7c:	01400034 	movhi	r5,0
    7b80:	295ed204 	addi	r5,r5,31560
    7b84:	00086a01 	jmpi	86a0 <_fwalk>

00007b88 <_cleanup_r>:
    7b88:	01400074 	movhi	r5,1
    7b8c:	296bc304 	addi	r5,r5,-20724
    7b90:	00086a01 	jmpi	86a0 <_fwalk>

00007b94 <_cleanup>:
    7b94:	00800074 	movhi	r2,1
    7b98:	10864e04 	addi	r2,r2,6456
    7b9c:	11000017 	ldw	r4,0(r2)
    7ba0:	0007b881 	jmpi	7b88 <_cleanup_r>

00007ba4 <__sfmoreglue>:
    7ba4:	defffc04 	addi	sp,sp,-16
    7ba8:	dc400115 	stw	r17,4(sp)
    7bac:	2c401724 	muli	r17,r5,92
    7bb0:	dc800215 	stw	r18,8(sp)
    7bb4:	2825883a 	mov	r18,r5
    7bb8:	89400304 	addi	r5,r17,12
    7bbc:	dc000015 	stw	r16,0(sp)
    7bc0:	dfc00315 	stw	ra,12(sp)
    7bc4:	00089b00 	call	89b0 <_malloc_r>
    7bc8:	0021883a 	mov	r16,zero
    7bcc:	880d883a 	mov	r6,r17
    7bd0:	000b883a 	mov	r5,zero
    7bd4:	10000626 	beq	r2,zero,7bf0 <__sfmoreglue+0x4c>
    7bd8:	11000304 	addi	r4,r2,12
    7bdc:	14800115 	stw	r18,4(r2)
    7be0:	10000015 	stw	zero,0(r2)
    7be4:	11000215 	stw	r4,8(r2)
    7be8:	1021883a 	mov	r16,r2
    7bec:	00092b40 	call	92b4 <memset>
    7bf0:	8005883a 	mov	r2,r16
    7bf4:	dfc00317 	ldw	ra,12(sp)
    7bf8:	dc800217 	ldw	r18,8(sp)
    7bfc:	dc400117 	ldw	r17,4(sp)
    7c00:	dc000017 	ldw	r16,0(sp)
    7c04:	dec00404 	addi	sp,sp,16
    7c08:	f800283a 	ret

00007c0c <__sfp>:
    7c0c:	defffd04 	addi	sp,sp,-12
    7c10:	00800074 	movhi	r2,1
    7c14:	10864e04 	addi	r2,r2,6456
    7c18:	dc000015 	stw	r16,0(sp)
    7c1c:	14000017 	ldw	r16,0(r2)
    7c20:	dc400115 	stw	r17,4(sp)
    7c24:	dfc00215 	stw	ra,8(sp)
    7c28:	80800e17 	ldw	r2,56(r16)
    7c2c:	2023883a 	mov	r17,r4
    7c30:	10002626 	beq	r2,zero,7ccc <__sfp+0xc0>
    7c34:	8400b804 	addi	r16,r16,736
    7c38:	80800117 	ldw	r2,4(r16)
    7c3c:	81000217 	ldw	r4,8(r16)
    7c40:	10ffffc4 	addi	r3,r2,-1
    7c44:	18000916 	blt	r3,zero,7c6c <__sfp+0x60>
    7c48:	2080030f 	ldh	r2,12(r4)
    7c4c:	10000b26 	beq	r2,zero,7c7c <__sfp+0x70>
    7c50:	017fffc4 	movi	r5,-1
    7c54:	00000206 	br	7c60 <__sfp+0x54>
    7c58:	2080030f 	ldh	r2,12(r4)
    7c5c:	10000726 	beq	r2,zero,7c7c <__sfp+0x70>
    7c60:	18ffffc4 	addi	r3,r3,-1
    7c64:	21001704 	addi	r4,r4,92
    7c68:	197ffb1e 	bne	r3,r5,7c58 <__sfp+0x4c>
    7c6c:	80800017 	ldw	r2,0(r16)
    7c70:	10001926 	beq	r2,zero,7cd8 <__sfp+0xcc>
    7c74:	1021883a 	mov	r16,r2
    7c78:	003fef06 	br	7c38 <__sfp+0x2c>
    7c7c:	00bfffc4 	movi	r2,-1
    7c80:	00c00044 	movi	r3,1
    7c84:	2080038d 	sth	r2,14(r4)
    7c88:	20c0030d 	sth	r3,12(r4)
    7c8c:	20000015 	stw	zero,0(r4)
    7c90:	20000215 	stw	zero,8(r4)
    7c94:	20000115 	stw	zero,4(r4)
    7c98:	20000415 	stw	zero,16(r4)
    7c9c:	20000515 	stw	zero,20(r4)
    7ca0:	20000615 	stw	zero,24(r4)
    7ca4:	20000c15 	stw	zero,48(r4)
    7ca8:	20000d15 	stw	zero,52(r4)
    7cac:	20001115 	stw	zero,68(r4)
    7cb0:	20001215 	stw	zero,72(r4)
    7cb4:	2005883a 	mov	r2,r4
    7cb8:	dfc00217 	ldw	ra,8(sp)
    7cbc:	dc400117 	ldw	r17,4(sp)
    7cc0:	dc000017 	ldw	r16,0(sp)
    7cc4:	dec00304 	addi	sp,sp,12
    7cc8:	f800283a 	ret
    7ccc:	8009883a 	mov	r4,r16
    7cd0:	0007aa40 	call	7aa4 <__sinit>
    7cd4:	003fd706 	br	7c34 <__sfp+0x28>
    7cd8:	8809883a 	mov	r4,r17
    7cdc:	01400104 	movi	r5,4
    7ce0:	0007ba40 	call	7ba4 <__sfmoreglue>
    7ce4:	80800015 	stw	r2,0(r16)
    7ce8:	103fe21e 	bne	r2,zero,7c74 <__sfp+0x68>
    7cec:	00800304 	movi	r2,12
    7cf0:	0009883a 	mov	r4,zero
    7cf4:	88800015 	stw	r2,0(r17)
    7cf8:	003fee06 	br	7cb4 <__sfp+0xa8>

00007cfc <_malloc_trim_r>:
    7cfc:	defffb04 	addi	sp,sp,-20
    7d00:	dcc00315 	stw	r19,12(sp)
    7d04:	04c00074 	movhi	r19,1
    7d08:	9cc06404 	addi	r19,r19,400
    7d0c:	dc800215 	stw	r18,8(sp)
    7d10:	dc400115 	stw	r17,4(sp)
    7d14:	dc000015 	stw	r16,0(sp)
    7d18:	2823883a 	mov	r17,r5
    7d1c:	2025883a 	mov	r18,r4
    7d20:	dfc00415 	stw	ra,16(sp)
    7d24:	000c66c0 	call	c66c <__malloc_lock>
    7d28:	98800217 	ldw	r2,8(r19)
    7d2c:	9009883a 	mov	r4,r18
    7d30:	000b883a 	mov	r5,zero
    7d34:	10c00117 	ldw	r3,4(r2)
    7d38:	00bfff04 	movi	r2,-4
    7d3c:	18a0703a 	and	r16,r3,r2
    7d40:	8463c83a 	sub	r17,r16,r17
    7d44:	8c43fbc4 	addi	r17,r17,4079
    7d48:	8822d33a 	srli	r17,r17,12
    7d4c:	0083ffc4 	movi	r2,4095
    7d50:	8c7fffc4 	addi	r17,r17,-1
    7d54:	8822933a 	slli	r17,r17,12
    7d58:	1440060e 	bge	r2,r17,7d74 <_malloc_trim_r+0x78>
    7d5c:	000a9740 	call	a974 <_sbrk_r>
    7d60:	98c00217 	ldw	r3,8(r19)
    7d64:	9009883a 	mov	r4,r18
    7d68:	044bc83a 	sub	r5,zero,r17
    7d6c:	80c7883a 	add	r3,r16,r3
    7d70:	10c00926 	beq	r2,r3,7d98 <_malloc_trim_r+0x9c>
    7d74:	000c68c0 	call	c68c <__malloc_unlock>
    7d78:	0005883a 	mov	r2,zero
    7d7c:	dfc00417 	ldw	ra,16(sp)
    7d80:	dcc00317 	ldw	r19,12(sp)
    7d84:	dc800217 	ldw	r18,8(sp)
    7d88:	dc400117 	ldw	r17,4(sp)
    7d8c:	dc000017 	ldw	r16,0(sp)
    7d90:	dec00504 	addi	sp,sp,20
    7d94:	f800283a 	ret
    7d98:	9009883a 	mov	r4,r18
    7d9c:	000a9740 	call	a974 <_sbrk_r>
    7da0:	844dc83a 	sub	r6,r16,r17
    7da4:	00ffffc4 	movi	r3,-1
    7da8:	9009883a 	mov	r4,r18
    7dac:	000b883a 	mov	r5,zero
    7db0:	01c00074 	movhi	r7,1
    7db4:	39cde704 	addi	r7,r7,14236
    7db8:	31800054 	ori	r6,r6,1
    7dbc:	10c00926 	beq	r2,r3,7de4 <_malloc_trim_r+0xe8>
    7dc0:	38800017 	ldw	r2,0(r7)
    7dc4:	98c00217 	ldw	r3,8(r19)
    7dc8:	9009883a 	mov	r4,r18
    7dcc:	1445c83a 	sub	r2,r2,r17
    7dd0:	38800015 	stw	r2,0(r7)
    7dd4:	19800115 	stw	r6,4(r3)
    7dd8:	000c68c0 	call	c68c <__malloc_unlock>
    7ddc:	00800044 	movi	r2,1
    7de0:	003fe606 	br	7d7c <_malloc_trim_r+0x80>
    7de4:	000a9740 	call	a974 <_sbrk_r>
    7de8:	99800217 	ldw	r6,8(r19)
    7dec:	100f883a 	mov	r7,r2
    7df0:	9009883a 	mov	r4,r18
    7df4:	1187c83a 	sub	r3,r2,r6
    7df8:	008003c4 	movi	r2,15
    7dfc:	19400054 	ori	r5,r3,1
    7e00:	10ffdc0e 	bge	r2,r3,7d74 <_malloc_trim_r+0x78>
    7e04:	00800074 	movhi	r2,1
    7e08:	10865204 	addi	r2,r2,6472
    7e0c:	10c00017 	ldw	r3,0(r2)
    7e10:	00800074 	movhi	r2,1
    7e14:	108de704 	addi	r2,r2,14236
    7e18:	31400115 	stw	r5,4(r6)
    7e1c:	38c7c83a 	sub	r3,r7,r3
    7e20:	10c00015 	stw	r3,0(r2)
    7e24:	003fd306 	br	7d74 <_malloc_trim_r+0x78>

00007e28 <_free_r>:
    7e28:	defffd04 	addi	sp,sp,-12
    7e2c:	dc400115 	stw	r17,4(sp)
    7e30:	dc000015 	stw	r16,0(sp)
    7e34:	dfc00215 	stw	ra,8(sp)
    7e38:	2821883a 	mov	r16,r5
    7e3c:	2023883a 	mov	r17,r4
    7e40:	28005a26 	beq	r5,zero,7fac <_free_r+0x184>
    7e44:	000c66c0 	call	c66c <__malloc_lock>
    7e48:	823ffe04 	addi	r8,r16,-8
    7e4c:	41400117 	ldw	r5,4(r8)
    7e50:	00bfff84 	movi	r2,-2
    7e54:	02800074 	movhi	r10,1
    7e58:	52806404 	addi	r10,r10,400
    7e5c:	288e703a 	and	r7,r5,r2
    7e60:	41cd883a 	add	r6,r8,r7
    7e64:	30c00117 	ldw	r3,4(r6)
    7e68:	51000217 	ldw	r4,8(r10)
    7e6c:	00bfff04 	movi	r2,-4
    7e70:	1892703a 	and	r9,r3,r2
    7e74:	5017883a 	mov	r11,r10
    7e78:	31006726 	beq	r6,r4,8018 <_free_r+0x1f0>
    7e7c:	2880004c 	andi	r2,r5,1
    7e80:	1005003a 	cmpeq	r2,r2,zero
    7e84:	32400115 	stw	r9,4(r6)
    7e88:	10001a1e 	bne	r2,zero,7ef4 <_free_r+0xcc>
    7e8c:	000b883a 	mov	r5,zero
    7e90:	3247883a 	add	r3,r6,r9
    7e94:	18800117 	ldw	r2,4(r3)
    7e98:	1080004c 	andi	r2,r2,1
    7e9c:	1000231e 	bne	r2,zero,7f2c <_free_r+0x104>
    7ea0:	280ac03a 	cmpne	r5,r5,zero
    7ea4:	3a4f883a 	add	r7,r7,r9
    7ea8:	2800451e 	bne	r5,zero,7fc0 <_free_r+0x198>
    7eac:	31000217 	ldw	r4,8(r6)
    7eb0:	00800074 	movhi	r2,1
    7eb4:	10806604 	addi	r2,r2,408
    7eb8:	20807b26 	beq	r4,r2,80a8 <_free_r+0x280>
    7ebc:	30800317 	ldw	r2,12(r6)
    7ec0:	3a07883a 	add	r3,r7,r8
    7ec4:	19c00015 	stw	r7,0(r3)
    7ec8:	11000215 	stw	r4,8(r2)
    7ecc:	20800315 	stw	r2,12(r4)
    7ed0:	38800054 	ori	r2,r7,1
    7ed4:	40800115 	stw	r2,4(r8)
    7ed8:	28001a26 	beq	r5,zero,7f44 <_free_r+0x11c>
    7edc:	8809883a 	mov	r4,r17
    7ee0:	dfc00217 	ldw	ra,8(sp)
    7ee4:	dc400117 	ldw	r17,4(sp)
    7ee8:	dc000017 	ldw	r16,0(sp)
    7eec:	dec00304 	addi	sp,sp,12
    7ef0:	000c68c1 	jmpi	c68c <__malloc_unlock>
    7ef4:	80bffe17 	ldw	r2,-8(r16)
    7ef8:	50c00204 	addi	r3,r10,8
    7efc:	4091c83a 	sub	r8,r8,r2
    7f00:	41000217 	ldw	r4,8(r8)
    7f04:	388f883a 	add	r7,r7,r2
    7f08:	20c06126 	beq	r4,r3,8090 <_free_r+0x268>
    7f0c:	40800317 	ldw	r2,12(r8)
    7f10:	3247883a 	add	r3,r6,r9
    7f14:	000b883a 	mov	r5,zero
    7f18:	11000215 	stw	r4,8(r2)
    7f1c:	20800315 	stw	r2,12(r4)
    7f20:	18800117 	ldw	r2,4(r3)
    7f24:	1080004c 	andi	r2,r2,1
    7f28:	103fdd26 	beq	r2,zero,7ea0 <_free_r+0x78>
    7f2c:	38800054 	ori	r2,r7,1
    7f30:	3a07883a 	add	r3,r7,r8
    7f34:	280ac03a 	cmpne	r5,r5,zero
    7f38:	40800115 	stw	r2,4(r8)
    7f3c:	19c00015 	stw	r7,0(r3)
    7f40:	283fe61e 	bne	r5,zero,7edc <_free_r+0xb4>
    7f44:	00807fc4 	movi	r2,511
    7f48:	11c01f2e 	bgeu	r2,r7,7fc8 <_free_r+0x1a0>
    7f4c:	3806d27a 	srli	r3,r7,9
    7f50:	1800481e 	bne	r3,zero,8074 <_free_r+0x24c>
    7f54:	3804d0fa 	srli	r2,r7,3
    7f58:	100690fa 	slli	r3,r2,3
    7f5c:	1acd883a 	add	r6,r3,r11
    7f60:	31400217 	ldw	r5,8(r6)
    7f64:	31405926 	beq	r6,r5,80cc <_free_r+0x2a4>
    7f68:	28800117 	ldw	r2,4(r5)
    7f6c:	00ffff04 	movi	r3,-4
    7f70:	10c4703a 	and	r2,r2,r3
    7f74:	3880022e 	bgeu	r7,r2,7f80 <_free_r+0x158>
    7f78:	29400217 	ldw	r5,8(r5)
    7f7c:	317ffa1e 	bne	r6,r5,7f68 <_free_r+0x140>
    7f80:	29800317 	ldw	r6,12(r5)
    7f84:	41800315 	stw	r6,12(r8)
    7f88:	41400215 	stw	r5,8(r8)
    7f8c:	8809883a 	mov	r4,r17
    7f90:	2a000315 	stw	r8,12(r5)
    7f94:	32000215 	stw	r8,8(r6)
    7f98:	dfc00217 	ldw	ra,8(sp)
    7f9c:	dc400117 	ldw	r17,4(sp)
    7fa0:	dc000017 	ldw	r16,0(sp)
    7fa4:	dec00304 	addi	sp,sp,12
    7fa8:	000c68c1 	jmpi	c68c <__malloc_unlock>
    7fac:	dfc00217 	ldw	ra,8(sp)
    7fb0:	dc400117 	ldw	r17,4(sp)
    7fb4:	dc000017 	ldw	r16,0(sp)
    7fb8:	dec00304 	addi	sp,sp,12
    7fbc:	f800283a 	ret
    7fc0:	31000217 	ldw	r4,8(r6)
    7fc4:	003fbd06 	br	7ebc <_free_r+0x94>
    7fc8:	3806d0fa 	srli	r3,r7,3
    7fcc:	00800044 	movi	r2,1
    7fd0:	51400117 	ldw	r5,4(r10)
    7fd4:	180890fa 	slli	r4,r3,3
    7fd8:	1807d0ba 	srai	r3,r3,2
    7fdc:	22c9883a 	add	r4,r4,r11
    7fe0:	21800217 	ldw	r6,8(r4)
    7fe4:	10c4983a 	sll	r2,r2,r3
    7fe8:	41000315 	stw	r4,12(r8)
    7fec:	41800215 	stw	r6,8(r8)
    7ff0:	288ab03a 	or	r5,r5,r2
    7ff4:	22000215 	stw	r8,8(r4)
    7ff8:	8809883a 	mov	r4,r17
    7ffc:	51400115 	stw	r5,4(r10)
    8000:	32000315 	stw	r8,12(r6)
    8004:	dfc00217 	ldw	ra,8(sp)
    8008:	dc400117 	ldw	r17,4(sp)
    800c:	dc000017 	ldw	r16,0(sp)
    8010:	dec00304 	addi	sp,sp,12
    8014:	000c68c1 	jmpi	c68c <__malloc_unlock>
    8018:	2880004c 	andi	r2,r5,1
    801c:	3a4d883a 	add	r6,r7,r9
    8020:	1000071e 	bne	r2,zero,8040 <_free_r+0x218>
    8024:	80bffe17 	ldw	r2,-8(r16)
    8028:	4091c83a 	sub	r8,r8,r2
    802c:	41000317 	ldw	r4,12(r8)
    8030:	40c00217 	ldw	r3,8(r8)
    8034:	308d883a 	add	r6,r6,r2
    8038:	20c00215 	stw	r3,8(r4)
    803c:	19000315 	stw	r4,12(r3)
    8040:	00800074 	movhi	r2,1
    8044:	10865104 	addi	r2,r2,6468
    8048:	11000017 	ldw	r4,0(r2)
    804c:	30c00054 	ori	r3,r6,1
    8050:	52000215 	stw	r8,8(r10)
    8054:	40c00115 	stw	r3,4(r8)
    8058:	313fa036 	bltu	r6,r4,7edc <_free_r+0xb4>
    805c:	00800074 	movhi	r2,1
    8060:	108ddd04 	addi	r2,r2,14196
    8064:	11400017 	ldw	r5,0(r2)
    8068:	8809883a 	mov	r4,r17
    806c:	0007cfc0 	call	7cfc <_malloc_trim_r>
    8070:	003f9a06 	br	7edc <_free_r+0xb4>
    8074:	00800104 	movi	r2,4
    8078:	10c0072e 	bgeu	r2,r3,8098 <_free_r+0x270>
    807c:	00800504 	movi	r2,20
    8080:	10c01936 	bltu	r2,r3,80e8 <_free_r+0x2c0>
    8084:	188016c4 	addi	r2,r3,91
    8088:	100690fa 	slli	r3,r2,3
    808c:	003fb306 	br	7f5c <_free_r+0x134>
    8090:	01400044 	movi	r5,1
    8094:	003f7e06 	br	7e90 <_free_r+0x68>
    8098:	3804d1ba 	srli	r2,r7,6
    809c:	10800e04 	addi	r2,r2,56
    80a0:	100690fa 	slli	r3,r2,3
    80a4:	003fad06 	br	7f5c <_free_r+0x134>
    80a8:	22000315 	stw	r8,12(r4)
    80ac:	22000215 	stw	r8,8(r4)
    80b0:	3a05883a 	add	r2,r7,r8
    80b4:	38c00054 	ori	r3,r7,1
    80b8:	11c00015 	stw	r7,0(r2)
    80bc:	41000215 	stw	r4,8(r8)
    80c0:	40c00115 	stw	r3,4(r8)
    80c4:	41000315 	stw	r4,12(r8)
    80c8:	003f8406 	br	7edc <_free_r+0xb4>
    80cc:	1005d0ba 	srai	r2,r2,2
    80d0:	00c00044 	movi	r3,1
    80d4:	51000117 	ldw	r4,4(r10)
    80d8:	1886983a 	sll	r3,r3,r2
    80dc:	20c8b03a 	or	r4,r4,r3
    80e0:	51000115 	stw	r4,4(r10)
    80e4:	003fa706 	br	7f84 <_free_r+0x15c>
    80e8:	00801504 	movi	r2,84
    80ec:	10c00436 	bltu	r2,r3,8100 <_free_r+0x2d8>
    80f0:	3804d33a 	srli	r2,r7,12
    80f4:	10801b84 	addi	r2,r2,110
    80f8:	100690fa 	slli	r3,r2,3
    80fc:	003f9706 	br	7f5c <_free_r+0x134>
    8100:	00805504 	movi	r2,340
    8104:	10c00436 	bltu	r2,r3,8118 <_free_r+0x2f0>
    8108:	3804d3fa 	srli	r2,r7,15
    810c:	10801dc4 	addi	r2,r2,119
    8110:	100690fa 	slli	r3,r2,3
    8114:	003f9106 	br	7f5c <_free_r+0x134>
    8118:	00815504 	movi	r2,1364
    811c:	10c0032e 	bgeu	r2,r3,812c <_free_r+0x304>
    8120:	00801f84 	movi	r2,126
    8124:	00c0fc04 	movi	r3,1008
    8128:	003f8c06 	br	7f5c <_free_r+0x134>
    812c:	3804d4ba 	srli	r2,r7,18
    8130:	10801f04 	addi	r2,r2,124
    8134:	100690fa 	slli	r3,r2,3
    8138:	003f8806 	br	7f5c <_free_r+0x134>

0000813c <__sfvwrite_r>:
    813c:	30800217 	ldw	r2,8(r6)
    8140:	defff504 	addi	sp,sp,-44
    8144:	df000915 	stw	fp,36(sp)
    8148:	dd800715 	stw	r22,28(sp)
    814c:	dc800315 	stw	r18,12(sp)
    8150:	dfc00a15 	stw	ra,40(sp)
    8154:	ddc00815 	stw	r23,32(sp)
    8158:	dd400615 	stw	r21,24(sp)
    815c:	dd000515 	stw	r20,20(sp)
    8160:	dcc00415 	stw	r19,16(sp)
    8164:	dc400215 	stw	r17,8(sp)
    8168:	dc000115 	stw	r16,4(sp)
    816c:	302d883a 	mov	r22,r6
    8170:	2039883a 	mov	fp,r4
    8174:	2825883a 	mov	r18,r5
    8178:	10001c26 	beq	r2,zero,81ec <__sfvwrite_r+0xb0>
    817c:	29c0030b 	ldhu	r7,12(r5)
    8180:	3880020c 	andi	r2,r7,8
    8184:	10002726 	beq	r2,zero,8224 <__sfvwrite_r+0xe8>
    8188:	28800417 	ldw	r2,16(r5)
    818c:	10002526 	beq	r2,zero,8224 <__sfvwrite_r+0xe8>
    8190:	3880008c 	andi	r2,r7,2
    8194:	b5400017 	ldw	r21,0(r22)
    8198:	10002826 	beq	r2,zero,823c <__sfvwrite_r+0x100>
    819c:	0021883a 	mov	r16,zero
    81a0:	0023883a 	mov	r17,zero
    81a4:	880d883a 	mov	r6,r17
    81a8:	e009883a 	mov	r4,fp
    81ac:	00810004 	movi	r2,1024
    81b0:	80006e26 	beq	r16,zero,836c <__sfvwrite_r+0x230>
    81b4:	800f883a 	mov	r7,r16
    81b8:	91400717 	ldw	r5,28(r18)
    81bc:	1400012e 	bgeu	r2,r16,81c4 <__sfvwrite_r+0x88>
    81c0:	100f883a 	mov	r7,r2
    81c4:	90c00917 	ldw	r3,36(r18)
    81c8:	183ee83a 	callr	r3
    81cc:	1007883a 	mov	r3,r2
    81d0:	80a1c83a 	sub	r16,r16,r2
    81d4:	88a3883a 	add	r17,r17,r2
    81d8:	00806d0e 	bge	zero,r2,8390 <__sfvwrite_r+0x254>
    81dc:	b0800217 	ldw	r2,8(r22)
    81e0:	10c5c83a 	sub	r2,r2,r3
    81e4:	b0800215 	stw	r2,8(r22)
    81e8:	103fee1e 	bne	r2,zero,81a4 <__sfvwrite_r+0x68>
    81ec:	0009883a 	mov	r4,zero
    81f0:	2005883a 	mov	r2,r4
    81f4:	dfc00a17 	ldw	ra,40(sp)
    81f8:	df000917 	ldw	fp,36(sp)
    81fc:	ddc00817 	ldw	r23,32(sp)
    8200:	dd800717 	ldw	r22,28(sp)
    8204:	dd400617 	ldw	r21,24(sp)
    8208:	dd000517 	ldw	r20,20(sp)
    820c:	dcc00417 	ldw	r19,16(sp)
    8210:	dc800317 	ldw	r18,12(sp)
    8214:	dc400217 	ldw	r17,8(sp)
    8218:	dc000117 	ldw	r16,4(sp)
    821c:	dec00b04 	addi	sp,sp,44
    8220:	f800283a 	ret
    8224:	0005f040 	call	5f04 <__swsetup_r>
    8228:	1000e41e 	bne	r2,zero,85bc <__sfvwrite_r+0x480>
    822c:	91c0030b 	ldhu	r7,12(r18)
    8230:	b5400017 	ldw	r21,0(r22)
    8234:	3880008c 	andi	r2,r7,2
    8238:	103fd81e 	bne	r2,zero,819c <__sfvwrite_r+0x60>
    823c:	3880004c 	andi	r2,r7,1
    8240:	1005003a 	cmpeq	r2,r2,zero
    8244:	10005726 	beq	r2,zero,83a4 <__sfvwrite_r+0x268>
    8248:	0029883a 	mov	r20,zero
    824c:	002f883a 	mov	r23,zero
    8250:	a0004226 	beq	r20,zero,835c <__sfvwrite_r+0x220>
    8254:	3880800c 	andi	r2,r7,512
    8258:	94000217 	ldw	r16,8(r18)
    825c:	10008b26 	beq	r2,zero,848c <__sfvwrite_r+0x350>
    8260:	800d883a 	mov	r6,r16
    8264:	a400a536 	bltu	r20,r16,84fc <__sfvwrite_r+0x3c0>
    8268:	3881200c 	andi	r2,r7,1152
    826c:	10002726 	beq	r2,zero,830c <__sfvwrite_r+0x1d0>
    8270:	90800517 	ldw	r2,20(r18)
    8274:	92000417 	ldw	r8,16(r18)
    8278:	91400017 	ldw	r5,0(r18)
    827c:	1087883a 	add	r3,r2,r2
    8280:	1887883a 	add	r3,r3,r2
    8284:	1808d7fa 	srli	r4,r3,31
    8288:	2a21c83a 	sub	r16,r5,r8
    828c:	80800044 	addi	r2,r16,1
    8290:	20c9883a 	add	r4,r4,r3
    8294:	2027d07a 	srai	r19,r4,1
    8298:	a085883a 	add	r2,r20,r2
    829c:	980d883a 	mov	r6,r19
    82a0:	9880022e 	bgeu	r19,r2,82ac <__sfvwrite_r+0x170>
    82a4:	1027883a 	mov	r19,r2
    82a8:	100d883a 	mov	r6,r2
    82ac:	3881000c 	andi	r2,r7,1024
    82b0:	1000b826 	beq	r2,zero,8594 <__sfvwrite_r+0x458>
    82b4:	300b883a 	mov	r5,r6
    82b8:	e009883a 	mov	r4,fp
    82bc:	00089b00 	call	89b0 <_malloc_r>
    82c0:	10003126 	beq	r2,zero,8388 <__sfvwrite_r+0x24c>
    82c4:	91400417 	ldw	r5,16(r18)
    82c8:	1009883a 	mov	r4,r2
    82cc:	800d883a 	mov	r6,r16
    82d0:	1023883a 	mov	r17,r2
    82d4:	0003ec40 	call	3ec4 <memcpy>
    82d8:	90c0030b 	ldhu	r3,12(r18)
    82dc:	00beffc4 	movi	r2,-1025
    82e0:	1886703a 	and	r3,r3,r2
    82e4:	18c02014 	ori	r3,r3,128
    82e8:	90c0030d 	sth	r3,12(r18)
    82ec:	9c07c83a 	sub	r3,r19,r16
    82f0:	8c05883a 	add	r2,r17,r16
    82f4:	a00d883a 	mov	r6,r20
    82f8:	a021883a 	mov	r16,r20
    82fc:	90800015 	stw	r2,0(r18)
    8300:	90c00215 	stw	r3,8(r18)
    8304:	94400415 	stw	r17,16(r18)
    8308:	94c00515 	stw	r19,20(r18)
    830c:	91000017 	ldw	r4,0(r18)
    8310:	b80b883a 	mov	r5,r23
    8314:	a023883a 	mov	r17,r20
    8318:	00091d40 	call	91d4 <memmove>
    831c:	90c00217 	ldw	r3,8(r18)
    8320:	90800017 	ldw	r2,0(r18)
    8324:	a027883a 	mov	r19,r20
    8328:	1c07c83a 	sub	r3,r3,r16
    832c:	1405883a 	add	r2,r2,r16
    8330:	90c00215 	stw	r3,8(r18)
    8334:	a021883a 	mov	r16,r20
    8338:	90800015 	stw	r2,0(r18)
    833c:	b0800217 	ldw	r2,8(r22)
    8340:	1405c83a 	sub	r2,r2,r16
    8344:	b0800215 	stw	r2,8(r22)
    8348:	103fa826 	beq	r2,zero,81ec <__sfvwrite_r+0xb0>
    834c:	a469c83a 	sub	r20,r20,r17
    8350:	91c0030b 	ldhu	r7,12(r18)
    8354:	bcef883a 	add	r23,r23,r19
    8358:	a03fbe1e 	bne	r20,zero,8254 <__sfvwrite_r+0x118>
    835c:	adc00017 	ldw	r23,0(r21)
    8360:	ad000117 	ldw	r20,4(r21)
    8364:	ad400204 	addi	r21,r21,8
    8368:	003fb906 	br	8250 <__sfvwrite_r+0x114>
    836c:	ac400017 	ldw	r17,0(r21)
    8370:	ac000117 	ldw	r16,4(r21)
    8374:	ad400204 	addi	r21,r21,8
    8378:	003f8a06 	br	81a4 <__sfvwrite_r+0x68>
    837c:	91400417 	ldw	r5,16(r18)
    8380:	e009883a 	mov	r4,fp
    8384:	0007e280 	call	7e28 <_free_r>
    8388:	00800304 	movi	r2,12
    838c:	e0800015 	stw	r2,0(fp)
    8390:	9080030b 	ldhu	r2,12(r18)
    8394:	013fffc4 	movi	r4,-1
    8398:	10801014 	ori	r2,r2,64
    839c:	9080030d 	sth	r2,12(r18)
    83a0:	003f9306 	br	81f0 <__sfvwrite_r+0xb4>
    83a4:	0027883a 	mov	r19,zero
    83a8:	002f883a 	mov	r23,zero
    83ac:	d8000015 	stw	zero,0(sp)
    83b0:	0029883a 	mov	r20,zero
    83b4:	98001e26 	beq	r19,zero,8430 <__sfvwrite_r+0x2f4>
    83b8:	d8c00017 	ldw	r3,0(sp)
    83bc:	1804c03a 	cmpne	r2,r3,zero
    83c0:	10005e26 	beq	r2,zero,853c <__sfvwrite_r+0x400>
    83c4:	9821883a 	mov	r16,r19
    83c8:	a4c0012e 	bgeu	r20,r19,83d0 <__sfvwrite_r+0x294>
    83cc:	a021883a 	mov	r16,r20
    83d0:	91000017 	ldw	r4,0(r18)
    83d4:	90800417 	ldw	r2,16(r18)
    83d8:	91800217 	ldw	r6,8(r18)
    83dc:	91c00517 	ldw	r7,20(r18)
    83e0:	1100022e 	bgeu	r2,r4,83ec <__sfvwrite_r+0x2b0>
    83e4:	31e3883a 	add	r17,r6,r7
    83e8:	8c001616 	blt	r17,r16,8444 <__sfvwrite_r+0x308>
    83ec:	81c03816 	blt	r16,r7,84d0 <__sfvwrite_r+0x394>
    83f0:	90c00917 	ldw	r3,36(r18)
    83f4:	91400717 	ldw	r5,28(r18)
    83f8:	e009883a 	mov	r4,fp
    83fc:	b80d883a 	mov	r6,r23
    8400:	183ee83a 	callr	r3
    8404:	1023883a 	mov	r17,r2
    8408:	00bfe10e 	bge	zero,r2,8390 <__sfvwrite_r+0x254>
    840c:	a469c83a 	sub	r20,r20,r17
    8410:	a0001826 	beq	r20,zero,8474 <__sfvwrite_r+0x338>
    8414:	b0800217 	ldw	r2,8(r22)
    8418:	1445c83a 	sub	r2,r2,r17
    841c:	b0800215 	stw	r2,8(r22)
    8420:	103f7226 	beq	r2,zero,81ec <__sfvwrite_r+0xb0>
    8424:	9c67c83a 	sub	r19,r19,r17
    8428:	bc6f883a 	add	r23,r23,r17
    842c:	983fe21e 	bne	r19,zero,83b8 <__sfvwrite_r+0x27c>
    8430:	adc00017 	ldw	r23,0(r21)
    8434:	acc00117 	ldw	r19,4(r21)
    8438:	ad400204 	addi	r21,r21,8
    843c:	d8000015 	stw	zero,0(sp)
    8440:	003fdc06 	br	83b4 <__sfvwrite_r+0x278>
    8444:	b80b883a 	mov	r5,r23
    8448:	880d883a 	mov	r6,r17
    844c:	00091d40 	call	91d4 <memmove>
    8450:	90c00017 	ldw	r3,0(r18)
    8454:	e009883a 	mov	r4,fp
    8458:	900b883a 	mov	r5,r18
    845c:	1c47883a 	add	r3,r3,r17
    8460:	90c00015 	stw	r3,0(r18)
    8464:	000780c0 	call	780c <_fflush_r>
    8468:	103fc91e 	bne	r2,zero,8390 <__sfvwrite_r+0x254>
    846c:	a469c83a 	sub	r20,r20,r17
    8470:	a03fe81e 	bne	r20,zero,8414 <__sfvwrite_r+0x2d8>
    8474:	e009883a 	mov	r4,fp
    8478:	900b883a 	mov	r5,r18
    847c:	000780c0 	call	780c <_fflush_r>
    8480:	103fc31e 	bne	r2,zero,8390 <__sfvwrite_r+0x254>
    8484:	d8000015 	stw	zero,0(sp)
    8488:	003fe206 	br	8414 <__sfvwrite_r+0x2d8>
    848c:	91000017 	ldw	r4,0(r18)
    8490:	90800417 	ldw	r2,16(r18)
    8494:	1100022e 	bgeu	r2,r4,84a0 <__sfvwrite_r+0x364>
    8498:	8023883a 	mov	r17,r16
    849c:	85003136 	bltu	r16,r20,8564 <__sfvwrite_r+0x428>
    84a0:	91c00517 	ldw	r7,20(r18)
    84a4:	a1c01836 	bltu	r20,r7,8508 <__sfvwrite_r+0x3cc>
    84a8:	90c00917 	ldw	r3,36(r18)
    84ac:	91400717 	ldw	r5,28(r18)
    84b0:	e009883a 	mov	r4,fp
    84b4:	b80d883a 	mov	r6,r23
    84b8:	183ee83a 	callr	r3
    84bc:	1021883a 	mov	r16,r2
    84c0:	00bfb30e 	bge	zero,r2,8390 <__sfvwrite_r+0x254>
    84c4:	1023883a 	mov	r17,r2
    84c8:	1027883a 	mov	r19,r2
    84cc:	003f9b06 	br	833c <__sfvwrite_r+0x200>
    84d0:	b80b883a 	mov	r5,r23
    84d4:	800d883a 	mov	r6,r16
    84d8:	00091d40 	call	91d4 <memmove>
    84dc:	90c00217 	ldw	r3,8(r18)
    84e0:	90800017 	ldw	r2,0(r18)
    84e4:	8023883a 	mov	r17,r16
    84e8:	1c07c83a 	sub	r3,r3,r16
    84ec:	1405883a 	add	r2,r2,r16
    84f0:	90c00215 	stw	r3,8(r18)
    84f4:	90800015 	stw	r2,0(r18)
    84f8:	003fc406 	br	840c <__sfvwrite_r+0x2d0>
    84fc:	a00d883a 	mov	r6,r20
    8500:	a021883a 	mov	r16,r20
    8504:	003f8106 	br	830c <__sfvwrite_r+0x1d0>
    8508:	b80b883a 	mov	r5,r23
    850c:	a00d883a 	mov	r6,r20
    8510:	00091d40 	call	91d4 <memmove>
    8514:	90c00217 	ldw	r3,8(r18)
    8518:	90800017 	ldw	r2,0(r18)
    851c:	a021883a 	mov	r16,r20
    8520:	1d07c83a 	sub	r3,r3,r20
    8524:	1505883a 	add	r2,r2,r20
    8528:	a023883a 	mov	r17,r20
    852c:	a027883a 	mov	r19,r20
    8530:	90c00215 	stw	r3,8(r18)
    8534:	90800015 	stw	r2,0(r18)
    8538:	003f8006 	br	833c <__sfvwrite_r+0x200>
    853c:	b809883a 	mov	r4,r23
    8540:	01400284 	movi	r5,10
    8544:	980d883a 	mov	r6,r19
    8548:	00090f00 	call	90f0 <memchr>
    854c:	10001726 	beq	r2,zero,85ac <__sfvwrite_r+0x470>
    8550:	15c5c83a 	sub	r2,r2,r23
    8554:	15000044 	addi	r20,r2,1
    8558:	00800044 	movi	r2,1
    855c:	d8800015 	stw	r2,0(sp)
    8560:	003f9806 	br	83c4 <__sfvwrite_r+0x288>
    8564:	b80b883a 	mov	r5,r23
    8568:	800d883a 	mov	r6,r16
    856c:	00091d40 	call	91d4 <memmove>
    8570:	90c00017 	ldw	r3,0(r18)
    8574:	e009883a 	mov	r4,fp
    8578:	900b883a 	mov	r5,r18
    857c:	1c07883a 	add	r3,r3,r16
    8580:	90c00015 	stw	r3,0(r18)
    8584:	8027883a 	mov	r19,r16
    8588:	000780c0 	call	780c <_fflush_r>
    858c:	103f6b26 	beq	r2,zero,833c <__sfvwrite_r+0x200>
    8590:	003f7f06 	br	8390 <__sfvwrite_r+0x254>
    8594:	400b883a 	mov	r5,r8
    8598:	e009883a 	mov	r4,fp
    859c:	000a3400 	call	a340 <_realloc_r>
    85a0:	103f7626 	beq	r2,zero,837c <__sfvwrite_r+0x240>
    85a4:	1023883a 	mov	r17,r2
    85a8:	003f5006 	br	82ec <__sfvwrite_r+0x1b0>
    85ac:	00c00044 	movi	r3,1
    85b0:	9d000044 	addi	r20,r19,1
    85b4:	d8c00015 	stw	r3,0(sp)
    85b8:	003f8206 	br	83c4 <__sfvwrite_r+0x288>
    85bc:	9080030b 	ldhu	r2,12(r18)
    85c0:	00c00244 	movi	r3,9
    85c4:	013fffc4 	movi	r4,-1
    85c8:	10801014 	ori	r2,r2,64
    85cc:	9080030d 	sth	r2,12(r18)
    85d0:	e0c00015 	stw	r3,0(fp)
    85d4:	003f0606 	br	81f0 <__sfvwrite_r+0xb4>

000085d8 <_fwalk_reent>:
    85d8:	defff704 	addi	sp,sp,-36
    85dc:	dcc00315 	stw	r19,12(sp)
    85e0:	24c0b804 	addi	r19,r4,736
    85e4:	dd800615 	stw	r22,24(sp)
    85e8:	dd400515 	stw	r21,20(sp)
    85ec:	dfc00815 	stw	ra,32(sp)
    85f0:	ddc00715 	stw	r23,28(sp)
    85f4:	dd000415 	stw	r20,16(sp)
    85f8:	dc800215 	stw	r18,8(sp)
    85fc:	dc400115 	stw	r17,4(sp)
    8600:	dc000015 	stw	r16,0(sp)
    8604:	202b883a 	mov	r21,r4
    8608:	282d883a 	mov	r22,r5
    860c:	0007a940 	call	7a94 <__sfp_lock_acquire>
    8610:	98002126 	beq	r19,zero,8698 <_fwalk_reent+0xc0>
    8614:	002f883a 	mov	r23,zero
    8618:	9c800117 	ldw	r18,4(r19)
    861c:	9c000217 	ldw	r16,8(r19)
    8620:	90bfffc4 	addi	r2,r18,-1
    8624:	10000d16 	blt	r2,zero,865c <_fwalk_reent+0x84>
    8628:	0023883a 	mov	r17,zero
    862c:	053fffc4 	movi	r20,-1
    8630:	8080030f 	ldh	r2,12(r16)
    8634:	8c400044 	addi	r17,r17,1
    8638:	10000626 	beq	r2,zero,8654 <_fwalk_reent+0x7c>
    863c:	8080038f 	ldh	r2,14(r16)
    8640:	800b883a 	mov	r5,r16
    8644:	a809883a 	mov	r4,r21
    8648:	15000226 	beq	r2,r20,8654 <_fwalk_reent+0x7c>
    864c:	b03ee83a 	callr	r22
    8650:	b8aeb03a 	or	r23,r23,r2
    8654:	84001704 	addi	r16,r16,92
    8658:	947ff51e 	bne	r18,r17,8630 <_fwalk_reent+0x58>
    865c:	9cc00017 	ldw	r19,0(r19)
    8660:	983fed1e 	bne	r19,zero,8618 <_fwalk_reent+0x40>
    8664:	0007a980 	call	7a98 <__sfp_lock_release>
    8668:	b805883a 	mov	r2,r23
    866c:	dfc00817 	ldw	ra,32(sp)
    8670:	ddc00717 	ldw	r23,28(sp)
    8674:	dd800617 	ldw	r22,24(sp)
    8678:	dd400517 	ldw	r21,20(sp)
    867c:	dd000417 	ldw	r20,16(sp)
    8680:	dcc00317 	ldw	r19,12(sp)
    8684:	dc800217 	ldw	r18,8(sp)
    8688:	dc400117 	ldw	r17,4(sp)
    868c:	dc000017 	ldw	r16,0(sp)
    8690:	dec00904 	addi	sp,sp,36
    8694:	f800283a 	ret
    8698:	002f883a 	mov	r23,zero
    869c:	003ff106 	br	8664 <_fwalk_reent+0x8c>

000086a0 <_fwalk>:
    86a0:	defff804 	addi	sp,sp,-32
    86a4:	dcc00315 	stw	r19,12(sp)
    86a8:	24c0b804 	addi	r19,r4,736
    86ac:	dd400515 	stw	r21,20(sp)
    86b0:	dfc00715 	stw	ra,28(sp)
    86b4:	dd800615 	stw	r22,24(sp)
    86b8:	dd000415 	stw	r20,16(sp)
    86bc:	dc800215 	stw	r18,8(sp)
    86c0:	dc400115 	stw	r17,4(sp)
    86c4:	dc000015 	stw	r16,0(sp)
    86c8:	282b883a 	mov	r21,r5
    86cc:	0007a940 	call	7a94 <__sfp_lock_acquire>
    86d0:	98001f26 	beq	r19,zero,8750 <_fwalk+0xb0>
    86d4:	002d883a 	mov	r22,zero
    86d8:	9c800117 	ldw	r18,4(r19)
    86dc:	9c000217 	ldw	r16,8(r19)
    86e0:	90bfffc4 	addi	r2,r18,-1
    86e4:	10000c16 	blt	r2,zero,8718 <_fwalk+0x78>
    86e8:	0023883a 	mov	r17,zero
    86ec:	053fffc4 	movi	r20,-1
    86f0:	8080030f 	ldh	r2,12(r16)
    86f4:	8c400044 	addi	r17,r17,1
    86f8:	10000526 	beq	r2,zero,8710 <_fwalk+0x70>
    86fc:	8080038f 	ldh	r2,14(r16)
    8700:	8009883a 	mov	r4,r16
    8704:	15000226 	beq	r2,r20,8710 <_fwalk+0x70>
    8708:	a83ee83a 	callr	r21
    870c:	b0acb03a 	or	r22,r22,r2
    8710:	84001704 	addi	r16,r16,92
    8714:	947ff61e 	bne	r18,r17,86f0 <_fwalk+0x50>
    8718:	9cc00017 	ldw	r19,0(r19)
    871c:	983fee1e 	bne	r19,zero,86d8 <_fwalk+0x38>
    8720:	0007a980 	call	7a98 <__sfp_lock_release>
    8724:	b005883a 	mov	r2,r22
    8728:	dfc00717 	ldw	ra,28(sp)
    872c:	dd800617 	ldw	r22,24(sp)
    8730:	dd400517 	ldw	r21,20(sp)
    8734:	dd000417 	ldw	r20,16(sp)
    8738:	dcc00317 	ldw	r19,12(sp)
    873c:	dc800217 	ldw	r18,8(sp)
    8740:	dc400117 	ldw	r17,4(sp)
    8744:	dc000017 	ldw	r16,0(sp)
    8748:	dec00804 	addi	sp,sp,32
    874c:	f800283a 	ret
    8750:	002d883a 	mov	r22,zero
    8754:	003ff206 	br	8720 <_fwalk+0x80>

00008758 <__locale_charset>:
    8758:	d0a00617 	ldw	r2,-32744(gp)
    875c:	f800283a 	ret

00008760 <_localeconv_r>:
    8760:	00800074 	movhi	r2,1
    8764:	10be7704 	addi	r2,r2,-1572
    8768:	f800283a 	ret

0000876c <localeconv>:
    876c:	00800074 	movhi	r2,1
    8770:	10864d04 	addi	r2,r2,6452
    8774:	11000017 	ldw	r4,0(r2)
    8778:	00087601 	jmpi	8760 <_localeconv_r>

0000877c <_setlocale_r>:
    877c:	defffc04 	addi	sp,sp,-16
    8780:	00c00074 	movhi	r3,1
    8784:	18fe4e04 	addi	r3,r3,-1736
    8788:	dc800215 	stw	r18,8(sp)
    878c:	dc400115 	stw	r17,4(sp)
    8790:	dc000015 	stw	r16,0(sp)
    8794:	2023883a 	mov	r17,r4
    8798:	2825883a 	mov	r18,r5
    879c:	dfc00315 	stw	ra,12(sp)
    87a0:	3021883a 	mov	r16,r6
    87a4:	3009883a 	mov	r4,r6
    87a8:	180b883a 	mov	r5,r3
    87ac:	30000926 	beq	r6,zero,87d4 <_setlocale_r+0x58>
    87b0:	000ab300 	call	ab30 <strcmp>
    87b4:	8009883a 	mov	r4,r16
    87b8:	01400074 	movhi	r5,1
    87bc:	297e5e04 	addi	r5,r5,-1672
    87c0:	10000b1e 	bne	r2,zero,87f0 <_setlocale_r+0x74>
    87c4:	8c000d15 	stw	r16,52(r17)
    87c8:	8c800c15 	stw	r18,48(r17)
    87cc:	00c00074 	movhi	r3,1
    87d0:	18fe4e04 	addi	r3,r3,-1736
    87d4:	1805883a 	mov	r2,r3
    87d8:	dfc00317 	ldw	ra,12(sp)
    87dc:	dc800217 	ldw	r18,8(sp)
    87e0:	dc400117 	ldw	r17,4(sp)
    87e4:	dc000017 	ldw	r16,0(sp)
    87e8:	dec00404 	addi	sp,sp,16
    87ec:	f800283a 	ret
    87f0:	000ab300 	call	ab30 <strcmp>
    87f4:	0007883a 	mov	r3,zero
    87f8:	103ff226 	beq	r2,zero,87c4 <_setlocale_r+0x48>
    87fc:	003ff506 	br	87d4 <_setlocale_r+0x58>

00008800 <setlocale>:
    8800:	01800074 	movhi	r6,1
    8804:	31864d04 	addi	r6,r6,6452
    8808:	2007883a 	mov	r3,r4
    880c:	31000017 	ldw	r4,0(r6)
    8810:	280d883a 	mov	r6,r5
    8814:	180b883a 	mov	r5,r3
    8818:	000877c1 	jmpi	877c <_setlocale_r>

0000881c <__smakebuf_r>:
    881c:	2880030b 	ldhu	r2,12(r5)
    8820:	deffed04 	addi	sp,sp,-76
    8824:	dc401015 	stw	r17,64(sp)
    8828:	1080008c 	andi	r2,r2,2
    882c:	dc000f15 	stw	r16,60(sp)
    8830:	dfc01215 	stw	ra,72(sp)
    8834:	dc801115 	stw	r18,68(sp)
    8838:	2821883a 	mov	r16,r5
    883c:	2023883a 	mov	r17,r4
    8840:	10000b26 	beq	r2,zero,8870 <__smakebuf_r+0x54>
    8844:	28c010c4 	addi	r3,r5,67
    8848:	00800044 	movi	r2,1
    884c:	28800515 	stw	r2,20(r5)
    8850:	28c00415 	stw	r3,16(r5)
    8854:	28c00015 	stw	r3,0(r5)
    8858:	dfc01217 	ldw	ra,72(sp)
    885c:	dc801117 	ldw	r18,68(sp)
    8860:	dc401017 	ldw	r17,64(sp)
    8864:	dc000f17 	ldw	r16,60(sp)
    8868:	dec01304 	addi	sp,sp,76
    886c:	f800283a 	ret
    8870:	2940038f 	ldh	r5,14(r5)
    8874:	28002116 	blt	r5,zero,88fc <__smakebuf_r+0xe0>
    8878:	d80d883a 	mov	r6,sp
    887c:	000af200 	call	af20 <_fstat_r>
    8880:	10001e16 	blt	r2,zero,88fc <__smakebuf_r+0xe0>
    8884:	d8800117 	ldw	r2,4(sp)
    8888:	00e00014 	movui	r3,32768
    888c:	113c000c 	andi	r4,r2,61440
    8890:	20c03126 	beq	r4,r3,8958 <__smakebuf_r+0x13c>
    8894:	8080030b 	ldhu	r2,12(r16)
    8898:	00c80004 	movi	r3,8192
    889c:	10820014 	ori	r2,r2,2048
    88a0:	8080030d 	sth	r2,12(r16)
    88a4:	20c01e26 	beq	r4,r3,8920 <__smakebuf_r+0x104>
    88a8:	04810004 	movi	r18,1024
    88ac:	8809883a 	mov	r4,r17
    88b0:	900b883a 	mov	r5,r18
    88b4:	00089b00 	call	89b0 <_malloc_r>
    88b8:	1009883a 	mov	r4,r2
    88bc:	10003126 	beq	r2,zero,8984 <__smakebuf_r+0x168>
    88c0:	80c0030b 	ldhu	r3,12(r16)
    88c4:	00800034 	movhi	r2,0
    88c8:	109ee204 	addi	r2,r2,31624
    88cc:	88800f15 	stw	r2,60(r17)
    88d0:	18c02014 	ori	r3,r3,128
    88d4:	84800515 	stw	r18,20(r16)
    88d8:	80c0030d 	sth	r3,12(r16)
    88dc:	81000415 	stw	r4,16(r16)
    88e0:	81000015 	stw	r4,0(r16)
    88e4:	dfc01217 	ldw	ra,72(sp)
    88e8:	dc801117 	ldw	r18,68(sp)
    88ec:	dc401017 	ldw	r17,64(sp)
    88f0:	dc000f17 	ldw	r16,60(sp)
    88f4:	dec01304 	addi	sp,sp,76
    88f8:	f800283a 	ret
    88fc:	80c0030b 	ldhu	r3,12(r16)
    8900:	1880200c 	andi	r2,r3,128
    8904:	10000426 	beq	r2,zero,8918 <__smakebuf_r+0xfc>
    8908:	04801004 	movi	r18,64
    890c:	18820014 	ori	r2,r3,2048
    8910:	8080030d 	sth	r2,12(r16)
    8914:	003fe506 	br	88ac <__smakebuf_r+0x90>
    8918:	04810004 	movi	r18,1024
    891c:	003ffb06 	br	890c <__smakebuf_r+0xf0>
    8920:	8140038f 	ldh	r5,14(r16)
    8924:	8809883a 	mov	r4,r17
    8928:	000af940 	call	af94 <_isatty_r>
    892c:	103fde26 	beq	r2,zero,88a8 <__smakebuf_r+0x8c>
    8930:	8080030b 	ldhu	r2,12(r16)
    8934:	80c010c4 	addi	r3,r16,67
    8938:	04810004 	movi	r18,1024
    893c:	10800054 	ori	r2,r2,1
    8940:	8080030d 	sth	r2,12(r16)
    8944:	00800044 	movi	r2,1
    8948:	80c00415 	stw	r3,16(r16)
    894c:	80800515 	stw	r2,20(r16)
    8950:	80c00015 	stw	r3,0(r16)
    8954:	003fd506 	br	88ac <__smakebuf_r+0x90>
    8958:	80c00a17 	ldw	r3,40(r16)
    895c:	00800074 	movhi	r2,1
    8960:	10aa7b04 	addi	r2,r2,-22036
    8964:	18bfcb1e 	bne	r3,r2,8894 <__smakebuf_r+0x78>
    8968:	8080030b 	ldhu	r2,12(r16)
    896c:	00c10004 	movi	r3,1024
    8970:	1825883a 	mov	r18,r3
    8974:	10c4b03a 	or	r2,r2,r3
    8978:	8080030d 	sth	r2,12(r16)
    897c:	80c01315 	stw	r3,76(r16)
    8980:	003fca06 	br	88ac <__smakebuf_r+0x90>
    8984:	8100030b 	ldhu	r4,12(r16)
    8988:	2080800c 	andi	r2,r4,512
    898c:	103fb21e 	bne	r2,zero,8858 <__smakebuf_r+0x3c>
    8990:	80c010c4 	addi	r3,r16,67
    8994:	21000094 	ori	r4,r4,2
    8998:	00800044 	movi	r2,1
    899c:	80800515 	stw	r2,20(r16)
    89a0:	8100030d 	sth	r4,12(r16)
    89a4:	80c00415 	stw	r3,16(r16)
    89a8:	80c00015 	stw	r3,0(r16)
    89ac:	003faa06 	br	8858 <__smakebuf_r+0x3c>

000089b0 <_malloc_r>:
    89b0:	defff604 	addi	sp,sp,-40
    89b4:	28c002c4 	addi	r3,r5,11
    89b8:	00800584 	movi	r2,22
    89bc:	dc800215 	stw	r18,8(sp)
    89c0:	dfc00915 	stw	ra,36(sp)
    89c4:	df000815 	stw	fp,32(sp)
    89c8:	ddc00715 	stw	r23,28(sp)
    89cc:	dd800615 	stw	r22,24(sp)
    89d0:	dd400515 	stw	r21,20(sp)
    89d4:	dd000415 	stw	r20,16(sp)
    89d8:	dcc00315 	stw	r19,12(sp)
    89dc:	dc400115 	stw	r17,4(sp)
    89e0:	dc000015 	stw	r16,0(sp)
    89e4:	2025883a 	mov	r18,r4
    89e8:	10c01236 	bltu	r2,r3,8a34 <_malloc_r+0x84>
    89ec:	04400404 	movi	r17,16
    89f0:	8940142e 	bgeu	r17,r5,8a44 <_malloc_r+0x94>
    89f4:	00800304 	movi	r2,12
    89f8:	0007883a 	mov	r3,zero
    89fc:	90800015 	stw	r2,0(r18)
    8a00:	1805883a 	mov	r2,r3
    8a04:	dfc00917 	ldw	ra,36(sp)
    8a08:	df000817 	ldw	fp,32(sp)
    8a0c:	ddc00717 	ldw	r23,28(sp)
    8a10:	dd800617 	ldw	r22,24(sp)
    8a14:	dd400517 	ldw	r21,20(sp)
    8a18:	dd000417 	ldw	r20,16(sp)
    8a1c:	dcc00317 	ldw	r19,12(sp)
    8a20:	dc800217 	ldw	r18,8(sp)
    8a24:	dc400117 	ldw	r17,4(sp)
    8a28:	dc000017 	ldw	r16,0(sp)
    8a2c:	dec00a04 	addi	sp,sp,40
    8a30:	f800283a 	ret
    8a34:	00bffe04 	movi	r2,-8
    8a38:	18a2703a 	and	r17,r3,r2
    8a3c:	883fed16 	blt	r17,zero,89f4 <_malloc_r+0x44>
    8a40:	897fec36 	bltu	r17,r5,89f4 <_malloc_r+0x44>
    8a44:	9009883a 	mov	r4,r18
    8a48:	000c66c0 	call	c66c <__malloc_lock>
    8a4c:	00807dc4 	movi	r2,503
    8a50:	14402b2e 	bgeu	r2,r17,8b00 <_malloc_r+0x150>
    8a54:	8806d27a 	srli	r3,r17,9
    8a58:	18003f1e 	bne	r3,zero,8b58 <_malloc_r+0x1a8>
    8a5c:	880cd0fa 	srli	r6,r17,3
    8a60:	300490fa 	slli	r2,r6,3
    8a64:	02c00074 	movhi	r11,1
    8a68:	5ac06404 	addi	r11,r11,400
    8a6c:	12cb883a 	add	r5,r2,r11
    8a70:	2c000317 	ldw	r16,12(r5)
    8a74:	580f883a 	mov	r7,r11
    8a78:	2c00041e 	bne	r5,r16,8a8c <_malloc_r+0xdc>
    8a7c:	00000a06 	br	8aa8 <_malloc_r+0xf8>
    8a80:	1800860e 	bge	r3,zero,8c9c <_malloc_r+0x2ec>
    8a84:	84000317 	ldw	r16,12(r16)
    8a88:	2c000726 	beq	r5,r16,8aa8 <_malloc_r+0xf8>
    8a8c:	80800117 	ldw	r2,4(r16)
    8a90:	00ffff04 	movi	r3,-4
    8a94:	10c8703a 	and	r4,r2,r3
    8a98:	2447c83a 	sub	r3,r4,r17
    8a9c:	008003c4 	movi	r2,15
    8aa0:	10fff70e 	bge	r2,r3,8a80 <_malloc_r+0xd0>
    8aa4:	31bfffc4 	addi	r6,r6,-1
    8aa8:	32400044 	addi	r9,r6,1
    8aac:	02800074 	movhi	r10,1
    8ab0:	52806604 	addi	r10,r10,408
    8ab4:	54000217 	ldw	r16,8(r10)
    8ab8:	8280a026 	beq	r16,r10,8d3c <_malloc_r+0x38c>
    8abc:	80800117 	ldw	r2,4(r16)
    8ac0:	00ffff04 	movi	r3,-4
    8ac4:	10ca703a 	and	r5,r2,r3
    8ac8:	2c4dc83a 	sub	r6,r5,r17
    8acc:	008003c4 	movi	r2,15
    8ad0:	11808316 	blt	r2,r6,8ce0 <_malloc_r+0x330>
    8ad4:	52800315 	stw	r10,12(r10)
    8ad8:	52800215 	stw	r10,8(r10)
    8adc:	30002916 	blt	r6,zero,8b84 <_malloc_r+0x1d4>
    8ae0:	8147883a 	add	r3,r16,r5
    8ae4:	18800117 	ldw	r2,4(r3)
    8ae8:	9009883a 	mov	r4,r18
    8aec:	10800054 	ori	r2,r2,1
    8af0:	18800115 	stw	r2,4(r3)
    8af4:	000c68c0 	call	c68c <__malloc_unlock>
    8af8:	80c00204 	addi	r3,r16,8
    8afc:	003fc006 	br	8a00 <_malloc_r+0x50>
    8b00:	02c00074 	movhi	r11,1
    8b04:	5ac06404 	addi	r11,r11,400
    8b08:	8ac5883a 	add	r2,r17,r11
    8b0c:	14000317 	ldw	r16,12(r2)
    8b10:	580f883a 	mov	r7,r11
    8b14:	8806d0fa 	srli	r3,r17,3
    8b18:	14006c26 	beq	r2,r16,8ccc <_malloc_r+0x31c>
    8b1c:	80c00117 	ldw	r3,4(r16)
    8b20:	00bfff04 	movi	r2,-4
    8b24:	81800317 	ldw	r6,12(r16)
    8b28:	1886703a 	and	r3,r3,r2
    8b2c:	80c7883a 	add	r3,r16,r3
    8b30:	18800117 	ldw	r2,4(r3)
    8b34:	81400217 	ldw	r5,8(r16)
    8b38:	9009883a 	mov	r4,r18
    8b3c:	10800054 	ori	r2,r2,1
    8b40:	18800115 	stw	r2,4(r3)
    8b44:	31400215 	stw	r5,8(r6)
    8b48:	29800315 	stw	r6,12(r5)
    8b4c:	000c68c0 	call	c68c <__malloc_unlock>
    8b50:	80c00204 	addi	r3,r16,8
    8b54:	003faa06 	br	8a00 <_malloc_r+0x50>
    8b58:	00800104 	movi	r2,4
    8b5c:	10c0052e 	bgeu	r2,r3,8b74 <_malloc_r+0x1c4>
    8b60:	00800504 	movi	r2,20
    8b64:	10c07836 	bltu	r2,r3,8d48 <_malloc_r+0x398>
    8b68:	198016c4 	addi	r6,r3,91
    8b6c:	300490fa 	slli	r2,r6,3
    8b70:	003fbc06 	br	8a64 <_malloc_r+0xb4>
    8b74:	8804d1ba 	srli	r2,r17,6
    8b78:	11800e04 	addi	r6,r2,56
    8b7c:	300490fa 	slli	r2,r6,3
    8b80:	003fb806 	br	8a64 <_malloc_r+0xb4>
    8b84:	00807fc4 	movi	r2,511
    8b88:	1140bb36 	bltu	r2,r5,8e78 <_malloc_r+0x4c8>
    8b8c:	2806d0fa 	srli	r3,r5,3
    8b90:	573ffe04 	addi	fp,r10,-8
    8b94:	00800044 	movi	r2,1
    8b98:	180890fa 	slli	r4,r3,3
    8b9c:	1807d0ba 	srai	r3,r3,2
    8ba0:	e1c00117 	ldw	r7,4(fp)
    8ba4:	5909883a 	add	r4,r11,r4
    8ba8:	21400217 	ldw	r5,8(r4)
    8bac:	10c4983a 	sll	r2,r2,r3
    8bb0:	81000315 	stw	r4,12(r16)
    8bb4:	81400215 	stw	r5,8(r16)
    8bb8:	388eb03a 	or	r7,r7,r2
    8bbc:	2c000315 	stw	r16,12(r5)
    8bc0:	24000215 	stw	r16,8(r4)
    8bc4:	e1c00115 	stw	r7,4(fp)
    8bc8:	4807883a 	mov	r3,r9
    8bcc:	4800cd16 	blt	r9,zero,8f04 <_malloc_r+0x554>
    8bd0:	1807d0ba 	srai	r3,r3,2
    8bd4:	00800044 	movi	r2,1
    8bd8:	10c8983a 	sll	r4,r2,r3
    8bdc:	39004436 	bltu	r7,r4,8cf0 <_malloc_r+0x340>
    8be0:	21c4703a 	and	r2,r4,r7
    8be4:	10000a1e 	bne	r2,zero,8c10 <_malloc_r+0x260>
    8be8:	2109883a 	add	r4,r4,r4
    8bec:	00bfff04 	movi	r2,-4
    8bf0:	4884703a 	and	r2,r9,r2
    8bf4:	3906703a 	and	r3,r7,r4
    8bf8:	12400104 	addi	r9,r2,4
    8bfc:	1800041e 	bne	r3,zero,8c10 <_malloc_r+0x260>
    8c00:	2109883a 	add	r4,r4,r4
    8c04:	3904703a 	and	r2,r7,r4
    8c08:	4a400104 	addi	r9,r9,4
    8c0c:	103ffc26 	beq	r2,zero,8c00 <_malloc_r+0x250>
    8c10:	480490fa 	slli	r2,r9,3
    8c14:	4819883a 	mov	r12,r9
    8c18:	023fff04 	movi	r8,-4
    8c1c:	589b883a 	add	r13,r11,r2
    8c20:	6807883a 	mov	r3,r13
    8c24:	014003c4 	movi	r5,15
    8c28:	1c000317 	ldw	r16,12(r3)
    8c2c:	1c00041e 	bne	r3,r16,8c40 <_malloc_r+0x290>
    8c30:	0000a706 	br	8ed0 <_malloc_r+0x520>
    8c34:	3000ab0e 	bge	r6,zero,8ee4 <_malloc_r+0x534>
    8c38:	84000317 	ldw	r16,12(r16)
    8c3c:	1c00a426 	beq	r3,r16,8ed0 <_malloc_r+0x520>
    8c40:	80800117 	ldw	r2,4(r16)
    8c44:	1204703a 	and	r2,r2,r8
    8c48:	144dc83a 	sub	r6,r2,r17
    8c4c:	29bff90e 	bge	r5,r6,8c34 <_malloc_r+0x284>
    8c50:	81000317 	ldw	r4,12(r16)
    8c54:	80c00217 	ldw	r3,8(r16)
    8c58:	89400054 	ori	r5,r17,1
    8c5c:	8445883a 	add	r2,r16,r17
    8c60:	20c00215 	stw	r3,8(r4)
    8c64:	19000315 	stw	r4,12(r3)
    8c68:	81400115 	stw	r5,4(r16)
    8c6c:	1187883a 	add	r3,r2,r6
    8c70:	31000054 	ori	r4,r6,1
    8c74:	50800315 	stw	r2,12(r10)
    8c78:	50800215 	stw	r2,8(r10)
    8c7c:	19800015 	stw	r6,0(r3)
    8c80:	11000115 	stw	r4,4(r2)
    8c84:	12800215 	stw	r10,8(r2)
    8c88:	12800315 	stw	r10,12(r2)
    8c8c:	9009883a 	mov	r4,r18
    8c90:	000c68c0 	call	c68c <__malloc_unlock>
    8c94:	80c00204 	addi	r3,r16,8
    8c98:	003f5906 	br	8a00 <_malloc_r+0x50>
    8c9c:	8109883a 	add	r4,r16,r4
    8ca0:	20800117 	ldw	r2,4(r4)
    8ca4:	80c00217 	ldw	r3,8(r16)
    8ca8:	81400317 	ldw	r5,12(r16)
    8cac:	10800054 	ori	r2,r2,1
    8cb0:	20800115 	stw	r2,4(r4)
    8cb4:	28c00215 	stw	r3,8(r5)
    8cb8:	19400315 	stw	r5,12(r3)
    8cbc:	9009883a 	mov	r4,r18
    8cc0:	000c68c0 	call	c68c <__malloc_unlock>
    8cc4:	80c00204 	addi	r3,r16,8
    8cc8:	003f4d06 	br	8a00 <_malloc_r+0x50>
    8ccc:	80800204 	addi	r2,r16,8
    8cd0:	14000317 	ldw	r16,12(r2)
    8cd4:	143f911e 	bne	r2,r16,8b1c <_malloc_r+0x16c>
    8cd8:	1a400084 	addi	r9,r3,2
    8cdc:	003f7306 	br	8aac <_malloc_r+0xfc>
    8ce0:	88c00054 	ori	r3,r17,1
    8ce4:	8445883a 	add	r2,r16,r17
    8ce8:	80c00115 	stw	r3,4(r16)
    8cec:	003fdf06 	br	8c6c <_malloc_r+0x2bc>
    8cf0:	e4000217 	ldw	r16,8(fp)
    8cf4:	00bfff04 	movi	r2,-4
    8cf8:	80c00117 	ldw	r3,4(r16)
    8cfc:	802d883a 	mov	r22,r16
    8d00:	18aa703a 	and	r21,r3,r2
    8d04:	ac401636 	bltu	r21,r17,8d60 <_malloc_r+0x3b0>
    8d08:	ac49c83a 	sub	r4,r21,r17
    8d0c:	008003c4 	movi	r2,15
    8d10:	1100130e 	bge	r2,r4,8d60 <_malloc_r+0x3b0>
    8d14:	88800054 	ori	r2,r17,1
    8d18:	8447883a 	add	r3,r16,r17
    8d1c:	80800115 	stw	r2,4(r16)
    8d20:	20800054 	ori	r2,r4,1
    8d24:	18800115 	stw	r2,4(r3)
    8d28:	e0c00215 	stw	r3,8(fp)
    8d2c:	9009883a 	mov	r4,r18
    8d30:	000c68c0 	call	c68c <__malloc_unlock>
    8d34:	80c00204 	addi	r3,r16,8
    8d38:	003f3106 	br	8a00 <_malloc_r+0x50>
    8d3c:	39c00117 	ldw	r7,4(r7)
    8d40:	573ffe04 	addi	fp,r10,-8
    8d44:	003fa006 	br	8bc8 <_malloc_r+0x218>
    8d48:	00801504 	movi	r2,84
    8d4c:	10c06736 	bltu	r2,r3,8eec <_malloc_r+0x53c>
    8d50:	8804d33a 	srli	r2,r17,12
    8d54:	11801b84 	addi	r6,r2,110
    8d58:	300490fa 	slli	r2,r6,3
    8d5c:	003f4106 	br	8a64 <_malloc_r+0xb4>
    8d60:	d0a79317 	ldw	r2,-25012(gp)
    8d64:	d0e00817 	ldw	r3,-32736(gp)
    8d68:	053fffc4 	movi	r20,-1
    8d6c:	10800404 	addi	r2,r2,16
    8d70:	88a7883a 	add	r19,r17,r2
    8d74:	1d000326 	beq	r3,r20,8d84 <_malloc_r+0x3d4>
    8d78:	98c3ffc4 	addi	r3,r19,4095
    8d7c:	00bc0004 	movi	r2,-4096
    8d80:	18a6703a 	and	r19,r3,r2
    8d84:	9009883a 	mov	r4,r18
    8d88:	980b883a 	mov	r5,r19
    8d8c:	000a9740 	call	a974 <_sbrk_r>
    8d90:	1009883a 	mov	r4,r2
    8d94:	15000426 	beq	r2,r20,8da8 <_malloc_r+0x3f8>
    8d98:	854b883a 	add	r5,r16,r21
    8d9c:	1029883a 	mov	r20,r2
    8da0:	11405a2e 	bgeu	r2,r5,8f0c <_malloc_r+0x55c>
    8da4:	87000c26 	beq	r16,fp,8dd8 <_malloc_r+0x428>
    8da8:	e4000217 	ldw	r16,8(fp)
    8dac:	80c00117 	ldw	r3,4(r16)
    8db0:	00bfff04 	movi	r2,-4
    8db4:	1884703a 	and	r2,r3,r2
    8db8:	14400336 	bltu	r2,r17,8dc8 <_malloc_r+0x418>
    8dbc:	1449c83a 	sub	r4,r2,r17
    8dc0:	008003c4 	movi	r2,15
    8dc4:	113fd316 	blt	r2,r4,8d14 <_malloc_r+0x364>
    8dc8:	9009883a 	mov	r4,r18
    8dcc:	000c68c0 	call	c68c <__malloc_unlock>
    8dd0:	0007883a 	mov	r3,zero
    8dd4:	003f0a06 	br	8a00 <_malloc_r+0x50>
    8dd8:	05c00074 	movhi	r23,1
    8ddc:	bdcde704 	addi	r23,r23,14236
    8de0:	b8800017 	ldw	r2,0(r23)
    8de4:	988d883a 	add	r6,r19,r2
    8de8:	b9800015 	stw	r6,0(r23)
    8dec:	d0e00817 	ldw	r3,-32736(gp)
    8df0:	00bfffc4 	movi	r2,-1
    8df4:	18808e26 	beq	r3,r2,9030 <_malloc_r+0x680>
    8df8:	2145c83a 	sub	r2,r4,r5
    8dfc:	3085883a 	add	r2,r6,r2
    8e00:	b8800015 	stw	r2,0(r23)
    8e04:	20c001cc 	andi	r3,r4,7
    8e08:	18005f1e 	bne	r3,zero,8f88 <_malloc_r+0x5d8>
    8e0c:	000b883a 	mov	r5,zero
    8e10:	a4c5883a 	add	r2,r20,r19
    8e14:	1083ffcc 	andi	r2,r2,4095
    8e18:	00c40004 	movi	r3,4096
    8e1c:	1887c83a 	sub	r3,r3,r2
    8e20:	28e7883a 	add	r19,r5,r3
    8e24:	9009883a 	mov	r4,r18
    8e28:	980b883a 	mov	r5,r19
    8e2c:	000a9740 	call	a974 <_sbrk_r>
    8e30:	1007883a 	mov	r3,r2
    8e34:	00bfffc4 	movi	r2,-1
    8e38:	18807a26 	beq	r3,r2,9024 <_malloc_r+0x674>
    8e3c:	1d05c83a 	sub	r2,r3,r20
    8e40:	9885883a 	add	r2,r19,r2
    8e44:	10c00054 	ori	r3,r2,1
    8e48:	b8800017 	ldw	r2,0(r23)
    8e4c:	a021883a 	mov	r16,r20
    8e50:	a0c00115 	stw	r3,4(r20)
    8e54:	9885883a 	add	r2,r19,r2
    8e58:	b8800015 	stw	r2,0(r23)
    8e5c:	e5000215 	stw	r20,8(fp)
    8e60:	b7003626 	beq	r22,fp,8f3c <_malloc_r+0x58c>
    8e64:	018003c4 	movi	r6,15
    8e68:	35404b36 	bltu	r6,r21,8f98 <_malloc_r+0x5e8>
    8e6c:	00800044 	movi	r2,1
    8e70:	a0800115 	stw	r2,4(r20)
    8e74:	003fcd06 	br	8dac <_malloc_r+0x3fc>
    8e78:	2808d27a 	srli	r4,r5,9
    8e7c:	2000371e 	bne	r4,zero,8f5c <_malloc_r+0x5ac>
    8e80:	2808d0fa 	srli	r4,r5,3
    8e84:	200690fa 	slli	r3,r4,3
    8e88:	1ad1883a 	add	r8,r3,r11
    8e8c:	41800217 	ldw	r6,8(r8)
    8e90:	41805b26 	beq	r8,r6,9000 <_malloc_r+0x650>
    8e94:	30800117 	ldw	r2,4(r6)
    8e98:	00ffff04 	movi	r3,-4
    8e9c:	10c4703a 	and	r2,r2,r3
    8ea0:	2880022e 	bgeu	r5,r2,8eac <_malloc_r+0x4fc>
    8ea4:	31800217 	ldw	r6,8(r6)
    8ea8:	41bffa1e 	bne	r8,r6,8e94 <_malloc_r+0x4e4>
    8eac:	32000317 	ldw	r8,12(r6)
    8eb0:	39c00117 	ldw	r7,4(r7)
    8eb4:	82000315 	stw	r8,12(r16)
    8eb8:	81800215 	stw	r6,8(r16)
    8ebc:	07000074 	movhi	fp,1
    8ec0:	e7006404 	addi	fp,fp,400
    8ec4:	34000315 	stw	r16,12(r6)
    8ec8:	44000215 	stw	r16,8(r8)
    8ecc:	003f3e06 	br	8bc8 <_malloc_r+0x218>
    8ed0:	63000044 	addi	r12,r12,1
    8ed4:	608000cc 	andi	r2,r12,3
    8ed8:	10005d26 	beq	r2,zero,9050 <_malloc_r+0x6a0>
    8edc:	18c00204 	addi	r3,r3,8
    8ee0:	003f5106 	br	8c28 <_malloc_r+0x278>
    8ee4:	8089883a 	add	r4,r16,r2
    8ee8:	003f6d06 	br	8ca0 <_malloc_r+0x2f0>
    8eec:	00805504 	movi	r2,340
    8ef0:	10c02036 	bltu	r2,r3,8f74 <_malloc_r+0x5c4>
    8ef4:	8804d3fa 	srli	r2,r17,15
    8ef8:	11801dc4 	addi	r6,r2,119
    8efc:	300490fa 	slli	r2,r6,3
    8f00:	003ed806 	br	8a64 <_malloc_r+0xb4>
    8f04:	48c000c4 	addi	r3,r9,3
    8f08:	003f3106 	br	8bd0 <_malloc_r+0x220>
    8f0c:	05c00074 	movhi	r23,1
    8f10:	bdcde704 	addi	r23,r23,14236
    8f14:	b8800017 	ldw	r2,0(r23)
    8f18:	988d883a 	add	r6,r19,r2
    8f1c:	b9800015 	stw	r6,0(r23)
    8f20:	293fb21e 	bne	r5,r4,8dec <_malloc_r+0x43c>
    8f24:	2083ffcc 	andi	r2,r4,4095
    8f28:	103fb01e 	bne	r2,zero,8dec <_malloc_r+0x43c>
    8f2c:	e4000217 	ldw	r16,8(fp)
    8f30:	9d45883a 	add	r2,r19,r21
    8f34:	10800054 	ori	r2,r2,1
    8f38:	80800115 	stw	r2,4(r16)
    8f3c:	b8c00017 	ldw	r3,0(r23)
    8f40:	d0a79417 	ldw	r2,-25008(gp)
    8f44:	10c0012e 	bgeu	r2,r3,8f4c <_malloc_r+0x59c>
    8f48:	d0e79415 	stw	r3,-25008(gp)
    8f4c:	d0a79517 	ldw	r2,-25004(gp)
    8f50:	10ff962e 	bgeu	r2,r3,8dac <_malloc_r+0x3fc>
    8f54:	d0e79515 	stw	r3,-25004(gp)
    8f58:	003f9406 	br	8dac <_malloc_r+0x3fc>
    8f5c:	00800104 	movi	r2,4
    8f60:	11001e36 	bltu	r2,r4,8fdc <_malloc_r+0x62c>
    8f64:	2804d1ba 	srli	r2,r5,6
    8f68:	11000e04 	addi	r4,r2,56
    8f6c:	200690fa 	slli	r3,r4,3
    8f70:	003fc506 	br	8e88 <_malloc_r+0x4d8>
    8f74:	00815504 	movi	r2,1364
    8f78:	10c01d2e 	bgeu	r2,r3,8ff0 <_malloc_r+0x640>
    8f7c:	01801f84 	movi	r6,126
    8f80:	0080fc04 	movi	r2,1008
    8f84:	003eb706 	br	8a64 <_malloc_r+0xb4>
    8f88:	00800204 	movi	r2,8
    8f8c:	10cbc83a 	sub	r5,r2,r3
    8f90:	2169883a 	add	r20,r4,r5
    8f94:	003f9e06 	br	8e10 <_malloc_r+0x460>
    8f98:	00bffe04 	movi	r2,-8
    8f9c:	a93ffd04 	addi	r4,r21,-12
    8fa0:	2088703a 	and	r4,r4,r2
    8fa4:	b10b883a 	add	r5,r22,r4
    8fa8:	00c00144 	movi	r3,5
    8fac:	28c00215 	stw	r3,8(r5)
    8fb0:	28c00115 	stw	r3,4(r5)
    8fb4:	b0800117 	ldw	r2,4(r22)
    8fb8:	1080004c 	andi	r2,r2,1
    8fbc:	2084b03a 	or	r2,r4,r2
    8fc0:	b0800115 	stw	r2,4(r22)
    8fc4:	313fdd2e 	bgeu	r6,r4,8f3c <_malloc_r+0x58c>
    8fc8:	b1400204 	addi	r5,r22,8
    8fcc:	9009883a 	mov	r4,r18
    8fd0:	0007e280 	call	7e28 <_free_r>
    8fd4:	e4000217 	ldw	r16,8(fp)
    8fd8:	003fd806 	br	8f3c <_malloc_r+0x58c>
    8fdc:	00800504 	movi	r2,20
    8fe0:	11001536 	bltu	r2,r4,9038 <_malloc_r+0x688>
    8fe4:	210016c4 	addi	r4,r4,91
    8fe8:	200690fa 	slli	r3,r4,3
    8fec:	003fa606 	br	8e88 <_malloc_r+0x4d8>
    8ff0:	8804d4ba 	srli	r2,r17,18
    8ff4:	11801f04 	addi	r6,r2,124
    8ff8:	300490fa 	slli	r2,r6,3
    8ffc:	003e9906 	br	8a64 <_malloc_r+0xb4>
    9000:	2009d0ba 	srai	r4,r4,2
    9004:	01400074 	movhi	r5,1
    9008:	29406404 	addi	r5,r5,400
    900c:	00c00044 	movi	r3,1
    9010:	28800117 	ldw	r2,4(r5)
    9014:	1906983a 	sll	r3,r3,r4
    9018:	10c4b03a 	or	r2,r2,r3
    901c:	28800115 	stw	r2,4(r5)
    9020:	003fa306 	br	8eb0 <_malloc_r+0x500>
    9024:	0027883a 	mov	r19,zero
    9028:	00c00044 	movi	r3,1
    902c:	003f8606 	br	8e48 <_malloc_r+0x498>
    9030:	d1200815 	stw	r4,-32736(gp)
    9034:	003f7306 	br	8e04 <_malloc_r+0x454>
    9038:	00801504 	movi	r2,84
    903c:	11001936 	bltu	r2,r4,90a4 <_malloc_r+0x6f4>
    9040:	2804d33a 	srli	r2,r5,12
    9044:	11001b84 	addi	r4,r2,110
    9048:	200690fa 	slli	r3,r4,3
    904c:	003f8e06 	br	8e88 <_malloc_r+0x4d8>
    9050:	480b883a 	mov	r5,r9
    9054:	6807883a 	mov	r3,r13
    9058:	288000cc 	andi	r2,r5,3
    905c:	18fffe04 	addi	r3,r3,-8
    9060:	297fffc4 	addi	r5,r5,-1
    9064:	10001526 	beq	r2,zero,90bc <_malloc_r+0x70c>
    9068:	18800217 	ldw	r2,8(r3)
    906c:	10fffa26 	beq	r2,r3,9058 <_malloc_r+0x6a8>
    9070:	2109883a 	add	r4,r4,r4
    9074:	393f1e36 	bltu	r7,r4,8cf0 <_malloc_r+0x340>
    9078:	203f1d26 	beq	r4,zero,8cf0 <_malloc_r+0x340>
    907c:	21c4703a 	and	r2,r4,r7
    9080:	10000226 	beq	r2,zero,908c <_malloc_r+0x6dc>
    9084:	6013883a 	mov	r9,r12
    9088:	003ee106 	br	8c10 <_malloc_r+0x260>
    908c:	2109883a 	add	r4,r4,r4
    9090:	3904703a 	and	r2,r7,r4
    9094:	63000104 	addi	r12,r12,4
    9098:	103ffc26 	beq	r2,zero,908c <_malloc_r+0x6dc>
    909c:	6013883a 	mov	r9,r12
    90a0:	003edb06 	br	8c10 <_malloc_r+0x260>
    90a4:	00805504 	movi	r2,340
    90a8:	11000836 	bltu	r2,r4,90cc <_malloc_r+0x71c>
    90ac:	2804d3fa 	srli	r2,r5,15
    90b0:	11001dc4 	addi	r4,r2,119
    90b4:	200690fa 	slli	r3,r4,3
    90b8:	003f7306 	br	8e88 <_malloc_r+0x4d8>
    90bc:	0104303a 	nor	r2,zero,r4
    90c0:	388e703a 	and	r7,r7,r2
    90c4:	e1c00115 	stw	r7,4(fp)
    90c8:	003fe906 	br	9070 <_malloc_r+0x6c0>
    90cc:	00815504 	movi	r2,1364
    90d0:	1100032e 	bgeu	r2,r4,90e0 <_malloc_r+0x730>
    90d4:	01001f84 	movi	r4,126
    90d8:	00c0fc04 	movi	r3,1008
    90dc:	003f6a06 	br	8e88 <_malloc_r+0x4d8>
    90e0:	2804d4ba 	srli	r2,r5,18
    90e4:	11001f04 	addi	r4,r2,124
    90e8:	200690fa 	slli	r3,r4,3
    90ec:	003f6606 	br	8e88 <_malloc_r+0x4d8>

000090f0 <memchr>:
    90f0:	008000c4 	movi	r2,3
    90f4:	29403fcc 	andi	r5,r5,255
    90f8:	2007883a 	mov	r3,r4
    90fc:	1180022e 	bgeu	r2,r6,9108 <memchr+0x18>
    9100:	2084703a 	and	r2,r4,r2
    9104:	10000b26 	beq	r2,zero,9134 <memchr+0x44>
    9108:	313fffc4 	addi	r4,r6,-1
    910c:	3000051e 	bne	r6,zero,9124 <memchr+0x34>
    9110:	00002c06 	br	91c4 <memchr+0xd4>
    9114:	213fffc4 	addi	r4,r4,-1
    9118:	00bfffc4 	movi	r2,-1
    911c:	18c00044 	addi	r3,r3,1
    9120:	20802826 	beq	r4,r2,91c4 <memchr+0xd4>
    9124:	18800003 	ldbu	r2,0(r3)
    9128:	28bffa1e 	bne	r5,r2,9114 <memchr+0x24>
    912c:	1805883a 	mov	r2,r3
    9130:	f800283a 	ret
    9134:	0011883a 	mov	r8,zero
    9138:	0007883a 	mov	r3,zero
    913c:	01c00104 	movi	r7,4
    9140:	4004923a 	slli	r2,r8,8
    9144:	18c00044 	addi	r3,r3,1
    9148:	1151883a 	add	r8,r2,r5
    914c:	19fffc1e 	bne	r3,r7,9140 <memchr+0x50>
    9150:	02bfbff4 	movhi	r10,65279
    9154:	52bfbfc4 	addi	r10,r10,-257
    9158:	02602074 	movhi	r9,32897
    915c:	4a602004 	addi	r9,r9,-32640
    9160:	02c000c4 	movi	r11,3
    9164:	20800017 	ldw	r2,0(r4)
    9168:	31bfff04 	addi	r6,r6,-4
    916c:	200f883a 	mov	r7,r4
    9170:	1204f03a 	xor	r2,r2,r8
    9174:	1287883a 	add	r3,r2,r10
    9178:	1a46703a 	and	r3,r3,r9
    917c:	0084303a 	nor	r2,zero,r2
    9180:	10c4703a 	and	r2,r2,r3
    9184:	10000b26 	beq	r2,zero,91b4 <memchr+0xc4>
    9188:	20800003 	ldbu	r2,0(r4)
    918c:	28800f26 	beq	r5,r2,91cc <memchr+0xdc>
    9190:	20800043 	ldbu	r2,1(r4)
    9194:	21c00044 	addi	r7,r4,1
    9198:	28800c26 	beq	r5,r2,91cc <memchr+0xdc>
    919c:	20800083 	ldbu	r2,2(r4)
    91a0:	21c00084 	addi	r7,r4,2
    91a4:	28800926 	beq	r5,r2,91cc <memchr+0xdc>
    91a8:	208000c3 	ldbu	r2,3(r4)
    91ac:	21c000c4 	addi	r7,r4,3
    91b0:	28800626 	beq	r5,r2,91cc <memchr+0xdc>
    91b4:	21000104 	addi	r4,r4,4
    91b8:	59bfea36 	bltu	r11,r6,9164 <memchr+0x74>
    91bc:	2007883a 	mov	r3,r4
    91c0:	003fd106 	br	9108 <memchr+0x18>
    91c4:	0005883a 	mov	r2,zero
    91c8:	f800283a 	ret
    91cc:	3805883a 	mov	r2,r7
    91d0:	f800283a 	ret

000091d4 <memmove>:
    91d4:	2807883a 	mov	r3,r5
    91d8:	2011883a 	mov	r8,r4
    91dc:	29000c2e 	bgeu	r5,r4,9210 <memmove+0x3c>
    91e0:	298f883a 	add	r7,r5,r6
    91e4:	21c00a2e 	bgeu	r4,r7,9210 <memmove+0x3c>
    91e8:	30000726 	beq	r6,zero,9208 <memmove+0x34>
    91ec:	2187883a 	add	r3,r4,r6
    91f0:	198dc83a 	sub	r6,r3,r6
    91f4:	39ffffc4 	addi	r7,r7,-1
    91f8:	38800003 	ldbu	r2,0(r7)
    91fc:	18ffffc4 	addi	r3,r3,-1
    9200:	18800005 	stb	r2,0(r3)
    9204:	19bffb1e 	bne	r3,r6,91f4 <memmove+0x20>
    9208:	2005883a 	mov	r2,r4
    920c:	f800283a 	ret
    9210:	01c003c4 	movi	r7,15
    9214:	39800a36 	bltu	r7,r6,9240 <memmove+0x6c>
    9218:	303ffb26 	beq	r6,zero,9208 <memmove+0x34>
    921c:	400f883a 	mov	r7,r8
    9220:	320d883a 	add	r6,r6,r8
    9224:	28800003 	ldbu	r2,0(r5)
    9228:	29400044 	addi	r5,r5,1
    922c:	38800005 	stb	r2,0(r7)
    9230:	39c00044 	addi	r7,r7,1
    9234:	39bffb1e 	bne	r7,r6,9224 <memmove+0x50>
    9238:	2005883a 	mov	r2,r4
    923c:	f800283a 	ret
    9240:	1904b03a 	or	r2,r3,r4
    9244:	108000cc 	andi	r2,r2,3
    9248:	103ff31e 	bne	r2,zero,9218 <memmove+0x44>
    924c:	3811883a 	mov	r8,r7
    9250:	180b883a 	mov	r5,r3
    9254:	200f883a 	mov	r7,r4
    9258:	28c00017 	ldw	r3,0(r5)
    925c:	31bffc04 	addi	r6,r6,-16
    9260:	38c00015 	stw	r3,0(r7)
    9264:	28800117 	ldw	r2,4(r5)
    9268:	38800115 	stw	r2,4(r7)
    926c:	28c00217 	ldw	r3,8(r5)
    9270:	38c00215 	stw	r3,8(r7)
    9274:	28800317 	ldw	r2,12(r5)
    9278:	29400404 	addi	r5,r5,16
    927c:	38800315 	stw	r2,12(r7)
    9280:	39c00404 	addi	r7,r7,16
    9284:	41bff436 	bltu	r8,r6,9258 <memmove+0x84>
    9288:	008000c4 	movi	r2,3
    928c:	1180072e 	bgeu	r2,r6,92ac <memmove+0xd8>
    9290:	1007883a 	mov	r3,r2
    9294:	28800017 	ldw	r2,0(r5)
    9298:	31bfff04 	addi	r6,r6,-4
    929c:	29400104 	addi	r5,r5,4
    92a0:	38800015 	stw	r2,0(r7)
    92a4:	39c00104 	addi	r7,r7,4
    92a8:	19bffa36 	bltu	r3,r6,9294 <memmove+0xc0>
    92ac:	3811883a 	mov	r8,r7
    92b0:	003fd906 	br	9218 <memmove+0x44>

000092b4 <memset>:
    92b4:	008000c4 	movi	r2,3
    92b8:	29403fcc 	andi	r5,r5,255
    92bc:	2007883a 	mov	r3,r4
    92c0:	1180022e 	bgeu	r2,r6,92cc <memset+0x18>
    92c4:	2084703a 	and	r2,r4,r2
    92c8:	10000826 	beq	r2,zero,92ec <memset+0x38>
    92cc:	30000526 	beq	r6,zero,92e4 <memset+0x30>
    92d0:	2805883a 	mov	r2,r5
    92d4:	30cd883a 	add	r6,r6,r3
    92d8:	18800005 	stb	r2,0(r3)
    92dc:	18c00044 	addi	r3,r3,1
    92e0:	19bffd1e 	bne	r3,r6,92d8 <memset+0x24>
    92e4:	2005883a 	mov	r2,r4
    92e8:	f800283a 	ret
    92ec:	2804923a 	slli	r2,r5,8
    92f0:	020003c4 	movi	r8,15
    92f4:	200f883a 	mov	r7,r4
    92f8:	2884b03a 	or	r2,r5,r2
    92fc:	1006943a 	slli	r3,r2,16
    9300:	10c6b03a 	or	r3,r2,r3
    9304:	41800a2e 	bgeu	r8,r6,9330 <memset+0x7c>
    9308:	4005883a 	mov	r2,r8
    930c:	31bffc04 	addi	r6,r6,-16
    9310:	38c00015 	stw	r3,0(r7)
    9314:	38c00115 	stw	r3,4(r7)
    9318:	38c00215 	stw	r3,8(r7)
    931c:	38c00315 	stw	r3,12(r7)
    9320:	39c00404 	addi	r7,r7,16
    9324:	11bff936 	bltu	r2,r6,930c <memset+0x58>
    9328:	008000c4 	movi	r2,3
    932c:	1180052e 	bgeu	r2,r6,9344 <memset+0x90>
    9330:	31bfff04 	addi	r6,r6,-4
    9334:	008000c4 	movi	r2,3
    9338:	38c00015 	stw	r3,0(r7)
    933c:	39c00104 	addi	r7,r7,4
    9340:	11bffb36 	bltu	r2,r6,9330 <memset+0x7c>
    9344:	3807883a 	mov	r3,r7
    9348:	003fe006 	br	92cc <memset+0x18>

0000934c <_Bfree>:
    934c:	28000826 	beq	r5,zero,9370 <_Bfree+0x24>
    9350:	28800117 	ldw	r2,4(r5)
    9354:	21001317 	ldw	r4,76(r4)
    9358:	1085883a 	add	r2,r2,r2
    935c:	1085883a 	add	r2,r2,r2
    9360:	1105883a 	add	r2,r2,r4
    9364:	10c00017 	ldw	r3,0(r2)
    9368:	28c00015 	stw	r3,0(r5)
    936c:	11400015 	stw	r5,0(r2)
    9370:	f800283a 	ret

00009374 <__hi0bits>:
    9374:	20bfffec 	andhi	r2,r4,65535
    9378:	10001426 	beq	r2,zero,93cc <__hi0bits+0x58>
    937c:	0007883a 	mov	r3,zero
    9380:	20bfc02c 	andhi	r2,r4,65280
    9384:	1000021e 	bne	r2,zero,9390 <__hi0bits+0x1c>
    9388:	2008923a 	slli	r4,r4,8
    938c:	18c00204 	addi	r3,r3,8
    9390:	20bc002c 	andhi	r2,r4,61440
    9394:	1000021e 	bne	r2,zero,93a0 <__hi0bits+0x2c>
    9398:	2008913a 	slli	r4,r4,4
    939c:	18c00104 	addi	r3,r3,4
    93a0:	20b0002c 	andhi	r2,r4,49152
    93a4:	1000031e 	bne	r2,zero,93b4 <__hi0bits+0x40>
    93a8:	2105883a 	add	r2,r4,r4
    93ac:	18c00084 	addi	r3,r3,2
    93b0:	1089883a 	add	r4,r2,r2
    93b4:	20000316 	blt	r4,zero,93c4 <__hi0bits+0x50>
    93b8:	2090002c 	andhi	r2,r4,16384
    93bc:	10000626 	beq	r2,zero,93d8 <__hi0bits+0x64>
    93c0:	18c00044 	addi	r3,r3,1
    93c4:	1805883a 	mov	r2,r3
    93c8:	f800283a 	ret
    93cc:	2008943a 	slli	r4,r4,16
    93d0:	00c00404 	movi	r3,16
    93d4:	003fea06 	br	9380 <__hi0bits+0xc>
    93d8:	00c00804 	movi	r3,32
    93dc:	1805883a 	mov	r2,r3
    93e0:	f800283a 	ret

000093e4 <__lo0bits>:
    93e4:	20c00017 	ldw	r3,0(r4)
    93e8:	188001cc 	andi	r2,r3,7
    93ec:	10000a26 	beq	r2,zero,9418 <__lo0bits+0x34>
    93f0:	1880004c 	andi	r2,r3,1
    93f4:	1005003a 	cmpeq	r2,r2,zero
    93f8:	10002126 	beq	r2,zero,9480 <__lo0bits+0x9c>
    93fc:	1880008c 	andi	r2,r3,2
    9400:	1000251e 	bne	r2,zero,9498 <__lo0bits+0xb4>
    9404:	1804d0ba 	srli	r2,r3,2
    9408:	01400084 	movi	r5,2
    940c:	20800015 	stw	r2,0(r4)
    9410:	2805883a 	mov	r2,r5
    9414:	f800283a 	ret
    9418:	18bfffcc 	andi	r2,r3,65535
    941c:	10001526 	beq	r2,zero,9474 <__lo0bits+0x90>
    9420:	000b883a 	mov	r5,zero
    9424:	18803fcc 	andi	r2,r3,255
    9428:	1000021e 	bne	r2,zero,9434 <__lo0bits+0x50>
    942c:	1806d23a 	srli	r3,r3,8
    9430:	29400204 	addi	r5,r5,8
    9434:	188003cc 	andi	r2,r3,15
    9438:	1000021e 	bne	r2,zero,9444 <__lo0bits+0x60>
    943c:	1806d13a 	srli	r3,r3,4
    9440:	29400104 	addi	r5,r5,4
    9444:	188000cc 	andi	r2,r3,3
    9448:	1000021e 	bne	r2,zero,9454 <__lo0bits+0x70>
    944c:	1806d0ba 	srli	r3,r3,2
    9450:	29400084 	addi	r5,r5,2
    9454:	1880004c 	andi	r2,r3,1
    9458:	1000031e 	bne	r2,zero,9468 <__lo0bits+0x84>
    945c:	1806d07a 	srli	r3,r3,1
    9460:	18000a26 	beq	r3,zero,948c <__lo0bits+0xa8>
    9464:	29400044 	addi	r5,r5,1
    9468:	2805883a 	mov	r2,r5
    946c:	20c00015 	stw	r3,0(r4)
    9470:	f800283a 	ret
    9474:	1806d43a 	srli	r3,r3,16
    9478:	01400404 	movi	r5,16
    947c:	003fe906 	br	9424 <__lo0bits+0x40>
    9480:	000b883a 	mov	r5,zero
    9484:	2805883a 	mov	r2,r5
    9488:	f800283a 	ret
    948c:	01400804 	movi	r5,32
    9490:	2805883a 	mov	r2,r5
    9494:	f800283a 	ret
    9498:	1804d07a 	srli	r2,r3,1
    949c:	01400044 	movi	r5,1
    94a0:	20800015 	stw	r2,0(r4)
    94a4:	003fda06 	br	9410 <__lo0bits+0x2c>

000094a8 <__mcmp>:
    94a8:	20800417 	ldw	r2,16(r4)
    94ac:	28c00417 	ldw	r3,16(r5)
    94b0:	10cfc83a 	sub	r7,r2,r3
    94b4:	38000c1e 	bne	r7,zero,94e8 <__mcmp+0x40>
    94b8:	18c5883a 	add	r2,r3,r3
    94bc:	1085883a 	add	r2,r2,r2
    94c0:	10c00504 	addi	r3,r2,20
    94c4:	21000504 	addi	r4,r4,20
    94c8:	28cb883a 	add	r5,r5,r3
    94cc:	2085883a 	add	r2,r4,r2
    94d0:	10bfff04 	addi	r2,r2,-4
    94d4:	297fff04 	addi	r5,r5,-4
    94d8:	11800017 	ldw	r6,0(r2)
    94dc:	28c00017 	ldw	r3,0(r5)
    94e0:	30c0031e 	bne	r6,r3,94f0 <__mcmp+0x48>
    94e4:	20bffa36 	bltu	r4,r2,94d0 <__mcmp+0x28>
    94e8:	3805883a 	mov	r2,r7
    94ec:	f800283a 	ret
    94f0:	30c00336 	bltu	r6,r3,9500 <__mcmp+0x58>
    94f4:	01c00044 	movi	r7,1
    94f8:	3805883a 	mov	r2,r7
    94fc:	f800283a 	ret
    9500:	01ffffc4 	movi	r7,-1
    9504:	003ff806 	br	94e8 <__mcmp+0x40>

00009508 <__ulp>:
    9508:	295ffc2c 	andhi	r5,r5,32752
    950c:	013f3034 	movhi	r4,64704
    9510:	290b883a 	add	r5,r5,r4
    9514:	0145c83a 	sub	r2,zero,r5
    9518:	1007d53a 	srai	r3,r2,20
    951c:	000d883a 	mov	r6,zero
    9520:	0140040e 	bge	zero,r5,9534 <__ulp+0x2c>
    9524:	280f883a 	mov	r7,r5
    9528:	3807883a 	mov	r3,r7
    952c:	3005883a 	mov	r2,r6
    9530:	f800283a 	ret
    9534:	008004c4 	movi	r2,19
    9538:	193ffb04 	addi	r4,r3,-20
    953c:	10c00c0e 	bge	r2,r3,9570 <__ulp+0x68>
    9540:	008007c4 	movi	r2,31
    9544:	1107c83a 	sub	r3,r2,r4
    9548:	00800784 	movi	r2,30
    954c:	01400044 	movi	r5,1
    9550:	11000216 	blt	r2,r4,955c <__ulp+0x54>
    9554:	00800044 	movi	r2,1
    9558:	10ca983a 	sll	r5,r2,r3
    955c:	000f883a 	mov	r7,zero
    9560:	280d883a 	mov	r6,r5
    9564:	3807883a 	mov	r3,r7
    9568:	3005883a 	mov	r2,r6
    956c:	f800283a 	ret
    9570:	00800234 	movhi	r2,8
    9574:	10cfd83a 	sra	r7,r2,r3
    9578:	000d883a 	mov	r6,zero
    957c:	3005883a 	mov	r2,r6
    9580:	3807883a 	mov	r3,r7
    9584:	f800283a 	ret

00009588 <__b2d>:
    9588:	20800417 	ldw	r2,16(r4)
    958c:	defff904 	addi	sp,sp,-28
    9590:	dd000415 	stw	r20,16(sp)
    9594:	1085883a 	add	r2,r2,r2
    9598:	25000504 	addi	r20,r4,20
    959c:	1085883a 	add	r2,r2,r2
    95a0:	dc000015 	stw	r16,0(sp)
    95a4:	a0a1883a 	add	r16,r20,r2
    95a8:	dd400515 	stw	r21,20(sp)
    95ac:	857fff17 	ldw	r21,-4(r16)
    95b0:	dc400115 	stw	r17,4(sp)
    95b4:	dfc00615 	stw	ra,24(sp)
    95b8:	a809883a 	mov	r4,r21
    95bc:	2823883a 	mov	r17,r5
    95c0:	dcc00315 	stw	r19,12(sp)
    95c4:	dc800215 	stw	r18,8(sp)
    95c8:	00093740 	call	9374 <__hi0bits>
    95cc:	100b883a 	mov	r5,r2
    95d0:	00800804 	movi	r2,32
    95d4:	1145c83a 	sub	r2,r2,r5
    95d8:	88800015 	stw	r2,0(r17)
    95dc:	00800284 	movi	r2,10
    95e0:	80ffff04 	addi	r3,r16,-4
    95e4:	11401416 	blt	r2,r5,9638 <__b2d+0xb0>
    95e8:	008002c4 	movi	r2,11
    95ec:	1149c83a 	sub	r4,r2,r5
    95f0:	a0c02736 	bltu	r20,r3,9690 <__b2d+0x108>
    95f4:	000d883a 	mov	r6,zero
    95f8:	28800544 	addi	r2,r5,21
    95fc:	a906d83a 	srl	r3,r21,r4
    9600:	a884983a 	sll	r2,r21,r2
    9604:	1ccffc34 	orhi	r19,r3,16368
    9608:	11a4b03a 	or	r18,r2,r6
    960c:	9005883a 	mov	r2,r18
    9610:	9807883a 	mov	r3,r19
    9614:	dfc00617 	ldw	ra,24(sp)
    9618:	dd400517 	ldw	r21,20(sp)
    961c:	dd000417 	ldw	r20,16(sp)
    9620:	dcc00317 	ldw	r19,12(sp)
    9624:	dc800217 	ldw	r18,8(sp)
    9628:	dc400117 	ldw	r17,4(sp)
    962c:	dc000017 	ldw	r16,0(sp)
    9630:	dec00704 	addi	sp,sp,28
    9634:	f800283a 	ret
    9638:	a0c00e36 	bltu	r20,r3,9674 <__b2d+0xec>
    963c:	293ffd44 	addi	r4,r5,-11
    9640:	000d883a 	mov	r6,zero
    9644:	20000f26 	beq	r4,zero,9684 <__b2d+0xfc>
    9648:	00800804 	movi	r2,32
    964c:	110bc83a 	sub	r5,r2,r4
    9650:	a0c01236 	bltu	r20,r3,969c <__b2d+0x114>
    9654:	000f883a 	mov	r7,zero
    9658:	a904983a 	sll	r2,r21,r4
    965c:	3146d83a 	srl	r3,r6,r5
    9660:	3108983a 	sll	r4,r6,r4
    9664:	108ffc34 	orhi	r2,r2,16368
    9668:	18a6b03a 	or	r19,r3,r2
    966c:	3924b03a 	or	r18,r7,r4
    9670:	003fe606 	br	960c <__b2d+0x84>
    9674:	293ffd44 	addi	r4,r5,-11
    9678:	81bffe17 	ldw	r6,-8(r16)
    967c:	80fffe04 	addi	r3,r16,-8
    9680:	203ff11e 	bne	r4,zero,9648 <__b2d+0xc0>
    9684:	accffc34 	orhi	r19,r21,16368
    9688:	3025883a 	mov	r18,r6
    968c:	003fdf06 	br	960c <__b2d+0x84>
    9690:	18bfff17 	ldw	r2,-4(r3)
    9694:	110cd83a 	srl	r6,r2,r4
    9698:	003fd706 	br	95f8 <__b2d+0x70>
    969c:	18bfff17 	ldw	r2,-4(r3)
    96a0:	114ed83a 	srl	r7,r2,r5
    96a4:	003fec06 	br	9658 <__b2d+0xd0>

000096a8 <__ratio>:
    96a8:	defff904 	addi	sp,sp,-28
    96ac:	dc400215 	stw	r17,8(sp)
    96b0:	2823883a 	mov	r17,r5
    96b4:	d80b883a 	mov	r5,sp
    96b8:	dfc00615 	stw	ra,24(sp)
    96bc:	dd000515 	stw	r20,20(sp)
    96c0:	dcc00415 	stw	r19,16(sp)
    96c4:	dc800315 	stw	r18,12(sp)
    96c8:	2025883a 	mov	r18,r4
    96cc:	00095880 	call	9588 <__b2d>
    96d0:	8809883a 	mov	r4,r17
    96d4:	d9400104 	addi	r5,sp,4
    96d8:	1027883a 	mov	r19,r2
    96dc:	1829883a 	mov	r20,r3
    96e0:	00095880 	call	9588 <__b2d>
    96e4:	89000417 	ldw	r4,16(r17)
    96e8:	91c00417 	ldw	r7,16(r18)
    96ec:	d9800117 	ldw	r6,4(sp)
    96f0:	180b883a 	mov	r5,r3
    96f4:	390fc83a 	sub	r7,r7,r4
    96f8:	1009883a 	mov	r4,r2
    96fc:	d8800017 	ldw	r2,0(sp)
    9700:	380e917a 	slli	r7,r7,5
    9704:	2011883a 	mov	r8,r4
    9708:	1185c83a 	sub	r2,r2,r6
    970c:	11c5883a 	add	r2,r2,r7
    9710:	1006953a 	slli	r3,r2,20
    9714:	2813883a 	mov	r9,r5
    9718:	00800d0e 	bge	zero,r2,9750 <__ratio+0xa8>
    971c:	1d29883a 	add	r20,r3,r20
    9720:	a00b883a 	mov	r5,r20
    9724:	480f883a 	mov	r7,r9
    9728:	9809883a 	mov	r4,r19
    972c:	400d883a 	mov	r6,r8
    9730:	00031b80 	call	31b8 <__divdf3>
    9734:	dfc00617 	ldw	ra,24(sp)
    9738:	dd000517 	ldw	r20,20(sp)
    973c:	dcc00417 	ldw	r19,16(sp)
    9740:	dc800317 	ldw	r18,12(sp)
    9744:	dc400217 	ldw	r17,8(sp)
    9748:	dec00704 	addi	sp,sp,28
    974c:	f800283a 	ret
    9750:	28d3c83a 	sub	r9,r5,r3
    9754:	003ff206 	br	9720 <__ratio+0x78>

00009758 <_mprec_log10>:
    9758:	defffe04 	addi	sp,sp,-8
    975c:	008005c4 	movi	r2,23
    9760:	dc000015 	stw	r16,0(sp)
    9764:	dfc00115 	stw	ra,4(sp)
    9768:	2021883a 	mov	r16,r4
    976c:	11000c16 	blt	r2,r4,97a0 <_mprec_log10+0x48>
    9770:	200490fa 	slli	r2,r4,3
    9774:	00c00074 	movhi	r3,1
    9778:	18fe8304 	addi	r3,r3,-1524
    977c:	10c5883a 	add	r2,r2,r3
    9780:	12400117 	ldw	r9,4(r2)
    9784:	12000017 	ldw	r8,0(r2)
    9788:	4807883a 	mov	r3,r9
    978c:	4005883a 	mov	r2,r8
    9790:	dfc00117 	ldw	ra,4(sp)
    9794:	dc000017 	ldw	r16,0(sp)
    9798:	dec00204 	addi	sp,sp,8
    979c:	f800283a 	ret
    97a0:	0011883a 	mov	r8,zero
    97a4:	024ffc34 	movhi	r9,16368
    97a8:	0005883a 	mov	r2,zero
    97ac:	00d00934 	movhi	r3,16420
    97b0:	480b883a 	mov	r5,r9
    97b4:	4009883a 	mov	r4,r8
    97b8:	180f883a 	mov	r7,r3
    97bc:	100d883a 	mov	r6,r2
    97c0:	0002df40 	call	2df4 <__muldf3>
    97c4:	843fffc4 	addi	r16,r16,-1
    97c8:	1011883a 	mov	r8,r2
    97cc:	1813883a 	mov	r9,r3
    97d0:	803ff51e 	bne	r16,zero,97a8 <_mprec_log10+0x50>
    97d4:	4005883a 	mov	r2,r8
    97d8:	4807883a 	mov	r3,r9
    97dc:	dfc00117 	ldw	ra,4(sp)
    97e0:	dc000017 	ldw	r16,0(sp)
    97e4:	dec00204 	addi	sp,sp,8
    97e8:	f800283a 	ret

000097ec <__copybits>:
    97ec:	297fffc4 	addi	r5,r5,-1
    97f0:	30800417 	ldw	r2,16(r6)
    97f4:	280bd17a 	srai	r5,r5,5
    97f8:	31800504 	addi	r6,r6,20
    97fc:	1085883a 	add	r2,r2,r2
    9800:	294b883a 	add	r5,r5,r5
    9804:	294b883a 	add	r5,r5,r5
    9808:	1085883a 	add	r2,r2,r2
    980c:	290b883a 	add	r5,r5,r4
    9810:	3087883a 	add	r3,r6,r2
    9814:	29400104 	addi	r5,r5,4
    9818:	30c0052e 	bgeu	r6,r3,9830 <__copybits+0x44>
    981c:	30800017 	ldw	r2,0(r6)
    9820:	31800104 	addi	r6,r6,4
    9824:	20800015 	stw	r2,0(r4)
    9828:	21000104 	addi	r4,r4,4
    982c:	30fffb36 	bltu	r6,r3,981c <__copybits+0x30>
    9830:	2140032e 	bgeu	r4,r5,9840 <__copybits+0x54>
    9834:	20000015 	stw	zero,0(r4)
    9838:	21000104 	addi	r4,r4,4
    983c:	217ffd36 	bltu	r4,r5,9834 <__copybits+0x48>
    9840:	f800283a 	ret

00009844 <__any_on>:
    9844:	20800417 	ldw	r2,16(r4)
    9848:	2807d17a 	srai	r3,r5,5
    984c:	21000504 	addi	r4,r4,20
    9850:	10c00d0e 	bge	r2,r3,9888 <__any_on+0x44>
    9854:	1085883a 	add	r2,r2,r2
    9858:	1085883a 	add	r2,r2,r2
    985c:	208d883a 	add	r6,r4,r2
    9860:	2180182e 	bgeu	r4,r6,98c4 <__any_on+0x80>
    9864:	30bfff17 	ldw	r2,-4(r6)
    9868:	30ffff04 	addi	r3,r6,-4
    986c:	1000041e 	bne	r2,zero,9880 <__any_on+0x3c>
    9870:	20c0142e 	bgeu	r4,r3,98c4 <__any_on+0x80>
    9874:	18ffff04 	addi	r3,r3,-4
    9878:	18800017 	ldw	r2,0(r3)
    987c:	103ffc26 	beq	r2,zero,9870 <__any_on+0x2c>
    9880:	00800044 	movi	r2,1
    9884:	f800283a 	ret
    9888:	18800a0e 	bge	r3,r2,98b4 <__any_on+0x70>
    988c:	294007cc 	andi	r5,r5,31
    9890:	28000826 	beq	r5,zero,98b4 <__any_on+0x70>
    9894:	18c5883a 	add	r2,r3,r3
    9898:	1085883a 	add	r2,r2,r2
    989c:	208d883a 	add	r6,r4,r2
    98a0:	30c00017 	ldw	r3,0(r6)
    98a4:	1944d83a 	srl	r2,r3,r5
    98a8:	1144983a 	sll	r2,r2,r5
    98ac:	18bff41e 	bne	r3,r2,9880 <__any_on+0x3c>
    98b0:	003feb06 	br	9860 <__any_on+0x1c>
    98b4:	18c5883a 	add	r2,r3,r3
    98b8:	1085883a 	add	r2,r2,r2
    98bc:	208d883a 	add	r6,r4,r2
    98c0:	003fe706 	br	9860 <__any_on+0x1c>
    98c4:	0005883a 	mov	r2,zero
    98c8:	f800283a 	ret

000098cc <_Balloc>:
    98cc:	20c01317 	ldw	r3,76(r4)
    98d0:	defffb04 	addi	sp,sp,-20
    98d4:	dcc00315 	stw	r19,12(sp)
    98d8:	dc800215 	stw	r18,8(sp)
    98dc:	dfc00415 	stw	ra,16(sp)
    98e0:	2825883a 	mov	r18,r5
    98e4:	dc400115 	stw	r17,4(sp)
    98e8:	dc000015 	stw	r16,0(sp)
    98ec:	2027883a 	mov	r19,r4
    98f0:	01800404 	movi	r6,16
    98f4:	01400104 	movi	r5,4
    98f8:	18001726 	beq	r3,zero,9958 <_Balloc+0x8c>
    98fc:	01400044 	movi	r5,1
    9900:	9485883a 	add	r2,r18,r18
    9904:	2ca2983a 	sll	r17,r5,r18
    9908:	1085883a 	add	r2,r2,r2
    990c:	10c7883a 	add	r3,r2,r3
    9910:	1c000017 	ldw	r16,0(r3)
    9914:	8c4d883a 	add	r6,r17,r17
    9918:	318d883a 	add	r6,r6,r6
    991c:	9809883a 	mov	r4,r19
    9920:	31800504 	addi	r6,r6,20
    9924:	80001226 	beq	r16,zero,9970 <_Balloc+0xa4>
    9928:	80800017 	ldw	r2,0(r16)
    992c:	18800015 	stw	r2,0(r3)
    9930:	80000415 	stw	zero,16(r16)
    9934:	80000315 	stw	zero,12(r16)
    9938:	8005883a 	mov	r2,r16
    993c:	dfc00417 	ldw	ra,16(sp)
    9940:	dcc00317 	ldw	r19,12(sp)
    9944:	dc800217 	ldw	r18,8(sp)
    9948:	dc400117 	ldw	r17,4(sp)
    994c:	dc000017 	ldw	r16,0(sp)
    9950:	dec00504 	addi	sp,sp,20
    9954:	f800283a 	ret
    9958:	000acd80 	call	acd8 <_calloc_r>
    995c:	1007883a 	mov	r3,r2
    9960:	0021883a 	mov	r16,zero
    9964:	98801315 	stw	r2,76(r19)
    9968:	103fe41e 	bne	r2,zero,98fc <_Balloc+0x30>
    996c:	003ff206 	br	9938 <_Balloc+0x6c>
    9970:	000acd80 	call	acd8 <_calloc_r>
    9974:	103ff026 	beq	r2,zero,9938 <_Balloc+0x6c>
    9978:	1021883a 	mov	r16,r2
    997c:	14800115 	stw	r18,4(r2)
    9980:	14400215 	stw	r17,8(r2)
    9984:	003fea06 	br	9930 <_Balloc+0x64>

00009988 <__d2b>:
    9988:	defff504 	addi	sp,sp,-44
    998c:	dcc00515 	stw	r19,20(sp)
    9990:	04c00044 	movi	r19,1
    9994:	dc000215 	stw	r16,8(sp)
    9998:	2821883a 	mov	r16,r5
    999c:	980b883a 	mov	r5,r19
    99a0:	ddc00915 	stw	r23,36(sp)
    99a4:	dd800815 	stw	r22,32(sp)
    99a8:	dd400715 	stw	r21,28(sp)
    99ac:	dd000615 	stw	r20,24(sp)
    99b0:	dc800415 	stw	r18,16(sp)
    99b4:	dc400315 	stw	r17,12(sp)
    99b8:	dfc00a15 	stw	ra,40(sp)
    99bc:	3023883a 	mov	r17,r6
    99c0:	382d883a 	mov	r22,r7
    99c4:	ddc00b17 	ldw	r23,44(sp)
    99c8:	00098cc0 	call	98cc <_Balloc>
    99cc:	1025883a 	mov	r18,r2
    99d0:	00a00034 	movhi	r2,32768
    99d4:	10bfffc4 	addi	r2,r2,-1
    99d8:	8888703a 	and	r4,r17,r2
    99dc:	202ad53a 	srli	r21,r4,20
    99e0:	00800434 	movhi	r2,16
    99e4:	10bfffc4 	addi	r2,r2,-1
    99e8:	8886703a 	and	r3,r17,r2
    99ec:	a829003a 	cmpeq	r20,r21,zero
    99f0:	800b883a 	mov	r5,r16
    99f4:	d8c00115 	stw	r3,4(sp)
    99f8:	94000504 	addi	r16,r18,20
    99fc:	a000021e 	bne	r20,zero,9a08 <__d2b+0x80>
    9a00:	18c00434 	orhi	r3,r3,16
    9a04:	d8c00115 	stw	r3,4(sp)
    9a08:	28002726 	beq	r5,zero,9aa8 <__d2b+0x120>
    9a0c:	d809883a 	mov	r4,sp
    9a10:	d9400015 	stw	r5,0(sp)
    9a14:	00093e40 	call	93e4 <__lo0bits>
    9a18:	100d883a 	mov	r6,r2
    9a1c:	10003526 	beq	r2,zero,9af4 <__d2b+0x16c>
    9a20:	d8c00117 	ldw	r3,4(sp)
    9a24:	00800804 	movi	r2,32
    9a28:	1185c83a 	sub	r2,r2,r6
    9a2c:	d9000017 	ldw	r4,0(sp)
    9a30:	1886983a 	sll	r3,r3,r2
    9a34:	1906b03a 	or	r3,r3,r4
    9a38:	90c00515 	stw	r3,20(r18)
    9a3c:	d8c00117 	ldw	r3,4(sp)
    9a40:	1986d83a 	srl	r3,r3,r6
    9a44:	d8c00115 	stw	r3,4(sp)
    9a48:	180b003a 	cmpeq	r5,r3,zero
    9a4c:	00800084 	movi	r2,2
    9a50:	114bc83a 	sub	r5,r2,r5
    9a54:	80c00115 	stw	r3,4(r16)
    9a58:	91400415 	stw	r5,16(r18)
    9a5c:	a0001a1e 	bne	r20,zero,9ac8 <__d2b+0x140>
    9a60:	3545883a 	add	r2,r6,r21
    9a64:	10bef344 	addi	r2,r2,-1075
    9a68:	00c00d44 	movi	r3,53
    9a6c:	b0800015 	stw	r2,0(r22)
    9a70:	1987c83a 	sub	r3,r3,r6
    9a74:	b8c00015 	stw	r3,0(r23)
    9a78:	9005883a 	mov	r2,r18
    9a7c:	dfc00a17 	ldw	ra,40(sp)
    9a80:	ddc00917 	ldw	r23,36(sp)
    9a84:	dd800817 	ldw	r22,32(sp)
    9a88:	dd400717 	ldw	r21,28(sp)
    9a8c:	dd000617 	ldw	r20,24(sp)
    9a90:	dcc00517 	ldw	r19,20(sp)
    9a94:	dc800417 	ldw	r18,16(sp)
    9a98:	dc400317 	ldw	r17,12(sp)
    9a9c:	dc000217 	ldw	r16,8(sp)
    9aa0:	dec00b04 	addi	sp,sp,44
    9aa4:	f800283a 	ret
    9aa8:	d9000104 	addi	r4,sp,4
    9aac:	00093e40 	call	93e4 <__lo0bits>
    9ab0:	11800804 	addi	r6,r2,32
    9ab4:	d8800117 	ldw	r2,4(sp)
    9ab8:	94c00415 	stw	r19,16(r18)
    9abc:	980b883a 	mov	r5,r19
    9ac0:	90800515 	stw	r2,20(r18)
    9ac4:	a03fe626 	beq	r20,zero,9a60 <__d2b+0xd8>
    9ac8:	2945883a 	add	r2,r5,r5
    9acc:	1085883a 	add	r2,r2,r2
    9ad0:	1405883a 	add	r2,r2,r16
    9ad4:	113fff17 	ldw	r4,-4(r2)
    9ad8:	30fef384 	addi	r3,r6,-1074
    9adc:	2820917a 	slli	r16,r5,5
    9ae0:	b0c00015 	stw	r3,0(r22)
    9ae4:	00093740 	call	9374 <__hi0bits>
    9ae8:	80a1c83a 	sub	r16,r16,r2
    9aec:	bc000015 	stw	r16,0(r23)
    9af0:	003fe106 	br	9a78 <__d2b+0xf0>
    9af4:	d8800017 	ldw	r2,0(sp)
    9af8:	90800515 	stw	r2,20(r18)
    9afc:	d8c00117 	ldw	r3,4(sp)
    9b00:	003fd106 	br	9a48 <__d2b+0xc0>

00009b04 <__mdiff>:
    9b04:	defffb04 	addi	sp,sp,-20
    9b08:	dc000015 	stw	r16,0(sp)
    9b0c:	2821883a 	mov	r16,r5
    9b10:	dc800215 	stw	r18,8(sp)
    9b14:	300b883a 	mov	r5,r6
    9b18:	2025883a 	mov	r18,r4
    9b1c:	8009883a 	mov	r4,r16
    9b20:	dc400115 	stw	r17,4(sp)
    9b24:	dfc00415 	stw	ra,16(sp)
    9b28:	dcc00315 	stw	r19,12(sp)
    9b2c:	3023883a 	mov	r17,r6
    9b30:	00094a80 	call	94a8 <__mcmp>
    9b34:	10004226 	beq	r2,zero,9c40 <__mdiff+0x13c>
    9b38:	10005016 	blt	r2,zero,9c7c <__mdiff+0x178>
    9b3c:	0027883a 	mov	r19,zero
    9b40:	81400117 	ldw	r5,4(r16)
    9b44:	9009883a 	mov	r4,r18
    9b48:	00098cc0 	call	98cc <_Balloc>
    9b4c:	1019883a 	mov	r12,r2
    9b50:	82800417 	ldw	r10,16(r16)
    9b54:	88800417 	ldw	r2,16(r17)
    9b58:	81800504 	addi	r6,r16,20
    9b5c:	5287883a 	add	r3,r10,r10
    9b60:	1085883a 	add	r2,r2,r2
    9b64:	18c7883a 	add	r3,r3,r3
    9b68:	1085883a 	add	r2,r2,r2
    9b6c:	8a000504 	addi	r8,r17,20
    9b70:	64c00315 	stw	r19,12(r12)
    9b74:	30db883a 	add	r13,r6,r3
    9b78:	4097883a 	add	r11,r8,r2
    9b7c:	61c00504 	addi	r7,r12,20
    9b80:	0013883a 	mov	r9,zero
    9b84:	31000017 	ldw	r4,0(r6)
    9b88:	41400017 	ldw	r5,0(r8)
    9b8c:	42000104 	addi	r8,r8,4
    9b90:	20bfffcc 	andi	r2,r4,65535
    9b94:	28ffffcc 	andi	r3,r5,65535
    9b98:	10c5c83a 	sub	r2,r2,r3
    9b9c:	1245883a 	add	r2,r2,r9
    9ba0:	2008d43a 	srli	r4,r4,16
    9ba4:	280ad43a 	srli	r5,r5,16
    9ba8:	1007d43a 	srai	r3,r2,16
    9bac:	3880000d 	sth	r2,0(r7)
    9bb0:	2149c83a 	sub	r4,r4,r5
    9bb4:	20c9883a 	add	r4,r4,r3
    9bb8:	3900008d 	sth	r4,2(r7)
    9bbc:	31800104 	addi	r6,r6,4
    9bc0:	39c00104 	addi	r7,r7,4
    9bc4:	2013d43a 	srai	r9,r4,16
    9bc8:	42ffee36 	bltu	r8,r11,9b84 <__mdiff+0x80>
    9bcc:	33400c2e 	bgeu	r6,r13,9c00 <__mdiff+0xfc>
    9bd0:	30800017 	ldw	r2,0(r6)
    9bd4:	31800104 	addi	r6,r6,4
    9bd8:	10ffffcc 	andi	r3,r2,65535
    9bdc:	1a47883a 	add	r3,r3,r9
    9be0:	1004d43a 	srli	r2,r2,16
    9be4:	1809d43a 	srai	r4,r3,16
    9be8:	38c0000d 	sth	r3,0(r7)
    9bec:	1105883a 	add	r2,r2,r4
    9bf0:	3880008d 	sth	r2,2(r7)
    9bf4:	1013d43a 	srai	r9,r2,16
    9bf8:	39c00104 	addi	r7,r7,4
    9bfc:	337ff436 	bltu	r6,r13,9bd0 <__mdiff+0xcc>
    9c00:	38bfff17 	ldw	r2,-4(r7)
    9c04:	38ffff04 	addi	r3,r7,-4
    9c08:	1000041e 	bne	r2,zero,9c1c <__mdiff+0x118>
    9c0c:	18ffff04 	addi	r3,r3,-4
    9c10:	18800017 	ldw	r2,0(r3)
    9c14:	52bfffc4 	addi	r10,r10,-1
    9c18:	103ffc26 	beq	r2,zero,9c0c <__mdiff+0x108>
    9c1c:	6005883a 	mov	r2,r12
    9c20:	62800415 	stw	r10,16(r12)
    9c24:	dfc00417 	ldw	ra,16(sp)
    9c28:	dcc00317 	ldw	r19,12(sp)
    9c2c:	dc800217 	ldw	r18,8(sp)
    9c30:	dc400117 	ldw	r17,4(sp)
    9c34:	dc000017 	ldw	r16,0(sp)
    9c38:	dec00504 	addi	sp,sp,20
    9c3c:	f800283a 	ret
    9c40:	9009883a 	mov	r4,r18
    9c44:	000b883a 	mov	r5,zero
    9c48:	00098cc0 	call	98cc <_Balloc>
    9c4c:	1019883a 	mov	r12,r2
    9c50:	00800044 	movi	r2,1
    9c54:	60800415 	stw	r2,16(r12)
    9c58:	6005883a 	mov	r2,r12
    9c5c:	60000515 	stw	zero,20(r12)
    9c60:	dfc00417 	ldw	ra,16(sp)
    9c64:	dcc00317 	ldw	r19,12(sp)
    9c68:	dc800217 	ldw	r18,8(sp)
    9c6c:	dc400117 	ldw	r17,4(sp)
    9c70:	dc000017 	ldw	r16,0(sp)
    9c74:	dec00504 	addi	sp,sp,20
    9c78:	f800283a 	ret
    9c7c:	880d883a 	mov	r6,r17
    9c80:	04c00044 	movi	r19,1
    9c84:	8023883a 	mov	r17,r16
    9c88:	3021883a 	mov	r16,r6
    9c8c:	003fac06 	br	9b40 <__mdiff+0x3c>

00009c90 <__lshift>:
    9c90:	defff904 	addi	sp,sp,-28
    9c94:	28800417 	ldw	r2,16(r5)
    9c98:	dc000015 	stw	r16,0(sp)
    9c9c:	3021d17a 	srai	r16,r6,5
    9ca0:	28c00217 	ldw	r3,8(r5)
    9ca4:	10800044 	addi	r2,r2,1
    9ca8:	dc400115 	stw	r17,4(sp)
    9cac:	80a3883a 	add	r17,r16,r2
    9cb0:	dd400515 	stw	r21,20(sp)
    9cb4:	dd000415 	stw	r20,16(sp)
    9cb8:	dc800215 	stw	r18,8(sp)
    9cbc:	dfc00615 	stw	ra,24(sp)
    9cc0:	2825883a 	mov	r18,r5
    9cc4:	dcc00315 	stw	r19,12(sp)
    9cc8:	3029883a 	mov	r20,r6
    9ccc:	202b883a 	mov	r21,r4
    9cd0:	29400117 	ldw	r5,4(r5)
    9cd4:	1c40030e 	bge	r3,r17,9ce4 <__lshift+0x54>
    9cd8:	18c7883a 	add	r3,r3,r3
    9cdc:	29400044 	addi	r5,r5,1
    9ce0:	1c7ffd16 	blt	r3,r17,9cd8 <__lshift+0x48>
    9ce4:	a809883a 	mov	r4,r21
    9ce8:	00098cc0 	call	98cc <_Balloc>
    9cec:	1027883a 	mov	r19,r2
    9cf0:	11400504 	addi	r5,r2,20
    9cf4:	0400090e 	bge	zero,r16,9d1c <__lshift+0x8c>
    9cf8:	2805883a 	mov	r2,r5
    9cfc:	0007883a 	mov	r3,zero
    9d00:	18c00044 	addi	r3,r3,1
    9d04:	10000015 	stw	zero,0(r2)
    9d08:	10800104 	addi	r2,r2,4
    9d0c:	80fffc1e 	bne	r16,r3,9d00 <__lshift+0x70>
    9d10:	8405883a 	add	r2,r16,r16
    9d14:	1085883a 	add	r2,r2,r2
    9d18:	288b883a 	add	r5,r5,r2
    9d1c:	90800417 	ldw	r2,16(r18)
    9d20:	91000504 	addi	r4,r18,20
    9d24:	a18007cc 	andi	r6,r20,31
    9d28:	1085883a 	add	r2,r2,r2
    9d2c:	1085883a 	add	r2,r2,r2
    9d30:	208f883a 	add	r7,r4,r2
    9d34:	30001e26 	beq	r6,zero,9db0 <__lshift+0x120>
    9d38:	00800804 	movi	r2,32
    9d3c:	1191c83a 	sub	r8,r2,r6
    9d40:	0007883a 	mov	r3,zero
    9d44:	20800017 	ldw	r2,0(r4)
    9d48:	1184983a 	sll	r2,r2,r6
    9d4c:	1884b03a 	or	r2,r3,r2
    9d50:	28800015 	stw	r2,0(r5)
    9d54:	20c00017 	ldw	r3,0(r4)
    9d58:	21000104 	addi	r4,r4,4
    9d5c:	29400104 	addi	r5,r5,4
    9d60:	1a06d83a 	srl	r3,r3,r8
    9d64:	21fff736 	bltu	r4,r7,9d44 <__lshift+0xb4>
    9d68:	28c00015 	stw	r3,0(r5)
    9d6c:	18000126 	beq	r3,zero,9d74 <__lshift+0xe4>
    9d70:	8c400044 	addi	r17,r17,1
    9d74:	88bfffc4 	addi	r2,r17,-1
    9d78:	98800415 	stw	r2,16(r19)
    9d7c:	a809883a 	mov	r4,r21
    9d80:	900b883a 	mov	r5,r18
    9d84:	000934c0 	call	934c <_Bfree>
    9d88:	9805883a 	mov	r2,r19
    9d8c:	dfc00617 	ldw	ra,24(sp)
    9d90:	dd400517 	ldw	r21,20(sp)
    9d94:	dd000417 	ldw	r20,16(sp)
    9d98:	dcc00317 	ldw	r19,12(sp)
    9d9c:	dc800217 	ldw	r18,8(sp)
    9da0:	dc400117 	ldw	r17,4(sp)
    9da4:	dc000017 	ldw	r16,0(sp)
    9da8:	dec00704 	addi	sp,sp,28
    9dac:	f800283a 	ret
    9db0:	20800017 	ldw	r2,0(r4)
    9db4:	21000104 	addi	r4,r4,4
    9db8:	28800015 	stw	r2,0(r5)
    9dbc:	29400104 	addi	r5,r5,4
    9dc0:	21ffec2e 	bgeu	r4,r7,9d74 <__lshift+0xe4>
    9dc4:	20800017 	ldw	r2,0(r4)
    9dc8:	21000104 	addi	r4,r4,4
    9dcc:	28800015 	stw	r2,0(r5)
    9dd0:	29400104 	addi	r5,r5,4
    9dd4:	21fff636 	bltu	r4,r7,9db0 <__lshift+0x120>
    9dd8:	003fe606 	br	9d74 <__lshift+0xe4>

00009ddc <__multiply>:
    9ddc:	defff904 	addi	sp,sp,-28
    9de0:	dcc00315 	stw	r19,12(sp)
    9de4:	dc800215 	stw	r18,8(sp)
    9de8:	2cc00417 	ldw	r19,16(r5)
    9dec:	34800417 	ldw	r18,16(r6)
    9df0:	dd000415 	stw	r20,16(sp)
    9df4:	dc400115 	stw	r17,4(sp)
    9df8:	dfc00615 	stw	ra,24(sp)
    9dfc:	dd400515 	stw	r21,20(sp)
    9e00:	dc000015 	stw	r16,0(sp)
    9e04:	2823883a 	mov	r17,r5
    9e08:	3029883a 	mov	r20,r6
    9e0c:	9c80040e 	bge	r19,r18,9e20 <__multiply+0x44>
    9e10:	9027883a 	mov	r19,r18
    9e14:	2c800417 	ldw	r18,16(r5)
    9e18:	2829883a 	mov	r20,r5
    9e1c:	3023883a 	mov	r17,r6
    9e20:	88800217 	ldw	r2,8(r17)
    9e24:	9ca1883a 	add	r16,r19,r18
    9e28:	89400117 	ldw	r5,4(r17)
    9e2c:	1400010e 	bge	r2,r16,9e34 <__multiply+0x58>
    9e30:	29400044 	addi	r5,r5,1
    9e34:	00098cc0 	call	98cc <_Balloc>
    9e38:	102b883a 	mov	r21,r2
    9e3c:	8405883a 	add	r2,r16,r16
    9e40:	1085883a 	add	r2,r2,r2
    9e44:	a9000504 	addi	r4,r21,20
    9e48:	209d883a 	add	r14,r4,r2
    9e4c:	2380042e 	bgeu	r4,r14,9e60 <__multiply+0x84>
    9e50:	2005883a 	mov	r2,r4
    9e54:	10000015 	stw	zero,0(r2)
    9e58:	10800104 	addi	r2,r2,4
    9e5c:	13bffd36 	bltu	r2,r14,9e54 <__multiply+0x78>
    9e60:	9485883a 	add	r2,r18,r18
    9e64:	9cc7883a 	add	r3,r19,r19
    9e68:	a1800504 	addi	r6,r20,20
    9e6c:	1085883a 	add	r2,r2,r2
    9e70:	8b400504 	addi	r13,r17,20
    9e74:	18c7883a 	add	r3,r3,r3
    9e78:	309f883a 	add	r15,r6,r2
    9e7c:	68d7883a 	add	r11,r13,r3
    9e80:	33c03b2e 	bgeu	r6,r15,9f70 <__multiply+0x194>
    9e84:	2019883a 	mov	r12,r4
    9e88:	30800017 	ldw	r2,0(r6)
    9e8c:	127fffcc 	andi	r9,r2,65535
    9e90:	48001826 	beq	r9,zero,9ef4 <__multiply+0x118>
    9e94:	6811883a 	mov	r8,r13
    9e98:	600f883a 	mov	r7,r12
    9e9c:	0015883a 	mov	r10,zero
    9ea0:	40c00017 	ldw	r3,0(r8)
    9ea4:	39400017 	ldw	r5,0(r7)
    9ea8:	42000104 	addi	r8,r8,4
    9eac:	193fffcc 	andi	r4,r3,65535
    9eb0:	4909383a 	mul	r4,r9,r4
    9eb4:	1806d43a 	srli	r3,r3,16
    9eb8:	28bfffcc 	andi	r2,r5,65535
    9ebc:	5085883a 	add	r2,r10,r2
    9ec0:	2089883a 	add	r4,r4,r2
    9ec4:	48c7383a 	mul	r3,r9,r3
    9ec8:	280ad43a 	srli	r5,r5,16
    9ecc:	2004d43a 	srli	r2,r4,16
    9ed0:	3900000d 	sth	r4,0(r7)
    9ed4:	1947883a 	add	r3,r3,r5
    9ed8:	10c5883a 	add	r2,r2,r3
    9edc:	3880008d 	sth	r2,2(r7)
    9ee0:	1014d43a 	srli	r10,r2,16
    9ee4:	39c00104 	addi	r7,r7,4
    9ee8:	42ffed36 	bltu	r8,r11,9ea0 <__multiply+0xc4>
    9eec:	3a800015 	stw	r10,0(r7)
    9ef0:	30800017 	ldw	r2,0(r6)
    9ef4:	1012d43a 	srli	r9,r2,16
    9ef8:	48001926 	beq	r9,zero,9f60 <__multiply+0x184>
    9efc:	60800017 	ldw	r2,0(r12)
    9f00:	6811883a 	mov	r8,r13
    9f04:	600f883a 	mov	r7,r12
    9f08:	0015883a 	mov	r10,zero
    9f0c:	100b883a 	mov	r5,r2
    9f10:	41000017 	ldw	r4,0(r8)
    9f14:	2806d43a 	srli	r3,r5,16
    9f18:	3880000d 	sth	r2,0(r7)
    9f1c:	20bfffcc 	andi	r2,r4,65535
    9f20:	4885383a 	mul	r2,r9,r2
    9f24:	50c7883a 	add	r3,r10,r3
    9f28:	2008d43a 	srli	r4,r4,16
    9f2c:	10c5883a 	add	r2,r2,r3
    9f30:	3880008d 	sth	r2,2(r7)
    9f34:	39c00104 	addi	r7,r7,4
    9f38:	39400017 	ldw	r5,0(r7)
    9f3c:	4909383a 	mul	r4,r9,r4
    9f40:	1004d43a 	srli	r2,r2,16
    9f44:	28ffffcc 	andi	r3,r5,65535
    9f48:	20c9883a 	add	r4,r4,r3
    9f4c:	1105883a 	add	r2,r2,r4
    9f50:	42000104 	addi	r8,r8,4
    9f54:	1014d43a 	srli	r10,r2,16
    9f58:	42ffed36 	bltu	r8,r11,9f10 <__multiply+0x134>
    9f5c:	38800015 	stw	r2,0(r7)
    9f60:	31800104 	addi	r6,r6,4
    9f64:	33c0022e 	bgeu	r6,r15,9f70 <__multiply+0x194>
    9f68:	63000104 	addi	r12,r12,4
    9f6c:	003fc606 	br	9e88 <__multiply+0xac>
    9f70:	0400090e 	bge	zero,r16,9f98 <__multiply+0x1bc>
    9f74:	70bfff17 	ldw	r2,-4(r14)
    9f78:	70ffff04 	addi	r3,r14,-4
    9f7c:	10000326 	beq	r2,zero,9f8c <__multiply+0x1b0>
    9f80:	00000506 	br	9f98 <__multiply+0x1bc>
    9f84:	18800017 	ldw	r2,0(r3)
    9f88:	1000031e 	bne	r2,zero,9f98 <__multiply+0x1bc>
    9f8c:	843fffc4 	addi	r16,r16,-1
    9f90:	18ffff04 	addi	r3,r3,-4
    9f94:	803ffb1e 	bne	r16,zero,9f84 <__multiply+0x1a8>
    9f98:	a805883a 	mov	r2,r21
    9f9c:	ac000415 	stw	r16,16(r21)
    9fa0:	dfc00617 	ldw	ra,24(sp)
    9fa4:	dd400517 	ldw	r21,20(sp)
    9fa8:	dd000417 	ldw	r20,16(sp)
    9fac:	dcc00317 	ldw	r19,12(sp)
    9fb0:	dc800217 	ldw	r18,8(sp)
    9fb4:	dc400117 	ldw	r17,4(sp)
    9fb8:	dc000017 	ldw	r16,0(sp)
    9fbc:	dec00704 	addi	sp,sp,28
    9fc0:	f800283a 	ret

00009fc4 <__i2b>:
    9fc4:	defffd04 	addi	sp,sp,-12
    9fc8:	dc000015 	stw	r16,0(sp)
    9fcc:	04000044 	movi	r16,1
    9fd0:	dc800115 	stw	r18,4(sp)
    9fd4:	2825883a 	mov	r18,r5
    9fd8:	800b883a 	mov	r5,r16
    9fdc:	dfc00215 	stw	ra,8(sp)
    9fe0:	00098cc0 	call	98cc <_Balloc>
    9fe4:	14000415 	stw	r16,16(r2)
    9fe8:	14800515 	stw	r18,20(r2)
    9fec:	dfc00217 	ldw	ra,8(sp)
    9ff0:	dc800117 	ldw	r18,4(sp)
    9ff4:	dc000017 	ldw	r16,0(sp)
    9ff8:	dec00304 	addi	sp,sp,12
    9ffc:	f800283a 	ret

0000a000 <__multadd>:
    a000:	defffa04 	addi	sp,sp,-24
    a004:	dc800215 	stw	r18,8(sp)
    a008:	2c800417 	ldw	r18,16(r5)
    a00c:	dd000415 	stw	r20,16(sp)
    a010:	dcc00315 	stw	r19,12(sp)
    a014:	dc000015 	stw	r16,0(sp)
    a018:	dfc00515 	stw	ra,20(sp)
    a01c:	3821883a 	mov	r16,r7
    a020:	dc400115 	stw	r17,4(sp)
    a024:	2827883a 	mov	r19,r5
    a028:	2029883a 	mov	r20,r4
    a02c:	2a000504 	addi	r8,r5,20
    a030:	000f883a 	mov	r7,zero
    a034:	40800017 	ldw	r2,0(r8)
    a038:	39c00044 	addi	r7,r7,1
    a03c:	10ffffcc 	andi	r3,r2,65535
    a040:	1987383a 	mul	r3,r3,r6
    a044:	1004d43a 	srli	r2,r2,16
    a048:	1c07883a 	add	r3,r3,r16
    a04c:	180ad43a 	srli	r5,r3,16
    a050:	1185383a 	mul	r2,r2,r6
    a054:	18ffffcc 	andi	r3,r3,65535
    a058:	1145883a 	add	r2,r2,r5
    a05c:	1008943a 	slli	r4,r2,16
    a060:	1020d43a 	srli	r16,r2,16
    a064:	20c9883a 	add	r4,r4,r3
    a068:	41000015 	stw	r4,0(r8)
    a06c:	42000104 	addi	r8,r8,4
    a070:	3cbff016 	blt	r7,r18,a034 <__multadd+0x34>
    a074:	80000826 	beq	r16,zero,a098 <__multadd+0x98>
    a078:	98800217 	ldw	r2,8(r19)
    a07c:	90800f0e 	bge	r18,r2,a0bc <__multadd+0xbc>
    a080:	9485883a 	add	r2,r18,r18
    a084:	1085883a 	add	r2,r2,r2
    a088:	14c5883a 	add	r2,r2,r19
    a08c:	90c00044 	addi	r3,r18,1
    a090:	14000515 	stw	r16,20(r2)
    a094:	98c00415 	stw	r3,16(r19)
    a098:	9805883a 	mov	r2,r19
    a09c:	dfc00517 	ldw	ra,20(sp)
    a0a0:	dd000417 	ldw	r20,16(sp)
    a0a4:	dcc00317 	ldw	r19,12(sp)
    a0a8:	dc800217 	ldw	r18,8(sp)
    a0ac:	dc400117 	ldw	r17,4(sp)
    a0b0:	dc000017 	ldw	r16,0(sp)
    a0b4:	dec00604 	addi	sp,sp,24
    a0b8:	f800283a 	ret
    a0bc:	99400117 	ldw	r5,4(r19)
    a0c0:	a009883a 	mov	r4,r20
    a0c4:	29400044 	addi	r5,r5,1
    a0c8:	00098cc0 	call	98cc <_Balloc>
    a0cc:	99800417 	ldw	r6,16(r19)
    a0d0:	99400304 	addi	r5,r19,12
    a0d4:	11000304 	addi	r4,r2,12
    a0d8:	318d883a 	add	r6,r6,r6
    a0dc:	318d883a 	add	r6,r6,r6
    a0e0:	31800204 	addi	r6,r6,8
    a0e4:	1023883a 	mov	r17,r2
    a0e8:	0003ec40 	call	3ec4 <memcpy>
    a0ec:	980b883a 	mov	r5,r19
    a0f0:	a009883a 	mov	r4,r20
    a0f4:	000934c0 	call	934c <_Bfree>
    a0f8:	8827883a 	mov	r19,r17
    a0fc:	003fe006 	br	a080 <__multadd+0x80>

0000a100 <__pow5mult>:
    a100:	defffa04 	addi	sp,sp,-24
    a104:	308000cc 	andi	r2,r6,3
    a108:	dd000415 	stw	r20,16(sp)
    a10c:	dcc00315 	stw	r19,12(sp)
    a110:	dc000015 	stw	r16,0(sp)
    a114:	dfc00515 	stw	ra,20(sp)
    a118:	dc800215 	stw	r18,8(sp)
    a11c:	dc400115 	stw	r17,4(sp)
    a120:	3021883a 	mov	r16,r6
    a124:	2027883a 	mov	r19,r4
    a128:	2829883a 	mov	r20,r5
    a12c:	10002b1e 	bne	r2,zero,a1dc <__pow5mult+0xdc>
    a130:	8025d0ba 	srai	r18,r16,2
    a134:	90001b26 	beq	r18,zero,a1a4 <__pow5mult+0xa4>
    a138:	9c001217 	ldw	r16,72(r19)
    a13c:	8000081e 	bne	r16,zero,a160 <__pow5mult+0x60>
    a140:	00003006 	br	a204 <__pow5mult+0x104>
    a144:	800b883a 	mov	r5,r16
    a148:	800d883a 	mov	r6,r16
    a14c:	9809883a 	mov	r4,r19
    a150:	90001426 	beq	r18,zero,a1a4 <__pow5mult+0xa4>
    a154:	80800017 	ldw	r2,0(r16)
    a158:	10001b26 	beq	r2,zero,a1c8 <__pow5mult+0xc8>
    a15c:	1021883a 	mov	r16,r2
    a160:	9080004c 	andi	r2,r18,1
    a164:	1005003a 	cmpeq	r2,r2,zero
    a168:	9025d07a 	srai	r18,r18,1
    a16c:	800d883a 	mov	r6,r16
    a170:	9809883a 	mov	r4,r19
    a174:	a00b883a 	mov	r5,r20
    a178:	103ff21e 	bne	r2,zero,a144 <__pow5mult+0x44>
    a17c:	0009ddc0 	call	9ddc <__multiply>
    a180:	a00b883a 	mov	r5,r20
    a184:	9809883a 	mov	r4,r19
    a188:	1023883a 	mov	r17,r2
    a18c:	000934c0 	call	934c <_Bfree>
    a190:	8829883a 	mov	r20,r17
    a194:	800b883a 	mov	r5,r16
    a198:	800d883a 	mov	r6,r16
    a19c:	9809883a 	mov	r4,r19
    a1a0:	903fec1e 	bne	r18,zero,a154 <__pow5mult+0x54>
    a1a4:	a005883a 	mov	r2,r20
    a1a8:	dfc00517 	ldw	ra,20(sp)
    a1ac:	dd000417 	ldw	r20,16(sp)
    a1b0:	dcc00317 	ldw	r19,12(sp)
    a1b4:	dc800217 	ldw	r18,8(sp)
    a1b8:	dc400117 	ldw	r17,4(sp)
    a1bc:	dc000017 	ldw	r16,0(sp)
    a1c0:	dec00604 	addi	sp,sp,24
    a1c4:	f800283a 	ret
    a1c8:	0009ddc0 	call	9ddc <__multiply>
    a1cc:	80800015 	stw	r2,0(r16)
    a1d0:	1021883a 	mov	r16,r2
    a1d4:	10000015 	stw	zero,0(r2)
    a1d8:	003fe106 	br	a160 <__pow5mult+0x60>
    a1dc:	1085883a 	add	r2,r2,r2
    a1e0:	00c00074 	movhi	r3,1
    a1e4:	18fec904 	addi	r3,r3,-1244
    a1e8:	1085883a 	add	r2,r2,r2
    a1ec:	10c5883a 	add	r2,r2,r3
    a1f0:	11bfff17 	ldw	r6,-4(r2)
    a1f4:	000f883a 	mov	r7,zero
    a1f8:	000a0000 	call	a000 <__multadd>
    a1fc:	1029883a 	mov	r20,r2
    a200:	003fcb06 	br	a130 <__pow5mult+0x30>
    a204:	9809883a 	mov	r4,r19
    a208:	01409c44 	movi	r5,625
    a20c:	0009fc40 	call	9fc4 <__i2b>
    a210:	98801215 	stw	r2,72(r19)
    a214:	1021883a 	mov	r16,r2
    a218:	10000015 	stw	zero,0(r2)
    a21c:	003fd006 	br	a160 <__pow5mult+0x60>

0000a220 <__s2b>:
    a220:	defff904 	addi	sp,sp,-28
    a224:	dcc00315 	stw	r19,12(sp)
    a228:	dc800215 	stw	r18,8(sp)
    a22c:	2827883a 	mov	r19,r5
    a230:	2025883a 	mov	r18,r4
    a234:	01400244 	movi	r5,9
    a238:	39000204 	addi	r4,r7,8
    a23c:	dd000415 	stw	r20,16(sp)
    a240:	dc400115 	stw	r17,4(sp)
    a244:	dfc00615 	stw	ra,24(sp)
    a248:	dd400515 	stw	r21,20(sp)
    a24c:	dc000015 	stw	r16,0(sp)
    a250:	3829883a 	mov	r20,r7
    a254:	3023883a 	mov	r17,r6
    a258:	000bf180 	call	bf18 <__divsi3>
    a25c:	00c00044 	movi	r3,1
    a260:	1880350e 	bge	r3,r2,a338 <__s2b+0x118>
    a264:	000b883a 	mov	r5,zero
    a268:	18c7883a 	add	r3,r3,r3
    a26c:	29400044 	addi	r5,r5,1
    a270:	18bffd16 	blt	r3,r2,a268 <__s2b+0x48>
    a274:	9009883a 	mov	r4,r18
    a278:	00098cc0 	call	98cc <_Balloc>
    a27c:	1011883a 	mov	r8,r2
    a280:	d8800717 	ldw	r2,28(sp)
    a284:	00c00044 	movi	r3,1
    a288:	01800244 	movi	r6,9
    a28c:	40800515 	stw	r2,20(r8)
    a290:	40c00415 	stw	r3,16(r8)
    a294:	3440260e 	bge	r6,r17,a330 <__s2b+0x110>
    a298:	3021883a 	mov	r16,r6
    a29c:	99ab883a 	add	r21,r19,r6
    a2a0:	9c05883a 	add	r2,r19,r16
    a2a4:	11c00007 	ldb	r7,0(r2)
    a2a8:	400b883a 	mov	r5,r8
    a2ac:	9009883a 	mov	r4,r18
    a2b0:	39fff404 	addi	r7,r7,-48
    a2b4:	01800284 	movi	r6,10
    a2b8:	000a0000 	call	a000 <__multadd>
    a2bc:	84000044 	addi	r16,r16,1
    a2c0:	1011883a 	mov	r8,r2
    a2c4:	8c3ff61e 	bne	r17,r16,a2a0 <__s2b+0x80>
    a2c8:	ac45883a 	add	r2,r21,r17
    a2cc:	117ffe04 	addi	r5,r2,-8
    a2d0:	880d883a 	mov	r6,r17
    a2d4:	35000c0e 	bge	r6,r20,a308 <__s2b+0xe8>
    a2d8:	a185c83a 	sub	r2,r20,r6
    a2dc:	2821883a 	mov	r16,r5
    a2e0:	28a3883a 	add	r17,r5,r2
    a2e4:	81c00007 	ldb	r7,0(r16)
    a2e8:	400b883a 	mov	r5,r8
    a2ec:	9009883a 	mov	r4,r18
    a2f0:	39fff404 	addi	r7,r7,-48
    a2f4:	01800284 	movi	r6,10
    a2f8:	000a0000 	call	a000 <__multadd>
    a2fc:	84000044 	addi	r16,r16,1
    a300:	1011883a 	mov	r8,r2
    a304:	847ff71e 	bne	r16,r17,a2e4 <__s2b+0xc4>
    a308:	4005883a 	mov	r2,r8
    a30c:	dfc00617 	ldw	ra,24(sp)
    a310:	dd400517 	ldw	r21,20(sp)
    a314:	dd000417 	ldw	r20,16(sp)
    a318:	dcc00317 	ldw	r19,12(sp)
    a31c:	dc800217 	ldw	r18,8(sp)
    a320:	dc400117 	ldw	r17,4(sp)
    a324:	dc000017 	ldw	r16,0(sp)
    a328:	dec00704 	addi	sp,sp,28
    a32c:	f800283a 	ret
    a330:	99400284 	addi	r5,r19,10
    a334:	003fe706 	br	a2d4 <__s2b+0xb4>
    a338:	000b883a 	mov	r5,zero
    a33c:	003fcd06 	br	a274 <__s2b+0x54>

0000a340 <_realloc_r>:
    a340:	defff404 	addi	sp,sp,-48
    a344:	dd800815 	stw	r22,32(sp)
    a348:	dc800415 	stw	r18,16(sp)
    a34c:	dc400315 	stw	r17,12(sp)
    a350:	dfc00b15 	stw	ra,44(sp)
    a354:	df000a15 	stw	fp,40(sp)
    a358:	ddc00915 	stw	r23,36(sp)
    a35c:	dd400715 	stw	r21,28(sp)
    a360:	dd000615 	stw	r20,24(sp)
    a364:	dcc00515 	stw	r19,20(sp)
    a368:	dc000215 	stw	r16,8(sp)
    a36c:	2825883a 	mov	r18,r5
    a370:	3023883a 	mov	r17,r6
    a374:	202d883a 	mov	r22,r4
    a378:	2800c926 	beq	r5,zero,a6a0 <_realloc_r+0x360>
    a37c:	000c66c0 	call	c66c <__malloc_lock>
    a380:	943ffe04 	addi	r16,r18,-8
    a384:	88c002c4 	addi	r3,r17,11
    a388:	00800584 	movi	r2,22
    a38c:	82000117 	ldw	r8,4(r16)
    a390:	10c01b2e 	bgeu	r2,r3,a400 <_realloc_r+0xc0>
    a394:	00bffe04 	movi	r2,-8
    a398:	188e703a 	and	r7,r3,r2
    a39c:	3839883a 	mov	fp,r7
    a3a0:	38001a16 	blt	r7,zero,a40c <_realloc_r+0xcc>
    a3a4:	e4401936 	bltu	fp,r17,a40c <_realloc_r+0xcc>
    a3a8:	013fff04 	movi	r4,-4
    a3ac:	4126703a 	and	r19,r8,r4
    a3b0:	99c02616 	blt	r19,r7,a44c <_realloc_r+0x10c>
    a3b4:	802b883a 	mov	r21,r16
    a3b8:	9829883a 	mov	r20,r19
    a3bc:	84000204 	addi	r16,r16,8
    a3c0:	a80f883a 	mov	r7,r21
    a3c4:	a70dc83a 	sub	r6,r20,fp
    a3c8:	008003c4 	movi	r2,15
    a3cc:	1180c136 	bltu	r2,r6,a6d4 <_realloc_r+0x394>
    a3d0:	38800117 	ldw	r2,4(r7)
    a3d4:	a549883a 	add	r4,r20,r21
    a3d8:	1080004c 	andi	r2,r2,1
    a3dc:	a084b03a 	or	r2,r20,r2
    a3e0:	38800115 	stw	r2,4(r7)
    a3e4:	20c00117 	ldw	r3,4(r4)
    a3e8:	18c00054 	ori	r3,r3,1
    a3ec:	20c00115 	stw	r3,4(r4)
    a3f0:	b009883a 	mov	r4,r22
    a3f4:	000c68c0 	call	c68c <__malloc_unlock>
    a3f8:	8023883a 	mov	r17,r16
    a3fc:	00000606 	br	a418 <_realloc_r+0xd8>
    a400:	01c00404 	movi	r7,16
    a404:	3839883a 	mov	fp,r7
    a408:	e47fe72e 	bgeu	fp,r17,a3a8 <_realloc_r+0x68>
    a40c:	00800304 	movi	r2,12
    a410:	0023883a 	mov	r17,zero
    a414:	b0800015 	stw	r2,0(r22)
    a418:	8805883a 	mov	r2,r17
    a41c:	dfc00b17 	ldw	ra,44(sp)
    a420:	df000a17 	ldw	fp,40(sp)
    a424:	ddc00917 	ldw	r23,36(sp)
    a428:	dd800817 	ldw	r22,32(sp)
    a42c:	dd400717 	ldw	r21,28(sp)
    a430:	dd000617 	ldw	r20,24(sp)
    a434:	dcc00517 	ldw	r19,20(sp)
    a438:	dc800417 	ldw	r18,16(sp)
    a43c:	dc400317 	ldw	r17,12(sp)
    a440:	dc000217 	ldw	r16,8(sp)
    a444:	dec00c04 	addi	sp,sp,48
    a448:	f800283a 	ret
    a44c:	00800074 	movhi	r2,1
    a450:	10806404 	addi	r2,r2,400
    a454:	12400217 	ldw	r9,8(r2)
    a458:	84cd883a 	add	r6,r16,r19
    a45c:	802b883a 	mov	r21,r16
    a460:	3240b926 	beq	r6,r9,a748 <_realloc_r+0x408>
    a464:	31400117 	ldw	r5,4(r6)
    a468:	00bfff84 	movi	r2,-2
    a46c:	2884703a 	and	r2,r5,r2
    a470:	1185883a 	add	r2,r2,r6
    a474:	10c00117 	ldw	r3,4(r2)
    a478:	18c0004c 	andi	r3,r3,1
    a47c:	1807003a 	cmpeq	r3,r3,zero
    a480:	1800a326 	beq	r3,zero,a710 <_realloc_r+0x3d0>
    a484:	2908703a 	and	r4,r5,r4
    a488:	9929883a 	add	r20,r19,r4
    a48c:	a1c0a30e 	bge	r20,r7,a71c <_realloc_r+0x3dc>
    a490:	4080004c 	andi	r2,r8,1
    a494:	1000551e 	bne	r2,zero,a5ec <_realloc_r+0x2ac>
    a498:	80800017 	ldw	r2,0(r16)
    a49c:	80afc83a 	sub	r23,r16,r2
    a4a0:	b8c00117 	ldw	r3,4(r23)
    a4a4:	00bfff04 	movi	r2,-4
    a4a8:	1884703a 	and	r2,r3,r2
    a4ac:	30002e26 	beq	r6,zero,a568 <_realloc_r+0x228>
    a4b0:	3240b926 	beq	r6,r9,a798 <_realloc_r+0x458>
    a4b4:	98a9883a 	add	r20,r19,r2
    a4b8:	2509883a 	add	r4,r4,r20
    a4bc:	d9000015 	stw	r4,0(sp)
    a4c0:	21c02a16 	blt	r4,r7,a56c <_realloc_r+0x22c>
    a4c4:	30800317 	ldw	r2,12(r6)
    a4c8:	30c00217 	ldw	r3,8(r6)
    a4cc:	01400904 	movi	r5,36
    a4d0:	99bfff04 	addi	r6,r19,-4
    a4d4:	18800315 	stw	r2,12(r3)
    a4d8:	10c00215 	stw	r3,8(r2)
    a4dc:	b9000317 	ldw	r4,12(r23)
    a4e0:	b8800217 	ldw	r2,8(r23)
    a4e4:	b82b883a 	mov	r21,r23
    a4e8:	bc000204 	addi	r16,r23,8
    a4ec:	20800215 	stw	r2,8(r4)
    a4f0:	11000315 	stw	r4,12(r2)
    a4f4:	2980e436 	bltu	r5,r6,a888 <_realloc_r+0x548>
    a4f8:	008004c4 	movi	r2,19
    a4fc:	9009883a 	mov	r4,r18
    a500:	8011883a 	mov	r8,r16
    a504:	11800f2e 	bgeu	r2,r6,a544 <_realloc_r+0x204>
    a508:	90800017 	ldw	r2,0(r18)
    a50c:	ba000404 	addi	r8,r23,16
    a510:	91000204 	addi	r4,r18,8
    a514:	b8800215 	stw	r2,8(r23)
    a518:	90c00117 	ldw	r3,4(r18)
    a51c:	008006c4 	movi	r2,27
    a520:	b8c00315 	stw	r3,12(r23)
    a524:	1180072e 	bgeu	r2,r6,a544 <_realloc_r+0x204>
    a528:	90c00217 	ldw	r3,8(r18)
    a52c:	ba000604 	addi	r8,r23,24
    a530:	91000404 	addi	r4,r18,16
    a534:	b8c00415 	stw	r3,16(r23)
    a538:	90800317 	ldw	r2,12(r18)
    a53c:	b8800515 	stw	r2,20(r23)
    a540:	3140e726 	beq	r6,r5,a8e0 <_realloc_r+0x5a0>
    a544:	20800017 	ldw	r2,0(r4)
    a548:	dd000017 	ldw	r20,0(sp)
    a54c:	b80f883a 	mov	r7,r23
    a550:	40800015 	stw	r2,0(r8)
    a554:	20c00117 	ldw	r3,4(r4)
    a558:	40c00115 	stw	r3,4(r8)
    a55c:	20800217 	ldw	r2,8(r4)
    a560:	40800215 	stw	r2,8(r8)
    a564:	003f9706 	br	a3c4 <_realloc_r+0x84>
    a568:	98a9883a 	add	r20,r19,r2
    a56c:	a1c01f16 	blt	r20,r7,a5ec <_realloc_r+0x2ac>
    a570:	b8c00317 	ldw	r3,12(r23)
    a574:	b8800217 	ldw	r2,8(r23)
    a578:	99bfff04 	addi	r6,r19,-4
    a57c:	01400904 	movi	r5,36
    a580:	b82b883a 	mov	r21,r23
    a584:	18800215 	stw	r2,8(r3)
    a588:	10c00315 	stw	r3,12(r2)
    a58c:	bc000204 	addi	r16,r23,8
    a590:	2980c336 	bltu	r5,r6,a8a0 <_realloc_r+0x560>
    a594:	008004c4 	movi	r2,19
    a598:	9009883a 	mov	r4,r18
    a59c:	8011883a 	mov	r8,r16
    a5a0:	11800f2e 	bgeu	r2,r6,a5e0 <_realloc_r+0x2a0>
    a5a4:	90800017 	ldw	r2,0(r18)
    a5a8:	ba000404 	addi	r8,r23,16
    a5ac:	91000204 	addi	r4,r18,8
    a5b0:	b8800215 	stw	r2,8(r23)
    a5b4:	90c00117 	ldw	r3,4(r18)
    a5b8:	008006c4 	movi	r2,27
    a5bc:	b8c00315 	stw	r3,12(r23)
    a5c0:	1180072e 	bgeu	r2,r6,a5e0 <_realloc_r+0x2a0>
    a5c4:	90c00217 	ldw	r3,8(r18)
    a5c8:	ba000604 	addi	r8,r23,24
    a5cc:	91000404 	addi	r4,r18,16
    a5d0:	b8c00415 	stw	r3,16(r23)
    a5d4:	90800317 	ldw	r2,12(r18)
    a5d8:	b8800515 	stw	r2,20(r23)
    a5dc:	3140c726 	beq	r6,r5,a8fc <_realloc_r+0x5bc>
    a5e0:	20800017 	ldw	r2,0(r4)
    a5e4:	b80f883a 	mov	r7,r23
    a5e8:	003fd906 	br	a550 <_realloc_r+0x210>
    a5ec:	880b883a 	mov	r5,r17
    a5f0:	b009883a 	mov	r4,r22
    a5f4:	00089b00 	call	89b0 <_malloc_r>
    a5f8:	1023883a 	mov	r17,r2
    a5fc:	10002526 	beq	r2,zero,a694 <_realloc_r+0x354>
    a600:	80800117 	ldw	r2,4(r16)
    a604:	00ffff84 	movi	r3,-2
    a608:	893ffe04 	addi	r4,r17,-8
    a60c:	10c4703a 	and	r2,r2,r3
    a610:	8085883a 	add	r2,r16,r2
    a614:	20809526 	beq	r4,r2,a86c <_realloc_r+0x52c>
    a618:	99bfff04 	addi	r6,r19,-4
    a61c:	01c00904 	movi	r7,36
    a620:	39804536 	bltu	r7,r6,a738 <_realloc_r+0x3f8>
    a624:	008004c4 	movi	r2,19
    a628:	9009883a 	mov	r4,r18
    a62c:	880b883a 	mov	r5,r17
    a630:	11800f2e 	bgeu	r2,r6,a670 <_realloc_r+0x330>
    a634:	90800017 	ldw	r2,0(r18)
    a638:	89400204 	addi	r5,r17,8
    a63c:	91000204 	addi	r4,r18,8
    a640:	88800015 	stw	r2,0(r17)
    a644:	90c00117 	ldw	r3,4(r18)
    a648:	008006c4 	movi	r2,27
    a64c:	88c00115 	stw	r3,4(r17)
    a650:	1180072e 	bgeu	r2,r6,a670 <_realloc_r+0x330>
    a654:	90c00217 	ldw	r3,8(r18)
    a658:	89400404 	addi	r5,r17,16
    a65c:	91000404 	addi	r4,r18,16
    a660:	88c00215 	stw	r3,8(r17)
    a664:	90800317 	ldw	r2,12(r18)
    a668:	88800315 	stw	r2,12(r17)
    a66c:	31c09126 	beq	r6,r7,a8b4 <_realloc_r+0x574>
    a670:	20800017 	ldw	r2,0(r4)
    a674:	28800015 	stw	r2,0(r5)
    a678:	20c00117 	ldw	r3,4(r4)
    a67c:	28c00115 	stw	r3,4(r5)
    a680:	20800217 	ldw	r2,8(r4)
    a684:	28800215 	stw	r2,8(r5)
    a688:	900b883a 	mov	r5,r18
    a68c:	b009883a 	mov	r4,r22
    a690:	0007e280 	call	7e28 <_free_r>
    a694:	b009883a 	mov	r4,r22
    a698:	000c68c0 	call	c68c <__malloc_unlock>
    a69c:	003f5e06 	br	a418 <_realloc_r+0xd8>
    a6a0:	300b883a 	mov	r5,r6
    a6a4:	dfc00b17 	ldw	ra,44(sp)
    a6a8:	df000a17 	ldw	fp,40(sp)
    a6ac:	ddc00917 	ldw	r23,36(sp)
    a6b0:	dd800817 	ldw	r22,32(sp)
    a6b4:	dd400717 	ldw	r21,28(sp)
    a6b8:	dd000617 	ldw	r20,24(sp)
    a6bc:	dcc00517 	ldw	r19,20(sp)
    a6c0:	dc800417 	ldw	r18,16(sp)
    a6c4:	dc400317 	ldw	r17,12(sp)
    a6c8:	dc000217 	ldw	r16,8(sp)
    a6cc:	dec00c04 	addi	sp,sp,48
    a6d0:	00089b01 	jmpi	89b0 <_malloc_r>
    a6d4:	38800117 	ldw	r2,4(r7)
    a6d8:	e54b883a 	add	r5,fp,r21
    a6dc:	31000054 	ori	r4,r6,1
    a6e0:	1080004c 	andi	r2,r2,1
    a6e4:	1704b03a 	or	r2,r2,fp
    a6e8:	38800115 	stw	r2,4(r7)
    a6ec:	29000115 	stw	r4,4(r5)
    a6f0:	2987883a 	add	r3,r5,r6
    a6f4:	18800117 	ldw	r2,4(r3)
    a6f8:	29400204 	addi	r5,r5,8
    a6fc:	b009883a 	mov	r4,r22
    a700:	10800054 	ori	r2,r2,1
    a704:	18800115 	stw	r2,4(r3)
    a708:	0007e280 	call	7e28 <_free_r>
    a70c:	003f3806 	br	a3f0 <_realloc_r+0xb0>
    a710:	000d883a 	mov	r6,zero
    a714:	0009883a 	mov	r4,zero
    a718:	003f5d06 	br	a490 <_realloc_r+0x150>
    a71c:	30c00217 	ldw	r3,8(r6)
    a720:	30800317 	ldw	r2,12(r6)
    a724:	800f883a 	mov	r7,r16
    a728:	84000204 	addi	r16,r16,8
    a72c:	10c00215 	stw	r3,8(r2)
    a730:	18800315 	stw	r2,12(r3)
    a734:	003f2306 	br	a3c4 <_realloc_r+0x84>
    a738:	8809883a 	mov	r4,r17
    a73c:	900b883a 	mov	r5,r18
    a740:	00091d40 	call	91d4 <memmove>
    a744:	003fd006 	br	a688 <_realloc_r+0x348>
    a748:	30800117 	ldw	r2,4(r6)
    a74c:	e0c00404 	addi	r3,fp,16
    a750:	1108703a 	and	r4,r2,r4
    a754:	9905883a 	add	r2,r19,r4
    a758:	10ff4d16 	blt	r2,r3,a490 <_realloc_r+0x150>
    a75c:	1705c83a 	sub	r2,r2,fp
    a760:	870b883a 	add	r5,r16,fp
    a764:	10800054 	ori	r2,r2,1
    a768:	28800115 	stw	r2,4(r5)
    a76c:	80c00117 	ldw	r3,4(r16)
    a770:	00800074 	movhi	r2,1
    a774:	10806404 	addi	r2,r2,400
    a778:	b009883a 	mov	r4,r22
    a77c:	18c0004c 	andi	r3,r3,1
    a780:	e0c6b03a 	or	r3,fp,r3
    a784:	11400215 	stw	r5,8(r2)
    a788:	80c00115 	stw	r3,4(r16)
    a78c:	000c68c0 	call	c68c <__malloc_unlock>
    a790:	84400204 	addi	r17,r16,8
    a794:	003f2006 	br	a418 <_realloc_r+0xd8>
    a798:	98a9883a 	add	r20,r19,r2
    a79c:	2509883a 	add	r4,r4,r20
    a7a0:	e0800404 	addi	r2,fp,16
    a7a4:	d9000115 	stw	r4,4(sp)
    a7a8:	20bf7016 	blt	r4,r2,a56c <_realloc_r+0x22c>
    a7ac:	b8c00317 	ldw	r3,12(r23)
    a7b0:	b8800217 	ldw	r2,8(r23)
    a7b4:	99bfff04 	addi	r6,r19,-4
    a7b8:	01400904 	movi	r5,36
    a7bc:	18800215 	stw	r2,8(r3)
    a7c0:	10c00315 	stw	r3,12(r2)
    a7c4:	bc400204 	addi	r17,r23,8
    a7c8:	29804136 	bltu	r5,r6,a8d0 <_realloc_r+0x590>
    a7cc:	008004c4 	movi	r2,19
    a7d0:	9009883a 	mov	r4,r18
    a7d4:	880f883a 	mov	r7,r17
    a7d8:	11800f2e 	bgeu	r2,r6,a818 <_realloc_r+0x4d8>
    a7dc:	90800017 	ldw	r2,0(r18)
    a7e0:	b9c00404 	addi	r7,r23,16
    a7e4:	91000204 	addi	r4,r18,8
    a7e8:	b8800215 	stw	r2,8(r23)
    a7ec:	90c00117 	ldw	r3,4(r18)
    a7f0:	008006c4 	movi	r2,27
    a7f4:	b8c00315 	stw	r3,12(r23)
    a7f8:	1180072e 	bgeu	r2,r6,a818 <_realloc_r+0x4d8>
    a7fc:	90c00217 	ldw	r3,8(r18)
    a800:	b9c00604 	addi	r7,r23,24
    a804:	91000404 	addi	r4,r18,16
    a808:	b8c00415 	stw	r3,16(r23)
    a80c:	90800317 	ldw	r2,12(r18)
    a810:	b8800515 	stw	r2,20(r23)
    a814:	31404026 	beq	r6,r5,a918 <_realloc_r+0x5d8>
    a818:	20800017 	ldw	r2,0(r4)
    a81c:	38800015 	stw	r2,0(r7)
    a820:	20c00117 	ldw	r3,4(r4)
    a824:	38c00115 	stw	r3,4(r7)
    a828:	20800217 	ldw	r2,8(r4)
    a82c:	38800215 	stw	r2,8(r7)
    a830:	d8c00117 	ldw	r3,4(sp)
    a834:	bf0b883a 	add	r5,r23,fp
    a838:	b009883a 	mov	r4,r22
    a83c:	1f05c83a 	sub	r2,r3,fp
    a840:	10800054 	ori	r2,r2,1
    a844:	28800115 	stw	r2,4(r5)
    a848:	b8c00117 	ldw	r3,4(r23)
    a84c:	00800074 	movhi	r2,1
    a850:	10806404 	addi	r2,r2,400
    a854:	11400215 	stw	r5,8(r2)
    a858:	18c0004c 	andi	r3,r3,1
    a85c:	e0c6b03a 	or	r3,fp,r3
    a860:	b8c00115 	stw	r3,4(r23)
    a864:	000c68c0 	call	c68c <__malloc_unlock>
    a868:	003eeb06 	br	a418 <_realloc_r+0xd8>
    a86c:	20800117 	ldw	r2,4(r4)
    a870:	00ffff04 	movi	r3,-4
    a874:	800f883a 	mov	r7,r16
    a878:	10c4703a 	and	r2,r2,r3
    a87c:	98a9883a 	add	r20,r19,r2
    a880:	84000204 	addi	r16,r16,8
    a884:	003ecf06 	br	a3c4 <_realloc_r+0x84>
    a888:	900b883a 	mov	r5,r18
    a88c:	8009883a 	mov	r4,r16
    a890:	00091d40 	call	91d4 <memmove>
    a894:	dd000017 	ldw	r20,0(sp)
    a898:	b80f883a 	mov	r7,r23
    a89c:	003ec906 	br	a3c4 <_realloc_r+0x84>
    a8a0:	900b883a 	mov	r5,r18
    a8a4:	8009883a 	mov	r4,r16
    a8a8:	00091d40 	call	91d4 <memmove>
    a8ac:	b80f883a 	mov	r7,r23
    a8b0:	003ec406 	br	a3c4 <_realloc_r+0x84>
    a8b4:	90c00417 	ldw	r3,16(r18)
    a8b8:	89400604 	addi	r5,r17,24
    a8bc:	91000604 	addi	r4,r18,24
    a8c0:	88c00415 	stw	r3,16(r17)
    a8c4:	90800517 	ldw	r2,20(r18)
    a8c8:	88800515 	stw	r2,20(r17)
    a8cc:	003f6806 	br	a670 <_realloc_r+0x330>
    a8d0:	900b883a 	mov	r5,r18
    a8d4:	8809883a 	mov	r4,r17
    a8d8:	00091d40 	call	91d4 <memmove>
    a8dc:	003fd406 	br	a830 <_realloc_r+0x4f0>
    a8e0:	90c00417 	ldw	r3,16(r18)
    a8e4:	91000604 	addi	r4,r18,24
    a8e8:	ba000804 	addi	r8,r23,32
    a8ec:	b8c00615 	stw	r3,24(r23)
    a8f0:	90800517 	ldw	r2,20(r18)
    a8f4:	b8800715 	stw	r2,28(r23)
    a8f8:	003f1206 	br	a544 <_realloc_r+0x204>
    a8fc:	90c00417 	ldw	r3,16(r18)
    a900:	91000604 	addi	r4,r18,24
    a904:	ba000804 	addi	r8,r23,32
    a908:	b8c00615 	stw	r3,24(r23)
    a90c:	90800517 	ldw	r2,20(r18)
    a910:	b8800715 	stw	r2,28(r23)
    a914:	003f3206 	br	a5e0 <_realloc_r+0x2a0>
    a918:	90c00417 	ldw	r3,16(r18)
    a91c:	91000604 	addi	r4,r18,24
    a920:	b9c00804 	addi	r7,r23,32
    a924:	b8c00615 	stw	r3,24(r23)
    a928:	90800517 	ldw	r2,20(r18)
    a92c:	b8800715 	stw	r2,28(r23)
    a930:	003fb906 	br	a818 <_realloc_r+0x4d8>

0000a934 <__isinfd>:
    a934:	200d883a 	mov	r6,r4
    a938:	0109c83a 	sub	r4,zero,r4
    a93c:	2188b03a 	or	r4,r4,r6
    a940:	2008d7fa 	srli	r4,r4,31
    a944:	00a00034 	movhi	r2,32768
    a948:	10bfffc4 	addi	r2,r2,-1
    a94c:	1144703a 	and	r2,r2,r5
    a950:	2088b03a 	or	r4,r4,r2
    a954:	009ffc34 	movhi	r2,32752
    a958:	1105c83a 	sub	r2,r2,r4
    a95c:	0087c83a 	sub	r3,zero,r2
    a960:	10c4b03a 	or	r2,r2,r3
    a964:	1004d7fa 	srli	r2,r2,31
    a968:	00c00044 	movi	r3,1
    a96c:	1885c83a 	sub	r2,r3,r2
    a970:	f800283a 	ret

0000a974 <_sbrk_r>:
    a974:	defffd04 	addi	sp,sp,-12
    a978:	dc000015 	stw	r16,0(sp)
    a97c:	04000074 	movhi	r16,1
    a980:	840de004 	addi	r16,r16,14208
    a984:	dc400115 	stw	r17,4(sp)
    a988:	80000015 	stw	zero,0(r16)
    a98c:	2023883a 	mov	r17,r4
    a990:	2809883a 	mov	r4,r5
    a994:	dfc00215 	stw	ra,8(sp)
    a998:	000c88c0 	call	c88c <sbrk>
    a99c:	1007883a 	mov	r3,r2
    a9a0:	00bfffc4 	movi	r2,-1
    a9a4:	18800626 	beq	r3,r2,a9c0 <_sbrk_r+0x4c>
    a9a8:	1805883a 	mov	r2,r3
    a9ac:	dfc00217 	ldw	ra,8(sp)
    a9b0:	dc400117 	ldw	r17,4(sp)
    a9b4:	dc000017 	ldw	r16,0(sp)
    a9b8:	dec00304 	addi	sp,sp,12
    a9bc:	f800283a 	ret
    a9c0:	80800017 	ldw	r2,0(r16)
    a9c4:	103ff826 	beq	r2,zero,a9a8 <_sbrk_r+0x34>
    a9c8:	88800015 	stw	r2,0(r17)
    a9cc:	1805883a 	mov	r2,r3
    a9d0:	dfc00217 	ldw	ra,8(sp)
    a9d4:	dc400117 	ldw	r17,4(sp)
    a9d8:	dc000017 	ldw	r16,0(sp)
    a9dc:	dec00304 	addi	sp,sp,12
    a9e0:	f800283a 	ret

0000a9e4 <__sclose>:
    a9e4:	2940038f 	ldh	r5,14(r5)
    a9e8:	000ad8c1 	jmpi	ad8c <_close_r>

0000a9ec <__sseek>:
    a9ec:	defffe04 	addi	sp,sp,-8
    a9f0:	dc000015 	stw	r16,0(sp)
    a9f4:	2821883a 	mov	r16,r5
    a9f8:	2940038f 	ldh	r5,14(r5)
    a9fc:	dfc00115 	stw	ra,4(sp)
    aa00:	000b0040 	call	b004 <_lseek_r>
    aa04:	1007883a 	mov	r3,r2
    aa08:	00bfffc4 	movi	r2,-1
    aa0c:	18800926 	beq	r3,r2,aa34 <__sseek+0x48>
    aa10:	8080030b 	ldhu	r2,12(r16)
    aa14:	80c01415 	stw	r3,80(r16)
    aa18:	10840014 	ori	r2,r2,4096
    aa1c:	8080030d 	sth	r2,12(r16)
    aa20:	1805883a 	mov	r2,r3
    aa24:	dfc00117 	ldw	ra,4(sp)
    aa28:	dc000017 	ldw	r16,0(sp)
    aa2c:	dec00204 	addi	sp,sp,8
    aa30:	f800283a 	ret
    aa34:	8080030b 	ldhu	r2,12(r16)
    aa38:	10bbffcc 	andi	r2,r2,61439
    aa3c:	8080030d 	sth	r2,12(r16)
    aa40:	1805883a 	mov	r2,r3
    aa44:	dfc00117 	ldw	ra,4(sp)
    aa48:	dc000017 	ldw	r16,0(sp)
    aa4c:	dec00204 	addi	sp,sp,8
    aa50:	f800283a 	ret

0000aa54 <__swrite>:
    aa54:	2880030b 	ldhu	r2,12(r5)
    aa58:	defffb04 	addi	sp,sp,-20
    aa5c:	dcc00315 	stw	r19,12(sp)
    aa60:	1080400c 	andi	r2,r2,256
    aa64:	dc800215 	stw	r18,8(sp)
    aa68:	dc400115 	stw	r17,4(sp)
    aa6c:	dc000015 	stw	r16,0(sp)
    aa70:	3027883a 	mov	r19,r6
    aa74:	3825883a 	mov	r18,r7
    aa78:	dfc00415 	stw	ra,16(sp)
    aa7c:	2821883a 	mov	r16,r5
    aa80:	000d883a 	mov	r6,zero
    aa84:	01c00084 	movi	r7,2
    aa88:	2023883a 	mov	r17,r4
    aa8c:	10000226 	beq	r2,zero,aa98 <__swrite+0x44>
    aa90:	2940038f 	ldh	r5,14(r5)
    aa94:	000b0040 	call	b004 <_lseek_r>
    aa98:	8080030b 	ldhu	r2,12(r16)
    aa9c:	8140038f 	ldh	r5,14(r16)
    aaa0:	8809883a 	mov	r4,r17
    aaa4:	10bbffcc 	andi	r2,r2,61439
    aaa8:	980d883a 	mov	r6,r19
    aaac:	900f883a 	mov	r7,r18
    aab0:	8080030d 	sth	r2,12(r16)
    aab4:	dfc00417 	ldw	ra,16(sp)
    aab8:	dcc00317 	ldw	r19,12(sp)
    aabc:	dc800217 	ldw	r18,8(sp)
    aac0:	dc400117 	ldw	r17,4(sp)
    aac4:	dc000017 	ldw	r16,0(sp)
    aac8:	dec00504 	addi	sp,sp,20
    aacc:	000ac601 	jmpi	ac60 <_write_r>

0000aad0 <__sread>:
    aad0:	defffe04 	addi	sp,sp,-8
    aad4:	dc000015 	stw	r16,0(sp)
    aad8:	2821883a 	mov	r16,r5
    aadc:	2940038f 	ldh	r5,14(r5)
    aae0:	dfc00115 	stw	ra,4(sp)
    aae4:	000b07c0 	call	b07c <_read_r>
    aae8:	1007883a 	mov	r3,r2
    aaec:	10000816 	blt	r2,zero,ab10 <__sread+0x40>
    aaf0:	80801417 	ldw	r2,80(r16)
    aaf4:	10c5883a 	add	r2,r2,r3
    aaf8:	80801415 	stw	r2,80(r16)
    aafc:	1805883a 	mov	r2,r3
    ab00:	dfc00117 	ldw	ra,4(sp)
    ab04:	dc000017 	ldw	r16,0(sp)
    ab08:	dec00204 	addi	sp,sp,8
    ab0c:	f800283a 	ret
    ab10:	8080030b 	ldhu	r2,12(r16)
    ab14:	10bbffcc 	andi	r2,r2,61439
    ab18:	8080030d 	sth	r2,12(r16)
    ab1c:	1805883a 	mov	r2,r3
    ab20:	dfc00117 	ldw	ra,4(sp)
    ab24:	dc000017 	ldw	r16,0(sp)
    ab28:	dec00204 	addi	sp,sp,8
    ab2c:	f800283a 	ret

0000ab30 <strcmp>:
    ab30:	2144b03a 	or	r2,r4,r5
    ab34:	108000cc 	andi	r2,r2,3
    ab38:	10001d1e 	bne	r2,zero,abb0 <strcmp+0x80>
    ab3c:	200f883a 	mov	r7,r4
    ab40:	28800017 	ldw	r2,0(r5)
    ab44:	21000017 	ldw	r4,0(r4)
    ab48:	280d883a 	mov	r6,r5
    ab4c:	2080161e 	bne	r4,r2,aba8 <strcmp+0x78>
    ab50:	023fbff4 	movhi	r8,65279
    ab54:	423fbfc4 	addi	r8,r8,-257
    ab58:	2207883a 	add	r3,r4,r8
    ab5c:	01602074 	movhi	r5,32897
    ab60:	29602004 	addi	r5,r5,-32640
    ab64:	1946703a 	and	r3,r3,r5
    ab68:	0104303a 	nor	r2,zero,r4
    ab6c:	10c4703a 	and	r2,r2,r3
    ab70:	10001c1e 	bne	r2,zero,abe4 <strcmp+0xb4>
    ab74:	4013883a 	mov	r9,r8
    ab78:	2811883a 	mov	r8,r5
    ab7c:	00000106 	br	ab84 <strcmp+0x54>
    ab80:	1800181e 	bne	r3,zero,abe4 <strcmp+0xb4>
    ab84:	39c00104 	addi	r7,r7,4
    ab88:	39000017 	ldw	r4,0(r7)
    ab8c:	31800104 	addi	r6,r6,4
    ab90:	31400017 	ldw	r5,0(r6)
    ab94:	2245883a 	add	r2,r4,r9
    ab98:	1204703a 	and	r2,r2,r8
    ab9c:	0106303a 	nor	r3,zero,r4
    aba0:	1886703a 	and	r3,r3,r2
    aba4:	217ff626 	beq	r4,r5,ab80 <strcmp+0x50>
    aba8:	3809883a 	mov	r4,r7
    abac:	300b883a 	mov	r5,r6
    abb0:	20c00007 	ldb	r3,0(r4)
    abb4:	1800051e 	bne	r3,zero,abcc <strcmp+0x9c>
    abb8:	00000606 	br	abd4 <strcmp+0xa4>
    abbc:	21000044 	addi	r4,r4,1
    abc0:	20c00007 	ldb	r3,0(r4)
    abc4:	29400044 	addi	r5,r5,1
    abc8:	18000226 	beq	r3,zero,abd4 <strcmp+0xa4>
    abcc:	28800007 	ldb	r2,0(r5)
    abd0:	18bffa26 	beq	r3,r2,abbc <strcmp+0x8c>
    abd4:	20c00003 	ldbu	r3,0(r4)
    abd8:	28800003 	ldbu	r2,0(r5)
    abdc:	1885c83a 	sub	r2,r3,r2
    abe0:	f800283a 	ret
    abe4:	0005883a 	mov	r2,zero
    abe8:	f800283a 	ret

0000abec <strlen>:
    abec:	208000cc 	andi	r2,r4,3
    abf0:	2011883a 	mov	r8,r4
    abf4:	1000161e 	bne	r2,zero,ac50 <strlen+0x64>
    abf8:	20c00017 	ldw	r3,0(r4)
    abfc:	017fbff4 	movhi	r5,65279
    ac00:	297fbfc4 	addi	r5,r5,-257
    ac04:	01e02074 	movhi	r7,32897
    ac08:	39e02004 	addi	r7,r7,-32640
    ac0c:	1945883a 	add	r2,r3,r5
    ac10:	11c4703a 	and	r2,r2,r7
    ac14:	00c6303a 	nor	r3,zero,r3
    ac18:	1886703a 	and	r3,r3,r2
    ac1c:	18000c1e 	bne	r3,zero,ac50 <strlen+0x64>
    ac20:	280d883a 	mov	r6,r5
    ac24:	380b883a 	mov	r5,r7
    ac28:	21000104 	addi	r4,r4,4
    ac2c:	20800017 	ldw	r2,0(r4)
    ac30:	1187883a 	add	r3,r2,r6
    ac34:	1946703a 	and	r3,r3,r5
    ac38:	0084303a 	nor	r2,zero,r2
    ac3c:	10c4703a 	and	r2,r2,r3
    ac40:	103ff926 	beq	r2,zero,ac28 <strlen+0x3c>
    ac44:	20800007 	ldb	r2,0(r4)
    ac48:	10000326 	beq	r2,zero,ac58 <strlen+0x6c>
    ac4c:	21000044 	addi	r4,r4,1
    ac50:	20800007 	ldb	r2,0(r4)
    ac54:	103ffd1e 	bne	r2,zero,ac4c <strlen+0x60>
    ac58:	2205c83a 	sub	r2,r4,r8
    ac5c:	f800283a 	ret

0000ac60 <_write_r>:
    ac60:	defffd04 	addi	sp,sp,-12
    ac64:	dc000015 	stw	r16,0(sp)
    ac68:	04000074 	movhi	r16,1
    ac6c:	840de004 	addi	r16,r16,14208
    ac70:	dc400115 	stw	r17,4(sp)
    ac74:	80000015 	stw	zero,0(r16)
    ac78:	2023883a 	mov	r17,r4
    ac7c:	2809883a 	mov	r4,r5
    ac80:	300b883a 	mov	r5,r6
    ac84:	380d883a 	mov	r6,r7
    ac88:	dfc00215 	stw	ra,8(sp)
    ac8c:	000c9480 	call	c948 <write>
    ac90:	1007883a 	mov	r3,r2
    ac94:	00bfffc4 	movi	r2,-1
    ac98:	18800626 	beq	r3,r2,acb4 <_write_r+0x54>
    ac9c:	1805883a 	mov	r2,r3
    aca0:	dfc00217 	ldw	ra,8(sp)
    aca4:	dc400117 	ldw	r17,4(sp)
    aca8:	dc000017 	ldw	r16,0(sp)
    acac:	dec00304 	addi	sp,sp,12
    acb0:	f800283a 	ret
    acb4:	80800017 	ldw	r2,0(r16)
    acb8:	103ff826 	beq	r2,zero,ac9c <_write_r+0x3c>
    acbc:	88800015 	stw	r2,0(r17)
    acc0:	1805883a 	mov	r2,r3
    acc4:	dfc00217 	ldw	ra,8(sp)
    acc8:	dc400117 	ldw	r17,4(sp)
    accc:	dc000017 	ldw	r16,0(sp)
    acd0:	dec00304 	addi	sp,sp,12
    acd4:	f800283a 	ret

0000acd8 <_calloc_r>:
    acd8:	298b383a 	mul	r5,r5,r6
    acdc:	defffe04 	addi	sp,sp,-8
    ace0:	dc000015 	stw	r16,0(sp)
    ace4:	dfc00115 	stw	ra,4(sp)
    ace8:	00089b00 	call	89b0 <_malloc_r>
    acec:	1021883a 	mov	r16,r2
    acf0:	01c00904 	movi	r7,36
    acf4:	10000d26 	beq	r2,zero,ad2c <_calloc_r+0x54>
    acf8:	10ffff17 	ldw	r3,-4(r2)
    acfc:	1009883a 	mov	r4,r2
    ad00:	00bfff04 	movi	r2,-4
    ad04:	1886703a 	and	r3,r3,r2
    ad08:	1887883a 	add	r3,r3,r2
    ad0c:	180d883a 	mov	r6,r3
    ad10:	000b883a 	mov	r5,zero
    ad14:	38c01736 	bltu	r7,r3,ad74 <_calloc_r+0x9c>
    ad18:	008004c4 	movi	r2,19
    ad1c:	10c00836 	bltu	r2,r3,ad40 <_calloc_r+0x68>
    ad20:	20000215 	stw	zero,8(r4)
    ad24:	20000015 	stw	zero,0(r4)
    ad28:	20000115 	stw	zero,4(r4)
    ad2c:	8005883a 	mov	r2,r16
    ad30:	dfc00117 	ldw	ra,4(sp)
    ad34:	dc000017 	ldw	r16,0(sp)
    ad38:	dec00204 	addi	sp,sp,8
    ad3c:	f800283a 	ret
    ad40:	008006c4 	movi	r2,27
    ad44:	80000015 	stw	zero,0(r16)
    ad48:	80000115 	stw	zero,4(r16)
    ad4c:	81000204 	addi	r4,r16,8
    ad50:	10fff32e 	bgeu	r2,r3,ad20 <_calloc_r+0x48>
    ad54:	80000215 	stw	zero,8(r16)
    ad58:	80000315 	stw	zero,12(r16)
    ad5c:	81000404 	addi	r4,r16,16
    ad60:	19ffef1e 	bne	r3,r7,ad20 <_calloc_r+0x48>
    ad64:	81000604 	addi	r4,r16,24
    ad68:	80000415 	stw	zero,16(r16)
    ad6c:	80000515 	stw	zero,20(r16)
    ad70:	003feb06 	br	ad20 <_calloc_r+0x48>
    ad74:	00092b40 	call	92b4 <memset>
    ad78:	8005883a 	mov	r2,r16
    ad7c:	dfc00117 	ldw	ra,4(sp)
    ad80:	dc000017 	ldw	r16,0(sp)
    ad84:	dec00204 	addi	sp,sp,8
    ad88:	f800283a 	ret

0000ad8c <_close_r>:
    ad8c:	defffd04 	addi	sp,sp,-12
    ad90:	dc000015 	stw	r16,0(sp)
    ad94:	04000074 	movhi	r16,1
    ad98:	840de004 	addi	r16,r16,14208
    ad9c:	dc400115 	stw	r17,4(sp)
    ada0:	80000015 	stw	zero,0(r16)
    ada4:	2023883a 	mov	r17,r4
    ada8:	2809883a 	mov	r4,r5
    adac:	dfc00215 	stw	ra,8(sp)
    adb0:	000bfe80 	call	bfe8 <close>
    adb4:	1007883a 	mov	r3,r2
    adb8:	00bfffc4 	movi	r2,-1
    adbc:	18800626 	beq	r3,r2,add8 <_close_r+0x4c>
    adc0:	1805883a 	mov	r2,r3
    adc4:	dfc00217 	ldw	ra,8(sp)
    adc8:	dc400117 	ldw	r17,4(sp)
    adcc:	dc000017 	ldw	r16,0(sp)
    add0:	dec00304 	addi	sp,sp,12
    add4:	f800283a 	ret
    add8:	80800017 	ldw	r2,0(r16)
    addc:	103ff826 	beq	r2,zero,adc0 <_close_r+0x34>
    ade0:	88800015 	stw	r2,0(r17)
    ade4:	1805883a 	mov	r2,r3
    ade8:	dfc00217 	ldw	ra,8(sp)
    adec:	dc400117 	ldw	r17,4(sp)
    adf0:	dc000017 	ldw	r16,0(sp)
    adf4:	dec00304 	addi	sp,sp,12
    adf8:	f800283a 	ret

0000adfc <_fclose_r>:
    adfc:	defffc04 	addi	sp,sp,-16
    ae00:	dc400115 	stw	r17,4(sp)
    ae04:	dc000015 	stw	r16,0(sp)
    ae08:	dfc00315 	stw	ra,12(sp)
    ae0c:	dc800215 	stw	r18,8(sp)
    ae10:	2821883a 	mov	r16,r5
    ae14:	2023883a 	mov	r17,r4
    ae18:	28002926 	beq	r5,zero,aec0 <_fclose_r+0xc4>
    ae1c:	0007a940 	call	7a94 <__sfp_lock_acquire>
    ae20:	88000226 	beq	r17,zero,ae2c <_fclose_r+0x30>
    ae24:	88800e17 	ldw	r2,56(r17)
    ae28:	10002d26 	beq	r2,zero,aee0 <_fclose_r+0xe4>
    ae2c:	8080030f 	ldh	r2,12(r16)
    ae30:	10002226 	beq	r2,zero,aebc <_fclose_r+0xc0>
    ae34:	8809883a 	mov	r4,r17
    ae38:	800b883a 	mov	r5,r16
    ae3c:	000780c0 	call	780c <_fflush_r>
    ae40:	1025883a 	mov	r18,r2
    ae44:	80800b17 	ldw	r2,44(r16)
    ae48:	10000426 	beq	r2,zero,ae5c <_fclose_r+0x60>
    ae4c:	81400717 	ldw	r5,28(r16)
    ae50:	8809883a 	mov	r4,r17
    ae54:	103ee83a 	callr	r2
    ae58:	10002a16 	blt	r2,zero,af04 <_fclose_r+0x108>
    ae5c:	8080030b 	ldhu	r2,12(r16)
    ae60:	1080200c 	andi	r2,r2,128
    ae64:	1000231e 	bne	r2,zero,aef4 <_fclose_r+0xf8>
    ae68:	81400c17 	ldw	r5,48(r16)
    ae6c:	28000526 	beq	r5,zero,ae84 <_fclose_r+0x88>
    ae70:	80801004 	addi	r2,r16,64
    ae74:	28800226 	beq	r5,r2,ae80 <_fclose_r+0x84>
    ae78:	8809883a 	mov	r4,r17
    ae7c:	0007e280 	call	7e28 <_free_r>
    ae80:	80000c15 	stw	zero,48(r16)
    ae84:	81401117 	ldw	r5,68(r16)
    ae88:	28000326 	beq	r5,zero,ae98 <_fclose_r+0x9c>
    ae8c:	8809883a 	mov	r4,r17
    ae90:	0007e280 	call	7e28 <_free_r>
    ae94:	80001115 	stw	zero,68(r16)
    ae98:	8000030d 	sth	zero,12(r16)
    ae9c:	0007a980 	call	7a98 <__sfp_lock_release>
    aea0:	9005883a 	mov	r2,r18
    aea4:	dfc00317 	ldw	ra,12(sp)
    aea8:	dc800217 	ldw	r18,8(sp)
    aeac:	dc400117 	ldw	r17,4(sp)
    aeb0:	dc000017 	ldw	r16,0(sp)
    aeb4:	dec00404 	addi	sp,sp,16
    aeb8:	f800283a 	ret
    aebc:	0007a980 	call	7a98 <__sfp_lock_release>
    aec0:	0025883a 	mov	r18,zero
    aec4:	9005883a 	mov	r2,r18
    aec8:	dfc00317 	ldw	ra,12(sp)
    aecc:	dc800217 	ldw	r18,8(sp)
    aed0:	dc400117 	ldw	r17,4(sp)
    aed4:	dc000017 	ldw	r16,0(sp)
    aed8:	dec00404 	addi	sp,sp,16
    aedc:	f800283a 	ret
    aee0:	8809883a 	mov	r4,r17
    aee4:	0007aa40 	call	7aa4 <__sinit>
    aee8:	8080030f 	ldh	r2,12(r16)
    aeec:	103fd11e 	bne	r2,zero,ae34 <_fclose_r+0x38>
    aef0:	003ff206 	br	aebc <_fclose_r+0xc0>
    aef4:	81400417 	ldw	r5,16(r16)
    aef8:	8809883a 	mov	r4,r17
    aefc:	0007e280 	call	7e28 <_free_r>
    af00:	003fd906 	br	ae68 <_fclose_r+0x6c>
    af04:	04bfffc4 	movi	r18,-1
    af08:	003fd406 	br	ae5c <_fclose_r+0x60>

0000af0c <fclose>:
    af0c:	00800074 	movhi	r2,1
    af10:	10864d04 	addi	r2,r2,6452
    af14:	200b883a 	mov	r5,r4
    af18:	11000017 	ldw	r4,0(r2)
    af1c:	000adfc1 	jmpi	adfc <_fclose_r>

0000af20 <_fstat_r>:
    af20:	defffd04 	addi	sp,sp,-12
    af24:	dc000015 	stw	r16,0(sp)
    af28:	04000074 	movhi	r16,1
    af2c:	840de004 	addi	r16,r16,14208
    af30:	dc400115 	stw	r17,4(sp)
    af34:	80000015 	stw	zero,0(r16)
    af38:	2023883a 	mov	r17,r4
    af3c:	2809883a 	mov	r4,r5
    af40:	300b883a 	mov	r5,r6
    af44:	dfc00215 	stw	ra,8(sp)
    af48:	000c1700 	call	c170 <fstat>
    af4c:	1007883a 	mov	r3,r2
    af50:	00bfffc4 	movi	r2,-1
    af54:	18800626 	beq	r3,r2,af70 <_fstat_r+0x50>
    af58:	1805883a 	mov	r2,r3
    af5c:	dfc00217 	ldw	ra,8(sp)
    af60:	dc400117 	ldw	r17,4(sp)
    af64:	dc000017 	ldw	r16,0(sp)
    af68:	dec00304 	addi	sp,sp,12
    af6c:	f800283a 	ret
    af70:	80800017 	ldw	r2,0(r16)
    af74:	103ff826 	beq	r2,zero,af58 <_fstat_r+0x38>
    af78:	88800015 	stw	r2,0(r17)
    af7c:	1805883a 	mov	r2,r3
    af80:	dfc00217 	ldw	ra,8(sp)
    af84:	dc400117 	ldw	r17,4(sp)
    af88:	dc000017 	ldw	r16,0(sp)
    af8c:	dec00304 	addi	sp,sp,12
    af90:	f800283a 	ret

0000af94 <_isatty_r>:
    af94:	defffd04 	addi	sp,sp,-12
    af98:	dc000015 	stw	r16,0(sp)
    af9c:	04000074 	movhi	r16,1
    afa0:	840de004 	addi	r16,r16,14208
    afa4:	dc400115 	stw	r17,4(sp)
    afa8:	80000015 	stw	zero,0(r16)
    afac:	2023883a 	mov	r17,r4
    afb0:	2809883a 	mov	r4,r5
    afb4:	dfc00215 	stw	ra,8(sp)
    afb8:	000c2a40 	call	c2a4 <isatty>
    afbc:	1007883a 	mov	r3,r2
    afc0:	00bfffc4 	movi	r2,-1
    afc4:	18800626 	beq	r3,r2,afe0 <_isatty_r+0x4c>
    afc8:	1805883a 	mov	r2,r3
    afcc:	dfc00217 	ldw	ra,8(sp)
    afd0:	dc400117 	ldw	r17,4(sp)
    afd4:	dc000017 	ldw	r16,0(sp)
    afd8:	dec00304 	addi	sp,sp,12
    afdc:	f800283a 	ret
    afe0:	80800017 	ldw	r2,0(r16)
    afe4:	103ff826 	beq	r2,zero,afc8 <_isatty_r+0x34>
    afe8:	88800015 	stw	r2,0(r17)
    afec:	1805883a 	mov	r2,r3
    aff0:	dfc00217 	ldw	ra,8(sp)
    aff4:	dc400117 	ldw	r17,4(sp)
    aff8:	dc000017 	ldw	r16,0(sp)
    affc:	dec00304 	addi	sp,sp,12
    b000:	f800283a 	ret

0000b004 <_lseek_r>:
    b004:	defffd04 	addi	sp,sp,-12
    b008:	dc000015 	stw	r16,0(sp)
    b00c:	04000074 	movhi	r16,1
    b010:	840de004 	addi	r16,r16,14208
    b014:	dc400115 	stw	r17,4(sp)
    b018:	80000015 	stw	zero,0(r16)
    b01c:	2023883a 	mov	r17,r4
    b020:	2809883a 	mov	r4,r5
    b024:	300b883a 	mov	r5,r6
    b028:	380d883a 	mov	r6,r7
    b02c:	dfc00215 	stw	ra,8(sp)
    b030:	000c4b00 	call	c4b0 <lseek>
    b034:	1007883a 	mov	r3,r2
    b038:	00bfffc4 	movi	r2,-1
    b03c:	18800626 	beq	r3,r2,b058 <_lseek_r+0x54>
    b040:	1805883a 	mov	r2,r3
    b044:	dfc00217 	ldw	ra,8(sp)
    b048:	dc400117 	ldw	r17,4(sp)
    b04c:	dc000017 	ldw	r16,0(sp)
    b050:	dec00304 	addi	sp,sp,12
    b054:	f800283a 	ret
    b058:	80800017 	ldw	r2,0(r16)
    b05c:	103ff826 	beq	r2,zero,b040 <_lseek_r+0x3c>
    b060:	88800015 	stw	r2,0(r17)
    b064:	1805883a 	mov	r2,r3
    b068:	dfc00217 	ldw	ra,8(sp)
    b06c:	dc400117 	ldw	r17,4(sp)
    b070:	dc000017 	ldw	r16,0(sp)
    b074:	dec00304 	addi	sp,sp,12
    b078:	f800283a 	ret

0000b07c <_read_r>:
    b07c:	defffd04 	addi	sp,sp,-12
    b080:	dc000015 	stw	r16,0(sp)
    b084:	04000074 	movhi	r16,1
    b088:	840de004 	addi	r16,r16,14208
    b08c:	dc400115 	stw	r17,4(sp)
    b090:	80000015 	stw	zero,0(r16)
    b094:	2023883a 	mov	r17,r4
    b098:	2809883a 	mov	r4,r5
    b09c:	300b883a 	mov	r5,r6
    b0a0:	380d883a 	mov	r6,r7
    b0a4:	dfc00215 	stw	ra,8(sp)
    b0a8:	000c6ac0 	call	c6ac <read>
    b0ac:	1007883a 	mov	r3,r2
    b0b0:	00bfffc4 	movi	r2,-1
    b0b4:	18800626 	beq	r3,r2,b0d0 <_read_r+0x54>
    b0b8:	1805883a 	mov	r2,r3
    b0bc:	dfc00217 	ldw	ra,8(sp)
    b0c0:	dc400117 	ldw	r17,4(sp)
    b0c4:	dc000017 	ldw	r16,0(sp)
    b0c8:	dec00304 	addi	sp,sp,12
    b0cc:	f800283a 	ret
    b0d0:	80800017 	ldw	r2,0(r16)
    b0d4:	103ff826 	beq	r2,zero,b0b8 <_read_r+0x3c>
    b0d8:	88800015 	stw	r2,0(r17)
    b0dc:	1805883a 	mov	r2,r3
    b0e0:	dfc00217 	ldw	ra,8(sp)
    b0e4:	dc400117 	ldw	r17,4(sp)
    b0e8:	dc000017 	ldw	r16,0(sp)
    b0ec:	dec00304 	addi	sp,sp,12
    b0f0:	f800283a 	ret

0000b0f4 <__udivdi3>:
    b0f4:	defff004 	addi	sp,sp,-64
    b0f8:	2005883a 	mov	r2,r4
    b0fc:	3011883a 	mov	r8,r6
    b100:	df000e15 	stw	fp,56(sp)
    b104:	dd000a15 	stw	r20,40(sp)
    b108:	dc000615 	stw	r16,24(sp)
    b10c:	dfc00f15 	stw	ra,60(sp)
    b110:	ddc00d15 	stw	r23,52(sp)
    b114:	dd800c15 	stw	r22,48(sp)
    b118:	dd400b15 	stw	r21,44(sp)
    b11c:	dcc00915 	stw	r19,36(sp)
    b120:	dc800815 	stw	r18,32(sp)
    b124:	dc400715 	stw	r17,28(sp)
    b128:	4021883a 	mov	r16,r8
    b12c:	1039883a 	mov	fp,r2
    b130:	2829883a 	mov	r20,r5
    b134:	38003b1e 	bne	r7,zero,b224 <__udivdi3+0x130>
    b138:	2a005c36 	bltu	r5,r8,b2ac <__udivdi3+0x1b8>
    b13c:	4000a626 	beq	r8,zero,b3d8 <__udivdi3+0x2e4>
    b140:	00bfffd4 	movui	r2,65535
    b144:	14009e36 	bltu	r2,r16,b3c0 <__udivdi3+0x2cc>
    b148:	00803fc4 	movi	r2,255
    b14c:	14013d36 	bltu	r2,r16,b644 <__udivdi3+0x550>
    b150:	000b883a 	mov	r5,zero
    b154:	0005883a 	mov	r2,zero
    b158:	8084d83a 	srl	r2,r16,r2
    b15c:	01000074 	movhi	r4,1
    b160:	213e0e04 	addi	r4,r4,-1992
    b164:	01800804 	movi	r6,32
    b168:	1105883a 	add	r2,r2,r4
    b16c:	10c00003 	ldbu	r3,0(r2)
    b170:	28c7883a 	add	r3,r5,r3
    b174:	30edc83a 	sub	r22,r6,r3
    b178:	b000ee1e 	bne	r22,zero,b534 <__udivdi3+0x440>
    b17c:	802ad43a 	srli	r21,r16,16
    b180:	00800044 	movi	r2,1
    b184:	a423c83a 	sub	r17,r20,r16
    b188:	85ffffcc 	andi	r23,r16,65535
    b18c:	d8800315 	stw	r2,12(sp)
    b190:	8809883a 	mov	r4,r17
    b194:	a80b883a 	mov	r5,r21
    b198:	000bfd80 	call	bfd8 <__udivsi3>
    b19c:	8809883a 	mov	r4,r17
    b1a0:	a80b883a 	mov	r5,r21
    b1a4:	102d883a 	mov	r22,r2
    b1a8:	000bfe00 	call	bfe0 <__umodsi3>
    b1ac:	1004943a 	slli	r2,r2,16
    b1b0:	e006d43a 	srli	r3,fp,16
    b1b4:	bda3383a 	mul	r17,r23,r22
    b1b8:	10c4b03a 	or	r2,r2,r3
    b1bc:	1440042e 	bgeu	r2,r17,b1d0 <__udivdi3+0xdc>
    b1c0:	1405883a 	add	r2,r2,r16
    b1c4:	b5bfffc4 	addi	r22,r22,-1
    b1c8:	14000136 	bltu	r2,r16,b1d0 <__udivdi3+0xdc>
    b1cc:	14413d36 	bltu	r2,r17,b6c4 <__udivdi3+0x5d0>
    b1d0:	1463c83a 	sub	r17,r2,r17
    b1d4:	8809883a 	mov	r4,r17
    b1d8:	a80b883a 	mov	r5,r21
    b1dc:	000bfd80 	call	bfd8 <__udivsi3>
    b1e0:	8809883a 	mov	r4,r17
    b1e4:	a80b883a 	mov	r5,r21
    b1e8:	1029883a 	mov	r20,r2
    b1ec:	000bfe00 	call	bfe0 <__umodsi3>
    b1f0:	1004943a 	slli	r2,r2,16
    b1f4:	bd09383a 	mul	r4,r23,r20
    b1f8:	e0ffffcc 	andi	r3,fp,65535
    b1fc:	10c4b03a 	or	r2,r2,r3
    b200:	1100042e 	bgeu	r2,r4,b214 <__udivdi3+0x120>
    b204:	8085883a 	add	r2,r16,r2
    b208:	a53fffc4 	addi	r20,r20,-1
    b20c:	14000136 	bltu	r2,r16,b214 <__udivdi3+0x120>
    b210:	11012036 	bltu	r2,r4,b694 <__udivdi3+0x5a0>
    b214:	b004943a 	slli	r2,r22,16
    b218:	d9000317 	ldw	r4,12(sp)
    b21c:	a084b03a 	or	r2,r20,r2
    b220:	00001506 	br	b278 <__udivdi3+0x184>
    b224:	380d883a 	mov	r6,r7
    b228:	29c06236 	bltu	r5,r7,b3b4 <__udivdi3+0x2c0>
    b22c:	00bfffd4 	movui	r2,65535
    b230:	11c05a36 	bltu	r2,r7,b39c <__udivdi3+0x2a8>
    b234:	00803fc4 	movi	r2,255
    b238:	11c0fc36 	bltu	r2,r7,b62c <__udivdi3+0x538>
    b23c:	000b883a 	mov	r5,zero
    b240:	0005883a 	mov	r2,zero
    b244:	3084d83a 	srl	r2,r6,r2
    b248:	01000074 	movhi	r4,1
    b24c:	213e0e04 	addi	r4,r4,-1992
    b250:	01c00804 	movi	r7,32
    b254:	1105883a 	add	r2,r2,r4
    b258:	10c00003 	ldbu	r3,0(r2)
    b25c:	28c7883a 	add	r3,r5,r3
    b260:	38efc83a 	sub	r23,r7,r3
    b264:	b800691e 	bne	r23,zero,b40c <__udivdi3+0x318>
    b268:	35000136 	bltu	r6,r20,b270 <__udivdi3+0x17c>
    b26c:	e4005136 	bltu	fp,r16,b3b4 <__udivdi3+0x2c0>
    b270:	00800044 	movi	r2,1
    b274:	0009883a 	mov	r4,zero
    b278:	2007883a 	mov	r3,r4
    b27c:	dfc00f17 	ldw	ra,60(sp)
    b280:	df000e17 	ldw	fp,56(sp)
    b284:	ddc00d17 	ldw	r23,52(sp)
    b288:	dd800c17 	ldw	r22,48(sp)
    b28c:	dd400b17 	ldw	r21,44(sp)
    b290:	dd000a17 	ldw	r20,40(sp)
    b294:	dcc00917 	ldw	r19,36(sp)
    b298:	dc800817 	ldw	r18,32(sp)
    b29c:	dc400717 	ldw	r17,28(sp)
    b2a0:	dc000617 	ldw	r16,24(sp)
    b2a4:	dec01004 	addi	sp,sp,64
    b2a8:	f800283a 	ret
    b2ac:	00bfffd4 	movui	r2,65535
    b2b0:	12005036 	bltu	r2,r8,b3f4 <__udivdi3+0x300>
    b2b4:	00803fc4 	movi	r2,255
    b2b8:	1200e836 	bltu	r2,r8,b65c <__udivdi3+0x568>
    b2bc:	000b883a 	mov	r5,zero
    b2c0:	0005883a 	mov	r2,zero
    b2c4:	8084d83a 	srl	r2,r16,r2
    b2c8:	01000074 	movhi	r4,1
    b2cc:	213e0e04 	addi	r4,r4,-1992
    b2d0:	01800804 	movi	r6,32
    b2d4:	1105883a 	add	r2,r2,r4
    b2d8:	10c00003 	ldbu	r3,0(r2)
    b2dc:	28c7883a 	add	r3,r5,r3
    b2e0:	30cbc83a 	sub	r5,r6,r3
    b2e4:	28000626 	beq	r5,zero,b300 <__udivdi3+0x20c>
    b2e8:	3145c83a 	sub	r2,r6,r5
    b2ec:	e084d83a 	srl	r2,fp,r2
    b2f0:	a146983a 	sll	r3,r20,r5
    b2f4:	e178983a 	sll	fp,fp,r5
    b2f8:	8160983a 	sll	r16,r16,r5
    b2fc:	18a8b03a 	or	r20,r3,r2
    b300:	802ad43a 	srli	r21,r16,16
    b304:	a009883a 	mov	r4,r20
    b308:	85ffffcc 	andi	r23,r16,65535
    b30c:	a80b883a 	mov	r5,r21
    b310:	000bfd80 	call	bfd8 <__udivsi3>
    b314:	a009883a 	mov	r4,r20
    b318:	a80b883a 	mov	r5,r21
    b31c:	102d883a 	mov	r22,r2
    b320:	000bfe00 	call	bfe0 <__umodsi3>
    b324:	1004943a 	slli	r2,r2,16
    b328:	e006d43a 	srli	r3,fp,16
    b32c:	bda3383a 	mul	r17,r23,r22
    b330:	10c4b03a 	or	r2,r2,r3
    b334:	1440042e 	bgeu	r2,r17,b348 <__udivdi3+0x254>
    b338:	1405883a 	add	r2,r2,r16
    b33c:	b5bfffc4 	addi	r22,r22,-1
    b340:	14000136 	bltu	r2,r16,b348 <__udivdi3+0x254>
    b344:	1440d536 	bltu	r2,r17,b69c <__udivdi3+0x5a8>
    b348:	1463c83a 	sub	r17,r2,r17
    b34c:	8809883a 	mov	r4,r17
    b350:	a80b883a 	mov	r5,r21
    b354:	000bfd80 	call	bfd8 <__udivsi3>
    b358:	8809883a 	mov	r4,r17
    b35c:	a80b883a 	mov	r5,r21
    b360:	1029883a 	mov	r20,r2
    b364:	000bfe00 	call	bfe0 <__umodsi3>
    b368:	1004943a 	slli	r2,r2,16
    b36c:	bd09383a 	mul	r4,r23,r20
    b370:	e0ffffcc 	andi	r3,fp,65535
    b374:	10c4b03a 	or	r2,r2,r3
    b378:	1100042e 	bgeu	r2,r4,b38c <__udivdi3+0x298>
    b37c:	8085883a 	add	r2,r16,r2
    b380:	a53fffc4 	addi	r20,r20,-1
    b384:	14000136 	bltu	r2,r16,b38c <__udivdi3+0x298>
    b388:	1100c736 	bltu	r2,r4,b6a8 <__udivdi3+0x5b4>
    b38c:	b004943a 	slli	r2,r22,16
    b390:	0009883a 	mov	r4,zero
    b394:	a084b03a 	or	r2,r20,r2
    b398:	003fb706 	br	b278 <__udivdi3+0x184>
    b39c:	00804034 	movhi	r2,256
    b3a0:	10bfffc4 	addi	r2,r2,-1
    b3a4:	11c0a436 	bltu	r2,r7,b638 <__udivdi3+0x544>
    b3a8:	01400404 	movi	r5,16
    b3ac:	2805883a 	mov	r2,r5
    b3b0:	003fa406 	br	b244 <__udivdi3+0x150>
    b3b4:	0005883a 	mov	r2,zero
    b3b8:	0009883a 	mov	r4,zero
    b3bc:	003fae06 	br	b278 <__udivdi3+0x184>
    b3c0:	00804034 	movhi	r2,256
    b3c4:	10bfffc4 	addi	r2,r2,-1
    b3c8:	1400a136 	bltu	r2,r16,b650 <__udivdi3+0x55c>
    b3cc:	01400404 	movi	r5,16
    b3d0:	2805883a 	mov	r2,r5
    b3d4:	003f6006 	br	b158 <__udivdi3+0x64>
    b3d8:	01000044 	movi	r4,1
    b3dc:	000b883a 	mov	r5,zero
    b3e0:	000bfd80 	call	bfd8 <__udivsi3>
    b3e4:	1021883a 	mov	r16,r2
    b3e8:	00bfffd4 	movui	r2,65535
    b3ec:	143ff436 	bltu	r2,r16,b3c0 <__udivdi3+0x2cc>
    b3f0:	003f5506 	br	b148 <__udivdi3+0x54>
    b3f4:	00804034 	movhi	r2,256
    b3f8:	10bfffc4 	addi	r2,r2,-1
    b3fc:	12009a36 	bltu	r2,r8,b668 <__udivdi3+0x574>
    b400:	01400404 	movi	r5,16
    b404:	2805883a 	mov	r2,r5
    b408:	003fae06 	br	b2c4 <__udivdi3+0x1d0>
    b40c:	3dc5c83a 	sub	r2,r7,r23
    b410:	35c8983a 	sll	r4,r6,r23
    b414:	8086d83a 	srl	r3,r16,r2
    b418:	a0a2d83a 	srl	r17,r20,r2
    b41c:	e084d83a 	srl	r2,fp,r2
    b420:	20eab03a 	or	r21,r4,r3
    b424:	a82cd43a 	srli	r22,r21,16
    b428:	a5c6983a 	sll	r3,r20,r23
    b42c:	8809883a 	mov	r4,r17
    b430:	b00b883a 	mov	r5,r22
    b434:	1886b03a 	or	r3,r3,r2
    b438:	d8c00215 	stw	r3,8(sp)
    b43c:	000bfd80 	call	bfd8 <__udivsi3>
    b440:	8809883a 	mov	r4,r17
    b444:	b00b883a 	mov	r5,r22
    b448:	1029883a 	mov	r20,r2
    b44c:	000bfe00 	call	bfe0 <__umodsi3>
    b450:	a8ffffcc 	andi	r3,r21,65535
    b454:	d8c00515 	stw	r3,20(sp)
    b458:	d9000217 	ldw	r4,8(sp)
    b45c:	d9400517 	ldw	r5,20(sp)
    b460:	1004943a 	slli	r2,r2,16
    b464:	2006d43a 	srli	r3,r4,16
    b468:	85e0983a 	sll	r16,r16,r23
    b46c:	2d23383a 	mul	r17,r5,r20
    b470:	10c4b03a 	or	r2,r2,r3
    b474:	dc000015 	stw	r16,0(sp)
    b478:	1440032e 	bgeu	r2,r17,b488 <__udivdi3+0x394>
    b47c:	1545883a 	add	r2,r2,r21
    b480:	a53fffc4 	addi	r20,r20,-1
    b484:	15407f2e 	bgeu	r2,r21,b684 <__udivdi3+0x590>
    b488:	1463c83a 	sub	r17,r2,r17
    b48c:	8809883a 	mov	r4,r17
    b490:	b00b883a 	mov	r5,r22
    b494:	000bfd80 	call	bfd8 <__udivsi3>
    b498:	8809883a 	mov	r4,r17
    b49c:	b00b883a 	mov	r5,r22
    b4a0:	1021883a 	mov	r16,r2
    b4a4:	000bfe00 	call	bfe0 <__umodsi3>
    b4a8:	d8c00517 	ldw	r3,20(sp)
    b4ac:	d9000217 	ldw	r4,8(sp)
    b4b0:	1004943a 	slli	r2,r2,16
    b4b4:	1c0f383a 	mul	r7,r3,r16
    b4b8:	20ffffcc 	andi	r3,r4,65535
    b4bc:	10e2b03a 	or	r17,r2,r3
    b4c0:	89c0032e 	bgeu	r17,r7,b4d0 <__udivdi3+0x3dc>
    b4c4:	8d63883a 	add	r17,r17,r21
    b4c8:	843fffc4 	addi	r16,r16,-1
    b4cc:	8d40692e 	bgeu	r17,r21,b674 <__udivdi3+0x580>
    b4d0:	a008943a 	slli	r4,r20,16
    b4d4:	d9400017 	ldw	r5,0(sp)
    b4d8:	89e3c83a 	sub	r17,r17,r7
    b4dc:	8110b03a 	or	r8,r16,r4
    b4e0:	280cd43a 	srli	r6,r5,16
    b4e4:	28ffffcc 	andi	r3,r5,65535
    b4e8:	40bfffcc 	andi	r2,r8,65535
    b4ec:	400ad43a 	srli	r5,r8,16
    b4f0:	10d3383a 	mul	r9,r2,r3
    b4f4:	1185383a 	mul	r2,r2,r6
    b4f8:	28c7383a 	mul	r3,r5,r3
    b4fc:	4808d43a 	srli	r4,r9,16
    b500:	298b383a 	mul	r5,r5,r6
    b504:	10c5883a 	add	r2,r2,r3
    b508:	2089883a 	add	r4,r4,r2
    b50c:	20c0022e 	bgeu	r4,r3,b518 <__udivdi3+0x424>
    b510:	00800074 	movhi	r2,1
    b514:	288b883a 	add	r5,r5,r2
    b518:	2004d43a 	srli	r2,r4,16
    b51c:	288b883a 	add	r5,r5,r2
    b520:	89403f36 	bltu	r17,r5,b620 <__udivdi3+0x52c>
    b524:	89403926 	beq	r17,r5,b60c <__udivdi3+0x518>
    b528:	4005883a 	mov	r2,r8
    b52c:	0009883a 	mov	r4,zero
    b530:	003f5106 	br	b278 <__udivdi3+0x184>
    b534:	85a0983a 	sll	r16,r16,r22
    b538:	3585c83a 	sub	r2,r6,r22
    b53c:	a0a2d83a 	srl	r17,r20,r2
    b540:	802ad43a 	srli	r21,r16,16
    b544:	e084d83a 	srl	r2,fp,r2
    b548:	a586983a 	sll	r3,r20,r22
    b54c:	8809883a 	mov	r4,r17
    b550:	a80b883a 	mov	r5,r21
    b554:	1886b03a 	or	r3,r3,r2
    b558:	d8c00115 	stw	r3,4(sp)
    b55c:	000bfd80 	call	bfd8 <__udivsi3>
    b560:	8809883a 	mov	r4,r17
    b564:	a80b883a 	mov	r5,r21
    b568:	d8800415 	stw	r2,16(sp)
    b56c:	000bfe00 	call	bfe0 <__umodsi3>
    b570:	d9000117 	ldw	r4,4(sp)
    b574:	d9400417 	ldw	r5,16(sp)
    b578:	1004943a 	slli	r2,r2,16
    b57c:	85ffffcc 	andi	r23,r16,65535
    b580:	2006d43a 	srli	r3,r4,16
    b584:	b963383a 	mul	r17,r23,r5
    b588:	10c4b03a 	or	r2,r2,r3
    b58c:	1440042e 	bgeu	r2,r17,b5a0 <__udivdi3+0x4ac>
    b590:	297fffc4 	addi	r5,r5,-1
    b594:	1405883a 	add	r2,r2,r16
    b598:	d9400415 	stw	r5,16(sp)
    b59c:	1400442e 	bgeu	r2,r16,b6b0 <__udivdi3+0x5bc>
    b5a0:	1463c83a 	sub	r17,r2,r17
    b5a4:	8809883a 	mov	r4,r17
    b5a8:	a80b883a 	mov	r5,r21
    b5ac:	000bfd80 	call	bfd8 <__udivsi3>
    b5b0:	8809883a 	mov	r4,r17
    b5b4:	a80b883a 	mov	r5,r21
    b5b8:	1029883a 	mov	r20,r2
    b5bc:	000bfe00 	call	bfe0 <__umodsi3>
    b5c0:	d9400117 	ldw	r5,4(sp)
    b5c4:	1004943a 	slli	r2,r2,16
    b5c8:	bd09383a 	mul	r4,r23,r20
    b5cc:	28ffffcc 	andi	r3,r5,65535
    b5d0:	10c6b03a 	or	r3,r2,r3
    b5d4:	1900062e 	bgeu	r3,r4,b5f0 <__udivdi3+0x4fc>
    b5d8:	1c07883a 	add	r3,r3,r16
    b5dc:	a53fffc4 	addi	r20,r20,-1
    b5e0:	1c000336 	bltu	r3,r16,b5f0 <__udivdi3+0x4fc>
    b5e4:	1900022e 	bgeu	r3,r4,b5f0 <__udivdi3+0x4fc>
    b5e8:	a53fffc4 	addi	r20,r20,-1
    b5ec:	1c07883a 	add	r3,r3,r16
    b5f0:	d9400417 	ldw	r5,16(sp)
    b5f4:	e5b8983a 	sll	fp,fp,r22
    b5f8:	1923c83a 	sub	r17,r3,r4
    b5fc:	2804943a 	slli	r2,r5,16
    b600:	a0a8b03a 	or	r20,r20,r2
    b604:	dd000315 	stw	r20,12(sp)
    b608:	003ee106 	br	b190 <__udivdi3+0x9c>
    b60c:	2004943a 	slli	r2,r4,16
    b610:	e5c8983a 	sll	r4,fp,r23
    b614:	48ffffcc 	andi	r3,r9,65535
    b618:	10c5883a 	add	r2,r2,r3
    b61c:	20bfc22e 	bgeu	r4,r2,b528 <__udivdi3+0x434>
    b620:	40bfffc4 	addi	r2,r8,-1
    b624:	0009883a 	mov	r4,zero
    b628:	003f1306 	br	b278 <__udivdi3+0x184>
    b62c:	01400204 	movi	r5,8
    b630:	2805883a 	mov	r2,r5
    b634:	003f0306 	br	b244 <__udivdi3+0x150>
    b638:	01400604 	movi	r5,24
    b63c:	2805883a 	mov	r2,r5
    b640:	003f0006 	br	b244 <__udivdi3+0x150>
    b644:	01400204 	movi	r5,8
    b648:	2805883a 	mov	r2,r5
    b64c:	003ec206 	br	b158 <__udivdi3+0x64>
    b650:	01400604 	movi	r5,24
    b654:	2805883a 	mov	r2,r5
    b658:	003ebf06 	br	b158 <__udivdi3+0x64>
    b65c:	01400204 	movi	r5,8
    b660:	2805883a 	mov	r2,r5
    b664:	003f1706 	br	b2c4 <__udivdi3+0x1d0>
    b668:	01400604 	movi	r5,24
    b66c:	2805883a 	mov	r2,r5
    b670:	003f1406 	br	b2c4 <__udivdi3+0x1d0>
    b674:	89ff962e 	bgeu	r17,r7,b4d0 <__udivdi3+0x3dc>
    b678:	8d63883a 	add	r17,r17,r21
    b67c:	843fffc4 	addi	r16,r16,-1
    b680:	003f9306 	br	b4d0 <__udivdi3+0x3dc>
    b684:	147f802e 	bgeu	r2,r17,b488 <__udivdi3+0x394>
    b688:	a53fffc4 	addi	r20,r20,-1
    b68c:	1545883a 	add	r2,r2,r21
    b690:	003f7d06 	br	b488 <__udivdi3+0x394>
    b694:	a53fffc4 	addi	r20,r20,-1
    b698:	003ede06 	br	b214 <__udivdi3+0x120>
    b69c:	b5bfffc4 	addi	r22,r22,-1
    b6a0:	1405883a 	add	r2,r2,r16
    b6a4:	003f2806 	br	b348 <__udivdi3+0x254>
    b6a8:	a53fffc4 	addi	r20,r20,-1
    b6ac:	003f3706 	br	b38c <__udivdi3+0x298>
    b6b0:	147fbb2e 	bgeu	r2,r17,b5a0 <__udivdi3+0x4ac>
    b6b4:	297fffc4 	addi	r5,r5,-1
    b6b8:	1405883a 	add	r2,r2,r16
    b6bc:	d9400415 	stw	r5,16(sp)
    b6c0:	003fb706 	br	b5a0 <__udivdi3+0x4ac>
    b6c4:	b5bfffc4 	addi	r22,r22,-1
    b6c8:	1405883a 	add	r2,r2,r16
    b6cc:	003ec006 	br	b1d0 <__udivdi3+0xdc>

0000b6d0 <__umoddi3>:
    b6d0:	defff104 	addi	sp,sp,-60
    b6d4:	dd800b15 	stw	r22,44(sp)
    b6d8:	dd000915 	stw	r20,36(sp)
    b6dc:	dc000515 	stw	r16,20(sp)
    b6e0:	dfc00e15 	stw	ra,56(sp)
    b6e4:	df000d15 	stw	fp,52(sp)
    b6e8:	ddc00c15 	stw	r23,48(sp)
    b6ec:	dd400a15 	stw	r21,40(sp)
    b6f0:	dcc00815 	stw	r19,32(sp)
    b6f4:	dc800715 	stw	r18,28(sp)
    b6f8:	dc400615 	stw	r17,24(sp)
    b6fc:	3021883a 	mov	r16,r6
    b700:	202d883a 	mov	r22,r4
    b704:	2829883a 	mov	r20,r5
    b708:	38002b1e 	bne	r7,zero,b7b8 <__umoddi3+0xe8>
    b70c:	29805036 	bltu	r5,r6,b850 <__umoddi3+0x180>
    b710:	30008a26 	beq	r6,zero,b93c <__umoddi3+0x26c>
    b714:	00bfffd4 	movui	r2,65535
    b718:	14008236 	bltu	r2,r16,b924 <__umoddi3+0x254>
    b71c:	00803fc4 	movi	r2,255
    b720:	14013636 	bltu	r2,r16,bbfc <__umoddi3+0x52c>
    b724:	000b883a 	mov	r5,zero
    b728:	0005883a 	mov	r2,zero
    b72c:	8084d83a 	srl	r2,r16,r2
    b730:	01000074 	movhi	r4,1
    b734:	213e0e04 	addi	r4,r4,-1992
    b738:	01800804 	movi	r6,32
    b73c:	1105883a 	add	r2,r2,r4
    b740:	10c00003 	ldbu	r3,0(r2)
    b744:	28c7883a 	add	r3,r5,r3
    b748:	30efc83a 	sub	r23,r6,r3
    b74c:	b800941e 	bne	r23,zero,b9a0 <__umoddi3+0x2d0>
    b750:	802ad43a 	srli	r21,r16,16
    b754:	a423c83a 	sub	r17,r20,r16
    b758:	0039883a 	mov	fp,zero
    b75c:	853fffcc 	andi	r20,r16,65535
    b760:	8809883a 	mov	r4,r17
    b764:	a80b883a 	mov	r5,r21
    b768:	000bfd80 	call	bfd8 <__udivsi3>
    b76c:	8809883a 	mov	r4,r17
    b770:	a80b883a 	mov	r5,r21
    b774:	a0a3383a 	mul	r17,r20,r2
    b778:	000bfe00 	call	bfe0 <__umodsi3>
    b77c:	1004943a 	slli	r2,r2,16
    b780:	b006d43a 	srli	r3,r22,16
    b784:	10c4b03a 	or	r2,r2,r3
    b788:	1440032e 	bgeu	r2,r17,b798 <__umoddi3+0xc8>
    b78c:	1405883a 	add	r2,r2,r16
    b790:	14000136 	bltu	r2,r16,b798 <__umoddi3+0xc8>
    b794:	14413536 	bltu	r2,r17,bc6c <__umoddi3+0x59c>
    b798:	1463c83a 	sub	r17,r2,r17
    b79c:	8809883a 	mov	r4,r17
    b7a0:	a80b883a 	mov	r5,r21
    b7a4:	000bfd80 	call	bfd8 <__udivsi3>
    b7a8:	8809883a 	mov	r4,r17
    b7ac:	a0a3383a 	mul	r17,r20,r2
    b7b0:	a80b883a 	mov	r5,r21
    b7b4:	00004d06 	br	b8ec <__umoddi3+0x21c>
    b7b8:	380d883a 	mov	r6,r7
    b7bc:	29c0102e 	bgeu	r5,r7,b800 <__umoddi3+0x130>
    b7c0:	2011883a 	mov	r8,r4
    b7c4:	2813883a 	mov	r9,r5
    b7c8:	4005883a 	mov	r2,r8
    b7cc:	4807883a 	mov	r3,r9
    b7d0:	dfc00e17 	ldw	ra,56(sp)
    b7d4:	df000d17 	ldw	fp,52(sp)
    b7d8:	ddc00c17 	ldw	r23,48(sp)
    b7dc:	dd800b17 	ldw	r22,44(sp)
    b7e0:	dd400a17 	ldw	r21,40(sp)
    b7e4:	dd000917 	ldw	r20,36(sp)
    b7e8:	dcc00817 	ldw	r19,32(sp)
    b7ec:	dc800717 	ldw	r18,28(sp)
    b7f0:	dc400617 	ldw	r17,24(sp)
    b7f4:	dc000517 	ldw	r16,20(sp)
    b7f8:	dec00f04 	addi	sp,sp,60
    b7fc:	f800283a 	ret
    b800:	00bfffd4 	movui	r2,65535
    b804:	11c05a36 	bltu	r2,r7,b970 <__umoddi3+0x2a0>
    b808:	00803fc4 	movi	r2,255
    b80c:	11c0fe36 	bltu	r2,r7,bc08 <__umoddi3+0x538>
    b810:	000b883a 	mov	r5,zero
    b814:	0005883a 	mov	r2,zero
    b818:	3084d83a 	srl	r2,r6,r2
    b81c:	01000074 	movhi	r4,1
    b820:	213e0e04 	addi	r4,r4,-1992
    b824:	01c00804 	movi	r7,32
    b828:	1105883a 	add	r2,r2,r4
    b82c:	10c00003 	ldbu	r3,0(r2)
    b830:	28c7883a 	add	r3,r5,r3
    b834:	38ebc83a 	sub	r21,r7,r3
    b838:	a800851e 	bne	r21,zero,ba50 <__umoddi3+0x380>
    b83c:	35005236 	bltu	r6,r20,b988 <__umoddi3+0x2b8>
    b840:	b400512e 	bgeu	r22,r16,b988 <__umoddi3+0x2b8>
    b844:	b011883a 	mov	r8,r22
    b848:	a013883a 	mov	r9,r20
    b84c:	003fde06 	br	b7c8 <__umoddi3+0xf8>
    b850:	00bfffd4 	movui	r2,65535
    b854:	11804036 	bltu	r2,r6,b958 <__umoddi3+0x288>
    b858:	00803fc4 	movi	r2,255
    b85c:	1180ed36 	bltu	r2,r6,bc14 <__umoddi3+0x544>
    b860:	000b883a 	mov	r5,zero
    b864:	0005883a 	mov	r2,zero
    b868:	8084d83a 	srl	r2,r16,r2
    b86c:	01000074 	movhi	r4,1
    b870:	213e0e04 	addi	r4,r4,-1992
    b874:	01800804 	movi	r6,32
    b878:	1105883a 	add	r2,r2,r4
    b87c:	10c00003 	ldbu	r3,0(r2)
    b880:	28c7883a 	add	r3,r5,r3
    b884:	30c7c83a 	sub	r3,r6,r3
    b888:	1800bf1e 	bne	r3,zero,bb88 <__umoddi3+0x4b8>
    b88c:	0039883a 	mov	fp,zero
    b890:	802ad43a 	srli	r21,r16,16
    b894:	a009883a 	mov	r4,r20
    b898:	85ffffcc 	andi	r23,r16,65535
    b89c:	a80b883a 	mov	r5,r21
    b8a0:	000bfd80 	call	bfd8 <__udivsi3>
    b8a4:	a009883a 	mov	r4,r20
    b8a8:	a80b883a 	mov	r5,r21
    b8ac:	b8a3383a 	mul	r17,r23,r2
    b8b0:	000bfe00 	call	bfe0 <__umodsi3>
    b8b4:	1004943a 	slli	r2,r2,16
    b8b8:	b006d43a 	srli	r3,r22,16
    b8bc:	10c4b03a 	or	r2,r2,r3
    b8c0:	1440032e 	bgeu	r2,r17,b8d0 <__umoddi3+0x200>
    b8c4:	1405883a 	add	r2,r2,r16
    b8c8:	14000136 	bltu	r2,r16,b8d0 <__umoddi3+0x200>
    b8cc:	1440e536 	bltu	r2,r17,bc64 <__umoddi3+0x594>
    b8d0:	1463c83a 	sub	r17,r2,r17
    b8d4:	8809883a 	mov	r4,r17
    b8d8:	a80b883a 	mov	r5,r21
    b8dc:	000bfd80 	call	bfd8 <__udivsi3>
    b8e0:	8809883a 	mov	r4,r17
    b8e4:	b8a3383a 	mul	r17,r23,r2
    b8e8:	a80b883a 	mov	r5,r21
    b8ec:	000bfe00 	call	bfe0 <__umodsi3>
    b8f0:	1004943a 	slli	r2,r2,16
    b8f4:	b0ffffcc 	andi	r3,r22,65535
    b8f8:	10c4b03a 	or	r2,r2,r3
    b8fc:	1440042e 	bgeu	r2,r17,b910 <__umoddi3+0x240>
    b900:	1405883a 	add	r2,r2,r16
    b904:	14000236 	bltu	r2,r16,b910 <__umoddi3+0x240>
    b908:	1440012e 	bgeu	r2,r17,b910 <__umoddi3+0x240>
    b90c:	1405883a 	add	r2,r2,r16
    b910:	1445c83a 	sub	r2,r2,r17
    b914:	1724d83a 	srl	r18,r2,fp
    b918:	0013883a 	mov	r9,zero
    b91c:	9011883a 	mov	r8,r18
    b920:	003fa906 	br	b7c8 <__umoddi3+0xf8>
    b924:	00804034 	movhi	r2,256
    b928:	10bfffc4 	addi	r2,r2,-1
    b92c:	1400b036 	bltu	r2,r16,bbf0 <__umoddi3+0x520>
    b930:	01400404 	movi	r5,16
    b934:	2805883a 	mov	r2,r5
    b938:	003f7c06 	br	b72c <__umoddi3+0x5c>
    b93c:	01000044 	movi	r4,1
    b940:	000b883a 	mov	r5,zero
    b944:	000bfd80 	call	bfd8 <__udivsi3>
    b948:	1021883a 	mov	r16,r2
    b94c:	00bfffd4 	movui	r2,65535
    b950:	143ff436 	bltu	r2,r16,b924 <__umoddi3+0x254>
    b954:	003f7106 	br	b71c <__umoddi3+0x4c>
    b958:	00804034 	movhi	r2,256
    b95c:	10bfffc4 	addi	r2,r2,-1
    b960:	1180af36 	bltu	r2,r6,bc20 <__umoddi3+0x550>
    b964:	01400404 	movi	r5,16
    b968:	2805883a 	mov	r2,r5
    b96c:	003fbe06 	br	b868 <__umoddi3+0x198>
    b970:	00804034 	movhi	r2,256
    b974:	10bfffc4 	addi	r2,r2,-1
    b978:	11c0ac36 	bltu	r2,r7,bc2c <__umoddi3+0x55c>
    b97c:	01400404 	movi	r5,16
    b980:	2805883a 	mov	r2,r5
    b984:	003fa406 	br	b818 <__umoddi3+0x148>
    b988:	b409c83a 	sub	r4,r22,r16
    b98c:	b105803a 	cmpltu	r2,r22,r4
    b990:	a187c83a 	sub	r3,r20,r6
    b994:	18a9c83a 	sub	r20,r3,r2
    b998:	202d883a 	mov	r22,r4
    b99c:	003fa906 	br	b844 <__umoddi3+0x174>
    b9a0:	85e0983a 	sll	r16,r16,r23
    b9a4:	35c5c83a 	sub	r2,r6,r23
    b9a8:	a0a2d83a 	srl	r17,r20,r2
    b9ac:	802ad43a 	srli	r21,r16,16
    b9b0:	b084d83a 	srl	r2,r22,r2
    b9b4:	a5c6983a 	sll	r3,r20,r23
    b9b8:	8809883a 	mov	r4,r17
    b9bc:	a80b883a 	mov	r5,r21
    b9c0:	1886b03a 	or	r3,r3,r2
    b9c4:	d8c00115 	stw	r3,4(sp)
    b9c8:	853fffcc 	andi	r20,r16,65535
    b9cc:	000bfd80 	call	bfd8 <__udivsi3>
    b9d0:	8809883a 	mov	r4,r17
    b9d4:	a80b883a 	mov	r5,r21
    b9d8:	a0a3383a 	mul	r17,r20,r2
    b9dc:	000bfe00 	call	bfe0 <__umodsi3>
    b9e0:	d9000117 	ldw	r4,4(sp)
    b9e4:	1004943a 	slli	r2,r2,16
    b9e8:	b839883a 	mov	fp,r23
    b9ec:	2006d43a 	srli	r3,r4,16
    b9f0:	10c4b03a 	or	r2,r2,r3
    b9f4:	1440022e 	bgeu	r2,r17,ba00 <__umoddi3+0x330>
    b9f8:	1405883a 	add	r2,r2,r16
    b9fc:	1400962e 	bgeu	r2,r16,bc58 <__umoddi3+0x588>
    ba00:	1463c83a 	sub	r17,r2,r17
    ba04:	8809883a 	mov	r4,r17
    ba08:	a80b883a 	mov	r5,r21
    ba0c:	000bfd80 	call	bfd8 <__udivsi3>
    ba10:	8809883a 	mov	r4,r17
    ba14:	a80b883a 	mov	r5,r21
    ba18:	a0a3383a 	mul	r17,r20,r2
    ba1c:	000bfe00 	call	bfe0 <__umodsi3>
    ba20:	d9400117 	ldw	r5,4(sp)
    ba24:	1004943a 	slli	r2,r2,16
    ba28:	28ffffcc 	andi	r3,r5,65535
    ba2c:	10c4b03a 	or	r2,r2,r3
    ba30:	1440042e 	bgeu	r2,r17,ba44 <__umoddi3+0x374>
    ba34:	1405883a 	add	r2,r2,r16
    ba38:	14000236 	bltu	r2,r16,ba44 <__umoddi3+0x374>
    ba3c:	1440012e 	bgeu	r2,r17,ba44 <__umoddi3+0x374>
    ba40:	1405883a 	add	r2,r2,r16
    ba44:	b5ec983a 	sll	r22,r22,r23
    ba48:	1463c83a 	sub	r17,r2,r17
    ba4c:	003f4406 	br	b760 <__umoddi3+0x90>
    ba50:	3d4fc83a 	sub	r7,r7,r21
    ba54:	3546983a 	sll	r3,r6,r21
    ba58:	81c4d83a 	srl	r2,r16,r7
    ba5c:	a1e2d83a 	srl	r17,r20,r7
    ba60:	a54c983a 	sll	r6,r20,r21
    ba64:	18aeb03a 	or	r23,r3,r2
    ba68:	b828d43a 	srli	r20,r23,16
    ba6c:	b1c4d83a 	srl	r2,r22,r7
    ba70:	8809883a 	mov	r4,r17
    ba74:	a00b883a 	mov	r5,r20
    ba78:	308cb03a 	or	r6,r6,r2
    ba7c:	d9c00315 	stw	r7,12(sp)
    ba80:	d9800215 	stw	r6,8(sp)
    ba84:	000bfd80 	call	bfd8 <__udivsi3>
    ba88:	8809883a 	mov	r4,r17
    ba8c:	a00b883a 	mov	r5,r20
    ba90:	1039883a 	mov	fp,r2
    ba94:	000bfe00 	call	bfe0 <__umodsi3>
    ba98:	b8ffffcc 	andi	r3,r23,65535
    ba9c:	d8c00415 	stw	r3,16(sp)
    baa0:	d9000217 	ldw	r4,8(sp)
    baa4:	d9400417 	ldw	r5,16(sp)
    baa8:	1004943a 	slli	r2,r2,16
    baac:	2006d43a 	srli	r3,r4,16
    bab0:	8560983a 	sll	r16,r16,r21
    bab4:	2f23383a 	mul	r17,r5,fp
    bab8:	10c4b03a 	or	r2,r2,r3
    babc:	dc000015 	stw	r16,0(sp)
    bac0:	b56c983a 	sll	r22,r22,r21
    bac4:	1440032e 	bgeu	r2,r17,bad4 <__umoddi3+0x404>
    bac8:	15c5883a 	add	r2,r2,r23
    bacc:	e73fffc4 	addi	fp,fp,-1
    bad0:	15c05d2e 	bgeu	r2,r23,bc48 <__umoddi3+0x578>
    bad4:	1463c83a 	sub	r17,r2,r17
    bad8:	8809883a 	mov	r4,r17
    badc:	a00b883a 	mov	r5,r20
    bae0:	000bfd80 	call	bfd8 <__udivsi3>
    bae4:	8809883a 	mov	r4,r17
    bae8:	a00b883a 	mov	r5,r20
    baec:	1021883a 	mov	r16,r2
    baf0:	000bfe00 	call	bfe0 <__umodsi3>
    baf4:	d8c00417 	ldw	r3,16(sp)
    baf8:	d9000217 	ldw	r4,8(sp)
    bafc:	1004943a 	slli	r2,r2,16
    bb00:	1c23383a 	mul	r17,r3,r16
    bb04:	20ffffcc 	andi	r3,r4,65535
    bb08:	10ceb03a 	or	r7,r2,r3
    bb0c:	3c40032e 	bgeu	r7,r17,bb1c <__umoddi3+0x44c>
    bb10:	3dcf883a 	add	r7,r7,r23
    bb14:	843fffc4 	addi	r16,r16,-1
    bb18:	3dc0472e 	bgeu	r7,r23,bc38 <__umoddi3+0x568>
    bb1c:	e004943a 	slli	r2,fp,16
    bb20:	d9400017 	ldw	r5,0(sp)
    bb24:	3c4fc83a 	sub	r7,r7,r17
    bb28:	8084b03a 	or	r2,r16,r2
    bb2c:	28ffffcc 	andi	r3,r5,65535
    bb30:	280cd43a 	srli	r6,r5,16
    bb34:	100ad43a 	srli	r5,r2,16
    bb38:	10bfffcc 	andi	r2,r2,65535
    bb3c:	10d1383a 	mul	r8,r2,r3
    bb40:	28c7383a 	mul	r3,r5,r3
    bb44:	1185383a 	mul	r2,r2,r6
    bb48:	4008d43a 	srli	r4,r8,16
    bb4c:	298b383a 	mul	r5,r5,r6
    bb50:	10c5883a 	add	r2,r2,r3
    bb54:	2089883a 	add	r4,r4,r2
    bb58:	20c0022e 	bgeu	r4,r3,bb64 <__umoddi3+0x494>
    bb5c:	00800074 	movhi	r2,1
    bb60:	288b883a 	add	r5,r5,r2
    bb64:	2004d43a 	srli	r2,r4,16
    bb68:	2008943a 	slli	r4,r4,16
    bb6c:	40ffffcc 	andi	r3,r8,65535
    bb70:	288b883a 	add	r5,r5,r2
    bb74:	20c9883a 	add	r4,r4,r3
    bb78:	39400b36 	bltu	r7,r5,bba8 <__umoddi3+0x4d8>
    bb7c:	39403d26 	beq	r7,r5,bc74 <__umoddi3+0x5a4>
    bb80:	394bc83a 	sub	r5,r7,r5
    bb84:	00000f06 	br	bbc4 <__umoddi3+0x4f4>
    bb88:	30c5c83a 	sub	r2,r6,r3
    bb8c:	1839883a 	mov	fp,r3
    bb90:	b084d83a 	srl	r2,r22,r2
    bb94:	a0c6983a 	sll	r3,r20,r3
    bb98:	8720983a 	sll	r16,r16,fp
    bb9c:	b72c983a 	sll	r22,r22,fp
    bba0:	18a8b03a 	or	r20,r3,r2
    bba4:	003f3a06 	br	b890 <__umoddi3+0x1c0>
    bba8:	d8c00017 	ldw	r3,0(sp)
    bbac:	20c5c83a 	sub	r2,r4,r3
    bbb0:	2089803a 	cmpltu	r4,r4,r2
    bbb4:	2dc7c83a 	sub	r3,r5,r23
    bbb8:	1907c83a 	sub	r3,r3,r4
    bbbc:	38cbc83a 	sub	r5,r7,r3
    bbc0:	1009883a 	mov	r4,r2
    bbc4:	b105c83a 	sub	r2,r22,r4
    bbc8:	b087803a 	cmpltu	r3,r22,r2
    bbcc:	28c7c83a 	sub	r3,r5,r3
    bbd0:	d9400317 	ldw	r5,12(sp)
    bbd4:	1544d83a 	srl	r2,r2,r21
    bbd8:	1948983a 	sll	r4,r3,r5
    bbdc:	1d46d83a 	srl	r3,r3,r21
    bbe0:	20a4b03a 	or	r18,r4,r2
    bbe4:	9011883a 	mov	r8,r18
    bbe8:	1813883a 	mov	r9,r3
    bbec:	003ef606 	br	b7c8 <__umoddi3+0xf8>
    bbf0:	01400604 	movi	r5,24
    bbf4:	2805883a 	mov	r2,r5
    bbf8:	003ecc06 	br	b72c <__umoddi3+0x5c>
    bbfc:	01400204 	movi	r5,8
    bc00:	2805883a 	mov	r2,r5
    bc04:	003ec906 	br	b72c <__umoddi3+0x5c>
    bc08:	01400204 	movi	r5,8
    bc0c:	2805883a 	mov	r2,r5
    bc10:	003f0106 	br	b818 <__umoddi3+0x148>
    bc14:	01400204 	movi	r5,8
    bc18:	2805883a 	mov	r2,r5
    bc1c:	003f1206 	br	b868 <__umoddi3+0x198>
    bc20:	01400604 	movi	r5,24
    bc24:	2805883a 	mov	r2,r5
    bc28:	003f0f06 	br	b868 <__umoddi3+0x198>
    bc2c:	01400604 	movi	r5,24
    bc30:	2805883a 	mov	r2,r5
    bc34:	003ef806 	br	b818 <__umoddi3+0x148>
    bc38:	3c7fb82e 	bgeu	r7,r17,bb1c <__umoddi3+0x44c>
    bc3c:	843fffc4 	addi	r16,r16,-1
    bc40:	3dcf883a 	add	r7,r7,r23
    bc44:	003fb506 	br	bb1c <__umoddi3+0x44c>
    bc48:	147fa22e 	bgeu	r2,r17,bad4 <__umoddi3+0x404>
    bc4c:	e73fffc4 	addi	fp,fp,-1
    bc50:	15c5883a 	add	r2,r2,r23
    bc54:	003f9f06 	br	bad4 <__umoddi3+0x404>
    bc58:	147f692e 	bgeu	r2,r17,ba00 <__umoddi3+0x330>
    bc5c:	1405883a 	add	r2,r2,r16
    bc60:	003f6706 	br	ba00 <__umoddi3+0x330>
    bc64:	1405883a 	add	r2,r2,r16
    bc68:	003f1906 	br	b8d0 <__umoddi3+0x200>
    bc6c:	1405883a 	add	r2,r2,r16
    bc70:	003ec906 	br	b798 <__umoddi3+0xc8>
    bc74:	b13fcc36 	bltu	r22,r4,bba8 <__umoddi3+0x4d8>
    bc78:	000b883a 	mov	r5,zero
    bc7c:	003fd106 	br	bbc4 <__umoddi3+0x4f4>

0000bc80 <__gedf2>:
    bc80:	deffef04 	addi	sp,sp,-68
    bc84:	dc400f15 	stw	r17,60(sp)
    bc88:	dc400404 	addi	r17,sp,16
    bc8c:	2005883a 	mov	r2,r4
    bc90:	2807883a 	mov	r3,r5
    bc94:	dc000e15 	stw	r16,56(sp)
    bc98:	d809883a 	mov	r4,sp
    bc9c:	880b883a 	mov	r5,r17
    bca0:	dc000904 	addi	r16,sp,36
    bca4:	d8c00115 	stw	r3,4(sp)
    bca8:	d8800015 	stw	r2,0(sp)
    bcac:	d9800215 	stw	r6,8(sp)
    bcb0:	dfc01015 	stw	ra,64(sp)
    bcb4:	d9c00315 	stw	r7,12(sp)
    bcb8:	0003cb40 	call	3cb4 <__unpack_d>
    bcbc:	d9000204 	addi	r4,sp,8
    bcc0:	800b883a 	mov	r5,r16
    bcc4:	0003cb40 	call	3cb4 <__unpack_d>
    bcc8:	d8800417 	ldw	r2,16(sp)
    bccc:	00c00044 	movi	r3,1
    bcd0:	01bfffc4 	movi	r6,-1
    bcd4:	1880062e 	bgeu	r3,r2,bcf0 <__gedf2+0x70>
    bcd8:	d8800917 	ldw	r2,36(sp)
    bcdc:	8809883a 	mov	r4,r17
    bce0:	800b883a 	mov	r5,r16
    bce4:	1880022e 	bgeu	r3,r2,bcf0 <__gedf2+0x70>
    bce8:	0003dec0 	call	3dec <__fpcmp_parts_d>
    bcec:	100d883a 	mov	r6,r2
    bcf0:	3005883a 	mov	r2,r6
    bcf4:	dfc01017 	ldw	ra,64(sp)
    bcf8:	dc400f17 	ldw	r17,60(sp)
    bcfc:	dc000e17 	ldw	r16,56(sp)
    bd00:	dec01104 	addi	sp,sp,68
    bd04:	f800283a 	ret

0000bd08 <__floatunsidf>:
    bd08:	defff204 	addi	sp,sp,-56
    bd0c:	dfc00d15 	stw	ra,52(sp)
    bd10:	ddc00c15 	stw	r23,48(sp)
    bd14:	dd800b15 	stw	r22,44(sp)
    bd18:	dd400a15 	stw	r21,40(sp)
    bd1c:	dd000915 	stw	r20,36(sp)
    bd20:	dcc00815 	stw	r19,32(sp)
    bd24:	dc800715 	stw	r18,28(sp)
    bd28:	dc400615 	stw	r17,24(sp)
    bd2c:	dc000515 	stw	r16,20(sp)
    bd30:	d8000115 	stw	zero,4(sp)
    bd34:	20000f1e 	bne	r4,zero,bd74 <__floatunsidf+0x6c>
    bd38:	00800084 	movi	r2,2
    bd3c:	d8800015 	stw	r2,0(sp)
    bd40:	d809883a 	mov	r4,sp
    bd44:	00039a00 	call	39a0 <__pack_d>
    bd48:	dfc00d17 	ldw	ra,52(sp)
    bd4c:	ddc00c17 	ldw	r23,48(sp)
    bd50:	dd800b17 	ldw	r22,44(sp)
    bd54:	dd400a17 	ldw	r21,40(sp)
    bd58:	dd000917 	ldw	r20,36(sp)
    bd5c:	dcc00817 	ldw	r19,32(sp)
    bd60:	dc800717 	ldw	r18,28(sp)
    bd64:	dc400617 	ldw	r17,24(sp)
    bd68:	dc000517 	ldw	r16,20(sp)
    bd6c:	dec00e04 	addi	sp,sp,56
    bd70:	f800283a 	ret
    bd74:	008000c4 	movi	r2,3
    bd78:	00c00f04 	movi	r3,60
    bd7c:	002f883a 	mov	r23,zero
    bd80:	202d883a 	mov	r22,r4
    bd84:	d8800015 	stw	r2,0(sp)
    bd88:	d8c00215 	stw	r3,8(sp)
    bd8c:	d9000315 	stw	r4,12(sp)
    bd90:	ddc00415 	stw	r23,16(sp)
    bd94:	00039200 	call	3920 <__clzsi2>
    bd98:	12400744 	addi	r9,r2,29
    bd9c:	48000b16 	blt	r9,zero,bdcc <__floatunsidf+0xc4>
    bda0:	483fe726 	beq	r9,zero,bd40 <__floatunsidf+0x38>
    bda4:	10bfff44 	addi	r2,r2,-3
    bda8:	10002e16 	blt	r2,zero,be64 <__floatunsidf+0x15c>
    bdac:	b0a2983a 	sll	r17,r22,r2
    bdb0:	0021883a 	mov	r16,zero
    bdb4:	d8800217 	ldw	r2,8(sp)
    bdb8:	dc400415 	stw	r17,16(sp)
    bdbc:	dc000315 	stw	r16,12(sp)
    bdc0:	1245c83a 	sub	r2,r2,r9
    bdc4:	d8800215 	stw	r2,8(sp)
    bdc8:	003fdd06 	br	bd40 <__floatunsidf+0x38>
    bdcc:	0255c83a 	sub	r10,zero,r9
    bdd0:	51bff804 	addi	r6,r10,-32
    bdd4:	30001b16 	blt	r6,zero,be44 <__floatunsidf+0x13c>
    bdd8:	b9a8d83a 	srl	r20,r23,r6
    bddc:	002b883a 	mov	r21,zero
    bde0:	000f883a 	mov	r7,zero
    bde4:	01000044 	movi	r4,1
    bde8:	0011883a 	mov	r8,zero
    bdec:	30002516 	blt	r6,zero,be84 <__floatunsidf+0x17c>
    bdf0:	21a6983a 	sll	r19,r4,r6
    bdf4:	0025883a 	mov	r18,zero
    bdf8:	00bfffc4 	movi	r2,-1
    bdfc:	9089883a 	add	r4,r18,r2
    be00:	988b883a 	add	r5,r19,r2
    be04:	248d803a 	cmpltu	r6,r4,r18
    be08:	314b883a 	add	r5,r6,r5
    be0c:	b104703a 	and	r2,r22,r4
    be10:	b946703a 	and	r3,r23,r5
    be14:	10c4b03a 	or	r2,r2,r3
    be18:	10000226 	beq	r2,zero,be24 <__floatunsidf+0x11c>
    be1c:	01c00044 	movi	r7,1
    be20:	0011883a 	mov	r8,zero
    be24:	d9000217 	ldw	r4,8(sp)
    be28:	a1c4b03a 	or	r2,r20,r7
    be2c:	aa06b03a 	or	r3,r21,r8
    be30:	2249c83a 	sub	r4,r4,r9
    be34:	d8c00415 	stw	r3,16(sp)
    be38:	d9000215 	stw	r4,8(sp)
    be3c:	d8800315 	stw	r2,12(sp)
    be40:	003fbf06 	br	bd40 <__floatunsidf+0x38>
    be44:	bdc7883a 	add	r3,r23,r23
    be48:	008007c4 	movi	r2,31
    be4c:	1285c83a 	sub	r2,r2,r10
    be50:	1886983a 	sll	r3,r3,r2
    be54:	b2a8d83a 	srl	r20,r22,r10
    be58:	baaad83a 	srl	r21,r23,r10
    be5c:	1d28b03a 	or	r20,r3,r20
    be60:	003fdf06 	br	bde0 <__floatunsidf+0xd8>
    be64:	b006d07a 	srli	r3,r22,1
    be68:	008007c4 	movi	r2,31
    be6c:	1245c83a 	sub	r2,r2,r9
    be70:	1886d83a 	srl	r3,r3,r2
    be74:	ba62983a 	sll	r17,r23,r9
    be78:	b260983a 	sll	r16,r22,r9
    be7c:	1c62b03a 	or	r17,r3,r17
    be80:	003fcc06 	br	bdb4 <__floatunsidf+0xac>
    be84:	2006d07a 	srli	r3,r4,1
    be88:	008007c4 	movi	r2,31
    be8c:	1285c83a 	sub	r2,r2,r10
    be90:	18a6d83a 	srl	r19,r3,r2
    be94:	22a4983a 	sll	r18,r4,r10
    be98:	003fd706 	br	bdf8 <__floatunsidf+0xf0>

0000be9c <udivmodsi4>:
    be9c:	29001b2e 	bgeu	r5,r4,bf0c <udivmodsi4+0x70>
    bea0:	28001a16 	blt	r5,zero,bf0c <udivmodsi4+0x70>
    bea4:	00800044 	movi	r2,1
    bea8:	0007883a 	mov	r3,zero
    beac:	01c007c4 	movi	r7,31
    beb0:	00000306 	br	bec0 <udivmodsi4+0x24>
    beb4:	19c01326 	beq	r3,r7,bf04 <udivmodsi4+0x68>
    beb8:	18c00044 	addi	r3,r3,1
    bebc:	28000416 	blt	r5,zero,bed0 <udivmodsi4+0x34>
    bec0:	294b883a 	add	r5,r5,r5
    bec4:	1085883a 	add	r2,r2,r2
    bec8:	293ffa36 	bltu	r5,r4,beb4 <udivmodsi4+0x18>
    becc:	10000d26 	beq	r2,zero,bf04 <udivmodsi4+0x68>
    bed0:	0007883a 	mov	r3,zero
    bed4:	21400236 	bltu	r4,r5,bee0 <udivmodsi4+0x44>
    bed8:	2149c83a 	sub	r4,r4,r5
    bedc:	1886b03a 	or	r3,r3,r2
    bee0:	1004d07a 	srli	r2,r2,1
    bee4:	280ad07a 	srli	r5,r5,1
    bee8:	103ffa1e 	bne	r2,zero,bed4 <udivmodsi4+0x38>
    beec:	30000226 	beq	r6,zero,bef8 <udivmodsi4+0x5c>
    bef0:	2005883a 	mov	r2,r4
    bef4:	f800283a 	ret
    bef8:	1809883a 	mov	r4,r3
    befc:	2005883a 	mov	r2,r4
    bf00:	f800283a 	ret
    bf04:	0007883a 	mov	r3,zero
    bf08:	003ff806 	br	beec <udivmodsi4+0x50>
    bf0c:	00800044 	movi	r2,1
    bf10:	0007883a 	mov	r3,zero
    bf14:	003fef06 	br	bed4 <udivmodsi4+0x38>

0000bf18 <__divsi3>:
    bf18:	defffe04 	addi	sp,sp,-8
    bf1c:	dc000015 	stw	r16,0(sp)
    bf20:	dfc00115 	stw	ra,4(sp)
    bf24:	0021883a 	mov	r16,zero
    bf28:	20000c16 	blt	r4,zero,bf5c <__divsi3+0x44>
    bf2c:	000d883a 	mov	r6,zero
    bf30:	28000e16 	blt	r5,zero,bf6c <__divsi3+0x54>
    bf34:	000be9c0 	call	be9c <udivmodsi4>
    bf38:	1007883a 	mov	r3,r2
    bf3c:	8005003a 	cmpeq	r2,r16,zero
    bf40:	1000011e 	bne	r2,zero,bf48 <__divsi3+0x30>
    bf44:	00c7c83a 	sub	r3,zero,r3
    bf48:	1805883a 	mov	r2,r3
    bf4c:	dfc00117 	ldw	ra,4(sp)
    bf50:	dc000017 	ldw	r16,0(sp)
    bf54:	dec00204 	addi	sp,sp,8
    bf58:	f800283a 	ret
    bf5c:	0109c83a 	sub	r4,zero,r4
    bf60:	04000044 	movi	r16,1
    bf64:	000d883a 	mov	r6,zero
    bf68:	283ff20e 	bge	r5,zero,bf34 <__divsi3+0x1c>
    bf6c:	014bc83a 	sub	r5,zero,r5
    bf70:	8021003a 	cmpeq	r16,r16,zero
    bf74:	003fef06 	br	bf34 <__divsi3+0x1c>

0000bf78 <__modsi3>:
    bf78:	deffff04 	addi	sp,sp,-4
    bf7c:	dfc00015 	stw	ra,0(sp)
    bf80:	01800044 	movi	r6,1
    bf84:	2807883a 	mov	r3,r5
    bf88:	20000416 	blt	r4,zero,bf9c <__modsi3+0x24>
    bf8c:	28000c16 	blt	r5,zero,bfc0 <__modsi3+0x48>
    bf90:	dfc00017 	ldw	ra,0(sp)
    bf94:	dec00104 	addi	sp,sp,4
    bf98:	000be9c1 	jmpi	be9c <udivmodsi4>
    bf9c:	0109c83a 	sub	r4,zero,r4
    bfa0:	28000b16 	blt	r5,zero,bfd0 <__modsi3+0x58>
    bfa4:	180b883a 	mov	r5,r3
    bfa8:	01800044 	movi	r6,1
    bfac:	000be9c0 	call	be9c <udivmodsi4>
    bfb0:	0085c83a 	sub	r2,zero,r2
    bfb4:	dfc00017 	ldw	ra,0(sp)
    bfb8:	dec00104 	addi	sp,sp,4
    bfbc:	f800283a 	ret
    bfc0:	014bc83a 	sub	r5,zero,r5
    bfc4:	dfc00017 	ldw	ra,0(sp)
    bfc8:	dec00104 	addi	sp,sp,4
    bfcc:	000be9c1 	jmpi	be9c <udivmodsi4>
    bfd0:	0147c83a 	sub	r3,zero,r5
    bfd4:	003ff306 	br	bfa4 <__modsi3+0x2c>

0000bfd8 <__udivsi3>:
    bfd8:	000d883a 	mov	r6,zero
    bfdc:	000be9c1 	jmpi	be9c <udivmodsi4>

0000bfe0 <__umodsi3>:
    bfe0:	01800044 	movi	r6,1
    bfe4:	000be9c1 	jmpi	be9c <udivmodsi4>

0000bfe8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    bfe8:	defff804 	addi	sp,sp,-32
    bfec:	dfc00715 	stw	ra,28(sp)
    bff0:	df000615 	stw	fp,24(sp)
    bff4:	df000604 	addi	fp,sp,24
    bff8:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    bffc:	e0bffc17 	ldw	r2,-16(fp)
    c000:	1004803a 	cmplt	r2,r2,zero
    c004:	1000081e 	bne	r2,zero,c028 <close+0x40>
    c008:	e0bffc17 	ldw	r2,-16(fp)
    c00c:	10800324 	muli	r2,r2,12
    c010:	1007883a 	mov	r3,r2
    c014:	00800074 	movhi	r2,1
    c018:	10817004 	addi	r2,r2,1472
    c01c:	1887883a 	add	r3,r3,r2
    c020:	e0ffff15 	stw	r3,-4(fp)
    c024:	00000106 	br	c02c <close+0x44>
    c028:	e03fff15 	stw	zero,-4(fp)
    c02c:	e0bfff17 	ldw	r2,-4(fp)
    c030:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
    c034:	e0bffb17 	ldw	r2,-20(fp)
    c038:	1005003a 	cmpeq	r2,r2,zero
    c03c:	10001d1e 	bne	r2,zero,c0b4 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    c040:	e0bffb17 	ldw	r2,-20(fp)
    c044:	10800017 	ldw	r2,0(r2)
    c048:	10800417 	ldw	r2,16(r2)
    c04c:	1005003a 	cmpeq	r2,r2,zero
    c050:	1000071e 	bne	r2,zero,c070 <close+0x88>
    c054:	e0bffb17 	ldw	r2,-20(fp)
    c058:	10800017 	ldw	r2,0(r2)
    c05c:	10800417 	ldw	r2,16(r2)
    c060:	e13ffb17 	ldw	r4,-20(fp)
    c064:	103ee83a 	callr	r2
    c068:	e0bffe15 	stw	r2,-8(fp)
    c06c:	00000106 	br	c074 <close+0x8c>
    c070:	e03ffe15 	stw	zero,-8(fp)
    c074:	e0bffe17 	ldw	r2,-8(fp)
    c078:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    c07c:	e13ffc17 	ldw	r4,-16(fp)
    c080:	000c82c0 	call	c82c <alt_release_fd>
    if (rval < 0)
    c084:	e0bffa17 	ldw	r2,-24(fp)
    c088:	1004403a 	cmpge	r2,r2,zero
    c08c:	1000071e 	bne	r2,zero,c0ac <close+0xc4>
    {
      ALT_ERRNO = -rval;
    c090:	000c0e40 	call	c0e4 <alt_get_errno>
    c094:	e0fffa17 	ldw	r3,-24(fp)
    c098:	00c7c83a 	sub	r3,zero,r3
    c09c:	10c00015 	stw	r3,0(r2)
      return -1;
    c0a0:	00bfffc4 	movi	r2,-1
    c0a4:	e0bffd15 	stw	r2,-12(fp)
    c0a8:	00000806 	br	c0cc <close+0xe4>
    }
    return 0;
    c0ac:	e03ffd15 	stw	zero,-12(fp)
    c0b0:	00000606 	br	c0cc <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    c0b4:	000c0e40 	call	c0e4 <alt_get_errno>
    c0b8:	1007883a 	mov	r3,r2
    c0bc:	00801444 	movi	r2,81
    c0c0:	18800015 	stw	r2,0(r3)
    return -1;
    c0c4:	00bfffc4 	movi	r2,-1
    c0c8:	e0bffd15 	stw	r2,-12(fp)
    c0cc:	e0bffd17 	ldw	r2,-12(fp)
  }
}
    c0d0:	e037883a 	mov	sp,fp
    c0d4:	dfc00117 	ldw	ra,4(sp)
    c0d8:	df000017 	ldw	fp,0(sp)
    c0dc:	dec00204 	addi	sp,sp,8
    c0e0:	f800283a 	ret

0000c0e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    c0e4:	defffd04 	addi	sp,sp,-12
    c0e8:	dfc00215 	stw	ra,8(sp)
    c0ec:	df000115 	stw	fp,4(sp)
    c0f0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    c0f4:	00800074 	movhi	r2,1
    c0f8:	10865804 	addi	r2,r2,6496
    c0fc:	10800017 	ldw	r2,0(r2)
    c100:	1005003a 	cmpeq	r2,r2,zero
    c104:	1000061e 	bne	r2,zero,c120 <alt_get_errno+0x3c>
    c108:	00800074 	movhi	r2,1
    c10c:	10865804 	addi	r2,r2,6496
    c110:	10800017 	ldw	r2,0(r2)
    c114:	103ee83a 	callr	r2
    c118:	e0bfff15 	stw	r2,-4(fp)
    c11c:	00000306 	br	c12c <alt_get_errno+0x48>
    c120:	00800074 	movhi	r2,1
    c124:	108de004 	addi	r2,r2,14208
    c128:	e0bfff15 	stw	r2,-4(fp)
    c12c:	e0bfff17 	ldw	r2,-4(fp)
}
    c130:	e037883a 	mov	sp,fp
    c134:	dfc00117 	ldw	ra,4(sp)
    c138:	df000017 	ldw	fp,0(sp)
    c13c:	dec00204 	addi	sp,sp,8
    c140:	f800283a 	ret

0000c144 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    c144:	defffc04 	addi	sp,sp,-16
    c148:	df000315 	stw	fp,12(sp)
    c14c:	df000304 	addi	fp,sp,12
    c150:	e13ffd15 	stw	r4,-12(fp)
    c154:	e17ffe15 	stw	r5,-8(fp)
    c158:	e1bfff15 	stw	r6,-4(fp)
  return len;
    c15c:	e0bfff17 	ldw	r2,-4(fp)
}
    c160:	e037883a 	mov	sp,fp
    c164:	df000017 	ldw	fp,0(sp)
    c168:	dec00104 	addi	sp,sp,4
    c16c:	f800283a 	ret

0000c170 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    c170:	defff904 	addi	sp,sp,-28
    c174:	dfc00615 	stw	ra,24(sp)
    c178:	df000515 	stw	fp,20(sp)
    c17c:	df000504 	addi	fp,sp,20
    c180:	e13ffc15 	stw	r4,-16(fp)
    c184:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    c188:	e0bffc17 	ldw	r2,-16(fp)
    c18c:	1004803a 	cmplt	r2,r2,zero
    c190:	1000081e 	bne	r2,zero,c1b4 <fstat+0x44>
    c194:	e0bffc17 	ldw	r2,-16(fp)
    c198:	10800324 	muli	r2,r2,12
    c19c:	1007883a 	mov	r3,r2
    c1a0:	00800074 	movhi	r2,1
    c1a4:	10817004 	addi	r2,r2,1472
    c1a8:	1887883a 	add	r3,r3,r2
    c1ac:	e0ffff15 	stw	r3,-4(fp)
    c1b0:	00000106 	br	c1b8 <fstat+0x48>
    c1b4:	e03fff15 	stw	zero,-4(fp)
    c1b8:	e0bfff17 	ldw	r2,-4(fp)
    c1bc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    c1c0:	e0bffb17 	ldw	r2,-20(fp)
    c1c4:	1005003a 	cmpeq	r2,r2,zero
    c1c8:	1000121e 	bne	r2,zero,c214 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    c1cc:	e0bffb17 	ldw	r2,-20(fp)
    c1d0:	10800017 	ldw	r2,0(r2)
    c1d4:	10800817 	ldw	r2,32(r2)
    c1d8:	1005003a 	cmpeq	r2,r2,zero
    c1dc:	1000081e 	bne	r2,zero,c200 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
    c1e0:	e0bffb17 	ldw	r2,-20(fp)
    c1e4:	10800017 	ldw	r2,0(r2)
    c1e8:	10800817 	ldw	r2,32(r2)
    c1ec:	e13ffb17 	ldw	r4,-20(fp)
    c1f0:	e17ffd17 	ldw	r5,-12(fp)
    c1f4:	103ee83a 	callr	r2
    c1f8:	e0bffe15 	stw	r2,-8(fp)
    c1fc:	00000b06 	br	c22c <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    c200:	e0fffd17 	ldw	r3,-12(fp)
    c204:	00880004 	movi	r2,8192
    c208:	18800115 	stw	r2,4(r3)
      return 0;
    c20c:	e03ffe15 	stw	zero,-8(fp)
    c210:	00000606 	br	c22c <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    c214:	000c2440 	call	c244 <alt_get_errno>
    c218:	1007883a 	mov	r3,r2
    c21c:	00801444 	movi	r2,81
    c220:	18800015 	stw	r2,0(r3)
    return -1;
    c224:	00bfffc4 	movi	r2,-1
    c228:	e0bffe15 	stw	r2,-8(fp)
    c22c:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    c230:	e037883a 	mov	sp,fp
    c234:	dfc00117 	ldw	ra,4(sp)
    c238:	df000017 	ldw	fp,0(sp)
    c23c:	dec00204 	addi	sp,sp,8
    c240:	f800283a 	ret

0000c244 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    c244:	defffd04 	addi	sp,sp,-12
    c248:	dfc00215 	stw	ra,8(sp)
    c24c:	df000115 	stw	fp,4(sp)
    c250:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    c254:	00800074 	movhi	r2,1
    c258:	10865804 	addi	r2,r2,6496
    c25c:	10800017 	ldw	r2,0(r2)
    c260:	1005003a 	cmpeq	r2,r2,zero
    c264:	1000061e 	bne	r2,zero,c280 <alt_get_errno+0x3c>
    c268:	00800074 	movhi	r2,1
    c26c:	10865804 	addi	r2,r2,6496
    c270:	10800017 	ldw	r2,0(r2)
    c274:	103ee83a 	callr	r2
    c278:	e0bfff15 	stw	r2,-4(fp)
    c27c:	00000306 	br	c28c <alt_get_errno+0x48>
    c280:	00800074 	movhi	r2,1
    c284:	108de004 	addi	r2,r2,14208
    c288:	e0bfff15 	stw	r2,-4(fp)
    c28c:	e0bfff17 	ldw	r2,-4(fp)
}
    c290:	e037883a 	mov	sp,fp
    c294:	dfc00117 	ldw	ra,4(sp)
    c298:	df000017 	ldw	fp,0(sp)
    c29c:	dec00204 	addi	sp,sp,8
    c2a0:	f800283a 	ret

0000c2a4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    c2a4:	deffeb04 	addi	sp,sp,-84
    c2a8:	dfc01415 	stw	ra,80(sp)
    c2ac:	df001315 	stw	fp,76(sp)
    c2b0:	df001304 	addi	fp,sp,76
    c2b4:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    c2b8:	e0bffd17 	ldw	r2,-12(fp)
    c2bc:	1004803a 	cmplt	r2,r2,zero
    c2c0:	1000081e 	bne	r2,zero,c2e4 <isatty+0x40>
    c2c4:	e0bffd17 	ldw	r2,-12(fp)
    c2c8:	10800324 	muli	r2,r2,12
    c2cc:	1007883a 	mov	r3,r2
    c2d0:	00800074 	movhi	r2,1
    c2d4:	10817004 	addi	r2,r2,1472
    c2d8:	1887883a 	add	r3,r3,r2
    c2dc:	e0ffff15 	stw	r3,-4(fp)
    c2e0:	00000106 	br	c2e8 <isatty+0x44>
    c2e4:	e03fff15 	stw	zero,-4(fp)
    c2e8:	e0bfff17 	ldw	r2,-4(fp)
    c2ec:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
    c2f0:	e0bfed17 	ldw	r2,-76(fp)
    c2f4:	1005003a 	cmpeq	r2,r2,zero
    c2f8:	10000f1e 	bne	r2,zero,c338 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    c2fc:	e0bfed17 	ldw	r2,-76(fp)
    c300:	10800017 	ldw	r2,0(r2)
    c304:	10800817 	ldw	r2,32(r2)
    c308:	1004c03a 	cmpne	r2,r2,zero
    c30c:	1000031e 	bne	r2,zero,c31c <isatty+0x78>
    {
      return 1;
    c310:	00800044 	movi	r2,1
    c314:	e0bffe15 	stw	r2,-8(fp)
    c318:	00000c06 	br	c34c <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    c31c:	e17fee04 	addi	r5,fp,-72
    c320:	e13ffd17 	ldw	r4,-12(fp)
    c324:	000c1700 	call	c170 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    c328:	e0bfef17 	ldw	r2,-68(fp)
    c32c:	10880020 	cmpeqi	r2,r2,8192
    c330:	e0bffe15 	stw	r2,-8(fp)
    c334:	00000506 	br	c34c <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    c338:	000c3640 	call	c364 <alt_get_errno>
    c33c:	1007883a 	mov	r3,r2
    c340:	00801444 	movi	r2,81
    c344:	18800015 	stw	r2,0(r3)
    return 0;
    c348:	e03ffe15 	stw	zero,-8(fp)
    c34c:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    c350:	e037883a 	mov	sp,fp
    c354:	dfc00117 	ldw	ra,4(sp)
    c358:	df000017 	ldw	fp,0(sp)
    c35c:	dec00204 	addi	sp,sp,8
    c360:	f800283a 	ret

0000c364 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    c364:	defffd04 	addi	sp,sp,-12
    c368:	dfc00215 	stw	ra,8(sp)
    c36c:	df000115 	stw	fp,4(sp)
    c370:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    c374:	00800074 	movhi	r2,1
    c378:	10865804 	addi	r2,r2,6496
    c37c:	10800017 	ldw	r2,0(r2)
    c380:	1005003a 	cmpeq	r2,r2,zero
    c384:	1000061e 	bne	r2,zero,c3a0 <alt_get_errno+0x3c>
    c388:	00800074 	movhi	r2,1
    c38c:	10865804 	addi	r2,r2,6496
    c390:	10800017 	ldw	r2,0(r2)
    c394:	103ee83a 	callr	r2
    c398:	e0bfff15 	stw	r2,-4(fp)
    c39c:	00000306 	br	c3ac <alt_get_errno+0x48>
    c3a0:	00800074 	movhi	r2,1
    c3a4:	108de004 	addi	r2,r2,14208
    c3a8:	e0bfff15 	stw	r2,-4(fp)
    c3ac:	e0bfff17 	ldw	r2,-4(fp)
}
    c3b0:	e037883a 	mov	sp,fp
    c3b4:	dfc00117 	ldw	ra,4(sp)
    c3b8:	df000017 	ldw	fp,0(sp)
    c3bc:	dec00204 	addi	sp,sp,8
    c3c0:	f800283a 	ret

0000c3c4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    c3c4:	defffe04 	addi	sp,sp,-8
    c3c8:	dfc00115 	stw	ra,4(sp)
    c3cc:	df000015 	stw	fp,0(sp)
    c3d0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    c3d4:	01000074 	movhi	r4,1
    c3d8:	21065d04 	addi	r4,r4,6516
    c3dc:	01400074 	movhi	r5,1
    c3e0:	297ee104 	addi	r5,r5,-1148
    c3e4:	01800074 	movhi	r6,1
    c3e8:	31865d04 	addi	r6,r6,6516
    c3ec:	000c4440 	call	c444 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    c3f0:	01000034 	movhi	r4,0
    c3f4:	21000804 	addi	r4,r4,32
    c3f8:	01400034 	movhi	r5,0
    c3fc:	29400804 	addi	r5,r5,32
    c400:	01800034 	movhi	r6,0
    c404:	31806d04 	addi	r6,r6,436
    c408:	000c4440 	call	c444 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    c40c:	01000074 	movhi	r4,1
    c410:	213d2b04 	addi	r4,r4,-2900
    c414:	01400074 	movhi	r5,1
    c418:	297d2b04 	addi	r5,r5,-2900
    c41c:	01800074 	movhi	r6,1
    c420:	31bee104 	addi	r6,r6,-1148
    c424:	000c4440 	call	c444 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    c428:	000e2800 	call	e280 <alt_dcache_flush_all>
  alt_icache_flush_all();
    c42c:	000e4780 	call	e478 <alt_icache_flush_all>
}
    c430:	e037883a 	mov	sp,fp
    c434:	dfc00117 	ldw	ra,4(sp)
    c438:	df000017 	ldw	fp,0(sp)
    c43c:	dec00204 	addi	sp,sp,8
    c440:	f800283a 	ret

0000c444 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    c444:	defffc04 	addi	sp,sp,-16
    c448:	df000315 	stw	fp,12(sp)
    c44c:	df000304 	addi	fp,sp,12
    c450:	e13ffd15 	stw	r4,-12(fp)
    c454:	e17ffe15 	stw	r5,-8(fp)
    c458:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    c45c:	e0fffe17 	ldw	r3,-8(fp)
    c460:	e0bffd17 	ldw	r2,-12(fp)
    c464:	18800e26 	beq	r3,r2,c4a0 <alt_load_section+0x5c>
  {
    while( to != end )
    c468:	00000a06 	br	c494 <alt_load_section+0x50>
    {
      *to++ = *from++;
    c46c:	e0bffd17 	ldw	r2,-12(fp)
    c470:	10c00017 	ldw	r3,0(r2)
    c474:	e0bffe17 	ldw	r2,-8(fp)
    c478:	10c00015 	stw	r3,0(r2)
    c47c:	e0bffe17 	ldw	r2,-8(fp)
    c480:	10800104 	addi	r2,r2,4
    c484:	e0bffe15 	stw	r2,-8(fp)
    c488:	e0bffd17 	ldw	r2,-12(fp)
    c48c:	10800104 	addi	r2,r2,4
    c490:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    c494:	e0fffe17 	ldw	r3,-8(fp)
    c498:	e0bfff17 	ldw	r2,-4(fp)
    c49c:	18bff31e 	bne	r3,r2,c46c <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    c4a0:	e037883a 	mov	sp,fp
    c4a4:	df000017 	ldw	fp,0(sp)
    c4a8:	dec00104 	addi	sp,sp,4
    c4ac:	f800283a 	ret

0000c4b0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    c4b0:	defff804 	addi	sp,sp,-32
    c4b4:	dfc00715 	stw	ra,28(sp)
    c4b8:	df000615 	stw	fp,24(sp)
    c4bc:	df000604 	addi	fp,sp,24
    c4c0:	e13ffc15 	stw	r4,-16(fp)
    c4c4:	e17ffd15 	stw	r5,-12(fp)
    c4c8:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    c4cc:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    c4d0:	e0bffc17 	ldw	r2,-16(fp)
    c4d4:	1004803a 	cmplt	r2,r2,zero
    c4d8:	1000081e 	bne	r2,zero,c4fc <lseek+0x4c>
    c4dc:	e0bffc17 	ldw	r2,-16(fp)
    c4e0:	10800324 	muli	r2,r2,12
    c4e4:	1007883a 	mov	r3,r2
    c4e8:	00800074 	movhi	r2,1
    c4ec:	10817004 	addi	r2,r2,1472
    c4f0:	1887883a 	add	r3,r3,r2
    c4f4:	e0ffff15 	stw	r3,-4(fp)
    c4f8:	00000106 	br	c500 <lseek+0x50>
    c4fc:	e03fff15 	stw	zero,-4(fp)
    c500:	e0bfff17 	ldw	r2,-4(fp)
    c504:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
    c508:	e0bffb17 	ldw	r2,-20(fp)
    c50c:	1005003a 	cmpeq	r2,r2,zero
    c510:	1000111e 	bne	r2,zero,c558 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    c514:	e0bffb17 	ldw	r2,-20(fp)
    c518:	10800017 	ldw	r2,0(r2)
    c51c:	10800717 	ldw	r2,28(r2)
    c520:	1005003a 	cmpeq	r2,r2,zero
    c524:	1000091e 	bne	r2,zero,c54c <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    c528:	e0bffb17 	ldw	r2,-20(fp)
    c52c:	10800017 	ldw	r2,0(r2)
    c530:	10800717 	ldw	r2,28(r2)
    c534:	e13ffb17 	ldw	r4,-20(fp)
    c538:	e17ffd17 	ldw	r5,-12(fp)
    c53c:	e1bffe17 	ldw	r6,-8(fp)
    c540:	103ee83a 	callr	r2
    c544:	e0bffa15 	stw	r2,-24(fp)
    c548:	00000506 	br	c560 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    c54c:	00bfde84 	movi	r2,-134
    c550:	e0bffa15 	stw	r2,-24(fp)
    c554:	00000206 	br	c560 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
    c558:	00bfebc4 	movi	r2,-81
    c55c:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
    c560:	e0bffa17 	ldw	r2,-24(fp)
    c564:	1004403a 	cmpge	r2,r2,zero
    c568:	1000071e 	bne	r2,zero,c588 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
    c56c:	000c5a00 	call	c5a0 <alt_get_errno>
    c570:	1007883a 	mov	r3,r2
    c574:	e0bffa17 	ldw	r2,-24(fp)
    c578:	0085c83a 	sub	r2,zero,r2
    c57c:	18800015 	stw	r2,0(r3)
    rc = -1;
    c580:	00bfffc4 	movi	r2,-1
    c584:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
    c588:	e0bffa17 	ldw	r2,-24(fp)
}
    c58c:	e037883a 	mov	sp,fp
    c590:	dfc00117 	ldw	ra,4(sp)
    c594:	df000017 	ldw	fp,0(sp)
    c598:	dec00204 	addi	sp,sp,8
    c59c:	f800283a 	ret

0000c5a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    c5a0:	defffd04 	addi	sp,sp,-12
    c5a4:	dfc00215 	stw	ra,8(sp)
    c5a8:	df000115 	stw	fp,4(sp)
    c5ac:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    c5b0:	00800074 	movhi	r2,1
    c5b4:	10865804 	addi	r2,r2,6496
    c5b8:	10800017 	ldw	r2,0(r2)
    c5bc:	1005003a 	cmpeq	r2,r2,zero
    c5c0:	1000061e 	bne	r2,zero,c5dc <alt_get_errno+0x3c>
    c5c4:	00800074 	movhi	r2,1
    c5c8:	10865804 	addi	r2,r2,6496
    c5cc:	10800017 	ldw	r2,0(r2)
    c5d0:	103ee83a 	callr	r2
    c5d4:	e0bfff15 	stw	r2,-4(fp)
    c5d8:	00000306 	br	c5e8 <alt_get_errno+0x48>
    c5dc:	00800074 	movhi	r2,1
    c5e0:	108de004 	addi	r2,r2,14208
    c5e4:	e0bfff15 	stw	r2,-4(fp)
    c5e8:	e0bfff17 	ldw	r2,-4(fp)
}
    c5ec:	e037883a 	mov	sp,fp
    c5f0:	dfc00117 	ldw	ra,4(sp)
    c5f4:	df000017 	ldw	fp,0(sp)
    c5f8:	dec00204 	addi	sp,sp,8
    c5fc:	f800283a 	ret

0000c600 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    c600:	defffd04 	addi	sp,sp,-12
    c604:	dfc00215 	stw	ra,8(sp)
    c608:	df000115 	stw	fp,4(sp)
    c60c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    c610:	0009883a 	mov	r4,zero
    c614:	000cac80 	call	cac8 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    c618:	000cafc0 	call	cafc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    c61c:	01000074 	movhi	r4,1
    c620:	213ecf04 	addi	r4,r4,-1220
    c624:	01400074 	movhi	r5,1
    c628:	297ecf04 	addi	r5,r5,-1220
    c62c:	01800074 	movhi	r6,1
    c630:	31becf04 	addi	r6,r6,-1220
    c634:	000e8380 	call	e838 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    c638:	000e3b00 	call	e3b0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    c63c:	01000074 	movhi	r4,1
    c640:	21390504 	addi	r4,r4,-7148
    c644:	000f0340 	call	f034 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    c648:	d1279717 	ldw	r4,-24996(gp)
    c64c:	d1679817 	ldw	r5,-24992(gp)
    c650:	d1a79917 	ldw	r6,-24988(gp)
    c654:	00001f00 	call	1f0 <main>
    c658:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    c65c:	01000044 	movi	r4,1
    c660:	000bfe80 	call	bfe8 <close>
  exit (result);
    c664:	e13fff17 	ldw	r4,-4(fp)
    c668:	000f0480 	call	f048 <exit>

0000c66c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    c66c:	defffe04 	addi	sp,sp,-8
    c670:	df000115 	stw	fp,4(sp)
    c674:	df000104 	addi	fp,sp,4
    c678:	e13fff15 	stw	r4,-4(fp)
}
    c67c:	e037883a 	mov	sp,fp
    c680:	df000017 	ldw	fp,0(sp)
    c684:	dec00104 	addi	sp,sp,4
    c688:	f800283a 	ret

0000c68c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    c68c:	defffe04 	addi	sp,sp,-8
    c690:	df000115 	stw	fp,4(sp)
    c694:	df000104 	addi	fp,sp,4
    c698:	e13fff15 	stw	r4,-4(fp)
}
    c69c:	e037883a 	mov	sp,fp
    c6a0:	df000017 	ldw	fp,0(sp)
    c6a4:	dec00104 	addi	sp,sp,4
    c6a8:	f800283a 	ret

0000c6ac <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    c6ac:	defff704 	addi	sp,sp,-36
    c6b0:	dfc00815 	stw	ra,32(sp)
    c6b4:	df000715 	stw	fp,28(sp)
    c6b8:	df000704 	addi	fp,sp,28
    c6bc:	e13ffb15 	stw	r4,-20(fp)
    c6c0:	e17ffc15 	stw	r5,-16(fp)
    c6c4:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    c6c8:	e0bffb17 	ldw	r2,-20(fp)
    c6cc:	1004803a 	cmplt	r2,r2,zero
    c6d0:	1000081e 	bne	r2,zero,c6f4 <read+0x48>
    c6d4:	e0bffb17 	ldw	r2,-20(fp)
    c6d8:	10800324 	muli	r2,r2,12
    c6dc:	1007883a 	mov	r3,r2
    c6e0:	00800074 	movhi	r2,1
    c6e4:	10817004 	addi	r2,r2,1472
    c6e8:	1887883a 	add	r3,r3,r2
    c6ec:	e0ffff15 	stw	r3,-4(fp)
    c6f0:	00000106 	br	c6f8 <read+0x4c>
    c6f4:	e03fff15 	stw	zero,-4(fp)
    c6f8:	e0bfff17 	ldw	r2,-4(fp)
    c6fc:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    c700:	e0bffa17 	ldw	r2,-24(fp)
    c704:	1005003a 	cmpeq	r2,r2,zero
    c708:	1000241e 	bne	r2,zero,c79c <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    c70c:	e0bffa17 	ldw	r2,-24(fp)
    c710:	10800217 	ldw	r2,8(r2)
    c714:	108000cc 	andi	r2,r2,3
    c718:	10800060 	cmpeqi	r2,r2,1
    c71c:	10001a1e 	bne	r2,zero,c788 <read+0xdc>
    c720:	e0bffa17 	ldw	r2,-24(fp)
    c724:	10800017 	ldw	r2,0(r2)
    c728:	10800517 	ldw	r2,20(r2)
    c72c:	1005003a 	cmpeq	r2,r2,zero
    c730:	1000151e 	bne	r2,zero,c788 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    c734:	e0bffa17 	ldw	r2,-24(fp)
    c738:	10800017 	ldw	r2,0(r2)
    c73c:	10800517 	ldw	r2,20(r2)
    c740:	e17ffc17 	ldw	r5,-16(fp)
    c744:	e1bffd17 	ldw	r6,-12(fp)
    c748:	e13ffa17 	ldw	r4,-24(fp)
    c74c:	103ee83a 	callr	r2
    c750:	e0bff915 	stw	r2,-28(fp)
    c754:	e0bff917 	ldw	r2,-28(fp)
    c758:	1004403a 	cmpge	r2,r2,zero
    c75c:	1000071e 	bne	r2,zero,c77c <read+0xd0>
        {
          ALT_ERRNO = -rval;
    c760:	000c7cc0 	call	c7cc <alt_get_errno>
    c764:	e0fff917 	ldw	r3,-28(fp)
    c768:	00c7c83a 	sub	r3,zero,r3
    c76c:	10c00015 	stw	r3,0(r2)
          return -1;
    c770:	00bfffc4 	movi	r2,-1
    c774:	e0bffe15 	stw	r2,-8(fp)
    c778:	00000e06 	br	c7b4 <read+0x108>
        }
        return rval;
    c77c:	e0bff917 	ldw	r2,-28(fp)
    c780:	e0bffe15 	stw	r2,-8(fp)
    c784:	00000b06 	br	c7b4 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
    c788:	000c7cc0 	call	c7cc <alt_get_errno>
    c78c:	1007883a 	mov	r3,r2
    c790:	00800344 	movi	r2,13
    c794:	18800015 	stw	r2,0(r3)
    c798:	00000406 	br	c7ac <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    c79c:	000c7cc0 	call	c7cc <alt_get_errno>
    c7a0:	1007883a 	mov	r3,r2
    c7a4:	00801444 	movi	r2,81
    c7a8:	18800015 	stw	r2,0(r3)
  }
  return -1;
    c7ac:	00bfffc4 	movi	r2,-1
    c7b0:	e0bffe15 	stw	r2,-8(fp)
    c7b4:	e0bffe17 	ldw	r2,-8(fp)
}
    c7b8:	e037883a 	mov	sp,fp
    c7bc:	dfc00117 	ldw	ra,4(sp)
    c7c0:	df000017 	ldw	fp,0(sp)
    c7c4:	dec00204 	addi	sp,sp,8
    c7c8:	f800283a 	ret

0000c7cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    c7cc:	defffd04 	addi	sp,sp,-12
    c7d0:	dfc00215 	stw	ra,8(sp)
    c7d4:	df000115 	stw	fp,4(sp)
    c7d8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    c7dc:	00800074 	movhi	r2,1
    c7e0:	10865804 	addi	r2,r2,6496
    c7e4:	10800017 	ldw	r2,0(r2)
    c7e8:	1005003a 	cmpeq	r2,r2,zero
    c7ec:	1000061e 	bne	r2,zero,c808 <alt_get_errno+0x3c>
    c7f0:	00800074 	movhi	r2,1
    c7f4:	10865804 	addi	r2,r2,6496
    c7f8:	10800017 	ldw	r2,0(r2)
    c7fc:	103ee83a 	callr	r2
    c800:	e0bfff15 	stw	r2,-4(fp)
    c804:	00000306 	br	c814 <alt_get_errno+0x48>
    c808:	00800074 	movhi	r2,1
    c80c:	108de004 	addi	r2,r2,14208
    c810:	e0bfff15 	stw	r2,-4(fp)
    c814:	e0bfff17 	ldw	r2,-4(fp)
}
    c818:	e037883a 	mov	sp,fp
    c81c:	dfc00117 	ldw	ra,4(sp)
    c820:	df000017 	ldw	fp,0(sp)
    c824:	dec00204 	addi	sp,sp,8
    c828:	f800283a 	ret

0000c82c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    c82c:	defffe04 	addi	sp,sp,-8
    c830:	df000115 	stw	fp,4(sp)
    c834:	df000104 	addi	fp,sp,4
    c838:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    c83c:	e0bfff17 	ldw	r2,-4(fp)
    c840:	108000d0 	cmplti	r2,r2,3
    c844:	10000d1e 	bne	r2,zero,c87c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    c848:	e0bfff17 	ldw	r2,-4(fp)
    c84c:	00c00074 	movhi	r3,1
    c850:	18c17004 	addi	r3,r3,1472
    c854:	10800324 	muli	r2,r2,12
    c858:	10c5883a 	add	r2,r2,r3
    c85c:	10800204 	addi	r2,r2,8
    c860:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    c864:	e0bfff17 	ldw	r2,-4(fp)
    c868:	00c00074 	movhi	r3,1
    c86c:	18c17004 	addi	r3,r3,1472
    c870:	10800324 	muli	r2,r2,12
    c874:	10c5883a 	add	r2,r2,r3
    c878:	10000015 	stw	zero,0(r2)
  }
}
    c87c:	e037883a 	mov	sp,fp
    c880:	df000017 	ldw	fp,0(sp)
    c884:	dec00104 	addi	sp,sp,4
    c888:	f800283a 	ret

0000c88c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    c88c:	defff804 	addi	sp,sp,-32
    c890:	df000715 	stw	fp,28(sp)
    c894:	df000704 	addi	fp,sp,28
    c898:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c89c:	0005303a 	rdctl	r2,status
    c8a0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c8a4:	e0fffb17 	ldw	r3,-20(fp)
    c8a8:	00bfff84 	movi	r2,-2
    c8ac:	1884703a 	and	r2,r3,r2
    c8b0:	1001703a 	wrctl	status,r2
  
  return context;
    c8b4:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    c8b8:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    c8bc:	d0a00f17 	ldw	r2,-32708(gp)
    c8c0:	10c000c4 	addi	r3,r2,3
    c8c4:	00bfff04 	movi	r2,-4
    c8c8:	1884703a 	and	r2,r3,r2
    c8cc:	d0a00f15 	stw	r2,-32708(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    c8d0:	d0e00f17 	ldw	r3,-32708(gp)
    c8d4:	e0bffe17 	ldw	r2,-8(fp)
    c8d8:	1887883a 	add	r3,r3,r2
    c8dc:	00802034 	movhi	r2,128
    c8e0:	10800004 	addi	r2,r2,0
    c8e4:	10c0072e 	bgeu	r2,r3,c904 <sbrk+0x78>
    c8e8:	e0bffd17 	ldw	r2,-12(fp)
    c8ec:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c8f0:	e0bffa17 	ldw	r2,-24(fp)
    c8f4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    c8f8:	00bfffc4 	movi	r2,-1
    c8fc:	e0bfff15 	stw	r2,-4(fp)
    c900:	00000c06 	br	c934 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
    c904:	d0a00f17 	ldw	r2,-32708(gp)
    c908:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
    c90c:	d0e00f17 	ldw	r3,-32708(gp)
    c910:	e0bffe17 	ldw	r2,-8(fp)
    c914:	1885883a 	add	r2,r3,r2
    c918:	d0a00f15 	stw	r2,-32708(gp)
    c91c:	e0bffd17 	ldw	r2,-12(fp)
    c920:	e0bff915 	stw	r2,-28(fp)
    c924:	e0bff917 	ldw	r2,-28(fp)
    c928:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    c92c:	e0bffc17 	ldw	r2,-16(fp)
    c930:	e0bfff15 	stw	r2,-4(fp)
    c934:	e0bfff17 	ldw	r2,-4(fp)
} 
    c938:	e037883a 	mov	sp,fp
    c93c:	df000017 	ldw	fp,0(sp)
    c940:	dec00104 	addi	sp,sp,4
    c944:	f800283a 	ret

0000c948 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    c948:	defff704 	addi	sp,sp,-36
    c94c:	dfc00815 	stw	ra,32(sp)
    c950:	df000715 	stw	fp,28(sp)
    c954:	df000704 	addi	fp,sp,28
    c958:	e13ffb15 	stw	r4,-20(fp)
    c95c:	e17ffc15 	stw	r5,-16(fp)
    c960:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    c964:	e0bffb17 	ldw	r2,-20(fp)
    c968:	1004803a 	cmplt	r2,r2,zero
    c96c:	1000081e 	bne	r2,zero,c990 <write+0x48>
    c970:	e0bffb17 	ldw	r2,-20(fp)
    c974:	10800324 	muli	r2,r2,12
    c978:	1007883a 	mov	r3,r2
    c97c:	00800074 	movhi	r2,1
    c980:	10817004 	addi	r2,r2,1472
    c984:	1887883a 	add	r3,r3,r2
    c988:	e0ffff15 	stw	r3,-4(fp)
    c98c:	00000106 	br	c994 <write+0x4c>
    c990:	e03fff15 	stw	zero,-4(fp)
    c994:	e0bfff17 	ldw	r2,-4(fp)
    c998:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    c99c:	e0bffa17 	ldw	r2,-24(fp)
    c9a0:	1005003a 	cmpeq	r2,r2,zero
    c9a4:	1000241e 	bne	r2,zero,ca38 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    c9a8:	e0bffa17 	ldw	r2,-24(fp)
    c9ac:	10800217 	ldw	r2,8(r2)
    c9b0:	108000cc 	andi	r2,r2,3
    c9b4:	1005003a 	cmpeq	r2,r2,zero
    c9b8:	10001a1e 	bne	r2,zero,ca24 <write+0xdc>
    c9bc:	e0bffa17 	ldw	r2,-24(fp)
    c9c0:	10800017 	ldw	r2,0(r2)
    c9c4:	10800617 	ldw	r2,24(r2)
    c9c8:	1005003a 	cmpeq	r2,r2,zero
    c9cc:	1000151e 	bne	r2,zero,ca24 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    c9d0:	e0bffa17 	ldw	r2,-24(fp)
    c9d4:	10800017 	ldw	r2,0(r2)
    c9d8:	10800617 	ldw	r2,24(r2)
    c9dc:	e17ffc17 	ldw	r5,-16(fp)
    c9e0:	e1bffd17 	ldw	r6,-12(fp)
    c9e4:	e13ffa17 	ldw	r4,-24(fp)
    c9e8:	103ee83a 	callr	r2
    c9ec:	e0bff915 	stw	r2,-28(fp)
    c9f0:	e0bff917 	ldw	r2,-28(fp)
    c9f4:	1004403a 	cmpge	r2,r2,zero
    c9f8:	1000071e 	bne	r2,zero,ca18 <write+0xd0>
      {
        ALT_ERRNO = -rval;
    c9fc:	000ca680 	call	ca68 <alt_get_errno>
    ca00:	e0fff917 	ldw	r3,-28(fp)
    ca04:	00c7c83a 	sub	r3,zero,r3
    ca08:	10c00015 	stw	r3,0(r2)
        return -1;
    ca0c:	00bfffc4 	movi	r2,-1
    ca10:	e0bffe15 	stw	r2,-8(fp)
    ca14:	00000e06 	br	ca50 <write+0x108>
      }
      return rval;
    ca18:	e0bff917 	ldw	r2,-28(fp)
    ca1c:	e0bffe15 	stw	r2,-8(fp)
    ca20:	00000b06 	br	ca50 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
    ca24:	000ca680 	call	ca68 <alt_get_errno>
    ca28:	1007883a 	mov	r3,r2
    ca2c:	00800344 	movi	r2,13
    ca30:	18800015 	stw	r2,0(r3)
    ca34:	00000406 	br	ca48 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    ca38:	000ca680 	call	ca68 <alt_get_errno>
    ca3c:	1007883a 	mov	r3,r2
    ca40:	00801444 	movi	r2,81
    ca44:	18800015 	stw	r2,0(r3)
  }
  return -1;
    ca48:	00bfffc4 	movi	r2,-1
    ca4c:	e0bffe15 	stw	r2,-8(fp)
    ca50:	e0bffe17 	ldw	r2,-8(fp)
}
    ca54:	e037883a 	mov	sp,fp
    ca58:	dfc00117 	ldw	ra,4(sp)
    ca5c:	df000017 	ldw	fp,0(sp)
    ca60:	dec00204 	addi	sp,sp,8
    ca64:	f800283a 	ret

0000ca68 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ca68:	defffd04 	addi	sp,sp,-12
    ca6c:	dfc00215 	stw	ra,8(sp)
    ca70:	df000115 	stw	fp,4(sp)
    ca74:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    ca78:	00800074 	movhi	r2,1
    ca7c:	10865804 	addi	r2,r2,6496
    ca80:	10800017 	ldw	r2,0(r2)
    ca84:	1005003a 	cmpeq	r2,r2,zero
    ca88:	1000061e 	bne	r2,zero,caa4 <alt_get_errno+0x3c>
    ca8c:	00800074 	movhi	r2,1
    ca90:	10865804 	addi	r2,r2,6496
    ca94:	10800017 	ldw	r2,0(r2)
    ca98:	103ee83a 	callr	r2
    ca9c:	e0bfff15 	stw	r2,-4(fp)
    caa0:	00000306 	br	cab0 <alt_get_errno+0x48>
    caa4:	00800074 	movhi	r2,1
    caa8:	108de004 	addi	r2,r2,14208
    caac:	e0bfff15 	stw	r2,-4(fp)
    cab0:	e0bfff17 	ldw	r2,-4(fp)
}
    cab4:	e037883a 	mov	sp,fp
    cab8:	dfc00117 	ldw	ra,4(sp)
    cabc:	df000017 	ldw	fp,0(sp)
    cac0:	dec00204 	addi	sp,sp,8
    cac4:	f800283a 	ret

0000cac8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    cac8:	defffd04 	addi	sp,sp,-12
    cacc:	dfc00215 	stw	ra,8(sp)
    cad0:	df000115 	stw	fp,4(sp)
    cad4:	df000104 	addi	fp,sp,4
    cad8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
    cadc:	000ed180 	call	ed18 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    cae0:	00800044 	movi	r2,1
    cae4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    cae8:	e037883a 	mov	sp,fp
    caec:	dfc00117 	ldw	ra,4(sp)
    caf0:	df000017 	ldw	fp,0(sp)
    caf4:	dec00204 	addi	sp,sp,8
    caf8:	f800283a 	ret

0000cafc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    cafc:	defffe04 	addi	sp,sp,-8
    cb00:	dfc00115 	stw	ra,4(sp)
    cb04:	df000015 	stw	fp,0(sp)
    cb08:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER0, timer0);
    cb0c:	01040034 	movhi	r4,4096
    cb10:	21002004 	addi	r4,r4,128
    cb14:	000b883a 	mov	r5,zero
    cb18:	01800044 	movi	r6,1
    cb1c:	01c00044 	movi	r7,1
    cb20:	000d6ec0 	call	d6ec <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER1, timer1);
    ALTERA_AVALON_TIMER_INIT ( TIMER2, timer2);
    ALTERA_AVALON_TIMER_INIT ( TIMER3, timer3);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    cb24:	01000074 	movhi	r4,1
    cb28:	2101da04 	addi	r4,r4,1896
    cb2c:	000b883a 	mov	r5,zero
    cb30:	000d883a 	mov	r6,zero
    cb34:	000cd180 	call	cd18 <altera_avalon_jtag_uart_init>
    cb38:	01000074 	movhi	r4,1
    cb3c:	2101d004 	addi	r4,r4,1856
    cb40:	000cb980 	call	cb98 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_PORT0, SPI_port0);
    ALTERA_AVALON_SPI_INIT ( SPI_PORT1, SPI_port1);
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    ALTERA_AVALON_UART_INIT ( SERIAL_PORT0, Serial_port0);
    cb44:	01000074 	movhi	r4,1
    cb48:	2105f204 	addi	r4,r4,6088
    cb4c:	000b883a 	mov	r5,zero
    cb50:	01800144 	movi	r6,5
    cb54:	000d8740 	call	d874 <altera_avalon_uart_init>
    cb58:	01000074 	movhi	r4,1
    cb5c:	2105e804 	addi	r4,r4,6048
    cb60:	000cb980 	call	cb98 <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( SERIAL_PORT1, Serial_port1);
    cb64:	01000074 	movhi	r4,1
    cb68:	21062304 	addi	r4,r4,6284
    cb6c:	000b883a 	mov	r5,zero
    cb70:	01800184 	movi	r6,6
    cb74:	000d8740 	call	d874 <altera_avalon_uart_init>
    cb78:	01000074 	movhi	r4,1
    cb7c:	21061904 	addi	r4,r4,6244
    cb80:	000cb980 	call	cb98 <alt_dev_reg>
}
    cb84:	e037883a 	mov	sp,fp
    cb88:	dfc00117 	ldw	ra,4(sp)
    cb8c:	df000017 	ldw	fp,0(sp)
    cb90:	dec00204 	addi	sp,sp,8
    cb94:	f800283a 	ret

0000cb98 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    cb98:	defffd04 	addi	sp,sp,-12
    cb9c:	dfc00215 	stw	ra,8(sp)
    cba0:	df000115 	stw	fp,4(sp)
    cba4:	df000104 	addi	fp,sp,4
    cba8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    cbac:	e13fff17 	ldw	r4,-4(fp)
    cbb0:	01400074 	movhi	r5,1
    cbb4:	29465504 	addi	r5,r5,6484
    cbb8:	000e29c0 	call	e29c <alt_dev_llist_insert>
}
    cbbc:	e037883a 	mov	sp,fp
    cbc0:	dfc00117 	ldw	ra,4(sp)
    cbc4:	df000017 	ldw	fp,0(sp)
    cbc8:	dec00204 	addi	sp,sp,8
    cbcc:	f800283a 	ret

0000cbd0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    cbd0:	defffa04 	addi	sp,sp,-24
    cbd4:	dfc00515 	stw	ra,20(sp)
    cbd8:	df000415 	stw	fp,16(sp)
    cbdc:	df000404 	addi	fp,sp,16
    cbe0:	e13ffd15 	stw	r4,-12(fp)
    cbe4:	e17ffe15 	stw	r5,-8(fp)
    cbe8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    cbec:	e0bffd17 	ldw	r2,-12(fp)
    cbf0:	10800017 	ldw	r2,0(r2)
    cbf4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    cbf8:	e0bffc17 	ldw	r2,-16(fp)
    cbfc:	11000a04 	addi	r4,r2,40
    cc00:	e0bffd17 	ldw	r2,-12(fp)
    cc04:	11c00217 	ldw	r7,8(r2)
    cc08:	e17ffe17 	ldw	r5,-8(fp)
    cc0c:	e1bfff17 	ldw	r6,-4(fp)
    cc10:	000d2180 	call	d218 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    cc14:	e037883a 	mov	sp,fp
    cc18:	dfc00117 	ldw	ra,4(sp)
    cc1c:	df000017 	ldw	fp,0(sp)
    cc20:	dec00204 	addi	sp,sp,8
    cc24:	f800283a 	ret

0000cc28 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    cc28:	defffa04 	addi	sp,sp,-24
    cc2c:	dfc00515 	stw	ra,20(sp)
    cc30:	df000415 	stw	fp,16(sp)
    cc34:	df000404 	addi	fp,sp,16
    cc38:	e13ffd15 	stw	r4,-12(fp)
    cc3c:	e17ffe15 	stw	r5,-8(fp)
    cc40:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    cc44:	e0bffd17 	ldw	r2,-12(fp)
    cc48:	10800017 	ldw	r2,0(r2)
    cc4c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    cc50:	e0bffc17 	ldw	r2,-16(fp)
    cc54:	11000a04 	addi	r4,r2,40
    cc58:	e0bffd17 	ldw	r2,-12(fp)
    cc5c:	11c00217 	ldw	r7,8(r2)
    cc60:	e17ffe17 	ldw	r5,-8(fp)
    cc64:	e1bfff17 	ldw	r6,-4(fp)
    cc68:	000d43c0 	call	d43c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    cc6c:	e037883a 	mov	sp,fp
    cc70:	dfc00117 	ldw	ra,4(sp)
    cc74:	df000017 	ldw	fp,0(sp)
    cc78:	dec00204 	addi	sp,sp,8
    cc7c:	f800283a 	ret

0000cc80 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    cc80:	defffc04 	addi	sp,sp,-16
    cc84:	dfc00315 	stw	ra,12(sp)
    cc88:	df000215 	stw	fp,8(sp)
    cc8c:	df000204 	addi	fp,sp,8
    cc90:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    cc94:	e0bfff17 	ldw	r2,-4(fp)
    cc98:	10800017 	ldw	r2,0(r2)
    cc9c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    cca0:	e0bffe17 	ldw	r2,-8(fp)
    cca4:	11000a04 	addi	r4,r2,40
    cca8:	e0bfff17 	ldw	r2,-4(fp)
    ccac:	11400217 	ldw	r5,8(r2)
    ccb0:	000d0b00 	call	d0b0 <altera_avalon_jtag_uart_close>
}
    ccb4:	e037883a 	mov	sp,fp
    ccb8:	dfc00117 	ldw	ra,4(sp)
    ccbc:	df000017 	ldw	fp,0(sp)
    ccc0:	dec00204 	addi	sp,sp,8
    ccc4:	f800283a 	ret

0000ccc8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    ccc8:	defffa04 	addi	sp,sp,-24
    cccc:	dfc00515 	stw	ra,20(sp)
    ccd0:	df000415 	stw	fp,16(sp)
    ccd4:	df000404 	addi	fp,sp,16
    ccd8:	e13ffd15 	stw	r4,-12(fp)
    ccdc:	e17ffe15 	stw	r5,-8(fp)
    cce0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    cce4:	e0bffd17 	ldw	r2,-12(fp)
    cce8:	10800017 	ldw	r2,0(r2)
    ccec:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    ccf0:	e0bffc17 	ldw	r2,-16(fp)
    ccf4:	11000a04 	addi	r4,r2,40
    ccf8:	e17ffe17 	ldw	r5,-8(fp)
    ccfc:	e1bfff17 	ldw	r6,-4(fp)
    cd00:	000d1240 	call	d124 <altera_avalon_jtag_uart_ioctl>
}
    cd04:	e037883a 	mov	sp,fp
    cd08:	dfc00117 	ldw	ra,4(sp)
    cd0c:	df000017 	ldw	fp,0(sp)
    cd10:	dec00204 	addi	sp,sp,8
    cd14:	f800283a 	ret

0000cd18 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    cd18:	defffa04 	addi	sp,sp,-24
    cd1c:	dfc00515 	stw	ra,20(sp)
    cd20:	df000415 	stw	fp,16(sp)
    cd24:	df000404 	addi	fp,sp,16
    cd28:	e13ffd15 	stw	r4,-12(fp)
    cd2c:	e17ffe15 	stw	r5,-8(fp)
    cd30:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    cd34:	e0fffd17 	ldw	r3,-12(fp)
    cd38:	00800044 	movi	r2,1
    cd3c:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    cd40:	e0bffd17 	ldw	r2,-12(fp)
    cd44:	10800017 	ldw	r2,0(r2)
    cd48:	11000104 	addi	r4,r2,4
    cd4c:	e0bffd17 	ldw	r2,-12(fp)
    cd50:	10800817 	ldw	r2,32(r2)
    cd54:	1007883a 	mov	r3,r2
    cd58:	2005883a 	mov	r2,r4
    cd5c:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    cd60:	e13ffe17 	ldw	r4,-8(fp)
    cd64:	e17fff17 	ldw	r5,-4(fp)
    cd68:	d8000015 	stw	zero,0(sp)
    cd6c:	01800074 	movhi	r6,1
    cd70:	31b37604 	addi	r6,r6,-12840
    cd74:	e1fffd17 	ldw	r7,-12(fp)
    cd78:	000e4a80 	call	e4a8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    cd7c:	e0bffd17 	ldw	r2,-12(fp)
    cd80:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    cd84:	e0bffd17 	ldw	r2,-12(fp)
    cd88:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    cd8c:	00800074 	movhi	r2,1
    cd90:	108de504 	addi	r2,r2,14228
    cd94:	10800017 	ldw	r2,0(r2)
    cd98:	100b883a 	mov	r5,r2
    cd9c:	01800074 	movhi	r6,1
    cda0:	31b40004 	addi	r6,r6,-12288
    cda4:	e1fffd17 	ldw	r7,-12(fp)
    cda8:	000e12c0 	call	e12c <alt_alarm_start>
    cdac:	1004403a 	cmpge	r2,r2,zero
    cdb0:	1000041e 	bne	r2,zero,cdc4 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    cdb4:	e0fffd17 	ldw	r3,-12(fp)
    cdb8:	00a00034 	movhi	r2,32768
    cdbc:	10bfffc4 	addi	r2,r2,-1
    cdc0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    cdc4:	e037883a 	mov	sp,fp
    cdc8:	dfc00117 	ldw	ra,4(sp)
    cdcc:	df000017 	ldw	fp,0(sp)
    cdd0:	dec00204 	addi	sp,sp,8
    cdd4:	f800283a 	ret

0000cdd8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    cdd8:	defff804 	addi	sp,sp,-32
    cddc:	df000715 	stw	fp,28(sp)
    cde0:	df000704 	addi	fp,sp,28
    cde4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    cde8:	e0bfff17 	ldw	r2,-4(fp)
    cdec:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
    cdf0:	e0bffe17 	ldw	r2,-8(fp)
    cdf4:	10800017 	ldw	r2,0(r2)
    cdf8:	e0bffd15 	stw	r2,-12(fp)
    cdfc:	00000006 	br	ce00 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    ce00:	e0bffd17 	ldw	r2,-12(fp)
    ce04:	10800104 	addi	r2,r2,4
    ce08:	10800037 	ldwio	r2,0(r2)
    ce0c:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    ce10:	e0bffc17 	ldw	r2,-16(fp)
    ce14:	1080c00c 	andi	r2,r2,768
    ce18:	1005003a 	cmpeq	r2,r2,zero
    ce1c:	1000741e 	bne	r2,zero,cff0 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    ce20:	e0bffc17 	ldw	r2,-16(fp)
    ce24:	1080400c 	andi	r2,r2,256
    ce28:	1005003a 	cmpeq	r2,r2,zero
    ce2c:	1000351e 	bne	r2,zero,cf04 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    ce30:	00800074 	movhi	r2,1
    ce34:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ce38:	e0bffe17 	ldw	r2,-8(fp)
    ce3c:	10800a17 	ldw	r2,40(r2)
    ce40:	10800044 	addi	r2,r2,1
    ce44:	1081ffcc 	andi	r2,r2,2047
    ce48:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
    ce4c:	e0bffe17 	ldw	r2,-8(fp)
    ce50:	10c00b17 	ldw	r3,44(r2)
    ce54:	e0bffa17 	ldw	r2,-24(fp)
    ce58:	18801626 	beq	r3,r2,ceb4 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    ce5c:	e0bffd17 	ldw	r2,-12(fp)
    ce60:	10800037 	ldwio	r2,0(r2)
    ce64:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    ce68:	e0bffb17 	ldw	r2,-20(fp)
    ce6c:	10a0000c 	andi	r2,r2,32768
    ce70:	1005003a 	cmpeq	r2,r2,zero
    ce74:	10000f1e 	bne	r2,zero,ceb4 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    ce78:	e0bffe17 	ldw	r2,-8(fp)
    ce7c:	10c00a17 	ldw	r3,40(r2)
    ce80:	e0bffb17 	ldw	r2,-20(fp)
    ce84:	1009883a 	mov	r4,r2
    ce88:	e0bffe17 	ldw	r2,-8(fp)
    ce8c:	1885883a 	add	r2,r3,r2
    ce90:	10800e04 	addi	r2,r2,56
    ce94:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ce98:	e0bffe17 	ldw	r2,-8(fp)
    ce9c:	10800a17 	ldw	r2,40(r2)
    cea0:	10800044 	addi	r2,r2,1
    cea4:	10c1ffcc 	andi	r3,r2,2047
    cea8:	e0bffe17 	ldw	r2,-8(fp)
    ceac:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    ceb0:	003fe106 	br	ce38 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    ceb4:	e0bffb17 	ldw	r2,-20(fp)
    ceb8:	10bfffec 	andhi	r2,r2,65535
    cebc:	1005003a 	cmpeq	r2,r2,zero
    cec0:	1000101e 	bne	r2,zero,cf04 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    cec4:	e0bffe17 	ldw	r2,-8(fp)
    cec8:	10c00817 	ldw	r3,32(r2)
    cecc:	00bfff84 	movi	r2,-2
    ced0:	1886703a 	and	r3,r3,r2
    ced4:	e0bffe17 	ldw	r2,-8(fp)
    ced8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    cedc:	e0bffd17 	ldw	r2,-12(fp)
    cee0:	11000104 	addi	r4,r2,4
    cee4:	e0bffe17 	ldw	r2,-8(fp)
    cee8:	10800817 	ldw	r2,32(r2)
    ceec:	1007883a 	mov	r3,r2
    cef0:	2005883a 	mov	r2,r4
    cef4:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    cef8:	e0bffd17 	ldw	r2,-12(fp)
    cefc:	10800104 	addi	r2,r2,4
    cf00:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    cf04:	e0bffc17 	ldw	r2,-16(fp)
    cf08:	1080800c 	andi	r2,r2,512
    cf0c:	1005003a 	cmpeq	r2,r2,zero
    cf10:	103fbb1e 	bne	r2,zero,ce00 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    cf14:	e0bffc17 	ldw	r2,-16(fp)
    cf18:	10bfffec 	andhi	r2,r2,65535
    cf1c:	1004d43a 	srli	r2,r2,16
    cf20:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    cf24:	00001506 	br	cf7c <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    cf28:	e13ffd17 	ldw	r4,-12(fp)
    cf2c:	e0bffe17 	ldw	r2,-8(fp)
    cf30:	10c00d17 	ldw	r3,52(r2)
    cf34:	e0bffe17 	ldw	r2,-8(fp)
    cf38:	1885883a 	add	r2,r3,r2
    cf3c:	10820e04 	addi	r2,r2,2104
    cf40:	10800003 	ldbu	r2,0(r2)
    cf44:	10c03fcc 	andi	r3,r2,255
    cf48:	18c0201c 	xori	r3,r3,128
    cf4c:	18ffe004 	addi	r3,r3,-128
    cf50:	2005883a 	mov	r2,r4
    cf54:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    cf58:	e0bffe17 	ldw	r2,-8(fp)
    cf5c:	10800d17 	ldw	r2,52(r2)
    cf60:	10800044 	addi	r2,r2,1
    cf64:	10c1ffcc 	andi	r3,r2,2047
    cf68:	e0bffe17 	ldw	r2,-8(fp)
    cf6c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    cf70:	e0bff917 	ldw	r2,-28(fp)
    cf74:	10bfffc4 	addi	r2,r2,-1
    cf78:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    cf7c:	e0bff917 	ldw	r2,-28(fp)
    cf80:	1005003a 	cmpeq	r2,r2,zero
    cf84:	1000051e 	bne	r2,zero,cf9c <altera_avalon_jtag_uart_irq+0x1c4>
    cf88:	e0bffe17 	ldw	r2,-8(fp)
    cf8c:	10c00d17 	ldw	r3,52(r2)
    cf90:	e0bffe17 	ldw	r2,-8(fp)
    cf94:	10800c17 	ldw	r2,48(r2)
    cf98:	18bfe31e 	bne	r3,r2,cf28 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    cf9c:	e0bff917 	ldw	r2,-28(fp)
    cfa0:	1005003a 	cmpeq	r2,r2,zero
    cfa4:	103f961e 	bne	r2,zero,ce00 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    cfa8:	e0bffe17 	ldw	r2,-8(fp)
    cfac:	10c00817 	ldw	r3,32(r2)
    cfb0:	00bfff44 	movi	r2,-3
    cfb4:	1886703a 	and	r3,r3,r2
    cfb8:	e0bffe17 	ldw	r2,-8(fp)
    cfbc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    cfc0:	e0bffe17 	ldw	r2,-8(fp)
    cfc4:	10800017 	ldw	r2,0(r2)
    cfc8:	11000104 	addi	r4,r2,4
    cfcc:	e0bffe17 	ldw	r2,-8(fp)
    cfd0:	10800817 	ldw	r2,32(r2)
    cfd4:	1007883a 	mov	r3,r2
    cfd8:	2005883a 	mov	r2,r4
    cfdc:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    cfe0:	e0bffd17 	ldw	r2,-12(fp)
    cfe4:	10800104 	addi	r2,r2,4
    cfe8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    cfec:	003f8406 	br	ce00 <altera_avalon_jtag_uart_irq+0x28>
}
    cff0:	e037883a 	mov	sp,fp
    cff4:	df000017 	ldw	fp,0(sp)
    cff8:	dec00104 	addi	sp,sp,4
    cffc:	f800283a 	ret

0000d000 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    d000:	defffc04 	addi	sp,sp,-16
    d004:	df000315 	stw	fp,12(sp)
    d008:	df000304 	addi	fp,sp,12
    d00c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    d010:	e0bfff17 	ldw	r2,-4(fp)
    d014:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    d018:	e0bffe17 	ldw	r2,-8(fp)
    d01c:	10800017 	ldw	r2,0(r2)
    d020:	10800104 	addi	r2,r2,4
    d024:	10800037 	ldwio	r2,0(r2)
    d028:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    d02c:	e0bffd17 	ldw	r2,-12(fp)
    d030:	1081000c 	andi	r2,r2,1024
    d034:	1005003a 	cmpeq	r2,r2,zero
    d038:	10000c1e 	bne	r2,zero,d06c <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    d03c:	e0bffe17 	ldw	r2,-8(fp)
    d040:	10800017 	ldw	r2,0(r2)
    d044:	11000104 	addi	r4,r2,4
    d048:	e0bffe17 	ldw	r2,-8(fp)
    d04c:	10800817 	ldw	r2,32(r2)
    d050:	10810014 	ori	r2,r2,1024
    d054:	1007883a 	mov	r3,r2
    d058:	2005883a 	mov	r2,r4
    d05c:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
    d060:	e0bffe17 	ldw	r2,-8(fp)
    d064:	10000915 	stw	zero,36(r2)
    d068:	00000a06 	br	d094 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    d06c:	e0bffe17 	ldw	r2,-8(fp)
    d070:	10c00917 	ldw	r3,36(r2)
    d074:	00a00034 	movhi	r2,32768
    d078:	10bfff04 	addi	r2,r2,-4
    d07c:	10c00536 	bltu	r2,r3,d094 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
    d080:	e0bffe17 	ldw	r2,-8(fp)
    d084:	10800917 	ldw	r2,36(r2)
    d088:	10c00044 	addi	r3,r2,1
    d08c:	e0bffe17 	ldw	r2,-8(fp)
    d090:	10c00915 	stw	r3,36(r2)
    d094:	00800074 	movhi	r2,1
    d098:	108de504 	addi	r2,r2,14228
    d09c:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    d0a0:	e037883a 	mov	sp,fp
    d0a4:	df000017 	ldw	fp,0(sp)
    d0a8:	dec00104 	addi	sp,sp,4
    d0ac:	f800283a 	ret

0000d0b0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    d0b0:	defffc04 	addi	sp,sp,-16
    d0b4:	df000315 	stw	fp,12(sp)
    d0b8:	df000304 	addi	fp,sp,12
    d0bc:	e13ffd15 	stw	r4,-12(fp)
    d0c0:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    d0c4:	00000706 	br	d0e4 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
    d0c8:	e0bffe17 	ldw	r2,-8(fp)
    d0cc:	1090000c 	andi	r2,r2,16384
    d0d0:	1005003a 	cmpeq	r2,r2,zero
    d0d4:	1000031e 	bne	r2,zero,d0e4 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
    d0d8:	00bffd44 	movi	r2,-11
    d0dc:	e0bfff15 	stw	r2,-4(fp)
    d0e0:	00000b06 	br	d110 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    d0e4:	e0bffd17 	ldw	r2,-12(fp)
    d0e8:	10c00d17 	ldw	r3,52(r2)
    d0ec:	e0bffd17 	ldw	r2,-12(fp)
    d0f0:	10800c17 	ldw	r2,48(r2)
    d0f4:	18800526 	beq	r3,r2,d10c <altera_avalon_jtag_uart_close+0x5c>
    d0f8:	e0bffd17 	ldw	r2,-12(fp)
    d0fc:	10c00917 	ldw	r3,36(r2)
    d100:	e0bffd17 	ldw	r2,-12(fp)
    d104:	10800117 	ldw	r2,4(r2)
    d108:	18bfef36 	bltu	r3,r2,d0c8 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    d10c:	e03fff15 	stw	zero,-4(fp)
    d110:	e0bfff17 	ldw	r2,-4(fp)
}
    d114:	e037883a 	mov	sp,fp
    d118:	df000017 	ldw	fp,0(sp)
    d11c:	dec00104 	addi	sp,sp,4
    d120:	f800283a 	ret

0000d124 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    d124:	defff804 	addi	sp,sp,-32
    d128:	df000715 	stw	fp,28(sp)
    d12c:	df000704 	addi	fp,sp,28
    d130:	e13ffb15 	stw	r4,-20(fp)
    d134:	e17ffc15 	stw	r5,-16(fp)
    d138:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
    d13c:	00bff9c4 	movi	r2,-25
    d140:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
    d144:	e0bffc17 	ldw	r2,-16(fp)
    d148:	e0bfff15 	stw	r2,-4(fp)
    d14c:	e0ffff17 	ldw	r3,-4(fp)
    d150:	189a8060 	cmpeqi	r2,r3,27137
    d154:	1000041e 	bne	r2,zero,d168 <altera_avalon_jtag_uart_ioctl+0x44>
    d158:	e0ffff17 	ldw	r3,-4(fp)
    d15c:	189a80a0 	cmpeqi	r2,r3,27138
    d160:	10001b1e 	bne	r2,zero,d1d0 <altera_avalon_jtag_uart_ioctl+0xac>
    d164:	00002706 	br	d204 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    d168:	e0bffb17 	ldw	r2,-20(fp)
    d16c:	10c00117 	ldw	r3,4(r2)
    d170:	00a00034 	movhi	r2,32768
    d174:	10bfffc4 	addi	r2,r2,-1
    d178:	18802226 	beq	r3,r2,d204 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
    d17c:	e0bffd17 	ldw	r2,-12(fp)
    d180:	10800017 	ldw	r2,0(r2)
    d184:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    d188:	e0bff917 	ldw	r2,-28(fp)
    d18c:	10800090 	cmplti	r2,r2,2
    d190:	1000071e 	bne	r2,zero,d1b0 <altera_avalon_jtag_uart_ioctl+0x8c>
    d194:	e0fff917 	ldw	r3,-28(fp)
    d198:	00a00034 	movhi	r2,32768
    d19c:	10bfffc4 	addi	r2,r2,-1
    d1a0:	18800326 	beq	r3,r2,d1b0 <altera_avalon_jtag_uart_ioctl+0x8c>
    d1a4:	e0bff917 	ldw	r2,-28(fp)
    d1a8:	e0bffe15 	stw	r2,-8(fp)
    d1ac:	00000306 	br	d1bc <altera_avalon_jtag_uart_ioctl+0x98>
    d1b0:	00e00034 	movhi	r3,32768
    d1b4:	18ffff84 	addi	r3,r3,-2
    d1b8:	e0fffe15 	stw	r3,-8(fp)
    d1bc:	e0bffb17 	ldw	r2,-20(fp)
    d1c0:	e0fffe17 	ldw	r3,-8(fp)
    d1c4:	10c00115 	stw	r3,4(r2)
      rc = 0;
    d1c8:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
    d1cc:	00000d06 	br	d204 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    d1d0:	e0bffb17 	ldw	r2,-20(fp)
    d1d4:	10c00117 	ldw	r3,4(r2)
    d1d8:	00a00034 	movhi	r2,32768
    d1dc:	10bfffc4 	addi	r2,r2,-1
    d1e0:	18800826 	beq	r3,r2,d204 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    d1e4:	e13ffd17 	ldw	r4,-12(fp)
    d1e8:	e0bffb17 	ldw	r2,-20(fp)
    d1ec:	10c00917 	ldw	r3,36(r2)
    d1f0:	e0bffb17 	ldw	r2,-20(fp)
    d1f4:	10800117 	ldw	r2,4(r2)
    d1f8:	1885803a 	cmpltu	r2,r3,r2
    d1fc:	20800015 	stw	r2,0(r4)
      rc = 0;
    d200:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
    d204:	e0bffa17 	ldw	r2,-24(fp)
}
    d208:	e037883a 	mov	sp,fp
    d20c:	df000017 	ldw	fp,0(sp)
    d210:	dec00104 	addi	sp,sp,4
    d214:	f800283a 	ret

0000d218 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    d218:	defff204 	addi	sp,sp,-56
    d21c:	dfc00d15 	stw	ra,52(sp)
    d220:	df000c15 	stw	fp,48(sp)
    d224:	df000c04 	addi	fp,sp,48
    d228:	e13ffb15 	stw	r4,-20(fp)
    d22c:	e17ffc15 	stw	r5,-16(fp)
    d230:	e1bffd15 	stw	r6,-12(fp)
    d234:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
    d238:	e0bffc17 	ldw	r2,-16(fp)
    d23c:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    d240:	00004806 	br	d364 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    d244:	e0bffb17 	ldw	r2,-20(fp)
    d248:	10800a17 	ldw	r2,40(r2)
    d24c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    d250:	e0bffb17 	ldw	r2,-20(fp)
    d254:	10800b17 	ldw	r2,44(r2)
    d258:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
    d25c:	e0fff717 	ldw	r3,-36(fp)
    d260:	e0bff617 	ldw	r2,-40(fp)
    d264:	18800536 	bltu	r3,r2,d27c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    d268:	e0bff717 	ldw	r2,-36(fp)
    d26c:	e0fff617 	ldw	r3,-40(fp)
    d270:	10c5c83a 	sub	r2,r2,r3
    d274:	e0bff815 	stw	r2,-32(fp)
    d278:	00000406 	br	d28c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    d27c:	00820004 	movi	r2,2048
    d280:	e0fff617 	ldw	r3,-40(fp)
    d284:	10c5c83a 	sub	r2,r2,r3
    d288:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    d28c:	e0bff817 	ldw	r2,-32(fp)
    d290:	1005003a 	cmpeq	r2,r2,zero
    d294:	10001f1e 	bne	r2,zero,d314 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
    d298:	e0fffd17 	ldw	r3,-12(fp)
    d29c:	e0bff817 	ldw	r2,-32(fp)
    d2a0:	1880022e 	bgeu	r3,r2,d2ac <altera_avalon_jtag_uart_read+0x94>
        n = space;
    d2a4:	e0bffd17 	ldw	r2,-12(fp)
    d2a8:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    d2ac:	e0bffb17 	ldw	r2,-20(fp)
    d2b0:	10c00e04 	addi	r3,r2,56
    d2b4:	e0bff617 	ldw	r2,-40(fp)
    d2b8:	1887883a 	add	r3,r3,r2
    d2bc:	e0bffa17 	ldw	r2,-24(fp)
    d2c0:	1009883a 	mov	r4,r2
    d2c4:	180b883a 	mov	r5,r3
    d2c8:	e1bff817 	ldw	r6,-32(fp)
    d2cc:	0003ec40 	call	3ec4 <memcpy>
      ptr   += n;
    d2d0:	e0fff817 	ldw	r3,-32(fp)
    d2d4:	e0bffa17 	ldw	r2,-24(fp)
    d2d8:	10c5883a 	add	r2,r2,r3
    d2dc:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
    d2e0:	e0fffd17 	ldw	r3,-12(fp)
    d2e4:	e0bff817 	ldw	r2,-32(fp)
    d2e8:	1885c83a 	sub	r2,r3,r2
    d2ec:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    d2f0:	e0fff617 	ldw	r3,-40(fp)
    d2f4:	e0bff817 	ldw	r2,-32(fp)
    d2f8:	1885883a 	add	r2,r3,r2
    d2fc:	10c1ffcc 	andi	r3,r2,2047
    d300:	e0bffb17 	ldw	r2,-20(fp)
    d304:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    d308:	e0bffd17 	ldw	r2,-12(fp)
    d30c:	10800048 	cmpgei	r2,r2,1
    d310:	103fcc1e 	bne	r2,zero,d244 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
    d314:	e0fffa17 	ldw	r3,-24(fp)
    d318:	e0bffc17 	ldw	r2,-16(fp)
    d31c:	1880141e 	bne	r3,r2,d370 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    d320:	e0bffe17 	ldw	r2,-8(fp)
    d324:	1090000c 	andi	r2,r2,16384
    d328:	1004c03a 	cmpne	r2,r2,zero
    d32c:	1000101e 	bne	r2,zero,d370 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    d330:	e0bffb17 	ldw	r2,-20(fp)
    d334:	10c00a17 	ldw	r3,40(r2)
    d338:	e0bff717 	ldw	r2,-36(fp)
    d33c:	1880051e 	bne	r3,r2,d354 <altera_avalon_jtag_uart_read+0x13c>
    d340:	e0bffb17 	ldw	r2,-20(fp)
    d344:	10c00917 	ldw	r3,36(r2)
    d348:	e0bffb17 	ldw	r2,-20(fp)
    d34c:	10800117 	ldw	r2,4(r2)
    d350:	18bff736 	bltu	r3,r2,d330 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    d354:	e0bffb17 	ldw	r2,-20(fp)
    d358:	10c00a17 	ldw	r3,40(r2)
    d35c:	e0bff717 	ldw	r2,-36(fp)
    d360:	18800326 	beq	r3,r2,d370 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    d364:	e0bffd17 	ldw	r2,-12(fp)
    d368:	10800048 	cmpgei	r2,r2,1
    d36c:	103fb51e 	bne	r2,zero,d244 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    d370:	e0fffa17 	ldw	r3,-24(fp)
    d374:	e0bffc17 	ldw	r2,-16(fp)
    d378:	18801926 	beq	r3,r2,d3e0 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d37c:	0005303a 	rdctl	r2,status
    d380:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d384:	e0fff517 	ldw	r3,-44(fp)
    d388:	00bfff84 	movi	r2,-2
    d38c:	1884703a 	and	r2,r3,r2
    d390:	1001703a 	wrctl	status,r2
  
  return context;
    d394:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    d398:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    d39c:	e0bffb17 	ldw	r2,-20(fp)
    d3a0:	10800817 	ldw	r2,32(r2)
    d3a4:	10c00054 	ori	r3,r2,1
    d3a8:	e0bffb17 	ldw	r2,-20(fp)
    d3ac:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    d3b0:	e0bffb17 	ldw	r2,-20(fp)
    d3b4:	10800017 	ldw	r2,0(r2)
    d3b8:	11000104 	addi	r4,r2,4
    d3bc:	e0bffb17 	ldw	r2,-20(fp)
    d3c0:	10800817 	ldw	r2,32(r2)
    d3c4:	1007883a 	mov	r3,r2
    d3c8:	2005883a 	mov	r2,r4
    d3cc:	10c00035 	stwio	r3,0(r2)
    d3d0:	e0bff917 	ldw	r2,-28(fp)
    d3d4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d3d8:	e0bff417 	ldw	r2,-48(fp)
    d3dc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    d3e0:	e0fffa17 	ldw	r3,-24(fp)
    d3e4:	e0bffc17 	ldw	r2,-16(fp)
    d3e8:	18800526 	beq	r3,r2,d400 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
    d3ec:	e0fffa17 	ldw	r3,-24(fp)
    d3f0:	e0bffc17 	ldw	r2,-16(fp)
    d3f4:	1887c83a 	sub	r3,r3,r2
    d3f8:	e0ffff15 	stw	r3,-4(fp)
    d3fc:	00000906 	br	d424 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
    d400:	e0bffe17 	ldw	r2,-8(fp)
    d404:	1090000c 	andi	r2,r2,16384
    d408:	1005003a 	cmpeq	r2,r2,zero
    d40c:	1000031e 	bne	r2,zero,d41c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    d410:	00bffd44 	movi	r2,-11
    d414:	e0bfff15 	stw	r2,-4(fp)
    d418:	00000206 	br	d424 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
    d41c:	00bffec4 	movi	r2,-5
    d420:	e0bfff15 	stw	r2,-4(fp)
    d424:	e0bfff17 	ldw	r2,-4(fp)
}
    d428:	e037883a 	mov	sp,fp
    d42c:	dfc00117 	ldw	ra,4(sp)
    d430:	df000017 	ldw	fp,0(sp)
    d434:	dec00204 	addi	sp,sp,8
    d438:	f800283a 	ret

0000d43c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    d43c:	defff204 	addi	sp,sp,-56
    d440:	dfc00d15 	stw	ra,52(sp)
    d444:	df000c15 	stw	fp,48(sp)
    d448:	df000c04 	addi	fp,sp,48
    d44c:	e13ffb15 	stw	r4,-20(fp)
    d450:	e17ffc15 	stw	r5,-16(fp)
    d454:	e1bffd15 	stw	r6,-12(fp)
    d458:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    d45c:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    d460:	e0bffc17 	ldw	r2,-16(fp)
    d464:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    d468:	00003a06 	br	d554 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    d46c:	e0bffb17 	ldw	r2,-20(fp)
    d470:	10800c17 	ldw	r2,48(r2)
    d474:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
    d478:	e0bffb17 	ldw	r2,-20(fp)
    d47c:	10800d17 	ldw	r2,52(r2)
    d480:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
    d484:	e0fffa17 	ldw	r3,-24(fp)
    d488:	e0bff917 	ldw	r2,-28(fp)
    d48c:	1880062e 	bgeu	r3,r2,d4a8 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    d490:	e0fff917 	ldw	r3,-28(fp)
    d494:	e0bffa17 	ldw	r2,-24(fp)
    d498:	1885c83a 	sub	r2,r3,r2
    d49c:	10bfffc4 	addi	r2,r2,-1
    d4a0:	e0bff815 	stw	r2,-32(fp)
    d4a4:	00000c06 	br	d4d8 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
    d4a8:	e0bff917 	ldw	r2,-28(fp)
    d4ac:	1005003a 	cmpeq	r2,r2,zero
    d4b0:	1000051e 	bne	r2,zero,d4c8 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    d4b4:	00820004 	movi	r2,2048
    d4b8:	e0fffa17 	ldw	r3,-24(fp)
    d4bc:	10c5c83a 	sub	r2,r2,r3
    d4c0:	e0bff815 	stw	r2,-32(fp)
    d4c4:	00000406 	br	d4d8 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    d4c8:	0081ffc4 	movi	r2,2047
    d4cc:	e0fffa17 	ldw	r3,-24(fp)
    d4d0:	10c5c83a 	sub	r2,r2,r3
    d4d4:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    d4d8:	e0bff817 	ldw	r2,-32(fp)
    d4dc:	1005003a 	cmpeq	r2,r2,zero
    d4e0:	10001f1e 	bne	r2,zero,d560 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
    d4e4:	e0fffd17 	ldw	r3,-12(fp)
    d4e8:	e0bff817 	ldw	r2,-32(fp)
    d4ec:	1880022e 	bgeu	r3,r2,d4f8 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
    d4f0:	e0bffd17 	ldw	r2,-12(fp)
    d4f4:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    d4f8:	e0bffb17 	ldw	r2,-20(fp)
    d4fc:	10c20e04 	addi	r3,r2,2104
    d500:	e0bffa17 	ldw	r2,-24(fp)
    d504:	1885883a 	add	r2,r3,r2
    d508:	e0fffc17 	ldw	r3,-16(fp)
    d50c:	1009883a 	mov	r4,r2
    d510:	180b883a 	mov	r5,r3
    d514:	e1bff817 	ldw	r6,-32(fp)
    d518:	0003ec40 	call	3ec4 <memcpy>
      ptr   += n;
    d51c:	e0fff817 	ldw	r3,-32(fp)
    d520:	e0bffc17 	ldw	r2,-16(fp)
    d524:	10c5883a 	add	r2,r2,r3
    d528:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
    d52c:	e0fffd17 	ldw	r3,-12(fp)
    d530:	e0bff817 	ldw	r2,-32(fp)
    d534:	1885c83a 	sub	r2,r3,r2
    d538:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    d53c:	e0fffa17 	ldw	r3,-24(fp)
    d540:	e0bff817 	ldw	r2,-32(fp)
    d544:	1885883a 	add	r2,r3,r2
    d548:	10c1ffcc 	andi	r3,r2,2047
    d54c:	e0bffb17 	ldw	r2,-20(fp)
    d550:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    d554:	e0bffd17 	ldw	r2,-12(fp)
    d558:	10800048 	cmpgei	r2,r2,1
    d55c:	103fc31e 	bne	r2,zero,d46c <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d560:	0005303a 	rdctl	r2,status
    d564:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d568:	e0fff517 	ldw	r3,-44(fp)
    d56c:	00bfff84 	movi	r2,-2
    d570:	1884703a 	and	r2,r3,r2
    d574:	1001703a 	wrctl	status,r2
  
  return context;
    d578:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    d57c:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    d580:	e0bffb17 	ldw	r2,-20(fp)
    d584:	10800817 	ldw	r2,32(r2)
    d588:	10c00094 	ori	r3,r2,2
    d58c:	e0bffb17 	ldw	r2,-20(fp)
    d590:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    d594:	e0bffb17 	ldw	r2,-20(fp)
    d598:	10800017 	ldw	r2,0(r2)
    d59c:	11000104 	addi	r4,r2,4
    d5a0:	e0bffb17 	ldw	r2,-20(fp)
    d5a4:	10800817 	ldw	r2,32(r2)
    d5a8:	1007883a 	mov	r3,r2
    d5ac:	2005883a 	mov	r2,r4
    d5b0:	10c00035 	stwio	r3,0(r2)
    d5b4:	e0bff717 	ldw	r2,-36(fp)
    d5b8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d5bc:	e0bff417 	ldw	r2,-48(fp)
    d5c0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    d5c4:	e0bffd17 	ldw	r2,-12(fp)
    d5c8:	10800050 	cmplti	r2,r2,1
    d5cc:	1000111e 	bne	r2,zero,d614 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
    d5d0:	e0bffe17 	ldw	r2,-8(fp)
    d5d4:	1090000c 	andi	r2,r2,16384
    d5d8:	1004c03a 	cmpne	r2,r2,zero
    d5dc:	1000101e 	bne	r2,zero,d620 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    d5e0:	e0bffb17 	ldw	r2,-20(fp)
    d5e4:	10c00d17 	ldw	r3,52(r2)
    d5e8:	e0bff917 	ldw	r2,-28(fp)
    d5ec:	1880051e 	bne	r3,r2,d604 <altera_avalon_jtag_uart_write+0x1c8>
    d5f0:	e0bffb17 	ldw	r2,-20(fp)
    d5f4:	10c00917 	ldw	r3,36(r2)
    d5f8:	e0bffb17 	ldw	r2,-20(fp)
    d5fc:	10800117 	ldw	r2,4(r2)
    d600:	18bff736 	bltu	r3,r2,d5e0 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
    d604:	e0bffb17 	ldw	r2,-20(fp)
    d608:	10c00d17 	ldw	r3,52(r2)
    d60c:	e0bff917 	ldw	r2,-28(fp)
    d610:	18800326 	beq	r3,r2,d620 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
    d614:	e0bffd17 	ldw	r2,-12(fp)
    d618:	10800048 	cmpgei	r2,r2,1
    d61c:	103fcd1e 	bne	r2,zero,d554 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    d620:	e0fffc17 	ldw	r3,-16(fp)
    d624:	e0bff617 	ldw	r2,-40(fp)
    d628:	18800526 	beq	r3,r2,d640 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
    d62c:	e0fffc17 	ldw	r3,-16(fp)
    d630:	e0bff617 	ldw	r2,-40(fp)
    d634:	1887c83a 	sub	r3,r3,r2
    d638:	e0ffff15 	stw	r3,-4(fp)
    d63c:	00000906 	br	d664 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
    d640:	e0bffe17 	ldw	r2,-8(fp)
    d644:	1090000c 	andi	r2,r2,16384
    d648:	1005003a 	cmpeq	r2,r2,zero
    d64c:	1000031e 	bne	r2,zero,d65c <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
    d650:	00bffd44 	movi	r2,-11
    d654:	e0bfff15 	stw	r2,-4(fp)
    d658:	00000206 	br	d664 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
    d65c:	00bffec4 	movi	r2,-5
    d660:	e0bfff15 	stw	r2,-4(fp)
    d664:	e0bfff17 	ldw	r2,-4(fp)
}
    d668:	e037883a 	mov	sp,fp
    d66c:	dfc00117 	ldw	ra,4(sp)
    d670:	df000017 	ldw	fp,0(sp)
    d674:	dec00204 	addi	sp,sp,8
    d678:	f800283a 	ret

0000d67c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    d67c:	defffa04 	addi	sp,sp,-24
    d680:	dfc00515 	stw	ra,20(sp)
    d684:	df000415 	stw	fp,16(sp)
    d688:	df000404 	addi	fp,sp,16
    d68c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    d690:	e0bfff17 	ldw	r2,-4(fp)
    d694:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    d698:	e0bfff17 	ldw	r2,-4(fp)
    d69c:	10800104 	addi	r2,r2,4
    d6a0:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d6a4:	0005303a 	rdctl	r2,status
    d6a8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d6ac:	e0fffd17 	ldw	r3,-12(fp)
    d6b0:	00bfff84 	movi	r2,-2
    d6b4:	1884703a 	and	r2,r3,r2
    d6b8:	1001703a 	wrctl	status,r2
  
  return context;
    d6bc:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    d6c0:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
    d6c4:	000ec0c0 	call	ec0c <alt_tick>
    d6c8:	e0bffe17 	ldw	r2,-8(fp)
    d6cc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d6d0:	e0bffc17 	ldw	r2,-16(fp)
    d6d4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    d6d8:	e037883a 	mov	sp,fp
    d6dc:	dfc00117 	ldw	ra,4(sp)
    d6e0:	df000017 	ldw	fp,0(sp)
    d6e4:	dec00204 	addi	sp,sp,8
    d6e8:	f800283a 	ret

0000d6ec <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    d6ec:	defff804 	addi	sp,sp,-32
    d6f0:	dfc00715 	stw	ra,28(sp)
    d6f4:	df000615 	stw	fp,24(sp)
    d6f8:	df000604 	addi	fp,sp,24
    d6fc:	e13ffc15 	stw	r4,-16(fp)
    d700:	e17ffd15 	stw	r5,-12(fp)
    d704:	e1bffe15 	stw	r6,-8(fp)
    d708:	e1ffff15 	stw	r7,-4(fp)
    d70c:	e0bfff17 	ldw	r2,-4(fp)
    d710:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    d714:	00800074 	movhi	r2,1
    d718:	108de504 	addi	r2,r2,14228
    d71c:	10800017 	ldw	r2,0(r2)
    d720:	1004c03a 	cmpne	r2,r2,zero
    d724:	1000041e 	bne	r2,zero,d738 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
    d728:	00c00074 	movhi	r3,1
    d72c:	18cde504 	addi	r3,r3,14228
    d730:	e0bffb17 	ldw	r2,-20(fp)
    d734:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    d738:	e0bffc17 	ldw	r2,-16(fp)
    d73c:	10800104 	addi	r2,r2,4
    d740:	1007883a 	mov	r3,r2
    d744:	008001c4 	movi	r2,7
    d748:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    d74c:	d8000015 	stw	zero,0(sp)
    d750:	e13ffd17 	ldw	r4,-12(fp)
    d754:	e17ffe17 	ldw	r5,-8(fp)
    d758:	01800074 	movhi	r6,1
    d75c:	31b59f04 	addi	r6,r6,-10628
    d760:	e1fffc17 	ldw	r7,-16(fp)
    d764:	000e4a80 	call	e4a8 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    d768:	e037883a 	mov	sp,fp
    d76c:	dfc00117 	ldw	ra,4(sp)
    d770:	df000017 	ldw	fp,0(sp)
    d774:	dec00204 	addi	sp,sp,8
    d778:	f800283a 	ret

0000d77c <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    d77c:	defffa04 	addi	sp,sp,-24
    d780:	dfc00515 	stw	ra,20(sp)
    d784:	df000415 	stw	fp,16(sp)
    d788:	df000404 	addi	fp,sp,16
    d78c:	e13ffd15 	stw	r4,-12(fp)
    d790:	e17ffe15 	stw	r5,-8(fp)
    d794:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    d798:	e0bffd17 	ldw	r2,-12(fp)
    d79c:	10800017 	ldw	r2,0(r2)
    d7a0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
    d7a4:	e0bffc17 	ldw	r2,-16(fp)
    d7a8:	11000a04 	addi	r4,r2,40
    d7ac:	e0bffd17 	ldw	r2,-12(fp)
    d7b0:	11c00217 	ldw	r7,8(r2)
    d7b4:	e17ffe17 	ldw	r5,-8(fp)
    d7b8:	e1bfff17 	ldw	r6,-4(fp)
    d7bc:	000dc740 	call	dc74 <altera_avalon_uart_read>
      fd->fd_flags);
}
    d7c0:	e037883a 	mov	sp,fp
    d7c4:	dfc00117 	ldw	ra,4(sp)
    d7c8:	df000017 	ldw	fp,0(sp)
    d7cc:	dec00204 	addi	sp,sp,8
    d7d0:	f800283a 	ret

0000d7d4 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    d7d4:	defffa04 	addi	sp,sp,-24
    d7d8:	dfc00515 	stw	ra,20(sp)
    d7dc:	df000415 	stw	fp,16(sp)
    d7e0:	df000404 	addi	fp,sp,16
    d7e4:	e13ffd15 	stw	r4,-12(fp)
    d7e8:	e17ffe15 	stw	r5,-8(fp)
    d7ec:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    d7f0:	e0bffd17 	ldw	r2,-12(fp)
    d7f4:	10800017 	ldw	r2,0(r2)
    d7f8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
    d7fc:	e0bffc17 	ldw	r2,-16(fp)
    d800:	11000a04 	addi	r4,r2,40
    d804:	e0bffd17 	ldw	r2,-12(fp)
    d808:	11c00217 	ldw	r7,8(r2)
    d80c:	e17ffe17 	ldw	r5,-8(fp)
    d810:	e1bfff17 	ldw	r6,-4(fp)
    d814:	000df040 	call	df04 <altera_avalon_uart_write>
      fd->fd_flags);
}
    d818:	e037883a 	mov	sp,fp
    d81c:	dfc00117 	ldw	ra,4(sp)
    d820:	df000017 	ldw	fp,0(sp)
    d824:	dec00204 	addi	sp,sp,8
    d828:	f800283a 	ret

0000d82c <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
    d82c:	defffc04 	addi	sp,sp,-16
    d830:	dfc00315 	stw	ra,12(sp)
    d834:	df000215 	stw	fp,8(sp)
    d838:	df000204 	addi	fp,sp,8
    d83c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    d840:	e0bfff17 	ldw	r2,-4(fp)
    d844:	10800017 	ldw	r2,0(r2)
    d848:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
    d84c:	e0bffe17 	ldw	r2,-8(fp)
    d850:	11000a04 	addi	r4,r2,40
    d854:	e0bfff17 	ldw	r2,-4(fp)
    d858:	11400217 	ldw	r5,8(r2)
    d85c:	000dc140 	call	dc14 <altera_avalon_uart_close>
}
    d860:	e037883a 	mov	sp,fp
    d864:	dfc00117 	ldw	ra,4(sp)
    d868:	df000017 	ldw	fp,0(sp)
    d86c:	dec00204 	addi	sp,sp,8
    d870:	f800283a 	ret

0000d874 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
    d874:	defff704 	addi	sp,sp,-36
    d878:	dfc00815 	stw	ra,32(sp)
    d87c:	df000715 	stw	fp,28(sp)
    d880:	df000704 	addi	fp,sp,28
    d884:	e13ffc15 	stw	r4,-16(fp)
    d888:	e17ffd15 	stw	r5,-12(fp)
    d88c:	e1bffe15 	stw	r6,-8(fp)
  void* base = sp->base;
    d890:	e0bffc17 	ldw	r2,-16(fp)
    d894:	10800017 	ldw	r2,0(r2)
    d898:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
    d89c:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
    d8a0:	1004c03a 	cmpne	r2,r2,zero
    d8a4:	1000061e 	bne	r2,zero,d8c0 <altera_avalon_uart_init+0x4c>
    d8a8:	0005883a 	mov	r2,zero
    d8ac:	1004c03a 	cmpne	r2,r2,zero
    d8b0:	1000031e 	bne	r2,zero,d8c0 <altera_avalon_uart_init+0x4c>
    d8b4:	0005883a 	mov	r2,zero
    d8b8:	1005003a 	cmpeq	r2,r2,zero
    d8bc:	1000031e 	bne	r2,zero,d8cc <altera_avalon_uart_init+0x58>
    d8c0:	00800044 	movi	r2,1
    d8c4:	e0bfff15 	stw	r2,-4(fp)
    d8c8:	00000106 	br	d8d0 <altera_avalon_uart_init+0x5c>
    d8cc:	e03fff15 	stw	zero,-4(fp)
    d8d0:	e0bfff17 	ldw	r2,-4(fp)
    d8d4:	e0bffa15 	stw	r2,-24(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
    d8d8:	e0bffa17 	ldw	r2,-24(fp)
    d8dc:	1004c03a 	cmpne	r2,r2,zero
    d8e0:	1000111e 	bne	r2,zero,d928 <altera_avalon_uart_init+0xb4>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
    d8e4:	e0fffc17 	ldw	r3,-16(fp)
    d8e8:	00832004 	movi	r2,3200
    d8ec:	18800115 	stw	r2,4(r3)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
    d8f0:	e0bffb17 	ldw	r2,-20(fp)
    d8f4:	11000304 	addi	r4,r2,12
    d8f8:	e0bffc17 	ldw	r2,-16(fp)
    d8fc:	10800117 	ldw	r2,4(r2)
    d900:	1007883a 	mov	r3,r2
    d904:	2005883a 	mov	r2,r4
    d908:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
    d90c:	d8000015 	stw	zero,0(sp)
    d910:	e13ffd17 	ldw	r4,-12(fp)
    d914:	e17ffe17 	ldw	r5,-8(fp)
    d918:	01800074 	movhi	r6,1
    d91c:	31b64f04 	addi	r6,r6,-9924
    d920:	e1fffc17 	ldw	r7,-16(fp)
    d924:	000e4a80 	call	e4a8 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
    d928:	e037883a 	mov	sp,fp
    d92c:	dfc00117 	ldw	ra,4(sp)
    d930:	df000017 	ldw	fp,0(sp)
    d934:	dec00204 	addi	sp,sp,8
    d938:	f800283a 	ret

0000d93c <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
    d93c:	defffa04 	addi	sp,sp,-24
    d940:	dfc00515 	stw	ra,20(sp)
    d944:	df000415 	stw	fp,16(sp)
    d948:	df000404 	addi	fp,sp,16
    d94c:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
    d950:	e0bfff17 	ldw	r2,-4(fp)
    d954:	e0bffd15 	stw	r2,-12(fp)
  void* base               = sp->base;
    d958:	e0bffd17 	ldw	r2,-12(fp)
    d95c:	10800017 	ldw	r2,0(r2)
    d960:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
    d964:	e0bffc17 	ldw	r2,-16(fp)
    d968:	10800204 	addi	r2,r2,8
    d96c:	10800037 	ldwio	r2,0(r2)
    d970:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
    d974:	e0bffc17 	ldw	r2,-16(fp)
    d978:	10800204 	addi	r2,r2,8
    d97c:	10000035 	stwio	zero,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
    d980:	e0bffc17 	ldw	r2,-16(fp)
    d984:	10800204 	addi	r2,r2,8
    d988:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
    d98c:	e0bffe17 	ldw	r2,-8(fp)
    d990:	1080200c 	andi	r2,r2,128
    d994:	1005003a 	cmpeq	r2,r2,zero
    d998:	1000031e 	bne	r2,zero,d9a8 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
    d99c:	e13ffd17 	ldw	r4,-12(fp)
    d9a0:	e17ffe17 	ldw	r5,-8(fp)
    d9a4:	000d9d80 	call	d9d8 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
    d9a8:	e0bffe17 	ldw	r2,-8(fp)
    d9ac:	1081100c 	andi	r2,r2,1088
    d9b0:	1005003a 	cmpeq	r2,r2,zero
    d9b4:	1000031e 	bne	r2,zero,d9c4 <altera_avalon_uart_irq+0x88>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
    d9b8:	e13ffd17 	ldw	r4,-12(fp)
    d9bc:	e17ffe17 	ldw	r5,-8(fp)
    d9c0:	000dab80 	call	dab8 <altera_avalon_uart_txirq>
  }
  

}
    d9c4:	e037883a 	mov	sp,fp
    d9c8:	dfc00117 	ldw	ra,4(sp)
    d9cc:	df000017 	ldw	fp,0(sp)
    d9d0:	dec00204 	addi	sp,sp,8
    d9d4:	f800283a 	ret

0000d9d8 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
    d9d8:	defffc04 	addi	sp,sp,-16
    d9dc:	df000315 	stw	fp,12(sp)
    d9e0:	df000304 	addi	fp,sp,12
    d9e4:	e13ffe15 	stw	r4,-8(fp)
    d9e8:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
    d9ec:	e0bfff17 	ldw	r2,-4(fp)
    d9f0:	108000cc 	andi	r2,r2,3
    d9f4:	1004c03a 	cmpne	r2,r2,zero
    d9f8:	10002b1e 	bne	r2,zero,daa8 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
    d9fc:	e0bffe17 	ldw	r2,-8(fp)
    da00:	10800317 	ldw	r2,12(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
    da04:	e0bffe17 	ldw	r2,-8(fp)
    da08:	10800317 	ldw	r2,12(r2)
    da0c:	10800044 	addi	r2,r2,1
    da10:	10800fcc 	andi	r2,r2,63
    da14:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
    da18:	e0bffe17 	ldw	r2,-8(fp)
    da1c:	11000317 	ldw	r4,12(r2)
    da20:	e0bffe17 	ldw	r2,-8(fp)
    da24:	10800017 	ldw	r2,0(r2)
    da28:	10800037 	ldwio	r2,0(r2)
    da2c:	1007883a 	mov	r3,r2
    da30:	e0bffe17 	ldw	r2,-8(fp)
    da34:	2085883a 	add	r2,r4,r2
    da38:	10800704 	addi	r2,r2,28
    da3c:	10c00005 	stb	r3,0(r2)

  sp->rx_end = next;
    da40:	e0fffe17 	ldw	r3,-8(fp)
    da44:	e0bffd17 	ldw	r2,-12(fp)
    da48:	18800315 	stw	r2,12(r3)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
    da4c:	e0bffe17 	ldw	r2,-8(fp)
    da50:	10800317 	ldw	r2,12(r2)
    da54:	10800044 	addi	r2,r2,1
    da58:	10800fcc 	andi	r2,r2,63
    da5c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
    da60:	e0bffe17 	ldw	r2,-8(fp)
    da64:	10c00217 	ldw	r3,8(r2)
    da68:	e0bffd17 	ldw	r2,-12(fp)
    da6c:	18800e1e 	bne	r3,r2,daa8 <altera_avalon_uart_rxirq+0xd0>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    da70:	e0bffe17 	ldw	r2,-8(fp)
    da74:	10c00117 	ldw	r3,4(r2)
    da78:	00bfdfc4 	movi	r2,-129
    da7c:	1886703a 	and	r3,r3,r2
    da80:	e0bffe17 	ldw	r2,-8(fp)
    da84:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
    da88:	e0bffe17 	ldw	r2,-8(fp)
    da8c:	10800017 	ldw	r2,0(r2)
    da90:	11000304 	addi	r4,r2,12
    da94:	e0bffe17 	ldw	r2,-8(fp)
    da98:	10800117 	ldw	r2,4(r2)
    da9c:	1007883a 	mov	r3,r2
    daa0:	2005883a 	mov	r2,r4
    daa4:	10c00035 	stwio	r3,0(r2)
  }   
}
    daa8:	e037883a 	mov	sp,fp
    daac:	df000017 	ldw	fp,0(sp)
    dab0:	dec00104 	addi	sp,sp,4
    dab4:	f800283a 	ret

0000dab8 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
    dab8:	defffd04 	addi	sp,sp,-12
    dabc:	df000215 	stw	fp,8(sp)
    dac0:	df000204 	addi	fp,sp,8
    dac4:	e13ffe15 	stw	r4,-8(fp)
    dac8:	e17fff15 	stw	r5,-4(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
    dacc:	e0bffe17 	ldw	r2,-8(fp)
    dad0:	10c00417 	ldw	r3,16(r2)
    dad4:	e0bffe17 	ldw	r2,-8(fp)
    dad8:	10800517 	ldw	r2,20(r2)
    dadc:	18803626 	beq	r3,r2,dbb8 <altera_avalon_uart_txirq+0x100>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
    dae0:	e0bffe17 	ldw	r2,-8(fp)
    dae4:	10800617 	ldw	r2,24(r2)
    dae8:	1080008c 	andi	r2,r2,2
    daec:	1005003a 	cmpeq	r2,r2,zero
    daf0:	1000041e 	bne	r2,zero,db04 <altera_avalon_uart_txirq+0x4c>
    daf4:	e0bfff17 	ldw	r2,-4(fp)
    daf8:	1082000c 	andi	r2,r2,2048
    dafc:	1005003a 	cmpeq	r2,r2,zero
    db00:	10001e1e 	bne	r2,zero,db7c <altera_avalon_uart_txirq+0xc4>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
    db04:	e0bffe17 	ldw	r2,-8(fp)
    db08:	10800417 	ldw	r2,16(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
    db0c:	e0bffe17 	ldw	r2,-8(fp)
    db10:	10800017 	ldw	r2,0(r2)
    db14:	11000104 	addi	r4,r2,4
    db18:	e0bffe17 	ldw	r2,-8(fp)
    db1c:	10c00417 	ldw	r3,16(r2)
    db20:	e0bffe17 	ldw	r2,-8(fp)
    db24:	1885883a 	add	r2,r3,r2
    db28:	10801704 	addi	r2,r2,92
    db2c:	10800003 	ldbu	r2,0(r2)
    db30:	10c03fcc 	andi	r3,r2,255
    db34:	2005883a 	mov	r2,r4
    db38:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
    db3c:	e0bffe17 	ldw	r2,-8(fp)
    db40:	10800417 	ldw	r2,16(r2)
    db44:	10c00044 	addi	r3,r2,1
    db48:	e0bffe17 	ldw	r2,-8(fp)
    db4c:	10c00415 	stw	r3,16(r2)
    db50:	e0bffe17 	ldw	r2,-8(fp)
    db54:	10800417 	ldw	r2,16(r2)
    db58:	10c00fcc 	andi	r3,r2,63
    db5c:	e0bffe17 	ldw	r2,-8(fp)
    db60:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
    db64:	e0bffe17 	ldw	r2,-8(fp)
    db68:	10800117 	ldw	r2,4(r2)
    db6c:	10c01014 	ori	r3,r2,64
    db70:	e0bffe17 	ldw	r2,-8(fp)
    db74:	10c00115 	stw	r3,4(r2)
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
    db78:	00000f06 	br	dbb8 <altera_avalon_uart_txirq+0x100>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
    db7c:	e0bffe17 	ldw	r2,-8(fp)
    db80:	10800017 	ldw	r2,0(r2)
    db84:	10800204 	addi	r2,r2,8
    db88:	10800037 	ldwio	r2,0(r2)
    db8c:	e0bfff15 	stw	r2,-4(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
    db90:	e0bfff17 	ldw	r2,-4(fp)
    db94:	1082000c 	andi	r2,r2,2048
    db98:	1004c03a 	cmpne	r2,r2,zero
    db9c:	1000061e 	bne	r2,zero,dbb8 <altera_avalon_uart_txirq+0x100>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
    dba0:	e0bffe17 	ldw	r2,-8(fp)
    dba4:	10c00117 	ldw	r3,4(r2)
    dba8:	00bfefc4 	movi	r2,-65
    dbac:	1886703a 	and	r3,r3,r2
    dbb0:	e0bffe17 	ldw	r2,-8(fp)
    dbb4:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
    dbb8:	e0bffe17 	ldw	r2,-8(fp)
    dbbc:	10c00417 	ldw	r3,16(r2)
    dbc0:	e0bffe17 	ldw	r2,-8(fp)
    dbc4:	10800517 	ldw	r2,20(r2)
    dbc8:	1880061e 	bne	r3,r2,dbe4 <altera_avalon_uart_txirq+0x12c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
    dbcc:	e0bffe17 	ldw	r2,-8(fp)
    dbd0:	10c00117 	ldw	r3,4(r2)
    dbd4:	00beefc4 	movi	r2,-1089
    dbd8:	1886703a 	and	r3,r3,r2
    dbdc:	e0bffe17 	ldw	r2,-8(fp)
    dbe0:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    dbe4:	e0bffe17 	ldw	r2,-8(fp)
    dbe8:	10800017 	ldw	r2,0(r2)
    dbec:	11000304 	addi	r4,r2,12
    dbf0:	e0bffe17 	ldw	r2,-8(fp)
    dbf4:	10800117 	ldw	r2,4(r2)
    dbf8:	1007883a 	mov	r3,r2
    dbfc:	2005883a 	mov	r2,r4
    dc00:	10c00035 	stwio	r3,0(r2)
}
    dc04:	e037883a 	mov	sp,fp
    dc08:	df000017 	ldw	fp,0(sp)
    dc0c:	dec00104 	addi	sp,sp,4
    dc10:	f800283a 	ret

0000dc14 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
    dc14:	defffc04 	addi	sp,sp,-16
    dc18:	df000315 	stw	fp,12(sp)
    dc1c:	df000304 	addi	fp,sp,12
    dc20:	e13ffd15 	stw	r4,-12(fp)
    dc24:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
    dc28:	00000706 	br	dc48 <altera_avalon_uart_close+0x34>
    if (flags & O_NONBLOCK) {
    dc2c:	e0bffe17 	ldw	r2,-8(fp)
    dc30:	1090000c 	andi	r2,r2,16384
    dc34:	1005003a 	cmpeq	r2,r2,zero
    dc38:	1000031e 	bne	r2,zero,dc48 <altera_avalon_uart_close+0x34>
      return -EWOULDBLOCK; 
    dc3c:	00bffd44 	movi	r2,-11
    dc40:	e0bfff15 	stw	r2,-4(fp)
    dc44:	00000606 	br	dc60 <altera_avalon_uart_close+0x4c>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
    dc48:	e0bffd17 	ldw	r2,-12(fp)
    dc4c:	10c00417 	ldw	r3,16(r2)
    dc50:	e0bffd17 	ldw	r2,-12(fp)
    dc54:	10800517 	ldw	r2,20(r2)
    dc58:	18bff41e 	bne	r3,r2,dc2c <altera_avalon_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    dc5c:	e03fff15 	stw	zero,-4(fp)
    dc60:	e0bfff17 	ldw	r2,-4(fp)
}
    dc64:	e037883a 	mov	sp,fp
    dc68:	df000017 	ldw	fp,0(sp)
    dc6c:	dec00104 	addi	sp,sp,4
    dc70:	f800283a 	ret

0000dc74 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
    dc74:	defff004 	addi	sp,sp,-64
    dc78:	dfc00f15 	stw	ra,60(sp)
    dc7c:	df000e15 	stw	fp,56(sp)
    dc80:	df000e04 	addi	fp,sp,56
    dc84:	e13ffb15 	stw	r4,-20(fp)
    dc88:	e17ffc15 	stw	r5,-16(fp)
    dc8c:	e1bffd15 	stw	r6,-12(fp)
    dc90:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context context;
  int             block;
  alt_u32         next;
  alt_u8          read_would_block = 0;
    dc94:	e03ff705 	stb	zero,-36(fp)
  int             count = 0;
    dc98:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
    dc9c:	e0bffe17 	ldw	r2,-8(fp)
    dca0:	1090000c 	andi	r2,r2,16384
    dca4:	1005003a 	cmpeq	r2,r2,zero
    dca8:	e0bff915 	stw	r2,-28(fp)
  /*
   * Calculate which slot in the circular buffer is the next one to read
   * data from.
   */

  next = (sp->rx_start + 1) & ALT_AVALON_UART_BUF_MSK;
    dcac:	e0bffb17 	ldw	r2,-20(fp)
    dcb0:	10800217 	ldw	r2,8(r2)
    dcb4:	10800044 	addi	r2,r2,1
    dcb8:	10800fcc 	andi	r2,r2,63
    dcbc:	e0bff815 	stw	r2,-32(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
    dcc0:	00001906 	br	dd28 <altera_avalon_uart_read+0xb4>
    {
      count++;
    dcc4:	e0bff617 	ldw	r2,-40(fp)
    dcc8:	10800044 	addi	r2,r2,1
    dccc:	e0bff615 	stw	r2,-40(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
    dcd0:	e0bffb17 	ldw	r2,-20(fp)
    dcd4:	10c00217 	ldw	r3,8(r2)
    dcd8:	e0bffb17 	ldw	r2,-20(fp)
    dcdc:	1885883a 	add	r2,r3,r2
    dce0:	10800704 	addi	r2,r2,28
    dce4:	10800003 	ldbu	r2,0(r2)
    dce8:	1007883a 	mov	r3,r2
    dcec:	e0bffc17 	ldw	r2,-16(fp)
    dcf0:	10c00005 	stb	r3,0(r2)
    dcf4:	e0bffc17 	ldw	r2,-16(fp)
    dcf8:	10800044 	addi	r2,r2,1
    dcfc:	e0bffc15 	stw	r2,-16(fp)
      
      sp->rx_start = (++sp->rx_start) & ALT_AVALON_UART_BUF_MSK;
    dd00:	e0bffb17 	ldw	r2,-20(fp)
    dd04:	10800217 	ldw	r2,8(r2)
    dd08:	10c00044 	addi	r3,r2,1
    dd0c:	e0bffb17 	ldw	r2,-20(fp)
    dd10:	10c00215 	stw	r3,8(r2)
    dd14:	e0bffb17 	ldw	r2,-20(fp)
    dd18:	10800217 	ldw	r2,8(r2)
    dd1c:	10c00fcc 	andi	r3,r2,63
    dd20:	e0bffb17 	ldw	r2,-20(fp)
    dd24:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
    dd28:	e0fff617 	ldw	r3,-40(fp)
    dd2c:	e0bffd17 	ldw	r2,-12(fp)
    dd30:	1880050e 	bge	r3,r2,dd48 <altera_avalon_uart_read+0xd4>
    dd34:	e0bffb17 	ldw	r2,-20(fp)
    dd38:	10c00217 	ldw	r3,8(r2)
    dd3c:	e0bffb17 	ldw	r2,-20(fp)
    dd40:	10800317 	ldw	r2,12(r2)
    dd44:	18bfdf1e 	bne	r3,r2,dcc4 <altera_avalon_uart_read+0x50>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
    dd48:	e0bff617 	ldw	r2,-40(fp)
    dd4c:	1004c03a 	cmpne	r2,r2,zero
    dd50:	1000271e 	bne	r2,zero,ddf0 <altera_avalon_uart_read+0x17c>
    dd54:	e0bffb17 	ldw	r2,-20(fp)
    dd58:	10c00217 	ldw	r3,8(r2)
    dd5c:	e0bffb17 	ldw	r2,-20(fp)
    dd60:	10800317 	ldw	r2,12(r2)
    dd64:	1880221e 	bne	r3,r2,ddf0 <altera_avalon_uart_read+0x17c>
    {
      if (!block)
    dd68:	e0bff917 	ldw	r2,-28(fp)
    dd6c:	1004c03a 	cmpne	r2,r2,zero
    dd70:	1000061e 	bne	r2,zero,dd8c <altera_avalon_uart_read+0x118>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
    dd74:	000dea40 	call	dea4 <alt_get_errno>
    dd78:	00c002c4 	movi	r3,11
    dd7c:	10c00015 	stw	r3,0(r2)
        read_would_block = 1;
    dd80:	00800044 	movi	r2,1
    dd84:	e0bff705 	stb	r2,-36(fp)
        break;
    dd88:	00001f06 	br	de08 <altera_avalon_uart_read+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    dd8c:	0005303a 	rdctl	r2,status
    dd90:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    dd94:	e0fff517 	ldw	r3,-44(fp)
    dd98:	00bfff84 	movi	r2,-2
    dd9c:	1884703a 	and	r2,r3,r2
    dda0:	1001703a 	wrctl	status,r2
  
  return context;
    dda4:	e0bff517 	ldw	r2,-44(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
    dda8:	e0bffa15 	stw	r2,-24(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    ddac:	e0bffb17 	ldw	r2,-20(fp)
    ddb0:	10800117 	ldw	r2,4(r2)
    ddb4:	10c02014 	ori	r3,r2,128
    ddb8:	e0bffb17 	ldw	r2,-20(fp)
    ddbc:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    ddc0:	e0bffb17 	ldw	r2,-20(fp)
    ddc4:	10800017 	ldw	r2,0(r2)
    ddc8:	11000304 	addi	r4,r2,12
    ddcc:	e0bffb17 	ldw	r2,-20(fp)
    ddd0:	10800117 	ldw	r2,4(r2)
    ddd4:	1007883a 	mov	r3,r2
    ddd8:	2005883a 	mov	r2,r4
    dddc:	10c00035 	stwio	r3,0(r2)
    dde0:	e0bffa17 	ldw	r2,-24(fp)
    dde4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    dde8:	e0bff417 	ldw	r2,-48(fp)
    ddec:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
    ddf0:	e0bff617 	ldw	r2,-40(fp)
    ddf4:	1004c03a 	cmpne	r2,r2,zero
    ddf8:	1000031e 	bne	r2,zero,de08 <altera_avalon_uart_read+0x194>
    ddfc:	e0bffd17 	ldw	r2,-12(fp)
    de00:	1004c03a 	cmpne	r2,r2,zero
    de04:	103fc81e 	bne	r2,zero,dd28 <altera_avalon_uart_read+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    de08:	0005303a 	rdctl	r2,status
    de0c:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    de10:	e0fff317 	ldw	r3,-52(fp)
    de14:	00bfff84 	movi	r2,-2
    de18:	1884703a 	and	r2,r3,r2
    de1c:	1001703a 	wrctl	status,r2
  
  return context;
    de20:	e0bff317 	ldw	r2,-52(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
    de24:	e0bffa15 	stw	r2,-24(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    de28:	e0bffb17 	ldw	r2,-20(fp)
    de2c:	10800117 	ldw	r2,4(r2)
    de30:	10c02014 	ori	r3,r2,128
    de34:	e0bffb17 	ldw	r2,-20(fp)
    de38:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    de3c:	e0bffb17 	ldw	r2,-20(fp)
    de40:	10800017 	ldw	r2,0(r2)
    de44:	11000304 	addi	r4,r2,12
    de48:	e0bffb17 	ldw	r2,-20(fp)
    de4c:	10800117 	ldw	r2,4(r2)
    de50:	1007883a 	mov	r3,r2
    de54:	2005883a 	mov	r2,r4
    de58:	10c00035 	stwio	r3,0(r2)
    de5c:	e0bffa17 	ldw	r2,-24(fp)
    de60:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    de64:	e0bff217 	ldw	r2,-56(fp)
    de68:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
    de6c:	e0bff703 	ldbu	r2,-36(fp)
    de70:	1005003a 	cmpeq	r2,r2,zero
    de74:	1000031e 	bne	r2,zero,de84 <altera_avalon_uart_read+0x210>
    return ~EWOULDBLOCK;
    de78:	00bffd04 	movi	r2,-12
    de7c:	e0bfff15 	stw	r2,-4(fp)
    de80:	00000206 	br	de8c <altera_avalon_uart_read+0x218>
  }
  else {
    return count;
    de84:	e0bff617 	ldw	r2,-40(fp)
    de88:	e0bfff15 	stw	r2,-4(fp)
    de8c:	e0bfff17 	ldw	r2,-4(fp)
  }
}
    de90:	e037883a 	mov	sp,fp
    de94:	dfc00117 	ldw	ra,4(sp)
    de98:	df000017 	ldw	fp,0(sp)
    de9c:	dec00204 	addi	sp,sp,8
    dea0:	f800283a 	ret

0000dea4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    dea4:	defffd04 	addi	sp,sp,-12
    dea8:	dfc00215 	stw	ra,8(sp)
    deac:	df000115 	stw	fp,4(sp)
    deb0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    deb4:	00800074 	movhi	r2,1
    deb8:	10865804 	addi	r2,r2,6496
    debc:	10800017 	ldw	r2,0(r2)
    dec0:	1005003a 	cmpeq	r2,r2,zero
    dec4:	1000061e 	bne	r2,zero,dee0 <alt_get_errno+0x3c>
    dec8:	00800074 	movhi	r2,1
    decc:	10865804 	addi	r2,r2,6496
    ded0:	10800017 	ldw	r2,0(r2)
    ded4:	103ee83a 	callr	r2
    ded8:	e0bfff15 	stw	r2,-4(fp)
    dedc:	00000306 	br	deec <alt_get_errno+0x48>
    dee0:	00800074 	movhi	r2,1
    dee4:	108de004 	addi	r2,r2,14208
    dee8:	e0bfff15 	stw	r2,-4(fp)
    deec:	e0bfff17 	ldw	r2,-4(fp)
}
    def0:	e037883a 	mov	sp,fp
    def4:	dfc00117 	ldw	ra,4(sp)
    def8:	df000017 	ldw	fp,0(sp)
    defc:	dec00204 	addi	sp,sp,8
    df00:	f800283a 	ret

0000df04 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
    df04:	defff204 	addi	sp,sp,-56
    df08:	dfc00d15 	stw	ra,52(sp)
    df0c:	df000c15 	stw	fp,48(sp)
    df10:	df000c04 	addi	fp,sp,48
    df14:	e13ffc15 	stw	r4,-16(fp)
    df18:	e17ffd15 	stw	r5,-12(fp)
    df1c:	e1bffe15 	stw	r6,-8(fp)
    df20:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
    df24:	e0bffe17 	ldw	r2,-8(fp)
    df28:	e0bff815 	stw	r2,-32(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
    df2c:	e0bfff17 	ldw	r2,-4(fp)
    df30:	1090000c 	andi	r2,r2,16384
    df34:	e0bffa15 	stw	r2,-24(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
    df38:	00004006 	br	e03c <altera_avalon_uart_write+0x138>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
    df3c:	e0bffc17 	ldw	r2,-16(fp)
    df40:	10800517 	ldw	r2,20(r2)
    df44:	10800044 	addi	r2,r2,1
    df48:	10800fcc 	andi	r2,r2,63
    df4c:	e0bff915 	stw	r2,-28(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
    df50:	e0bffc17 	ldw	r2,-16(fp)
    df54:	10c00417 	ldw	r3,16(r2)
    df58:	e0bff917 	ldw	r2,-28(fp)
    df5c:	1880251e 	bne	r3,r2,dff4 <altera_avalon_uart_write+0xf0>
    {
      if (no_block)
    df60:	e0bffa17 	ldw	r2,-24(fp)
    df64:	1005003a 	cmpeq	r2,r2,zero
    df68:	1000051e 	bne	r2,zero,df80 <altera_avalon_uart_write+0x7c>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
    df6c:	000e0cc0 	call	e0cc <alt_get_errno>
    df70:	1007883a 	mov	r3,r2
    df74:	008002c4 	movi	r2,11
    df78:	18800015 	stw	r2,0(r3)
        break;
    df7c:	00003206 	br	e048 <altera_avalon_uart_write+0x144>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    df80:	0005303a 	rdctl	r2,status
    df84:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    df88:	e0fff717 	ldw	r3,-36(fp)
    df8c:	00bfff84 	movi	r2,-2
    df90:	1884703a 	and	r2,r3,r2
    df94:	1001703a 	wrctl	status,r2
  
  return context;
    df98:	e0bff717 	ldw	r2,-36(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
    df9c:	e0bffb15 	stw	r2,-20(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
    dfa0:	e0bffc17 	ldw	r2,-16(fp)
    dfa4:	10800117 	ldw	r2,4(r2)
    dfa8:	10c11014 	ori	r3,r2,1088
    dfac:	e0bffc17 	ldw	r2,-16(fp)
    dfb0:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    dfb4:	e0bffc17 	ldw	r2,-16(fp)
    dfb8:	10800017 	ldw	r2,0(r2)
    dfbc:	11000304 	addi	r4,r2,12
    dfc0:	e0bffc17 	ldw	r2,-16(fp)
    dfc4:	10800117 	ldw	r2,4(r2)
    dfc8:	1007883a 	mov	r3,r2
    dfcc:	2005883a 	mov	r2,r4
    dfd0:	10c00035 	stwio	r3,0(r2)
    dfd4:	e0bffb17 	ldw	r2,-20(fp)
    dfd8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    dfdc:	e0bff617 	ldw	r2,-40(fp)
    dfe0:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
    dfe4:	e0bffc17 	ldw	r2,-16(fp)
    dfe8:	10c00417 	ldw	r3,16(r2)
    dfec:	e0bff917 	ldw	r2,-28(fp)
    dff0:	18bffc26 	beq	r3,r2,dfe4 <altera_avalon_uart_write+0xe0>
      }
    }

    count--;
    dff4:	e0bff817 	ldw	r2,-32(fp)
    dff8:	10bfffc4 	addi	r2,r2,-1
    dffc:	e0bff815 	stw	r2,-32(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
    e000:	e0bffc17 	ldw	r2,-16(fp)
    e004:	10c00517 	ldw	r3,20(r2)
    e008:	e0bffd17 	ldw	r2,-12(fp)
    e00c:	10800003 	ldbu	r2,0(r2)
    e010:	1009883a 	mov	r4,r2
    e014:	e0bffc17 	ldw	r2,-16(fp)
    e018:	1885883a 	add	r2,r3,r2
    e01c:	10801704 	addi	r2,r2,92
    e020:	11000005 	stb	r4,0(r2)
    e024:	e0bffd17 	ldw	r2,-12(fp)
    e028:	10800044 	addi	r2,r2,1
    e02c:	e0bffd15 	stw	r2,-12(fp)
    sp->tx_end = next;
    e030:	e0fffc17 	ldw	r3,-16(fp)
    e034:	e0bff917 	ldw	r2,-28(fp)
    e038:	18800515 	stw	r2,20(r3)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
    e03c:	e0bff817 	ldw	r2,-32(fp)
    e040:	1004c03a 	cmpne	r2,r2,zero
    e044:	103fbd1e 	bne	r2,zero,df3c <altera_avalon_uart_write+0x38>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e048:	0005303a 	rdctl	r2,status
    e04c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e050:	e0fff517 	ldw	r3,-44(fp)
    e054:	00bfff84 	movi	r2,-2
    e058:	1884703a 	and	r2,r3,r2
    e05c:	1001703a 	wrctl	status,r2
  
  return context;
    e060:	e0bff517 	ldw	r2,-44(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
    e064:	e0bffb15 	stw	r2,-20(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
    e068:	e0bffc17 	ldw	r2,-16(fp)
    e06c:	10800117 	ldw	r2,4(r2)
    e070:	10c11014 	ori	r3,r2,1088
    e074:	e0bffc17 	ldw	r2,-16(fp)
    e078:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    e07c:	e0bffc17 	ldw	r2,-16(fp)
    e080:	10800017 	ldw	r2,0(r2)
    e084:	11000304 	addi	r4,r2,12
    e088:	e0bffc17 	ldw	r2,-16(fp)
    e08c:	10800117 	ldw	r2,4(r2)
    e090:	1007883a 	mov	r3,r2
    e094:	2005883a 	mov	r2,r4
    e098:	10c00035 	stwio	r3,0(r2)
    e09c:	e0bffb17 	ldw	r2,-20(fp)
    e0a0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e0a4:	e0bff417 	ldw	r2,-48(fp)
    e0a8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
    e0ac:	e0fffe17 	ldw	r3,-8(fp)
    e0b0:	e0bff817 	ldw	r2,-32(fp)
    e0b4:	1885c83a 	sub	r2,r3,r2
}
    e0b8:	e037883a 	mov	sp,fp
    e0bc:	dfc00117 	ldw	ra,4(sp)
    e0c0:	df000017 	ldw	fp,0(sp)
    e0c4:	dec00204 	addi	sp,sp,8
    e0c8:	f800283a 	ret

0000e0cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e0cc:	defffd04 	addi	sp,sp,-12
    e0d0:	dfc00215 	stw	ra,8(sp)
    e0d4:	df000115 	stw	fp,4(sp)
    e0d8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    e0dc:	00800074 	movhi	r2,1
    e0e0:	10865804 	addi	r2,r2,6496
    e0e4:	10800017 	ldw	r2,0(r2)
    e0e8:	1005003a 	cmpeq	r2,r2,zero
    e0ec:	1000061e 	bne	r2,zero,e108 <alt_get_errno+0x3c>
    e0f0:	00800074 	movhi	r2,1
    e0f4:	10865804 	addi	r2,r2,6496
    e0f8:	10800017 	ldw	r2,0(r2)
    e0fc:	103ee83a 	callr	r2
    e100:	e0bfff15 	stw	r2,-4(fp)
    e104:	00000306 	br	e114 <alt_get_errno+0x48>
    e108:	00800074 	movhi	r2,1
    e10c:	108de004 	addi	r2,r2,14208
    e110:	e0bfff15 	stw	r2,-4(fp)
    e114:	e0bfff17 	ldw	r2,-4(fp)
}
    e118:	e037883a 	mov	sp,fp
    e11c:	dfc00117 	ldw	ra,4(sp)
    e120:	df000017 	ldw	fp,0(sp)
    e124:	dec00204 	addi	sp,sp,8
    e128:	f800283a 	ret

0000e12c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    e12c:	defff404 	addi	sp,sp,-48
    e130:	df000b15 	stw	fp,44(sp)
    e134:	df000b04 	addi	fp,sp,44
    e138:	e13ffb15 	stw	r4,-20(fp)
    e13c:	e17ffc15 	stw	r5,-16(fp)
    e140:	e1bffd15 	stw	r6,-12(fp)
    e144:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    e148:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    e14c:	00800074 	movhi	r2,1
    e150:	108de504 	addi	r2,r2,14228
    e154:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
    e158:	1005003a 	cmpeq	r2,r2,zero
    e15c:	1000411e 	bne	r2,zero,e264 <alt_alarm_start+0x138>
  {
    if (alarm)
    e160:	e0bffb17 	ldw	r2,-20(fp)
    e164:	1005003a 	cmpeq	r2,r2,zero
    e168:	10003b1e 	bne	r2,zero,e258 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
    e16c:	e0fffb17 	ldw	r3,-20(fp)
    e170:	e0bffd17 	ldw	r2,-12(fp)
    e174:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
    e178:	e0fffb17 	ldw	r3,-20(fp)
    e17c:	e0bffe17 	ldw	r2,-8(fp)
    e180:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e184:	0005303a 	rdctl	r2,status
    e188:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e18c:	e0fff817 	ldw	r3,-32(fp)
    e190:	00bfff84 	movi	r2,-2
    e194:	1884703a 	and	r2,r3,r2
    e198:	1001703a 	wrctl	status,r2
  
  return context;
    e19c:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
    e1a0:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    e1a4:	00800074 	movhi	r2,1
    e1a8:	108de604 	addi	r2,r2,14232
    e1ac:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
    e1b0:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    e1b4:	e0fffc17 	ldw	r3,-16(fp)
    e1b8:	e0bff917 	ldw	r2,-28(fp)
    e1bc:	1885883a 	add	r2,r3,r2
    e1c0:	10c00044 	addi	r3,r2,1
    e1c4:	e0bffb17 	ldw	r2,-20(fp)
    e1c8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    e1cc:	e0bffb17 	ldw	r2,-20(fp)
    e1d0:	10c00217 	ldw	r3,8(r2)
    e1d4:	e0bff917 	ldw	r2,-28(fp)
    e1d8:	1880042e 	bgeu	r3,r2,e1ec <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
    e1dc:	e0fffb17 	ldw	r3,-20(fp)
    e1e0:	00800044 	movi	r2,1
    e1e4:	18800405 	stb	r2,16(r3)
    e1e8:	00000206 	br	e1f4 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
    e1ec:	e0bffb17 	ldw	r2,-20(fp)
    e1f0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    e1f4:	e0fffb17 	ldw	r3,-20(fp)
    e1f8:	00800074 	movhi	r2,1
    e1fc:	10865b04 	addi	r2,r2,6508
    e200:	e0bff615 	stw	r2,-40(fp)
    e204:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    e208:	e0fff717 	ldw	r3,-36(fp)
    e20c:	e0bff617 	ldw	r2,-40(fp)
    e210:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    e214:	e0bff617 	ldw	r2,-40(fp)
    e218:	10c00017 	ldw	r3,0(r2)
    e21c:	e0bff717 	ldw	r2,-36(fp)
    e220:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    e224:	e0bff617 	ldw	r2,-40(fp)
    e228:	10c00017 	ldw	r3,0(r2)
    e22c:	e0bff717 	ldw	r2,-36(fp)
    e230:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    e234:	e0fff617 	ldw	r3,-40(fp)
    e238:	e0bff717 	ldw	r2,-36(fp)
    e23c:	18800015 	stw	r2,0(r3)
    e240:	e0bffa17 	ldw	r2,-24(fp)
    e244:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e248:	e0bff517 	ldw	r2,-44(fp)
    e24c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    e250:	e03fff15 	stw	zero,-4(fp)
    e254:	00000506 	br	e26c <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
    e258:	00bffa84 	movi	r2,-22
    e25c:	e0bfff15 	stw	r2,-4(fp)
    e260:	00000206 	br	e26c <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
    e264:	00bfde84 	movi	r2,-134
    e268:	e0bfff15 	stw	r2,-4(fp)
    e26c:	e0bfff17 	ldw	r2,-4(fp)
  }
}
    e270:	e037883a 	mov	sp,fp
    e274:	df000017 	ldw	fp,0(sp)
    e278:	dec00104 	addi	sp,sp,4
    e27c:	f800283a 	ret

0000e280 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    e280:	deffff04 	addi	sp,sp,-4
    e284:	df000015 	stw	fp,0(sp)
    e288:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    e28c:	e037883a 	mov	sp,fp
    e290:	df000017 	ldw	fp,0(sp)
    e294:	dec00104 	addi	sp,sp,4
    e298:	f800283a 	ret

0000e29c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    e29c:	defff904 	addi	sp,sp,-28
    e2a0:	dfc00615 	stw	ra,24(sp)
    e2a4:	df000515 	stw	fp,20(sp)
    e2a8:	df000504 	addi	fp,sp,20
    e2ac:	e13ffd15 	stw	r4,-12(fp)
    e2b0:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    e2b4:	e0bffd17 	ldw	r2,-12(fp)
    e2b8:	1005003a 	cmpeq	r2,r2,zero
    e2bc:	1000041e 	bne	r2,zero,e2d0 <alt_dev_llist_insert+0x34>
    e2c0:	e0bffd17 	ldw	r2,-12(fp)
    e2c4:	10800217 	ldw	r2,8(r2)
    e2c8:	1004c03a 	cmpne	r2,r2,zero
    e2cc:	1000071e 	bne	r2,zero,e2ec <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
    e2d0:	000e3500 	call	e350 <alt_get_errno>
    e2d4:	1007883a 	mov	r3,r2
    e2d8:	00800584 	movi	r2,22
    e2dc:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    e2e0:	00bffa84 	movi	r2,-22
    e2e4:	e0bfff15 	stw	r2,-4(fp)
    e2e8:	00001306 	br	e338 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    e2ec:	e0fffd17 	ldw	r3,-12(fp)
    e2f0:	e0bffe17 	ldw	r2,-8(fp)
    e2f4:	e0bffb15 	stw	r2,-20(fp)
    e2f8:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    e2fc:	e0fffc17 	ldw	r3,-16(fp)
    e300:	e0bffb17 	ldw	r2,-20(fp)
    e304:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    e308:	e0bffb17 	ldw	r2,-20(fp)
    e30c:	10c00017 	ldw	r3,0(r2)
    e310:	e0bffc17 	ldw	r2,-16(fp)
    e314:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    e318:	e0bffb17 	ldw	r2,-20(fp)
    e31c:	10c00017 	ldw	r3,0(r2)
    e320:	e0bffc17 	ldw	r2,-16(fp)
    e324:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    e328:	e0fffb17 	ldw	r3,-20(fp)
    e32c:	e0bffc17 	ldw	r2,-16(fp)
    e330:	18800015 	stw	r2,0(r3)

  return 0;  
    e334:	e03fff15 	stw	zero,-4(fp)
    e338:	e0bfff17 	ldw	r2,-4(fp)
}
    e33c:	e037883a 	mov	sp,fp
    e340:	dfc00117 	ldw	ra,4(sp)
    e344:	df000017 	ldw	fp,0(sp)
    e348:	dec00204 	addi	sp,sp,8
    e34c:	f800283a 	ret

0000e350 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e350:	defffd04 	addi	sp,sp,-12
    e354:	dfc00215 	stw	ra,8(sp)
    e358:	df000115 	stw	fp,4(sp)
    e35c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    e360:	00800074 	movhi	r2,1
    e364:	10865804 	addi	r2,r2,6496
    e368:	10800017 	ldw	r2,0(r2)
    e36c:	1005003a 	cmpeq	r2,r2,zero
    e370:	1000061e 	bne	r2,zero,e38c <alt_get_errno+0x3c>
    e374:	00800074 	movhi	r2,1
    e378:	10865804 	addi	r2,r2,6496
    e37c:	10800017 	ldw	r2,0(r2)
    e380:	103ee83a 	callr	r2
    e384:	e0bfff15 	stw	r2,-4(fp)
    e388:	00000306 	br	e398 <alt_get_errno+0x48>
    e38c:	00800074 	movhi	r2,1
    e390:	108de004 	addi	r2,r2,14208
    e394:	e0bfff15 	stw	r2,-4(fp)
    e398:	e0bfff17 	ldw	r2,-4(fp)
}
    e39c:	e037883a 	mov	sp,fp
    e3a0:	dfc00117 	ldw	ra,4(sp)
    e3a4:	df000017 	ldw	fp,0(sp)
    e3a8:	dec00204 	addi	sp,sp,8
    e3ac:	f800283a 	ret

0000e3b0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    e3b0:	defffd04 	addi	sp,sp,-12
    e3b4:	dfc00215 	stw	ra,8(sp)
    e3b8:	df000115 	stw	fp,4(sp)
    e3bc:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    e3c0:	00bfff04 	movi	r2,-4
    e3c4:	00c00074 	movhi	r3,1
    e3c8:	18fd2b04 	addi	r3,r3,-2900
    e3cc:	1885883a 	add	r2,r3,r2
    e3d0:	e0bfff15 	stw	r2,-4(fp)
    e3d4:	00000606 	br	e3f0 <_do_ctors+0x40>
        (*ctor) (); 
    e3d8:	e0bfff17 	ldw	r2,-4(fp)
    e3dc:	10800017 	ldw	r2,0(r2)
    e3e0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    e3e4:	e0bfff17 	ldw	r2,-4(fp)
    e3e8:	10bfff04 	addi	r2,r2,-4
    e3ec:	e0bfff15 	stw	r2,-4(fp)
    e3f0:	e0ffff17 	ldw	r3,-4(fp)
    e3f4:	00800074 	movhi	r2,1
    e3f8:	10bd2a04 	addi	r2,r2,-2904
    e3fc:	18bff62e 	bgeu	r3,r2,e3d8 <_do_ctors+0x28>
        (*ctor) (); 
}
    e400:	e037883a 	mov	sp,fp
    e404:	dfc00117 	ldw	ra,4(sp)
    e408:	df000017 	ldw	fp,0(sp)
    e40c:	dec00204 	addi	sp,sp,8
    e410:	f800283a 	ret

0000e414 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    e414:	defffd04 	addi	sp,sp,-12
    e418:	dfc00215 	stw	ra,8(sp)
    e41c:	df000115 	stw	fp,4(sp)
    e420:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    e424:	00bfff04 	movi	r2,-4
    e428:	00c00074 	movhi	r3,1
    e42c:	18fd2b04 	addi	r3,r3,-2900
    e430:	1885883a 	add	r2,r3,r2
    e434:	e0bfff15 	stw	r2,-4(fp)
    e438:	00000606 	br	e454 <_do_dtors+0x40>
        (*dtor) (); 
    e43c:	e0bfff17 	ldw	r2,-4(fp)
    e440:	10800017 	ldw	r2,0(r2)
    e444:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    e448:	e0bfff17 	ldw	r2,-4(fp)
    e44c:	10bfff04 	addi	r2,r2,-4
    e450:	e0bfff15 	stw	r2,-4(fp)
    e454:	e0ffff17 	ldw	r3,-4(fp)
    e458:	00800074 	movhi	r2,1
    e45c:	10bd2b04 	addi	r2,r2,-2900
    e460:	18bff62e 	bgeu	r3,r2,e43c <_do_dtors+0x28>
        (*dtor) (); 
}
    e464:	e037883a 	mov	sp,fp
    e468:	dfc00117 	ldw	ra,4(sp)
    e46c:	df000017 	ldw	fp,0(sp)
    e470:	dec00204 	addi	sp,sp,8
    e474:	f800283a 	ret

0000e478 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    e478:	defffe04 	addi	sp,sp,-8
    e47c:	dfc00115 	stw	ra,4(sp)
    e480:	df000015 	stw	fp,0(sp)
    e484:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    e488:	0009883a 	mov	r4,zero
    e48c:	01480004 	movi	r5,8192
    e490:	000efa40 	call	efa4 <alt_icache_flush>
#endif
}
    e494:	e037883a 	mov	sp,fp
    e498:	dfc00117 	ldw	ra,4(sp)
    e49c:	df000017 	ldw	fp,0(sp)
    e4a0:	dec00204 	addi	sp,sp,8
    e4a4:	f800283a 	ret

0000e4a8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    e4a8:	defff904 	addi	sp,sp,-28
    e4ac:	dfc00615 	stw	ra,24(sp)
    e4b0:	df000515 	stw	fp,20(sp)
    e4b4:	df000504 	addi	fp,sp,20
    e4b8:	e13ffc15 	stw	r4,-16(fp)
    e4bc:	e17ffd15 	stw	r5,-12(fp)
    e4c0:	e1bffe15 	stw	r6,-8(fp)
    e4c4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    e4c8:	e0800217 	ldw	r2,8(fp)
    e4cc:	d8800015 	stw	r2,0(sp)
    e4d0:	e13ffc17 	ldw	r4,-16(fp)
    e4d4:	e17ffd17 	ldw	r5,-12(fp)
    e4d8:	e1bffe17 	ldw	r6,-8(fp)
    e4dc:	e1ffff17 	ldw	r7,-4(fp)
    e4e0:	000e67c0 	call	e67c <alt_iic_isr_register>
}  
    e4e4:	e037883a 	mov	sp,fp
    e4e8:	dfc00117 	ldw	ra,4(sp)
    e4ec:	df000017 	ldw	fp,0(sp)
    e4f0:	dec00204 	addi	sp,sp,8
    e4f4:	f800283a 	ret

0000e4f8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    e4f8:	defff904 	addi	sp,sp,-28
    e4fc:	df000615 	stw	fp,24(sp)
    e500:	df000604 	addi	fp,sp,24
    e504:	e13ffe15 	stw	r4,-8(fp)
    e508:	e17fff15 	stw	r5,-4(fp)
    e50c:	e0bfff17 	ldw	r2,-4(fp)
    e510:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e514:	0005303a 	rdctl	r2,status
    e518:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e51c:	e0fffb17 	ldw	r3,-20(fp)
    e520:	00bfff84 	movi	r2,-2
    e524:	1884703a 	and	r2,r3,r2
    e528:	1001703a 	wrctl	status,r2
  
  return context;
    e52c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    e530:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
    e534:	e0fffc17 	ldw	r3,-16(fp)
    e538:	00800044 	movi	r2,1
    e53c:	10c4983a 	sll	r2,r2,r3
    e540:	1007883a 	mov	r3,r2
    e544:	00800074 	movhi	r2,1
    e548:	108de404 	addi	r2,r2,14224
    e54c:	10800017 	ldw	r2,0(r2)
    e550:	1886b03a 	or	r3,r3,r2
    e554:	00800074 	movhi	r2,1
    e558:	108de404 	addi	r2,r2,14224
    e55c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    e560:	00800074 	movhi	r2,1
    e564:	108de404 	addi	r2,r2,14224
    e568:	10800017 	ldw	r2,0(r2)
    e56c:	100170fa 	wrctl	ienable,r2
    e570:	e0bffd17 	ldw	r2,-12(fp)
    e574:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e578:	e0bffa17 	ldw	r2,-24(fp)
    e57c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    e580:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
    e584:	e037883a 	mov	sp,fp
    e588:	df000017 	ldw	fp,0(sp)
    e58c:	dec00104 	addi	sp,sp,4
    e590:	f800283a 	ret

0000e594 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    e594:	defff904 	addi	sp,sp,-28
    e598:	df000615 	stw	fp,24(sp)
    e59c:	df000604 	addi	fp,sp,24
    e5a0:	e13ffe15 	stw	r4,-8(fp)
    e5a4:	e17fff15 	stw	r5,-4(fp)
    e5a8:	e0bfff17 	ldw	r2,-4(fp)
    e5ac:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e5b0:	0005303a 	rdctl	r2,status
    e5b4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e5b8:	e0fffb17 	ldw	r3,-20(fp)
    e5bc:	00bfff84 	movi	r2,-2
    e5c0:	1884703a 	and	r2,r3,r2
    e5c4:	1001703a 	wrctl	status,r2
  
  return context;
    e5c8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    e5cc:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
    e5d0:	e0fffc17 	ldw	r3,-16(fp)
    e5d4:	00800044 	movi	r2,1
    e5d8:	10c4983a 	sll	r2,r2,r3
    e5dc:	0084303a 	nor	r2,zero,r2
    e5e0:	1007883a 	mov	r3,r2
    e5e4:	00800074 	movhi	r2,1
    e5e8:	108de404 	addi	r2,r2,14224
    e5ec:	10800017 	ldw	r2,0(r2)
    e5f0:	1886703a 	and	r3,r3,r2
    e5f4:	00800074 	movhi	r2,1
    e5f8:	108de404 	addi	r2,r2,14224
    e5fc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    e600:	00800074 	movhi	r2,1
    e604:	108de404 	addi	r2,r2,14224
    e608:	10800017 	ldw	r2,0(r2)
    e60c:	100170fa 	wrctl	ienable,r2
    e610:	e0bffd17 	ldw	r2,-12(fp)
    e614:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e618:	e0bffa17 	ldw	r2,-24(fp)
    e61c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    e620:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
    e624:	e037883a 	mov	sp,fp
    e628:	df000017 	ldw	fp,0(sp)
    e62c:	dec00104 	addi	sp,sp,4
    e630:	f800283a 	ret

0000e634 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    e634:	defffc04 	addi	sp,sp,-16
    e638:	df000315 	stw	fp,12(sp)
    e63c:	df000304 	addi	fp,sp,12
    e640:	e13ffe15 	stw	r4,-8(fp)
    e644:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    e648:	000530fa 	rdctl	r2,ienable
    e64c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    e650:	e0ffff17 	ldw	r3,-4(fp)
    e654:	00800044 	movi	r2,1
    e658:	10c4983a 	sll	r2,r2,r3
    e65c:	1007883a 	mov	r3,r2
    e660:	e0bffd17 	ldw	r2,-12(fp)
    e664:	1884703a 	and	r2,r3,r2
    e668:	1004c03a 	cmpne	r2,r2,zero
}
    e66c:	e037883a 	mov	sp,fp
    e670:	df000017 	ldw	fp,0(sp)
    e674:	dec00104 	addi	sp,sp,4
    e678:	f800283a 	ret

0000e67c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    e67c:	defff404 	addi	sp,sp,-48
    e680:	dfc00b15 	stw	ra,44(sp)
    e684:	df000a15 	stw	fp,40(sp)
    e688:	df000a04 	addi	fp,sp,40
    e68c:	e13ffb15 	stw	r4,-20(fp)
    e690:	e17ffc15 	stw	r5,-16(fp)
    e694:	e1bffd15 	stw	r6,-12(fp)
    e698:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
    e69c:	00bffa84 	movi	r2,-22
    e6a0:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    e6a4:	e0bffc17 	ldw	r2,-16(fp)
    e6a8:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    e6ac:	e0bff917 	ldw	r2,-28(fp)
    e6b0:	10800808 	cmpgei	r2,r2,32
    e6b4:	1000291e 	bne	r2,zero,e75c <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e6b8:	0005303a 	rdctl	r2,status
    e6bc:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e6c0:	e0fff717 	ldw	r3,-36(fp)
    e6c4:	00bfff84 	movi	r2,-2
    e6c8:	1884703a 	and	r2,r3,r2
    e6cc:	1001703a 	wrctl	status,r2
  
  return context;
    e6d0:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    e6d4:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
    e6d8:	e0bff917 	ldw	r2,-28(fp)
    e6dc:	00c00074 	movhi	r3,1
    e6e0:	18ce7104 	addi	r3,r3,14788
    e6e4:	100490fa 	slli	r2,r2,3
    e6e8:	10c7883a 	add	r3,r2,r3
    e6ec:	e0bffd17 	ldw	r2,-12(fp)
    e6f0:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
    e6f4:	e0bff917 	ldw	r2,-28(fp)
    e6f8:	00c00074 	movhi	r3,1
    e6fc:	18ce7104 	addi	r3,r3,14788
    e700:	100490fa 	slli	r2,r2,3
    e704:	10c5883a 	add	r2,r2,r3
    e708:	10c00104 	addi	r3,r2,4
    e70c:	e0bffe17 	ldw	r2,-8(fp)
    e710:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    e714:	e0bffd17 	ldw	r2,-12(fp)
    e718:	1005003a 	cmpeq	r2,r2,zero
    e71c:	1000051e 	bne	r2,zero,e734 <alt_iic_isr_register+0xb8>
    e720:	e17ff917 	ldw	r5,-28(fp)
    e724:	e13ffb17 	ldw	r4,-20(fp)
    e728:	000e4f80 	call	e4f8 <alt_ic_irq_enable>
    e72c:	e0bfff15 	stw	r2,-4(fp)
    e730:	00000406 	br	e744 <alt_iic_isr_register+0xc8>
    e734:	e17ff917 	ldw	r5,-28(fp)
    e738:	e13ffb17 	ldw	r4,-20(fp)
    e73c:	000e5940 	call	e594 <alt_ic_irq_disable>
    e740:	e0bfff15 	stw	r2,-4(fp)
    e744:	e0bfff17 	ldw	r2,-4(fp)
    e748:	e0bffa15 	stw	r2,-24(fp)
    e74c:	e0bff817 	ldw	r2,-32(fp)
    e750:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e754:	e0bff617 	ldw	r2,-40(fp)
    e758:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    e75c:	e0bffa17 	ldw	r2,-24(fp)
}
    e760:	e037883a 	mov	sp,fp
    e764:	dfc00117 	ldw	ra,4(sp)
    e768:	df000017 	ldw	fp,0(sp)
    e76c:	dec00204 	addi	sp,sp,8
    e770:	f800283a 	ret

0000e774 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    e774:	defff904 	addi	sp,sp,-28
    e778:	dfc00615 	stw	ra,24(sp)
    e77c:	df000515 	stw	fp,20(sp)
    e780:	df000504 	addi	fp,sp,20
    e784:	e13ffc15 	stw	r4,-16(fp)
    e788:	e17ffd15 	stw	r5,-12(fp)
    e78c:	e1bffe15 	stw	r6,-8(fp)
    e790:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    e794:	e13ffd17 	ldw	r4,-12(fp)
    e798:	e17ffe17 	ldw	r5,-8(fp)
    e79c:	e1bfff17 	ldw	r6,-4(fp)
    e7a0:	000e98c0 	call	e98c <open>
    e7a4:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    e7a8:	e0bffb17 	ldw	r2,-20(fp)
    e7ac:	1004803a 	cmplt	r2,r2,zero
    e7b0:	10001c1e 	bne	r2,zero,e824 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
    e7b4:	e0bffb17 	ldw	r2,-20(fp)
    e7b8:	00c00074 	movhi	r3,1
    e7bc:	18c17004 	addi	r3,r3,1472
    e7c0:	10800324 	muli	r2,r2,12
    e7c4:	10c5883a 	add	r2,r2,r3
    e7c8:	10c00017 	ldw	r3,0(r2)
    e7cc:	e0bffc17 	ldw	r2,-16(fp)
    e7d0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    e7d4:	e0bffb17 	ldw	r2,-20(fp)
    e7d8:	00c00074 	movhi	r3,1
    e7dc:	18c17004 	addi	r3,r3,1472
    e7e0:	10800324 	muli	r2,r2,12
    e7e4:	10c5883a 	add	r2,r2,r3
    e7e8:	10800104 	addi	r2,r2,4
    e7ec:	10c00017 	ldw	r3,0(r2)
    e7f0:	e0bffc17 	ldw	r2,-16(fp)
    e7f4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    e7f8:	e0bffb17 	ldw	r2,-20(fp)
    e7fc:	00c00074 	movhi	r3,1
    e800:	18c17004 	addi	r3,r3,1472
    e804:	10800324 	muli	r2,r2,12
    e808:	10c5883a 	add	r2,r2,r3
    e80c:	10800204 	addi	r2,r2,8
    e810:	10c00017 	ldw	r3,0(r2)
    e814:	e0bffc17 	ldw	r2,-16(fp)
    e818:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    e81c:	e13ffb17 	ldw	r4,-20(fp)
    e820:	000c82c0 	call	c82c <alt_release_fd>
  }
} 
    e824:	e037883a 	mov	sp,fp
    e828:	dfc00117 	ldw	ra,4(sp)
    e82c:	df000017 	ldw	fp,0(sp)
    e830:	dec00204 	addi	sp,sp,8
    e834:	f800283a 	ret

0000e838 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    e838:	defffb04 	addi	sp,sp,-20
    e83c:	dfc00415 	stw	ra,16(sp)
    e840:	df000315 	stw	fp,12(sp)
    e844:	df000304 	addi	fp,sp,12
    e848:	e13ffd15 	stw	r4,-12(fp)
    e84c:	e17ffe15 	stw	r5,-8(fp)
    e850:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    e854:	01000074 	movhi	r4,1
    e858:	21017304 	addi	r4,r4,1484
    e85c:	e17ffd17 	ldw	r5,-12(fp)
    e860:	01800044 	movi	r6,1
    e864:	01c07fc4 	movi	r7,511
    e868:	000e7740 	call	e774 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    e86c:	01000074 	movhi	r4,1
    e870:	21017004 	addi	r4,r4,1472
    e874:	e17ffe17 	ldw	r5,-8(fp)
    e878:	000d883a 	mov	r6,zero
    e87c:	01c07fc4 	movi	r7,511
    e880:	000e7740 	call	e774 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    e884:	01000074 	movhi	r4,1
    e888:	21017604 	addi	r4,r4,1496
    e88c:	e17fff17 	ldw	r5,-4(fp)
    e890:	01800044 	movi	r6,1
    e894:	01c07fc4 	movi	r7,511
    e898:	000e7740 	call	e774 <alt_open_fd>
}  
    e89c:	e037883a 	mov	sp,fp
    e8a0:	dfc00117 	ldw	ra,4(sp)
    e8a4:	df000017 	ldw	fp,0(sp)
    e8a8:	dec00204 	addi	sp,sp,8
    e8ac:	f800283a 	ret

0000e8b0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    e8b0:	defffc04 	addi	sp,sp,-16
    e8b4:	df000315 	stw	fp,12(sp)
    e8b8:	df000304 	addi	fp,sp,12
    e8bc:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    e8c0:	e0bffe17 	ldw	r2,-8(fp)
    e8c4:	10800217 	ldw	r2,8(r2)
    e8c8:	10d00034 	orhi	r3,r2,16384
    e8cc:	e0bffe17 	ldw	r2,-8(fp)
    e8d0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    e8d4:	e03ffd15 	stw	zero,-12(fp)
    e8d8:	00002006 	br	e95c <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    e8dc:	e0bffd17 	ldw	r2,-12(fp)
    e8e0:	00c00074 	movhi	r3,1
    e8e4:	18c17004 	addi	r3,r3,1472
    e8e8:	10800324 	muli	r2,r2,12
    e8ec:	10c5883a 	add	r2,r2,r3
    e8f0:	10c00017 	ldw	r3,0(r2)
    e8f4:	e0bffe17 	ldw	r2,-8(fp)
    e8f8:	10800017 	ldw	r2,0(r2)
    e8fc:	1880141e 	bne	r3,r2,e950 <alt_file_locked+0xa0>
    e900:	e0bffd17 	ldw	r2,-12(fp)
    e904:	00c00074 	movhi	r3,1
    e908:	18c17004 	addi	r3,r3,1472
    e90c:	10800324 	muli	r2,r2,12
    e910:	10c5883a 	add	r2,r2,r3
    e914:	10800204 	addi	r2,r2,8
    e918:	10800017 	ldw	r2,0(r2)
    e91c:	1004403a 	cmpge	r2,r2,zero
    e920:	10000b1e 	bne	r2,zero,e950 <alt_file_locked+0xa0>
    e924:	e0bffd17 	ldw	r2,-12(fp)
    e928:	10800324 	muli	r2,r2,12
    e92c:	1007883a 	mov	r3,r2
    e930:	00800074 	movhi	r2,1
    e934:	10817004 	addi	r2,r2,1472
    e938:	1887883a 	add	r3,r3,r2
    e93c:	e0bffe17 	ldw	r2,-8(fp)
    e940:	18800326 	beq	r3,r2,e950 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    e944:	00bffcc4 	movi	r2,-13
    e948:	e0bfff15 	stw	r2,-4(fp)
    e94c:	00000a06 	br	e978 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    e950:	e0bffd17 	ldw	r2,-12(fp)
    e954:	10800044 	addi	r2,r2,1
    e958:	e0bffd15 	stw	r2,-12(fp)
    e95c:	00800074 	movhi	r2,1
    e960:	10865704 	addi	r2,r2,6492
    e964:	10800017 	ldw	r2,0(r2)
    e968:	1007883a 	mov	r3,r2
    e96c:	e0bffd17 	ldw	r2,-12(fp)
    e970:	18bfda2e 	bgeu	r3,r2,e8dc <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    e974:	e03fff15 	stw	zero,-4(fp)
    e978:	e0bfff17 	ldw	r2,-4(fp)
}
    e97c:	e037883a 	mov	sp,fp
    e980:	df000017 	ldw	fp,0(sp)
    e984:	dec00104 	addi	sp,sp,4
    e988:	f800283a 	ret

0000e98c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    e98c:	defff404 	addi	sp,sp,-48
    e990:	dfc00b15 	stw	ra,44(sp)
    e994:	df000a15 	stw	fp,40(sp)
    e998:	df000a04 	addi	fp,sp,40
    e99c:	e13ffb15 	stw	r4,-20(fp)
    e9a0:	e17ffc15 	stw	r5,-16(fp)
    e9a4:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    e9a8:	00bfffc4 	movi	r2,-1
    e9ac:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
    e9b0:	00bffb44 	movi	r2,-19
    e9b4:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
    e9b8:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    e9bc:	e13ffb17 	ldw	r4,-20(fp)
    e9c0:	01400074 	movhi	r5,1
    e9c4:	29465504 	addi	r5,r5,6484
    e9c8:	000ed380 	call	ed38 <alt_find_dev>
    e9cc:	e0bffa15 	stw	r2,-24(fp)
    e9d0:	e0bffa17 	ldw	r2,-24(fp)
    e9d4:	1004c03a 	cmpne	r2,r2,zero
    e9d8:	1000051e 	bne	r2,zero,e9f0 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    e9dc:	e13ffb17 	ldw	r4,-20(fp)
    e9e0:	000edcc0 	call	edcc <alt_find_file>
    e9e4:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
    e9e8:	00800044 	movi	r2,1
    e9ec:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    e9f0:	e0bffa17 	ldw	r2,-24(fp)
    e9f4:	1005003a 	cmpeq	r2,r2,zero
    e9f8:	1000301e 	bne	r2,zero,eabc <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
    e9fc:	e13ffa17 	ldw	r4,-24(fp)
    ea00:	000eeec0 	call	eeec <alt_get_fd>
    ea04:	e0bff815 	stw	r2,-32(fp)
    ea08:	e0bff817 	ldw	r2,-32(fp)
    ea0c:	1004403a 	cmpge	r2,r2,zero
    ea10:	1000031e 	bne	r2,zero,ea20 <open+0x94>
    {
      status = index;
    ea14:	e0bff817 	ldw	r2,-32(fp)
    ea18:	e0bff715 	stw	r2,-36(fp)
    ea1c:	00002906 	br	eac4 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
    ea20:	e0bff817 	ldw	r2,-32(fp)
    ea24:	10800324 	muli	r2,r2,12
    ea28:	1007883a 	mov	r3,r2
    ea2c:	00800074 	movhi	r2,1
    ea30:	10817004 	addi	r2,r2,1472
    ea34:	1885883a 	add	r2,r3,r2
    ea38:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    ea3c:	e0fffc17 	ldw	r3,-16(fp)
    ea40:	00900034 	movhi	r2,16384
    ea44:	10bfffc4 	addi	r2,r2,-1
    ea48:	1886703a 	and	r3,r3,r2
    ea4c:	e0bff917 	ldw	r2,-28(fp)
    ea50:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    ea54:	e0bff617 	ldw	r2,-40(fp)
    ea58:	1004c03a 	cmpne	r2,r2,zero
    ea5c:	1000061e 	bne	r2,zero,ea78 <open+0xec>
    ea60:	e13ff917 	ldw	r4,-28(fp)
    ea64:	000e8b00 	call	e8b0 <alt_file_locked>
    ea68:	e0bff715 	stw	r2,-36(fp)
    ea6c:	e0bff717 	ldw	r2,-36(fp)
    ea70:	1004803a 	cmplt	r2,r2,zero
    ea74:	1000131e 	bne	r2,zero,eac4 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    ea78:	e0bffa17 	ldw	r2,-24(fp)
    ea7c:	10800317 	ldw	r2,12(r2)
    ea80:	1005003a 	cmpeq	r2,r2,zero
    ea84:	1000091e 	bne	r2,zero,eaac <open+0x120>
    ea88:	e0bffa17 	ldw	r2,-24(fp)
    ea8c:	10800317 	ldw	r2,12(r2)
    ea90:	e13ff917 	ldw	r4,-28(fp)
    ea94:	e17ffb17 	ldw	r5,-20(fp)
    ea98:	e1bffc17 	ldw	r6,-16(fp)
    ea9c:	e1fffd17 	ldw	r7,-12(fp)
    eaa0:	103ee83a 	callr	r2
    eaa4:	e0bfff15 	stw	r2,-4(fp)
    eaa8:	00000106 	br	eab0 <open+0x124>
    eaac:	e03fff15 	stw	zero,-4(fp)
    eab0:	e0bfff17 	ldw	r2,-4(fp)
    eab4:	e0bff715 	stw	r2,-36(fp)
    eab8:	00000206 	br	eac4 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
    eabc:	00bffb44 	movi	r2,-19
    eac0:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    eac4:	e0bff717 	ldw	r2,-36(fp)
    eac8:	1004403a 	cmpge	r2,r2,zero
    eacc:	1000091e 	bne	r2,zero,eaf4 <open+0x168>
  {
    alt_release_fd (index);  
    ead0:	e13ff817 	ldw	r4,-32(fp)
    ead4:	000c82c0 	call	c82c <alt_release_fd>
    ALT_ERRNO = -status;
    ead8:	000eb140 	call	eb14 <alt_get_errno>
    eadc:	e0fff717 	ldw	r3,-36(fp)
    eae0:	00c7c83a 	sub	r3,zero,r3
    eae4:	10c00015 	stw	r3,0(r2)
    return -1;
    eae8:	00bfffc4 	movi	r2,-1
    eaec:	e0bffe15 	stw	r2,-8(fp)
    eaf0:	00000206 	br	eafc <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
    eaf4:	e0bff817 	ldw	r2,-32(fp)
    eaf8:	e0bffe15 	stw	r2,-8(fp)
    eafc:	e0bffe17 	ldw	r2,-8(fp)
}
    eb00:	e037883a 	mov	sp,fp
    eb04:	dfc00117 	ldw	ra,4(sp)
    eb08:	df000017 	ldw	fp,0(sp)
    eb0c:	dec00204 	addi	sp,sp,8
    eb10:	f800283a 	ret

0000eb14 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    eb14:	defffd04 	addi	sp,sp,-12
    eb18:	dfc00215 	stw	ra,8(sp)
    eb1c:	df000115 	stw	fp,4(sp)
    eb20:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    eb24:	00800074 	movhi	r2,1
    eb28:	10865804 	addi	r2,r2,6496
    eb2c:	10800017 	ldw	r2,0(r2)
    eb30:	1005003a 	cmpeq	r2,r2,zero
    eb34:	1000061e 	bne	r2,zero,eb50 <alt_get_errno+0x3c>
    eb38:	00800074 	movhi	r2,1
    eb3c:	10865804 	addi	r2,r2,6496
    eb40:	10800017 	ldw	r2,0(r2)
    eb44:	103ee83a 	callr	r2
    eb48:	e0bfff15 	stw	r2,-4(fp)
    eb4c:	00000306 	br	eb5c <alt_get_errno+0x48>
    eb50:	00800074 	movhi	r2,1
    eb54:	108de004 	addi	r2,r2,14208
    eb58:	e0bfff15 	stw	r2,-4(fp)
    eb5c:	e0bfff17 	ldw	r2,-4(fp)
}
    eb60:	e037883a 	mov	sp,fp
    eb64:	dfc00117 	ldw	ra,4(sp)
    eb68:	df000017 	ldw	fp,0(sp)
    eb6c:	dec00204 	addi	sp,sp,8
    eb70:	f800283a 	ret

0000eb74 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    eb74:	defffa04 	addi	sp,sp,-24
    eb78:	df000515 	stw	fp,20(sp)
    eb7c:	df000504 	addi	fp,sp,20
    eb80:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    eb84:	0005303a 	rdctl	r2,status
    eb88:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    eb8c:	e0fffd17 	ldw	r3,-12(fp)
    eb90:	00bfff84 	movi	r2,-2
    eb94:	1884703a 	and	r2,r3,r2
    eb98:	1001703a 	wrctl	status,r2
  
  return context;
    eb9c:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    eba0:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
    eba4:	e0bfff17 	ldw	r2,-4(fp)
    eba8:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    ebac:	e0bffc17 	ldw	r2,-16(fp)
    ebb0:	10c00017 	ldw	r3,0(r2)
    ebb4:	e0bffc17 	ldw	r2,-16(fp)
    ebb8:	10800117 	ldw	r2,4(r2)
    ebbc:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
    ebc0:	e0bffc17 	ldw	r2,-16(fp)
    ebc4:	10c00117 	ldw	r3,4(r2)
    ebc8:	e0bffc17 	ldw	r2,-16(fp)
    ebcc:	10800017 	ldw	r2,0(r2)
    ebd0:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    ebd4:	e0fffc17 	ldw	r3,-16(fp)
    ebd8:	e0bffc17 	ldw	r2,-16(fp)
    ebdc:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
    ebe0:	e0fffc17 	ldw	r3,-16(fp)
    ebe4:	e0bffc17 	ldw	r2,-16(fp)
    ebe8:	18800015 	stw	r2,0(r3)
    ebec:	e0bffe17 	ldw	r2,-8(fp)
    ebf0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ebf4:	e0bffb17 	ldw	r2,-20(fp)
    ebf8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    ebfc:	e037883a 	mov	sp,fp
    ec00:	df000017 	ldw	fp,0(sp)
    ec04:	dec00104 	addi	sp,sp,4
    ec08:	f800283a 	ret

0000ec0c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    ec0c:	defffb04 	addi	sp,sp,-20
    ec10:	dfc00415 	stw	ra,16(sp)
    ec14:	df000315 	stw	fp,12(sp)
    ec18:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    ec1c:	d0a01117 	ldw	r2,-32700(gp)
    ec20:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    ec24:	d0a79c17 	ldw	r2,-24976(gp)
    ec28:	10800044 	addi	r2,r2,1
    ec2c:	d0a79c15 	stw	r2,-24976(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    ec30:	00003106 	br	ecf8 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
    ec34:	e0bffe17 	ldw	r2,-8(fp)
    ec38:	10800017 	ldw	r2,0(r2)
    ec3c:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    ec40:	e0bffe17 	ldw	r2,-8(fp)
    ec44:	10800403 	ldbu	r2,16(r2)
    ec48:	10803fcc 	andi	r2,r2,255
    ec4c:	1005003a 	cmpeq	r2,r2,zero
    ec50:	1000051e 	bne	r2,zero,ec68 <alt_tick+0x5c>
    ec54:	d0a79c17 	ldw	r2,-24976(gp)
    ec58:	1004c03a 	cmpne	r2,r2,zero
    ec5c:	1000021e 	bne	r2,zero,ec68 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
    ec60:	e0bffe17 	ldw	r2,-8(fp)
    ec64:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    ec68:	e0bffe17 	ldw	r2,-8(fp)
    ec6c:	10c00217 	ldw	r3,8(r2)
    ec70:	d0a79c17 	ldw	r2,-24976(gp)
    ec74:	10c01e36 	bltu	r2,r3,ecf0 <alt_tick+0xe4>
    ec78:	e0bffe17 	ldw	r2,-8(fp)
    ec7c:	10800403 	ldbu	r2,16(r2)
    ec80:	10803fcc 	andi	r2,r2,255
    ec84:	1004c03a 	cmpne	r2,r2,zero
    ec88:	1000191e 	bne	r2,zero,ecf0 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
    ec8c:	e0bffe17 	ldw	r2,-8(fp)
    ec90:	10c00317 	ldw	r3,12(r2)
    ec94:	e0bffe17 	ldw	r2,-8(fp)
    ec98:	11000517 	ldw	r4,20(r2)
    ec9c:	183ee83a 	callr	r3
    eca0:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    eca4:	e0bffd17 	ldw	r2,-12(fp)
    eca8:	1004c03a 	cmpne	r2,r2,zero
    ecac:	1000031e 	bne	r2,zero,ecbc <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
    ecb0:	e13ffe17 	ldw	r4,-8(fp)
    ecb4:	000eb740 	call	eb74 <alt_alarm_stop>
    ecb8:	00000d06 	br	ecf0 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
    ecbc:	e0bffe17 	ldw	r2,-8(fp)
    ecc0:	10c00217 	ldw	r3,8(r2)
    ecc4:	e0bffd17 	ldw	r2,-12(fp)
    ecc8:	1887883a 	add	r3,r3,r2
    eccc:	e0bffe17 	ldw	r2,-8(fp)
    ecd0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    ecd4:	e0bffe17 	ldw	r2,-8(fp)
    ecd8:	10c00217 	ldw	r3,8(r2)
    ecdc:	d0a79c17 	ldw	r2,-24976(gp)
    ece0:	1880032e 	bgeu	r3,r2,ecf0 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
    ece4:	e0fffe17 	ldw	r3,-8(fp)
    ece8:	00800044 	movi	r2,1
    ecec:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
    ecf0:	e0bfff17 	ldw	r2,-4(fp)
    ecf4:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    ecf8:	d0e01104 	addi	r3,gp,-32700
    ecfc:	e0bffe17 	ldw	r2,-8(fp)
    ed00:	10ffcc1e 	bne	r2,r3,ec34 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    ed04:	e037883a 	mov	sp,fp
    ed08:	dfc00117 	ldw	ra,4(sp)
    ed0c:	df000017 	ldw	fp,0(sp)
    ed10:	dec00204 	addi	sp,sp,8
    ed14:	f800283a 	ret

0000ed18 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    ed18:	deffff04 	addi	sp,sp,-4
    ed1c:	df000015 	stw	fp,0(sp)
    ed20:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    ed24:	000170fa 	wrctl	ienable,zero
}
    ed28:	e037883a 	mov	sp,fp
    ed2c:	df000017 	ldw	fp,0(sp)
    ed30:	dec00104 	addi	sp,sp,4
    ed34:	f800283a 	ret

0000ed38 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    ed38:	defff904 	addi	sp,sp,-28
    ed3c:	dfc00615 	stw	ra,24(sp)
    ed40:	df000515 	stw	fp,20(sp)
    ed44:	df000504 	addi	fp,sp,20
    ed48:	e13ffd15 	stw	r4,-12(fp)
    ed4c:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
    ed50:	e0bffe17 	ldw	r2,-8(fp)
    ed54:	10800017 	ldw	r2,0(r2)
    ed58:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    ed5c:	e13ffd17 	ldw	r4,-12(fp)
    ed60:	000abec0 	call	abec <strlen>
    ed64:	10800044 	addi	r2,r2,1
    ed68:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    ed6c:	00000d06 	br	eda4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    ed70:	e0bffc17 	ldw	r2,-16(fp)
    ed74:	11000217 	ldw	r4,8(r2)
    ed78:	e1bffb17 	ldw	r6,-20(fp)
    ed7c:	e17ffd17 	ldw	r5,-12(fp)
    ed80:	000f0800 	call	f080 <memcmp>
    ed84:	1004c03a 	cmpne	r2,r2,zero
    ed88:	1000031e 	bne	r2,zero,ed98 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    ed8c:	e0bffc17 	ldw	r2,-16(fp)
    ed90:	e0bfff15 	stw	r2,-4(fp)
    ed94:	00000706 	br	edb4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    ed98:	e0bffc17 	ldw	r2,-16(fp)
    ed9c:	10800017 	ldw	r2,0(r2)
    eda0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    eda4:	e0fffe17 	ldw	r3,-8(fp)
    eda8:	e0bffc17 	ldw	r2,-16(fp)
    edac:	10fff01e 	bne	r2,r3,ed70 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    edb0:	e03fff15 	stw	zero,-4(fp)
    edb4:	e0bfff17 	ldw	r2,-4(fp)
}
    edb8:	e037883a 	mov	sp,fp
    edbc:	dfc00117 	ldw	ra,4(sp)
    edc0:	df000017 	ldw	fp,0(sp)
    edc4:	dec00204 	addi	sp,sp,8
    edc8:	f800283a 	ret

0000edcc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    edcc:	defffa04 	addi	sp,sp,-24
    edd0:	dfc00515 	stw	ra,20(sp)
    edd4:	df000415 	stw	fp,16(sp)
    edd8:	df000404 	addi	fp,sp,16
    eddc:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    ede0:	00800074 	movhi	r2,1
    ede4:	10865304 	addi	r2,r2,6476
    ede8:	10800017 	ldw	r2,0(r2)
    edec:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    edf0:	00003306 	br	eec0 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
    edf4:	e0bffd17 	ldw	r2,-12(fp)
    edf8:	11000217 	ldw	r4,8(r2)
    edfc:	000abec0 	call	abec <strlen>
    ee00:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
    ee04:	e0bffd17 	ldw	r2,-12(fp)
    ee08:	10c00217 	ldw	r3,8(r2)
    ee0c:	e0bffc17 	ldw	r2,-16(fp)
    ee10:	1885883a 	add	r2,r3,r2
    ee14:	10bfffc4 	addi	r2,r2,-1
    ee18:	10800003 	ldbu	r2,0(r2)
    ee1c:	10803fcc 	andi	r2,r2,255
    ee20:	1080201c 	xori	r2,r2,128
    ee24:	10bfe004 	addi	r2,r2,-128
    ee28:	10800bd8 	cmpnei	r2,r2,47
    ee2c:	1000031e 	bne	r2,zero,ee3c <alt_find_file+0x70>
    {
      len -= 1;
    ee30:	e0bffc17 	ldw	r2,-16(fp)
    ee34:	10bfffc4 	addi	r2,r2,-1
    ee38:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    ee3c:	e0bffc17 	ldw	r2,-16(fp)
    ee40:	1007883a 	mov	r3,r2
    ee44:	e0bffe17 	ldw	r2,-8(fp)
    ee48:	1885883a 	add	r2,r3,r2
    ee4c:	10800003 	ldbu	r2,0(r2)
    ee50:	10803fcc 	andi	r2,r2,255
    ee54:	1080201c 	xori	r2,r2,128
    ee58:	10bfe004 	addi	r2,r2,-128
    ee5c:	10800be0 	cmpeqi	r2,r2,47
    ee60:	10000a1e 	bne	r2,zero,ee8c <alt_find_file+0xc0>
    ee64:	e0bffc17 	ldw	r2,-16(fp)
    ee68:	1007883a 	mov	r3,r2
    ee6c:	e0bffe17 	ldw	r2,-8(fp)
    ee70:	1885883a 	add	r2,r3,r2
    ee74:	10800003 	ldbu	r2,0(r2)
    ee78:	10803fcc 	andi	r2,r2,255
    ee7c:	1080201c 	xori	r2,r2,128
    ee80:	10bfe004 	addi	r2,r2,-128
    ee84:	1004c03a 	cmpne	r2,r2,zero
    ee88:	10000a1e 	bne	r2,zero,eeb4 <alt_find_file+0xe8>
    ee8c:	e0bffd17 	ldw	r2,-12(fp)
    ee90:	11000217 	ldw	r4,8(r2)
    ee94:	e1bffc17 	ldw	r6,-16(fp)
    ee98:	e17ffe17 	ldw	r5,-8(fp)
    ee9c:	000f0800 	call	f080 <memcmp>
    eea0:	1004c03a 	cmpne	r2,r2,zero
    eea4:	1000031e 	bne	r2,zero,eeb4 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    eea8:	e0bffd17 	ldw	r2,-12(fp)
    eeac:	e0bfff15 	stw	r2,-4(fp)
    eeb0:	00000806 	br	eed4 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
    eeb4:	e0bffd17 	ldw	r2,-12(fp)
    eeb8:	10800017 	ldw	r2,0(r2)
    eebc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    eec0:	00c00074 	movhi	r3,1
    eec4:	18c65304 	addi	r3,r3,6476
    eec8:	e0bffd17 	ldw	r2,-12(fp)
    eecc:	10ffc91e 	bne	r2,r3,edf4 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    eed0:	e03fff15 	stw	zero,-4(fp)
    eed4:	e0bfff17 	ldw	r2,-4(fp)
}
    eed8:	e037883a 	mov	sp,fp
    eedc:	dfc00117 	ldw	ra,4(sp)
    eee0:	df000017 	ldw	fp,0(sp)
    eee4:	dec00204 	addi	sp,sp,8
    eee8:	f800283a 	ret

0000eeec <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    eeec:	defffc04 	addi	sp,sp,-16
    eef0:	df000315 	stw	fp,12(sp)
    eef4:	df000304 	addi	fp,sp,12
    eef8:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    eefc:	00bffa04 	movi	r2,-24
    ef00:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    ef04:	e03ffe15 	stw	zero,-8(fp)
    ef08:	00001e06 	br	ef84 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
    ef0c:	e0bffe17 	ldw	r2,-8(fp)
    ef10:	00c00074 	movhi	r3,1
    ef14:	18c17004 	addi	r3,r3,1472
    ef18:	10800324 	muli	r2,r2,12
    ef1c:	10c5883a 	add	r2,r2,r3
    ef20:	10800017 	ldw	r2,0(r2)
    ef24:	1004c03a 	cmpne	r2,r2,zero
    ef28:	1000131e 	bne	r2,zero,ef78 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
    ef2c:	e0bffe17 	ldw	r2,-8(fp)
    ef30:	00c00074 	movhi	r3,1
    ef34:	18c17004 	addi	r3,r3,1472
    ef38:	10800324 	muli	r2,r2,12
    ef3c:	10c7883a 	add	r3,r2,r3
    ef40:	e0bfff17 	ldw	r2,-4(fp)
    ef44:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
    ef48:	00800074 	movhi	r2,1
    ef4c:	10865704 	addi	r2,r2,6492
    ef50:	10c00017 	ldw	r3,0(r2)
    ef54:	e0bffe17 	ldw	r2,-8(fp)
    ef58:	1880040e 	bge	r3,r2,ef6c <alt_get_fd+0x80>
      {
        alt_max_fd = i;
    ef5c:	00c00074 	movhi	r3,1
    ef60:	18c65704 	addi	r3,r3,6492
    ef64:	e0bffe17 	ldw	r2,-8(fp)
    ef68:	18800015 	stw	r2,0(r3)
      }
      rc = i;
    ef6c:	e0bffe17 	ldw	r2,-8(fp)
    ef70:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    ef74:	00000606 	br	ef90 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    ef78:	e0bffe17 	ldw	r2,-8(fp)
    ef7c:	10800044 	addi	r2,r2,1
    ef80:	e0bffe15 	stw	r2,-8(fp)
    ef84:	e0bffe17 	ldw	r2,-8(fp)
    ef88:	10800810 	cmplti	r2,r2,32
    ef8c:	103fdf1e 	bne	r2,zero,ef0c <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    ef90:	e0bffd17 	ldw	r2,-12(fp)
}
    ef94:	e037883a 	mov	sp,fp
    ef98:	df000017 	ldw	fp,0(sp)
    ef9c:	dec00104 	addi	sp,sp,4
    efa0:	f800283a 	ret

0000efa4 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    efa4:	defffb04 	addi	sp,sp,-20
    efa8:	df000415 	stw	fp,16(sp)
    efac:	df000404 	addi	fp,sp,16
    efb0:	e13ffe15 	stw	r4,-8(fp)
    efb4:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    efb8:	e0bfff17 	ldw	r2,-4(fp)
    efbc:	10880070 	cmpltui	r2,r2,8193
    efc0:	1000021e 	bne	r2,zero,efcc <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    efc4:	00880004 	movi	r2,8192
    efc8:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    efcc:	e0fffe17 	ldw	r3,-8(fp)
    efd0:	e0bfff17 	ldw	r2,-4(fp)
    efd4:	1885883a 	add	r2,r3,r2
    efd8:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    efdc:	e0bffe17 	ldw	r2,-8(fp)
    efe0:	e0bffd15 	stw	r2,-12(fp)
    efe4:	00000506 	br	effc <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    efe8:	e0bffd17 	ldw	r2,-12(fp)
    efec:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    eff0:	e0bffd17 	ldw	r2,-12(fp)
    eff4:	10800804 	addi	r2,r2,32
    eff8:	e0bffd15 	stw	r2,-12(fp)
    effc:	e0fffd17 	ldw	r3,-12(fp)
    f000:	e0bffc17 	ldw	r2,-16(fp)
    f004:	18bff836 	bltu	r3,r2,efe8 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    f008:	e0bffe17 	ldw	r2,-8(fp)
    f00c:	108007cc 	andi	r2,r2,31
    f010:	1005003a 	cmpeq	r2,r2,zero
    f014:	1000021e 	bne	r2,zero,f020 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    f018:	e0bffd17 	ldw	r2,-12(fp)
    f01c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    f020:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    f024:	e037883a 	mov	sp,fp
    f028:	df000017 	ldw	fp,0(sp)
    f02c:	dec00104 	addi	sp,sp,4
    f030:	f800283a 	ret

0000f034 <atexit>:
    f034:	200b883a 	mov	r5,r4
    f038:	000d883a 	mov	r6,zero
    f03c:	0009883a 	mov	r4,zero
    f040:	000f883a 	mov	r7,zero
    f044:	000f0f41 	jmpi	f0f4 <__register_exitproc>

0000f048 <exit>:
    f048:	defffe04 	addi	sp,sp,-8
    f04c:	000b883a 	mov	r5,zero
    f050:	dc000015 	stw	r16,0(sp)
    f054:	dfc00115 	stw	ra,4(sp)
    f058:	2021883a 	mov	r16,r4
    f05c:	000f22c0 	call	f22c <__call_exitprocs>
    f060:	00800074 	movhi	r2,1
    f064:	10864e04 	addi	r2,r2,6456
    f068:	11000017 	ldw	r4,0(r2)
    f06c:	20800f17 	ldw	r2,60(r4)
    f070:	10000126 	beq	r2,zero,f078 <exit+0x30>
    f074:	103ee83a 	callr	r2
    f078:	8009883a 	mov	r4,r16
    f07c:	000f41c0 	call	f41c <_exit>

0000f080 <memcmp>:
    f080:	00c000c4 	movi	r3,3
    f084:	1980032e 	bgeu	r3,r6,f094 <memcmp+0x14>
    f088:	2144b03a 	or	r2,r4,r5
    f08c:	10c4703a 	and	r2,r2,r3
    f090:	10000f26 	beq	r2,zero,f0d0 <memcmp+0x50>
    f094:	31ffffc4 	addi	r7,r6,-1
    f098:	3000061e 	bne	r6,zero,f0b4 <memcmp+0x34>
    f09c:	00000a06 	br	f0c8 <memcmp+0x48>
    f0a0:	39ffffc4 	addi	r7,r7,-1
    f0a4:	00bfffc4 	movi	r2,-1
    f0a8:	21000044 	addi	r4,r4,1
    f0ac:	29400044 	addi	r5,r5,1
    f0b0:	38800526 	beq	r7,r2,f0c8 <memcmp+0x48>
    f0b4:	20c00003 	ldbu	r3,0(r4)
    f0b8:	28800003 	ldbu	r2,0(r5)
    f0bc:	18bff826 	beq	r3,r2,f0a0 <memcmp+0x20>
    f0c0:	1885c83a 	sub	r2,r3,r2
    f0c4:	f800283a 	ret
    f0c8:	0005883a 	mov	r2,zero
    f0cc:	f800283a 	ret
    f0d0:	180f883a 	mov	r7,r3
    f0d4:	20c00017 	ldw	r3,0(r4)
    f0d8:	28800017 	ldw	r2,0(r5)
    f0dc:	18bfed1e 	bne	r3,r2,f094 <memcmp+0x14>
    f0e0:	31bfff04 	addi	r6,r6,-4
    f0e4:	21000104 	addi	r4,r4,4
    f0e8:	29400104 	addi	r5,r5,4
    f0ec:	39bff936 	bltu	r7,r6,f0d4 <memcmp+0x54>
    f0f0:	003fe806 	br	f094 <memcmp+0x14>

0000f0f4 <__register_exitproc>:
    f0f4:	defffa04 	addi	sp,sp,-24
    f0f8:	00800074 	movhi	r2,1
    f0fc:	10864e04 	addi	r2,r2,6456
    f100:	dc000015 	stw	r16,0(sp)
    f104:	14000017 	ldw	r16,0(r2)
    f108:	dd000415 	stw	r20,16(sp)
    f10c:	2829883a 	mov	r20,r5
    f110:	81405217 	ldw	r5,328(r16)
    f114:	dcc00315 	stw	r19,12(sp)
    f118:	dc800215 	stw	r18,8(sp)
    f11c:	dc400115 	stw	r17,4(sp)
    f120:	dfc00515 	stw	ra,20(sp)
    f124:	2023883a 	mov	r17,r4
    f128:	3027883a 	mov	r19,r6
    f12c:	3825883a 	mov	r18,r7
    f130:	28002526 	beq	r5,zero,f1c8 <__register_exitproc+0xd4>
    f134:	29000117 	ldw	r4,4(r5)
    f138:	008007c4 	movi	r2,31
    f13c:	11002716 	blt	r2,r4,f1dc <__register_exitproc+0xe8>
    f140:	8800101e 	bne	r17,zero,f184 <__register_exitproc+0x90>
    f144:	2105883a 	add	r2,r4,r4
    f148:	1085883a 	add	r2,r2,r2
    f14c:	20c00044 	addi	r3,r4,1
    f150:	1145883a 	add	r2,r2,r5
    f154:	0009883a 	mov	r4,zero
    f158:	15000215 	stw	r20,8(r2)
    f15c:	28c00115 	stw	r3,4(r5)
    f160:	2005883a 	mov	r2,r4
    f164:	dfc00517 	ldw	ra,20(sp)
    f168:	dd000417 	ldw	r20,16(sp)
    f16c:	dcc00317 	ldw	r19,12(sp)
    f170:	dc800217 	ldw	r18,8(sp)
    f174:	dc400117 	ldw	r17,4(sp)
    f178:	dc000017 	ldw	r16,0(sp)
    f17c:	dec00604 	addi	sp,sp,24
    f180:	f800283a 	ret
    f184:	29802204 	addi	r6,r5,136
    f188:	00800044 	movi	r2,1
    f18c:	110e983a 	sll	r7,r2,r4
    f190:	30c04017 	ldw	r3,256(r6)
    f194:	2105883a 	add	r2,r4,r4
    f198:	1085883a 	add	r2,r2,r2
    f19c:	1185883a 	add	r2,r2,r6
    f1a0:	19c6b03a 	or	r3,r3,r7
    f1a4:	14802015 	stw	r18,128(r2)
    f1a8:	14c00015 	stw	r19,0(r2)
    f1ac:	00800084 	movi	r2,2
    f1b0:	30c04015 	stw	r3,256(r6)
    f1b4:	88bfe31e 	bne	r17,r2,f144 <__register_exitproc+0x50>
    f1b8:	30804117 	ldw	r2,260(r6)
    f1bc:	11c4b03a 	or	r2,r2,r7
    f1c0:	30804115 	stw	r2,260(r6)
    f1c4:	003fdf06 	br	f144 <__register_exitproc+0x50>
    f1c8:	00800074 	movhi	r2,1
    f1cc:	108eb104 	addi	r2,r2,15044
    f1d0:	100b883a 	mov	r5,r2
    f1d4:	80805215 	stw	r2,328(r16)
    f1d8:	003fd606 	br	f134 <__register_exitproc+0x40>
    f1dc:	00800034 	movhi	r2,0
    f1e0:	10800004 	addi	r2,r2,0
    f1e4:	1000021e 	bne	r2,zero,f1f0 <__register_exitproc+0xfc>
    f1e8:	013fffc4 	movi	r4,-1
    f1ec:	003fdc06 	br	f160 <__register_exitproc+0x6c>
    f1f0:	01006404 	movi	r4,400
    f1f4:	103ee83a 	callr	r2
    f1f8:	1007883a 	mov	r3,r2
    f1fc:	103ffa26 	beq	r2,zero,f1e8 <__register_exitproc+0xf4>
    f200:	80805217 	ldw	r2,328(r16)
    f204:	180b883a 	mov	r5,r3
    f208:	18000115 	stw	zero,4(r3)
    f20c:	18800015 	stw	r2,0(r3)
    f210:	80c05215 	stw	r3,328(r16)
    f214:	18006215 	stw	zero,392(r3)
    f218:	18006315 	stw	zero,396(r3)
    f21c:	0009883a 	mov	r4,zero
    f220:	883fc826 	beq	r17,zero,f144 <__register_exitproc+0x50>
    f224:	003fd706 	br	f184 <__register_exitproc+0x90>

0000f228 <register_fini>:
    f228:	f800283a 	ret

0000f22c <__call_exitprocs>:
    f22c:	00800074 	movhi	r2,1
    f230:	10864e04 	addi	r2,r2,6456
    f234:	10800017 	ldw	r2,0(r2)
    f238:	defff304 	addi	sp,sp,-52
    f23c:	df000b15 	stw	fp,44(sp)
    f240:	d8800115 	stw	r2,4(sp)
    f244:	00800034 	movhi	r2,0
    f248:	10800004 	addi	r2,r2,0
    f24c:	1005003a 	cmpeq	r2,r2,zero
    f250:	d8800215 	stw	r2,8(sp)
    f254:	d8800117 	ldw	r2,4(sp)
    f258:	dd400815 	stw	r21,32(sp)
    f25c:	dd000715 	stw	r20,28(sp)
    f260:	10805204 	addi	r2,r2,328
    f264:	dfc00c15 	stw	ra,48(sp)
    f268:	ddc00a15 	stw	r23,40(sp)
    f26c:	dd800915 	stw	r22,36(sp)
    f270:	dcc00615 	stw	r19,24(sp)
    f274:	dc800515 	stw	r18,20(sp)
    f278:	dc400415 	stw	r17,16(sp)
    f27c:	dc000315 	stw	r16,12(sp)
    f280:	282b883a 	mov	r21,r5
    f284:	2039883a 	mov	fp,r4
    f288:	d8800015 	stw	r2,0(sp)
    f28c:	2829003a 	cmpeq	r20,r5,zero
    f290:	d8800117 	ldw	r2,4(sp)
    f294:	14405217 	ldw	r17,328(r2)
    f298:	88001026 	beq	r17,zero,f2dc <__call_exitprocs+0xb0>
    f29c:	ddc00017 	ldw	r23,0(sp)
    f2a0:	88800117 	ldw	r2,4(r17)
    f2a4:	8c802204 	addi	r18,r17,136
    f2a8:	143fffc4 	addi	r16,r2,-1
    f2ac:	80000916 	blt	r16,zero,f2d4 <__call_exitprocs+0xa8>
    f2b0:	05bfffc4 	movi	r22,-1
    f2b4:	a000151e 	bne	r20,zero,f30c <__call_exitprocs+0xe0>
    f2b8:	8409883a 	add	r4,r16,r16
    f2bc:	2105883a 	add	r2,r4,r4
    f2c0:	1485883a 	add	r2,r2,r18
    f2c4:	10c02017 	ldw	r3,128(r2)
    f2c8:	a8c01126 	beq	r21,r3,f310 <__call_exitprocs+0xe4>
    f2cc:	843fffc4 	addi	r16,r16,-1
    f2d0:	85bff81e 	bne	r16,r22,f2b4 <__call_exitprocs+0x88>
    f2d4:	d8800217 	ldw	r2,8(sp)
    f2d8:	10003126 	beq	r2,zero,f3a0 <__call_exitprocs+0x174>
    f2dc:	dfc00c17 	ldw	ra,48(sp)
    f2e0:	df000b17 	ldw	fp,44(sp)
    f2e4:	ddc00a17 	ldw	r23,40(sp)
    f2e8:	dd800917 	ldw	r22,36(sp)
    f2ec:	dd400817 	ldw	r21,32(sp)
    f2f0:	dd000717 	ldw	r20,28(sp)
    f2f4:	dcc00617 	ldw	r19,24(sp)
    f2f8:	dc800517 	ldw	r18,20(sp)
    f2fc:	dc400417 	ldw	r17,16(sp)
    f300:	dc000317 	ldw	r16,12(sp)
    f304:	dec00d04 	addi	sp,sp,52
    f308:	f800283a 	ret
    f30c:	8409883a 	add	r4,r16,r16
    f310:	88c00117 	ldw	r3,4(r17)
    f314:	2105883a 	add	r2,r4,r4
    f318:	1445883a 	add	r2,r2,r17
    f31c:	18ffffc4 	addi	r3,r3,-1
    f320:	11800217 	ldw	r6,8(r2)
    f324:	1c001526 	beq	r3,r16,f37c <__call_exitprocs+0x150>
    f328:	10000215 	stw	zero,8(r2)
    f32c:	303fe726 	beq	r6,zero,f2cc <__call_exitprocs+0xa0>
    f330:	00c00044 	movi	r3,1
    f334:	1c06983a 	sll	r3,r3,r16
    f338:	90804017 	ldw	r2,256(r18)
    f33c:	8cc00117 	ldw	r19,4(r17)
    f340:	1884703a 	and	r2,r3,r2
    f344:	10001426 	beq	r2,zero,f398 <__call_exitprocs+0x16c>
    f348:	90804117 	ldw	r2,260(r18)
    f34c:	1884703a 	and	r2,r3,r2
    f350:	10000c1e 	bne	r2,zero,f384 <__call_exitprocs+0x158>
    f354:	2105883a 	add	r2,r4,r4
    f358:	1485883a 	add	r2,r2,r18
    f35c:	11400017 	ldw	r5,0(r2)
    f360:	e009883a 	mov	r4,fp
    f364:	303ee83a 	callr	r6
    f368:	88800117 	ldw	r2,4(r17)
    f36c:	98bfc81e 	bne	r19,r2,f290 <__call_exitprocs+0x64>
    f370:	b8800017 	ldw	r2,0(r23)
    f374:	147fd526 	beq	r2,r17,f2cc <__call_exitprocs+0xa0>
    f378:	003fc506 	br	f290 <__call_exitprocs+0x64>
    f37c:	8c000115 	stw	r16,4(r17)
    f380:	003fea06 	br	f32c <__call_exitprocs+0x100>
    f384:	2105883a 	add	r2,r4,r4
    f388:	1485883a 	add	r2,r2,r18
    f38c:	11000017 	ldw	r4,0(r2)
    f390:	303ee83a 	callr	r6
    f394:	003ff406 	br	f368 <__call_exitprocs+0x13c>
    f398:	303ee83a 	callr	r6
    f39c:	003ff206 	br	f368 <__call_exitprocs+0x13c>
    f3a0:	88800117 	ldw	r2,4(r17)
    f3a4:	1000081e 	bne	r2,zero,f3c8 <__call_exitprocs+0x19c>
    f3a8:	89000017 	ldw	r4,0(r17)
    f3ac:	20000726 	beq	r4,zero,f3cc <__call_exitprocs+0x1a0>
    f3b0:	b9000015 	stw	r4,0(r23)
    f3b4:	8809883a 	mov	r4,r17
    f3b8:	00000000 	call	0 <__alt_mem_sdram>
    f3bc:	bc400017 	ldw	r17,0(r23)
    f3c0:	883fb71e 	bne	r17,zero,f2a0 <__call_exitprocs+0x74>
    f3c4:	003fc506 	br	f2dc <__call_exitprocs+0xb0>
    f3c8:	89000017 	ldw	r4,0(r17)
    f3cc:	882f883a 	mov	r23,r17
    f3d0:	2023883a 	mov	r17,r4
    f3d4:	883fb21e 	bne	r17,zero,f2a0 <__call_exitprocs+0x74>
    f3d8:	003fc006 	br	f2dc <__call_exitprocs+0xb0>

0000f3dc <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
    f3dc:	defffd04 	addi	sp,sp,-12
    f3e0:	df000215 	stw	fp,8(sp)
    f3e4:	df000204 	addi	fp,sp,8
    f3e8:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
    f3ec:	e0bfff17 	ldw	r2,-4(fp)
    f3f0:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    f3f4:	e0bffe17 	ldw	r2,-8(fp)
    f3f8:	1005003a 	cmpeq	r2,r2,zero
    f3fc:	1000021e 	bne	r2,zero,f408 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
    f400:	002af070 	cmpltui	zero,zero,43969
    f404:	00000106 	br	f40c <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
    f408:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
    f40c:	e037883a 	mov	sp,fp
    f410:	df000017 	ldw	fp,0(sp)
    f414:	dec00104 	addi	sp,sp,4
    f418:	f800283a 	ret

0000f41c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    f41c:	defffd04 	addi	sp,sp,-12
    f420:	dfc00215 	stw	ra,8(sp)
    f424:	df000115 	stw	fp,4(sp)
    f428:	df000104 	addi	fp,sp,4
    f42c:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
    f430:	e13fff17 	ldw	r4,-4(fp)
    f434:	000f3dc0 	call	f3dc <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    f438:	003fff06 	br	f438 <_exit+0x1c>
    f43c:	00000010 	cmplti	zero,zero,0
    f440:	00000000 	call	0 <__alt_mem_sdram>
    f444:	00527a01 	jmpi	527a0 <_gp+0x38e78>
    f448:	011f7c01 	jmpi	11f7c0 <_gp+0x105e98>
    f44c:	001b0c0b 	ldhu	zero,27696(zero)
    f450:	00000028 	cmpgeui	zero,zero,0
    f454:	00000018 	cmpnei	zero,zero,0
    f458:	0000b0f4 	movhi	zero,707
    f45c:	000005dc 	xori	zero,zero,23
    f460:	400e4400 	call	400e440 <__alt_data_end+0x380e440>
    f464:	92099170 	cmpltui	r8,r18,9797
    f468:	95079308 	cmpgei	r20,r18,7756
    f46c:	97049605 	stb	fp,4696(r18)
    f470:	90019f03 	ldbu	zero,1660(r18)
    f474:	9c06940a 	0x9c06940a
    f478:	00000002 	0x2
    f47c:	00000028 	cmpgeui	zero,zero,0
    f480:	00000044 	movi	zero,1
    f484:	0000b6d0 	cmplti	zero,zero,731
    f488:	000005b0 	cmpltui	zero,zero,22
    f48c:	3c0e4400 	call	3c0e440 <__alt_data_end+0x340e440>
    f490:	92099168 	cmpgeui	r8,r18,9797
    f494:	95079308 	cmpgei	r20,r18,7756
    f498:	9c039705 	stb	r16,3676(r19)
    f49c:	90019f02 	0x90019f02
    f4a0:	9606940a 	0x9606940a
    f4a4:	00000004 	movi	zero,0
    f4a8:	0000f228 	cmpgeui	zero,zero,968
