
lab11mini.elf:     file format elf32-littlenios2
lab11mini.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0000d3cc memsz 0x0000d3cc flags r-x
    LOAD off    0x0000e3ec vaddr 0x0000d3ec paddr 0x0000efd0 align 2**12
         filesz 0x00001be4 memsz 0x00001be4 flags rw-
    LOAD off    0x00010bb4 vaddr 0x00010bb4 paddr 0x00010bb4 align 2**12
         filesz 0x00000000 memsz 0x000002ec flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000cdb8  000001b4  000001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000480  0000cf6c  0000cf6c  0000df6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001be4  0000d3ec  0000efd0  0000e3ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002ec  00010bb4  00010bb4  00010bb4  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  0000ffd0  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000cf8  00000000  00000000  0000fff8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001444  00000000  00000000  00010cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00023e3b  00000000  00000000  00012134  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00007dd3  00000000  00000000  00035f6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00014144  00000000  00000000  0003dd42  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001998  00000000  00000000  00051e88  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000021a1  00000000  00000000  00053820  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000bf4f  00000000  00000000  000559c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  00061910  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000990  00000000  00000000  00061930  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000653e0  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  000653e3  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000653e6  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000653e7  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000653e8  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000653ec  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000653f0  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  000653f4  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  000653fd  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00065406  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000008  00000000  00000000  0006540f  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000001c  00000000  00000000  00065417  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     000b989e  00000000  00000000  00065433  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001b4 l    d  .text	00000000 .text
0000cf6c l    d  .rodata	00000000 .rodata
0000d3ec l    d  .rwdata	00000000 .rwdata
00010bb4 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000001ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 lab11mini.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
0000d3ec l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000053c l     F .text	00000058 __sprint_r
0000d0fe l     O .rodata	00000010 blanks.3452
0000d0ee l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __call_atexit.c
000025a0 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 dtoa.c
00002754 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00004150 l     F .text	00000058 std
0000425c l     F .text	00000008 __fp_lock
00004264 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
0000ef9c l     O .rwdata	00000004 charset
0000d130 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0000d278 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
000083f0 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0000951c l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
00009d90 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00009df0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00009e1c l     F .text	00000040 alt_sim_halt
00000000 l    df *ABS*	00000000 alt_fstat.c
00009f50 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000a070 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000a150 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000a2ac l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000a4d8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0000efc0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0000a774 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000dda8 l     O .rwdata	00001060 jtag_uart
0000ee08 l     O .rwdata	000000c4 Serial_port0
0000eecc l     O .rwdata	000000c4 Serial_port1
0000a8a4 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000aae4 l     F .text	00000228 altera_avalon_jtag_uart_irq
0000ad0c l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000b388 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
0000b648 l     F .text	0000009c altera_avalon_uart_irq
0000b6e4 l     F .text	000000e0 altera_avalon_uart_rxirq
0000b7c4 l     F .text	0000015c altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
0000bbb0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
0000bdd8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000c05c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000c480 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0000c5bc l     F .text	000000dc alt_file_locked
0000c820 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00005f0c g     F .text	00000094 _mprec_log10
00005ff8 g     F .text	00000088 __any_on
00007704 g     F .text	00000070 _isatty_r
0000d250 g     O .rodata	00000028 __mprec_tinytens
0000a30c g     F .text	0000006c alt_main
00000414 g     F .text	000000a0 _puts_r
00010c10 g     O .bss	00000100 alt_irq
00007774 g     F .text	00000078 _lseek_r
0000efd0 g       *ABS*	00000000 __flash_rwdata_start
00008f10 g     F .text	00000088 __eqdf2
00010ea0 g       *ABS*	00000000 __alt_heap_start
0000039c g     F .text	00000044 printf
000071d0 g     F .text	00000068 __sseek
000041b8 g     F .text	000000a4 __sinit
00004e90 g     F .text	00000084 _setlocale_r
000042b8 g     F .text	00000068 __sfmoreglue
0000a398 g     F .text	00000020 __malloc_unlock
00005988 g     F .text	000000e0 memmove
000042a8 g     F .text	00000010 _cleanup
00006080 g     F .text	000000bc _Balloc
00009020 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00007690 g     F .text	00000074 _fstat_r
00010bcc g     O .bss	00000004 errno
00010bd4 g     O .bss	00000004 alt_argv
00016f90 g       *ABS*	00000000 _gp
0000dc28 g     O .rwdata	00000180 alt_fd_list
0000ca44 g     F .text	00000094 alt_find_dev
000058e8 g     F .text	000000a0 memcpy
0000429c g     F .text	0000000c _cleanup_r
000091b8 g     F .text	000000f8 __floatsidf
0000c544 g     F .text	00000078 alt_io_redirect
00009130 g     F .text	00000088 __ltdf2
0000cf6c g       *ABS*	00000000 __DTOR_END__
000004b4 g     F .text	00000014 puts
00005e5c g     F .text	000000b0 __ratio
0000af24 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
000003e0 g     F .text	00000034 _printf_r
00009658 g     F .text	00000008 __udivsi3
00009fb0 g     F .text	000000c0 isatty
0000d160 g     O .rodata	000000c8 __mprec_tens
00004e6c g     F .text	00000008 __locale_charset
0000ccb0 g     F .text	00000090 alt_icache_flush
00010bc0 g     O .bss	00000004 __malloc_top_pad
0000ef98 g     O .rwdata	00000004 __mb_cur_max
00004e74 g     F .text	0000000c _localeconv_r
00006778 g     F .text	0000003c __i2b
00004850 g     F .text	0000049c __sfvwrite_r
00007158 g     F .text	00000070 _sbrk_r
000077ec g     F .text	00000078 _read_r
0000d7ec g     O .rwdata	0000000c __lc_ctype
0000efb8 g     O .rwdata	00000004 alt_max_fd
00009a94 g     F .text	00000138 __unpack_d
0000756c g     F .text	00000110 _fclose_r
0000411c g     F .text	00000034 fflush
00010bc4 g     O .bss	00000004 __malloc_max_sbrked_mem
00008880 g     F .text	00000074 __adddf3
00005d3c g     F .text	00000120 __b2d
00007e40 g     F .text	000005b0 __umoddi3
0000a1bc g     F .text	000000f0 lseek
0000ef94 g     O .rwdata	00000004 _global_impure_ptr
00006af4 g     F .text	000005f4 _realloc_r
00010ea0 g       *ABS*	00000000 __bss_end
0000c388 g     F .text	000000f8 alt_iic_isr_register
0000c918 g     F .text	0000010c alt_tick
00007864 g     F .text	000005dc __udivdi3
0000d228 g     O .rodata	00000028 __mprec_bigtens
000069d4 g     F .text	00000120 __s2b
00009388 g     F .text	00000194 __floatunsidf
00005c5c g     F .text	00000060 __mcmp
0000b580 g     F .text	000000c8 altera_avalon_uart_init
00004284 g     F .text	00000018 __fp_lock_all
0000c340 g     F .text	00000048 alt_ic_irq_enabled
0000c880 g     F .text	00000098 alt_alarm_stop
00010bdc g     O .bss	00000004 alt_irq_active
000000ec g     F .exceptions	000000c8 alt_irq_handler
0000dc00 g     O .rwdata	00000028 alt_dev_null
0000bf8c g     F .text	0000001c alt_dcache_flush_all
00005b28 g     F .text	00000070 __hi0bits
000092b0 g     F .text	000000d8 __fixdfsi
0000efd0 g       *ABS*	00000000 __ram_rwdata_end
0000efb0 g     O .rwdata	00000008 alt_dev_list
0000a654 g     F .text	00000120 write
0000d3ec g       *ABS*	00000000 __ram_rodata_end
00009e7c g     F .text	000000d4 fstat
000068b4 g     F .text	00000120 __pow5mult
00010bb4 g     O .bss	00000004 __nlocale_changed
00009660 g     F .text	00000008 __umodsi3
00010ea0 g       *ABS*	00000000 end
0000bc10 g     F .text	000001c8 altera_avalon_uart_write
0000aa24 g     F .text	000000c0 altera_avalon_jtag_uart_init
0000cf68 g       *ABS*	00000000 __CTOR_LIST__
00800000 g       *ABS*	00000000 __alt_stack_pointer
0000b3f8 g     F .text	00000090 alt_avalon_timer_sc_init
0000b4e0 g     F .text	00000058 altera_avalon_uart_write_fd
00009700 g     F .text	00000080 __clzsi2
0000b538 g     F .text	00000048 altera_avalon_uart_close_fd
0000b148 g     F .text	00000240 altera_avalon_jtag_uart_write
000041a8 g     F .text	00000004 __sfp_lock_acquire
00005804 g     F .text	000000e4 memchr
00000594 g     F .text	00001eac ___vfprintf_internal_r
0000453c g     F .text	00000314 _free_r
000025a4 g     F .text	000001b0 __call_exitprocs
00010bb8 g     O .bss	00000004 __mlocale_changed
0000efa4 g     O .rwdata	00000004 __malloc_sbrk_base
000001b4 g     F .text	0000003c _start
00010be0 g     O .bss	00000004 _alt_tick_rate
00006444 g     F .text	0000014c __lshift
00010be4 g     O .bss	00000004 _alt_nticks
0000a3b8 g     F .text	00000120 read
0000a808 g     F .text	0000009c alt_sys_init
0000cdc8 g     F .text	00000134 __register_exitproc
00006590 g     F .text	000001e8 __multiply
0000adbc g     F .text	00000074 altera_avalon_jtag_uart_close
0000d3ec g       *ABS*	00000000 __ram_rwdata_start
0000cf6c g       *ABS*	00000000 __ram_rodata_start
00010be8 g     O .bss	00000028 __malloc_current_mallinfo
0000613c g     F .text	0000017c __d2b
0000a8dc g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0000cbf8 g     F .text	000000b8 alt_get_fd
00009bcc g     F .text	000000c8 __fpcmp_parts_d
000074fc g     F .text	00000070 _close_r
0000cd54 g     F .text	00000074 memcmp
0000a98c g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00010ea0 g       *ABS*	00000000 __alt_stack_base
0000a9d4 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00002464 g     F .text	0000013c __swsetup_r
00008cb8 g     F .text	00000258 __divdf3
00004320 g     F .text	000000f0 __sfp
00005fa0 g     F .text	00000058 __copybits
0000d7f8 g     O .rwdata	00000408 __malloc_av_
000041b4 g     F .text	00000004 __sinit_lock_release
000088f4 g     F .text	000003c4 __muldf3
000072b4 g     F .text	00000060 __sread
0000cad8 g     F .text	00000120 alt_find_file
0000bfa8 g     F .text	000000b4 alt_dev_llist_insert
0000a378 g     F .text	00000020 __malloc_lock
0000a598 g     F .text	000000bc sbrk
00003f20 g     F .text	000001fc _fflush_r
00007448 g     F .text	000000b4 _calloc_r
00010bb4 g       *ABS*	00000000 __bss_start
00005a68 g     F .text	00000098 memset
000001f0 g     F .text	00000174 main
00010bd8 g     O .bss	00000004 alt_envp
00010bc8 g     O .bss	00000004 __malloc_max_total_mem
0000a934 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
000071c8 g     F .text	00000008 __sclose
00800000 g       *ABS*	00000000 __alt_heap_limit
0000767c g     F .text	00000014 fclose
00010d10 g     O .bss	00000190 _atexit0
0000296c g     F .text	000015b4 _dtoa_r
000050c4 g     F .text	00000740 _malloc_r
0000efbc g     O .rwdata	00000004 alt_errno
00004db4 g     F .text	000000b8 _fwalk
00009598 g     F .text	00000060 __divsi3
0000d284 g     O .rodata	00000014 __thenan_df
00004410 g     F .text	0000012c _malloc_trim_r
0000cf6c g       *ABS*	00000000 __CTOR_END__
00007314 g     F .text	000000bc strcmp
0000cf6c g       *ABS*	00000000 __flash_rodata_start
0000cf6c g       *ABS*	00000000 __DTOR_LIST__
00008f98 g     F .text	00000088 __nedf2
0000a7d4 g     F .text	00000034 alt_irq_init
0000a538 g     F .text	00000060 alt_release_fd
0000d298 g     O .rodata	00000100 __clz_tab
00010bbc g     O .bss	00000004 _PathLocale
0000cd40 g     F .text	00000014 atexit
000073d0 g     F .text	00000078 _write_r
00004f14 g     F .text	0000001c setlocale
0000ef90 g     O .rwdata	00000004 _impure_ptr
00010bd0 g     O .bss	00000004 alt_argc
0000c120 g     F .text	00000064 _do_dtors
00000020 g       .exceptions	00000000 alt_irq_entry
00005cbc g     F .text	00000080 __ulp
000070e8 g     F .text	00000040 __isinfd
0000426c g     F .text	00000018 __fp_unlock_all
0000efa8 g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
00004e80 g     F .text	00000010 localeconv
0000c1b4 g     F .text	00000050 alt_ic_isr_register
0000efd0 g       *ABS*	00000000 _edata
0000b488 g     F .text	00000058 altera_avalon_uart_read_fd
00010ea0 g       *ABS*	00000000 _end
000001b4 g       *ABS*	00000000 __ram_exceptions_end
0000ae30 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0000c2a0 g     F .text	000000a0 alt_ic_irq_disable
00007238 g     F .text	0000007c __swrite
0000efa0 g     O .rwdata	00000004 __malloc_trim_threshold
0000ca24 g     F .text	00000020 altera_nios2_qsys_irq_init
00000364 g     F .text	00000038 exit
00004cec g     F .text	000000c8 _fwalk_reent
000062b8 g     F .text	0000018c __mdiff
000095f8 g     F .text	00000060 __modsi3
00800000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
000041ac g     F .text	00000004 __sfp_lock_release
00000000 g       *ABS*	00000000 __alt_mem_sdram
0000b920 g     F .text	00000060 altera_avalon_uart_close
00007128 g     F .text	00000030 __isnand
00009e5c g     F .text	00000020 _exit
0000be38 g     F .text	00000154 alt_alarm_start
00009668 g     F .text	00000098 __muldi3
00004f30 g     F .text	00000194 __smakebuf_r
000004c8 g     F .text	00000074 strlen
0000c698 g     F .text	00000188 open
000090a8 g     F .text	00000088 __gedf2
0000c184 g     F .text	00000030 alt_icache_flush_all
0000efc4 g     O .rwdata	00000004 alt_priority_mask
0000c204 g     F .text	0000009c alt_ic_irq_enable
00002440 g     F .text	00000024 __vfprintf_internal
0000b980 g     F .text	00000230 altera_avalon_uart_read
00008800 g     F .text	00000080 __subdf3
00005b98 g     F .text	000000c4 __lo0bits
0000efc8 g     O .rwdata	00000008 alt_alarm_list
0000c0bc g     F .text	00000064 _do_ctors
00009c94 g     F .text	000000fc close
0000a0d0 g     F .text	00000080 alt_load
00009780 g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
000041b0 g     F .text	00000004 __sinit_lock_acquire
000067b4 g     F .text	00000100 __multadd
00005b00 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00880014 	movui	r2,8192
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08406d14 	ori	at,at,436
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  44:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  fc:	0005313a 	rdctl	r2,ipending
 100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 10c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 110:	00800044 	movi	r2,1
 114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 118:	e0ffff17 	ldw	r3,-4(fp)
 11c:	e0bffe17 	ldw	r2,-8(fp)
 120:	1884703a 	and	r2,r3,r2
 124:	1005003a 	cmpeq	r2,r2,zero
 128:	1000161e 	bne	r2,zero,184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 12c:	e0bffd17 	ldw	r2,-12(fp)
 130:	00c00074 	movhi	r3,1
 134:	18c30404 	addi	r3,r3,3088
 138:	100490fa 	slli	r2,r2,3
 13c:	10c5883a 	add	r2,r2,r3
 140:	11400017 	ldw	r5,0(r2)
 144:	e0bffd17 	ldw	r2,-12(fp)
 148:	00c00074 	movhi	r3,1
 14c:	18c30404 	addi	r3,r3,3088
 150:	100490fa 	slli	r2,r2,3
 154:	10c5883a 	add	r2,r2,r3
 158:	10800104 	addi	r2,r2,4
 15c:	11000017 	ldw	r4,0(r2)
 160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 164:	0005313a 	rdctl	r2,ipending
 168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 16c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 174:	e0bfff17 	ldw	r2,-4(fp)
 178:	1004c03a 	cmpne	r2,r2,zero
 17c:	103fe31e 	bne	r2,zero,10c <alt_irq_handler+0x20>
 180:	00000706 	br	1a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 184:	e0bffe17 	ldw	r2,-8(fp)
 188:	1085883a 	add	r2,r2,r2
 18c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 190:	e0bffd17 	ldw	r2,-12(fp)
 194:	10800044 	addi	r2,r2,1
 198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 19c:	003fde06 	br	118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 1a0:	e037883a 	mov	sp,fp
 1a4:	dfc00117 	ldw	ra,4(sp)
 1a8:	df000017 	ldw	fp,0(sp)
 1ac:	dec00204 	addi	sp,sp,8
 1b0:	f800283a 	ret

Disassembly of section .text:

000001b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1b4:	06c02034 	movhi	sp,128
    ori sp, sp, %lo(__alt_stack_pointer)
     1b8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     1bc:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     1c0:	d69be414 	ori	gp,gp,28560
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1c4:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     1c8:	1082ed14 	ori	r2,r2,2996

    movhi r3, %hi(__bss_end)
     1cc:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     1d0:	18c3a814 	ori	r3,r3,3744

    beq r2, r3, 1f
     1d4:	10c00326 	beq	r2,r3,1e4 <_start+0x30>

0:
    stw zero, (r2)
     1d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1e0:	10fffd36 	bltu	r2,r3,1d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1e4:	000a0d00 	call	a0d0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1e8:	000a30c0 	call	a30c <alt_main>

000001ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1ec:	003fff06 	br	1ec <alt_after_alt_main>

000001f0 <main>:
#include <altera_avalon_pio_regs.h>
#include <system.h>
#include <stdlib.h>

int main()
{
     1f0:	defffa04 	addi	sp,sp,-24
     1f4:	dfc00515 	stw	ra,20(sp)
     1f8:	df000415 	stw	fp,16(sp)
     1fc:	df000404 	addi	fp,sp,16
	// Declare your variables here
	int buttons 		= 0;
     200:	e03fff15 	stw	zero,-4(fp)
	int switches 		= 0;
     204:	e03ffe15 	stw	zero,-8(fp)
	int current_floor 	= 1;
     208:	00800044 	movi	r2,1
     20c:	e0bffd15 	stw	r2,-12(fp)
	int next_floor 		= 0;
     210:	e03ffc15 	stw	zero,-16(fp)
     214:	00000006 	br	218 <main+0x28>
		/*** main loop ***/
		//////////////////////////
		// wait for BUTTON PRESS
		do {
			// update SWITCHES and BUTTONS
			switches = IORD_ALTERA_AVALON_PIO_DATA (SLIDER_SWITCHES_BASE);
     218:	00840034 	movhi	r2,4096
     21c:	10800c04 	addi	r2,r2,48
     220:	10800037 	ldwio	r2,0(r2)
     224:	e0bffe15 	stw	r2,-8(fp)
			buttons = IORD_ALTERA_AVALON_PIO_DATA (PUSHBUTTONS_BASE);
     228:	00840034 	movhi	r2,4096
     22c:	10800804 	addi	r2,r2,32
     230:	10800037 	ldwio	r2,0(r2)
     234:	e0bfff15 	stw	r2,-4(fp)
		} while (buttons == 0);
     238:	e0bfff17 	ldw	r2,-4(fp)
     23c:	1005003a 	cmpeq	r2,r2,zero
     240:	103ff51e 	bne	r2,zero,218 <main+0x28>

		/*** Set destination. ***/
		//////////////////////////
		// Floor 1
		if (buttons & 1)
     244:	e0bfff17 	ldw	r2,-4(fp)
     248:	1080004c 	andi	r2,r2,1
     24c:	10803fcc 	andi	r2,r2,255
     250:	1005003a 	cmpeq	r2,r2,zero
     254:	1000031e 	bne	r2,zero,264 <main+0x74>
		{
			next_floor = 1;
     258:	00800044 	movi	r2,1
     25c:	e0bffc15 	stw	r2,-16(fp)
     260:	00001a06 	br	2cc <main+0xdc>
		}
		//////////////////////////
		// Floor 2
		else if	(buttons & 2)
     264:	e0bfff17 	ldw	r2,-4(fp)
     268:	1080008c 	andi	r2,r2,2
     26c:	1005003a 	cmpeq	r2,r2,zero
     270:	1000031e 	bne	r2,zero,280 <main+0x90>
		{
			next_floor = 2;
     274:	00800084 	movi	r2,2
     278:	e0bffc15 	stw	r2,-16(fp)
     27c:	00001306 	br	2cc <main+0xdc>
		}
		//////////////////////////
		// Floor 3
		else if	(buttons & 4)
     280:	e0bfff17 	ldw	r2,-4(fp)
     284:	1080010c 	andi	r2,r2,4
     288:	1005003a 	cmpeq	r2,r2,zero
     28c:	1000031e 	bne	r2,zero,29c <main+0xac>
		{
			next_floor = 3;
     290:	008000c4 	movi	r2,3
     294:	e0bffc15 	stw	r2,-16(fp)
     298:	00000c06 	br	2cc <main+0xdc>
		}
		//////////////////////////
		// Floor 4
		else if	(buttons & 8)
     29c:	e0bfff17 	ldw	r2,-4(fp)
     2a0:	1080020c 	andi	r2,r2,8
     2a4:	1005003a 	cmpeq	r2,r2,zero
     2a8:	1000031e 	bne	r2,zero,2b8 <main+0xc8>
		{
			next_floor = 4;
     2ac:	00800104 	movi	r2,4
     2b0:	e0bffc15 	stw	r2,-16(fp)
     2b4:	00000506 	br	2cc <main+0xdc>
		}
		//////////////////////////
		// Floor ERROR
		else
		{
			printf ("\nA FATAL ERROR HAS OCCURED.  THE NEXT FLOOR IS OUT OF RANGE.\n");
     2b8:	01000074 	movhi	r4,1
     2bc:	2133db04 	addi	r4,r4,-12436
     2c0:	00004b40 	call	4b4 <puts>
			exit(0);
     2c4:	0009883a 	mov	r4,zero
     2c8:	00003640 	call	364 <exit>
		}

		//////////////////////////
		// Display
		printf ("\n---------------\n"
     2cc:	01000074 	movhi	r4,1
     2d0:	2133eb04 	addi	r4,r4,-12372
     2d4:	e17ffd17 	ldw	r5,-12(fp)
     2d8:	e1bffc17 	ldw	r6,-16(fp)
     2dc:	000039c0 	call	39c <printf>
			"Message:\t \"Waiting to reach destination...\"\n", current_floor, next_floor);

		// Wait here until next floor is reached.
		do {
			// update SWITCHES and BUTTONS
			switches = IORD_ALTERA_AVALON_PIO_DATA (SLIDER_SWITCHES_BASE);
     2e0:	00840034 	movhi	r2,4096
     2e4:	10800c04 	addi	r2,r2,48
     2e8:	10800037 	ldwio	r2,0(r2)
     2ec:	e0bffe15 	stw	r2,-8(fp)
			buttons = IORD_ALTERA_AVALON_PIO_DATA (PUSHBUTTONS_BASE);
     2f0:	00840034 	movhi	r2,4096
     2f4:	10800804 	addi	r2,r2,32
     2f8:	10800037 	ldwio	r2,0(r2)
     2fc:	e0bfff15 	stw	r2,-4(fp)
		} while (switches != next_floor);
     300:	e0fffe17 	ldw	r3,-8(fp)
     304:	e0bffc17 	ldw	r2,-16(fp)
     308:	18bff51e 	bne	r3,r2,2e0 <main+0xf0>

		current_floor = next_floor;
     30c:	e0bffc17 	ldw	r2,-16(fp)
     310:	e0bffd15 	stw	r2,-12(fp)
		printf ("\n---------------\n"
     314:	01000074 	movhi	r4,1
     318:	21340404 	addi	r4,r4,-12272
     31c:	e17ffd17 	ldw	r5,-12(fp)
     320:	000039c0 	call	39c <printf>
			"Next Floor:\t Not Set\n"
			"Message:\t \"Elevator not in use.\"\n" , current_floor);

		//////////////////////////
		// Show Current Floor on RED_LEDS.
		IOWR_ALTERA_AVALON_PIO_DATA (RED_LEDS_BASE, current_floor);
     324:	00c40034 	movhi	r3,4096
     328:	18c00404 	addi	r3,r3,16
     32c:	e0bffd17 	ldw	r2,-12(fp)
     330:	18800035 	stwio	r2,0(r3)

		//////////////////////////
		// wait for BUTTON RELEASE
		do {
			// update switches and buttons
			switches = IORD_ALTERA_AVALON_PIO_DATA (SLIDER_SWITCHES_BASE);
     334:	00840034 	movhi	r2,4096
     338:	10800c04 	addi	r2,r2,48
     33c:	10800037 	ldwio	r2,0(r2)
     340:	e0bffe15 	stw	r2,-8(fp)
			buttons = IORD_ALTERA_AVALON_PIO_DATA (PUSHBUTTONS_BASE);
     344:	00840034 	movhi	r2,4096
     348:	10800804 	addi	r2,r2,32
     34c:	10800037 	ldwio	r2,0(r2)
     350:	e0bfff15 	stw	r2,-4(fp)
		} while (buttons != 0);
     354:	e0bfff17 	ldw	r2,-4(fp)
     358:	1004c03a 	cmpne	r2,r2,zero
     35c:	103ff51e 	bne	r2,zero,334 <main+0x144>
	}
     360:	003fad06 	br	218 <main+0x28>

00000364 <exit>:
     364:	defffe04 	addi	sp,sp,-8
     368:	000b883a 	mov	r5,zero
     36c:	dc000015 	stw	r16,0(sp)
     370:	dfc00115 	stw	ra,4(sp)
     374:	2021883a 	mov	r16,r4
     378:	00025a40 	call	25a4 <__call_exitprocs>
     37c:	00800074 	movhi	r2,1
     380:	10bbe504 	addi	r2,r2,-4204
     384:	11000017 	ldw	r4,0(r2)
     388:	20800f17 	ldw	r2,60(r4)
     38c:	10000126 	beq	r2,zero,394 <exit+0x30>
     390:	103ee83a 	callr	r2
     394:	8009883a 	mov	r4,r16
     398:	0009e5c0 	call	9e5c <_exit>

0000039c <printf>:
     39c:	defffb04 	addi	sp,sp,-20
     3a0:	dfc00115 	stw	ra,4(sp)
     3a4:	d9400215 	stw	r5,8(sp)
     3a8:	d9800315 	stw	r6,12(sp)
     3ac:	d9c00415 	stw	r7,16(sp)
     3b0:	00800074 	movhi	r2,1
     3b4:	10bbe404 	addi	r2,r2,-4208
     3b8:	10c00017 	ldw	r3,0(r2)
     3bc:	200b883a 	mov	r5,r4
     3c0:	d8800204 	addi	r2,sp,8
     3c4:	19000217 	ldw	r4,8(r3)
     3c8:	100d883a 	mov	r6,r2
     3cc:	d8800015 	stw	r2,0(sp)
     3d0:	00024400 	call	2440 <__vfprintf_internal>
     3d4:	dfc00117 	ldw	ra,4(sp)
     3d8:	dec00504 	addi	sp,sp,20
     3dc:	f800283a 	ret

000003e0 <_printf_r>:
     3e0:	defffc04 	addi	sp,sp,-16
     3e4:	dfc00115 	stw	ra,4(sp)
     3e8:	d9800215 	stw	r6,8(sp)
     3ec:	d9c00315 	stw	r7,12(sp)
     3f0:	280d883a 	mov	r6,r5
     3f4:	21400217 	ldw	r5,8(r4)
     3f8:	d8c00204 	addi	r3,sp,8
     3fc:	180f883a 	mov	r7,r3
     400:	d8c00015 	stw	r3,0(sp)
     404:	00005940 	call	594 <___vfprintf_internal_r>
     408:	dfc00117 	ldw	ra,4(sp)
     40c:	dec00404 	addi	sp,sp,16
     410:	f800283a 	ret

00000414 <_puts_r>:
     414:	defff604 	addi	sp,sp,-40
     418:	dc400715 	stw	r17,28(sp)
     41c:	2023883a 	mov	r17,r4
     420:	2809883a 	mov	r4,r5
     424:	dfc00915 	stw	ra,36(sp)
     428:	dcc00815 	stw	r19,32(sp)
     42c:	2827883a 	mov	r19,r5
     430:	00004c80 	call	4c8 <strlen>
     434:	89400217 	ldw	r5,8(r17)
     438:	00c00074 	movhi	r3,1
     43c:	18f42304 	addi	r3,r3,-12148
     440:	01c00044 	movi	r7,1
     444:	12000044 	addi	r8,r2,1
     448:	d8c00515 	stw	r3,20(sp)
     44c:	d9c00615 	stw	r7,24(sp)
     450:	d8c00304 	addi	r3,sp,12
     454:	01c00084 	movi	r7,2
     458:	8809883a 	mov	r4,r17
     45c:	d80d883a 	mov	r6,sp
     460:	d8c00015 	stw	r3,0(sp)
     464:	dcc00315 	stw	r19,12(sp)
     468:	da000215 	stw	r8,8(sp)
     46c:	d9c00115 	stw	r7,4(sp)
     470:	d8800415 	stw	r2,16(sp)
     474:	00048500 	call	4850 <__sfvwrite_r>
     478:	00ffffc4 	movi	r3,-1
     47c:	10000626 	beq	r2,zero,498 <_puts_r+0x84>
     480:	1805883a 	mov	r2,r3
     484:	dfc00917 	ldw	ra,36(sp)
     488:	dcc00817 	ldw	r19,32(sp)
     48c:	dc400717 	ldw	r17,28(sp)
     490:	dec00a04 	addi	sp,sp,40
     494:	f800283a 	ret
     498:	00c00284 	movi	r3,10
     49c:	1805883a 	mov	r2,r3
     4a0:	dfc00917 	ldw	ra,36(sp)
     4a4:	dcc00817 	ldw	r19,32(sp)
     4a8:	dc400717 	ldw	r17,28(sp)
     4ac:	dec00a04 	addi	sp,sp,40
     4b0:	f800283a 	ret

000004b4 <puts>:
     4b4:	00800074 	movhi	r2,1
     4b8:	10bbe404 	addi	r2,r2,-4208
     4bc:	200b883a 	mov	r5,r4
     4c0:	11000017 	ldw	r4,0(r2)
     4c4:	00004141 	jmpi	414 <_puts_r>

000004c8 <strlen>:
     4c8:	208000cc 	andi	r2,r4,3
     4cc:	2011883a 	mov	r8,r4
     4d0:	1000161e 	bne	r2,zero,52c <strlen+0x64>
     4d4:	20c00017 	ldw	r3,0(r4)
     4d8:	017fbff4 	movhi	r5,65279
     4dc:	297fbfc4 	addi	r5,r5,-257
     4e0:	01e02074 	movhi	r7,32897
     4e4:	39e02004 	addi	r7,r7,-32640
     4e8:	1945883a 	add	r2,r3,r5
     4ec:	11c4703a 	and	r2,r2,r7
     4f0:	00c6303a 	nor	r3,zero,r3
     4f4:	1886703a 	and	r3,r3,r2
     4f8:	18000c1e 	bne	r3,zero,52c <strlen+0x64>
     4fc:	280d883a 	mov	r6,r5
     500:	380b883a 	mov	r5,r7
     504:	21000104 	addi	r4,r4,4
     508:	20800017 	ldw	r2,0(r4)
     50c:	1187883a 	add	r3,r2,r6
     510:	1946703a 	and	r3,r3,r5
     514:	0084303a 	nor	r2,zero,r2
     518:	10c4703a 	and	r2,r2,r3
     51c:	103ff926 	beq	r2,zero,504 <strlen+0x3c>
     520:	20800007 	ldb	r2,0(r4)
     524:	10000326 	beq	r2,zero,534 <strlen+0x6c>
     528:	21000044 	addi	r4,r4,1
     52c:	20800007 	ldb	r2,0(r4)
     530:	103ffd1e 	bne	r2,zero,528 <strlen+0x60>
     534:	2205c83a 	sub	r2,r4,r8
     538:	f800283a 	ret

0000053c <__sprint_r>:
     53c:	30800217 	ldw	r2,8(r6)
     540:	defffe04 	addi	sp,sp,-8
     544:	dc000015 	stw	r16,0(sp)
     548:	dfc00115 	stw	ra,4(sp)
     54c:	3021883a 	mov	r16,r6
     550:	0007883a 	mov	r3,zero
     554:	1000061e 	bne	r2,zero,570 <__sprint_r+0x34>
     558:	1805883a 	mov	r2,r3
     55c:	30000115 	stw	zero,4(r6)
     560:	dfc00117 	ldw	ra,4(sp)
     564:	dc000017 	ldw	r16,0(sp)
     568:	dec00204 	addi	sp,sp,8
     56c:	f800283a 	ret
     570:	00048500 	call	4850 <__sfvwrite_r>
     574:	1007883a 	mov	r3,r2
     578:	1805883a 	mov	r2,r3
     57c:	80000115 	stw	zero,4(r16)
     580:	80000215 	stw	zero,8(r16)
     584:	dfc00117 	ldw	ra,4(sp)
     588:	dc000017 	ldw	r16,0(sp)
     58c:	dec00204 	addi	sp,sp,8
     590:	f800283a 	ret

00000594 <___vfprintf_internal_r>:
     594:	defea404 	addi	sp,sp,-1392
     598:	dd815815 	stw	r22,1376(sp)
     59c:	dc015215 	stw	r16,1352(sp)
     5a0:	d9c15115 	stw	r7,1348(sp)
     5a4:	dfc15b15 	stw	ra,1388(sp)
     5a8:	df015a15 	stw	fp,1384(sp)
     5ac:	ddc15915 	stw	r23,1380(sp)
     5b0:	dd415715 	stw	r21,1372(sp)
     5b4:	dd015615 	stw	r20,1368(sp)
     5b8:	dcc15515 	stw	r19,1364(sp)
     5bc:	dc815415 	stw	r18,1360(sp)
     5c0:	dc415315 	stw	r17,1356(sp)
     5c4:	282d883a 	mov	r22,r5
     5c8:	3021883a 	mov	r16,r6
     5cc:	d9014f15 	stw	r4,1340(sp)
     5d0:	0004e740 	call	4e74 <_localeconv_r>
     5d4:	10800017 	ldw	r2,0(r2)
     5d8:	d9c15117 	ldw	r7,1348(sp)
     5dc:	d8814915 	stw	r2,1316(sp)
     5e0:	d8814f17 	ldw	r2,1340(sp)
     5e4:	10000226 	beq	r2,zero,5f0 <___vfprintf_internal_r+0x5c>
     5e8:	10800e17 	ldw	r2,56(r2)
     5ec:	10020d26 	beq	r2,zero,e24 <___vfprintf_internal_r+0x890>
     5f0:	b080030b 	ldhu	r2,12(r22)
     5f4:	1080020c 	andi	r2,r2,8
     5f8:	10020e26 	beq	r2,zero,e34 <___vfprintf_internal_r+0x8a0>
     5fc:	b0800417 	ldw	r2,16(r22)
     600:	10020c26 	beq	r2,zero,e34 <___vfprintf_internal_r+0x8a0>
     604:	b200030b 	ldhu	r8,12(r22)
     608:	00800284 	movi	r2,10
     60c:	40c0068c 	andi	r3,r8,26
     610:	18802f1e 	bne	r3,r2,6d0 <___vfprintf_internal_r+0x13c>
     614:	b080038f 	ldh	r2,14(r22)
     618:	10002d16 	blt	r2,zero,6d0 <___vfprintf_internal_r+0x13c>
     61c:	b240038b 	ldhu	r9,14(r22)
     620:	b2800717 	ldw	r10,28(r22)
     624:	b2c00917 	ldw	r11,36(r22)
     628:	d9014f17 	ldw	r4,1340(sp)
     62c:	dc402904 	addi	r17,sp,164
     630:	d8804004 	addi	r2,sp,256
     634:	00c10004 	movi	r3,1024
     638:	423fff4c 	andi	r8,r8,65533
     63c:	800d883a 	mov	r6,r16
     640:	880b883a 	mov	r5,r17
     644:	da002c0d 	sth	r8,176(sp)
     648:	da402c8d 	sth	r9,178(sp)
     64c:	da803015 	stw	r10,192(sp)
     650:	dac03215 	stw	r11,200(sp)
     654:	d8802d15 	stw	r2,180(sp)
     658:	d8c02e15 	stw	r3,184(sp)
     65c:	d8802915 	stw	r2,164(sp)
     660:	d8c02b15 	stw	r3,172(sp)
     664:	d8002f15 	stw	zero,188(sp)
     668:	00005940 	call	594 <___vfprintf_internal_r>
     66c:	d8814b15 	stw	r2,1324(sp)
     670:	10000416 	blt	r2,zero,684 <___vfprintf_internal_r+0xf0>
     674:	d9014f17 	ldw	r4,1340(sp)
     678:	880b883a 	mov	r5,r17
     67c:	0003f200 	call	3f20 <_fflush_r>
     680:	1002321e 	bne	r2,zero,f4c <___vfprintf_internal_r+0x9b8>
     684:	d8802c0b 	ldhu	r2,176(sp)
     688:	1080100c 	andi	r2,r2,64
     68c:	10000326 	beq	r2,zero,69c <___vfprintf_internal_r+0x108>
     690:	b080030b 	ldhu	r2,12(r22)
     694:	10801014 	ori	r2,r2,64
     698:	b080030d 	sth	r2,12(r22)
     69c:	d8814b17 	ldw	r2,1324(sp)
     6a0:	dfc15b17 	ldw	ra,1388(sp)
     6a4:	df015a17 	ldw	fp,1384(sp)
     6a8:	ddc15917 	ldw	r23,1380(sp)
     6ac:	dd815817 	ldw	r22,1376(sp)
     6b0:	dd415717 	ldw	r21,1372(sp)
     6b4:	dd015617 	ldw	r20,1368(sp)
     6b8:	dcc15517 	ldw	r19,1364(sp)
     6bc:	dc815417 	ldw	r18,1360(sp)
     6c0:	dc415317 	ldw	r17,1356(sp)
     6c4:	dc015217 	ldw	r16,1352(sp)
     6c8:	dec15c04 	addi	sp,sp,1392
     6cc:	f800283a 	ret
     6d0:	0005883a 	mov	r2,zero
     6d4:	0007883a 	mov	r3,zero
     6d8:	dd401904 	addi	r21,sp,100
     6dc:	d8814215 	stw	r2,1288(sp)
     6e0:	802f883a 	mov	r23,r16
     6e4:	d8c14315 	stw	r3,1292(sp)
     6e8:	d8014b15 	stw	zero,1324(sp)
     6ec:	d8014815 	stw	zero,1312(sp)
     6f0:	d8014415 	stw	zero,1296(sp)
     6f4:	d8014715 	stw	zero,1308(sp)
     6f8:	dd400c15 	stw	r21,48(sp)
     6fc:	d8000e15 	stw	zero,56(sp)
     700:	d8000d15 	stw	zero,52(sp)
     704:	b8800007 	ldb	r2,0(r23)
     708:	10001926 	beq	r2,zero,770 <___vfprintf_internal_r+0x1dc>
     70c:	00c00944 	movi	r3,37
     710:	10c01726 	beq	r2,r3,770 <___vfprintf_internal_r+0x1dc>
     714:	b821883a 	mov	r16,r23
     718:	00000106 	br	720 <___vfprintf_internal_r+0x18c>
     71c:	10c00326 	beq	r2,r3,72c <___vfprintf_internal_r+0x198>
     720:	84000044 	addi	r16,r16,1
     724:	80800007 	ldb	r2,0(r16)
     728:	103ffc1e 	bne	r2,zero,71c <___vfprintf_internal_r+0x188>
     72c:	85e7c83a 	sub	r19,r16,r23
     730:	98000e26 	beq	r19,zero,76c <___vfprintf_internal_r+0x1d8>
     734:	dc800e17 	ldw	r18,56(sp)
     738:	dc400d17 	ldw	r17,52(sp)
     73c:	008001c4 	movi	r2,7
     740:	94e5883a 	add	r18,r18,r19
     744:	8c400044 	addi	r17,r17,1
     748:	adc00015 	stw	r23,0(r21)
     74c:	dc800e15 	stw	r18,56(sp)
     750:	acc00115 	stw	r19,4(r21)
     754:	dc400d15 	stw	r17,52(sp)
     758:	14428b16 	blt	r2,r17,1188 <___vfprintf_internal_r+0xbf4>
     75c:	ad400204 	addi	r21,r21,8
     760:	d9014b17 	ldw	r4,1324(sp)
     764:	24c9883a 	add	r4,r4,r19
     768:	d9014b15 	stw	r4,1324(sp)
     76c:	802f883a 	mov	r23,r16
     770:	b8800007 	ldb	r2,0(r23)
     774:	10013c26 	beq	r2,zero,c68 <___vfprintf_internal_r+0x6d4>
     778:	bdc00044 	addi	r23,r23,1
     77c:	d8000405 	stb	zero,16(sp)
     780:	b8c00007 	ldb	r3,0(r23)
     784:	04ffffc4 	movi	r19,-1
     788:	d8014c15 	stw	zero,1328(sp)
     78c:	d8014a15 	stw	zero,1320(sp)
     790:	d8c14d15 	stw	r3,1332(sp)
     794:	bdc00044 	addi	r23,r23,1
     798:	d9414d17 	ldw	r5,1332(sp)
     79c:	00801604 	movi	r2,88
     7a0:	28fff804 	addi	r3,r5,-32
     7a4:	10c06036 	bltu	r2,r3,928 <___vfprintf_internal_r+0x394>
     7a8:	18c5883a 	add	r2,r3,r3
     7ac:	1085883a 	add	r2,r2,r2
     7b0:	00c00034 	movhi	r3,0
     7b4:	18c1f104 	addi	r3,r3,1988
     7b8:	10c5883a 	add	r2,r2,r3
     7bc:	11000017 	ldw	r4,0(r2)
     7c0:	2000683a 	jmp	r4
     7c4:	00001738 	rdprs	zero,zero,92
     7c8:	00000928 	cmpgeui	zero,zero,36
     7cc:	00000928 	cmpgeui	zero,zero,36
     7d0:	00001724 	muli	zero,zero,92
     7d4:	00000928 	cmpgeui	zero,zero,36
     7d8:	00000928 	cmpgeui	zero,zero,36
     7dc:	00000928 	cmpgeui	zero,zero,36
     7e0:	00000928 	cmpgeui	zero,zero,36
     7e4:	00000928 	cmpgeui	zero,zero,36
     7e8:	00000928 	cmpgeui	zero,zero,36
     7ec:	00001504 	movi	zero,84
     7f0:	00001714 	movui	zero,92
     7f4:	00000928 	cmpgeui	zero,zero,36
     7f8:	0000151c 	xori	zero,zero,84
     7fc:	000017b0 	cmpltui	zero,zero,94
     800:	00000928 	cmpgeui	zero,zero,36
     804:	0000179c 	xori	zero,zero,94
     808:	00001764 	muli	zero,zero,93
     80c:	00001764 	muli	zero,zero,93
     810:	00001764 	muli	zero,zero,93
     814:	00001764 	muli	zero,zero,93
     818:	00001764 	muli	zero,zero,93
     81c:	00001764 	muli	zero,zero,93
     820:	00001764 	muli	zero,zero,93
     824:	00001764 	muli	zero,zero,93
     828:	00001764 	muli	zero,zero,93
     82c:	00000928 	cmpgeui	zero,zero,36
     830:	00000928 	cmpgeui	zero,zero,36
     834:	00000928 	cmpgeui	zero,zero,36
     838:	00000928 	cmpgeui	zero,zero,36
     83c:	00000928 	cmpgeui	zero,zero,36
     840:	00000928 	cmpgeui	zero,zero,36
     844:	00000928 	cmpgeui	zero,zero,36
     848:	00000928 	cmpgeui	zero,zero,36
     84c:	00000928 	cmpgeui	zero,zero,36
     850:	00000928 	cmpgeui	zero,zero,36
     854:	00000f80 	call	f8 <alt_irq_handler+0xc>
     858:	000015ec 	andhi	zero,zero,87
     85c:	00000928 	cmpgeui	zero,zero,36
     860:	000015ec 	andhi	zero,zero,87
     864:	00000928 	cmpgeui	zero,zero,36
     868:	00000928 	cmpgeui	zero,zero,36
     86c:	00000928 	cmpgeui	zero,zero,36
     870:	00000928 	cmpgeui	zero,zero,36
     874:	00001750 	cmplti	zero,zero,93
     878:	00000928 	cmpgeui	zero,zero,36
     87c:	00000928 	cmpgeui	zero,zero,36
     880:	00001034 	movhi	zero,64
     884:	00000928 	cmpgeui	zero,zero,36
     888:	00000928 	cmpgeui	zero,zero,36
     88c:	00000928 	cmpgeui	zero,zero,36
     890:	00000928 	cmpgeui	zero,zero,36
     894:	00000928 	cmpgeui	zero,zero,36
     898:	00001080 	call	108 <alt_irq_handler+0x1c>
     89c:	00000928 	cmpgeui	zero,zero,36
     8a0:	00000928 	cmpgeui	zero,zero,36
     8a4:	000016a0 	cmpeqi	zero,zero,90
     8a8:	00000928 	cmpgeui	zero,zero,36
     8ac:	00000928 	cmpgeui	zero,zero,36
     8b0:	00000928 	cmpgeui	zero,zero,36
     8b4:	00000928 	cmpgeui	zero,zero,36
     8b8:	00000928 	cmpgeui	zero,zero,36
     8bc:	00000928 	cmpgeui	zero,zero,36
     8c0:	00000928 	cmpgeui	zero,zero,36
     8c4:	00000928 	cmpgeui	zero,zero,36
     8c8:	00000928 	cmpgeui	zero,zero,36
     8cc:	00000928 	cmpgeui	zero,zero,36
     8d0:	00001674 	movhi	zero,89
     8d4:	00000f8c 	andi	zero,zero,62
     8d8:	000015ec 	andhi	zero,zero,87
     8dc:	000015ec 	andhi	zero,zero,87
     8e0:	000015ec 	andhi	zero,zero,87
     8e4:	000015d8 	cmpnei	zero,zero,87
     8e8:	00000f8c 	andi	zero,zero,62
     8ec:	00000928 	cmpgeui	zero,zero,36
     8f0:	00000928 	cmpgeui	zero,zero,36
     8f4:	00001560 	cmpeqi	zero,zero,85
     8f8:	00000928 	cmpgeui	zero,zero,36
     8fc:	00001530 	cmpltui	zero,zero,84
     900:	00001040 	call	104 <alt_irq_handler+0x18>
     904:	00001590 	cmplti	zero,zero,86
     908:	0000157c 	xorhi	zero,zero,85
     90c:	00000928 	cmpgeui	zero,zero,36
     910:	0000180c 	andi	zero,zero,96
     914:	00000928 	cmpgeui	zero,zero,36
     918:	0000108c 	andi	zero,zero,66
     91c:	00000928 	cmpgeui	zero,zero,36
     920:	00000928 	cmpgeui	zero,zero,36
     924:	00001704 	movi	zero,92
     928:	d9014d17 	ldw	r4,1332(sp)
     92c:	2000ce26 	beq	r4,zero,c68 <___vfprintf_internal_r+0x6d4>
     930:	01400044 	movi	r5,1
     934:	d9800f04 	addi	r6,sp,60
     938:	d9c14015 	stw	r7,1280(sp)
     93c:	d9414515 	stw	r5,1300(sp)
     940:	d9814115 	stw	r6,1284(sp)
     944:	280f883a 	mov	r7,r5
     948:	d9000f05 	stb	r4,60(sp)
     94c:	d8000405 	stb	zero,16(sp)
     950:	d8014615 	stw	zero,1304(sp)
     954:	d8c14c17 	ldw	r3,1328(sp)
     958:	1880008c 	andi	r2,r3,2
     95c:	1005003a 	cmpeq	r2,r2,zero
     960:	d8815015 	stw	r2,1344(sp)
     964:	1000031e 	bne	r2,zero,974 <___vfprintf_internal_r+0x3e0>
     968:	d9014517 	ldw	r4,1300(sp)
     96c:	21000084 	addi	r4,r4,2
     970:	d9014515 	stw	r4,1300(sp)
     974:	d9414c17 	ldw	r5,1328(sp)
     978:	2940210c 	andi	r5,r5,132
     97c:	d9414e15 	stw	r5,1336(sp)
     980:	28002d1e 	bne	r5,zero,a38 <___vfprintf_internal_r+0x4a4>
     984:	d9814a17 	ldw	r6,1320(sp)
     988:	d8814517 	ldw	r2,1300(sp)
     98c:	30a1c83a 	sub	r16,r6,r2
     990:	0400290e 	bge	zero,r16,a38 <___vfprintf_internal_r+0x4a4>
     994:	00800404 	movi	r2,16
     998:	1404580e 	bge	r2,r16,1afc <___vfprintf_internal_r+0x1568>
     99c:	dc800e17 	ldw	r18,56(sp)
     9a0:	dc400d17 	ldw	r17,52(sp)
     9a4:	1027883a 	mov	r19,r2
     9a8:	07000074 	movhi	fp,1
     9ac:	e7343f84 	addi	fp,fp,-12034
     9b0:	050001c4 	movi	r20,7
     9b4:	00000306 	br	9c4 <___vfprintf_internal_r+0x430>
     9b8:	843ffc04 	addi	r16,r16,-16
     9bc:	ad400204 	addi	r21,r21,8
     9c0:	9c00130e 	bge	r19,r16,a10 <___vfprintf_internal_r+0x47c>
     9c4:	94800404 	addi	r18,r18,16
     9c8:	8c400044 	addi	r17,r17,1
     9cc:	af000015 	stw	fp,0(r21)
     9d0:	acc00115 	stw	r19,4(r21)
     9d4:	dc800e15 	stw	r18,56(sp)
     9d8:	dc400d15 	stw	r17,52(sp)
     9dc:	a47ff60e 	bge	r20,r17,9b8 <___vfprintf_internal_r+0x424>
     9e0:	d9014f17 	ldw	r4,1340(sp)
     9e4:	b00b883a 	mov	r5,r22
     9e8:	d9800c04 	addi	r6,sp,48
     9ec:	d9c15115 	stw	r7,1348(sp)
     9f0:	000053c0 	call	53c <__sprint_r>
     9f4:	d9c15117 	ldw	r7,1348(sp)
     9f8:	10009e1e 	bne	r2,zero,c74 <___vfprintf_internal_r+0x6e0>
     9fc:	843ffc04 	addi	r16,r16,-16
     a00:	dc800e17 	ldw	r18,56(sp)
     a04:	dc400d17 	ldw	r17,52(sp)
     a08:	dd401904 	addi	r21,sp,100
     a0c:	9c3fed16 	blt	r19,r16,9c4 <___vfprintf_internal_r+0x430>
     a10:	9425883a 	add	r18,r18,r16
     a14:	8c400044 	addi	r17,r17,1
     a18:	008001c4 	movi	r2,7
     a1c:	af000015 	stw	fp,0(r21)
     a20:	ac000115 	stw	r16,4(r21)
     a24:	dc800e15 	stw	r18,56(sp)
     a28:	dc400d15 	stw	r17,52(sp)
     a2c:	1441f516 	blt	r2,r17,1204 <___vfprintf_internal_r+0xc70>
     a30:	ad400204 	addi	r21,r21,8
     a34:	00000206 	br	a40 <___vfprintf_internal_r+0x4ac>
     a38:	dc800e17 	ldw	r18,56(sp)
     a3c:	dc400d17 	ldw	r17,52(sp)
     a40:	d8800407 	ldb	r2,16(sp)
     a44:	10000b26 	beq	r2,zero,a74 <___vfprintf_internal_r+0x4e0>
     a48:	00800044 	movi	r2,1
     a4c:	94800044 	addi	r18,r18,1
     a50:	8c400044 	addi	r17,r17,1
     a54:	a8800115 	stw	r2,4(r21)
     a58:	d8c00404 	addi	r3,sp,16
     a5c:	008001c4 	movi	r2,7
     a60:	a8c00015 	stw	r3,0(r21)
     a64:	dc800e15 	stw	r18,56(sp)
     a68:	dc400d15 	stw	r17,52(sp)
     a6c:	1441da16 	blt	r2,r17,11d8 <___vfprintf_internal_r+0xc44>
     a70:	ad400204 	addi	r21,r21,8
     a74:	d9015017 	ldw	r4,1344(sp)
     a78:	20000b1e 	bne	r4,zero,aa8 <___vfprintf_internal_r+0x514>
     a7c:	d8800444 	addi	r2,sp,17
     a80:	94800084 	addi	r18,r18,2
     a84:	8c400044 	addi	r17,r17,1
     a88:	a8800015 	stw	r2,0(r21)
     a8c:	00c00084 	movi	r3,2
     a90:	008001c4 	movi	r2,7
     a94:	a8c00115 	stw	r3,4(r21)
     a98:	dc800e15 	stw	r18,56(sp)
     a9c:	dc400d15 	stw	r17,52(sp)
     aa0:	1441c216 	blt	r2,r17,11ac <___vfprintf_internal_r+0xc18>
     aa4:	ad400204 	addi	r21,r21,8
     aa8:	d9414e17 	ldw	r5,1336(sp)
     aac:	00802004 	movi	r2,128
     ab0:	2880b126 	beq	r5,r2,d78 <___vfprintf_internal_r+0x7e4>
     ab4:	d8c14617 	ldw	r3,1304(sp)
     ab8:	19e1c83a 	sub	r16,r3,r7
     abc:	0400260e 	bge	zero,r16,b58 <___vfprintf_internal_r+0x5c4>
     ac0:	00800404 	movi	r2,16
     ac4:	1403c90e 	bge	r2,r16,19ec <___vfprintf_internal_r+0x1458>
     ac8:	1027883a 	mov	r19,r2
     acc:	07000074 	movhi	fp,1
     ad0:	e7343b84 	addi	fp,fp,-12050
     ad4:	050001c4 	movi	r20,7
     ad8:	00000306 	br	ae8 <___vfprintf_internal_r+0x554>
     adc:	843ffc04 	addi	r16,r16,-16
     ae0:	ad400204 	addi	r21,r21,8
     ae4:	9c00130e 	bge	r19,r16,b34 <___vfprintf_internal_r+0x5a0>
     ae8:	94800404 	addi	r18,r18,16
     aec:	8c400044 	addi	r17,r17,1
     af0:	af000015 	stw	fp,0(r21)
     af4:	acc00115 	stw	r19,4(r21)
     af8:	dc800e15 	stw	r18,56(sp)
     afc:	dc400d15 	stw	r17,52(sp)
     b00:	a47ff60e 	bge	r20,r17,adc <___vfprintf_internal_r+0x548>
     b04:	d9014f17 	ldw	r4,1340(sp)
     b08:	b00b883a 	mov	r5,r22
     b0c:	d9800c04 	addi	r6,sp,48
     b10:	d9c15115 	stw	r7,1348(sp)
     b14:	000053c0 	call	53c <__sprint_r>
     b18:	d9c15117 	ldw	r7,1348(sp)
     b1c:	1000551e 	bne	r2,zero,c74 <___vfprintf_internal_r+0x6e0>
     b20:	843ffc04 	addi	r16,r16,-16
     b24:	dc800e17 	ldw	r18,56(sp)
     b28:	dc400d17 	ldw	r17,52(sp)
     b2c:	dd401904 	addi	r21,sp,100
     b30:	9c3fed16 	blt	r19,r16,ae8 <___vfprintf_internal_r+0x554>
     b34:	9425883a 	add	r18,r18,r16
     b38:	8c400044 	addi	r17,r17,1
     b3c:	008001c4 	movi	r2,7
     b40:	af000015 	stw	fp,0(r21)
     b44:	ac000115 	stw	r16,4(r21)
     b48:	dc800e15 	stw	r18,56(sp)
     b4c:	dc400d15 	stw	r17,52(sp)
     b50:	14418216 	blt	r2,r17,115c <___vfprintf_internal_r+0xbc8>
     b54:	ad400204 	addi	r21,r21,8
     b58:	d9014c17 	ldw	r4,1328(sp)
     b5c:	2080400c 	andi	r2,r4,256
     b60:	10004a1e 	bne	r2,zero,c8c <___vfprintf_internal_r+0x6f8>
     b64:	d9414117 	ldw	r5,1284(sp)
     b68:	91e5883a 	add	r18,r18,r7
     b6c:	8c400044 	addi	r17,r17,1
     b70:	008001c4 	movi	r2,7
     b74:	a9400015 	stw	r5,0(r21)
     b78:	a9c00115 	stw	r7,4(r21)
     b7c:	dc800e15 	stw	r18,56(sp)
     b80:	dc400d15 	stw	r17,52(sp)
     b84:	14416716 	blt	r2,r17,1124 <___vfprintf_internal_r+0xb90>
     b88:	a8c00204 	addi	r3,r21,8
     b8c:	d9814c17 	ldw	r6,1328(sp)
     b90:	3080010c 	andi	r2,r6,4
     b94:	10002826 	beq	r2,zero,c38 <___vfprintf_internal_r+0x6a4>
     b98:	d8814a17 	ldw	r2,1320(sp)
     b9c:	d9014517 	ldw	r4,1300(sp)
     ba0:	1121c83a 	sub	r16,r2,r4
     ba4:	0400240e 	bge	zero,r16,c38 <___vfprintf_internal_r+0x6a4>
     ba8:	00800404 	movi	r2,16
     bac:	14044f0e 	bge	r2,r16,1cec <___vfprintf_internal_r+0x1758>
     bb0:	dc400d17 	ldw	r17,52(sp)
     bb4:	1027883a 	mov	r19,r2
     bb8:	07000074 	movhi	fp,1
     bbc:	e7343f84 	addi	fp,fp,-12034
     bc0:	050001c4 	movi	r20,7
     bc4:	00000306 	br	bd4 <___vfprintf_internal_r+0x640>
     bc8:	843ffc04 	addi	r16,r16,-16
     bcc:	18c00204 	addi	r3,r3,8
     bd0:	9c00110e 	bge	r19,r16,c18 <___vfprintf_internal_r+0x684>
     bd4:	94800404 	addi	r18,r18,16
     bd8:	8c400044 	addi	r17,r17,1
     bdc:	1f000015 	stw	fp,0(r3)
     be0:	1cc00115 	stw	r19,4(r3)
     be4:	dc800e15 	stw	r18,56(sp)
     be8:	dc400d15 	stw	r17,52(sp)
     bec:	a47ff60e 	bge	r20,r17,bc8 <___vfprintf_internal_r+0x634>
     bf0:	d9014f17 	ldw	r4,1340(sp)
     bf4:	b00b883a 	mov	r5,r22
     bf8:	d9800c04 	addi	r6,sp,48
     bfc:	000053c0 	call	53c <__sprint_r>
     c00:	10001c1e 	bne	r2,zero,c74 <___vfprintf_internal_r+0x6e0>
     c04:	843ffc04 	addi	r16,r16,-16
     c08:	dc800e17 	ldw	r18,56(sp)
     c0c:	dc400d17 	ldw	r17,52(sp)
     c10:	d8c01904 	addi	r3,sp,100
     c14:	9c3fef16 	blt	r19,r16,bd4 <___vfprintf_internal_r+0x640>
     c18:	9425883a 	add	r18,r18,r16
     c1c:	8c400044 	addi	r17,r17,1
     c20:	008001c4 	movi	r2,7
     c24:	1f000015 	stw	fp,0(r3)
     c28:	1c000115 	stw	r16,4(r3)
     c2c:	dc800e15 	stw	r18,56(sp)
     c30:	dc400d15 	stw	r17,52(sp)
     c34:	1440cb16 	blt	r2,r17,f64 <___vfprintf_internal_r+0x9d0>
     c38:	d8814a17 	ldw	r2,1320(sp)
     c3c:	d9414517 	ldw	r5,1300(sp)
     c40:	1140010e 	bge	r2,r5,c48 <___vfprintf_internal_r+0x6b4>
     c44:	2805883a 	mov	r2,r5
     c48:	d9814b17 	ldw	r6,1324(sp)
     c4c:	308d883a 	add	r6,r6,r2
     c50:	d9814b15 	stw	r6,1324(sp)
     c54:	90013b1e 	bne	r18,zero,1144 <___vfprintf_internal_r+0xbb0>
     c58:	d9c14017 	ldw	r7,1280(sp)
     c5c:	dd401904 	addi	r21,sp,100
     c60:	d8000d15 	stw	zero,52(sp)
     c64:	003ea706 	br	704 <___vfprintf_internal_r+0x170>
     c68:	d8800e17 	ldw	r2,56(sp)
     c6c:	10053f1e 	bne	r2,zero,216c <___vfprintf_internal_r+0x1bd8>
     c70:	d8000d15 	stw	zero,52(sp)
     c74:	b080030b 	ldhu	r2,12(r22)
     c78:	1080100c 	andi	r2,r2,64
     c7c:	103e8726 	beq	r2,zero,69c <___vfprintf_internal_r+0x108>
     c80:	00bfffc4 	movi	r2,-1
     c84:	d8814b15 	stw	r2,1324(sp)
     c88:	003e8406 	br	69c <___vfprintf_internal_r+0x108>
     c8c:	d9814d17 	ldw	r6,1332(sp)
     c90:	00801944 	movi	r2,101
     c94:	11806e16 	blt	r2,r6,e50 <___vfprintf_internal_r+0x8bc>
     c98:	d9414717 	ldw	r5,1308(sp)
     c9c:	00c00044 	movi	r3,1
     ca0:	1943430e 	bge	r3,r5,19b0 <___vfprintf_internal_r+0x141c>
     ca4:	d8814117 	ldw	r2,1284(sp)
     ca8:	94800044 	addi	r18,r18,1
     cac:	8c400044 	addi	r17,r17,1
     cb0:	a8800015 	stw	r2,0(r21)
     cb4:	008001c4 	movi	r2,7
     cb8:	a8c00115 	stw	r3,4(r21)
     cbc:	dc800e15 	stw	r18,56(sp)
     cc0:	dc400d15 	stw	r17,52(sp)
     cc4:	1441ca16 	blt	r2,r17,13f0 <___vfprintf_internal_r+0xe5c>
     cc8:	a8c00204 	addi	r3,r21,8
     ccc:	d9014917 	ldw	r4,1316(sp)
     cd0:	00800044 	movi	r2,1
     cd4:	94800044 	addi	r18,r18,1
     cd8:	8c400044 	addi	r17,r17,1
     cdc:	18800115 	stw	r2,4(r3)
     ce0:	008001c4 	movi	r2,7
     ce4:	19000015 	stw	r4,0(r3)
     ce8:	dc800e15 	stw	r18,56(sp)
     cec:	dc400d15 	stw	r17,52(sp)
     cf0:	1441b616 	blt	r2,r17,13cc <___vfprintf_internal_r+0xe38>
     cf4:	1cc00204 	addi	r19,r3,8
     cf8:	d9014217 	ldw	r4,1288(sp)
     cfc:	d9414317 	ldw	r5,1292(sp)
     d00:	000d883a 	mov	r6,zero
     d04:	000f883a 	mov	r7,zero
     d08:	0008f980 	call	8f98 <__nedf2>
     d0c:	10017426 	beq	r2,zero,12e0 <___vfprintf_internal_r+0xd4c>
     d10:	d9414717 	ldw	r5,1308(sp)
     d14:	d9814117 	ldw	r6,1284(sp)
     d18:	8c400044 	addi	r17,r17,1
     d1c:	2c85883a 	add	r2,r5,r18
     d20:	14bfffc4 	addi	r18,r2,-1
     d24:	28bfffc4 	addi	r2,r5,-1
     d28:	30c00044 	addi	r3,r6,1
     d2c:	98800115 	stw	r2,4(r19)
     d30:	008001c4 	movi	r2,7
     d34:	98c00015 	stw	r3,0(r19)
     d38:	dc800e15 	stw	r18,56(sp)
     d3c:	dc400d15 	stw	r17,52(sp)
     d40:	14418e16 	blt	r2,r17,137c <___vfprintf_internal_r+0xde8>
     d44:	9cc00204 	addi	r19,r19,8
     d48:	d9414817 	ldw	r5,1312(sp)
     d4c:	d8800804 	addi	r2,sp,32
     d50:	8c400044 	addi	r17,r17,1
     d54:	9165883a 	add	r18,r18,r5
     d58:	98800015 	stw	r2,0(r19)
     d5c:	008001c4 	movi	r2,7
     d60:	99400115 	stw	r5,4(r19)
     d64:	dc800e15 	stw	r18,56(sp)
     d68:	dc400d15 	stw	r17,52(sp)
     d6c:	1440ed16 	blt	r2,r17,1124 <___vfprintf_internal_r+0xb90>
     d70:	98c00204 	addi	r3,r19,8
     d74:	003f8506 	br	b8c <___vfprintf_internal_r+0x5f8>
     d78:	d9814a17 	ldw	r6,1320(sp)
     d7c:	d8814517 	ldw	r2,1300(sp)
     d80:	30a1c83a 	sub	r16,r6,r2
     d84:	043f4b0e 	bge	zero,r16,ab4 <___vfprintf_internal_r+0x520>
     d88:	00800404 	movi	r2,16
     d8c:	1404340e 	bge	r2,r16,1e60 <___vfprintf_internal_r+0x18cc>
     d90:	1027883a 	mov	r19,r2
     d94:	07000074 	movhi	fp,1
     d98:	e7343b84 	addi	fp,fp,-12050
     d9c:	050001c4 	movi	r20,7
     da0:	00000306 	br	db0 <___vfprintf_internal_r+0x81c>
     da4:	843ffc04 	addi	r16,r16,-16
     da8:	ad400204 	addi	r21,r21,8
     dac:	9c00130e 	bge	r19,r16,dfc <___vfprintf_internal_r+0x868>
     db0:	94800404 	addi	r18,r18,16
     db4:	8c400044 	addi	r17,r17,1
     db8:	af000015 	stw	fp,0(r21)
     dbc:	acc00115 	stw	r19,4(r21)
     dc0:	dc800e15 	stw	r18,56(sp)
     dc4:	dc400d15 	stw	r17,52(sp)
     dc8:	a47ff60e 	bge	r20,r17,da4 <___vfprintf_internal_r+0x810>
     dcc:	d9014f17 	ldw	r4,1340(sp)
     dd0:	b00b883a 	mov	r5,r22
     dd4:	d9800c04 	addi	r6,sp,48
     dd8:	d9c15115 	stw	r7,1348(sp)
     ddc:	000053c0 	call	53c <__sprint_r>
     de0:	d9c15117 	ldw	r7,1348(sp)
     de4:	103fa31e 	bne	r2,zero,c74 <___vfprintf_internal_r+0x6e0>
     de8:	843ffc04 	addi	r16,r16,-16
     dec:	dc800e17 	ldw	r18,56(sp)
     df0:	dc400d17 	ldw	r17,52(sp)
     df4:	dd401904 	addi	r21,sp,100
     df8:	9c3fed16 	blt	r19,r16,db0 <___vfprintf_internal_r+0x81c>
     dfc:	9425883a 	add	r18,r18,r16
     e00:	8c400044 	addi	r17,r17,1
     e04:	008001c4 	movi	r2,7
     e08:	af000015 	stw	fp,0(r21)
     e0c:	ac000115 	stw	r16,4(r21)
     e10:	dc800e15 	stw	r18,56(sp)
     e14:	dc400d15 	stw	r17,52(sp)
     e18:	14416116 	blt	r2,r17,13a0 <___vfprintf_internal_r+0xe0c>
     e1c:	ad400204 	addi	r21,r21,8
     e20:	003f2406 	br	ab4 <___vfprintf_internal_r+0x520>
     e24:	d9014f17 	ldw	r4,1340(sp)
     e28:	00041b80 	call	41b8 <__sinit>
     e2c:	d9c15117 	ldw	r7,1348(sp)
     e30:	003def06 	br	5f0 <___vfprintf_internal_r+0x5c>
     e34:	d9014f17 	ldw	r4,1340(sp)
     e38:	b00b883a 	mov	r5,r22
     e3c:	d9c15115 	stw	r7,1348(sp)
     e40:	00024640 	call	2464 <__swsetup_r>
     e44:	d9c15117 	ldw	r7,1348(sp)
     e48:	103dee26 	beq	r2,zero,604 <___vfprintf_internal_r+0x70>
     e4c:	003f8c06 	br	c80 <___vfprintf_internal_r+0x6ec>
     e50:	d9014217 	ldw	r4,1288(sp)
     e54:	d9414317 	ldw	r5,1292(sp)
     e58:	000d883a 	mov	r6,zero
     e5c:	000f883a 	mov	r7,zero
     e60:	0008f100 	call	8f10 <__eqdf2>
     e64:	1000f21e 	bne	r2,zero,1230 <___vfprintf_internal_r+0xc9c>
     e68:	00800074 	movhi	r2,1
     e6c:	10b43b04 	addi	r2,r2,-12052
     e70:	94800044 	addi	r18,r18,1
     e74:	8c400044 	addi	r17,r17,1
     e78:	a8800015 	stw	r2,0(r21)
     e7c:	00c00044 	movi	r3,1
     e80:	008001c4 	movi	r2,7
     e84:	a8c00115 	stw	r3,4(r21)
     e88:	dc800e15 	stw	r18,56(sp)
     e8c:	dc400d15 	stw	r17,52(sp)
     e90:	1442fa16 	blt	r2,r17,1a7c <___vfprintf_internal_r+0x14e8>
     e94:	a8c00204 	addi	r3,r21,8
     e98:	d8800517 	ldw	r2,20(sp)
     e9c:	d9014717 	ldw	r4,1308(sp)
     ea0:	11015c0e 	bge	r2,r4,1414 <___vfprintf_internal_r+0xe80>
     ea4:	dc400d17 	ldw	r17,52(sp)
     ea8:	d9814917 	ldw	r6,1316(sp)
     eac:	00800044 	movi	r2,1
     eb0:	94800044 	addi	r18,r18,1
     eb4:	8c400044 	addi	r17,r17,1
     eb8:	18800115 	stw	r2,4(r3)
     ebc:	008001c4 	movi	r2,7
     ec0:	19800015 	stw	r6,0(r3)
     ec4:	dc800e15 	stw	r18,56(sp)
     ec8:	dc400d15 	stw	r17,52(sp)
     ecc:	14431016 	blt	r2,r17,1b10 <___vfprintf_internal_r+0x157c>
     ed0:	18c00204 	addi	r3,r3,8
     ed4:	d8814717 	ldw	r2,1308(sp)
     ed8:	143fffc4 	addi	r16,r2,-1
     edc:	043f2b0e 	bge	zero,r16,b8c <___vfprintf_internal_r+0x5f8>
     ee0:	00800404 	movi	r2,16
     ee4:	1402a20e 	bge	r2,r16,1970 <___vfprintf_internal_r+0x13dc>
     ee8:	dc400d17 	ldw	r17,52(sp)
     eec:	1027883a 	mov	r19,r2
     ef0:	07000074 	movhi	fp,1
     ef4:	e7343b84 	addi	fp,fp,-12050
     ef8:	050001c4 	movi	r20,7
     efc:	00000306 	br	f0c <___vfprintf_internal_r+0x978>
     f00:	18c00204 	addi	r3,r3,8
     f04:	843ffc04 	addi	r16,r16,-16
     f08:	9c029c0e 	bge	r19,r16,197c <___vfprintf_internal_r+0x13e8>
     f0c:	94800404 	addi	r18,r18,16
     f10:	8c400044 	addi	r17,r17,1
     f14:	1f000015 	stw	fp,0(r3)
     f18:	1cc00115 	stw	r19,4(r3)
     f1c:	dc800e15 	stw	r18,56(sp)
     f20:	dc400d15 	stw	r17,52(sp)
     f24:	a47ff60e 	bge	r20,r17,f00 <___vfprintf_internal_r+0x96c>
     f28:	d9014f17 	ldw	r4,1340(sp)
     f2c:	b00b883a 	mov	r5,r22
     f30:	d9800c04 	addi	r6,sp,48
     f34:	000053c0 	call	53c <__sprint_r>
     f38:	103f4e1e 	bne	r2,zero,c74 <___vfprintf_internal_r+0x6e0>
     f3c:	dc800e17 	ldw	r18,56(sp)
     f40:	dc400d17 	ldw	r17,52(sp)
     f44:	d8c01904 	addi	r3,sp,100
     f48:	003fee06 	br	f04 <___vfprintf_internal_r+0x970>
     f4c:	d8802c0b 	ldhu	r2,176(sp)
     f50:	00ffffc4 	movi	r3,-1
     f54:	d8c14b15 	stw	r3,1324(sp)
     f58:	1080100c 	andi	r2,r2,64
     f5c:	103dcc1e 	bne	r2,zero,690 <___vfprintf_internal_r+0xfc>
     f60:	003dce06 	br	69c <___vfprintf_internal_r+0x108>
     f64:	d9014f17 	ldw	r4,1340(sp)
     f68:	b00b883a 	mov	r5,r22
     f6c:	d9800c04 	addi	r6,sp,48
     f70:	000053c0 	call	53c <__sprint_r>
     f74:	103f3f1e 	bne	r2,zero,c74 <___vfprintf_internal_r+0x6e0>
     f78:	dc800e17 	ldw	r18,56(sp)
     f7c:	003f2e06 	br	c38 <___vfprintf_internal_r+0x6a4>
     f80:	d9414c17 	ldw	r5,1328(sp)
     f84:	29400414 	ori	r5,r5,16
     f88:	d9414c15 	stw	r5,1328(sp)
     f8c:	d9814c17 	ldw	r6,1328(sp)
     f90:	3080080c 	andi	r2,r6,32
     f94:	10014f1e 	bne	r2,zero,14d4 <___vfprintf_internal_r+0xf40>
     f98:	d8c14c17 	ldw	r3,1328(sp)
     f9c:	1880040c 	andi	r2,r3,16
     fa0:	1002ea1e 	bne	r2,zero,1b4c <___vfprintf_internal_r+0x15b8>
     fa4:	d9014c17 	ldw	r4,1328(sp)
     fa8:	2080100c 	andi	r2,r4,64
     fac:	1002e726 	beq	r2,zero,1b4c <___vfprintf_internal_r+0x15b8>
     fb0:	3880000f 	ldh	r2,0(r7)
     fb4:	39c00104 	addi	r7,r7,4
     fb8:	d9c14015 	stw	r7,1280(sp)
     fbc:	1023d7fa 	srai	r17,r2,31
     fc0:	1021883a 	mov	r16,r2
     fc4:	88037216 	blt	r17,zero,1d90 <___vfprintf_internal_r+0x17fc>
     fc8:	01000044 	movi	r4,1
     fcc:	98000416 	blt	r19,zero,fe0 <___vfprintf_internal_r+0xa4c>
     fd0:	d8c14c17 	ldw	r3,1328(sp)
     fd4:	00bfdfc4 	movi	r2,-129
     fd8:	1886703a 	and	r3,r3,r2
     fdc:	d8c14c15 	stw	r3,1328(sp)
     fe0:	8444b03a 	or	r2,r16,r17
     fe4:	1002261e 	bne	r2,zero,1880 <___vfprintf_internal_r+0x12ec>
     fe8:	9802251e 	bne	r19,zero,1880 <___vfprintf_internal_r+0x12ec>
     fec:	20803fcc 	andi	r2,r4,255
     ff0:	10029b26 	beq	r2,zero,1a60 <___vfprintf_internal_r+0x14cc>
     ff4:	d8c01904 	addi	r3,sp,100
     ff8:	dd000f04 	addi	r20,sp,60
     ffc:	d8c14115 	stw	r3,1284(sp)
    1000:	d8c14117 	ldw	r3,1284(sp)
    1004:	dcc14515 	stw	r19,1300(sp)
    1008:	a0c5c83a 	sub	r2,r20,r3
    100c:	11c00a04 	addi	r7,r2,40
    1010:	99c0010e 	bge	r19,r7,1018 <___vfprintf_internal_r+0xa84>
    1014:	d9c14515 	stw	r7,1300(sp)
    1018:	dcc14615 	stw	r19,1304(sp)
    101c:	d8800407 	ldb	r2,16(sp)
    1020:	103e4c26 	beq	r2,zero,954 <___vfprintf_internal_r+0x3c0>
    1024:	d8814517 	ldw	r2,1300(sp)
    1028:	10800044 	addi	r2,r2,1
    102c:	d8814515 	stw	r2,1300(sp)
    1030:	003e4806 	br	954 <___vfprintf_internal_r+0x3c0>
    1034:	d9814c17 	ldw	r6,1328(sp)
    1038:	31800414 	ori	r6,r6,16
    103c:	d9814c15 	stw	r6,1328(sp)
    1040:	d8c14c17 	ldw	r3,1328(sp)
    1044:	1880080c 	andi	r2,r3,32
    1048:	1001271e 	bne	r2,zero,14e8 <___vfprintf_internal_r+0xf54>
    104c:	d9414c17 	ldw	r5,1328(sp)
    1050:	2880040c 	andi	r2,r5,16
    1054:	1002b61e 	bne	r2,zero,1b30 <___vfprintf_internal_r+0x159c>
    1058:	d9814c17 	ldw	r6,1328(sp)
    105c:	3080100c 	andi	r2,r6,64
    1060:	1002b326 	beq	r2,zero,1b30 <___vfprintf_internal_r+0x159c>
    1064:	3c00000b 	ldhu	r16,0(r7)
    1068:	0009883a 	mov	r4,zero
    106c:	39c00104 	addi	r7,r7,4
    1070:	0023883a 	mov	r17,zero
    1074:	d9c14015 	stw	r7,1280(sp)
    1078:	d8000405 	stb	zero,16(sp)
    107c:	003fd306 	br	fcc <___vfprintf_internal_r+0xa38>
    1080:	d9014c17 	ldw	r4,1328(sp)
    1084:	21000414 	ori	r4,r4,16
    1088:	d9014c15 	stw	r4,1328(sp)
    108c:	d9414c17 	ldw	r5,1328(sp)
    1090:	2880080c 	andi	r2,r5,32
    1094:	1001081e 	bne	r2,zero,14b8 <___vfprintf_internal_r+0xf24>
    1098:	d8c14c17 	ldw	r3,1328(sp)
    109c:	1880040c 	andi	r2,r3,16
    10a0:	1002b01e 	bne	r2,zero,1b64 <___vfprintf_internal_r+0x15d0>
    10a4:	d9014c17 	ldw	r4,1328(sp)
    10a8:	2080100c 	andi	r2,r4,64
    10ac:	1002ad26 	beq	r2,zero,1b64 <___vfprintf_internal_r+0x15d0>
    10b0:	3c00000b 	ldhu	r16,0(r7)
    10b4:	01000044 	movi	r4,1
    10b8:	39c00104 	addi	r7,r7,4
    10bc:	0023883a 	mov	r17,zero
    10c0:	d9c14015 	stw	r7,1280(sp)
    10c4:	d8000405 	stb	zero,16(sp)
    10c8:	003fc006 	br	fcc <___vfprintf_internal_r+0xa38>
    10cc:	d9014f17 	ldw	r4,1340(sp)
    10d0:	b00b883a 	mov	r5,r22
    10d4:	d9800c04 	addi	r6,sp,48
    10d8:	000053c0 	call	53c <__sprint_r>
    10dc:	103ee51e 	bne	r2,zero,c74 <___vfprintf_internal_r+0x6e0>
    10e0:	dc800e17 	ldw	r18,56(sp)
    10e4:	d8c01904 	addi	r3,sp,100
    10e8:	d9814c17 	ldw	r6,1328(sp)
    10ec:	3080004c 	andi	r2,r6,1
    10f0:	1005003a 	cmpeq	r2,r2,zero
    10f4:	103ea51e 	bne	r2,zero,b8c <___vfprintf_internal_r+0x5f8>
    10f8:	00800044 	movi	r2,1
    10fc:	dc400d17 	ldw	r17,52(sp)
    1100:	18800115 	stw	r2,4(r3)
    1104:	d8814917 	ldw	r2,1316(sp)
    1108:	94800044 	addi	r18,r18,1
    110c:	8c400044 	addi	r17,r17,1
    1110:	18800015 	stw	r2,0(r3)
    1114:	008001c4 	movi	r2,7
    1118:	dc800e15 	stw	r18,56(sp)
    111c:	dc400d15 	stw	r17,52(sp)
    1120:	14421e0e 	bge	r2,r17,199c <___vfprintf_internal_r+0x1408>
    1124:	d9014f17 	ldw	r4,1340(sp)
    1128:	b00b883a 	mov	r5,r22
    112c:	d9800c04 	addi	r6,sp,48
    1130:	000053c0 	call	53c <__sprint_r>
    1134:	103ecf1e 	bne	r2,zero,c74 <___vfprintf_internal_r+0x6e0>
    1138:	dc800e17 	ldw	r18,56(sp)
    113c:	d8c01904 	addi	r3,sp,100
    1140:	003e9206 	br	b8c <___vfprintf_internal_r+0x5f8>
    1144:	d9014f17 	ldw	r4,1340(sp)
    1148:	b00b883a 	mov	r5,r22
    114c:	d9800c04 	addi	r6,sp,48
    1150:	000053c0 	call	53c <__sprint_r>
    1154:	103ec026 	beq	r2,zero,c58 <___vfprintf_internal_r+0x6c4>
    1158:	003ec606 	br	c74 <___vfprintf_internal_r+0x6e0>
    115c:	d9014f17 	ldw	r4,1340(sp)
    1160:	b00b883a 	mov	r5,r22
    1164:	d9800c04 	addi	r6,sp,48
    1168:	d9c15115 	stw	r7,1348(sp)
    116c:	000053c0 	call	53c <__sprint_r>
    1170:	d9c15117 	ldw	r7,1348(sp)
    1174:	103ebf1e 	bne	r2,zero,c74 <___vfprintf_internal_r+0x6e0>
    1178:	dc800e17 	ldw	r18,56(sp)
    117c:	dc400d17 	ldw	r17,52(sp)
    1180:	dd401904 	addi	r21,sp,100
    1184:	003e7406 	br	b58 <___vfprintf_internal_r+0x5c4>
    1188:	d9014f17 	ldw	r4,1340(sp)
    118c:	b00b883a 	mov	r5,r22
    1190:	d9800c04 	addi	r6,sp,48
    1194:	d9c15115 	stw	r7,1348(sp)
    1198:	000053c0 	call	53c <__sprint_r>
    119c:	d9c15117 	ldw	r7,1348(sp)
    11a0:	103eb41e 	bne	r2,zero,c74 <___vfprintf_internal_r+0x6e0>
    11a4:	dd401904 	addi	r21,sp,100
    11a8:	003d6d06 	br	760 <___vfprintf_internal_r+0x1cc>
    11ac:	d9014f17 	ldw	r4,1340(sp)
    11b0:	b00b883a 	mov	r5,r22
    11b4:	d9800c04 	addi	r6,sp,48
    11b8:	d9c15115 	stw	r7,1348(sp)
    11bc:	000053c0 	call	53c <__sprint_r>
    11c0:	d9c15117 	ldw	r7,1348(sp)
    11c4:	103eab1e 	bne	r2,zero,c74 <___vfprintf_internal_r+0x6e0>
    11c8:	dc800e17 	ldw	r18,56(sp)
    11cc:	dc400d17 	ldw	r17,52(sp)
    11d0:	dd401904 	addi	r21,sp,100
    11d4:	003e3406 	br	aa8 <___vfprintf_internal_r+0x514>
    11d8:	d9014f17 	ldw	r4,1340(sp)
    11dc:	b00b883a 	mov	r5,r22
    11e0:	d9800c04 	addi	r6,sp,48
    11e4:	d9c15115 	stw	r7,1348(sp)
    11e8:	000053c0 	call	53c <__sprint_r>
    11ec:	d9c15117 	ldw	r7,1348(sp)
    11f0:	103ea01e 	bne	r2,zero,c74 <___vfprintf_internal_r+0x6e0>
    11f4:	dc800e17 	ldw	r18,56(sp)
    11f8:	dc400d17 	ldw	r17,52(sp)
    11fc:	dd401904 	addi	r21,sp,100
    1200:	003e1c06 	br	a74 <___vfprintf_internal_r+0x4e0>
    1204:	d9014f17 	ldw	r4,1340(sp)
    1208:	b00b883a 	mov	r5,r22
    120c:	d9800c04 	addi	r6,sp,48
    1210:	d9c15115 	stw	r7,1348(sp)
    1214:	000053c0 	call	53c <__sprint_r>
    1218:	d9c15117 	ldw	r7,1348(sp)
    121c:	103e951e 	bne	r2,zero,c74 <___vfprintf_internal_r+0x6e0>
    1220:	dc800e17 	ldw	r18,56(sp)
    1224:	dc400d17 	ldw	r17,52(sp)
    1228:	dd401904 	addi	r21,sp,100
    122c:	003e0406 	br	a40 <___vfprintf_internal_r+0x4ac>
    1230:	d9000517 	ldw	r4,20(sp)
    1234:	0102520e 	bge	zero,r4,1b80 <___vfprintf_internal_r+0x15ec>
    1238:	d9814717 	ldw	r6,1308(sp)
    123c:	21807a16 	blt	r4,r6,1428 <___vfprintf_internal_r+0xe94>
    1240:	d8814117 	ldw	r2,1284(sp)
    1244:	91a5883a 	add	r18,r18,r6
    1248:	8c400044 	addi	r17,r17,1
    124c:	a8800015 	stw	r2,0(r21)
    1250:	008001c4 	movi	r2,7
    1254:	a9800115 	stw	r6,4(r21)
    1258:	dc800e15 	stw	r18,56(sp)
    125c:	dc400d15 	stw	r17,52(sp)
    1260:	1442f616 	blt	r2,r17,1e3c <___vfprintf_internal_r+0x18a8>
    1264:	a8c00204 	addi	r3,r21,8
    1268:	d9414717 	ldw	r5,1308(sp)
    126c:	2161c83a 	sub	r16,r4,r5
    1270:	043f9d0e 	bge	zero,r16,10e8 <___vfprintf_internal_r+0xb54>
    1274:	00800404 	movi	r2,16
    1278:	1402130e 	bge	r2,r16,1ac8 <___vfprintf_internal_r+0x1534>
    127c:	dc400d17 	ldw	r17,52(sp)
    1280:	1027883a 	mov	r19,r2
    1284:	07000074 	movhi	fp,1
    1288:	e7343b84 	addi	fp,fp,-12050
    128c:	050001c4 	movi	r20,7
    1290:	00000306 	br	12a0 <___vfprintf_internal_r+0xd0c>
    1294:	18c00204 	addi	r3,r3,8
    1298:	843ffc04 	addi	r16,r16,-16
    129c:	9c020d0e 	bge	r19,r16,1ad4 <___vfprintf_internal_r+0x1540>
    12a0:	94800404 	addi	r18,r18,16
    12a4:	8c400044 	addi	r17,r17,1
    12a8:	1f000015 	stw	fp,0(r3)
    12ac:	1cc00115 	stw	r19,4(r3)
    12b0:	dc800e15 	stw	r18,56(sp)
    12b4:	dc400d15 	stw	r17,52(sp)
    12b8:	a47ff60e 	bge	r20,r17,1294 <___vfprintf_internal_r+0xd00>
    12bc:	d9014f17 	ldw	r4,1340(sp)
    12c0:	b00b883a 	mov	r5,r22
    12c4:	d9800c04 	addi	r6,sp,48
    12c8:	000053c0 	call	53c <__sprint_r>
    12cc:	103e691e 	bne	r2,zero,c74 <___vfprintf_internal_r+0x6e0>
    12d0:	dc800e17 	ldw	r18,56(sp)
    12d4:	dc400d17 	ldw	r17,52(sp)
    12d8:	d8c01904 	addi	r3,sp,100
    12dc:	003fee06 	br	1298 <___vfprintf_internal_r+0xd04>
    12e0:	d8814717 	ldw	r2,1308(sp)
    12e4:	143fffc4 	addi	r16,r2,-1
    12e8:	043e970e 	bge	zero,r16,d48 <___vfprintf_internal_r+0x7b4>
    12ec:	00800404 	movi	r2,16
    12f0:	1400180e 	bge	r2,r16,1354 <___vfprintf_internal_r+0xdc0>
    12f4:	1029883a 	mov	r20,r2
    12f8:	07000074 	movhi	fp,1
    12fc:	e7343b84 	addi	fp,fp,-12050
    1300:	054001c4 	movi	r21,7
    1304:	00000306 	br	1314 <___vfprintf_internal_r+0xd80>
    1308:	9cc00204 	addi	r19,r19,8
    130c:	843ffc04 	addi	r16,r16,-16
    1310:	a400120e 	bge	r20,r16,135c <___vfprintf_internal_r+0xdc8>
    1314:	94800404 	addi	r18,r18,16
    1318:	8c400044 	addi	r17,r17,1
    131c:	9f000015 	stw	fp,0(r19)
    1320:	9d000115 	stw	r20,4(r19)
    1324:	dc800e15 	stw	r18,56(sp)
    1328:	dc400d15 	stw	r17,52(sp)
    132c:	ac7ff60e 	bge	r21,r17,1308 <___vfprintf_internal_r+0xd74>
    1330:	d9014f17 	ldw	r4,1340(sp)
    1334:	b00b883a 	mov	r5,r22
    1338:	d9800c04 	addi	r6,sp,48
    133c:	000053c0 	call	53c <__sprint_r>
    1340:	103e4c1e 	bne	r2,zero,c74 <___vfprintf_internal_r+0x6e0>
    1344:	dc800e17 	ldw	r18,56(sp)
    1348:	dc400d17 	ldw	r17,52(sp)
    134c:	dcc01904 	addi	r19,sp,100
    1350:	003fee06 	br	130c <___vfprintf_internal_r+0xd78>
    1354:	07000074 	movhi	fp,1
    1358:	e7343b84 	addi	fp,fp,-12050
    135c:	9425883a 	add	r18,r18,r16
    1360:	8c400044 	addi	r17,r17,1
    1364:	008001c4 	movi	r2,7
    1368:	9f000015 	stw	fp,0(r19)
    136c:	9c000115 	stw	r16,4(r19)
    1370:	dc800e15 	stw	r18,56(sp)
    1374:	dc400d15 	stw	r17,52(sp)
    1378:	147e720e 	bge	r2,r17,d44 <___vfprintf_internal_r+0x7b0>
    137c:	d9014f17 	ldw	r4,1340(sp)
    1380:	b00b883a 	mov	r5,r22
    1384:	d9800c04 	addi	r6,sp,48
    1388:	000053c0 	call	53c <__sprint_r>
    138c:	103e391e 	bne	r2,zero,c74 <___vfprintf_internal_r+0x6e0>
    1390:	dc800e17 	ldw	r18,56(sp)
    1394:	dc400d17 	ldw	r17,52(sp)
    1398:	dcc01904 	addi	r19,sp,100
    139c:	003e6a06 	br	d48 <___vfprintf_internal_r+0x7b4>
    13a0:	d9014f17 	ldw	r4,1340(sp)
    13a4:	b00b883a 	mov	r5,r22
    13a8:	d9800c04 	addi	r6,sp,48
    13ac:	d9c15115 	stw	r7,1348(sp)
    13b0:	000053c0 	call	53c <__sprint_r>
    13b4:	d9c15117 	ldw	r7,1348(sp)
    13b8:	103e2e1e 	bne	r2,zero,c74 <___vfprintf_internal_r+0x6e0>
    13bc:	dc800e17 	ldw	r18,56(sp)
    13c0:	dc400d17 	ldw	r17,52(sp)
    13c4:	dd401904 	addi	r21,sp,100
    13c8:	003dba06 	br	ab4 <___vfprintf_internal_r+0x520>
    13cc:	d9014f17 	ldw	r4,1340(sp)
    13d0:	b00b883a 	mov	r5,r22
    13d4:	d9800c04 	addi	r6,sp,48
    13d8:	000053c0 	call	53c <__sprint_r>
    13dc:	103e251e 	bne	r2,zero,c74 <___vfprintf_internal_r+0x6e0>
    13e0:	dc800e17 	ldw	r18,56(sp)
    13e4:	dc400d17 	ldw	r17,52(sp)
    13e8:	dcc01904 	addi	r19,sp,100
    13ec:	003e4206 	br	cf8 <___vfprintf_internal_r+0x764>
    13f0:	d9014f17 	ldw	r4,1340(sp)
    13f4:	b00b883a 	mov	r5,r22
    13f8:	d9800c04 	addi	r6,sp,48
    13fc:	000053c0 	call	53c <__sprint_r>
    1400:	103e1c1e 	bne	r2,zero,c74 <___vfprintf_internal_r+0x6e0>
    1404:	dc800e17 	ldw	r18,56(sp)
    1408:	dc400d17 	ldw	r17,52(sp)
    140c:	d8c01904 	addi	r3,sp,100
    1410:	003e2e06 	br	ccc <___vfprintf_internal_r+0x738>
    1414:	d9414c17 	ldw	r5,1328(sp)
    1418:	2880004c 	andi	r2,r5,1
    141c:	1005003a 	cmpeq	r2,r2,zero
    1420:	103dda1e 	bne	r2,zero,b8c <___vfprintf_internal_r+0x5f8>
    1424:	003e9f06 	br	ea4 <___vfprintf_internal_r+0x910>
    1428:	d8c14117 	ldw	r3,1284(sp)
    142c:	9125883a 	add	r18,r18,r4
    1430:	8c400044 	addi	r17,r17,1
    1434:	008001c4 	movi	r2,7
    1438:	a8c00015 	stw	r3,0(r21)
    143c:	a9000115 	stw	r4,4(r21)
    1440:	dc800e15 	stw	r18,56(sp)
    1444:	dc400d15 	stw	r17,52(sp)
    1448:	14426616 	blt	r2,r17,1de4 <___vfprintf_internal_r+0x1850>
    144c:	a8c00204 	addi	r3,r21,8
    1450:	d9414917 	ldw	r5,1316(sp)
    1454:	00800044 	movi	r2,1
    1458:	94800044 	addi	r18,r18,1
    145c:	8c400044 	addi	r17,r17,1
    1460:	18800115 	stw	r2,4(r3)
    1464:	008001c4 	movi	r2,7
    1468:	19400015 	stw	r5,0(r3)
    146c:	dc800e15 	stw	r18,56(sp)
    1470:	dc400d15 	stw	r17,52(sp)
    1474:	2021883a 	mov	r16,r4
    1478:	14425016 	blt	r2,r17,1dbc <___vfprintf_internal_r+0x1828>
    147c:	19400204 	addi	r5,r3,8
    1480:	d9814717 	ldw	r6,1308(sp)
    1484:	8c400044 	addi	r17,r17,1
    1488:	dc400d15 	stw	r17,52(sp)
    148c:	3107c83a 	sub	r3,r6,r4
    1490:	d9014117 	ldw	r4,1284(sp)
    1494:	90e5883a 	add	r18,r18,r3
    1498:	28c00115 	stw	r3,4(r5)
    149c:	8105883a 	add	r2,r16,r4
    14a0:	28800015 	stw	r2,0(r5)
    14a4:	008001c4 	movi	r2,7
    14a8:	dc800e15 	stw	r18,56(sp)
    14ac:	147f1d16 	blt	r2,r17,1124 <___vfprintf_internal_r+0xb90>
    14b0:	28c00204 	addi	r3,r5,8
    14b4:	003db506 	br	b8c <___vfprintf_internal_r+0x5f8>
    14b8:	3c000017 	ldw	r16,0(r7)
    14bc:	3c400117 	ldw	r17,4(r7)
    14c0:	39800204 	addi	r6,r7,8
    14c4:	01000044 	movi	r4,1
    14c8:	d9814015 	stw	r6,1280(sp)
    14cc:	d8000405 	stb	zero,16(sp)
    14d0:	003ebe06 	br	fcc <___vfprintf_internal_r+0xa38>
    14d4:	3c000017 	ldw	r16,0(r7)
    14d8:	3c400117 	ldw	r17,4(r7)
    14dc:	38800204 	addi	r2,r7,8
    14e0:	d8814015 	stw	r2,1280(sp)
    14e4:	003eb706 	br	fc4 <___vfprintf_internal_r+0xa30>
    14e8:	3c000017 	ldw	r16,0(r7)
    14ec:	3c400117 	ldw	r17,4(r7)
    14f0:	39000204 	addi	r4,r7,8
    14f4:	d9014015 	stw	r4,1280(sp)
    14f8:	0009883a 	mov	r4,zero
    14fc:	d8000405 	stb	zero,16(sp)
    1500:	003eb206 	br	fcc <___vfprintf_internal_r+0xa38>
    1504:	38c00017 	ldw	r3,0(r7)
    1508:	39c00104 	addi	r7,r7,4
    150c:	d8c14a15 	stw	r3,1320(sp)
    1510:	1800d10e 	bge	r3,zero,1858 <___vfprintf_internal_r+0x12c4>
    1514:	00c7c83a 	sub	r3,zero,r3
    1518:	d8c14a15 	stw	r3,1320(sp)
    151c:	d9014c17 	ldw	r4,1328(sp)
    1520:	b8c00007 	ldb	r3,0(r23)
    1524:	21000114 	ori	r4,r4,4
    1528:	d9014c15 	stw	r4,1328(sp)
    152c:	003c9806 	br	790 <___vfprintf_internal_r+0x1fc>
    1530:	d9814c17 	ldw	r6,1328(sp)
    1534:	3080080c 	andi	r2,r6,32
    1538:	1001f026 	beq	r2,zero,1cfc <___vfprintf_internal_r+0x1768>
    153c:	d9014b17 	ldw	r4,1324(sp)
    1540:	38800017 	ldw	r2,0(r7)
    1544:	39c00104 	addi	r7,r7,4
    1548:	d9c14015 	stw	r7,1280(sp)
    154c:	2007d7fa 	srai	r3,r4,31
    1550:	d9c14017 	ldw	r7,1280(sp)
    1554:	11000015 	stw	r4,0(r2)
    1558:	10c00115 	stw	r3,4(r2)
    155c:	003c6906 	br	704 <___vfprintf_internal_r+0x170>
    1560:	b8c00007 	ldb	r3,0(r23)
    1564:	00801b04 	movi	r2,108
    1568:	18824f26 	beq	r3,r2,1ea8 <___vfprintf_internal_r+0x1914>
    156c:	d9414c17 	ldw	r5,1328(sp)
    1570:	29400414 	ori	r5,r5,16
    1574:	d9414c15 	stw	r5,1328(sp)
    1578:	003c8506 	br	790 <___vfprintf_internal_r+0x1fc>
    157c:	d9814c17 	ldw	r6,1328(sp)
    1580:	b8c00007 	ldb	r3,0(r23)
    1584:	31800814 	ori	r6,r6,32
    1588:	d9814c15 	stw	r6,1328(sp)
    158c:	003c8006 	br	790 <___vfprintf_internal_r+0x1fc>
    1590:	d8814c17 	ldw	r2,1328(sp)
    1594:	3c000017 	ldw	r16,0(r7)
    1598:	00c01e04 	movi	r3,120
    159c:	10800094 	ori	r2,r2,2
    15a0:	d8814c15 	stw	r2,1328(sp)
    15a4:	39c00104 	addi	r7,r7,4
    15a8:	01400074 	movhi	r5,1
    15ac:	29742404 	addi	r5,r5,-12144
    15b0:	00800c04 	movi	r2,48
    15b4:	0023883a 	mov	r17,zero
    15b8:	01000084 	movi	r4,2
    15bc:	d9c14015 	stw	r7,1280(sp)
    15c0:	d8c14d15 	stw	r3,1332(sp)
    15c4:	d9414415 	stw	r5,1296(sp)
    15c8:	d8800445 	stb	r2,17(sp)
    15cc:	d8c00485 	stb	r3,18(sp)
    15d0:	d8000405 	stb	zero,16(sp)
    15d4:	003e7d06 	br	fcc <___vfprintf_internal_r+0xa38>
    15d8:	d8814c17 	ldw	r2,1328(sp)
    15dc:	b8c00007 	ldb	r3,0(r23)
    15e0:	10801014 	ori	r2,r2,64
    15e4:	d8814c15 	stw	r2,1328(sp)
    15e8:	003c6906 	br	790 <___vfprintf_internal_r+0x1fc>
    15ec:	d9414c17 	ldw	r5,1328(sp)
    15f0:	2880020c 	andi	r2,r5,8
    15f4:	1001df26 	beq	r2,zero,1d74 <___vfprintf_internal_r+0x17e0>
    15f8:	39800017 	ldw	r6,0(r7)
    15fc:	38800204 	addi	r2,r7,8
    1600:	d8814015 	stw	r2,1280(sp)
    1604:	d9814215 	stw	r6,1288(sp)
    1608:	39c00117 	ldw	r7,4(r7)
    160c:	d9c14315 	stw	r7,1292(sp)
    1610:	d9014217 	ldw	r4,1288(sp)
    1614:	d9414317 	ldw	r5,1292(sp)
    1618:	00070e80 	call	70e8 <__isinfd>
    161c:	10021726 	beq	r2,zero,1e7c <___vfprintf_internal_r+0x18e8>
    1620:	d9014217 	ldw	r4,1288(sp)
    1624:	d9414317 	ldw	r5,1292(sp)
    1628:	000d883a 	mov	r6,zero
    162c:	000f883a 	mov	r7,zero
    1630:	00091300 	call	9130 <__ltdf2>
    1634:	1002ca16 	blt	r2,zero,2160 <___vfprintf_internal_r+0x1bcc>
    1638:	d9414d17 	ldw	r5,1332(sp)
    163c:	008011c4 	movi	r2,71
    1640:	11420a16 	blt	r2,r5,1e6c <___vfprintf_internal_r+0x18d8>
    1644:	01800074 	movhi	r6,1
    1648:	31b42904 	addi	r6,r6,-12124
    164c:	d9814115 	stw	r6,1284(sp)
    1650:	d9014c17 	ldw	r4,1328(sp)
    1654:	00c000c4 	movi	r3,3
    1658:	00bfdfc4 	movi	r2,-129
    165c:	2088703a 	and	r4,r4,r2
    1660:	180f883a 	mov	r7,r3
    1664:	d8c14515 	stw	r3,1300(sp)
    1668:	d9014c15 	stw	r4,1328(sp)
    166c:	d8014615 	stw	zero,1304(sp)
    1670:	003e6a06 	br	101c <___vfprintf_internal_r+0xa88>
    1674:	38800017 	ldw	r2,0(r7)
    1678:	00c00044 	movi	r3,1
    167c:	39c00104 	addi	r7,r7,4
    1680:	d9c14015 	stw	r7,1280(sp)
    1684:	d9000f04 	addi	r4,sp,60
    1688:	180f883a 	mov	r7,r3
    168c:	d8c14515 	stw	r3,1300(sp)
    1690:	d9014115 	stw	r4,1284(sp)
    1694:	d8800f05 	stb	r2,60(sp)
    1698:	d8000405 	stb	zero,16(sp)
    169c:	003cac06 	br	950 <___vfprintf_internal_r+0x3bc>
    16a0:	01400074 	movhi	r5,1
    16a4:	29742f04 	addi	r5,r5,-12100
    16a8:	d9414415 	stw	r5,1296(sp)
    16ac:	d9814c17 	ldw	r6,1328(sp)
    16b0:	3080080c 	andi	r2,r6,32
    16b4:	1000f926 	beq	r2,zero,1a9c <___vfprintf_internal_r+0x1508>
    16b8:	3c000017 	ldw	r16,0(r7)
    16bc:	3c400117 	ldw	r17,4(r7)
    16c0:	38800204 	addi	r2,r7,8
    16c4:	d8814015 	stw	r2,1280(sp)
    16c8:	d9414c17 	ldw	r5,1328(sp)
    16cc:	2880004c 	andi	r2,r5,1
    16d0:	1005003a 	cmpeq	r2,r2,zero
    16d4:	1000b31e 	bne	r2,zero,19a4 <___vfprintf_internal_r+0x1410>
    16d8:	8444b03a 	or	r2,r16,r17
    16dc:	1000b126 	beq	r2,zero,19a4 <___vfprintf_internal_r+0x1410>
    16e0:	d9814d17 	ldw	r6,1332(sp)
    16e4:	29400094 	ori	r5,r5,2
    16e8:	00800c04 	movi	r2,48
    16ec:	01000084 	movi	r4,2
    16f0:	d9414c15 	stw	r5,1328(sp)
    16f4:	d8800445 	stb	r2,17(sp)
    16f8:	d9800485 	stb	r6,18(sp)
    16fc:	d8000405 	stb	zero,16(sp)
    1700:	003e3206 	br	fcc <___vfprintf_internal_r+0xa38>
    1704:	01800074 	movhi	r6,1
    1708:	31b42404 	addi	r6,r6,-12144
    170c:	d9814415 	stw	r6,1296(sp)
    1710:	003fe606 	br	16ac <___vfprintf_internal_r+0x1118>
    1714:	00800ac4 	movi	r2,43
    1718:	d8800405 	stb	r2,16(sp)
    171c:	b8c00007 	ldb	r3,0(r23)
    1720:	003c1b06 	br	790 <___vfprintf_internal_r+0x1fc>
    1724:	d8814c17 	ldw	r2,1328(sp)
    1728:	b8c00007 	ldb	r3,0(r23)
    172c:	10800054 	ori	r2,r2,1
    1730:	d8814c15 	stw	r2,1328(sp)
    1734:	003c1606 	br	790 <___vfprintf_internal_r+0x1fc>
    1738:	d8800407 	ldb	r2,16(sp)
    173c:	1000461e 	bne	r2,zero,1858 <___vfprintf_internal_r+0x12c4>
    1740:	00800804 	movi	r2,32
    1744:	d8800405 	stb	r2,16(sp)
    1748:	b8c00007 	ldb	r3,0(r23)
    174c:	003c1006 	br	790 <___vfprintf_internal_r+0x1fc>
    1750:	d9814c17 	ldw	r6,1328(sp)
    1754:	b8c00007 	ldb	r3,0(r23)
    1758:	31800214 	ori	r6,r6,8
    175c:	d9814c15 	stw	r6,1328(sp)
    1760:	003c0b06 	br	790 <___vfprintf_internal_r+0x1fc>
    1764:	0007883a 	mov	r3,zero
    1768:	01000244 	movi	r4,9
    176c:	188002a4 	muli	r2,r3,10
    1770:	b8c00007 	ldb	r3,0(r23)
    1774:	d9814d17 	ldw	r6,1332(sp)
    1778:	bdc00044 	addi	r23,r23,1
    177c:	d8c14d15 	stw	r3,1332(sp)
    1780:	d9414d17 	ldw	r5,1332(sp)
    1784:	3085883a 	add	r2,r6,r2
    1788:	10fff404 	addi	r3,r2,-48
    178c:	28bff404 	addi	r2,r5,-48
    1790:	20bff62e 	bgeu	r4,r2,176c <___vfprintf_internal_r+0x11d8>
    1794:	d8c14a15 	stw	r3,1320(sp)
    1798:	003bff06 	br	798 <___vfprintf_internal_r+0x204>
    179c:	d9414c17 	ldw	r5,1328(sp)
    17a0:	b8c00007 	ldb	r3,0(r23)
    17a4:	29402014 	ori	r5,r5,128
    17a8:	d9414c15 	stw	r5,1328(sp)
    17ac:	003bf806 	br	790 <___vfprintf_internal_r+0x1fc>
    17b0:	b8c00007 	ldb	r3,0(r23)
    17b4:	00800a84 	movi	r2,42
    17b8:	bdc00044 	addi	r23,r23,1
    17bc:	18831526 	beq	r3,r2,2414 <___vfprintf_internal_r+0x1e80>
    17c0:	d8c14d15 	stw	r3,1332(sp)
    17c4:	18bff404 	addi	r2,r3,-48
    17c8:	00c00244 	movi	r3,9
    17cc:	18827836 	bltu	r3,r2,21b0 <___vfprintf_internal_r+0x1c1c>
    17d0:	000d883a 	mov	r6,zero
    17d4:	308002a4 	muli	r2,r6,10
    17d8:	b9800007 	ldb	r6,0(r23)
    17dc:	d9414d17 	ldw	r5,1332(sp)
    17e0:	bdc00044 	addi	r23,r23,1
    17e4:	d9814d15 	stw	r6,1332(sp)
    17e8:	d9014d17 	ldw	r4,1332(sp)
    17ec:	1145883a 	add	r2,r2,r5
    17f0:	11bff404 	addi	r6,r2,-48
    17f4:	20bff404 	addi	r2,r4,-48
    17f8:	18bff62e 	bgeu	r3,r2,17d4 <___vfprintf_internal_r+0x1240>
    17fc:	3027883a 	mov	r19,r6
    1800:	303be50e 	bge	r6,zero,798 <___vfprintf_internal_r+0x204>
    1804:	04ffffc4 	movi	r19,-1
    1808:	003be306 	br	798 <___vfprintf_internal_r+0x204>
    180c:	d8000405 	stb	zero,16(sp)
    1810:	39800017 	ldw	r6,0(r7)
    1814:	39c00104 	addi	r7,r7,4
    1818:	d9c14015 	stw	r7,1280(sp)
    181c:	d9814115 	stw	r6,1284(sp)
    1820:	3001c926 	beq	r6,zero,1f48 <___vfprintf_internal_r+0x19b4>
    1824:	98000e16 	blt	r19,zero,1860 <___vfprintf_internal_r+0x12cc>
    1828:	d9014117 	ldw	r4,1284(sp)
    182c:	000b883a 	mov	r5,zero
    1830:	980d883a 	mov	r6,r19
    1834:	00058040 	call	5804 <memchr>
    1838:	10025926 	beq	r2,zero,21a0 <___vfprintf_internal_r+0x1c0c>
    183c:	d8c14117 	ldw	r3,1284(sp)
    1840:	10cfc83a 	sub	r7,r2,r3
    1844:	99c19e16 	blt	r19,r7,1ec0 <___vfprintf_internal_r+0x192c>
    1848:	d9c14515 	stw	r7,1300(sp)
    184c:	38000916 	blt	r7,zero,1874 <___vfprintf_internal_r+0x12e0>
    1850:	d8014615 	stw	zero,1304(sp)
    1854:	003df106 	br	101c <___vfprintf_internal_r+0xa88>
    1858:	b8c00007 	ldb	r3,0(r23)
    185c:	003bcc06 	br	790 <___vfprintf_internal_r+0x1fc>
    1860:	d9014117 	ldw	r4,1284(sp)
    1864:	00004c80 	call	4c8 <strlen>
    1868:	d8814515 	stw	r2,1300(sp)
    186c:	100f883a 	mov	r7,r2
    1870:	103ff70e 	bge	r2,zero,1850 <___vfprintf_internal_r+0x12bc>
    1874:	d8014515 	stw	zero,1300(sp)
    1878:	d8014615 	stw	zero,1304(sp)
    187c:	003de706 	br	101c <___vfprintf_internal_r+0xa88>
    1880:	20c03fcc 	andi	r3,r4,255
    1884:	00800044 	movi	r2,1
    1888:	18802d26 	beq	r3,r2,1940 <___vfprintf_internal_r+0x13ac>
    188c:	18800e36 	bltu	r3,r2,18c8 <___vfprintf_internal_r+0x1334>
    1890:	00800084 	movi	r2,2
    1894:	1880fa26 	beq	r3,r2,1c80 <___vfprintf_internal_r+0x16ec>
    1898:	01000074 	movhi	r4,1
    189c:	21343404 	addi	r4,r4,-12080
    18a0:	00004c80 	call	4c8 <strlen>
    18a4:	100f883a 	mov	r7,r2
    18a8:	dcc14515 	stw	r19,1300(sp)
    18ac:	9880010e 	bge	r19,r2,18b4 <___vfprintf_internal_r+0x1320>
    18b0:	d8814515 	stw	r2,1300(sp)
    18b4:	00800074 	movhi	r2,1
    18b8:	10b43404 	addi	r2,r2,-12080
    18bc:	dcc14615 	stw	r19,1304(sp)
    18c0:	d8814115 	stw	r2,1284(sp)
    18c4:	003dd506 	br	101c <___vfprintf_internal_r+0xa88>
    18c8:	d9401904 	addi	r5,sp,100
    18cc:	dd000f04 	addi	r20,sp,60
    18d0:	d9414115 	stw	r5,1284(sp)
    18d4:	880a977a 	slli	r5,r17,29
    18d8:	d9814117 	ldw	r6,1284(sp)
    18dc:	8004d0fa 	srli	r2,r16,3
    18e0:	8806d0fa 	srli	r3,r17,3
    18e4:	810001cc 	andi	r4,r16,7
    18e8:	2884b03a 	or	r2,r5,r2
    18ec:	31bfffc4 	addi	r6,r6,-1
    18f0:	21000c04 	addi	r4,r4,48
    18f4:	d9814115 	stw	r6,1284(sp)
    18f8:	10cab03a 	or	r5,r2,r3
    18fc:	31000005 	stb	r4,0(r6)
    1900:	1021883a 	mov	r16,r2
    1904:	1823883a 	mov	r17,r3
    1908:	283ff21e 	bne	r5,zero,18d4 <___vfprintf_internal_r+0x1340>
    190c:	d8c14c17 	ldw	r3,1328(sp)
    1910:	1880004c 	andi	r2,r3,1
    1914:	1005003a 	cmpeq	r2,r2,zero
    1918:	103db91e 	bne	r2,zero,1000 <___vfprintf_internal_r+0xa6c>
    191c:	20803fcc 	andi	r2,r4,255
    1920:	1080201c 	xori	r2,r2,128
    1924:	10bfe004 	addi	r2,r2,-128
    1928:	00c00c04 	movi	r3,48
    192c:	10fdb426 	beq	r2,r3,1000 <___vfprintf_internal_r+0xa6c>
    1930:	31bfffc4 	addi	r6,r6,-1
    1934:	d9814115 	stw	r6,1284(sp)
    1938:	30c00005 	stb	r3,0(r6)
    193c:	003db006 	br	1000 <___vfprintf_internal_r+0xa6c>
    1940:	88800068 	cmpgeui	r2,r17,1
    1944:	10002c1e 	bne	r2,zero,19f8 <___vfprintf_internal_r+0x1464>
    1948:	8800021e 	bne	r17,zero,1954 <___vfprintf_internal_r+0x13c0>
    194c:	00800244 	movi	r2,9
    1950:	14002936 	bltu	r2,r16,19f8 <___vfprintf_internal_r+0x1464>
    1954:	d90018c4 	addi	r4,sp,99
    1958:	dd000f04 	addi	r20,sp,60
    195c:	d9014115 	stw	r4,1284(sp)
    1960:	d9014117 	ldw	r4,1284(sp)
    1964:	80800c04 	addi	r2,r16,48
    1968:	20800005 	stb	r2,0(r4)
    196c:	003da406 	br	1000 <___vfprintf_internal_r+0xa6c>
    1970:	dc400d17 	ldw	r17,52(sp)
    1974:	07000074 	movhi	fp,1
    1978:	e7343b84 	addi	fp,fp,-12050
    197c:	9425883a 	add	r18,r18,r16
    1980:	8c400044 	addi	r17,r17,1
    1984:	008001c4 	movi	r2,7
    1988:	1f000015 	stw	fp,0(r3)
    198c:	1c000115 	stw	r16,4(r3)
    1990:	dc800e15 	stw	r18,56(sp)
    1994:	dc400d15 	stw	r17,52(sp)
    1998:	147de216 	blt	r2,r17,1124 <___vfprintf_internal_r+0xb90>
    199c:	18c00204 	addi	r3,r3,8
    19a0:	003c7a06 	br	b8c <___vfprintf_internal_r+0x5f8>
    19a4:	01000084 	movi	r4,2
    19a8:	d8000405 	stb	zero,16(sp)
    19ac:	003d8706 	br	fcc <___vfprintf_internal_r+0xa38>
    19b0:	d9814c17 	ldw	r6,1328(sp)
    19b4:	30c4703a 	and	r2,r6,r3
    19b8:	1005003a 	cmpeq	r2,r2,zero
    19bc:	103cb926 	beq	r2,zero,ca4 <___vfprintf_internal_r+0x710>
    19c0:	d9014117 	ldw	r4,1284(sp)
    19c4:	94800044 	addi	r18,r18,1
    19c8:	8c400044 	addi	r17,r17,1
    19cc:	008001c4 	movi	r2,7
    19d0:	a9000015 	stw	r4,0(r21)
    19d4:	a8c00115 	stw	r3,4(r21)
    19d8:	dc800e15 	stw	r18,56(sp)
    19dc:	dc400d15 	stw	r17,52(sp)
    19e0:	147e6616 	blt	r2,r17,137c <___vfprintf_internal_r+0xde8>
    19e4:	acc00204 	addi	r19,r21,8
    19e8:	003cd706 	br	d48 <___vfprintf_internal_r+0x7b4>
    19ec:	07000074 	movhi	fp,1
    19f0:	e7343b84 	addi	fp,fp,-12050
    19f4:	003c4f06 	br	b34 <___vfprintf_internal_r+0x5a0>
    19f8:	dd000f04 	addi	r20,sp,60
    19fc:	dc801904 	addi	r18,sp,100
    1a00:	8009883a 	mov	r4,r16
    1a04:	880b883a 	mov	r5,r17
    1a08:	01800284 	movi	r6,10
    1a0c:	000f883a 	mov	r7,zero
    1a10:	0007e400 	call	7e40 <__umoddi3>
    1a14:	12000c04 	addi	r8,r2,48
    1a18:	94bfffc4 	addi	r18,r18,-1
    1a1c:	8009883a 	mov	r4,r16
    1a20:	880b883a 	mov	r5,r17
    1a24:	01800284 	movi	r6,10
    1a28:	000f883a 	mov	r7,zero
    1a2c:	92000005 	stb	r8,0(r18)
    1a30:	00078640 	call	7864 <__udivdi3>
    1a34:	1009883a 	mov	r4,r2
    1a38:	1021883a 	mov	r16,r2
    1a3c:	18800068 	cmpgeui	r2,r3,1
    1a40:	1823883a 	mov	r17,r3
    1a44:	103fee1e 	bne	r2,zero,1a00 <___vfprintf_internal_r+0x146c>
    1a48:	1800021e 	bne	r3,zero,1a54 <___vfprintf_internal_r+0x14c0>
    1a4c:	00800244 	movi	r2,9
    1a50:	113feb36 	bltu	r2,r4,1a00 <___vfprintf_internal_r+0x146c>
    1a54:	94bfffc4 	addi	r18,r18,-1
    1a58:	dc814115 	stw	r18,1284(sp)
    1a5c:	003fc006 	br	1960 <___vfprintf_internal_r+0x13cc>
    1a60:	d9014c17 	ldw	r4,1328(sp)
    1a64:	2080004c 	andi	r2,r4,1
    1a68:	10009a1e 	bne	r2,zero,1cd4 <___vfprintf_internal_r+0x1740>
    1a6c:	d9401904 	addi	r5,sp,100
    1a70:	dd000f04 	addi	r20,sp,60
    1a74:	d9414115 	stw	r5,1284(sp)
    1a78:	003d6106 	br	1000 <___vfprintf_internal_r+0xa6c>
    1a7c:	d9014f17 	ldw	r4,1340(sp)
    1a80:	b00b883a 	mov	r5,r22
    1a84:	d9800c04 	addi	r6,sp,48
    1a88:	000053c0 	call	53c <__sprint_r>
    1a8c:	103c791e 	bne	r2,zero,c74 <___vfprintf_internal_r+0x6e0>
    1a90:	dc800e17 	ldw	r18,56(sp)
    1a94:	d8c01904 	addi	r3,sp,100
    1a98:	003cff06 	br	e98 <___vfprintf_internal_r+0x904>
    1a9c:	d8c14c17 	ldw	r3,1328(sp)
    1aa0:	1880040c 	andi	r2,r3,16
    1aa4:	1000711e 	bne	r2,zero,1c6c <___vfprintf_internal_r+0x16d8>
    1aa8:	d9014c17 	ldw	r4,1328(sp)
    1aac:	2080100c 	andi	r2,r4,64
    1ab0:	10006e26 	beq	r2,zero,1c6c <___vfprintf_internal_r+0x16d8>
    1ab4:	3c00000b 	ldhu	r16,0(r7)
    1ab8:	0023883a 	mov	r17,zero
    1abc:	39c00104 	addi	r7,r7,4
    1ac0:	d9c14015 	stw	r7,1280(sp)
    1ac4:	003f0006 	br	16c8 <___vfprintf_internal_r+0x1134>
    1ac8:	dc400d17 	ldw	r17,52(sp)
    1acc:	07000074 	movhi	fp,1
    1ad0:	e7343b84 	addi	fp,fp,-12050
    1ad4:	9425883a 	add	r18,r18,r16
    1ad8:	8c400044 	addi	r17,r17,1
    1adc:	008001c4 	movi	r2,7
    1ae0:	1f000015 	stw	fp,0(r3)
    1ae4:	1c000115 	stw	r16,4(r3)
    1ae8:	dc800e15 	stw	r18,56(sp)
    1aec:	dc400d15 	stw	r17,52(sp)
    1af0:	147d7616 	blt	r2,r17,10cc <___vfprintf_internal_r+0xb38>
    1af4:	18c00204 	addi	r3,r3,8
    1af8:	003d7b06 	br	10e8 <___vfprintf_internal_r+0xb54>
    1afc:	dc800e17 	ldw	r18,56(sp)
    1b00:	dc400d17 	ldw	r17,52(sp)
    1b04:	07000074 	movhi	fp,1
    1b08:	e7343f84 	addi	fp,fp,-12034
    1b0c:	003bc006 	br	a10 <___vfprintf_internal_r+0x47c>
    1b10:	d9014f17 	ldw	r4,1340(sp)
    1b14:	b00b883a 	mov	r5,r22
    1b18:	d9800c04 	addi	r6,sp,48
    1b1c:	000053c0 	call	53c <__sprint_r>
    1b20:	103c541e 	bne	r2,zero,c74 <___vfprintf_internal_r+0x6e0>
    1b24:	dc800e17 	ldw	r18,56(sp)
    1b28:	d8c01904 	addi	r3,sp,100
    1b2c:	003ce906 	br	ed4 <___vfprintf_internal_r+0x940>
    1b30:	3c000017 	ldw	r16,0(r7)
    1b34:	0009883a 	mov	r4,zero
    1b38:	39c00104 	addi	r7,r7,4
    1b3c:	0023883a 	mov	r17,zero
    1b40:	d9c14015 	stw	r7,1280(sp)
    1b44:	d8000405 	stb	zero,16(sp)
    1b48:	003d2006 	br	fcc <___vfprintf_internal_r+0xa38>
    1b4c:	38800017 	ldw	r2,0(r7)
    1b50:	39c00104 	addi	r7,r7,4
    1b54:	d9c14015 	stw	r7,1280(sp)
    1b58:	1023d7fa 	srai	r17,r2,31
    1b5c:	1021883a 	mov	r16,r2
    1b60:	003d1806 	br	fc4 <___vfprintf_internal_r+0xa30>
    1b64:	3c000017 	ldw	r16,0(r7)
    1b68:	01000044 	movi	r4,1
    1b6c:	39c00104 	addi	r7,r7,4
    1b70:	0023883a 	mov	r17,zero
    1b74:	d9c14015 	stw	r7,1280(sp)
    1b78:	d8000405 	stb	zero,16(sp)
    1b7c:	003d1306 	br	fcc <___vfprintf_internal_r+0xa38>
    1b80:	00800074 	movhi	r2,1
    1b84:	10b43b04 	addi	r2,r2,-12052
    1b88:	94800044 	addi	r18,r18,1
    1b8c:	8c400044 	addi	r17,r17,1
    1b90:	a8800015 	stw	r2,0(r21)
    1b94:	00c00044 	movi	r3,1
    1b98:	008001c4 	movi	r2,7
    1b9c:	a8c00115 	stw	r3,4(r21)
    1ba0:	dc800e15 	stw	r18,56(sp)
    1ba4:	dc400d15 	stw	r17,52(sp)
    1ba8:	1440ca16 	blt	r2,r17,1ed4 <___vfprintf_internal_r+0x1940>
    1bac:	a8c00204 	addi	r3,r21,8
    1bb0:	2000061e 	bne	r4,zero,1bcc <___vfprintf_internal_r+0x1638>
    1bb4:	d9414717 	ldw	r5,1308(sp)
    1bb8:	2800041e 	bne	r5,zero,1bcc <___vfprintf_internal_r+0x1638>
    1bbc:	d9814c17 	ldw	r6,1328(sp)
    1bc0:	3080004c 	andi	r2,r6,1
    1bc4:	1005003a 	cmpeq	r2,r2,zero
    1bc8:	103bf01e 	bne	r2,zero,b8c <___vfprintf_internal_r+0x5f8>
    1bcc:	00800044 	movi	r2,1
    1bd0:	dc400d17 	ldw	r17,52(sp)
    1bd4:	18800115 	stw	r2,4(r3)
    1bd8:	d8814917 	ldw	r2,1316(sp)
    1bdc:	94800044 	addi	r18,r18,1
    1be0:	8c400044 	addi	r17,r17,1
    1be4:	18800015 	stw	r2,0(r3)
    1be8:	008001c4 	movi	r2,7
    1bec:	dc800e15 	stw	r18,56(sp)
    1bf0:	dc400d15 	stw	r17,52(sp)
    1bf4:	1440ca16 	blt	r2,r17,1f20 <___vfprintf_internal_r+0x198c>
    1bf8:	18c00204 	addi	r3,r3,8
    1bfc:	0121c83a 	sub	r16,zero,r4
    1c00:	0400500e 	bge	zero,r16,1d44 <___vfprintf_internal_r+0x17b0>
    1c04:	00800404 	movi	r2,16
    1c08:	1400800e 	bge	r2,r16,1e0c <___vfprintf_internal_r+0x1878>
    1c0c:	1027883a 	mov	r19,r2
    1c10:	07000074 	movhi	fp,1
    1c14:	e7343b84 	addi	fp,fp,-12050
    1c18:	050001c4 	movi	r20,7
    1c1c:	00000306 	br	1c2c <___vfprintf_internal_r+0x1698>
    1c20:	18c00204 	addi	r3,r3,8
    1c24:	843ffc04 	addi	r16,r16,-16
    1c28:	9c007a0e 	bge	r19,r16,1e14 <___vfprintf_internal_r+0x1880>
    1c2c:	94800404 	addi	r18,r18,16
    1c30:	8c400044 	addi	r17,r17,1
    1c34:	1f000015 	stw	fp,0(r3)
    1c38:	1cc00115 	stw	r19,4(r3)
    1c3c:	dc800e15 	stw	r18,56(sp)
    1c40:	dc400d15 	stw	r17,52(sp)
    1c44:	a47ff60e 	bge	r20,r17,1c20 <___vfprintf_internal_r+0x168c>
    1c48:	d9014f17 	ldw	r4,1340(sp)
    1c4c:	b00b883a 	mov	r5,r22
    1c50:	d9800c04 	addi	r6,sp,48
    1c54:	000053c0 	call	53c <__sprint_r>
    1c58:	103c061e 	bne	r2,zero,c74 <___vfprintf_internal_r+0x6e0>
    1c5c:	dc800e17 	ldw	r18,56(sp)
    1c60:	dc400d17 	ldw	r17,52(sp)
    1c64:	d8c01904 	addi	r3,sp,100
    1c68:	003fee06 	br	1c24 <___vfprintf_internal_r+0x1690>
    1c6c:	3c000017 	ldw	r16,0(r7)
    1c70:	0023883a 	mov	r17,zero
    1c74:	39c00104 	addi	r7,r7,4
    1c78:	d9c14015 	stw	r7,1280(sp)
    1c7c:	003e9206 	br	16c8 <___vfprintf_internal_r+0x1134>
    1c80:	d9401904 	addi	r5,sp,100
    1c84:	dd000f04 	addi	r20,sp,60
    1c88:	d9414115 	stw	r5,1284(sp)
    1c8c:	d9814417 	ldw	r6,1296(sp)
    1c90:	880a973a 	slli	r5,r17,28
    1c94:	8004d13a 	srli	r2,r16,4
    1c98:	810003cc 	andi	r4,r16,15
    1c9c:	3109883a 	add	r4,r6,r4
    1ca0:	2884b03a 	or	r2,r5,r2
    1ca4:	21400003 	ldbu	r5,0(r4)
    1ca8:	d9014117 	ldw	r4,1284(sp)
    1cac:	8806d13a 	srli	r3,r17,4
    1cb0:	1021883a 	mov	r16,r2
    1cb4:	213fffc4 	addi	r4,r4,-1
    1cb8:	d9014115 	stw	r4,1284(sp)
    1cbc:	d9814117 	ldw	r6,1284(sp)
    1cc0:	10c8b03a 	or	r4,r2,r3
    1cc4:	1823883a 	mov	r17,r3
    1cc8:	31400005 	stb	r5,0(r6)
    1ccc:	203fef1e 	bne	r4,zero,1c8c <___vfprintf_internal_r+0x16f8>
    1cd0:	003ccb06 	br	1000 <___vfprintf_internal_r+0xa6c>
    1cd4:	00800c04 	movi	r2,48
    1cd8:	d98018c4 	addi	r6,sp,99
    1cdc:	dd000f04 	addi	r20,sp,60
    1ce0:	d88018c5 	stb	r2,99(sp)
    1ce4:	d9814115 	stw	r6,1284(sp)
    1ce8:	003cc506 	br	1000 <___vfprintf_internal_r+0xa6c>
    1cec:	dc400d17 	ldw	r17,52(sp)
    1cf0:	07000074 	movhi	fp,1
    1cf4:	e7343f84 	addi	fp,fp,-12034
    1cf8:	003bc706 	br	c18 <___vfprintf_internal_r+0x684>
    1cfc:	d9414c17 	ldw	r5,1328(sp)
    1d00:	2880040c 	andi	r2,r5,16
    1d04:	10007c26 	beq	r2,zero,1ef8 <___vfprintf_internal_r+0x1964>
    1d08:	38800017 	ldw	r2,0(r7)
    1d0c:	39c00104 	addi	r7,r7,4
    1d10:	d9c14015 	stw	r7,1280(sp)
    1d14:	d9814b17 	ldw	r6,1324(sp)
    1d18:	d9c14017 	ldw	r7,1280(sp)
    1d1c:	11800015 	stw	r6,0(r2)
    1d20:	003a7806 	br	704 <___vfprintf_internal_r+0x170>
    1d24:	d9014f17 	ldw	r4,1340(sp)
    1d28:	b00b883a 	mov	r5,r22
    1d2c:	d9800c04 	addi	r6,sp,48
    1d30:	000053c0 	call	53c <__sprint_r>
    1d34:	103bcf1e 	bne	r2,zero,c74 <___vfprintf_internal_r+0x6e0>
    1d38:	dc800e17 	ldw	r18,56(sp)
    1d3c:	dc400d17 	ldw	r17,52(sp)
    1d40:	d8c01904 	addi	r3,sp,100
    1d44:	d9014717 	ldw	r4,1308(sp)
    1d48:	d9414117 	ldw	r5,1284(sp)
    1d4c:	8c400044 	addi	r17,r17,1
    1d50:	9125883a 	add	r18,r18,r4
    1d54:	008001c4 	movi	r2,7
    1d58:	19400015 	stw	r5,0(r3)
    1d5c:	19000115 	stw	r4,4(r3)
    1d60:	dc800e15 	stw	r18,56(sp)
    1d64:	dc400d15 	stw	r17,52(sp)
    1d68:	147cee16 	blt	r2,r17,1124 <___vfprintf_internal_r+0xb90>
    1d6c:	18c00204 	addi	r3,r3,8
    1d70:	003b8606 	br	b8c <___vfprintf_internal_r+0x5f8>
    1d74:	38c00017 	ldw	r3,0(r7)
    1d78:	39000204 	addi	r4,r7,8
    1d7c:	d9014015 	stw	r4,1280(sp)
    1d80:	d8c14215 	stw	r3,1288(sp)
    1d84:	39c00117 	ldw	r7,4(r7)
    1d88:	d9c14315 	stw	r7,1292(sp)
    1d8c:	003e2006 	br	1610 <___vfprintf_internal_r+0x107c>
    1d90:	0005883a 	mov	r2,zero
    1d94:	1409c83a 	sub	r4,r2,r16
    1d98:	1105803a 	cmpltu	r2,r2,r4
    1d9c:	044bc83a 	sub	r5,zero,r17
    1da0:	2885c83a 	sub	r2,r5,r2
    1da4:	2021883a 	mov	r16,r4
    1da8:	1023883a 	mov	r17,r2
    1dac:	01000044 	movi	r4,1
    1db0:	00800b44 	movi	r2,45
    1db4:	d8800405 	stb	r2,16(sp)
    1db8:	003c8406 	br	fcc <___vfprintf_internal_r+0xa38>
    1dbc:	d9014f17 	ldw	r4,1340(sp)
    1dc0:	b00b883a 	mov	r5,r22
    1dc4:	d9800c04 	addi	r6,sp,48
    1dc8:	000053c0 	call	53c <__sprint_r>
    1dcc:	103ba91e 	bne	r2,zero,c74 <___vfprintf_internal_r+0x6e0>
    1dd0:	dc800e17 	ldw	r18,56(sp)
    1dd4:	dc400d17 	ldw	r17,52(sp)
    1dd8:	d9000517 	ldw	r4,20(sp)
    1ddc:	d9401904 	addi	r5,sp,100
    1de0:	003da706 	br	1480 <___vfprintf_internal_r+0xeec>
    1de4:	d9014f17 	ldw	r4,1340(sp)
    1de8:	b00b883a 	mov	r5,r22
    1dec:	d9800c04 	addi	r6,sp,48
    1df0:	000053c0 	call	53c <__sprint_r>
    1df4:	103b9f1e 	bne	r2,zero,c74 <___vfprintf_internal_r+0x6e0>
    1df8:	dc800e17 	ldw	r18,56(sp)
    1dfc:	dc400d17 	ldw	r17,52(sp)
    1e00:	d9000517 	ldw	r4,20(sp)
    1e04:	d8c01904 	addi	r3,sp,100
    1e08:	003d9106 	br	1450 <___vfprintf_internal_r+0xebc>
    1e0c:	07000074 	movhi	fp,1
    1e10:	e7343b84 	addi	fp,fp,-12050
    1e14:	9425883a 	add	r18,r18,r16
    1e18:	8c400044 	addi	r17,r17,1
    1e1c:	008001c4 	movi	r2,7
    1e20:	1f000015 	stw	fp,0(r3)
    1e24:	1c000115 	stw	r16,4(r3)
    1e28:	dc800e15 	stw	r18,56(sp)
    1e2c:	dc400d15 	stw	r17,52(sp)
    1e30:	147fbc16 	blt	r2,r17,1d24 <___vfprintf_internal_r+0x1790>
    1e34:	18c00204 	addi	r3,r3,8
    1e38:	003fc206 	br	1d44 <___vfprintf_internal_r+0x17b0>
    1e3c:	d9014f17 	ldw	r4,1340(sp)
    1e40:	b00b883a 	mov	r5,r22
    1e44:	d9800c04 	addi	r6,sp,48
    1e48:	000053c0 	call	53c <__sprint_r>
    1e4c:	103b891e 	bne	r2,zero,c74 <___vfprintf_internal_r+0x6e0>
    1e50:	dc800e17 	ldw	r18,56(sp)
    1e54:	d9000517 	ldw	r4,20(sp)
    1e58:	d8c01904 	addi	r3,sp,100
    1e5c:	003d0206 	br	1268 <___vfprintf_internal_r+0xcd4>
    1e60:	07000074 	movhi	fp,1
    1e64:	e7343b84 	addi	fp,fp,-12050
    1e68:	003be406 	br	dfc <___vfprintf_internal_r+0x868>
    1e6c:	00800074 	movhi	r2,1
    1e70:	10b42a04 	addi	r2,r2,-12120
    1e74:	d8814115 	stw	r2,1284(sp)
    1e78:	003df506 	br	1650 <___vfprintf_internal_r+0x10bc>
    1e7c:	d9014217 	ldw	r4,1288(sp)
    1e80:	d9414317 	ldw	r5,1292(sp)
    1e84:	00071280 	call	7128 <__isnand>
    1e88:	10003926 	beq	r2,zero,1f70 <___vfprintf_internal_r+0x19dc>
    1e8c:	d9414d17 	ldw	r5,1332(sp)
    1e90:	008011c4 	movi	r2,71
    1e94:	1140ce16 	blt	r2,r5,21d0 <___vfprintf_internal_r+0x1c3c>
    1e98:	01800074 	movhi	r6,1
    1e9c:	31b42b04 	addi	r6,r6,-12116
    1ea0:	d9814115 	stw	r6,1284(sp)
    1ea4:	003dea06 	br	1650 <___vfprintf_internal_r+0x10bc>
    1ea8:	d9014c17 	ldw	r4,1328(sp)
    1eac:	bdc00044 	addi	r23,r23,1
    1eb0:	b8c00007 	ldb	r3,0(r23)
    1eb4:	21000814 	ori	r4,r4,32
    1eb8:	d9014c15 	stw	r4,1328(sp)
    1ebc:	003a3406 	br	790 <___vfprintf_internal_r+0x1fc>
    1ec0:	dcc14515 	stw	r19,1300(sp)
    1ec4:	98011016 	blt	r19,zero,2308 <___vfprintf_internal_r+0x1d74>
    1ec8:	980f883a 	mov	r7,r19
    1ecc:	d8014615 	stw	zero,1304(sp)
    1ed0:	003c5206 	br	101c <___vfprintf_internal_r+0xa88>
    1ed4:	d9014f17 	ldw	r4,1340(sp)
    1ed8:	b00b883a 	mov	r5,r22
    1edc:	d9800c04 	addi	r6,sp,48
    1ee0:	000053c0 	call	53c <__sprint_r>
    1ee4:	103b631e 	bne	r2,zero,c74 <___vfprintf_internal_r+0x6e0>
    1ee8:	dc800e17 	ldw	r18,56(sp)
    1eec:	d9000517 	ldw	r4,20(sp)
    1ef0:	d8c01904 	addi	r3,sp,100
    1ef4:	003f2e06 	br	1bb0 <___vfprintf_internal_r+0x161c>
    1ef8:	d8c14c17 	ldw	r3,1328(sp)
    1efc:	1880100c 	andi	r2,r3,64
    1f00:	1000a026 	beq	r2,zero,2184 <___vfprintf_internal_r+0x1bf0>
    1f04:	38800017 	ldw	r2,0(r7)
    1f08:	39c00104 	addi	r7,r7,4
    1f0c:	d9c14015 	stw	r7,1280(sp)
    1f10:	d9014b17 	ldw	r4,1324(sp)
    1f14:	d9c14017 	ldw	r7,1280(sp)
    1f18:	1100000d 	sth	r4,0(r2)
    1f1c:	0039f906 	br	704 <___vfprintf_internal_r+0x170>
    1f20:	d9014f17 	ldw	r4,1340(sp)
    1f24:	b00b883a 	mov	r5,r22
    1f28:	d9800c04 	addi	r6,sp,48
    1f2c:	000053c0 	call	53c <__sprint_r>
    1f30:	103b501e 	bne	r2,zero,c74 <___vfprintf_internal_r+0x6e0>
    1f34:	dc800e17 	ldw	r18,56(sp)
    1f38:	dc400d17 	ldw	r17,52(sp)
    1f3c:	d9000517 	ldw	r4,20(sp)
    1f40:	d8c01904 	addi	r3,sp,100
    1f44:	003f2d06 	br	1bfc <___vfprintf_internal_r+0x1668>
    1f48:	00800184 	movi	r2,6
    1f4c:	14c09a36 	bltu	r2,r19,21b8 <___vfprintf_internal_r+0x1c24>
    1f50:	dcc14515 	stw	r19,1300(sp)
    1f54:	9800010e 	bge	r19,zero,1f5c <___vfprintf_internal_r+0x19c8>
    1f58:	d8014515 	stw	zero,1300(sp)
    1f5c:	00800074 	movhi	r2,1
    1f60:	10b42d04 	addi	r2,r2,-12108
    1f64:	980f883a 	mov	r7,r19
    1f68:	d8814115 	stw	r2,1284(sp)
    1f6c:	003a7806 	br	950 <___vfprintf_internal_r+0x3bc>
    1f70:	00bfffc4 	movi	r2,-1
    1f74:	9880e226 	beq	r19,r2,2300 <___vfprintf_internal_r+0x1d6c>
    1f78:	d9414d17 	ldw	r5,1332(sp)
    1f7c:	008019c4 	movi	r2,103
    1f80:	2880dc26 	beq	r5,r2,22f4 <___vfprintf_internal_r+0x1d60>
    1f84:	008011c4 	movi	r2,71
    1f88:	2880da26 	beq	r5,r2,22f4 <___vfprintf_internal_r+0x1d60>
    1f8c:	d9414c17 	ldw	r5,1328(sp)
    1f90:	d9014317 	ldw	r4,1292(sp)
    1f94:	d9814217 	ldw	r6,1288(sp)
    1f98:	29404014 	ori	r5,r5,256
    1f9c:	d9414c15 	stw	r5,1328(sp)
    1fa0:	2000cc16 	blt	r4,zero,22d4 <___vfprintf_internal_r+0x1d40>
    1fa4:	3021883a 	mov	r16,r6
    1fa8:	2023883a 	mov	r17,r4
    1fac:	0039883a 	mov	fp,zero
    1fb0:	d9414d17 	ldw	r5,1332(sp)
    1fb4:	00801984 	movi	r2,102
    1fb8:	2880b726 	beq	r5,r2,2298 <___vfprintf_internal_r+0x1d04>
    1fbc:	00801184 	movi	r2,70
    1fc0:	2880b526 	beq	r5,r2,2298 <___vfprintf_internal_r+0x1d04>
    1fc4:	00801944 	movi	r2,101
    1fc8:	2880c826 	beq	r5,r2,22ec <___vfprintf_internal_r+0x1d58>
    1fcc:	00801144 	movi	r2,69
    1fd0:	2880c626 	beq	r5,r2,22ec <___vfprintf_internal_r+0x1d58>
    1fd4:	9829883a 	mov	r20,r19
    1fd8:	d9014f17 	ldw	r4,1340(sp)
    1fdc:	d8800504 	addi	r2,sp,20
    1fe0:	880d883a 	mov	r6,r17
    1fe4:	d8800115 	stw	r2,4(sp)
    1fe8:	d8c00604 	addi	r3,sp,24
    1fec:	d8800704 	addi	r2,sp,28
    1ff0:	800b883a 	mov	r5,r16
    1ff4:	01c00084 	movi	r7,2
    1ff8:	d8c00215 	stw	r3,8(sp)
    1ffc:	d8800315 	stw	r2,12(sp)
    2000:	dd000015 	stw	r20,0(sp)
    2004:	000296c0 	call	296c <_dtoa_r>
    2008:	d9814d17 	ldw	r6,1332(sp)
    200c:	d8814115 	stw	r2,1284(sp)
    2010:	008019c4 	movi	r2,103
    2014:	30809526 	beq	r6,r2,226c <___vfprintf_internal_r+0x1cd8>
    2018:	d8c14d17 	ldw	r3,1332(sp)
    201c:	008011c4 	movi	r2,71
    2020:	18809226 	beq	r3,r2,226c <___vfprintf_internal_r+0x1cd8>
    2024:	d9414117 	ldw	r5,1284(sp)
    2028:	d9814d17 	ldw	r6,1332(sp)
    202c:	00801984 	movi	r2,102
    2030:	2d25883a 	add	r18,r5,r20
    2034:	30808626 	beq	r6,r2,2250 <___vfprintf_internal_r+0x1cbc>
    2038:	00801184 	movi	r2,70
    203c:	30808426 	beq	r6,r2,2250 <___vfprintf_internal_r+0x1cbc>
    2040:	000d883a 	mov	r6,zero
    2044:	000f883a 	mov	r7,zero
    2048:	880b883a 	mov	r5,r17
    204c:	8009883a 	mov	r4,r16
    2050:	0008f100 	call	8f10 <__eqdf2>
    2054:	1000751e 	bne	r2,zero,222c <___vfprintf_internal_r+0x1c98>
    2058:	9005883a 	mov	r2,r18
    205c:	dc800715 	stw	r18,28(sp)
    2060:	d9014117 	ldw	r4,1284(sp)
    2064:	d9414d17 	ldw	r5,1332(sp)
    2068:	00c019c4 	movi	r3,103
    206c:	1125c83a 	sub	r18,r2,r4
    2070:	28c06826 	beq	r5,r3,2214 <___vfprintf_internal_r+0x1c80>
    2074:	008011c4 	movi	r2,71
    2078:	28806626 	beq	r5,r2,2214 <___vfprintf_internal_r+0x1c80>
    207c:	d9000517 	ldw	r4,20(sp)
    2080:	d8c14d17 	ldw	r3,1332(sp)
    2084:	00801944 	movi	r2,101
    2088:	10c05516 	blt	r2,r3,21e0 <___vfprintf_internal_r+0x1c4c>
    208c:	213fffc4 	addi	r4,r4,-1
    2090:	d9000515 	stw	r4,20(sp)
    2094:	d8c00805 	stb	r3,32(sp)
    2098:	2021883a 	mov	r16,r4
    209c:	2000c116 	blt	r4,zero,23a4 <___vfprintf_internal_r+0x1e10>
    20a0:	00800ac4 	movi	r2,43
    20a4:	d8800845 	stb	r2,33(sp)
    20a8:	00800244 	movi	r2,9
    20ac:	1400af0e 	bge	r2,r16,236c <___vfprintf_internal_r+0x1dd8>
    20b0:	1027883a 	mov	r19,r2
    20b4:	dc400b84 	addi	r17,sp,46
    20b8:	8009883a 	mov	r4,r16
    20bc:	01400284 	movi	r5,10
    20c0:	00095f80 	call	95f8 <__modsi3>
    20c4:	10800c04 	addi	r2,r2,48
    20c8:	8c7fffc4 	addi	r17,r17,-1
    20cc:	8009883a 	mov	r4,r16
    20d0:	01400284 	movi	r5,10
    20d4:	88800005 	stb	r2,0(r17)
    20d8:	00095980 	call	9598 <__divsi3>
    20dc:	1021883a 	mov	r16,r2
    20e0:	98bff516 	blt	r19,r2,20b8 <___vfprintf_internal_r+0x1b24>
    20e4:	10c00c04 	addi	r3,r2,48
    20e8:	d88009c4 	addi	r2,sp,39
    20ec:	108001c4 	addi	r2,r2,7
    20f0:	897fffc4 	addi	r5,r17,-1
    20f4:	88ffffc5 	stb	r3,-1(r17)
    20f8:	2880a72e 	bgeu	r5,r2,2398 <___vfprintf_internal_r+0x1e04>
    20fc:	1009883a 	mov	r4,r2
    2100:	d9800804 	addi	r6,sp,32
    2104:	d8c00884 	addi	r3,sp,34
    2108:	28800003 	ldbu	r2,0(r5)
    210c:	29400044 	addi	r5,r5,1
    2110:	18800005 	stb	r2,0(r3)
    2114:	18c00044 	addi	r3,r3,1
    2118:	293ffb36 	bltu	r5,r4,2108 <___vfprintf_internal_r+0x1b74>
    211c:	1987c83a 	sub	r3,r3,r6
    2120:	00800044 	movi	r2,1
    2124:	d8c14815 	stw	r3,1312(sp)
    2128:	90cf883a 	add	r7,r18,r3
    212c:	1480960e 	bge	r2,r18,2388 <___vfprintf_internal_r+0x1df4>
    2130:	39c00044 	addi	r7,r7,1
    2134:	d9c14515 	stw	r7,1300(sp)
    2138:	38003416 	blt	r7,zero,220c <___vfprintf_internal_r+0x1c78>
    213c:	e0803fcc 	andi	r2,fp,255
    2140:	1080201c 	xori	r2,r2,128
    2144:	10bfe004 	addi	r2,r2,-128
    2148:	10004e26 	beq	r2,zero,2284 <___vfprintf_internal_r+0x1cf0>
    214c:	00800b44 	movi	r2,45
    2150:	dc814715 	stw	r18,1308(sp)
    2154:	d8014615 	stw	zero,1304(sp)
    2158:	d8800405 	stb	r2,16(sp)
    215c:	003bb106 	br	1024 <___vfprintf_internal_r+0xa90>
    2160:	00800b44 	movi	r2,45
    2164:	d8800405 	stb	r2,16(sp)
    2168:	003d3306 	br	1638 <___vfprintf_internal_r+0x10a4>
    216c:	d9014f17 	ldw	r4,1340(sp)
    2170:	b00b883a 	mov	r5,r22
    2174:	d9800c04 	addi	r6,sp,48
    2178:	000053c0 	call	53c <__sprint_r>
    217c:	103abd1e 	bne	r2,zero,c74 <___vfprintf_internal_r+0x6e0>
    2180:	003abb06 	br	c70 <___vfprintf_internal_r+0x6dc>
    2184:	38800017 	ldw	r2,0(r7)
    2188:	39c00104 	addi	r7,r7,4
    218c:	d9c14015 	stw	r7,1280(sp)
    2190:	d9414b17 	ldw	r5,1324(sp)
    2194:	d9c14017 	ldw	r7,1280(sp)
    2198:	11400015 	stw	r5,0(r2)
    219c:	00395906 	br	704 <___vfprintf_internal_r+0x170>
    21a0:	980f883a 	mov	r7,r19
    21a4:	dcc14515 	stw	r19,1300(sp)
    21a8:	d8014615 	stw	zero,1304(sp)
    21ac:	003b9b06 	br	101c <___vfprintf_internal_r+0xa88>
    21b0:	0027883a 	mov	r19,zero
    21b4:	00397806 	br	798 <___vfprintf_internal_r+0x204>
    21b8:	00c00074 	movhi	r3,1
    21bc:	18f42d04 	addi	r3,r3,-12108
    21c0:	100f883a 	mov	r7,r2
    21c4:	d8814515 	stw	r2,1300(sp)
    21c8:	d8c14115 	stw	r3,1284(sp)
    21cc:	0039e006 	br	950 <___vfprintf_internal_r+0x3bc>
    21d0:	00800074 	movhi	r2,1
    21d4:	10b42c04 	addi	r2,r2,-12112
    21d8:	d8814115 	stw	r2,1284(sp)
    21dc:	003d1c06 	br	1650 <___vfprintf_internal_r+0x10bc>
    21e0:	d9414d17 	ldw	r5,1332(sp)
    21e4:	00801984 	movi	r2,102
    21e8:	28804926 	beq	r5,r2,2310 <___vfprintf_internal_r+0x1d7c>
    21ec:	200f883a 	mov	r7,r4
    21f0:	24805716 	blt	r4,r18,2350 <___vfprintf_internal_r+0x1dbc>
    21f4:	d9414c17 	ldw	r5,1328(sp)
    21f8:	2880004c 	andi	r2,r5,1
    21fc:	10000126 	beq	r2,zero,2204 <___vfprintf_internal_r+0x1c70>
    2200:	21c00044 	addi	r7,r4,1
    2204:	d9c14515 	stw	r7,1300(sp)
    2208:	383fcc0e 	bge	r7,zero,213c <___vfprintf_internal_r+0x1ba8>
    220c:	d8014515 	stw	zero,1300(sp)
    2210:	003fca06 	br	213c <___vfprintf_internal_r+0x1ba8>
    2214:	d9000517 	ldw	r4,20(sp)
    2218:	00bfff04 	movi	r2,-4
    221c:	1100480e 	bge	r2,r4,2340 <___vfprintf_internal_r+0x1dac>
    2220:	99004716 	blt	r19,r4,2340 <___vfprintf_internal_r+0x1dac>
    2224:	d8c14d15 	stw	r3,1332(sp)
    2228:	003ff006 	br	21ec <___vfprintf_internal_r+0x1c58>
    222c:	d8800717 	ldw	r2,28(sp)
    2230:	14bf8b2e 	bgeu	r2,r18,2060 <___vfprintf_internal_r+0x1acc>
    2234:	9007883a 	mov	r3,r18
    2238:	01000c04 	movi	r4,48
    223c:	11000005 	stb	r4,0(r2)
    2240:	10800044 	addi	r2,r2,1
    2244:	d8800715 	stw	r2,28(sp)
    2248:	18bffc1e 	bne	r3,r2,223c <___vfprintf_internal_r+0x1ca8>
    224c:	003f8406 	br	2060 <___vfprintf_internal_r+0x1acc>
    2250:	d8814117 	ldw	r2,1284(sp)
    2254:	10c00007 	ldb	r3,0(r2)
    2258:	00800c04 	movi	r2,48
    225c:	18805b26 	beq	r3,r2,23cc <___vfprintf_internal_r+0x1e38>
    2260:	d9000517 	ldw	r4,20(sp)
    2264:	9125883a 	add	r18,r18,r4
    2268:	003f7506 	br	2040 <___vfprintf_internal_r+0x1aac>
    226c:	d9014c17 	ldw	r4,1328(sp)
    2270:	2080004c 	andi	r2,r4,1
    2274:	1005003a 	cmpeq	r2,r2,zero
    2278:	103f6a26 	beq	r2,zero,2024 <___vfprintf_internal_r+0x1a90>
    227c:	d8800717 	ldw	r2,28(sp)
    2280:	003f7706 	br	2060 <___vfprintf_internal_r+0x1acc>
    2284:	d9c14515 	stw	r7,1300(sp)
    2288:	38004d16 	blt	r7,zero,23c0 <___vfprintf_internal_r+0x1e2c>
    228c:	dc814715 	stw	r18,1308(sp)
    2290:	d8014615 	stw	zero,1304(sp)
    2294:	003b6106 	br	101c <___vfprintf_internal_r+0xa88>
    2298:	d9014f17 	ldw	r4,1340(sp)
    229c:	d8800504 	addi	r2,sp,20
    22a0:	d8800115 	stw	r2,4(sp)
    22a4:	d8c00604 	addi	r3,sp,24
    22a8:	d8800704 	addi	r2,sp,28
    22ac:	800b883a 	mov	r5,r16
    22b0:	880d883a 	mov	r6,r17
    22b4:	01c000c4 	movi	r7,3
    22b8:	d8c00215 	stw	r3,8(sp)
    22bc:	d8800315 	stw	r2,12(sp)
    22c0:	dcc00015 	stw	r19,0(sp)
    22c4:	9829883a 	mov	r20,r19
    22c8:	000296c0 	call	296c <_dtoa_r>
    22cc:	d8814115 	stw	r2,1284(sp)
    22d0:	003f5106 	br	2018 <___vfprintf_internal_r+0x1a84>
    22d4:	d8c14217 	ldw	r3,1288(sp)
    22d8:	d9014317 	ldw	r4,1292(sp)
    22dc:	07000b44 	movi	fp,45
    22e0:	1821883a 	mov	r16,r3
    22e4:	2460003c 	xorhi	r17,r4,32768
    22e8:	003f3106 	br	1fb0 <___vfprintf_internal_r+0x1a1c>
    22ec:	9d000044 	addi	r20,r19,1
    22f0:	003f3906 	br	1fd8 <___vfprintf_internal_r+0x1a44>
    22f4:	983f251e 	bne	r19,zero,1f8c <___vfprintf_internal_r+0x19f8>
    22f8:	04c00044 	movi	r19,1
    22fc:	003f2306 	br	1f8c <___vfprintf_internal_r+0x19f8>
    2300:	04c00184 	movi	r19,6
    2304:	003f2106 	br	1f8c <___vfprintf_internal_r+0x19f8>
    2308:	d8014515 	stw	zero,1300(sp)
    230c:	003eee06 	br	1ec8 <___vfprintf_internal_r+0x1934>
    2310:	200f883a 	mov	r7,r4
    2314:	0100370e 	bge	zero,r4,23f4 <___vfprintf_internal_r+0x1e60>
    2318:	9800031e 	bne	r19,zero,2328 <___vfprintf_internal_r+0x1d94>
    231c:	d9814c17 	ldw	r6,1328(sp)
    2320:	3080004c 	andi	r2,r6,1
    2324:	103fb726 	beq	r2,zero,2204 <___vfprintf_internal_r+0x1c70>
    2328:	20800044 	addi	r2,r4,1
    232c:	98a7883a 	add	r19,r19,r2
    2330:	dcc14515 	stw	r19,1300(sp)
    2334:	980f883a 	mov	r7,r19
    2338:	983f800e 	bge	r19,zero,213c <___vfprintf_internal_r+0x1ba8>
    233c:	003fb306 	br	220c <___vfprintf_internal_r+0x1c78>
    2340:	d9814d17 	ldw	r6,1332(sp)
    2344:	31bfff84 	addi	r6,r6,-2
    2348:	d9814d15 	stw	r6,1332(sp)
    234c:	003f4c06 	br	2080 <___vfprintf_internal_r+0x1aec>
    2350:	0100180e 	bge	zero,r4,23b4 <___vfprintf_internal_r+0x1e20>
    2354:	00800044 	movi	r2,1
    2358:	1485883a 	add	r2,r2,r18
    235c:	d8814515 	stw	r2,1300(sp)
    2360:	100f883a 	mov	r7,r2
    2364:	103f750e 	bge	r2,zero,213c <___vfprintf_internal_r+0x1ba8>
    2368:	003fa806 	br	220c <___vfprintf_internal_r+0x1c78>
    236c:	80c00c04 	addi	r3,r16,48
    2370:	00800c04 	movi	r2,48
    2374:	d8c008c5 	stb	r3,35(sp)
    2378:	d9800804 	addi	r6,sp,32
    237c:	d8c00904 	addi	r3,sp,36
    2380:	d8800885 	stb	r2,34(sp)
    2384:	003f6506 	br	211c <___vfprintf_internal_r+0x1b88>
    2388:	d9014c17 	ldw	r4,1328(sp)
    238c:	2084703a 	and	r2,r4,r2
    2390:	103f9c26 	beq	r2,zero,2204 <___vfprintf_internal_r+0x1c70>
    2394:	003f6606 	br	2130 <___vfprintf_internal_r+0x1b9c>
    2398:	d9800804 	addi	r6,sp,32
    239c:	d8c00884 	addi	r3,sp,34
    23a0:	003f5e06 	br	211c <___vfprintf_internal_r+0x1b88>
    23a4:	00800b44 	movi	r2,45
    23a8:	0121c83a 	sub	r16,zero,r4
    23ac:	d8800845 	stb	r2,33(sp)
    23b0:	003f3d06 	br	20a8 <___vfprintf_internal_r+0x1b14>
    23b4:	00800084 	movi	r2,2
    23b8:	1105c83a 	sub	r2,r2,r4
    23bc:	003fe606 	br	2358 <___vfprintf_internal_r+0x1dc4>
    23c0:	d8014515 	stw	zero,1300(sp)
    23c4:	dc814715 	stw	r18,1308(sp)
    23c8:	003fb106 	br	2290 <___vfprintf_internal_r+0x1cfc>
    23cc:	000d883a 	mov	r6,zero
    23d0:	000f883a 	mov	r7,zero
    23d4:	8009883a 	mov	r4,r16
    23d8:	880b883a 	mov	r5,r17
    23dc:	0008f980 	call	8f98 <__nedf2>
    23e0:	103f9f26 	beq	r2,zero,2260 <___vfprintf_internal_r+0x1ccc>
    23e4:	00800044 	movi	r2,1
    23e8:	1509c83a 	sub	r4,r2,r20
    23ec:	d9000515 	stw	r4,20(sp)
    23f0:	003f9b06 	br	2260 <___vfprintf_internal_r+0x1ccc>
    23f4:	98000d1e 	bne	r19,zero,242c <___vfprintf_internal_r+0x1e98>
    23f8:	d8c14c17 	ldw	r3,1328(sp)
    23fc:	1880004c 	andi	r2,r3,1
    2400:	10000a1e 	bne	r2,zero,242c <___vfprintf_internal_r+0x1e98>
    2404:	01000044 	movi	r4,1
    2408:	200f883a 	mov	r7,r4
    240c:	d9014515 	stw	r4,1300(sp)
    2410:	003f4a06 	br	213c <___vfprintf_internal_r+0x1ba8>
    2414:	3cc00017 	ldw	r19,0(r7)
    2418:	39c00104 	addi	r7,r7,4
    241c:	983d0e0e 	bge	r19,zero,1858 <___vfprintf_internal_r+0x12c4>
    2420:	b8c00007 	ldb	r3,0(r23)
    2424:	04ffffc4 	movi	r19,-1
    2428:	0038d906 	br	790 <___vfprintf_internal_r+0x1fc>
    242c:	9cc00084 	addi	r19,r19,2
    2430:	dcc14515 	stw	r19,1300(sp)
    2434:	980f883a 	mov	r7,r19
    2438:	983f400e 	bge	r19,zero,213c <___vfprintf_internal_r+0x1ba8>
    243c:	003f7306 	br	220c <___vfprintf_internal_r+0x1c78>

00002440 <__vfprintf_internal>:
    2440:	00800074 	movhi	r2,1
    2444:	10bbe404 	addi	r2,r2,-4208
    2448:	2013883a 	mov	r9,r4
    244c:	11000017 	ldw	r4,0(r2)
    2450:	2805883a 	mov	r2,r5
    2454:	300f883a 	mov	r7,r6
    2458:	480b883a 	mov	r5,r9
    245c:	100d883a 	mov	r6,r2
    2460:	00005941 	jmpi	594 <___vfprintf_internal_r>

00002464 <__swsetup_r>:
    2464:	00800074 	movhi	r2,1
    2468:	10bbe404 	addi	r2,r2,-4208
    246c:	10c00017 	ldw	r3,0(r2)
    2470:	defffd04 	addi	sp,sp,-12
    2474:	dc400115 	stw	r17,4(sp)
    2478:	dc000015 	stw	r16,0(sp)
    247c:	dfc00215 	stw	ra,8(sp)
    2480:	2023883a 	mov	r17,r4
    2484:	2821883a 	mov	r16,r5
    2488:	18000226 	beq	r3,zero,2494 <__swsetup_r+0x30>
    248c:	18800e17 	ldw	r2,56(r3)
    2490:	10001f26 	beq	r2,zero,2510 <__swsetup_r+0xac>
    2494:	8100030b 	ldhu	r4,12(r16)
    2498:	2080020c 	andi	r2,r4,8
    249c:	10002826 	beq	r2,zero,2540 <__swsetup_r+0xdc>
    24a0:	81400417 	ldw	r5,16(r16)
    24a4:	28001d26 	beq	r5,zero,251c <__swsetup_r+0xb8>
    24a8:	2080004c 	andi	r2,r4,1
    24ac:	1005003a 	cmpeq	r2,r2,zero
    24b0:	10000b26 	beq	r2,zero,24e0 <__swsetup_r+0x7c>
    24b4:	2080008c 	andi	r2,r4,2
    24b8:	10001226 	beq	r2,zero,2504 <__swsetup_r+0xa0>
    24bc:	0005883a 	mov	r2,zero
    24c0:	80800215 	stw	r2,8(r16)
    24c4:	28000b26 	beq	r5,zero,24f4 <__swsetup_r+0x90>
    24c8:	0005883a 	mov	r2,zero
    24cc:	dfc00217 	ldw	ra,8(sp)
    24d0:	dc400117 	ldw	r17,4(sp)
    24d4:	dc000017 	ldw	r16,0(sp)
    24d8:	dec00304 	addi	sp,sp,12
    24dc:	f800283a 	ret
    24e0:	80800517 	ldw	r2,20(r16)
    24e4:	80000215 	stw	zero,8(r16)
    24e8:	0085c83a 	sub	r2,zero,r2
    24ec:	80800615 	stw	r2,24(r16)
    24f0:	283ff51e 	bne	r5,zero,24c8 <__swsetup_r+0x64>
    24f4:	2080200c 	andi	r2,r4,128
    24f8:	103ff326 	beq	r2,zero,24c8 <__swsetup_r+0x64>
    24fc:	00bfffc4 	movi	r2,-1
    2500:	003ff206 	br	24cc <__swsetup_r+0x68>
    2504:	80800517 	ldw	r2,20(r16)
    2508:	80800215 	stw	r2,8(r16)
    250c:	003fed06 	br	24c4 <__swsetup_r+0x60>
    2510:	1809883a 	mov	r4,r3
    2514:	00041b80 	call	41b8 <__sinit>
    2518:	003fde06 	br	2494 <__swsetup_r+0x30>
    251c:	20c0a00c 	andi	r3,r4,640
    2520:	00808004 	movi	r2,512
    2524:	18bfe026 	beq	r3,r2,24a8 <__swsetup_r+0x44>
    2528:	8809883a 	mov	r4,r17
    252c:	800b883a 	mov	r5,r16
    2530:	0004f300 	call	4f30 <__smakebuf_r>
    2534:	8100030b 	ldhu	r4,12(r16)
    2538:	81400417 	ldw	r5,16(r16)
    253c:	003fda06 	br	24a8 <__swsetup_r+0x44>
    2540:	2080040c 	andi	r2,r4,16
    2544:	103fed26 	beq	r2,zero,24fc <__swsetup_r+0x98>
    2548:	2080010c 	andi	r2,r4,4
    254c:	10001226 	beq	r2,zero,2598 <__swsetup_r+0x134>
    2550:	81400c17 	ldw	r5,48(r16)
    2554:	28000526 	beq	r5,zero,256c <__swsetup_r+0x108>
    2558:	80801004 	addi	r2,r16,64
    255c:	28800226 	beq	r5,r2,2568 <__swsetup_r+0x104>
    2560:	8809883a 	mov	r4,r17
    2564:	000453c0 	call	453c <_free_r>
    2568:	80000c15 	stw	zero,48(r16)
    256c:	8080030b 	ldhu	r2,12(r16)
    2570:	81400417 	ldw	r5,16(r16)
    2574:	80000115 	stw	zero,4(r16)
    2578:	10bff6cc 	andi	r2,r2,65499
    257c:	8080030d 	sth	r2,12(r16)
    2580:	81400015 	stw	r5,0(r16)
    2584:	8080030b 	ldhu	r2,12(r16)
    2588:	10800214 	ori	r2,r2,8
    258c:	113fffcc 	andi	r4,r2,65535
    2590:	8080030d 	sth	r2,12(r16)
    2594:	003fc306 	br	24a4 <__swsetup_r+0x40>
    2598:	81400417 	ldw	r5,16(r16)
    259c:	003ff906 	br	2584 <__swsetup_r+0x120>

000025a0 <register_fini>:
    25a0:	f800283a 	ret

000025a4 <__call_exitprocs>:
    25a4:	00800074 	movhi	r2,1
    25a8:	10bbe504 	addi	r2,r2,-4204
    25ac:	10800017 	ldw	r2,0(r2)
    25b0:	defff304 	addi	sp,sp,-52
    25b4:	df000b15 	stw	fp,44(sp)
    25b8:	d8800115 	stw	r2,4(sp)
    25bc:	00800034 	movhi	r2,0
    25c0:	10800004 	addi	r2,r2,0
    25c4:	1005003a 	cmpeq	r2,r2,zero
    25c8:	d8800215 	stw	r2,8(sp)
    25cc:	d8800117 	ldw	r2,4(sp)
    25d0:	dd400815 	stw	r21,32(sp)
    25d4:	dd000715 	stw	r20,28(sp)
    25d8:	10805204 	addi	r2,r2,328
    25dc:	dfc00c15 	stw	ra,48(sp)
    25e0:	ddc00a15 	stw	r23,40(sp)
    25e4:	dd800915 	stw	r22,36(sp)
    25e8:	dcc00615 	stw	r19,24(sp)
    25ec:	dc800515 	stw	r18,20(sp)
    25f0:	dc400415 	stw	r17,16(sp)
    25f4:	dc000315 	stw	r16,12(sp)
    25f8:	282b883a 	mov	r21,r5
    25fc:	2039883a 	mov	fp,r4
    2600:	d8800015 	stw	r2,0(sp)
    2604:	2829003a 	cmpeq	r20,r5,zero
    2608:	d8800117 	ldw	r2,4(sp)
    260c:	14405217 	ldw	r17,328(r2)
    2610:	88001026 	beq	r17,zero,2654 <__call_exitprocs+0xb0>
    2614:	ddc00017 	ldw	r23,0(sp)
    2618:	88800117 	ldw	r2,4(r17)
    261c:	8c802204 	addi	r18,r17,136
    2620:	143fffc4 	addi	r16,r2,-1
    2624:	80000916 	blt	r16,zero,264c <__call_exitprocs+0xa8>
    2628:	05bfffc4 	movi	r22,-1
    262c:	a000151e 	bne	r20,zero,2684 <__call_exitprocs+0xe0>
    2630:	8409883a 	add	r4,r16,r16
    2634:	2105883a 	add	r2,r4,r4
    2638:	1485883a 	add	r2,r2,r18
    263c:	10c02017 	ldw	r3,128(r2)
    2640:	a8c01126 	beq	r21,r3,2688 <__call_exitprocs+0xe4>
    2644:	843fffc4 	addi	r16,r16,-1
    2648:	85bff81e 	bne	r16,r22,262c <__call_exitprocs+0x88>
    264c:	d8800217 	ldw	r2,8(sp)
    2650:	10003126 	beq	r2,zero,2718 <__call_exitprocs+0x174>
    2654:	dfc00c17 	ldw	ra,48(sp)
    2658:	df000b17 	ldw	fp,44(sp)
    265c:	ddc00a17 	ldw	r23,40(sp)
    2660:	dd800917 	ldw	r22,36(sp)
    2664:	dd400817 	ldw	r21,32(sp)
    2668:	dd000717 	ldw	r20,28(sp)
    266c:	dcc00617 	ldw	r19,24(sp)
    2670:	dc800517 	ldw	r18,20(sp)
    2674:	dc400417 	ldw	r17,16(sp)
    2678:	dc000317 	ldw	r16,12(sp)
    267c:	dec00d04 	addi	sp,sp,52
    2680:	f800283a 	ret
    2684:	8409883a 	add	r4,r16,r16
    2688:	88c00117 	ldw	r3,4(r17)
    268c:	2105883a 	add	r2,r4,r4
    2690:	1445883a 	add	r2,r2,r17
    2694:	18ffffc4 	addi	r3,r3,-1
    2698:	11800217 	ldw	r6,8(r2)
    269c:	1c001526 	beq	r3,r16,26f4 <__call_exitprocs+0x150>
    26a0:	10000215 	stw	zero,8(r2)
    26a4:	303fe726 	beq	r6,zero,2644 <__call_exitprocs+0xa0>
    26a8:	00c00044 	movi	r3,1
    26ac:	1c06983a 	sll	r3,r3,r16
    26b0:	90804017 	ldw	r2,256(r18)
    26b4:	8cc00117 	ldw	r19,4(r17)
    26b8:	1884703a 	and	r2,r3,r2
    26bc:	10001426 	beq	r2,zero,2710 <__call_exitprocs+0x16c>
    26c0:	90804117 	ldw	r2,260(r18)
    26c4:	1884703a 	and	r2,r3,r2
    26c8:	10000c1e 	bne	r2,zero,26fc <__call_exitprocs+0x158>
    26cc:	2105883a 	add	r2,r4,r4
    26d0:	1485883a 	add	r2,r2,r18
    26d4:	11400017 	ldw	r5,0(r2)
    26d8:	e009883a 	mov	r4,fp
    26dc:	303ee83a 	callr	r6
    26e0:	88800117 	ldw	r2,4(r17)
    26e4:	98bfc81e 	bne	r19,r2,2608 <__call_exitprocs+0x64>
    26e8:	b8800017 	ldw	r2,0(r23)
    26ec:	147fd526 	beq	r2,r17,2644 <__call_exitprocs+0xa0>
    26f0:	003fc506 	br	2608 <__call_exitprocs+0x64>
    26f4:	8c000115 	stw	r16,4(r17)
    26f8:	003fea06 	br	26a4 <__call_exitprocs+0x100>
    26fc:	2105883a 	add	r2,r4,r4
    2700:	1485883a 	add	r2,r2,r18
    2704:	11000017 	ldw	r4,0(r2)
    2708:	303ee83a 	callr	r6
    270c:	003ff406 	br	26e0 <__call_exitprocs+0x13c>
    2710:	303ee83a 	callr	r6
    2714:	003ff206 	br	26e0 <__call_exitprocs+0x13c>
    2718:	88800117 	ldw	r2,4(r17)
    271c:	1000081e 	bne	r2,zero,2740 <__call_exitprocs+0x19c>
    2720:	89000017 	ldw	r4,0(r17)
    2724:	20000726 	beq	r4,zero,2744 <__call_exitprocs+0x1a0>
    2728:	b9000015 	stw	r4,0(r23)
    272c:	8809883a 	mov	r4,r17
    2730:	00000000 	call	0 <__reset>
    2734:	bc400017 	ldw	r17,0(r23)
    2738:	883fb71e 	bne	r17,zero,2618 <__call_exitprocs+0x74>
    273c:	003fc506 	br	2654 <__call_exitprocs+0xb0>
    2740:	89000017 	ldw	r4,0(r17)
    2744:	882f883a 	mov	r23,r17
    2748:	2023883a 	mov	r17,r4
    274c:	883fb21e 	bne	r17,zero,2618 <__call_exitprocs+0x74>
    2750:	003fc006 	br	2654 <__call_exitprocs+0xb0>

00002754 <quorem>:
    2754:	28c00417 	ldw	r3,16(r5)
    2758:	20800417 	ldw	r2,16(r4)
    275c:	defff604 	addi	sp,sp,-40
    2760:	ddc00715 	stw	r23,28(sp)
    2764:	dd400515 	stw	r21,20(sp)
    2768:	dfc00915 	stw	ra,36(sp)
    276c:	df000815 	stw	fp,32(sp)
    2770:	dd800615 	stw	r22,24(sp)
    2774:	dd000415 	stw	r20,16(sp)
    2778:	dcc00315 	stw	r19,12(sp)
    277c:	dc800215 	stw	r18,8(sp)
    2780:	dc400115 	stw	r17,4(sp)
    2784:	dc000015 	stw	r16,0(sp)
    2788:	202f883a 	mov	r23,r4
    278c:	282b883a 	mov	r21,r5
    2790:	10c07416 	blt	r2,r3,2964 <quorem+0x210>
    2794:	1c7fffc4 	addi	r17,r3,-1
    2798:	8c45883a 	add	r2,r17,r17
    279c:	1085883a 	add	r2,r2,r2
    27a0:	2c000504 	addi	r16,r5,20
    27a4:	24c00504 	addi	r19,r4,20
    27a8:	14ed883a 	add	r22,r2,r19
    27ac:	80a5883a 	add	r18,r16,r2
    27b0:	b7000017 	ldw	fp,0(r22)
    27b4:	91400017 	ldw	r5,0(r18)
    27b8:	e009883a 	mov	r4,fp
    27bc:	29400044 	addi	r5,r5,1
    27c0:	00096580 	call	9658 <__udivsi3>
    27c4:	1029883a 	mov	r20,r2
    27c8:	10003c1e 	bne	r2,zero,28bc <quorem+0x168>
    27cc:	a80b883a 	mov	r5,r21
    27d0:	b809883a 	mov	r4,r23
    27d4:	0005c5c0 	call	5c5c <__mcmp>
    27d8:	10002b16 	blt	r2,zero,2888 <quorem+0x134>
    27dc:	a5000044 	addi	r20,r20,1
    27e0:	980f883a 	mov	r7,r19
    27e4:	0011883a 	mov	r8,zero
    27e8:	0009883a 	mov	r4,zero
    27ec:	81400017 	ldw	r5,0(r16)
    27f0:	38c00017 	ldw	r3,0(r7)
    27f4:	84000104 	addi	r16,r16,4
    27f8:	28bfffcc 	andi	r2,r5,65535
    27fc:	2085883a 	add	r2,r4,r2
    2800:	11bfffcc 	andi	r6,r2,65535
    2804:	193fffcc 	andi	r4,r3,65535
    2808:	1004d43a 	srli	r2,r2,16
    280c:	280ad43a 	srli	r5,r5,16
    2810:	2189c83a 	sub	r4,r4,r6
    2814:	2209883a 	add	r4,r4,r8
    2818:	1806d43a 	srli	r3,r3,16
    281c:	288b883a 	add	r5,r5,r2
    2820:	200dd43a 	srai	r6,r4,16
    2824:	28bfffcc 	andi	r2,r5,65535
    2828:	1887c83a 	sub	r3,r3,r2
    282c:	1987883a 	add	r3,r3,r6
    2830:	3900000d 	sth	r4,0(r7)
    2834:	38c0008d 	sth	r3,2(r7)
    2838:	2808d43a 	srli	r4,r5,16
    283c:	39c00104 	addi	r7,r7,4
    2840:	1811d43a 	srai	r8,r3,16
    2844:	943fe92e 	bgeu	r18,r16,27ec <quorem+0x98>
    2848:	8c45883a 	add	r2,r17,r17
    284c:	1085883a 	add	r2,r2,r2
    2850:	9885883a 	add	r2,r19,r2
    2854:	10c00017 	ldw	r3,0(r2)
    2858:	18000b1e 	bne	r3,zero,2888 <quorem+0x134>
    285c:	113fff04 	addi	r4,r2,-4
    2860:	9900082e 	bgeu	r19,r4,2884 <quorem+0x130>
    2864:	10bfff17 	ldw	r2,-4(r2)
    2868:	10000326 	beq	r2,zero,2878 <quorem+0x124>
    286c:	00000506 	br	2884 <quorem+0x130>
    2870:	20800017 	ldw	r2,0(r4)
    2874:	1000031e 	bne	r2,zero,2884 <quorem+0x130>
    2878:	213fff04 	addi	r4,r4,-4
    287c:	8c7fffc4 	addi	r17,r17,-1
    2880:	993ffb36 	bltu	r19,r4,2870 <quorem+0x11c>
    2884:	bc400415 	stw	r17,16(r23)
    2888:	a005883a 	mov	r2,r20
    288c:	dfc00917 	ldw	ra,36(sp)
    2890:	df000817 	ldw	fp,32(sp)
    2894:	ddc00717 	ldw	r23,28(sp)
    2898:	dd800617 	ldw	r22,24(sp)
    289c:	dd400517 	ldw	r21,20(sp)
    28a0:	dd000417 	ldw	r20,16(sp)
    28a4:	dcc00317 	ldw	r19,12(sp)
    28a8:	dc800217 	ldw	r18,8(sp)
    28ac:	dc400117 	ldw	r17,4(sp)
    28b0:	dc000017 	ldw	r16,0(sp)
    28b4:	dec00a04 	addi	sp,sp,40
    28b8:	f800283a 	ret
    28bc:	980f883a 	mov	r7,r19
    28c0:	8011883a 	mov	r8,r16
    28c4:	0013883a 	mov	r9,zero
    28c8:	000d883a 	mov	r6,zero
    28cc:	40c00017 	ldw	r3,0(r8)
    28d0:	39000017 	ldw	r4,0(r7)
    28d4:	42000104 	addi	r8,r8,4
    28d8:	18bfffcc 	andi	r2,r3,65535
    28dc:	a085383a 	mul	r2,r20,r2
    28e0:	1806d43a 	srli	r3,r3,16
    28e4:	217fffcc 	andi	r5,r4,65535
    28e8:	3085883a 	add	r2,r6,r2
    28ec:	11bfffcc 	andi	r6,r2,65535
    28f0:	a0c7383a 	mul	r3,r20,r3
    28f4:	1004d43a 	srli	r2,r2,16
    28f8:	298bc83a 	sub	r5,r5,r6
    28fc:	2a4b883a 	add	r5,r5,r9
    2900:	2008d43a 	srli	r4,r4,16
    2904:	1887883a 	add	r3,r3,r2
    2908:	280dd43a 	srai	r6,r5,16
    290c:	18bfffcc 	andi	r2,r3,65535
    2910:	2089c83a 	sub	r4,r4,r2
    2914:	2189883a 	add	r4,r4,r6
    2918:	3900008d 	sth	r4,2(r7)
    291c:	3940000d 	sth	r5,0(r7)
    2920:	180cd43a 	srli	r6,r3,16
    2924:	39c00104 	addi	r7,r7,4
    2928:	2013d43a 	srai	r9,r4,16
    292c:	923fe72e 	bgeu	r18,r8,28cc <quorem+0x178>
    2930:	e03fa61e 	bne	fp,zero,27cc <quorem+0x78>
    2934:	b0ffff04 	addi	r3,r22,-4
    2938:	98c0082e 	bgeu	r19,r3,295c <quorem+0x208>
    293c:	b0bfff17 	ldw	r2,-4(r22)
    2940:	10000326 	beq	r2,zero,2950 <quorem+0x1fc>
    2944:	00000506 	br	295c <quorem+0x208>
    2948:	18800017 	ldw	r2,0(r3)
    294c:	1000031e 	bne	r2,zero,295c <quorem+0x208>
    2950:	18ffff04 	addi	r3,r3,-4
    2954:	8c7fffc4 	addi	r17,r17,-1
    2958:	98fffb36 	bltu	r19,r3,2948 <quorem+0x1f4>
    295c:	bc400415 	stw	r17,16(r23)
    2960:	003f9a06 	br	27cc <quorem+0x78>
    2964:	0005883a 	mov	r2,zero
    2968:	003fc806 	br	288c <quorem+0x138>

0000296c <_dtoa_r>:
    296c:	22001017 	ldw	r8,64(r4)
    2970:	deffda04 	addi	sp,sp,-152
    2974:	dd402115 	stw	r21,132(sp)
    2978:	dd002015 	stw	r20,128(sp)
    297c:	dc801e15 	stw	r18,120(sp)
    2980:	dc401d15 	stw	r17,116(sp)
    2984:	dfc02515 	stw	ra,148(sp)
    2988:	df002415 	stw	fp,144(sp)
    298c:	ddc02315 	stw	r23,140(sp)
    2990:	dd802215 	stw	r22,136(sp)
    2994:	dcc01f15 	stw	r19,124(sp)
    2998:	dc001c15 	stw	r16,112(sp)
    299c:	d9001615 	stw	r4,88(sp)
    29a0:	3023883a 	mov	r17,r6
    29a4:	2829883a 	mov	r20,r5
    29a8:	d9c01715 	stw	r7,92(sp)
    29ac:	dc802817 	ldw	r18,160(sp)
    29b0:	302b883a 	mov	r21,r6
    29b4:	40000a26 	beq	r8,zero,29e0 <_dtoa_r+0x74>
    29b8:	20801117 	ldw	r2,68(r4)
    29bc:	400b883a 	mov	r5,r8
    29c0:	40800115 	stw	r2,4(r8)
    29c4:	20c01117 	ldw	r3,68(r4)
    29c8:	00800044 	movi	r2,1
    29cc:	10c4983a 	sll	r2,r2,r3
    29d0:	40800215 	stw	r2,8(r8)
    29d4:	0005b000 	call	5b00 <_Bfree>
    29d8:	d8c01617 	ldw	r3,88(sp)
    29dc:	18001015 	stw	zero,64(r3)
    29e0:	8800a316 	blt	r17,zero,2c70 <_dtoa_r+0x304>
    29e4:	90000015 	stw	zero,0(r18)
    29e8:	a8dffc2c 	andhi	r3,r21,32752
    29ec:	009ffc34 	movhi	r2,32752
    29f0:	18809126 	beq	r3,r2,2c38 <_dtoa_r+0x2cc>
    29f4:	000d883a 	mov	r6,zero
    29f8:	000f883a 	mov	r7,zero
    29fc:	a009883a 	mov	r4,r20
    2a00:	a80b883a 	mov	r5,r21
    2a04:	dd001215 	stw	r20,72(sp)
    2a08:	dd401315 	stw	r21,76(sp)
    2a0c:	0008f980 	call	8f98 <__nedf2>
    2a10:	1000171e 	bne	r2,zero,2a70 <_dtoa_r+0x104>
    2a14:	d9802717 	ldw	r6,156(sp)
    2a18:	00800044 	movi	r2,1
    2a1c:	30800015 	stw	r2,0(r6)
    2a20:	d8802917 	ldw	r2,164(sp)
    2a24:	10029b26 	beq	r2,zero,3494 <_dtoa_r+0xb28>
    2a28:	d9002917 	ldw	r4,164(sp)
    2a2c:	00800074 	movhi	r2,1
    2a30:	10b43b44 	addi	r2,r2,-12051
    2a34:	10ffffc4 	addi	r3,r2,-1
    2a38:	20800015 	stw	r2,0(r4)
    2a3c:	1805883a 	mov	r2,r3
    2a40:	dfc02517 	ldw	ra,148(sp)
    2a44:	df002417 	ldw	fp,144(sp)
    2a48:	ddc02317 	ldw	r23,140(sp)
    2a4c:	dd802217 	ldw	r22,136(sp)
    2a50:	dd402117 	ldw	r21,132(sp)
    2a54:	dd002017 	ldw	r20,128(sp)
    2a58:	dcc01f17 	ldw	r19,124(sp)
    2a5c:	dc801e17 	ldw	r18,120(sp)
    2a60:	dc401d17 	ldw	r17,116(sp)
    2a64:	dc001c17 	ldw	r16,112(sp)
    2a68:	dec02604 	addi	sp,sp,152
    2a6c:	f800283a 	ret
    2a70:	d9001617 	ldw	r4,88(sp)
    2a74:	d9401217 	ldw	r5,72(sp)
    2a78:	d8800104 	addi	r2,sp,4
    2a7c:	a80d883a 	mov	r6,r21
    2a80:	d9c00204 	addi	r7,sp,8
    2a84:	d8800015 	stw	r2,0(sp)
    2a88:	000613c0 	call	613c <__d2b>
    2a8c:	d8800715 	stw	r2,28(sp)
    2a90:	a804d53a 	srli	r2,r21,20
    2a94:	1101ffcc 	andi	r4,r2,2047
    2a98:	20008626 	beq	r4,zero,2cb4 <_dtoa_r+0x348>
    2a9c:	d8c01217 	ldw	r3,72(sp)
    2aa0:	00800434 	movhi	r2,16
    2aa4:	10bfffc4 	addi	r2,r2,-1
    2aa8:	ddc00117 	ldw	r23,4(sp)
    2aac:	a884703a 	and	r2,r21,r2
    2ab0:	1811883a 	mov	r8,r3
    2ab4:	124ffc34 	orhi	r9,r2,16368
    2ab8:	25bf0044 	addi	r22,r4,-1023
    2abc:	d8000815 	stw	zero,32(sp)
    2ac0:	0005883a 	mov	r2,zero
    2ac4:	00cffe34 	movhi	r3,16376
    2ac8:	480b883a 	mov	r5,r9
    2acc:	4009883a 	mov	r4,r8
    2ad0:	180f883a 	mov	r7,r3
    2ad4:	100d883a 	mov	r6,r2
    2ad8:	00088000 	call	8800 <__subdf3>
    2adc:	0218dbf4 	movhi	r8,25455
    2ae0:	4210d844 	addi	r8,r8,17249
    2ae4:	024ff4f4 	movhi	r9,16339
    2ae8:	4a61e9c4 	addi	r9,r9,-30809
    2aec:	480f883a 	mov	r7,r9
    2af0:	400d883a 	mov	r6,r8
    2af4:	180b883a 	mov	r5,r3
    2af8:	1009883a 	mov	r4,r2
    2afc:	00088f40 	call	88f4 <__muldf3>
    2b00:	0222d874 	movhi	r8,35681
    2b04:	42322cc4 	addi	r8,r8,-14157
    2b08:	024ff1f4 	movhi	r9,16327
    2b0c:	4a628a04 	addi	r9,r9,-30168
    2b10:	480f883a 	mov	r7,r9
    2b14:	400d883a 	mov	r6,r8
    2b18:	180b883a 	mov	r5,r3
    2b1c:	1009883a 	mov	r4,r2
    2b20:	00088800 	call	8880 <__adddf3>
    2b24:	b009883a 	mov	r4,r22
    2b28:	1021883a 	mov	r16,r2
    2b2c:	1823883a 	mov	r17,r3
    2b30:	00091b80 	call	91b8 <__floatsidf>
    2b34:	021427f4 	movhi	r8,20639
    2b38:	421e7ec4 	addi	r8,r8,31227
    2b3c:	024ff4f4 	movhi	r9,16339
    2b40:	4a5104c4 	addi	r9,r9,17427
    2b44:	480f883a 	mov	r7,r9
    2b48:	400d883a 	mov	r6,r8
    2b4c:	180b883a 	mov	r5,r3
    2b50:	1009883a 	mov	r4,r2
    2b54:	00088f40 	call	88f4 <__muldf3>
    2b58:	180f883a 	mov	r7,r3
    2b5c:	880b883a 	mov	r5,r17
    2b60:	100d883a 	mov	r6,r2
    2b64:	8009883a 	mov	r4,r16
    2b68:	00088800 	call	8880 <__adddf3>
    2b6c:	1009883a 	mov	r4,r2
    2b70:	180b883a 	mov	r5,r3
    2b74:	1021883a 	mov	r16,r2
    2b78:	1823883a 	mov	r17,r3
    2b7c:	00092b00 	call	92b0 <__fixdfsi>
    2b80:	000d883a 	mov	r6,zero
    2b84:	000f883a 	mov	r7,zero
    2b88:	8009883a 	mov	r4,r16
    2b8c:	880b883a 	mov	r5,r17
    2b90:	d8800d15 	stw	r2,52(sp)
    2b94:	00091300 	call	9130 <__ltdf2>
    2b98:	10031716 	blt	r2,zero,37f8 <_dtoa_r+0xe8c>
    2b9c:	d8c00d17 	ldw	r3,52(sp)
    2ba0:	00800584 	movi	r2,22
    2ba4:	10c1482e 	bgeu	r2,r3,30c8 <_dtoa_r+0x75c>
    2ba8:	01000044 	movi	r4,1
    2bac:	d9000c15 	stw	r4,48(sp)
    2bb0:	bd85c83a 	sub	r2,r23,r22
    2bb4:	11bfffc4 	addi	r6,r2,-1
    2bb8:	30030b16 	blt	r6,zero,37e8 <_dtoa_r+0xe7c>
    2bbc:	d9800a15 	stw	r6,40(sp)
    2bc0:	d8001115 	stw	zero,68(sp)
    2bc4:	d8c00d17 	ldw	r3,52(sp)
    2bc8:	1802ff16 	blt	r3,zero,37c8 <_dtoa_r+0xe5c>
    2bcc:	d9000a17 	ldw	r4,40(sp)
    2bd0:	d8c00915 	stw	r3,36(sp)
    2bd4:	d8001015 	stw	zero,64(sp)
    2bd8:	20c9883a 	add	r4,r4,r3
    2bdc:	d9000a15 	stw	r4,40(sp)
    2be0:	d9001717 	ldw	r4,92(sp)
    2be4:	00800244 	movi	r2,9
    2be8:	11004636 	bltu	r2,r4,2d04 <_dtoa_r+0x398>
    2bec:	00800144 	movi	r2,5
    2bf0:	11020416 	blt	r2,r4,3404 <_dtoa_r+0xa98>
    2bf4:	04400044 	movi	r17,1
    2bf8:	d8c01717 	ldw	r3,92(sp)
    2bfc:	00800144 	movi	r2,5
    2c00:	10c1ed36 	bltu	r2,r3,33b8 <_dtoa_r+0xa4c>
    2c04:	18c5883a 	add	r2,r3,r3
    2c08:	1085883a 	add	r2,r2,r2
    2c0c:	00c00034 	movhi	r3,0
    2c10:	18cb0804 	addi	r3,r3,11296
    2c14:	10c5883a 	add	r2,r2,r3
    2c18:	11000017 	ldw	r4,0(r2)
    2c1c:	2000683a 	jmp	r4
    2c20:	00002d0c 	andi	zero,zero,180
    2c24:	00002d0c 	andi	zero,zero,180
    2c28:	0000370c 	andi	zero,zero,220
    2c2c:	000036e4 	muli	zero,zero,219
    2c30:	00003728 	cmpgeui	zero,zero,220
    2c34:	00003734 	movhi	zero,220
    2c38:	d9002717 	ldw	r4,156(sp)
    2c3c:	0089c3c4 	movi	r2,9999
    2c40:	20800015 	stw	r2,0(r4)
    2c44:	a0001026 	beq	r20,zero,2c88 <_dtoa_r+0x31c>
    2c48:	00c00074 	movhi	r3,1
    2c4c:	18f44704 	addi	r3,r3,-12004
    2c50:	d9802917 	ldw	r6,164(sp)
    2c54:	303f7926 	beq	r6,zero,2a3c <_dtoa_r+0xd0>
    2c58:	188000c7 	ldb	r2,3(r3)
    2c5c:	190000c4 	addi	r4,r3,3
    2c60:	1000101e 	bne	r2,zero,2ca4 <_dtoa_r+0x338>
    2c64:	d8802917 	ldw	r2,164(sp)
    2c68:	11000015 	stw	r4,0(r2)
    2c6c:	003f7306 	br	2a3c <_dtoa_r+0xd0>
    2c70:	00a00034 	movhi	r2,32768
    2c74:	10bfffc4 	addi	r2,r2,-1
    2c78:	00c00044 	movi	r3,1
    2c7c:	88aa703a 	and	r21,r17,r2
    2c80:	90c00015 	stw	r3,0(r18)
    2c84:	003f5806 	br	29e8 <_dtoa_r+0x7c>
    2c88:	00800434 	movhi	r2,16
    2c8c:	10bfffc4 	addi	r2,r2,-1
    2c90:	a884703a 	and	r2,r21,r2
    2c94:	103fec1e 	bne	r2,zero,2c48 <_dtoa_r+0x2dc>
    2c98:	00c00074 	movhi	r3,1
    2c9c:	18f44404 	addi	r3,r3,-12016
    2ca0:	003feb06 	br	2c50 <_dtoa_r+0x2e4>
    2ca4:	d8802917 	ldw	r2,164(sp)
    2ca8:	19000204 	addi	r4,r3,8
    2cac:	11000015 	stw	r4,0(r2)
    2cb0:	003f6206 	br	2a3c <_dtoa_r+0xd0>
    2cb4:	ddc00117 	ldw	r23,4(sp)
    2cb8:	d8800217 	ldw	r2,8(sp)
    2cbc:	01000804 	movi	r4,32
    2cc0:	b8c10c84 	addi	r3,r23,1074
    2cc4:	18a3883a 	add	r17,r3,r2
    2cc8:	2441b80e 	bge	r4,r17,33ac <_dtoa_r+0xa40>
    2ccc:	00c01004 	movi	r3,64
    2cd0:	1c47c83a 	sub	r3,r3,r17
    2cd4:	88bff804 	addi	r2,r17,-32
    2cd8:	a8c6983a 	sll	r3,r21,r3
    2cdc:	a084d83a 	srl	r2,r20,r2
    2ce0:	1888b03a 	or	r4,r3,r2
    2ce4:	00093880 	call	9388 <__floatunsidf>
    2ce8:	1011883a 	mov	r8,r2
    2cec:	00bf8434 	movhi	r2,65040
    2cf0:	01000044 	movi	r4,1
    2cf4:	10d3883a 	add	r9,r2,r3
    2cf8:	8dbef344 	addi	r22,r17,-1075
    2cfc:	d9000815 	stw	r4,32(sp)
    2d00:	003f6f06 	br	2ac0 <_dtoa_r+0x154>
    2d04:	d8001715 	stw	zero,92(sp)
    2d08:	04400044 	movi	r17,1
    2d0c:	00bfffc4 	movi	r2,-1
    2d10:	00c00044 	movi	r3,1
    2d14:	d8800e15 	stw	r2,56(sp)
    2d18:	d8002615 	stw	zero,152(sp)
    2d1c:	d8800f15 	stw	r2,60(sp)
    2d20:	d8c00b15 	stw	r3,44(sp)
    2d24:	1021883a 	mov	r16,r2
    2d28:	d8801617 	ldw	r2,88(sp)
    2d2c:	10001115 	stw	zero,68(r2)
    2d30:	d8801617 	ldw	r2,88(sp)
    2d34:	11401117 	ldw	r5,68(r2)
    2d38:	1009883a 	mov	r4,r2
    2d3c:	00060800 	call	6080 <_Balloc>
    2d40:	d8c01617 	ldw	r3,88(sp)
    2d44:	d8800515 	stw	r2,20(sp)
    2d48:	18801015 	stw	r2,64(r3)
    2d4c:	00800384 	movi	r2,14
    2d50:	14006836 	bltu	r2,r16,2ef4 <_dtoa_r+0x588>
    2d54:	8805003a 	cmpeq	r2,r17,zero
    2d58:	1000661e 	bne	r2,zero,2ef4 <_dtoa_r+0x588>
    2d5c:	d9000d17 	ldw	r4,52(sp)
    2d60:	0102300e 	bge	zero,r4,3624 <_dtoa_r+0xcb8>
    2d64:	208003cc 	andi	r2,r4,15
    2d68:	100490fa 	slli	r2,r2,3
    2d6c:	2025d13a 	srai	r18,r4,4
    2d70:	00c00074 	movhi	r3,1
    2d74:	18f45804 	addi	r3,r3,-11936
    2d78:	10c5883a 	add	r2,r2,r3
    2d7c:	90c0040c 	andi	r3,r18,16
    2d80:	14000017 	ldw	r16,0(r2)
    2d84:	14400117 	ldw	r17,4(r2)
    2d88:	18036a1e 	bne	r3,zero,3b34 <_dtoa_r+0x11c8>
    2d8c:	05800084 	movi	r22,2
    2d90:	90001026 	beq	r18,zero,2dd4 <_dtoa_r+0x468>
    2d94:	04c00074 	movhi	r19,1
    2d98:	9cf48a04 	addi	r19,r19,-11736
    2d9c:	9080004c 	andi	r2,r18,1
    2da0:	1005003a 	cmpeq	r2,r2,zero
    2da4:	1000081e 	bne	r2,zero,2dc8 <_dtoa_r+0x45c>
    2da8:	99800017 	ldw	r6,0(r19)
    2dac:	99c00117 	ldw	r7,4(r19)
    2db0:	880b883a 	mov	r5,r17
    2db4:	8009883a 	mov	r4,r16
    2db8:	00088f40 	call	88f4 <__muldf3>
    2dbc:	1021883a 	mov	r16,r2
    2dc0:	b5800044 	addi	r22,r22,1
    2dc4:	1823883a 	mov	r17,r3
    2dc8:	9025d07a 	srai	r18,r18,1
    2dcc:	9cc00204 	addi	r19,r19,8
    2dd0:	903ff21e 	bne	r18,zero,2d9c <_dtoa_r+0x430>
    2dd4:	a80b883a 	mov	r5,r21
    2dd8:	a009883a 	mov	r4,r20
    2ddc:	880f883a 	mov	r7,r17
    2de0:	800d883a 	mov	r6,r16
    2de4:	0008cb80 	call	8cb8 <__divdf3>
    2de8:	1029883a 	mov	r20,r2
    2dec:	182b883a 	mov	r21,r3
    2df0:	d8c00c17 	ldw	r3,48(sp)
    2df4:	1805003a 	cmpeq	r2,r3,zero
    2df8:	1000081e 	bne	r2,zero,2e1c <_dtoa_r+0x4b0>
    2dfc:	0005883a 	mov	r2,zero
    2e00:	00cffc34 	movhi	r3,16368
    2e04:	180f883a 	mov	r7,r3
    2e08:	a009883a 	mov	r4,r20
    2e0c:	a80b883a 	mov	r5,r21
    2e10:	100d883a 	mov	r6,r2
    2e14:	00091300 	call	9130 <__ltdf2>
    2e18:	1003fe16 	blt	r2,zero,3e14 <_dtoa_r+0x14a8>
    2e1c:	b009883a 	mov	r4,r22
    2e20:	00091b80 	call	91b8 <__floatsidf>
    2e24:	180b883a 	mov	r5,r3
    2e28:	1009883a 	mov	r4,r2
    2e2c:	a00d883a 	mov	r6,r20
    2e30:	a80f883a 	mov	r7,r21
    2e34:	00088f40 	call	88f4 <__muldf3>
    2e38:	0011883a 	mov	r8,zero
    2e3c:	02500734 	movhi	r9,16412
    2e40:	1009883a 	mov	r4,r2
    2e44:	180b883a 	mov	r5,r3
    2e48:	480f883a 	mov	r7,r9
    2e4c:	400d883a 	mov	r6,r8
    2e50:	00088800 	call	8880 <__adddf3>
    2e54:	d9000f17 	ldw	r4,60(sp)
    2e58:	102d883a 	mov	r22,r2
    2e5c:	00bf3034 	movhi	r2,64704
    2e60:	18b9883a 	add	fp,r3,r2
    2e64:	e02f883a 	mov	r23,fp
    2e68:	20028f1e 	bne	r4,zero,38a8 <_dtoa_r+0xf3c>
    2e6c:	0005883a 	mov	r2,zero
    2e70:	00d00534 	movhi	r3,16404
    2e74:	a009883a 	mov	r4,r20
    2e78:	a80b883a 	mov	r5,r21
    2e7c:	180f883a 	mov	r7,r3
    2e80:	100d883a 	mov	r6,r2
    2e84:	00088000 	call	8800 <__subdf3>
    2e88:	1009883a 	mov	r4,r2
    2e8c:	e00f883a 	mov	r7,fp
    2e90:	180b883a 	mov	r5,r3
    2e94:	b00d883a 	mov	r6,r22
    2e98:	1025883a 	mov	r18,r2
    2e9c:	1827883a 	mov	r19,r3
    2ea0:	00090200 	call	9020 <__gtdf2>
    2ea4:	00834f16 	blt	zero,r2,3be4 <_dtoa_r+0x1278>
    2ea8:	e0e0003c 	xorhi	r3,fp,32768
    2eac:	9009883a 	mov	r4,r18
    2eb0:	980b883a 	mov	r5,r19
    2eb4:	180f883a 	mov	r7,r3
    2eb8:	b00d883a 	mov	r6,r22
    2ebc:	00091300 	call	9130 <__ltdf2>
    2ec0:	1000080e 	bge	r2,zero,2ee4 <_dtoa_r+0x578>
    2ec4:	0027883a 	mov	r19,zero
    2ec8:	0025883a 	mov	r18,zero
    2ecc:	d8802617 	ldw	r2,152(sp)
    2ed0:	df000517 	ldw	fp,20(sp)
    2ed4:	d8000615 	stw	zero,24(sp)
    2ed8:	0084303a 	nor	r2,zero,r2
    2edc:	d8800d15 	stw	r2,52(sp)
    2ee0:	00019b06 	br	3550 <_dtoa_r+0xbe4>
    2ee4:	d9801217 	ldw	r6,72(sp)
    2ee8:	d8801317 	ldw	r2,76(sp)
    2eec:	3029883a 	mov	r20,r6
    2ef0:	102b883a 	mov	r21,r2
    2ef4:	d8c00217 	ldw	r3,8(sp)
    2ef8:	18008516 	blt	r3,zero,3110 <_dtoa_r+0x7a4>
    2efc:	d9000d17 	ldw	r4,52(sp)
    2f00:	00800384 	movi	r2,14
    2f04:	11008216 	blt	r2,r4,3110 <_dtoa_r+0x7a4>
    2f08:	200490fa 	slli	r2,r4,3
    2f0c:	d9802617 	ldw	r6,152(sp)
    2f10:	00c00074 	movhi	r3,1
    2f14:	18f45804 	addi	r3,r3,-11936
    2f18:	10c5883a 	add	r2,r2,r3
    2f1c:	14800017 	ldw	r18,0(r2)
    2f20:	14c00117 	ldw	r19,4(r2)
    2f24:	30031e16 	blt	r6,zero,3ba0 <_dtoa_r+0x1234>
    2f28:	d9000517 	ldw	r4,20(sp)
    2f2c:	d8c00f17 	ldw	r3,60(sp)
    2f30:	a823883a 	mov	r17,r21
    2f34:	a021883a 	mov	r16,r20
    2f38:	192b883a 	add	r21,r3,r4
    2f3c:	2039883a 	mov	fp,r4
    2f40:	00000f06 	br	2f80 <_dtoa_r+0x614>
    2f44:	0005883a 	mov	r2,zero
    2f48:	00d00934 	movhi	r3,16420
    2f4c:	5009883a 	mov	r4,r10
    2f50:	580b883a 	mov	r5,r11
    2f54:	180f883a 	mov	r7,r3
    2f58:	100d883a 	mov	r6,r2
    2f5c:	00088f40 	call	88f4 <__muldf3>
    2f60:	180b883a 	mov	r5,r3
    2f64:	000d883a 	mov	r6,zero
    2f68:	000f883a 	mov	r7,zero
    2f6c:	1009883a 	mov	r4,r2
    2f70:	1021883a 	mov	r16,r2
    2f74:	1823883a 	mov	r17,r3
    2f78:	0008f980 	call	8f98 <__nedf2>
    2f7c:	10004526 	beq	r2,zero,3094 <_dtoa_r+0x728>
    2f80:	900d883a 	mov	r6,r18
    2f84:	980f883a 	mov	r7,r19
    2f88:	8009883a 	mov	r4,r16
    2f8c:	880b883a 	mov	r5,r17
    2f90:	0008cb80 	call	8cb8 <__divdf3>
    2f94:	180b883a 	mov	r5,r3
    2f98:	1009883a 	mov	r4,r2
    2f9c:	00092b00 	call	92b0 <__fixdfsi>
    2fa0:	1009883a 	mov	r4,r2
    2fa4:	1029883a 	mov	r20,r2
    2fa8:	00091b80 	call	91b8 <__floatsidf>
    2fac:	180f883a 	mov	r7,r3
    2fb0:	9009883a 	mov	r4,r18
    2fb4:	980b883a 	mov	r5,r19
    2fb8:	100d883a 	mov	r6,r2
    2fbc:	00088f40 	call	88f4 <__muldf3>
    2fc0:	180f883a 	mov	r7,r3
    2fc4:	880b883a 	mov	r5,r17
    2fc8:	8009883a 	mov	r4,r16
    2fcc:	100d883a 	mov	r6,r2
    2fd0:	00088000 	call	8800 <__subdf3>
    2fd4:	1015883a 	mov	r10,r2
    2fd8:	a0800c04 	addi	r2,r20,48
    2fdc:	e0800005 	stb	r2,0(fp)
    2fe0:	e7000044 	addi	fp,fp,1
    2fe4:	1817883a 	mov	r11,r3
    2fe8:	e57fd61e 	bne	fp,r21,2f44 <_dtoa_r+0x5d8>
    2fec:	500d883a 	mov	r6,r10
    2ff0:	180f883a 	mov	r7,r3
    2ff4:	5009883a 	mov	r4,r10
    2ff8:	180b883a 	mov	r5,r3
    2ffc:	00088800 	call	8880 <__adddf3>
    3000:	100d883a 	mov	r6,r2
    3004:	9009883a 	mov	r4,r18
    3008:	980b883a 	mov	r5,r19
    300c:	180f883a 	mov	r7,r3
    3010:	1021883a 	mov	r16,r2
    3014:	1823883a 	mov	r17,r3
    3018:	00091300 	call	9130 <__ltdf2>
    301c:	10000816 	blt	r2,zero,3040 <_dtoa_r+0x6d4>
    3020:	980b883a 	mov	r5,r19
    3024:	800d883a 	mov	r6,r16
    3028:	880f883a 	mov	r7,r17
    302c:	9009883a 	mov	r4,r18
    3030:	0008f100 	call	8f10 <__eqdf2>
    3034:	1000171e 	bne	r2,zero,3094 <_dtoa_r+0x728>
    3038:	a080004c 	andi	r2,r20,1
    303c:	10001526 	beq	r2,zero,3094 <_dtoa_r+0x728>
    3040:	d8800d17 	ldw	r2,52(sp)
    3044:	d8800415 	stw	r2,16(sp)
    3048:	e009883a 	mov	r4,fp
    304c:	213fffc4 	addi	r4,r4,-1
    3050:	20c00007 	ldb	r3,0(r4)
    3054:	00800e44 	movi	r2,57
    3058:	1880081e 	bne	r3,r2,307c <_dtoa_r+0x710>
    305c:	d8800517 	ldw	r2,20(sp)
    3060:	113ffa1e 	bne	r2,r4,304c <_dtoa_r+0x6e0>
    3064:	d8c00417 	ldw	r3,16(sp)
    3068:	d9800517 	ldw	r6,20(sp)
    306c:	00800c04 	movi	r2,48
    3070:	18c00044 	addi	r3,r3,1
    3074:	d8c00415 	stw	r3,16(sp)
    3078:	30800005 	stb	r2,0(r6)
    307c:	20800003 	ldbu	r2,0(r4)
    3080:	d8c00417 	ldw	r3,16(sp)
    3084:	27000044 	addi	fp,r4,1
    3088:	10800044 	addi	r2,r2,1
    308c:	d8c00d15 	stw	r3,52(sp)
    3090:	20800005 	stb	r2,0(r4)
    3094:	d9001617 	ldw	r4,88(sp)
    3098:	d9400717 	ldw	r5,28(sp)
    309c:	0005b000 	call	5b00 <_Bfree>
    30a0:	e0000005 	stb	zero,0(fp)
    30a4:	d9800d17 	ldw	r6,52(sp)
    30a8:	d8c02717 	ldw	r3,156(sp)
    30ac:	d9002917 	ldw	r4,164(sp)
    30b0:	30800044 	addi	r2,r6,1
    30b4:	18800015 	stw	r2,0(r3)
    30b8:	20029c26 	beq	r4,zero,3b2c <_dtoa_r+0x11c0>
    30bc:	d8c00517 	ldw	r3,20(sp)
    30c0:	27000015 	stw	fp,0(r4)
    30c4:	003e5d06 	br	2a3c <_dtoa_r+0xd0>
    30c8:	d9800d17 	ldw	r6,52(sp)
    30cc:	00c00074 	movhi	r3,1
    30d0:	18f45804 	addi	r3,r3,-11936
    30d4:	d9001217 	ldw	r4,72(sp)
    30d8:	300490fa 	slli	r2,r6,3
    30dc:	d9401317 	ldw	r5,76(sp)
    30e0:	10c5883a 	add	r2,r2,r3
    30e4:	12000017 	ldw	r8,0(r2)
    30e8:	12400117 	ldw	r9,4(r2)
    30ec:	400d883a 	mov	r6,r8
    30f0:	480f883a 	mov	r7,r9
    30f4:	00091300 	call	9130 <__ltdf2>
    30f8:	1000030e 	bge	r2,zero,3108 <_dtoa_r+0x79c>
    30fc:	d8800d17 	ldw	r2,52(sp)
    3100:	10bfffc4 	addi	r2,r2,-1
    3104:	d8800d15 	stw	r2,52(sp)
    3108:	d8000c15 	stw	zero,48(sp)
    310c:	003ea806 	br	2bb0 <_dtoa_r+0x244>
    3110:	d9000b17 	ldw	r4,44(sp)
    3114:	202cc03a 	cmpne	r22,r4,zero
    3118:	b000c71e 	bne	r22,zero,3438 <_dtoa_r+0xacc>
    311c:	dc001117 	ldw	r16,68(sp)
    3120:	dc801017 	ldw	r18,64(sp)
    3124:	0027883a 	mov	r19,zero
    3128:	04000b0e 	bge	zero,r16,3158 <_dtoa_r+0x7ec>
    312c:	d8c00a17 	ldw	r3,40(sp)
    3130:	00c0090e 	bge	zero,r3,3158 <_dtoa_r+0x7ec>
    3134:	8005883a 	mov	r2,r16
    3138:	1c011316 	blt	r3,r16,3588 <_dtoa_r+0xc1c>
    313c:	d9000a17 	ldw	r4,40(sp)
    3140:	d9801117 	ldw	r6,68(sp)
    3144:	80a1c83a 	sub	r16,r16,r2
    3148:	2089c83a 	sub	r4,r4,r2
    314c:	308dc83a 	sub	r6,r6,r2
    3150:	d9000a15 	stw	r4,40(sp)
    3154:	d9801115 	stw	r6,68(sp)
    3158:	d8801017 	ldw	r2,64(sp)
    315c:	0080150e 	bge	zero,r2,31b4 <_dtoa_r+0x848>
    3160:	d8c00b17 	ldw	r3,44(sp)
    3164:	1805003a 	cmpeq	r2,r3,zero
    3168:	1001c91e 	bne	r2,zero,3890 <_dtoa_r+0xf24>
    316c:	04800e0e 	bge	zero,r18,31a8 <_dtoa_r+0x83c>
    3170:	d9001617 	ldw	r4,88(sp)
    3174:	980b883a 	mov	r5,r19
    3178:	900d883a 	mov	r6,r18
    317c:	00068b40 	call	68b4 <__pow5mult>
    3180:	d9001617 	ldw	r4,88(sp)
    3184:	d9800717 	ldw	r6,28(sp)
    3188:	100b883a 	mov	r5,r2
    318c:	1027883a 	mov	r19,r2
    3190:	00065900 	call	6590 <__multiply>
    3194:	d9001617 	ldw	r4,88(sp)
    3198:	d9400717 	ldw	r5,28(sp)
    319c:	1023883a 	mov	r17,r2
    31a0:	0005b000 	call	5b00 <_Bfree>
    31a4:	dc400715 	stw	r17,28(sp)
    31a8:	d9001017 	ldw	r4,64(sp)
    31ac:	248dc83a 	sub	r6,r4,r18
    31b0:	30010e1e 	bne	r6,zero,35ec <_dtoa_r+0xc80>
    31b4:	d9001617 	ldw	r4,88(sp)
    31b8:	04400044 	movi	r17,1
    31bc:	880b883a 	mov	r5,r17
    31c0:	00067780 	call	6778 <__i2b>
    31c4:	d9800917 	ldw	r6,36(sp)
    31c8:	1025883a 	mov	r18,r2
    31cc:	0180040e 	bge	zero,r6,31e0 <_dtoa_r+0x874>
    31d0:	d9001617 	ldw	r4,88(sp)
    31d4:	100b883a 	mov	r5,r2
    31d8:	00068b40 	call	68b4 <__pow5mult>
    31dc:	1025883a 	mov	r18,r2
    31e0:	d8801717 	ldw	r2,92(sp)
    31e4:	8880f30e 	bge	r17,r2,35b4 <_dtoa_r+0xc48>
    31e8:	0023883a 	mov	r17,zero
    31ec:	d9800917 	ldw	r6,36(sp)
    31f0:	30019e1e 	bne	r6,zero,386c <_dtoa_r+0xf00>
    31f4:	00c00044 	movi	r3,1
    31f8:	d9000a17 	ldw	r4,40(sp)
    31fc:	20c5883a 	add	r2,r4,r3
    3200:	10c007cc 	andi	r3,r2,31
    3204:	1800841e 	bne	r3,zero,3418 <_dtoa_r+0xaac>
    3208:	00800704 	movi	r2,28
    320c:	d9000a17 	ldw	r4,40(sp)
    3210:	d9801117 	ldw	r6,68(sp)
    3214:	80a1883a 	add	r16,r16,r2
    3218:	2089883a 	add	r4,r4,r2
    321c:	308d883a 	add	r6,r6,r2
    3220:	d9000a15 	stw	r4,40(sp)
    3224:	d9801115 	stw	r6,68(sp)
    3228:	d8801117 	ldw	r2,68(sp)
    322c:	0080050e 	bge	zero,r2,3244 <_dtoa_r+0x8d8>
    3230:	d9400717 	ldw	r5,28(sp)
    3234:	d9001617 	ldw	r4,88(sp)
    3238:	100d883a 	mov	r6,r2
    323c:	00064440 	call	6444 <__lshift>
    3240:	d8800715 	stw	r2,28(sp)
    3244:	d8c00a17 	ldw	r3,40(sp)
    3248:	00c0050e 	bge	zero,r3,3260 <_dtoa_r+0x8f4>
    324c:	d9001617 	ldw	r4,88(sp)
    3250:	900b883a 	mov	r5,r18
    3254:	180d883a 	mov	r6,r3
    3258:	00064440 	call	6444 <__lshift>
    325c:	1025883a 	mov	r18,r2
    3260:	d9000c17 	ldw	r4,48(sp)
    3264:	2005003a 	cmpeq	r2,r4,zero
    3268:	10016f26 	beq	r2,zero,3828 <_dtoa_r+0xebc>
    326c:	d9000f17 	ldw	r4,60(sp)
    3270:	0102170e 	bge	zero,r4,3ad0 <_dtoa_r+0x1164>
    3274:	d9800b17 	ldw	r6,44(sp)
    3278:	3005003a 	cmpeq	r2,r6,zero
    327c:	1000881e 	bne	r2,zero,34a0 <_dtoa_r+0xb34>
    3280:	0400050e 	bge	zero,r16,3298 <_dtoa_r+0x92c>
    3284:	d9001617 	ldw	r4,88(sp)
    3288:	980b883a 	mov	r5,r19
    328c:	800d883a 	mov	r6,r16
    3290:	00064440 	call	6444 <__lshift>
    3294:	1027883a 	mov	r19,r2
    3298:	8804c03a 	cmpne	r2,r17,zero
    329c:	1002541e 	bne	r2,zero,3bf0 <_dtoa_r+0x1284>
    32a0:	980b883a 	mov	r5,r19
    32a4:	dd800517 	ldw	r22,20(sp)
    32a8:	dcc00615 	stw	r19,24(sp)
    32ac:	a700004c 	andi	fp,r20,1
    32b0:	2827883a 	mov	r19,r5
    32b4:	d9000717 	ldw	r4,28(sp)
    32b8:	900b883a 	mov	r5,r18
    32bc:	00027540 	call	2754 <quorem>
    32c0:	d9000717 	ldw	r4,28(sp)
    32c4:	d9400617 	ldw	r5,24(sp)
    32c8:	1023883a 	mov	r17,r2
    32cc:	8dc00c04 	addi	r23,r17,48
    32d0:	0005c5c0 	call	5c5c <__mcmp>
    32d4:	d9001617 	ldw	r4,88(sp)
    32d8:	900b883a 	mov	r5,r18
    32dc:	980d883a 	mov	r6,r19
    32e0:	1029883a 	mov	r20,r2
    32e4:	00062b80 	call	62b8 <__mdiff>
    32e8:	102b883a 	mov	r21,r2
    32ec:	10800317 	ldw	r2,12(r2)
    32f0:	1001281e 	bne	r2,zero,3794 <_dtoa_r+0xe28>
    32f4:	d9000717 	ldw	r4,28(sp)
    32f8:	a80b883a 	mov	r5,r21
    32fc:	0005c5c0 	call	5c5c <__mcmp>
    3300:	d9001617 	ldw	r4,88(sp)
    3304:	1021883a 	mov	r16,r2
    3308:	a80b883a 	mov	r5,r21
    330c:	0005b000 	call	5b00 <_Bfree>
    3310:	8000041e 	bne	r16,zero,3324 <_dtoa_r+0x9b8>
    3314:	d8801717 	ldw	r2,92(sp)
    3318:	1000021e 	bne	r2,zero,3324 <_dtoa_r+0x9b8>
    331c:	e004c03a 	cmpne	r2,fp,zero
    3320:	10011726 	beq	r2,zero,3780 <_dtoa_r+0xe14>
    3324:	a0010616 	blt	r20,zero,3740 <_dtoa_r+0xdd4>
    3328:	a000041e 	bne	r20,zero,333c <_dtoa_r+0x9d0>
    332c:	d8c01717 	ldw	r3,92(sp)
    3330:	1800021e 	bne	r3,zero,333c <_dtoa_r+0x9d0>
    3334:	e004c03a 	cmpne	r2,fp,zero
    3338:	10010126 	beq	r2,zero,3740 <_dtoa_r+0xdd4>
    333c:	04023d16 	blt	zero,r16,3c34 <_dtoa_r+0x12c8>
    3340:	b5c00005 	stb	r23,0(r22)
    3344:	d9800517 	ldw	r6,20(sp)
    3348:	d9000f17 	ldw	r4,60(sp)
    334c:	b5800044 	addi	r22,r22,1
    3350:	3105883a 	add	r2,r6,r4
    3354:	b0806526 	beq	r22,r2,34ec <_dtoa_r+0xb80>
    3358:	d9400717 	ldw	r5,28(sp)
    335c:	d9001617 	ldw	r4,88(sp)
    3360:	01800284 	movi	r6,10
    3364:	000f883a 	mov	r7,zero
    3368:	00067b40 	call	67b4 <__multadd>
    336c:	d8800715 	stw	r2,28(sp)
    3370:	d8800617 	ldw	r2,24(sp)
    3374:	14c10c26 	beq	r2,r19,37a8 <_dtoa_r+0xe3c>
    3378:	d9400617 	ldw	r5,24(sp)
    337c:	d9001617 	ldw	r4,88(sp)
    3380:	01800284 	movi	r6,10
    3384:	000f883a 	mov	r7,zero
    3388:	00067b40 	call	67b4 <__multadd>
    338c:	d9001617 	ldw	r4,88(sp)
    3390:	980b883a 	mov	r5,r19
    3394:	01800284 	movi	r6,10
    3398:	000f883a 	mov	r7,zero
    339c:	d8800615 	stw	r2,24(sp)
    33a0:	00067b40 	call	67b4 <__multadd>
    33a4:	1027883a 	mov	r19,r2
    33a8:	003fc206 	br	32b4 <_dtoa_r+0x948>
    33ac:	2445c83a 	sub	r2,r4,r17
    33b0:	a088983a 	sll	r4,r20,r2
    33b4:	003e4b06 	br	2ce4 <_dtoa_r+0x378>
    33b8:	01bfffc4 	movi	r6,-1
    33bc:	00800044 	movi	r2,1
    33c0:	d9800e15 	stw	r6,56(sp)
    33c4:	d9800f15 	stw	r6,60(sp)
    33c8:	d8800b15 	stw	r2,44(sp)
    33cc:	d8c01617 	ldw	r3,88(sp)
    33d0:	008005c4 	movi	r2,23
    33d4:	18001115 	stw	zero,68(r3)
    33d8:	1580082e 	bgeu	r2,r22,33fc <_dtoa_r+0xa90>
    33dc:	00c00104 	movi	r3,4
    33e0:	0009883a 	mov	r4,zero
    33e4:	18c7883a 	add	r3,r3,r3
    33e8:	18800504 	addi	r2,r3,20
    33ec:	21000044 	addi	r4,r4,1
    33f0:	b0bffc2e 	bgeu	r22,r2,33e4 <_dtoa_r+0xa78>
    33f4:	d9801617 	ldw	r6,88(sp)
    33f8:	31001115 	stw	r4,68(r6)
    33fc:	dc000f17 	ldw	r16,60(sp)
    3400:	003e4b06 	br	2d30 <_dtoa_r+0x3c4>
    3404:	d9801717 	ldw	r6,92(sp)
    3408:	0023883a 	mov	r17,zero
    340c:	31bfff04 	addi	r6,r6,-4
    3410:	d9801715 	stw	r6,92(sp)
    3414:	003df806 	br	2bf8 <_dtoa_r+0x28c>
    3418:	00800804 	movi	r2,32
    341c:	10c9c83a 	sub	r4,r2,r3
    3420:	00c00104 	movi	r3,4
    3424:	19005a16 	blt	r3,r4,3590 <_dtoa_r+0xc24>
    3428:	008000c4 	movi	r2,3
    342c:	113f7e16 	blt	r2,r4,3228 <_dtoa_r+0x8bc>
    3430:	20800704 	addi	r2,r4,28
    3434:	003f7506 	br	320c <_dtoa_r+0x8a0>
    3438:	d9801717 	ldw	r6,92(sp)
    343c:	00800044 	movi	r2,1
    3440:	1180a10e 	bge	r2,r6,36c8 <_dtoa_r+0xd5c>
    3444:	d9800f17 	ldw	r6,60(sp)
    3448:	d8c01017 	ldw	r3,64(sp)
    344c:	30bfffc4 	addi	r2,r6,-1
    3450:	1881c616 	blt	r3,r2,3b6c <_dtoa_r+0x1200>
    3454:	18a5c83a 	sub	r18,r3,r2
    3458:	d8800f17 	ldw	r2,60(sp)
    345c:	10026216 	blt	r2,zero,3de8 <_dtoa_r+0x147c>
    3460:	dc001117 	ldw	r16,68(sp)
    3464:	1007883a 	mov	r3,r2
    3468:	d9800a17 	ldw	r6,40(sp)
    346c:	d8801117 	ldw	r2,68(sp)
    3470:	d9001617 	ldw	r4,88(sp)
    3474:	30cd883a 	add	r6,r6,r3
    3478:	10c5883a 	add	r2,r2,r3
    347c:	01400044 	movi	r5,1
    3480:	d9800a15 	stw	r6,40(sp)
    3484:	d8801115 	stw	r2,68(sp)
    3488:	00067780 	call	6778 <__i2b>
    348c:	1027883a 	mov	r19,r2
    3490:	003f2506 	br	3128 <_dtoa_r+0x7bc>
    3494:	00c00074 	movhi	r3,1
    3498:	18f43b04 	addi	r3,r3,-12052
    349c:	003d6706 	br	2a3c <_dtoa_r+0xd0>
    34a0:	dd800517 	ldw	r22,20(sp)
    34a4:	04000044 	movi	r16,1
    34a8:	00000706 	br	34c8 <_dtoa_r+0xb5c>
    34ac:	d9400717 	ldw	r5,28(sp)
    34b0:	d9001617 	ldw	r4,88(sp)
    34b4:	01800284 	movi	r6,10
    34b8:	000f883a 	mov	r7,zero
    34bc:	00067b40 	call	67b4 <__multadd>
    34c0:	d8800715 	stw	r2,28(sp)
    34c4:	84000044 	addi	r16,r16,1
    34c8:	d9000717 	ldw	r4,28(sp)
    34cc:	900b883a 	mov	r5,r18
    34d0:	00027540 	call	2754 <quorem>
    34d4:	15c00c04 	addi	r23,r2,48
    34d8:	b5c00005 	stb	r23,0(r22)
    34dc:	d8c00f17 	ldw	r3,60(sp)
    34e0:	b5800044 	addi	r22,r22,1
    34e4:	80fff116 	blt	r16,r3,34ac <_dtoa_r+0xb40>
    34e8:	d8000615 	stw	zero,24(sp)
    34ec:	d9400717 	ldw	r5,28(sp)
    34f0:	d9001617 	ldw	r4,88(sp)
    34f4:	01800044 	movi	r6,1
    34f8:	00064440 	call	6444 <__lshift>
    34fc:	1009883a 	mov	r4,r2
    3500:	900b883a 	mov	r5,r18
    3504:	d8800715 	stw	r2,28(sp)
    3508:	0005c5c0 	call	5c5c <__mcmp>
    350c:	00803c0e 	bge	zero,r2,3600 <_dtoa_r+0xc94>
    3510:	b009883a 	mov	r4,r22
    3514:	213fffc4 	addi	r4,r4,-1
    3518:	21400003 	ldbu	r5,0(r4)
    351c:	00800e44 	movi	r2,57
    3520:	28c03fcc 	andi	r3,r5,255
    3524:	18c0201c 	xori	r3,r3,128
    3528:	18ffe004 	addi	r3,r3,-128
    352c:	1881981e 	bne	r3,r2,3b90 <_dtoa_r+0x1224>
    3530:	d9800517 	ldw	r6,20(sp)
    3534:	21bff71e 	bne	r4,r6,3514 <_dtoa_r+0xba8>
    3538:	d8800d17 	ldw	r2,52(sp)
    353c:	37000044 	addi	fp,r6,1
    3540:	10800044 	addi	r2,r2,1
    3544:	d8800d15 	stw	r2,52(sp)
    3548:	00800c44 	movi	r2,49
    354c:	30800005 	stb	r2,0(r6)
    3550:	d9001617 	ldw	r4,88(sp)
    3554:	900b883a 	mov	r5,r18
    3558:	0005b000 	call	5b00 <_Bfree>
    355c:	983ecd26 	beq	r19,zero,3094 <_dtoa_r+0x728>
    3560:	d8c00617 	ldw	r3,24(sp)
    3564:	18000426 	beq	r3,zero,3578 <_dtoa_r+0xc0c>
    3568:	1cc00326 	beq	r3,r19,3578 <_dtoa_r+0xc0c>
    356c:	d9001617 	ldw	r4,88(sp)
    3570:	180b883a 	mov	r5,r3
    3574:	0005b000 	call	5b00 <_Bfree>
    3578:	d9001617 	ldw	r4,88(sp)
    357c:	980b883a 	mov	r5,r19
    3580:	0005b000 	call	5b00 <_Bfree>
    3584:	003ec306 	br	3094 <_dtoa_r+0x728>
    3588:	1805883a 	mov	r2,r3
    358c:	003eeb06 	br	313c <_dtoa_r+0x7d0>
    3590:	d9800a17 	ldw	r6,40(sp)
    3594:	d8c01117 	ldw	r3,68(sp)
    3598:	20bfff04 	addi	r2,r4,-4
    359c:	308d883a 	add	r6,r6,r2
    35a0:	1887883a 	add	r3,r3,r2
    35a4:	80a1883a 	add	r16,r16,r2
    35a8:	d9800a15 	stw	r6,40(sp)
    35ac:	d8c01115 	stw	r3,68(sp)
    35b0:	003f1d06 	br	3228 <_dtoa_r+0x8bc>
    35b4:	a03f0c1e 	bne	r20,zero,31e8 <_dtoa_r+0x87c>
    35b8:	00800434 	movhi	r2,16
    35bc:	10bfffc4 	addi	r2,r2,-1
    35c0:	a884703a 	and	r2,r21,r2
    35c4:	103f081e 	bne	r2,zero,31e8 <_dtoa_r+0x87c>
    35c8:	a89ffc2c 	andhi	r2,r21,32752
    35cc:	103f0626 	beq	r2,zero,31e8 <_dtoa_r+0x87c>
    35d0:	d8c01117 	ldw	r3,68(sp)
    35d4:	d9000a17 	ldw	r4,40(sp)
    35d8:	18c00044 	addi	r3,r3,1
    35dc:	21000044 	addi	r4,r4,1
    35e0:	d8c01115 	stw	r3,68(sp)
    35e4:	d9000a15 	stw	r4,40(sp)
    35e8:	003f0006 	br	31ec <_dtoa_r+0x880>
    35ec:	d9400717 	ldw	r5,28(sp)
    35f0:	d9001617 	ldw	r4,88(sp)
    35f4:	00068b40 	call	68b4 <__pow5mult>
    35f8:	d8800715 	stw	r2,28(sp)
    35fc:	003eed06 	br	31b4 <_dtoa_r+0x848>
    3600:	1000021e 	bne	r2,zero,360c <_dtoa_r+0xca0>
    3604:	b880004c 	andi	r2,r23,1
    3608:	103fc11e 	bne	r2,zero,3510 <_dtoa_r+0xba4>
    360c:	b5bfffc4 	addi	r22,r22,-1
    3610:	b0c00007 	ldb	r3,0(r22)
    3614:	00800c04 	movi	r2,48
    3618:	18bffc26 	beq	r3,r2,360c <_dtoa_r+0xca0>
    361c:	b7000044 	addi	fp,r22,1
    3620:	003fcb06 	br	3550 <_dtoa_r+0xbe4>
    3624:	d9800d17 	ldw	r6,52(sp)
    3628:	018fc83a 	sub	r7,zero,r6
    362c:	3801f726 	beq	r7,zero,3e0c <_dtoa_r+0x14a0>
    3630:	398003cc 	andi	r6,r7,15
    3634:	300c90fa 	slli	r6,r6,3
    3638:	01400074 	movhi	r5,1
    363c:	29745804 	addi	r5,r5,-11936
    3640:	d9001217 	ldw	r4,72(sp)
    3644:	314d883a 	add	r6,r6,r5
    3648:	30c00117 	ldw	r3,4(r6)
    364c:	30800017 	ldw	r2,0(r6)
    3650:	d9401317 	ldw	r5,76(sp)
    3654:	3821d13a 	srai	r16,r7,4
    3658:	100d883a 	mov	r6,r2
    365c:	180f883a 	mov	r7,r3
    3660:	00088f40 	call	88f4 <__muldf3>
    3664:	1011883a 	mov	r8,r2
    3668:	1813883a 	mov	r9,r3
    366c:	1029883a 	mov	r20,r2
    3670:	182b883a 	mov	r21,r3
    3674:	8001e526 	beq	r16,zero,3e0c <_dtoa_r+0x14a0>
    3678:	05800084 	movi	r22,2
    367c:	04400074 	movhi	r17,1
    3680:	8c748a04 	addi	r17,r17,-11736
    3684:	8080004c 	andi	r2,r16,1
    3688:	1005003a 	cmpeq	r2,r2,zero
    368c:	1000081e 	bne	r2,zero,36b0 <_dtoa_r+0xd44>
    3690:	89800017 	ldw	r6,0(r17)
    3694:	89c00117 	ldw	r7,4(r17)
    3698:	480b883a 	mov	r5,r9
    369c:	4009883a 	mov	r4,r8
    36a0:	00088f40 	call	88f4 <__muldf3>
    36a4:	1011883a 	mov	r8,r2
    36a8:	b5800044 	addi	r22,r22,1
    36ac:	1813883a 	mov	r9,r3
    36b0:	8021d07a 	srai	r16,r16,1
    36b4:	8c400204 	addi	r17,r17,8
    36b8:	803ff21e 	bne	r16,zero,3684 <_dtoa_r+0xd18>
    36bc:	4029883a 	mov	r20,r8
    36c0:	482b883a 	mov	r21,r9
    36c4:	003dca06 	br	2df0 <_dtoa_r+0x484>
    36c8:	d9000817 	ldw	r4,32(sp)
    36cc:	2005003a 	cmpeq	r2,r4,zero
    36d0:	1001f61e 	bne	r2,zero,3eac <_dtoa_r+0x1540>
    36d4:	dc001117 	ldw	r16,68(sp)
    36d8:	dc801017 	ldw	r18,64(sp)
    36dc:	18c10cc4 	addi	r3,r3,1075
    36e0:	003f6106 	br	3468 <_dtoa_r+0xafc>
    36e4:	d8000b15 	stw	zero,44(sp)
    36e8:	d9802617 	ldw	r6,152(sp)
    36ec:	d8c00d17 	ldw	r3,52(sp)
    36f0:	30800044 	addi	r2,r6,1
    36f4:	18ad883a 	add	r22,r3,r2
    36f8:	b13fffc4 	addi	r4,r22,-1
    36fc:	d9000e15 	stw	r4,56(sp)
    3700:	0581f60e 	bge	zero,r22,3edc <_dtoa_r+0x1570>
    3704:	dd800f15 	stw	r22,60(sp)
    3708:	003f3006 	br	33cc <_dtoa_r+0xa60>
    370c:	d8000b15 	stw	zero,44(sp)
    3710:	d9002617 	ldw	r4,152(sp)
    3714:	0101eb0e 	bge	zero,r4,3ec4 <_dtoa_r+0x1558>
    3718:	202d883a 	mov	r22,r4
    371c:	d9000e15 	stw	r4,56(sp)
    3720:	d9000f15 	stw	r4,60(sp)
    3724:	003f2906 	br	33cc <_dtoa_r+0xa60>
    3728:	01800044 	movi	r6,1
    372c:	d9800b15 	stw	r6,44(sp)
    3730:	003ff706 	br	3710 <_dtoa_r+0xda4>
    3734:	01000044 	movi	r4,1
    3738:	d9000b15 	stw	r4,44(sp)
    373c:	003fea06 	br	36e8 <_dtoa_r+0xd7c>
    3740:	04000c0e 	bge	zero,r16,3774 <_dtoa_r+0xe08>
    3744:	d9400717 	ldw	r5,28(sp)
    3748:	d9001617 	ldw	r4,88(sp)
    374c:	01800044 	movi	r6,1
    3750:	00064440 	call	6444 <__lshift>
    3754:	1009883a 	mov	r4,r2
    3758:	900b883a 	mov	r5,r18
    375c:	d8800715 	stw	r2,28(sp)
    3760:	0005c5c0 	call	5c5c <__mcmp>
    3764:	0081e00e 	bge	zero,r2,3ee8 <_dtoa_r+0x157c>
    3768:	bdc00044 	addi	r23,r23,1
    376c:	00800e84 	movi	r2,58
    3770:	b881a226 	beq	r23,r2,3dfc <_dtoa_r+0x1490>
    3774:	b7000044 	addi	fp,r22,1
    3778:	b5c00005 	stb	r23,0(r22)
    377c:	003f7406 	br	3550 <_dtoa_r+0xbe4>
    3780:	00800e44 	movi	r2,57
    3784:	b8819d26 	beq	r23,r2,3dfc <_dtoa_r+0x1490>
    3788:	053ffa0e 	bge	zero,r20,3774 <_dtoa_r+0xe08>
    378c:	8dc00c44 	addi	r23,r17,49
    3790:	003ff806 	br	3774 <_dtoa_r+0xe08>
    3794:	d9001617 	ldw	r4,88(sp)
    3798:	a80b883a 	mov	r5,r21
    379c:	04000044 	movi	r16,1
    37a0:	0005b000 	call	5b00 <_Bfree>
    37a4:	003edf06 	br	3324 <_dtoa_r+0x9b8>
    37a8:	d9001617 	ldw	r4,88(sp)
    37ac:	980b883a 	mov	r5,r19
    37b0:	01800284 	movi	r6,10
    37b4:	000f883a 	mov	r7,zero
    37b8:	00067b40 	call	67b4 <__multadd>
    37bc:	1027883a 	mov	r19,r2
    37c0:	d8800615 	stw	r2,24(sp)
    37c4:	003ebb06 	br	32b4 <_dtoa_r+0x948>
    37c8:	d9801117 	ldw	r6,68(sp)
    37cc:	d8800d17 	ldw	r2,52(sp)
    37d0:	d8000915 	stw	zero,36(sp)
    37d4:	308dc83a 	sub	r6,r6,r2
    37d8:	0087c83a 	sub	r3,zero,r2
    37dc:	d9801115 	stw	r6,68(sp)
    37e0:	d8c01015 	stw	r3,64(sp)
    37e4:	003cfe06 	br	2be0 <_dtoa_r+0x274>
    37e8:	018dc83a 	sub	r6,zero,r6
    37ec:	d9801115 	stw	r6,68(sp)
    37f0:	d8000a15 	stw	zero,40(sp)
    37f4:	003cf306 	br	2bc4 <_dtoa_r+0x258>
    37f8:	d9000d17 	ldw	r4,52(sp)
    37fc:	00091b80 	call	91b8 <__floatsidf>
    3800:	880b883a 	mov	r5,r17
    3804:	8009883a 	mov	r4,r16
    3808:	180f883a 	mov	r7,r3
    380c:	100d883a 	mov	r6,r2
    3810:	0008f980 	call	8f98 <__nedf2>
    3814:	103ce126 	beq	r2,zero,2b9c <_dtoa_r+0x230>
    3818:	d9800d17 	ldw	r6,52(sp)
    381c:	31bfffc4 	addi	r6,r6,-1
    3820:	d9800d15 	stw	r6,52(sp)
    3824:	003cdd06 	br	2b9c <_dtoa_r+0x230>
    3828:	d9000717 	ldw	r4,28(sp)
    382c:	900b883a 	mov	r5,r18
    3830:	0005c5c0 	call	5c5c <__mcmp>
    3834:	103e8d0e 	bge	r2,zero,326c <_dtoa_r+0x900>
    3838:	d9400717 	ldw	r5,28(sp)
    383c:	d9001617 	ldw	r4,88(sp)
    3840:	01800284 	movi	r6,10
    3844:	000f883a 	mov	r7,zero
    3848:	00067b40 	call	67b4 <__multadd>
    384c:	d9800d17 	ldw	r6,52(sp)
    3850:	d8800715 	stw	r2,28(sp)
    3854:	31bfffc4 	addi	r6,r6,-1
    3858:	d9800d15 	stw	r6,52(sp)
    385c:	b001a71e 	bne	r22,zero,3efc <_dtoa_r+0x1590>
    3860:	d8800e17 	ldw	r2,56(sp)
    3864:	d8800f15 	stw	r2,60(sp)
    3868:	003e8006 	br	326c <_dtoa_r+0x900>
    386c:	90800417 	ldw	r2,16(r18)
    3870:	1085883a 	add	r2,r2,r2
    3874:	1085883a 	add	r2,r2,r2
    3878:	1485883a 	add	r2,r2,r18
    387c:	11000417 	ldw	r4,16(r2)
    3880:	0005b280 	call	5b28 <__hi0bits>
    3884:	00c00804 	movi	r3,32
    3888:	1887c83a 	sub	r3,r3,r2
    388c:	003e5a06 	br	31f8 <_dtoa_r+0x88c>
    3890:	d9400717 	ldw	r5,28(sp)
    3894:	d9801017 	ldw	r6,64(sp)
    3898:	d9001617 	ldw	r4,88(sp)
    389c:	00068b40 	call	68b4 <__pow5mult>
    38a0:	d8800715 	stw	r2,28(sp)
    38a4:	003e4306 	br	31b4 <_dtoa_r+0x848>
    38a8:	d9800f17 	ldw	r6,60(sp)
    38ac:	d8800d17 	ldw	r2,52(sp)
    38b0:	d9800315 	stw	r6,12(sp)
    38b4:	d8800415 	stw	r2,16(sp)
    38b8:	d8c00b17 	ldw	r3,44(sp)
    38bc:	1805003a 	cmpeq	r2,r3,zero
    38c0:	1000e21e 	bne	r2,zero,3c4c <_dtoa_r+0x12e0>
    38c4:	d9000317 	ldw	r4,12(sp)
    38c8:	0005883a 	mov	r2,zero
    38cc:	00cff834 	movhi	r3,16352
    38d0:	200c90fa 	slli	r6,r4,3
    38d4:	01000074 	movhi	r4,1
    38d8:	21345804 	addi	r4,r4,-11936
    38dc:	180b883a 	mov	r5,r3
    38e0:	310d883a 	add	r6,r6,r4
    38e4:	327fff17 	ldw	r9,-4(r6)
    38e8:	323ffe17 	ldw	r8,-8(r6)
    38ec:	1009883a 	mov	r4,r2
    38f0:	480f883a 	mov	r7,r9
    38f4:	400d883a 	mov	r6,r8
    38f8:	0008cb80 	call	8cb8 <__divdf3>
    38fc:	180b883a 	mov	r5,r3
    3900:	b00d883a 	mov	r6,r22
    3904:	b80f883a 	mov	r7,r23
    3908:	1009883a 	mov	r4,r2
    390c:	00088000 	call	8800 <__subdf3>
    3910:	a80b883a 	mov	r5,r21
    3914:	a009883a 	mov	r4,r20
    3918:	d8c01915 	stw	r3,100(sp)
    391c:	d8801815 	stw	r2,96(sp)
    3920:	00092b00 	call	92b0 <__fixdfsi>
    3924:	1009883a 	mov	r4,r2
    3928:	1027883a 	mov	r19,r2
    392c:	00091b80 	call	91b8 <__floatsidf>
    3930:	a80b883a 	mov	r5,r21
    3934:	a009883a 	mov	r4,r20
    3938:	180f883a 	mov	r7,r3
    393c:	100d883a 	mov	r6,r2
    3940:	00088000 	call	8800 <__subdf3>
    3944:	d9801817 	ldw	r6,96(sp)
    3948:	1823883a 	mov	r17,r3
    394c:	d8801415 	stw	r2,80(sp)
    3950:	302d883a 	mov	r22,r6
    3954:	d9800517 	ldw	r6,20(sp)
    3958:	9cc00c04 	addi	r19,r19,48
    395c:	dc401515 	stw	r17,84(sp)
    3960:	d8c01917 	ldw	r3,100(sp)
    3964:	34c00005 	stb	r19,0(r6)
    3968:	d8800517 	ldw	r2,20(sp)
    396c:	d9401917 	ldw	r5,100(sp)
    3970:	d9801417 	ldw	r6,80(sp)
    3974:	b009883a 	mov	r4,r22
    3978:	880f883a 	mov	r7,r17
    397c:	182f883a 	mov	r23,r3
    3980:	17000044 	addi	fp,r2,1
    3984:	00090200 	call	9020 <__gtdf2>
    3988:	00804e16 	blt	zero,r2,3ac4 <_dtoa_r+0x1158>
    398c:	d9801417 	ldw	r6,80(sp)
    3990:	0005883a 	mov	r2,zero
    3994:	00cffc34 	movhi	r3,16368
    3998:	180b883a 	mov	r5,r3
    399c:	880f883a 	mov	r7,r17
    39a0:	1009883a 	mov	r4,r2
    39a4:	00088000 	call	8800 <__subdf3>
    39a8:	d9401917 	ldw	r5,100(sp)
    39ac:	180f883a 	mov	r7,r3
    39b0:	b009883a 	mov	r4,r22
    39b4:	100d883a 	mov	r6,r2
    39b8:	00090200 	call	9020 <__gtdf2>
    39bc:	00bda216 	blt	zero,r2,3048 <_dtoa_r+0x6dc>
    39c0:	d8c00317 	ldw	r3,12(sp)
    39c4:	00800044 	movi	r2,1
    39c8:	10c01216 	blt	r2,r3,3a14 <_dtoa_r+0x10a8>
    39cc:	003d4506 	br	2ee4 <_dtoa_r+0x578>
    39d0:	d9801417 	ldw	r6,80(sp)
    39d4:	0005883a 	mov	r2,zero
    39d8:	00cffc34 	movhi	r3,16368
    39dc:	180b883a 	mov	r5,r3
    39e0:	880f883a 	mov	r7,r17
    39e4:	1009883a 	mov	r4,r2
    39e8:	00088000 	call	8800 <__subdf3>
    39ec:	d9c01b17 	ldw	r7,108(sp)
    39f0:	180b883a 	mov	r5,r3
    39f4:	1009883a 	mov	r4,r2
    39f8:	b00d883a 	mov	r6,r22
    39fc:	00091300 	call	9130 <__ltdf2>
    3a00:	103d9116 	blt	r2,zero,3048 <_dtoa_r+0x6dc>
    3a04:	d9800517 	ldw	r6,20(sp)
    3a08:	d9000317 	ldw	r4,12(sp)
    3a0c:	3105883a 	add	r2,r6,r4
    3a10:	e0bd3426 	beq	fp,r2,2ee4 <_dtoa_r+0x578>
    3a14:	04500934 	movhi	r17,16420
    3a18:	0021883a 	mov	r16,zero
    3a1c:	b80b883a 	mov	r5,r23
    3a20:	b009883a 	mov	r4,r22
    3a24:	800d883a 	mov	r6,r16
    3a28:	880f883a 	mov	r7,r17
    3a2c:	00088f40 	call	88f4 <__muldf3>
    3a30:	d9401517 	ldw	r5,84(sp)
    3a34:	d9001417 	ldw	r4,80(sp)
    3a38:	880f883a 	mov	r7,r17
    3a3c:	000d883a 	mov	r6,zero
    3a40:	d8801a15 	stw	r2,104(sp)
    3a44:	d8c01b15 	stw	r3,108(sp)
    3a48:	00088f40 	call	88f4 <__muldf3>
    3a4c:	180b883a 	mov	r5,r3
    3a50:	1009883a 	mov	r4,r2
    3a54:	1823883a 	mov	r17,r3
    3a58:	1021883a 	mov	r16,r2
    3a5c:	00092b00 	call	92b0 <__fixdfsi>
    3a60:	1009883a 	mov	r4,r2
    3a64:	102b883a 	mov	r21,r2
    3a68:	00091b80 	call	91b8 <__floatsidf>
    3a6c:	880b883a 	mov	r5,r17
    3a70:	8009883a 	mov	r4,r16
    3a74:	180f883a 	mov	r7,r3
    3a78:	100d883a 	mov	r6,r2
    3a7c:	00088000 	call	8800 <__subdf3>
    3a80:	1021883a 	mov	r16,r2
    3a84:	d9001b17 	ldw	r4,108(sp)
    3a88:	1823883a 	mov	r17,r3
    3a8c:	dc001415 	stw	r16,80(sp)
    3a90:	ad400c04 	addi	r21,r21,48
    3a94:	dc401515 	stw	r17,84(sp)
    3a98:	d8801a17 	ldw	r2,104(sp)
    3a9c:	e5400005 	stb	r21,0(fp)
    3aa0:	202f883a 	mov	r23,r4
    3aa4:	d9c01b17 	ldw	r7,108(sp)
    3aa8:	d9001417 	ldw	r4,80(sp)
    3aac:	880b883a 	mov	r5,r17
    3ab0:	100d883a 	mov	r6,r2
    3ab4:	102d883a 	mov	r22,r2
    3ab8:	e7000044 	addi	fp,fp,1
    3abc:	00091300 	call	9130 <__ltdf2>
    3ac0:	103fc30e 	bge	r2,zero,39d0 <_dtoa_r+0x1064>
    3ac4:	d9000417 	ldw	r4,16(sp)
    3ac8:	d9000d15 	stw	r4,52(sp)
    3acc:	003d7106 	br	3094 <_dtoa_r+0x728>
    3ad0:	d9801717 	ldw	r6,92(sp)
    3ad4:	00800084 	movi	r2,2
    3ad8:	11bde60e 	bge	r2,r6,3274 <_dtoa_r+0x908>
    3adc:	203cfb1e 	bne	r4,zero,2ecc <_dtoa_r+0x560>
    3ae0:	d9001617 	ldw	r4,88(sp)
    3ae4:	900b883a 	mov	r5,r18
    3ae8:	01800144 	movi	r6,5
    3aec:	000f883a 	mov	r7,zero
    3af0:	00067b40 	call	67b4 <__multadd>
    3af4:	d9000717 	ldw	r4,28(sp)
    3af8:	100b883a 	mov	r5,r2
    3afc:	1025883a 	mov	r18,r2
    3b00:	0005c5c0 	call	5c5c <__mcmp>
    3b04:	00bcf10e 	bge	zero,r2,2ecc <_dtoa_r+0x560>
    3b08:	d8c00d17 	ldw	r3,52(sp)
    3b0c:	d9000517 	ldw	r4,20(sp)
    3b10:	d8000615 	stw	zero,24(sp)
    3b14:	18c00044 	addi	r3,r3,1
    3b18:	d8c00d15 	stw	r3,52(sp)
    3b1c:	00800c44 	movi	r2,49
    3b20:	27000044 	addi	fp,r4,1
    3b24:	20800005 	stb	r2,0(r4)
    3b28:	003e8906 	br	3550 <_dtoa_r+0xbe4>
    3b2c:	d8c00517 	ldw	r3,20(sp)
    3b30:	003bc206 	br	2a3c <_dtoa_r+0xd0>
    3b34:	01800074 	movhi	r6,1
    3b38:	31b48a04 	addi	r6,r6,-11736
    3b3c:	30c00917 	ldw	r3,36(r6)
    3b40:	30800817 	ldw	r2,32(r6)
    3b44:	d9001217 	ldw	r4,72(sp)
    3b48:	d9401317 	ldw	r5,76(sp)
    3b4c:	180f883a 	mov	r7,r3
    3b50:	100d883a 	mov	r6,r2
    3b54:	0008cb80 	call	8cb8 <__divdf3>
    3b58:	948003cc 	andi	r18,r18,15
    3b5c:	058000c4 	movi	r22,3
    3b60:	1029883a 	mov	r20,r2
    3b64:	182b883a 	mov	r21,r3
    3b68:	003c8906 	br	2d90 <_dtoa_r+0x424>
    3b6c:	d9001017 	ldw	r4,64(sp)
    3b70:	d9800917 	ldw	r6,36(sp)
    3b74:	0025883a 	mov	r18,zero
    3b78:	1105c83a 	sub	r2,r2,r4
    3b7c:	2089883a 	add	r4,r4,r2
    3b80:	308d883a 	add	r6,r6,r2
    3b84:	d9001015 	stw	r4,64(sp)
    3b88:	d9800915 	stw	r6,36(sp)
    3b8c:	003e3206 	br	3458 <_dtoa_r+0xaec>
    3b90:	28800044 	addi	r2,r5,1
    3b94:	27000044 	addi	fp,r4,1
    3b98:	20800005 	stb	r2,0(r4)
    3b9c:	003e6c06 	br	3550 <_dtoa_r+0xbe4>
    3ba0:	d8800f17 	ldw	r2,60(sp)
    3ba4:	00bce016 	blt	zero,r2,2f28 <_dtoa_r+0x5bc>
    3ba8:	d9800f17 	ldw	r6,60(sp)
    3bac:	303cc51e 	bne	r6,zero,2ec4 <_dtoa_r+0x558>
    3bb0:	0005883a 	mov	r2,zero
    3bb4:	00d00534 	movhi	r3,16404
    3bb8:	980b883a 	mov	r5,r19
    3bbc:	180f883a 	mov	r7,r3
    3bc0:	9009883a 	mov	r4,r18
    3bc4:	100d883a 	mov	r6,r2
    3bc8:	00088f40 	call	88f4 <__muldf3>
    3bcc:	180b883a 	mov	r5,r3
    3bd0:	a80f883a 	mov	r7,r21
    3bd4:	1009883a 	mov	r4,r2
    3bd8:	a00d883a 	mov	r6,r20
    3bdc:	00090a80 	call	90a8 <__gedf2>
    3be0:	103cb80e 	bge	r2,zero,2ec4 <_dtoa_r+0x558>
    3be4:	0027883a 	mov	r19,zero
    3be8:	0025883a 	mov	r18,zero
    3bec:	003fc606 	br	3b08 <_dtoa_r+0x119c>
    3bf0:	99400117 	ldw	r5,4(r19)
    3bf4:	d9001617 	ldw	r4,88(sp)
    3bf8:	00060800 	call	6080 <_Balloc>
    3bfc:	99800417 	ldw	r6,16(r19)
    3c00:	11000304 	addi	r4,r2,12
    3c04:	99400304 	addi	r5,r19,12
    3c08:	318d883a 	add	r6,r6,r6
    3c0c:	318d883a 	add	r6,r6,r6
    3c10:	31800204 	addi	r6,r6,8
    3c14:	1023883a 	mov	r17,r2
    3c18:	00058e80 	call	58e8 <memcpy>
    3c1c:	d9001617 	ldw	r4,88(sp)
    3c20:	880b883a 	mov	r5,r17
    3c24:	01800044 	movi	r6,1
    3c28:	00064440 	call	6444 <__lshift>
    3c2c:	100b883a 	mov	r5,r2
    3c30:	003d9c06 	br	32a4 <_dtoa_r+0x938>
    3c34:	00800e44 	movi	r2,57
    3c38:	b8807026 	beq	r23,r2,3dfc <_dtoa_r+0x1490>
    3c3c:	b8800044 	addi	r2,r23,1
    3c40:	b7000044 	addi	fp,r22,1
    3c44:	b0800005 	stb	r2,0(r22)
    3c48:	003e4106 	br	3550 <_dtoa_r+0xbe4>
    3c4c:	d8800317 	ldw	r2,12(sp)
    3c50:	01800074 	movhi	r6,1
    3c54:	31b45804 	addi	r6,r6,-11936
    3c58:	b009883a 	mov	r4,r22
    3c5c:	100e90fa 	slli	r7,r2,3
    3c60:	b80b883a 	mov	r5,r23
    3c64:	398f883a 	add	r7,r7,r6
    3c68:	38bffe17 	ldw	r2,-8(r7)
    3c6c:	d9800517 	ldw	r6,20(sp)
    3c70:	38ffff17 	ldw	r3,-4(r7)
    3c74:	37000044 	addi	fp,r6,1
    3c78:	180f883a 	mov	r7,r3
    3c7c:	100d883a 	mov	r6,r2
    3c80:	00088f40 	call	88f4 <__muldf3>
    3c84:	a80b883a 	mov	r5,r21
    3c88:	a009883a 	mov	r4,r20
    3c8c:	182f883a 	mov	r23,r3
    3c90:	102d883a 	mov	r22,r2
    3c94:	00092b00 	call	92b0 <__fixdfsi>
    3c98:	1009883a 	mov	r4,r2
    3c9c:	1027883a 	mov	r19,r2
    3ca0:	00091b80 	call	91b8 <__floatsidf>
    3ca4:	a80b883a 	mov	r5,r21
    3ca8:	a009883a 	mov	r4,r20
    3cac:	180f883a 	mov	r7,r3
    3cb0:	100d883a 	mov	r6,r2
    3cb4:	00088000 	call	8800 <__subdf3>
    3cb8:	180b883a 	mov	r5,r3
    3cbc:	d8c00517 	ldw	r3,20(sp)
    3cc0:	9cc00c04 	addi	r19,r19,48
    3cc4:	1009883a 	mov	r4,r2
    3cc8:	1cc00005 	stb	r19,0(r3)
    3ccc:	2021883a 	mov	r16,r4
    3cd0:	d9000317 	ldw	r4,12(sp)
    3cd4:	00800044 	movi	r2,1
    3cd8:	2823883a 	mov	r17,r5
    3cdc:	20802226 	beq	r4,r2,3d68 <_dtoa_r+0x13fc>
    3ce0:	1029883a 	mov	r20,r2
    3ce4:	0005883a 	mov	r2,zero
    3ce8:	00d00934 	movhi	r3,16420
    3cec:	180f883a 	mov	r7,r3
    3cf0:	100d883a 	mov	r6,r2
    3cf4:	880b883a 	mov	r5,r17
    3cf8:	8009883a 	mov	r4,r16
    3cfc:	00088f40 	call	88f4 <__muldf3>
    3d00:	180b883a 	mov	r5,r3
    3d04:	1009883a 	mov	r4,r2
    3d08:	1823883a 	mov	r17,r3
    3d0c:	1021883a 	mov	r16,r2
    3d10:	00092b00 	call	92b0 <__fixdfsi>
    3d14:	1009883a 	mov	r4,r2
    3d18:	102b883a 	mov	r21,r2
    3d1c:	00091b80 	call	91b8 <__floatsidf>
    3d20:	880b883a 	mov	r5,r17
    3d24:	8009883a 	mov	r4,r16
    3d28:	180f883a 	mov	r7,r3
    3d2c:	100d883a 	mov	r6,r2
    3d30:	00088000 	call	8800 <__subdf3>
    3d34:	180b883a 	mov	r5,r3
    3d38:	d8c00517 	ldw	r3,20(sp)
    3d3c:	1009883a 	mov	r4,r2
    3d40:	ad400c04 	addi	r21,r21,48
    3d44:	1d05883a 	add	r2,r3,r20
    3d48:	15400005 	stb	r21,0(r2)
    3d4c:	2021883a 	mov	r16,r4
    3d50:	d9000317 	ldw	r4,12(sp)
    3d54:	a5000044 	addi	r20,r20,1
    3d58:	2823883a 	mov	r17,r5
    3d5c:	a13fe11e 	bne	r20,r4,3ce4 <_dtoa_r+0x1378>
    3d60:	e505883a 	add	r2,fp,r20
    3d64:	173fffc4 	addi	fp,r2,-1
    3d68:	0025883a 	mov	r18,zero
    3d6c:	04cff834 	movhi	r19,16352
    3d70:	b009883a 	mov	r4,r22
    3d74:	b80b883a 	mov	r5,r23
    3d78:	900d883a 	mov	r6,r18
    3d7c:	980f883a 	mov	r7,r19
    3d80:	00088800 	call	8880 <__adddf3>
    3d84:	180b883a 	mov	r5,r3
    3d88:	1009883a 	mov	r4,r2
    3d8c:	800d883a 	mov	r6,r16
    3d90:	880f883a 	mov	r7,r17
    3d94:	00091300 	call	9130 <__ltdf2>
    3d98:	103cab16 	blt	r2,zero,3048 <_dtoa_r+0x6dc>
    3d9c:	0009883a 	mov	r4,zero
    3da0:	980b883a 	mov	r5,r19
    3da4:	b80f883a 	mov	r7,r23
    3da8:	b00d883a 	mov	r6,r22
    3dac:	00088000 	call	8800 <__subdf3>
    3db0:	180b883a 	mov	r5,r3
    3db4:	880f883a 	mov	r7,r17
    3db8:	1009883a 	mov	r4,r2
    3dbc:	800d883a 	mov	r6,r16
    3dc0:	00090200 	call	9020 <__gtdf2>
    3dc4:	00bc470e 	bge	zero,r2,2ee4 <_dtoa_r+0x578>
    3dc8:	00c00c04 	movi	r3,48
    3dcc:	e73fffc4 	addi	fp,fp,-1
    3dd0:	e0800007 	ldb	r2,0(fp)
    3dd4:	10fffd26 	beq	r2,r3,3dcc <_dtoa_r+0x1460>
    3dd8:	d9800417 	ldw	r6,16(sp)
    3ddc:	e7000044 	addi	fp,fp,1
    3de0:	d9800d15 	stw	r6,52(sp)
    3de4:	003cab06 	br	3094 <_dtoa_r+0x728>
    3de8:	d8c00f17 	ldw	r3,60(sp)
    3dec:	d9001117 	ldw	r4,68(sp)
    3df0:	20e1c83a 	sub	r16,r4,r3
    3df4:	0007883a 	mov	r3,zero
    3df8:	003d9b06 	br	3468 <_dtoa_r+0xafc>
    3dfc:	00800e44 	movi	r2,57
    3e00:	b0800005 	stb	r2,0(r22)
    3e04:	b5800044 	addi	r22,r22,1
    3e08:	003dc106 	br	3510 <_dtoa_r+0xba4>
    3e0c:	05800084 	movi	r22,2
    3e10:	003bf706 	br	2df0 <_dtoa_r+0x484>
    3e14:	d9000f17 	ldw	r4,60(sp)
    3e18:	013c000e 	bge	zero,r4,2e1c <_dtoa_r+0x4b0>
    3e1c:	d9800e17 	ldw	r6,56(sp)
    3e20:	01bc300e 	bge	zero,r6,2ee4 <_dtoa_r+0x578>
    3e24:	0005883a 	mov	r2,zero
    3e28:	00d00934 	movhi	r3,16420
    3e2c:	a80b883a 	mov	r5,r21
    3e30:	180f883a 	mov	r7,r3
    3e34:	a009883a 	mov	r4,r20
    3e38:	100d883a 	mov	r6,r2
    3e3c:	00088f40 	call	88f4 <__muldf3>
    3e40:	b1000044 	addi	r4,r22,1
    3e44:	1021883a 	mov	r16,r2
    3e48:	1823883a 	mov	r17,r3
    3e4c:	00091b80 	call	91b8 <__floatsidf>
    3e50:	880b883a 	mov	r5,r17
    3e54:	8009883a 	mov	r4,r16
    3e58:	180f883a 	mov	r7,r3
    3e5c:	100d883a 	mov	r6,r2
    3e60:	00088f40 	call	88f4 <__muldf3>
    3e64:	0011883a 	mov	r8,zero
    3e68:	02500734 	movhi	r9,16412
    3e6c:	180b883a 	mov	r5,r3
    3e70:	480f883a 	mov	r7,r9
    3e74:	1009883a 	mov	r4,r2
    3e78:	400d883a 	mov	r6,r8
    3e7c:	00088800 	call	8880 <__adddf3>
    3e80:	102d883a 	mov	r22,r2
    3e84:	00bf3034 	movhi	r2,64704
    3e88:	10ef883a 	add	r23,r2,r3
    3e8c:	d8800d17 	ldw	r2,52(sp)
    3e90:	d8c00e17 	ldw	r3,56(sp)
    3e94:	8029883a 	mov	r20,r16
    3e98:	10bfffc4 	addi	r2,r2,-1
    3e9c:	882b883a 	mov	r21,r17
    3ea0:	d8800415 	stw	r2,16(sp)
    3ea4:	d8c00315 	stw	r3,12(sp)
    3ea8:	003e8306 	br	38b8 <_dtoa_r+0xf4c>
    3eac:	d8800117 	ldw	r2,4(sp)
    3eb0:	dc001117 	ldw	r16,68(sp)
    3eb4:	dc801017 	ldw	r18,64(sp)
    3eb8:	00c00d84 	movi	r3,54
    3ebc:	1887c83a 	sub	r3,r3,r2
    3ec0:	003d6906 	br	3468 <_dtoa_r+0xafc>
    3ec4:	01800044 	movi	r6,1
    3ec8:	3021883a 	mov	r16,r6
    3ecc:	d9800f15 	stw	r6,60(sp)
    3ed0:	d9802615 	stw	r6,152(sp)
    3ed4:	d9800e15 	stw	r6,56(sp)
    3ed8:	003b9306 	br	2d28 <_dtoa_r+0x3bc>
    3edc:	b021883a 	mov	r16,r22
    3ee0:	dd800f15 	stw	r22,60(sp)
    3ee4:	003b9006 	br	2d28 <_dtoa_r+0x3bc>
    3ee8:	103e221e 	bne	r2,zero,3774 <_dtoa_r+0xe08>
    3eec:	b880004c 	andi	r2,r23,1
    3ef0:	1005003a 	cmpeq	r2,r2,zero
    3ef4:	103e1f1e 	bne	r2,zero,3774 <_dtoa_r+0xe08>
    3ef8:	003e1b06 	br	3768 <_dtoa_r+0xdfc>
    3efc:	d9001617 	ldw	r4,88(sp)
    3f00:	980b883a 	mov	r5,r19
    3f04:	01800284 	movi	r6,10
    3f08:	000f883a 	mov	r7,zero
    3f0c:	00067b40 	call	67b4 <__multadd>
    3f10:	d8c00e17 	ldw	r3,56(sp)
    3f14:	1027883a 	mov	r19,r2
    3f18:	d8c00f15 	stw	r3,60(sp)
    3f1c:	003cd306 	br	326c <_dtoa_r+0x900>

00003f20 <_fflush_r>:
    3f20:	defffb04 	addi	sp,sp,-20
    3f24:	dcc00315 	stw	r19,12(sp)
    3f28:	dc800215 	stw	r18,8(sp)
    3f2c:	dfc00415 	stw	ra,16(sp)
    3f30:	dc400115 	stw	r17,4(sp)
    3f34:	dc000015 	stw	r16,0(sp)
    3f38:	2027883a 	mov	r19,r4
    3f3c:	2825883a 	mov	r18,r5
    3f40:	20000226 	beq	r4,zero,3f4c <_fflush_r+0x2c>
    3f44:	20800e17 	ldw	r2,56(r4)
    3f48:	10005626 	beq	r2,zero,40a4 <_fflush_r+0x184>
    3f4c:	9100030b 	ldhu	r4,12(r18)
    3f50:	20ffffcc 	andi	r3,r4,65535
    3f54:	18e0001c 	xori	r3,r3,32768
    3f58:	18e00004 	addi	r3,r3,-32768
    3f5c:	1880020c 	andi	r2,r3,8
    3f60:	1000261e 	bne	r2,zero,3ffc <_fflush_r+0xdc>
    3f64:	90c00117 	ldw	r3,4(r18)
    3f68:	20820014 	ori	r2,r4,2048
    3f6c:	9080030d 	sth	r2,12(r18)
    3f70:	1009883a 	mov	r4,r2
    3f74:	00c0400e 	bge	zero,r3,4078 <_fflush_r+0x158>
    3f78:	92000a17 	ldw	r8,40(r18)
    3f7c:	40004026 	beq	r8,zero,4080 <_fflush_r+0x160>
    3f80:	2084000c 	andi	r2,r4,4096
    3f84:	10005326 	beq	r2,zero,40d4 <_fflush_r+0x1b4>
    3f88:	94001417 	ldw	r16,80(r18)
    3f8c:	9080030b 	ldhu	r2,12(r18)
    3f90:	1080010c 	andi	r2,r2,4
    3f94:	1000481e 	bne	r2,zero,40b8 <_fflush_r+0x198>
    3f98:	91400717 	ldw	r5,28(r18)
    3f9c:	9809883a 	mov	r4,r19
    3fa0:	800d883a 	mov	r6,r16
    3fa4:	000f883a 	mov	r7,zero
    3fa8:	403ee83a 	callr	r8
    3fac:	8080261e 	bne	r16,r2,4048 <_fflush_r+0x128>
    3fb0:	9080030b 	ldhu	r2,12(r18)
    3fb4:	91000417 	ldw	r4,16(r18)
    3fb8:	90000115 	stw	zero,4(r18)
    3fbc:	10bdffcc 	andi	r2,r2,63487
    3fc0:	10ffffcc 	andi	r3,r2,65535
    3fc4:	18c4000c 	andi	r3,r3,4096
    3fc8:	9080030d 	sth	r2,12(r18)
    3fcc:	91000015 	stw	r4,0(r18)
    3fd0:	18002b26 	beq	r3,zero,4080 <_fflush_r+0x160>
    3fd4:	0007883a 	mov	r3,zero
    3fd8:	1805883a 	mov	r2,r3
    3fdc:	94001415 	stw	r16,80(r18)
    3fe0:	dfc00417 	ldw	ra,16(sp)
    3fe4:	dcc00317 	ldw	r19,12(sp)
    3fe8:	dc800217 	ldw	r18,8(sp)
    3fec:	dc400117 	ldw	r17,4(sp)
    3ff0:	dc000017 	ldw	r16,0(sp)
    3ff4:	dec00504 	addi	sp,sp,20
    3ff8:	f800283a 	ret
    3ffc:	94400417 	ldw	r17,16(r18)
    4000:	88001f26 	beq	r17,zero,4080 <_fflush_r+0x160>
    4004:	90800017 	ldw	r2,0(r18)
    4008:	18c000cc 	andi	r3,r3,3
    400c:	94400015 	stw	r17,0(r18)
    4010:	1461c83a 	sub	r16,r2,r17
    4014:	18002526 	beq	r3,zero,40ac <_fflush_r+0x18c>
    4018:	0005883a 	mov	r2,zero
    401c:	90800215 	stw	r2,8(r18)
    4020:	0400170e 	bge	zero,r16,4080 <_fflush_r+0x160>
    4024:	90c00917 	ldw	r3,36(r18)
    4028:	91400717 	ldw	r5,28(r18)
    402c:	880d883a 	mov	r6,r17
    4030:	800f883a 	mov	r7,r16
    4034:	9809883a 	mov	r4,r19
    4038:	183ee83a 	callr	r3
    403c:	88a3883a 	add	r17,r17,r2
    4040:	80a1c83a 	sub	r16,r16,r2
    4044:	00bff616 	blt	zero,r2,4020 <_fflush_r+0x100>
    4048:	9080030b 	ldhu	r2,12(r18)
    404c:	00ffffc4 	movi	r3,-1
    4050:	10801014 	ori	r2,r2,64
    4054:	9080030d 	sth	r2,12(r18)
    4058:	1805883a 	mov	r2,r3
    405c:	dfc00417 	ldw	ra,16(sp)
    4060:	dcc00317 	ldw	r19,12(sp)
    4064:	dc800217 	ldw	r18,8(sp)
    4068:	dc400117 	ldw	r17,4(sp)
    406c:	dc000017 	ldw	r16,0(sp)
    4070:	dec00504 	addi	sp,sp,20
    4074:	f800283a 	ret
    4078:	90800f17 	ldw	r2,60(r18)
    407c:	00bfbe16 	blt	zero,r2,3f78 <_fflush_r+0x58>
    4080:	0007883a 	mov	r3,zero
    4084:	1805883a 	mov	r2,r3
    4088:	dfc00417 	ldw	ra,16(sp)
    408c:	dcc00317 	ldw	r19,12(sp)
    4090:	dc800217 	ldw	r18,8(sp)
    4094:	dc400117 	ldw	r17,4(sp)
    4098:	dc000017 	ldw	r16,0(sp)
    409c:	dec00504 	addi	sp,sp,20
    40a0:	f800283a 	ret
    40a4:	00041b80 	call	41b8 <__sinit>
    40a8:	003fa806 	br	3f4c <_fflush_r+0x2c>
    40ac:	90800517 	ldw	r2,20(r18)
    40b0:	90800215 	stw	r2,8(r18)
    40b4:	003fda06 	br	4020 <_fflush_r+0x100>
    40b8:	90800117 	ldw	r2,4(r18)
    40bc:	90c00c17 	ldw	r3,48(r18)
    40c0:	80a1c83a 	sub	r16,r16,r2
    40c4:	183fb426 	beq	r3,zero,3f98 <_fflush_r+0x78>
    40c8:	90800f17 	ldw	r2,60(r18)
    40cc:	80a1c83a 	sub	r16,r16,r2
    40d0:	003fb106 	br	3f98 <_fflush_r+0x78>
    40d4:	91400717 	ldw	r5,28(r18)
    40d8:	9809883a 	mov	r4,r19
    40dc:	000d883a 	mov	r6,zero
    40e0:	01c00044 	movi	r7,1
    40e4:	403ee83a 	callr	r8
    40e8:	1021883a 	mov	r16,r2
    40ec:	00bfffc4 	movi	r2,-1
    40f0:	80800226 	beq	r16,r2,40fc <_fflush_r+0x1dc>
    40f4:	92000a17 	ldw	r8,40(r18)
    40f8:	003fa406 	br	3f8c <_fflush_r+0x6c>
    40fc:	98c00017 	ldw	r3,0(r19)
    4100:	00800744 	movi	r2,29
    4104:	18bfde26 	beq	r3,r2,4080 <_fflush_r+0x160>
    4108:	9080030b 	ldhu	r2,12(r18)
    410c:	8007883a 	mov	r3,r16
    4110:	10801014 	ori	r2,r2,64
    4114:	9080030d 	sth	r2,12(r18)
    4118:	003fcf06 	br	4058 <_fflush_r+0x138>

0000411c <fflush>:
    411c:	01400034 	movhi	r5,0
    4120:	294fc804 	addi	r5,r5,16160
    4124:	2007883a 	mov	r3,r4
    4128:	20000526 	beq	r4,zero,4140 <fflush+0x24>
    412c:	00800074 	movhi	r2,1
    4130:	10bbe404 	addi	r2,r2,-4208
    4134:	11000017 	ldw	r4,0(r2)
    4138:	180b883a 	mov	r5,r3
    413c:	0003f201 	jmpi	3f20 <_fflush_r>
    4140:	00800074 	movhi	r2,1
    4144:	10bbe504 	addi	r2,r2,-4204
    4148:	11000017 	ldw	r4,0(r2)
    414c:	0004cec1 	jmpi	4cec <_fwalk_reent>

00004150 <std>:
    4150:	00800034 	movhi	r2,0
    4154:	109c7204 	addi	r2,r2,29128
    4158:	20800b15 	stw	r2,44(r4)
    415c:	00800034 	movhi	r2,0
    4160:	109cad04 	addi	r2,r2,29364
    4164:	20800815 	stw	r2,32(r4)
    4168:	00c00034 	movhi	r3,0
    416c:	18dc8e04 	addi	r3,r3,29240
    4170:	00800034 	movhi	r2,0
    4174:	109c7404 	addi	r2,r2,29136
    4178:	2140030d 	sth	r5,12(r4)
    417c:	2180038d 	sth	r6,14(r4)
    4180:	20c00915 	stw	r3,36(r4)
    4184:	20800a15 	stw	r2,40(r4)
    4188:	20000015 	stw	zero,0(r4)
    418c:	20000115 	stw	zero,4(r4)
    4190:	20000215 	stw	zero,8(r4)
    4194:	20000415 	stw	zero,16(r4)
    4198:	20000515 	stw	zero,20(r4)
    419c:	20000615 	stw	zero,24(r4)
    41a0:	21000715 	stw	r4,28(r4)
    41a4:	f800283a 	ret

000041a8 <__sfp_lock_acquire>:
    41a8:	f800283a 	ret

000041ac <__sfp_lock_release>:
    41ac:	f800283a 	ret

000041b0 <__sinit_lock_acquire>:
    41b0:	f800283a 	ret

000041b4 <__sinit_lock_release>:
    41b4:	f800283a 	ret

000041b8 <__sinit>:
    41b8:	20800e17 	ldw	r2,56(r4)
    41bc:	defffd04 	addi	sp,sp,-12
    41c0:	dc400115 	stw	r17,4(sp)
    41c4:	dc000015 	stw	r16,0(sp)
    41c8:	dfc00215 	stw	ra,8(sp)
    41cc:	04400044 	movi	r17,1
    41d0:	01400104 	movi	r5,4
    41d4:	000d883a 	mov	r6,zero
    41d8:	2021883a 	mov	r16,r4
    41dc:	2200bb04 	addi	r8,r4,748
    41e0:	200f883a 	mov	r7,r4
    41e4:	10000526 	beq	r2,zero,41fc <__sinit+0x44>
    41e8:	dfc00217 	ldw	ra,8(sp)
    41ec:	dc400117 	ldw	r17,4(sp)
    41f0:	dc000017 	ldw	r16,0(sp)
    41f4:	dec00304 	addi	sp,sp,12
    41f8:	f800283a 	ret
    41fc:	21000117 	ldw	r4,4(r4)
    4200:	00800034 	movhi	r2,0
    4204:	1090a704 	addi	r2,r2,17052
    4208:	00c000c4 	movi	r3,3
    420c:	80800f15 	stw	r2,60(r16)
    4210:	80c0b915 	stw	r3,740(r16)
    4214:	8200ba15 	stw	r8,744(r16)
    4218:	84400e15 	stw	r17,56(r16)
    421c:	8000b815 	stw	zero,736(r16)
    4220:	00041500 	call	4150 <std>
    4224:	81000217 	ldw	r4,8(r16)
    4228:	880d883a 	mov	r6,r17
    422c:	800f883a 	mov	r7,r16
    4230:	01400284 	movi	r5,10
    4234:	00041500 	call	4150 <std>
    4238:	81000317 	ldw	r4,12(r16)
    423c:	800f883a 	mov	r7,r16
    4240:	01400484 	movi	r5,18
    4244:	01800084 	movi	r6,2
    4248:	dfc00217 	ldw	ra,8(sp)
    424c:	dc400117 	ldw	r17,4(sp)
    4250:	dc000017 	ldw	r16,0(sp)
    4254:	dec00304 	addi	sp,sp,12
    4258:	00041501 	jmpi	4150 <std>

0000425c <__fp_lock>:
    425c:	0005883a 	mov	r2,zero
    4260:	f800283a 	ret

00004264 <__fp_unlock>:
    4264:	0005883a 	mov	r2,zero
    4268:	f800283a 	ret

0000426c <__fp_unlock_all>:
    426c:	00800074 	movhi	r2,1
    4270:	10bbe404 	addi	r2,r2,-4208
    4274:	11000017 	ldw	r4,0(r2)
    4278:	01400034 	movhi	r5,0
    427c:	29509904 	addi	r5,r5,16996
    4280:	0004db41 	jmpi	4db4 <_fwalk>

00004284 <__fp_lock_all>:
    4284:	00800074 	movhi	r2,1
    4288:	10bbe404 	addi	r2,r2,-4208
    428c:	11000017 	ldw	r4,0(r2)
    4290:	01400034 	movhi	r5,0
    4294:	29509704 	addi	r5,r5,16988
    4298:	0004db41 	jmpi	4db4 <_fwalk>

0000429c <_cleanup_r>:
    429c:	01400034 	movhi	r5,0
    42a0:	295d9f04 	addi	r5,r5,30332
    42a4:	0004db41 	jmpi	4db4 <_fwalk>

000042a8 <_cleanup>:
    42a8:	00800074 	movhi	r2,1
    42ac:	10bbe504 	addi	r2,r2,-4204
    42b0:	11000017 	ldw	r4,0(r2)
    42b4:	000429c1 	jmpi	429c <_cleanup_r>

000042b8 <__sfmoreglue>:
    42b8:	defffc04 	addi	sp,sp,-16
    42bc:	dc400115 	stw	r17,4(sp)
    42c0:	2c401724 	muli	r17,r5,92
    42c4:	dc800215 	stw	r18,8(sp)
    42c8:	2825883a 	mov	r18,r5
    42cc:	89400304 	addi	r5,r17,12
    42d0:	dc000015 	stw	r16,0(sp)
    42d4:	dfc00315 	stw	ra,12(sp)
    42d8:	00050c40 	call	50c4 <_malloc_r>
    42dc:	0021883a 	mov	r16,zero
    42e0:	880d883a 	mov	r6,r17
    42e4:	000b883a 	mov	r5,zero
    42e8:	10000626 	beq	r2,zero,4304 <__sfmoreglue+0x4c>
    42ec:	11000304 	addi	r4,r2,12
    42f0:	14800115 	stw	r18,4(r2)
    42f4:	10000015 	stw	zero,0(r2)
    42f8:	11000215 	stw	r4,8(r2)
    42fc:	1021883a 	mov	r16,r2
    4300:	0005a680 	call	5a68 <memset>
    4304:	8005883a 	mov	r2,r16
    4308:	dfc00317 	ldw	ra,12(sp)
    430c:	dc800217 	ldw	r18,8(sp)
    4310:	dc400117 	ldw	r17,4(sp)
    4314:	dc000017 	ldw	r16,0(sp)
    4318:	dec00404 	addi	sp,sp,16
    431c:	f800283a 	ret

00004320 <__sfp>:
    4320:	defffd04 	addi	sp,sp,-12
    4324:	00800074 	movhi	r2,1
    4328:	10bbe504 	addi	r2,r2,-4204
    432c:	dc000015 	stw	r16,0(sp)
    4330:	14000017 	ldw	r16,0(r2)
    4334:	dc400115 	stw	r17,4(sp)
    4338:	dfc00215 	stw	ra,8(sp)
    433c:	80800e17 	ldw	r2,56(r16)
    4340:	2023883a 	mov	r17,r4
    4344:	10002626 	beq	r2,zero,43e0 <__sfp+0xc0>
    4348:	8400b804 	addi	r16,r16,736
    434c:	80800117 	ldw	r2,4(r16)
    4350:	81000217 	ldw	r4,8(r16)
    4354:	10ffffc4 	addi	r3,r2,-1
    4358:	18000916 	blt	r3,zero,4380 <__sfp+0x60>
    435c:	2080030f 	ldh	r2,12(r4)
    4360:	10000b26 	beq	r2,zero,4390 <__sfp+0x70>
    4364:	017fffc4 	movi	r5,-1
    4368:	00000206 	br	4374 <__sfp+0x54>
    436c:	2080030f 	ldh	r2,12(r4)
    4370:	10000726 	beq	r2,zero,4390 <__sfp+0x70>
    4374:	18ffffc4 	addi	r3,r3,-1
    4378:	21001704 	addi	r4,r4,92
    437c:	197ffb1e 	bne	r3,r5,436c <__sfp+0x4c>
    4380:	80800017 	ldw	r2,0(r16)
    4384:	10001926 	beq	r2,zero,43ec <__sfp+0xcc>
    4388:	1021883a 	mov	r16,r2
    438c:	003fef06 	br	434c <__sfp+0x2c>
    4390:	00bfffc4 	movi	r2,-1
    4394:	00c00044 	movi	r3,1
    4398:	2080038d 	sth	r2,14(r4)
    439c:	20c0030d 	sth	r3,12(r4)
    43a0:	20000015 	stw	zero,0(r4)
    43a4:	20000215 	stw	zero,8(r4)
    43a8:	20000115 	stw	zero,4(r4)
    43ac:	20000415 	stw	zero,16(r4)
    43b0:	20000515 	stw	zero,20(r4)
    43b4:	20000615 	stw	zero,24(r4)
    43b8:	20000c15 	stw	zero,48(r4)
    43bc:	20000d15 	stw	zero,52(r4)
    43c0:	20001115 	stw	zero,68(r4)
    43c4:	20001215 	stw	zero,72(r4)
    43c8:	2005883a 	mov	r2,r4
    43cc:	dfc00217 	ldw	ra,8(sp)
    43d0:	dc400117 	ldw	r17,4(sp)
    43d4:	dc000017 	ldw	r16,0(sp)
    43d8:	dec00304 	addi	sp,sp,12
    43dc:	f800283a 	ret
    43e0:	8009883a 	mov	r4,r16
    43e4:	00041b80 	call	41b8 <__sinit>
    43e8:	003fd706 	br	4348 <__sfp+0x28>
    43ec:	8809883a 	mov	r4,r17
    43f0:	01400104 	movi	r5,4
    43f4:	00042b80 	call	42b8 <__sfmoreglue>
    43f8:	80800015 	stw	r2,0(r16)
    43fc:	103fe21e 	bne	r2,zero,4388 <__sfp+0x68>
    4400:	00800304 	movi	r2,12
    4404:	0009883a 	mov	r4,zero
    4408:	88800015 	stw	r2,0(r17)
    440c:	003fee06 	br	43c8 <__sfp+0xa8>

00004410 <_malloc_trim_r>:
    4410:	defffb04 	addi	sp,sp,-20
    4414:	dcc00315 	stw	r19,12(sp)
    4418:	04c00074 	movhi	r19,1
    441c:	9cf5fe04 	addi	r19,r19,-10248
    4420:	dc800215 	stw	r18,8(sp)
    4424:	dc400115 	stw	r17,4(sp)
    4428:	dc000015 	stw	r16,0(sp)
    442c:	2823883a 	mov	r17,r5
    4430:	2025883a 	mov	r18,r4
    4434:	dfc00415 	stw	ra,16(sp)
    4438:	000a3780 	call	a378 <__malloc_lock>
    443c:	98800217 	ldw	r2,8(r19)
    4440:	9009883a 	mov	r4,r18
    4444:	000b883a 	mov	r5,zero
    4448:	10c00117 	ldw	r3,4(r2)
    444c:	00bfff04 	movi	r2,-4
    4450:	18a0703a 	and	r16,r3,r2
    4454:	8463c83a 	sub	r17,r16,r17
    4458:	8c43fbc4 	addi	r17,r17,4079
    445c:	8822d33a 	srli	r17,r17,12
    4460:	0083ffc4 	movi	r2,4095
    4464:	8c7fffc4 	addi	r17,r17,-1
    4468:	8822933a 	slli	r17,r17,12
    446c:	1440060e 	bge	r2,r17,4488 <_malloc_trim_r+0x78>
    4470:	00071580 	call	7158 <_sbrk_r>
    4474:	98c00217 	ldw	r3,8(r19)
    4478:	9009883a 	mov	r4,r18
    447c:	044bc83a 	sub	r5,zero,r17
    4480:	80c7883a 	add	r3,r16,r3
    4484:	10c00926 	beq	r2,r3,44ac <_malloc_trim_r+0x9c>
    4488:	000a3980 	call	a398 <__malloc_unlock>
    448c:	0005883a 	mov	r2,zero
    4490:	dfc00417 	ldw	ra,16(sp)
    4494:	dcc00317 	ldw	r19,12(sp)
    4498:	dc800217 	ldw	r18,8(sp)
    449c:	dc400117 	ldw	r17,4(sp)
    44a0:	dc000017 	ldw	r16,0(sp)
    44a4:	dec00504 	addi	sp,sp,20
    44a8:	f800283a 	ret
    44ac:	9009883a 	mov	r4,r18
    44b0:	00071580 	call	7158 <_sbrk_r>
    44b4:	844dc83a 	sub	r6,r16,r17
    44b8:	00ffffc4 	movi	r3,-1
    44bc:	9009883a 	mov	r4,r18
    44c0:	000b883a 	mov	r5,zero
    44c4:	01c00074 	movhi	r7,1
    44c8:	39c2fa04 	addi	r7,r7,3048
    44cc:	31800054 	ori	r6,r6,1
    44d0:	10c00926 	beq	r2,r3,44f8 <_malloc_trim_r+0xe8>
    44d4:	38800017 	ldw	r2,0(r7)
    44d8:	98c00217 	ldw	r3,8(r19)
    44dc:	9009883a 	mov	r4,r18
    44e0:	1445c83a 	sub	r2,r2,r17
    44e4:	38800015 	stw	r2,0(r7)
    44e8:	19800115 	stw	r6,4(r3)
    44ec:	000a3980 	call	a398 <__malloc_unlock>
    44f0:	00800044 	movi	r2,1
    44f4:	003fe606 	br	4490 <_malloc_trim_r+0x80>
    44f8:	00071580 	call	7158 <_sbrk_r>
    44fc:	99800217 	ldw	r6,8(r19)
    4500:	100f883a 	mov	r7,r2
    4504:	9009883a 	mov	r4,r18
    4508:	1187c83a 	sub	r3,r2,r6
    450c:	008003c4 	movi	r2,15
    4510:	19400054 	ori	r5,r3,1
    4514:	10ffdc0e 	bge	r2,r3,4488 <_malloc_trim_r+0x78>
    4518:	00800074 	movhi	r2,1
    451c:	10bbe904 	addi	r2,r2,-4188
    4520:	10c00017 	ldw	r3,0(r2)
    4524:	00800074 	movhi	r2,1
    4528:	1082fa04 	addi	r2,r2,3048
    452c:	31400115 	stw	r5,4(r6)
    4530:	38c7c83a 	sub	r3,r7,r3
    4534:	10c00015 	stw	r3,0(r2)
    4538:	003fd306 	br	4488 <_malloc_trim_r+0x78>

0000453c <_free_r>:
    453c:	defffd04 	addi	sp,sp,-12
    4540:	dc400115 	stw	r17,4(sp)
    4544:	dc000015 	stw	r16,0(sp)
    4548:	dfc00215 	stw	ra,8(sp)
    454c:	2821883a 	mov	r16,r5
    4550:	2023883a 	mov	r17,r4
    4554:	28005a26 	beq	r5,zero,46c0 <_free_r+0x184>
    4558:	000a3780 	call	a378 <__malloc_lock>
    455c:	823ffe04 	addi	r8,r16,-8
    4560:	41400117 	ldw	r5,4(r8)
    4564:	00bfff84 	movi	r2,-2
    4568:	02800074 	movhi	r10,1
    456c:	52b5fe04 	addi	r10,r10,-10248
    4570:	288e703a 	and	r7,r5,r2
    4574:	41cd883a 	add	r6,r8,r7
    4578:	30c00117 	ldw	r3,4(r6)
    457c:	51000217 	ldw	r4,8(r10)
    4580:	00bfff04 	movi	r2,-4
    4584:	1892703a 	and	r9,r3,r2
    4588:	5017883a 	mov	r11,r10
    458c:	31006726 	beq	r6,r4,472c <_free_r+0x1f0>
    4590:	2880004c 	andi	r2,r5,1
    4594:	1005003a 	cmpeq	r2,r2,zero
    4598:	32400115 	stw	r9,4(r6)
    459c:	10001a1e 	bne	r2,zero,4608 <_free_r+0xcc>
    45a0:	000b883a 	mov	r5,zero
    45a4:	3247883a 	add	r3,r6,r9
    45a8:	18800117 	ldw	r2,4(r3)
    45ac:	1080004c 	andi	r2,r2,1
    45b0:	1000231e 	bne	r2,zero,4640 <_free_r+0x104>
    45b4:	280ac03a 	cmpne	r5,r5,zero
    45b8:	3a4f883a 	add	r7,r7,r9
    45bc:	2800451e 	bne	r5,zero,46d4 <_free_r+0x198>
    45c0:	31000217 	ldw	r4,8(r6)
    45c4:	00800074 	movhi	r2,1
    45c8:	10b60004 	addi	r2,r2,-10240
    45cc:	20807b26 	beq	r4,r2,47bc <_free_r+0x280>
    45d0:	30800317 	ldw	r2,12(r6)
    45d4:	3a07883a 	add	r3,r7,r8
    45d8:	19c00015 	stw	r7,0(r3)
    45dc:	11000215 	stw	r4,8(r2)
    45e0:	20800315 	stw	r2,12(r4)
    45e4:	38800054 	ori	r2,r7,1
    45e8:	40800115 	stw	r2,4(r8)
    45ec:	28001a26 	beq	r5,zero,4658 <_free_r+0x11c>
    45f0:	8809883a 	mov	r4,r17
    45f4:	dfc00217 	ldw	ra,8(sp)
    45f8:	dc400117 	ldw	r17,4(sp)
    45fc:	dc000017 	ldw	r16,0(sp)
    4600:	dec00304 	addi	sp,sp,12
    4604:	000a3981 	jmpi	a398 <__malloc_unlock>
    4608:	80bffe17 	ldw	r2,-8(r16)
    460c:	50c00204 	addi	r3,r10,8
    4610:	4091c83a 	sub	r8,r8,r2
    4614:	41000217 	ldw	r4,8(r8)
    4618:	388f883a 	add	r7,r7,r2
    461c:	20c06126 	beq	r4,r3,47a4 <_free_r+0x268>
    4620:	40800317 	ldw	r2,12(r8)
    4624:	3247883a 	add	r3,r6,r9
    4628:	000b883a 	mov	r5,zero
    462c:	11000215 	stw	r4,8(r2)
    4630:	20800315 	stw	r2,12(r4)
    4634:	18800117 	ldw	r2,4(r3)
    4638:	1080004c 	andi	r2,r2,1
    463c:	103fdd26 	beq	r2,zero,45b4 <_free_r+0x78>
    4640:	38800054 	ori	r2,r7,1
    4644:	3a07883a 	add	r3,r7,r8
    4648:	280ac03a 	cmpne	r5,r5,zero
    464c:	40800115 	stw	r2,4(r8)
    4650:	19c00015 	stw	r7,0(r3)
    4654:	283fe61e 	bne	r5,zero,45f0 <_free_r+0xb4>
    4658:	00807fc4 	movi	r2,511
    465c:	11c01f2e 	bgeu	r2,r7,46dc <_free_r+0x1a0>
    4660:	3806d27a 	srli	r3,r7,9
    4664:	1800481e 	bne	r3,zero,4788 <_free_r+0x24c>
    4668:	3804d0fa 	srli	r2,r7,3
    466c:	100690fa 	slli	r3,r2,3
    4670:	1acd883a 	add	r6,r3,r11
    4674:	31400217 	ldw	r5,8(r6)
    4678:	31405926 	beq	r6,r5,47e0 <_free_r+0x2a4>
    467c:	28800117 	ldw	r2,4(r5)
    4680:	00ffff04 	movi	r3,-4
    4684:	10c4703a 	and	r2,r2,r3
    4688:	3880022e 	bgeu	r7,r2,4694 <_free_r+0x158>
    468c:	29400217 	ldw	r5,8(r5)
    4690:	317ffa1e 	bne	r6,r5,467c <_free_r+0x140>
    4694:	29800317 	ldw	r6,12(r5)
    4698:	41800315 	stw	r6,12(r8)
    469c:	41400215 	stw	r5,8(r8)
    46a0:	8809883a 	mov	r4,r17
    46a4:	2a000315 	stw	r8,12(r5)
    46a8:	32000215 	stw	r8,8(r6)
    46ac:	dfc00217 	ldw	ra,8(sp)
    46b0:	dc400117 	ldw	r17,4(sp)
    46b4:	dc000017 	ldw	r16,0(sp)
    46b8:	dec00304 	addi	sp,sp,12
    46bc:	000a3981 	jmpi	a398 <__malloc_unlock>
    46c0:	dfc00217 	ldw	ra,8(sp)
    46c4:	dc400117 	ldw	r17,4(sp)
    46c8:	dc000017 	ldw	r16,0(sp)
    46cc:	dec00304 	addi	sp,sp,12
    46d0:	f800283a 	ret
    46d4:	31000217 	ldw	r4,8(r6)
    46d8:	003fbd06 	br	45d0 <_free_r+0x94>
    46dc:	3806d0fa 	srli	r3,r7,3
    46e0:	00800044 	movi	r2,1
    46e4:	51400117 	ldw	r5,4(r10)
    46e8:	180890fa 	slli	r4,r3,3
    46ec:	1807d0ba 	srai	r3,r3,2
    46f0:	22c9883a 	add	r4,r4,r11
    46f4:	21800217 	ldw	r6,8(r4)
    46f8:	10c4983a 	sll	r2,r2,r3
    46fc:	41000315 	stw	r4,12(r8)
    4700:	41800215 	stw	r6,8(r8)
    4704:	288ab03a 	or	r5,r5,r2
    4708:	22000215 	stw	r8,8(r4)
    470c:	8809883a 	mov	r4,r17
    4710:	51400115 	stw	r5,4(r10)
    4714:	32000315 	stw	r8,12(r6)
    4718:	dfc00217 	ldw	ra,8(sp)
    471c:	dc400117 	ldw	r17,4(sp)
    4720:	dc000017 	ldw	r16,0(sp)
    4724:	dec00304 	addi	sp,sp,12
    4728:	000a3981 	jmpi	a398 <__malloc_unlock>
    472c:	2880004c 	andi	r2,r5,1
    4730:	3a4d883a 	add	r6,r7,r9
    4734:	1000071e 	bne	r2,zero,4754 <_free_r+0x218>
    4738:	80bffe17 	ldw	r2,-8(r16)
    473c:	4091c83a 	sub	r8,r8,r2
    4740:	41000317 	ldw	r4,12(r8)
    4744:	40c00217 	ldw	r3,8(r8)
    4748:	308d883a 	add	r6,r6,r2
    474c:	20c00215 	stw	r3,8(r4)
    4750:	19000315 	stw	r4,12(r3)
    4754:	00800074 	movhi	r2,1
    4758:	10bbe804 	addi	r2,r2,-4192
    475c:	11000017 	ldw	r4,0(r2)
    4760:	30c00054 	ori	r3,r6,1
    4764:	52000215 	stw	r8,8(r10)
    4768:	40c00115 	stw	r3,4(r8)
    476c:	313fa036 	bltu	r6,r4,45f0 <_free_r+0xb4>
    4770:	00800074 	movhi	r2,1
    4774:	1082f004 	addi	r2,r2,3008
    4778:	11400017 	ldw	r5,0(r2)
    477c:	8809883a 	mov	r4,r17
    4780:	00044100 	call	4410 <_malloc_trim_r>
    4784:	003f9a06 	br	45f0 <_free_r+0xb4>
    4788:	00800104 	movi	r2,4
    478c:	10c0072e 	bgeu	r2,r3,47ac <_free_r+0x270>
    4790:	00800504 	movi	r2,20
    4794:	10c01936 	bltu	r2,r3,47fc <_free_r+0x2c0>
    4798:	188016c4 	addi	r2,r3,91
    479c:	100690fa 	slli	r3,r2,3
    47a0:	003fb306 	br	4670 <_free_r+0x134>
    47a4:	01400044 	movi	r5,1
    47a8:	003f7e06 	br	45a4 <_free_r+0x68>
    47ac:	3804d1ba 	srli	r2,r7,6
    47b0:	10800e04 	addi	r2,r2,56
    47b4:	100690fa 	slli	r3,r2,3
    47b8:	003fad06 	br	4670 <_free_r+0x134>
    47bc:	22000315 	stw	r8,12(r4)
    47c0:	22000215 	stw	r8,8(r4)
    47c4:	3a05883a 	add	r2,r7,r8
    47c8:	38c00054 	ori	r3,r7,1
    47cc:	11c00015 	stw	r7,0(r2)
    47d0:	41000215 	stw	r4,8(r8)
    47d4:	40c00115 	stw	r3,4(r8)
    47d8:	41000315 	stw	r4,12(r8)
    47dc:	003f8406 	br	45f0 <_free_r+0xb4>
    47e0:	1005d0ba 	srai	r2,r2,2
    47e4:	00c00044 	movi	r3,1
    47e8:	51000117 	ldw	r4,4(r10)
    47ec:	1886983a 	sll	r3,r3,r2
    47f0:	20c8b03a 	or	r4,r4,r3
    47f4:	51000115 	stw	r4,4(r10)
    47f8:	003fa706 	br	4698 <_free_r+0x15c>
    47fc:	00801504 	movi	r2,84
    4800:	10c00436 	bltu	r2,r3,4814 <_free_r+0x2d8>
    4804:	3804d33a 	srli	r2,r7,12
    4808:	10801b84 	addi	r2,r2,110
    480c:	100690fa 	slli	r3,r2,3
    4810:	003f9706 	br	4670 <_free_r+0x134>
    4814:	00805504 	movi	r2,340
    4818:	10c00436 	bltu	r2,r3,482c <_free_r+0x2f0>
    481c:	3804d3fa 	srli	r2,r7,15
    4820:	10801dc4 	addi	r2,r2,119
    4824:	100690fa 	slli	r3,r2,3
    4828:	003f9106 	br	4670 <_free_r+0x134>
    482c:	00815504 	movi	r2,1364
    4830:	10c0032e 	bgeu	r2,r3,4840 <_free_r+0x304>
    4834:	00801f84 	movi	r2,126
    4838:	00c0fc04 	movi	r3,1008
    483c:	003f8c06 	br	4670 <_free_r+0x134>
    4840:	3804d4ba 	srli	r2,r7,18
    4844:	10801f04 	addi	r2,r2,124
    4848:	100690fa 	slli	r3,r2,3
    484c:	003f8806 	br	4670 <_free_r+0x134>

00004850 <__sfvwrite_r>:
    4850:	30800217 	ldw	r2,8(r6)
    4854:	defff504 	addi	sp,sp,-44
    4858:	df000915 	stw	fp,36(sp)
    485c:	dd800715 	stw	r22,28(sp)
    4860:	dc800315 	stw	r18,12(sp)
    4864:	dfc00a15 	stw	ra,40(sp)
    4868:	ddc00815 	stw	r23,32(sp)
    486c:	dd400615 	stw	r21,24(sp)
    4870:	dd000515 	stw	r20,20(sp)
    4874:	dcc00415 	stw	r19,16(sp)
    4878:	dc400215 	stw	r17,8(sp)
    487c:	dc000115 	stw	r16,4(sp)
    4880:	302d883a 	mov	r22,r6
    4884:	2039883a 	mov	fp,r4
    4888:	2825883a 	mov	r18,r5
    488c:	10001c26 	beq	r2,zero,4900 <__sfvwrite_r+0xb0>
    4890:	29c0030b 	ldhu	r7,12(r5)
    4894:	3880020c 	andi	r2,r7,8
    4898:	10002726 	beq	r2,zero,4938 <__sfvwrite_r+0xe8>
    489c:	28800417 	ldw	r2,16(r5)
    48a0:	10002526 	beq	r2,zero,4938 <__sfvwrite_r+0xe8>
    48a4:	3880008c 	andi	r2,r7,2
    48a8:	b5400017 	ldw	r21,0(r22)
    48ac:	10002826 	beq	r2,zero,4950 <__sfvwrite_r+0x100>
    48b0:	0021883a 	mov	r16,zero
    48b4:	0023883a 	mov	r17,zero
    48b8:	880d883a 	mov	r6,r17
    48bc:	e009883a 	mov	r4,fp
    48c0:	00810004 	movi	r2,1024
    48c4:	80006e26 	beq	r16,zero,4a80 <__sfvwrite_r+0x230>
    48c8:	800f883a 	mov	r7,r16
    48cc:	91400717 	ldw	r5,28(r18)
    48d0:	1400012e 	bgeu	r2,r16,48d8 <__sfvwrite_r+0x88>
    48d4:	100f883a 	mov	r7,r2
    48d8:	90c00917 	ldw	r3,36(r18)
    48dc:	183ee83a 	callr	r3
    48e0:	1007883a 	mov	r3,r2
    48e4:	80a1c83a 	sub	r16,r16,r2
    48e8:	88a3883a 	add	r17,r17,r2
    48ec:	00806d0e 	bge	zero,r2,4aa4 <__sfvwrite_r+0x254>
    48f0:	b0800217 	ldw	r2,8(r22)
    48f4:	10c5c83a 	sub	r2,r2,r3
    48f8:	b0800215 	stw	r2,8(r22)
    48fc:	103fee1e 	bne	r2,zero,48b8 <__sfvwrite_r+0x68>
    4900:	0009883a 	mov	r4,zero
    4904:	2005883a 	mov	r2,r4
    4908:	dfc00a17 	ldw	ra,40(sp)
    490c:	df000917 	ldw	fp,36(sp)
    4910:	ddc00817 	ldw	r23,32(sp)
    4914:	dd800717 	ldw	r22,28(sp)
    4918:	dd400617 	ldw	r21,24(sp)
    491c:	dd000517 	ldw	r20,20(sp)
    4920:	dcc00417 	ldw	r19,16(sp)
    4924:	dc800317 	ldw	r18,12(sp)
    4928:	dc400217 	ldw	r17,8(sp)
    492c:	dc000117 	ldw	r16,4(sp)
    4930:	dec00b04 	addi	sp,sp,44
    4934:	f800283a 	ret
    4938:	00024640 	call	2464 <__swsetup_r>
    493c:	1000e41e 	bne	r2,zero,4cd0 <__sfvwrite_r+0x480>
    4940:	91c0030b 	ldhu	r7,12(r18)
    4944:	b5400017 	ldw	r21,0(r22)
    4948:	3880008c 	andi	r2,r7,2
    494c:	103fd81e 	bne	r2,zero,48b0 <__sfvwrite_r+0x60>
    4950:	3880004c 	andi	r2,r7,1
    4954:	1005003a 	cmpeq	r2,r2,zero
    4958:	10005726 	beq	r2,zero,4ab8 <__sfvwrite_r+0x268>
    495c:	0029883a 	mov	r20,zero
    4960:	002f883a 	mov	r23,zero
    4964:	a0004226 	beq	r20,zero,4a70 <__sfvwrite_r+0x220>
    4968:	3880800c 	andi	r2,r7,512
    496c:	94000217 	ldw	r16,8(r18)
    4970:	10008b26 	beq	r2,zero,4ba0 <__sfvwrite_r+0x350>
    4974:	800d883a 	mov	r6,r16
    4978:	a400a536 	bltu	r20,r16,4c10 <__sfvwrite_r+0x3c0>
    497c:	3881200c 	andi	r2,r7,1152
    4980:	10002726 	beq	r2,zero,4a20 <__sfvwrite_r+0x1d0>
    4984:	90800517 	ldw	r2,20(r18)
    4988:	92000417 	ldw	r8,16(r18)
    498c:	91400017 	ldw	r5,0(r18)
    4990:	1087883a 	add	r3,r2,r2
    4994:	1887883a 	add	r3,r3,r2
    4998:	1808d7fa 	srli	r4,r3,31
    499c:	2a21c83a 	sub	r16,r5,r8
    49a0:	80800044 	addi	r2,r16,1
    49a4:	20c9883a 	add	r4,r4,r3
    49a8:	2027d07a 	srai	r19,r4,1
    49ac:	a085883a 	add	r2,r20,r2
    49b0:	980d883a 	mov	r6,r19
    49b4:	9880022e 	bgeu	r19,r2,49c0 <__sfvwrite_r+0x170>
    49b8:	1027883a 	mov	r19,r2
    49bc:	100d883a 	mov	r6,r2
    49c0:	3881000c 	andi	r2,r7,1024
    49c4:	1000b826 	beq	r2,zero,4ca8 <__sfvwrite_r+0x458>
    49c8:	300b883a 	mov	r5,r6
    49cc:	e009883a 	mov	r4,fp
    49d0:	00050c40 	call	50c4 <_malloc_r>
    49d4:	10003126 	beq	r2,zero,4a9c <__sfvwrite_r+0x24c>
    49d8:	91400417 	ldw	r5,16(r18)
    49dc:	1009883a 	mov	r4,r2
    49e0:	800d883a 	mov	r6,r16
    49e4:	1023883a 	mov	r17,r2
    49e8:	00058e80 	call	58e8 <memcpy>
    49ec:	90c0030b 	ldhu	r3,12(r18)
    49f0:	00beffc4 	movi	r2,-1025
    49f4:	1886703a 	and	r3,r3,r2
    49f8:	18c02014 	ori	r3,r3,128
    49fc:	90c0030d 	sth	r3,12(r18)
    4a00:	9c07c83a 	sub	r3,r19,r16
    4a04:	8c05883a 	add	r2,r17,r16
    4a08:	a00d883a 	mov	r6,r20
    4a0c:	a021883a 	mov	r16,r20
    4a10:	90800015 	stw	r2,0(r18)
    4a14:	90c00215 	stw	r3,8(r18)
    4a18:	94400415 	stw	r17,16(r18)
    4a1c:	94c00515 	stw	r19,20(r18)
    4a20:	91000017 	ldw	r4,0(r18)
    4a24:	b80b883a 	mov	r5,r23
    4a28:	a023883a 	mov	r17,r20
    4a2c:	00059880 	call	5988 <memmove>
    4a30:	90c00217 	ldw	r3,8(r18)
    4a34:	90800017 	ldw	r2,0(r18)
    4a38:	a027883a 	mov	r19,r20
    4a3c:	1c07c83a 	sub	r3,r3,r16
    4a40:	1405883a 	add	r2,r2,r16
    4a44:	90c00215 	stw	r3,8(r18)
    4a48:	a021883a 	mov	r16,r20
    4a4c:	90800015 	stw	r2,0(r18)
    4a50:	b0800217 	ldw	r2,8(r22)
    4a54:	1405c83a 	sub	r2,r2,r16
    4a58:	b0800215 	stw	r2,8(r22)
    4a5c:	103fa826 	beq	r2,zero,4900 <__sfvwrite_r+0xb0>
    4a60:	a469c83a 	sub	r20,r20,r17
    4a64:	91c0030b 	ldhu	r7,12(r18)
    4a68:	bcef883a 	add	r23,r23,r19
    4a6c:	a03fbe1e 	bne	r20,zero,4968 <__sfvwrite_r+0x118>
    4a70:	adc00017 	ldw	r23,0(r21)
    4a74:	ad000117 	ldw	r20,4(r21)
    4a78:	ad400204 	addi	r21,r21,8
    4a7c:	003fb906 	br	4964 <__sfvwrite_r+0x114>
    4a80:	ac400017 	ldw	r17,0(r21)
    4a84:	ac000117 	ldw	r16,4(r21)
    4a88:	ad400204 	addi	r21,r21,8
    4a8c:	003f8a06 	br	48b8 <__sfvwrite_r+0x68>
    4a90:	91400417 	ldw	r5,16(r18)
    4a94:	e009883a 	mov	r4,fp
    4a98:	000453c0 	call	453c <_free_r>
    4a9c:	00800304 	movi	r2,12
    4aa0:	e0800015 	stw	r2,0(fp)
    4aa4:	9080030b 	ldhu	r2,12(r18)
    4aa8:	013fffc4 	movi	r4,-1
    4aac:	10801014 	ori	r2,r2,64
    4ab0:	9080030d 	sth	r2,12(r18)
    4ab4:	003f9306 	br	4904 <__sfvwrite_r+0xb4>
    4ab8:	0027883a 	mov	r19,zero
    4abc:	002f883a 	mov	r23,zero
    4ac0:	d8000015 	stw	zero,0(sp)
    4ac4:	0029883a 	mov	r20,zero
    4ac8:	98001e26 	beq	r19,zero,4b44 <__sfvwrite_r+0x2f4>
    4acc:	d8c00017 	ldw	r3,0(sp)
    4ad0:	1804c03a 	cmpne	r2,r3,zero
    4ad4:	10005e26 	beq	r2,zero,4c50 <__sfvwrite_r+0x400>
    4ad8:	9821883a 	mov	r16,r19
    4adc:	a4c0012e 	bgeu	r20,r19,4ae4 <__sfvwrite_r+0x294>
    4ae0:	a021883a 	mov	r16,r20
    4ae4:	91000017 	ldw	r4,0(r18)
    4ae8:	90800417 	ldw	r2,16(r18)
    4aec:	91800217 	ldw	r6,8(r18)
    4af0:	91c00517 	ldw	r7,20(r18)
    4af4:	1100022e 	bgeu	r2,r4,4b00 <__sfvwrite_r+0x2b0>
    4af8:	31e3883a 	add	r17,r6,r7
    4afc:	8c001616 	blt	r17,r16,4b58 <__sfvwrite_r+0x308>
    4b00:	81c03816 	blt	r16,r7,4be4 <__sfvwrite_r+0x394>
    4b04:	90c00917 	ldw	r3,36(r18)
    4b08:	91400717 	ldw	r5,28(r18)
    4b0c:	e009883a 	mov	r4,fp
    4b10:	b80d883a 	mov	r6,r23
    4b14:	183ee83a 	callr	r3
    4b18:	1023883a 	mov	r17,r2
    4b1c:	00bfe10e 	bge	zero,r2,4aa4 <__sfvwrite_r+0x254>
    4b20:	a469c83a 	sub	r20,r20,r17
    4b24:	a0001826 	beq	r20,zero,4b88 <__sfvwrite_r+0x338>
    4b28:	b0800217 	ldw	r2,8(r22)
    4b2c:	1445c83a 	sub	r2,r2,r17
    4b30:	b0800215 	stw	r2,8(r22)
    4b34:	103f7226 	beq	r2,zero,4900 <__sfvwrite_r+0xb0>
    4b38:	9c67c83a 	sub	r19,r19,r17
    4b3c:	bc6f883a 	add	r23,r23,r17
    4b40:	983fe21e 	bne	r19,zero,4acc <__sfvwrite_r+0x27c>
    4b44:	adc00017 	ldw	r23,0(r21)
    4b48:	acc00117 	ldw	r19,4(r21)
    4b4c:	ad400204 	addi	r21,r21,8
    4b50:	d8000015 	stw	zero,0(sp)
    4b54:	003fdc06 	br	4ac8 <__sfvwrite_r+0x278>
    4b58:	b80b883a 	mov	r5,r23
    4b5c:	880d883a 	mov	r6,r17
    4b60:	00059880 	call	5988 <memmove>
    4b64:	90c00017 	ldw	r3,0(r18)
    4b68:	e009883a 	mov	r4,fp
    4b6c:	900b883a 	mov	r5,r18
    4b70:	1c47883a 	add	r3,r3,r17
    4b74:	90c00015 	stw	r3,0(r18)
    4b78:	0003f200 	call	3f20 <_fflush_r>
    4b7c:	103fc91e 	bne	r2,zero,4aa4 <__sfvwrite_r+0x254>
    4b80:	a469c83a 	sub	r20,r20,r17
    4b84:	a03fe81e 	bne	r20,zero,4b28 <__sfvwrite_r+0x2d8>
    4b88:	e009883a 	mov	r4,fp
    4b8c:	900b883a 	mov	r5,r18
    4b90:	0003f200 	call	3f20 <_fflush_r>
    4b94:	103fc31e 	bne	r2,zero,4aa4 <__sfvwrite_r+0x254>
    4b98:	d8000015 	stw	zero,0(sp)
    4b9c:	003fe206 	br	4b28 <__sfvwrite_r+0x2d8>
    4ba0:	91000017 	ldw	r4,0(r18)
    4ba4:	90800417 	ldw	r2,16(r18)
    4ba8:	1100022e 	bgeu	r2,r4,4bb4 <__sfvwrite_r+0x364>
    4bac:	8023883a 	mov	r17,r16
    4bb0:	85003136 	bltu	r16,r20,4c78 <__sfvwrite_r+0x428>
    4bb4:	91c00517 	ldw	r7,20(r18)
    4bb8:	a1c01836 	bltu	r20,r7,4c1c <__sfvwrite_r+0x3cc>
    4bbc:	90c00917 	ldw	r3,36(r18)
    4bc0:	91400717 	ldw	r5,28(r18)
    4bc4:	e009883a 	mov	r4,fp
    4bc8:	b80d883a 	mov	r6,r23
    4bcc:	183ee83a 	callr	r3
    4bd0:	1021883a 	mov	r16,r2
    4bd4:	00bfb30e 	bge	zero,r2,4aa4 <__sfvwrite_r+0x254>
    4bd8:	1023883a 	mov	r17,r2
    4bdc:	1027883a 	mov	r19,r2
    4be0:	003f9b06 	br	4a50 <__sfvwrite_r+0x200>
    4be4:	b80b883a 	mov	r5,r23
    4be8:	800d883a 	mov	r6,r16
    4bec:	00059880 	call	5988 <memmove>
    4bf0:	90c00217 	ldw	r3,8(r18)
    4bf4:	90800017 	ldw	r2,0(r18)
    4bf8:	8023883a 	mov	r17,r16
    4bfc:	1c07c83a 	sub	r3,r3,r16
    4c00:	1405883a 	add	r2,r2,r16
    4c04:	90c00215 	stw	r3,8(r18)
    4c08:	90800015 	stw	r2,0(r18)
    4c0c:	003fc406 	br	4b20 <__sfvwrite_r+0x2d0>
    4c10:	a00d883a 	mov	r6,r20
    4c14:	a021883a 	mov	r16,r20
    4c18:	003f8106 	br	4a20 <__sfvwrite_r+0x1d0>
    4c1c:	b80b883a 	mov	r5,r23
    4c20:	a00d883a 	mov	r6,r20
    4c24:	00059880 	call	5988 <memmove>
    4c28:	90c00217 	ldw	r3,8(r18)
    4c2c:	90800017 	ldw	r2,0(r18)
    4c30:	a021883a 	mov	r16,r20
    4c34:	1d07c83a 	sub	r3,r3,r20
    4c38:	1505883a 	add	r2,r2,r20
    4c3c:	a023883a 	mov	r17,r20
    4c40:	a027883a 	mov	r19,r20
    4c44:	90c00215 	stw	r3,8(r18)
    4c48:	90800015 	stw	r2,0(r18)
    4c4c:	003f8006 	br	4a50 <__sfvwrite_r+0x200>
    4c50:	b809883a 	mov	r4,r23
    4c54:	01400284 	movi	r5,10
    4c58:	980d883a 	mov	r6,r19
    4c5c:	00058040 	call	5804 <memchr>
    4c60:	10001726 	beq	r2,zero,4cc0 <__sfvwrite_r+0x470>
    4c64:	15c5c83a 	sub	r2,r2,r23
    4c68:	15000044 	addi	r20,r2,1
    4c6c:	00800044 	movi	r2,1
    4c70:	d8800015 	stw	r2,0(sp)
    4c74:	003f9806 	br	4ad8 <__sfvwrite_r+0x288>
    4c78:	b80b883a 	mov	r5,r23
    4c7c:	800d883a 	mov	r6,r16
    4c80:	00059880 	call	5988 <memmove>
    4c84:	90c00017 	ldw	r3,0(r18)
    4c88:	e009883a 	mov	r4,fp
    4c8c:	900b883a 	mov	r5,r18
    4c90:	1c07883a 	add	r3,r3,r16
    4c94:	90c00015 	stw	r3,0(r18)
    4c98:	8027883a 	mov	r19,r16
    4c9c:	0003f200 	call	3f20 <_fflush_r>
    4ca0:	103f6b26 	beq	r2,zero,4a50 <__sfvwrite_r+0x200>
    4ca4:	003f7f06 	br	4aa4 <__sfvwrite_r+0x254>
    4ca8:	400b883a 	mov	r5,r8
    4cac:	e009883a 	mov	r4,fp
    4cb0:	0006af40 	call	6af4 <_realloc_r>
    4cb4:	103f7626 	beq	r2,zero,4a90 <__sfvwrite_r+0x240>
    4cb8:	1023883a 	mov	r17,r2
    4cbc:	003f5006 	br	4a00 <__sfvwrite_r+0x1b0>
    4cc0:	00c00044 	movi	r3,1
    4cc4:	9d000044 	addi	r20,r19,1
    4cc8:	d8c00015 	stw	r3,0(sp)
    4ccc:	003f8206 	br	4ad8 <__sfvwrite_r+0x288>
    4cd0:	9080030b 	ldhu	r2,12(r18)
    4cd4:	00c00244 	movi	r3,9
    4cd8:	013fffc4 	movi	r4,-1
    4cdc:	10801014 	ori	r2,r2,64
    4ce0:	9080030d 	sth	r2,12(r18)
    4ce4:	e0c00015 	stw	r3,0(fp)
    4ce8:	003f0606 	br	4904 <__sfvwrite_r+0xb4>

00004cec <_fwalk_reent>:
    4cec:	defff704 	addi	sp,sp,-36
    4cf0:	dcc00315 	stw	r19,12(sp)
    4cf4:	24c0b804 	addi	r19,r4,736
    4cf8:	dd800615 	stw	r22,24(sp)
    4cfc:	dd400515 	stw	r21,20(sp)
    4d00:	dfc00815 	stw	ra,32(sp)
    4d04:	ddc00715 	stw	r23,28(sp)
    4d08:	dd000415 	stw	r20,16(sp)
    4d0c:	dc800215 	stw	r18,8(sp)
    4d10:	dc400115 	stw	r17,4(sp)
    4d14:	dc000015 	stw	r16,0(sp)
    4d18:	202b883a 	mov	r21,r4
    4d1c:	282d883a 	mov	r22,r5
    4d20:	00041a80 	call	41a8 <__sfp_lock_acquire>
    4d24:	98002126 	beq	r19,zero,4dac <_fwalk_reent+0xc0>
    4d28:	002f883a 	mov	r23,zero
    4d2c:	9c800117 	ldw	r18,4(r19)
    4d30:	9c000217 	ldw	r16,8(r19)
    4d34:	90bfffc4 	addi	r2,r18,-1
    4d38:	10000d16 	blt	r2,zero,4d70 <_fwalk_reent+0x84>
    4d3c:	0023883a 	mov	r17,zero
    4d40:	053fffc4 	movi	r20,-1
    4d44:	8080030f 	ldh	r2,12(r16)
    4d48:	8c400044 	addi	r17,r17,1
    4d4c:	10000626 	beq	r2,zero,4d68 <_fwalk_reent+0x7c>
    4d50:	8080038f 	ldh	r2,14(r16)
    4d54:	800b883a 	mov	r5,r16
    4d58:	a809883a 	mov	r4,r21
    4d5c:	15000226 	beq	r2,r20,4d68 <_fwalk_reent+0x7c>
    4d60:	b03ee83a 	callr	r22
    4d64:	b8aeb03a 	or	r23,r23,r2
    4d68:	84001704 	addi	r16,r16,92
    4d6c:	947ff51e 	bne	r18,r17,4d44 <_fwalk_reent+0x58>
    4d70:	9cc00017 	ldw	r19,0(r19)
    4d74:	983fed1e 	bne	r19,zero,4d2c <_fwalk_reent+0x40>
    4d78:	00041ac0 	call	41ac <__sfp_lock_release>
    4d7c:	b805883a 	mov	r2,r23
    4d80:	dfc00817 	ldw	ra,32(sp)
    4d84:	ddc00717 	ldw	r23,28(sp)
    4d88:	dd800617 	ldw	r22,24(sp)
    4d8c:	dd400517 	ldw	r21,20(sp)
    4d90:	dd000417 	ldw	r20,16(sp)
    4d94:	dcc00317 	ldw	r19,12(sp)
    4d98:	dc800217 	ldw	r18,8(sp)
    4d9c:	dc400117 	ldw	r17,4(sp)
    4da0:	dc000017 	ldw	r16,0(sp)
    4da4:	dec00904 	addi	sp,sp,36
    4da8:	f800283a 	ret
    4dac:	002f883a 	mov	r23,zero
    4db0:	003ff106 	br	4d78 <_fwalk_reent+0x8c>

00004db4 <_fwalk>:
    4db4:	defff804 	addi	sp,sp,-32
    4db8:	dcc00315 	stw	r19,12(sp)
    4dbc:	24c0b804 	addi	r19,r4,736
    4dc0:	dd400515 	stw	r21,20(sp)
    4dc4:	dfc00715 	stw	ra,28(sp)
    4dc8:	dd800615 	stw	r22,24(sp)
    4dcc:	dd000415 	stw	r20,16(sp)
    4dd0:	dc800215 	stw	r18,8(sp)
    4dd4:	dc400115 	stw	r17,4(sp)
    4dd8:	dc000015 	stw	r16,0(sp)
    4ddc:	282b883a 	mov	r21,r5
    4de0:	00041a80 	call	41a8 <__sfp_lock_acquire>
    4de4:	98001f26 	beq	r19,zero,4e64 <_fwalk+0xb0>
    4de8:	002d883a 	mov	r22,zero
    4dec:	9c800117 	ldw	r18,4(r19)
    4df0:	9c000217 	ldw	r16,8(r19)
    4df4:	90bfffc4 	addi	r2,r18,-1
    4df8:	10000c16 	blt	r2,zero,4e2c <_fwalk+0x78>
    4dfc:	0023883a 	mov	r17,zero
    4e00:	053fffc4 	movi	r20,-1
    4e04:	8080030f 	ldh	r2,12(r16)
    4e08:	8c400044 	addi	r17,r17,1
    4e0c:	10000526 	beq	r2,zero,4e24 <_fwalk+0x70>
    4e10:	8080038f 	ldh	r2,14(r16)
    4e14:	8009883a 	mov	r4,r16
    4e18:	15000226 	beq	r2,r20,4e24 <_fwalk+0x70>
    4e1c:	a83ee83a 	callr	r21
    4e20:	b0acb03a 	or	r22,r22,r2
    4e24:	84001704 	addi	r16,r16,92
    4e28:	947ff61e 	bne	r18,r17,4e04 <_fwalk+0x50>
    4e2c:	9cc00017 	ldw	r19,0(r19)
    4e30:	983fee1e 	bne	r19,zero,4dec <_fwalk+0x38>
    4e34:	00041ac0 	call	41ac <__sfp_lock_release>
    4e38:	b005883a 	mov	r2,r22
    4e3c:	dfc00717 	ldw	ra,28(sp)
    4e40:	dd800617 	ldw	r22,24(sp)
    4e44:	dd400517 	ldw	r21,20(sp)
    4e48:	dd000417 	ldw	r20,16(sp)
    4e4c:	dcc00317 	ldw	r19,12(sp)
    4e50:	dc800217 	ldw	r18,8(sp)
    4e54:	dc400117 	ldw	r17,4(sp)
    4e58:	dc000017 	ldw	r16,0(sp)
    4e5c:	dec00804 	addi	sp,sp,32
    4e60:	f800283a 	ret
    4e64:	002d883a 	mov	r22,zero
    4e68:	003ff206 	br	4e34 <_fwalk+0x80>

00004e6c <__locale_charset>:
    4e6c:	d0a00317 	ldw	r2,-32756(gp)
    4e70:	f800283a 	ret

00004e74 <_localeconv_r>:
    4e74:	00800074 	movhi	r2,1
    4e78:	10b44c04 	addi	r2,r2,-11984
    4e7c:	f800283a 	ret

00004e80 <localeconv>:
    4e80:	00800074 	movhi	r2,1
    4e84:	10bbe404 	addi	r2,r2,-4208
    4e88:	11000017 	ldw	r4,0(r2)
    4e8c:	0004e741 	jmpi	4e74 <_localeconv_r>

00004e90 <_setlocale_r>:
    4e90:	defffc04 	addi	sp,sp,-16
    4e94:	00c00074 	movhi	r3,1
    4e98:	18f42204 	addi	r3,r3,-12152
    4e9c:	dc800215 	stw	r18,8(sp)
    4ea0:	dc400115 	stw	r17,4(sp)
    4ea4:	dc000015 	stw	r16,0(sp)
    4ea8:	2023883a 	mov	r17,r4
    4eac:	2825883a 	mov	r18,r5
    4eb0:	dfc00315 	stw	ra,12(sp)
    4eb4:	3021883a 	mov	r16,r6
    4eb8:	3009883a 	mov	r4,r6
    4ebc:	180b883a 	mov	r5,r3
    4ec0:	30000926 	beq	r6,zero,4ee8 <_setlocale_r+0x58>
    4ec4:	00073140 	call	7314 <strcmp>
    4ec8:	8009883a 	mov	r4,r16
    4ecc:	01400074 	movhi	r5,1
    4ed0:	29743304 	addi	r5,r5,-12084
    4ed4:	10000b1e 	bne	r2,zero,4f04 <_setlocale_r+0x74>
    4ed8:	8c000d15 	stw	r16,52(r17)
    4edc:	8c800c15 	stw	r18,48(r17)
    4ee0:	00c00074 	movhi	r3,1
    4ee4:	18f42204 	addi	r3,r3,-12152
    4ee8:	1805883a 	mov	r2,r3
    4eec:	dfc00317 	ldw	ra,12(sp)
    4ef0:	dc800217 	ldw	r18,8(sp)
    4ef4:	dc400117 	ldw	r17,4(sp)
    4ef8:	dc000017 	ldw	r16,0(sp)
    4efc:	dec00404 	addi	sp,sp,16
    4f00:	f800283a 	ret
    4f04:	00073140 	call	7314 <strcmp>
    4f08:	0007883a 	mov	r3,zero
    4f0c:	103ff226 	beq	r2,zero,4ed8 <_setlocale_r+0x48>
    4f10:	003ff506 	br	4ee8 <_setlocale_r+0x58>

00004f14 <setlocale>:
    4f14:	01800074 	movhi	r6,1
    4f18:	31bbe404 	addi	r6,r6,-4208
    4f1c:	2007883a 	mov	r3,r4
    4f20:	31000017 	ldw	r4,0(r6)
    4f24:	280d883a 	mov	r6,r5
    4f28:	180b883a 	mov	r5,r3
    4f2c:	0004e901 	jmpi	4e90 <_setlocale_r>

00004f30 <__smakebuf_r>:
    4f30:	2880030b 	ldhu	r2,12(r5)
    4f34:	deffed04 	addi	sp,sp,-76
    4f38:	dc401015 	stw	r17,64(sp)
    4f3c:	1080008c 	andi	r2,r2,2
    4f40:	dc000f15 	stw	r16,60(sp)
    4f44:	dfc01215 	stw	ra,72(sp)
    4f48:	dc801115 	stw	r18,68(sp)
    4f4c:	2821883a 	mov	r16,r5
    4f50:	2023883a 	mov	r17,r4
    4f54:	10000b26 	beq	r2,zero,4f84 <__smakebuf_r+0x54>
    4f58:	28c010c4 	addi	r3,r5,67
    4f5c:	00800044 	movi	r2,1
    4f60:	28800515 	stw	r2,20(r5)
    4f64:	28c00415 	stw	r3,16(r5)
    4f68:	28c00015 	stw	r3,0(r5)
    4f6c:	dfc01217 	ldw	ra,72(sp)
    4f70:	dc801117 	ldw	r18,68(sp)
    4f74:	dc401017 	ldw	r17,64(sp)
    4f78:	dc000f17 	ldw	r16,60(sp)
    4f7c:	dec01304 	addi	sp,sp,76
    4f80:	f800283a 	ret
    4f84:	2940038f 	ldh	r5,14(r5)
    4f88:	28002116 	blt	r5,zero,5010 <__smakebuf_r+0xe0>
    4f8c:	d80d883a 	mov	r6,sp
    4f90:	00076900 	call	7690 <_fstat_r>
    4f94:	10001e16 	blt	r2,zero,5010 <__smakebuf_r+0xe0>
    4f98:	d8800117 	ldw	r2,4(sp)
    4f9c:	00e00014 	movui	r3,32768
    4fa0:	113c000c 	andi	r4,r2,61440
    4fa4:	20c03126 	beq	r4,r3,506c <__smakebuf_r+0x13c>
    4fa8:	8080030b 	ldhu	r2,12(r16)
    4fac:	00c80004 	movi	r3,8192
    4fb0:	10820014 	ori	r2,r2,2048
    4fb4:	8080030d 	sth	r2,12(r16)
    4fb8:	20c01e26 	beq	r4,r3,5034 <__smakebuf_r+0x104>
    4fbc:	04810004 	movi	r18,1024
    4fc0:	8809883a 	mov	r4,r17
    4fc4:	900b883a 	mov	r5,r18
    4fc8:	00050c40 	call	50c4 <_malloc_r>
    4fcc:	1009883a 	mov	r4,r2
    4fd0:	10003126 	beq	r2,zero,5098 <__smakebuf_r+0x168>
    4fd4:	80c0030b 	ldhu	r3,12(r16)
    4fd8:	00800034 	movhi	r2,0
    4fdc:	1090a704 	addi	r2,r2,17052
    4fe0:	88800f15 	stw	r2,60(r17)
    4fe4:	18c02014 	ori	r3,r3,128
    4fe8:	84800515 	stw	r18,20(r16)
    4fec:	80c0030d 	sth	r3,12(r16)
    4ff0:	81000415 	stw	r4,16(r16)
    4ff4:	81000015 	stw	r4,0(r16)
    4ff8:	dfc01217 	ldw	ra,72(sp)
    4ffc:	dc801117 	ldw	r18,68(sp)
    5000:	dc401017 	ldw	r17,64(sp)
    5004:	dc000f17 	ldw	r16,60(sp)
    5008:	dec01304 	addi	sp,sp,76
    500c:	f800283a 	ret
    5010:	80c0030b 	ldhu	r3,12(r16)
    5014:	1880200c 	andi	r2,r3,128
    5018:	10000426 	beq	r2,zero,502c <__smakebuf_r+0xfc>
    501c:	04801004 	movi	r18,64
    5020:	18820014 	ori	r2,r3,2048
    5024:	8080030d 	sth	r2,12(r16)
    5028:	003fe506 	br	4fc0 <__smakebuf_r+0x90>
    502c:	04810004 	movi	r18,1024
    5030:	003ffb06 	br	5020 <__smakebuf_r+0xf0>
    5034:	8140038f 	ldh	r5,14(r16)
    5038:	8809883a 	mov	r4,r17
    503c:	00077040 	call	7704 <_isatty_r>
    5040:	103fde26 	beq	r2,zero,4fbc <__smakebuf_r+0x8c>
    5044:	8080030b 	ldhu	r2,12(r16)
    5048:	80c010c4 	addi	r3,r16,67
    504c:	04810004 	movi	r18,1024
    5050:	10800054 	ori	r2,r2,1
    5054:	8080030d 	sth	r2,12(r16)
    5058:	00800044 	movi	r2,1
    505c:	80c00415 	stw	r3,16(r16)
    5060:	80800515 	stw	r2,20(r16)
    5064:	80c00015 	stw	r3,0(r16)
    5068:	003fd506 	br	4fc0 <__smakebuf_r+0x90>
    506c:	80c00a17 	ldw	r3,40(r16)
    5070:	00800034 	movhi	r2,0
    5074:	109c7404 	addi	r2,r2,29136
    5078:	18bfcb1e 	bne	r3,r2,4fa8 <__smakebuf_r+0x78>
    507c:	8080030b 	ldhu	r2,12(r16)
    5080:	00c10004 	movi	r3,1024
    5084:	1825883a 	mov	r18,r3
    5088:	10c4b03a 	or	r2,r2,r3
    508c:	8080030d 	sth	r2,12(r16)
    5090:	80c01315 	stw	r3,76(r16)
    5094:	003fca06 	br	4fc0 <__smakebuf_r+0x90>
    5098:	8100030b 	ldhu	r4,12(r16)
    509c:	2080800c 	andi	r2,r4,512
    50a0:	103fb21e 	bne	r2,zero,4f6c <__smakebuf_r+0x3c>
    50a4:	80c010c4 	addi	r3,r16,67
    50a8:	21000094 	ori	r4,r4,2
    50ac:	00800044 	movi	r2,1
    50b0:	80800515 	stw	r2,20(r16)
    50b4:	8100030d 	sth	r4,12(r16)
    50b8:	80c00415 	stw	r3,16(r16)
    50bc:	80c00015 	stw	r3,0(r16)
    50c0:	003faa06 	br	4f6c <__smakebuf_r+0x3c>

000050c4 <_malloc_r>:
    50c4:	defff604 	addi	sp,sp,-40
    50c8:	28c002c4 	addi	r3,r5,11
    50cc:	00800584 	movi	r2,22
    50d0:	dc800215 	stw	r18,8(sp)
    50d4:	dfc00915 	stw	ra,36(sp)
    50d8:	df000815 	stw	fp,32(sp)
    50dc:	ddc00715 	stw	r23,28(sp)
    50e0:	dd800615 	stw	r22,24(sp)
    50e4:	dd400515 	stw	r21,20(sp)
    50e8:	dd000415 	stw	r20,16(sp)
    50ec:	dcc00315 	stw	r19,12(sp)
    50f0:	dc400115 	stw	r17,4(sp)
    50f4:	dc000015 	stw	r16,0(sp)
    50f8:	2025883a 	mov	r18,r4
    50fc:	10c01236 	bltu	r2,r3,5148 <_malloc_r+0x84>
    5100:	04400404 	movi	r17,16
    5104:	8940142e 	bgeu	r17,r5,5158 <_malloc_r+0x94>
    5108:	00800304 	movi	r2,12
    510c:	0007883a 	mov	r3,zero
    5110:	90800015 	stw	r2,0(r18)
    5114:	1805883a 	mov	r2,r3
    5118:	dfc00917 	ldw	ra,36(sp)
    511c:	df000817 	ldw	fp,32(sp)
    5120:	ddc00717 	ldw	r23,28(sp)
    5124:	dd800617 	ldw	r22,24(sp)
    5128:	dd400517 	ldw	r21,20(sp)
    512c:	dd000417 	ldw	r20,16(sp)
    5130:	dcc00317 	ldw	r19,12(sp)
    5134:	dc800217 	ldw	r18,8(sp)
    5138:	dc400117 	ldw	r17,4(sp)
    513c:	dc000017 	ldw	r16,0(sp)
    5140:	dec00a04 	addi	sp,sp,40
    5144:	f800283a 	ret
    5148:	00bffe04 	movi	r2,-8
    514c:	18a2703a 	and	r17,r3,r2
    5150:	883fed16 	blt	r17,zero,5108 <_malloc_r+0x44>
    5154:	897fec36 	bltu	r17,r5,5108 <_malloc_r+0x44>
    5158:	9009883a 	mov	r4,r18
    515c:	000a3780 	call	a378 <__malloc_lock>
    5160:	00807dc4 	movi	r2,503
    5164:	14402b2e 	bgeu	r2,r17,5214 <_malloc_r+0x150>
    5168:	8806d27a 	srli	r3,r17,9
    516c:	18003f1e 	bne	r3,zero,526c <_malloc_r+0x1a8>
    5170:	880cd0fa 	srli	r6,r17,3
    5174:	300490fa 	slli	r2,r6,3
    5178:	02c00074 	movhi	r11,1
    517c:	5af5fe04 	addi	r11,r11,-10248
    5180:	12cb883a 	add	r5,r2,r11
    5184:	2c000317 	ldw	r16,12(r5)
    5188:	580f883a 	mov	r7,r11
    518c:	2c00041e 	bne	r5,r16,51a0 <_malloc_r+0xdc>
    5190:	00000a06 	br	51bc <_malloc_r+0xf8>
    5194:	1800860e 	bge	r3,zero,53b0 <_malloc_r+0x2ec>
    5198:	84000317 	ldw	r16,12(r16)
    519c:	2c000726 	beq	r5,r16,51bc <_malloc_r+0xf8>
    51a0:	80800117 	ldw	r2,4(r16)
    51a4:	00ffff04 	movi	r3,-4
    51a8:	10c8703a 	and	r4,r2,r3
    51ac:	2447c83a 	sub	r3,r4,r17
    51b0:	008003c4 	movi	r2,15
    51b4:	10fff70e 	bge	r2,r3,5194 <_malloc_r+0xd0>
    51b8:	31bfffc4 	addi	r6,r6,-1
    51bc:	32400044 	addi	r9,r6,1
    51c0:	02800074 	movhi	r10,1
    51c4:	52b60004 	addi	r10,r10,-10240
    51c8:	54000217 	ldw	r16,8(r10)
    51cc:	8280a026 	beq	r16,r10,5450 <_malloc_r+0x38c>
    51d0:	80800117 	ldw	r2,4(r16)
    51d4:	00ffff04 	movi	r3,-4
    51d8:	10ca703a 	and	r5,r2,r3
    51dc:	2c4dc83a 	sub	r6,r5,r17
    51e0:	008003c4 	movi	r2,15
    51e4:	11808316 	blt	r2,r6,53f4 <_malloc_r+0x330>
    51e8:	52800315 	stw	r10,12(r10)
    51ec:	52800215 	stw	r10,8(r10)
    51f0:	30002916 	blt	r6,zero,5298 <_malloc_r+0x1d4>
    51f4:	8147883a 	add	r3,r16,r5
    51f8:	18800117 	ldw	r2,4(r3)
    51fc:	9009883a 	mov	r4,r18
    5200:	10800054 	ori	r2,r2,1
    5204:	18800115 	stw	r2,4(r3)
    5208:	000a3980 	call	a398 <__malloc_unlock>
    520c:	80c00204 	addi	r3,r16,8
    5210:	003fc006 	br	5114 <_malloc_r+0x50>
    5214:	02c00074 	movhi	r11,1
    5218:	5af5fe04 	addi	r11,r11,-10248
    521c:	8ac5883a 	add	r2,r17,r11
    5220:	14000317 	ldw	r16,12(r2)
    5224:	580f883a 	mov	r7,r11
    5228:	8806d0fa 	srli	r3,r17,3
    522c:	14006c26 	beq	r2,r16,53e0 <_malloc_r+0x31c>
    5230:	80c00117 	ldw	r3,4(r16)
    5234:	00bfff04 	movi	r2,-4
    5238:	81800317 	ldw	r6,12(r16)
    523c:	1886703a 	and	r3,r3,r2
    5240:	80c7883a 	add	r3,r16,r3
    5244:	18800117 	ldw	r2,4(r3)
    5248:	81400217 	ldw	r5,8(r16)
    524c:	9009883a 	mov	r4,r18
    5250:	10800054 	ori	r2,r2,1
    5254:	18800115 	stw	r2,4(r3)
    5258:	31400215 	stw	r5,8(r6)
    525c:	29800315 	stw	r6,12(r5)
    5260:	000a3980 	call	a398 <__malloc_unlock>
    5264:	80c00204 	addi	r3,r16,8
    5268:	003faa06 	br	5114 <_malloc_r+0x50>
    526c:	00800104 	movi	r2,4
    5270:	10c0052e 	bgeu	r2,r3,5288 <_malloc_r+0x1c4>
    5274:	00800504 	movi	r2,20
    5278:	10c07836 	bltu	r2,r3,545c <_malloc_r+0x398>
    527c:	198016c4 	addi	r6,r3,91
    5280:	300490fa 	slli	r2,r6,3
    5284:	003fbc06 	br	5178 <_malloc_r+0xb4>
    5288:	8804d1ba 	srli	r2,r17,6
    528c:	11800e04 	addi	r6,r2,56
    5290:	300490fa 	slli	r2,r6,3
    5294:	003fb806 	br	5178 <_malloc_r+0xb4>
    5298:	00807fc4 	movi	r2,511
    529c:	1140bb36 	bltu	r2,r5,558c <_malloc_r+0x4c8>
    52a0:	2806d0fa 	srli	r3,r5,3
    52a4:	573ffe04 	addi	fp,r10,-8
    52a8:	00800044 	movi	r2,1
    52ac:	180890fa 	slli	r4,r3,3
    52b0:	1807d0ba 	srai	r3,r3,2
    52b4:	e1c00117 	ldw	r7,4(fp)
    52b8:	5909883a 	add	r4,r11,r4
    52bc:	21400217 	ldw	r5,8(r4)
    52c0:	10c4983a 	sll	r2,r2,r3
    52c4:	81000315 	stw	r4,12(r16)
    52c8:	81400215 	stw	r5,8(r16)
    52cc:	388eb03a 	or	r7,r7,r2
    52d0:	2c000315 	stw	r16,12(r5)
    52d4:	24000215 	stw	r16,8(r4)
    52d8:	e1c00115 	stw	r7,4(fp)
    52dc:	4807883a 	mov	r3,r9
    52e0:	4800cd16 	blt	r9,zero,5618 <_malloc_r+0x554>
    52e4:	1807d0ba 	srai	r3,r3,2
    52e8:	00800044 	movi	r2,1
    52ec:	10c8983a 	sll	r4,r2,r3
    52f0:	39004436 	bltu	r7,r4,5404 <_malloc_r+0x340>
    52f4:	21c4703a 	and	r2,r4,r7
    52f8:	10000a1e 	bne	r2,zero,5324 <_malloc_r+0x260>
    52fc:	2109883a 	add	r4,r4,r4
    5300:	00bfff04 	movi	r2,-4
    5304:	4884703a 	and	r2,r9,r2
    5308:	3906703a 	and	r3,r7,r4
    530c:	12400104 	addi	r9,r2,4
    5310:	1800041e 	bne	r3,zero,5324 <_malloc_r+0x260>
    5314:	2109883a 	add	r4,r4,r4
    5318:	3904703a 	and	r2,r7,r4
    531c:	4a400104 	addi	r9,r9,4
    5320:	103ffc26 	beq	r2,zero,5314 <_malloc_r+0x250>
    5324:	480490fa 	slli	r2,r9,3
    5328:	4819883a 	mov	r12,r9
    532c:	023fff04 	movi	r8,-4
    5330:	589b883a 	add	r13,r11,r2
    5334:	6807883a 	mov	r3,r13
    5338:	014003c4 	movi	r5,15
    533c:	1c000317 	ldw	r16,12(r3)
    5340:	1c00041e 	bne	r3,r16,5354 <_malloc_r+0x290>
    5344:	0000a706 	br	55e4 <_malloc_r+0x520>
    5348:	3000ab0e 	bge	r6,zero,55f8 <_malloc_r+0x534>
    534c:	84000317 	ldw	r16,12(r16)
    5350:	1c00a426 	beq	r3,r16,55e4 <_malloc_r+0x520>
    5354:	80800117 	ldw	r2,4(r16)
    5358:	1204703a 	and	r2,r2,r8
    535c:	144dc83a 	sub	r6,r2,r17
    5360:	29bff90e 	bge	r5,r6,5348 <_malloc_r+0x284>
    5364:	81000317 	ldw	r4,12(r16)
    5368:	80c00217 	ldw	r3,8(r16)
    536c:	89400054 	ori	r5,r17,1
    5370:	8445883a 	add	r2,r16,r17
    5374:	20c00215 	stw	r3,8(r4)
    5378:	19000315 	stw	r4,12(r3)
    537c:	81400115 	stw	r5,4(r16)
    5380:	1187883a 	add	r3,r2,r6
    5384:	31000054 	ori	r4,r6,1
    5388:	50800315 	stw	r2,12(r10)
    538c:	50800215 	stw	r2,8(r10)
    5390:	19800015 	stw	r6,0(r3)
    5394:	11000115 	stw	r4,4(r2)
    5398:	12800215 	stw	r10,8(r2)
    539c:	12800315 	stw	r10,12(r2)
    53a0:	9009883a 	mov	r4,r18
    53a4:	000a3980 	call	a398 <__malloc_unlock>
    53a8:	80c00204 	addi	r3,r16,8
    53ac:	003f5906 	br	5114 <_malloc_r+0x50>
    53b0:	8109883a 	add	r4,r16,r4
    53b4:	20800117 	ldw	r2,4(r4)
    53b8:	80c00217 	ldw	r3,8(r16)
    53bc:	81400317 	ldw	r5,12(r16)
    53c0:	10800054 	ori	r2,r2,1
    53c4:	20800115 	stw	r2,4(r4)
    53c8:	28c00215 	stw	r3,8(r5)
    53cc:	19400315 	stw	r5,12(r3)
    53d0:	9009883a 	mov	r4,r18
    53d4:	000a3980 	call	a398 <__malloc_unlock>
    53d8:	80c00204 	addi	r3,r16,8
    53dc:	003f4d06 	br	5114 <_malloc_r+0x50>
    53e0:	80800204 	addi	r2,r16,8
    53e4:	14000317 	ldw	r16,12(r2)
    53e8:	143f911e 	bne	r2,r16,5230 <_malloc_r+0x16c>
    53ec:	1a400084 	addi	r9,r3,2
    53f0:	003f7306 	br	51c0 <_malloc_r+0xfc>
    53f4:	88c00054 	ori	r3,r17,1
    53f8:	8445883a 	add	r2,r16,r17
    53fc:	80c00115 	stw	r3,4(r16)
    5400:	003fdf06 	br	5380 <_malloc_r+0x2bc>
    5404:	e4000217 	ldw	r16,8(fp)
    5408:	00bfff04 	movi	r2,-4
    540c:	80c00117 	ldw	r3,4(r16)
    5410:	802d883a 	mov	r22,r16
    5414:	18aa703a 	and	r21,r3,r2
    5418:	ac401636 	bltu	r21,r17,5474 <_malloc_r+0x3b0>
    541c:	ac49c83a 	sub	r4,r21,r17
    5420:	008003c4 	movi	r2,15
    5424:	1100130e 	bge	r2,r4,5474 <_malloc_r+0x3b0>
    5428:	88800054 	ori	r2,r17,1
    542c:	8447883a 	add	r3,r16,r17
    5430:	80800115 	stw	r2,4(r16)
    5434:	20800054 	ori	r2,r4,1
    5438:	18800115 	stw	r2,4(r3)
    543c:	e0c00215 	stw	r3,8(fp)
    5440:	9009883a 	mov	r4,r18
    5444:	000a3980 	call	a398 <__malloc_unlock>
    5448:	80c00204 	addi	r3,r16,8
    544c:	003f3106 	br	5114 <_malloc_r+0x50>
    5450:	39c00117 	ldw	r7,4(r7)
    5454:	573ffe04 	addi	fp,r10,-8
    5458:	003fa006 	br	52dc <_malloc_r+0x218>
    545c:	00801504 	movi	r2,84
    5460:	10c06736 	bltu	r2,r3,5600 <_malloc_r+0x53c>
    5464:	8804d33a 	srli	r2,r17,12
    5468:	11801b84 	addi	r6,r2,110
    546c:	300490fa 	slli	r2,r6,3
    5470:	003f4106 	br	5178 <_malloc_r+0xb4>
    5474:	d0a70c17 	ldw	r2,-25552(gp)
    5478:	d0e00517 	ldw	r3,-32748(gp)
    547c:	053fffc4 	movi	r20,-1
    5480:	10800404 	addi	r2,r2,16
    5484:	88a7883a 	add	r19,r17,r2
    5488:	1d000326 	beq	r3,r20,5498 <_malloc_r+0x3d4>
    548c:	98c3ffc4 	addi	r3,r19,4095
    5490:	00bc0004 	movi	r2,-4096
    5494:	18a6703a 	and	r19,r3,r2
    5498:	9009883a 	mov	r4,r18
    549c:	980b883a 	mov	r5,r19
    54a0:	00071580 	call	7158 <_sbrk_r>
    54a4:	1009883a 	mov	r4,r2
    54a8:	15000426 	beq	r2,r20,54bc <_malloc_r+0x3f8>
    54ac:	854b883a 	add	r5,r16,r21
    54b0:	1029883a 	mov	r20,r2
    54b4:	11405a2e 	bgeu	r2,r5,5620 <_malloc_r+0x55c>
    54b8:	87000c26 	beq	r16,fp,54ec <_malloc_r+0x428>
    54bc:	e4000217 	ldw	r16,8(fp)
    54c0:	80c00117 	ldw	r3,4(r16)
    54c4:	00bfff04 	movi	r2,-4
    54c8:	1884703a 	and	r2,r3,r2
    54cc:	14400336 	bltu	r2,r17,54dc <_malloc_r+0x418>
    54d0:	1449c83a 	sub	r4,r2,r17
    54d4:	008003c4 	movi	r2,15
    54d8:	113fd316 	blt	r2,r4,5428 <_malloc_r+0x364>
    54dc:	9009883a 	mov	r4,r18
    54e0:	000a3980 	call	a398 <__malloc_unlock>
    54e4:	0007883a 	mov	r3,zero
    54e8:	003f0a06 	br	5114 <_malloc_r+0x50>
    54ec:	05c00074 	movhi	r23,1
    54f0:	bdc2fa04 	addi	r23,r23,3048
    54f4:	b8800017 	ldw	r2,0(r23)
    54f8:	988d883a 	add	r6,r19,r2
    54fc:	b9800015 	stw	r6,0(r23)
    5500:	d0e00517 	ldw	r3,-32748(gp)
    5504:	00bfffc4 	movi	r2,-1
    5508:	18808e26 	beq	r3,r2,5744 <_malloc_r+0x680>
    550c:	2145c83a 	sub	r2,r4,r5
    5510:	3085883a 	add	r2,r6,r2
    5514:	b8800015 	stw	r2,0(r23)
    5518:	20c001cc 	andi	r3,r4,7
    551c:	18005f1e 	bne	r3,zero,569c <_malloc_r+0x5d8>
    5520:	000b883a 	mov	r5,zero
    5524:	a4c5883a 	add	r2,r20,r19
    5528:	1083ffcc 	andi	r2,r2,4095
    552c:	00c40004 	movi	r3,4096
    5530:	1887c83a 	sub	r3,r3,r2
    5534:	28e7883a 	add	r19,r5,r3
    5538:	9009883a 	mov	r4,r18
    553c:	980b883a 	mov	r5,r19
    5540:	00071580 	call	7158 <_sbrk_r>
    5544:	1007883a 	mov	r3,r2
    5548:	00bfffc4 	movi	r2,-1
    554c:	18807a26 	beq	r3,r2,5738 <_malloc_r+0x674>
    5550:	1d05c83a 	sub	r2,r3,r20
    5554:	9885883a 	add	r2,r19,r2
    5558:	10c00054 	ori	r3,r2,1
    555c:	b8800017 	ldw	r2,0(r23)
    5560:	a021883a 	mov	r16,r20
    5564:	a0c00115 	stw	r3,4(r20)
    5568:	9885883a 	add	r2,r19,r2
    556c:	b8800015 	stw	r2,0(r23)
    5570:	e5000215 	stw	r20,8(fp)
    5574:	b7003626 	beq	r22,fp,5650 <_malloc_r+0x58c>
    5578:	018003c4 	movi	r6,15
    557c:	35404b36 	bltu	r6,r21,56ac <_malloc_r+0x5e8>
    5580:	00800044 	movi	r2,1
    5584:	a0800115 	stw	r2,4(r20)
    5588:	003fcd06 	br	54c0 <_malloc_r+0x3fc>
    558c:	2808d27a 	srli	r4,r5,9
    5590:	2000371e 	bne	r4,zero,5670 <_malloc_r+0x5ac>
    5594:	2808d0fa 	srli	r4,r5,3
    5598:	200690fa 	slli	r3,r4,3
    559c:	1ad1883a 	add	r8,r3,r11
    55a0:	41800217 	ldw	r6,8(r8)
    55a4:	41805b26 	beq	r8,r6,5714 <_malloc_r+0x650>
    55a8:	30800117 	ldw	r2,4(r6)
    55ac:	00ffff04 	movi	r3,-4
    55b0:	10c4703a 	and	r2,r2,r3
    55b4:	2880022e 	bgeu	r5,r2,55c0 <_malloc_r+0x4fc>
    55b8:	31800217 	ldw	r6,8(r6)
    55bc:	41bffa1e 	bne	r8,r6,55a8 <_malloc_r+0x4e4>
    55c0:	32000317 	ldw	r8,12(r6)
    55c4:	39c00117 	ldw	r7,4(r7)
    55c8:	82000315 	stw	r8,12(r16)
    55cc:	81800215 	stw	r6,8(r16)
    55d0:	07000074 	movhi	fp,1
    55d4:	e735fe04 	addi	fp,fp,-10248
    55d8:	34000315 	stw	r16,12(r6)
    55dc:	44000215 	stw	r16,8(r8)
    55e0:	003f3e06 	br	52dc <_malloc_r+0x218>
    55e4:	63000044 	addi	r12,r12,1
    55e8:	608000cc 	andi	r2,r12,3
    55ec:	10005d26 	beq	r2,zero,5764 <_malloc_r+0x6a0>
    55f0:	18c00204 	addi	r3,r3,8
    55f4:	003f5106 	br	533c <_malloc_r+0x278>
    55f8:	8089883a 	add	r4,r16,r2
    55fc:	003f6d06 	br	53b4 <_malloc_r+0x2f0>
    5600:	00805504 	movi	r2,340
    5604:	10c02036 	bltu	r2,r3,5688 <_malloc_r+0x5c4>
    5608:	8804d3fa 	srli	r2,r17,15
    560c:	11801dc4 	addi	r6,r2,119
    5610:	300490fa 	slli	r2,r6,3
    5614:	003ed806 	br	5178 <_malloc_r+0xb4>
    5618:	48c000c4 	addi	r3,r9,3
    561c:	003f3106 	br	52e4 <_malloc_r+0x220>
    5620:	05c00074 	movhi	r23,1
    5624:	bdc2fa04 	addi	r23,r23,3048
    5628:	b8800017 	ldw	r2,0(r23)
    562c:	988d883a 	add	r6,r19,r2
    5630:	b9800015 	stw	r6,0(r23)
    5634:	293fb21e 	bne	r5,r4,5500 <_malloc_r+0x43c>
    5638:	2083ffcc 	andi	r2,r4,4095
    563c:	103fb01e 	bne	r2,zero,5500 <_malloc_r+0x43c>
    5640:	e4000217 	ldw	r16,8(fp)
    5644:	9d45883a 	add	r2,r19,r21
    5648:	10800054 	ori	r2,r2,1
    564c:	80800115 	stw	r2,4(r16)
    5650:	b8c00017 	ldw	r3,0(r23)
    5654:	d0a70d17 	ldw	r2,-25548(gp)
    5658:	10c0012e 	bgeu	r2,r3,5660 <_malloc_r+0x59c>
    565c:	d0e70d15 	stw	r3,-25548(gp)
    5660:	d0a70e17 	ldw	r2,-25544(gp)
    5664:	10ff962e 	bgeu	r2,r3,54c0 <_malloc_r+0x3fc>
    5668:	d0e70e15 	stw	r3,-25544(gp)
    566c:	003f9406 	br	54c0 <_malloc_r+0x3fc>
    5670:	00800104 	movi	r2,4
    5674:	11001e36 	bltu	r2,r4,56f0 <_malloc_r+0x62c>
    5678:	2804d1ba 	srli	r2,r5,6
    567c:	11000e04 	addi	r4,r2,56
    5680:	200690fa 	slli	r3,r4,3
    5684:	003fc506 	br	559c <_malloc_r+0x4d8>
    5688:	00815504 	movi	r2,1364
    568c:	10c01d2e 	bgeu	r2,r3,5704 <_malloc_r+0x640>
    5690:	01801f84 	movi	r6,126
    5694:	0080fc04 	movi	r2,1008
    5698:	003eb706 	br	5178 <_malloc_r+0xb4>
    569c:	00800204 	movi	r2,8
    56a0:	10cbc83a 	sub	r5,r2,r3
    56a4:	2169883a 	add	r20,r4,r5
    56a8:	003f9e06 	br	5524 <_malloc_r+0x460>
    56ac:	00bffe04 	movi	r2,-8
    56b0:	a93ffd04 	addi	r4,r21,-12
    56b4:	2088703a 	and	r4,r4,r2
    56b8:	b10b883a 	add	r5,r22,r4
    56bc:	00c00144 	movi	r3,5
    56c0:	28c00215 	stw	r3,8(r5)
    56c4:	28c00115 	stw	r3,4(r5)
    56c8:	b0800117 	ldw	r2,4(r22)
    56cc:	1080004c 	andi	r2,r2,1
    56d0:	2084b03a 	or	r2,r4,r2
    56d4:	b0800115 	stw	r2,4(r22)
    56d8:	313fdd2e 	bgeu	r6,r4,5650 <_malloc_r+0x58c>
    56dc:	b1400204 	addi	r5,r22,8
    56e0:	9009883a 	mov	r4,r18
    56e4:	000453c0 	call	453c <_free_r>
    56e8:	e4000217 	ldw	r16,8(fp)
    56ec:	003fd806 	br	5650 <_malloc_r+0x58c>
    56f0:	00800504 	movi	r2,20
    56f4:	11001536 	bltu	r2,r4,574c <_malloc_r+0x688>
    56f8:	210016c4 	addi	r4,r4,91
    56fc:	200690fa 	slli	r3,r4,3
    5700:	003fa606 	br	559c <_malloc_r+0x4d8>
    5704:	8804d4ba 	srli	r2,r17,18
    5708:	11801f04 	addi	r6,r2,124
    570c:	300490fa 	slli	r2,r6,3
    5710:	003e9906 	br	5178 <_malloc_r+0xb4>
    5714:	2009d0ba 	srai	r4,r4,2
    5718:	01400074 	movhi	r5,1
    571c:	2975fe04 	addi	r5,r5,-10248
    5720:	00c00044 	movi	r3,1
    5724:	28800117 	ldw	r2,4(r5)
    5728:	1906983a 	sll	r3,r3,r4
    572c:	10c4b03a 	or	r2,r2,r3
    5730:	28800115 	stw	r2,4(r5)
    5734:	003fa306 	br	55c4 <_malloc_r+0x500>
    5738:	0027883a 	mov	r19,zero
    573c:	00c00044 	movi	r3,1
    5740:	003f8606 	br	555c <_malloc_r+0x498>
    5744:	d1200515 	stw	r4,-32748(gp)
    5748:	003f7306 	br	5518 <_malloc_r+0x454>
    574c:	00801504 	movi	r2,84
    5750:	11001936 	bltu	r2,r4,57b8 <_malloc_r+0x6f4>
    5754:	2804d33a 	srli	r2,r5,12
    5758:	11001b84 	addi	r4,r2,110
    575c:	200690fa 	slli	r3,r4,3
    5760:	003f8e06 	br	559c <_malloc_r+0x4d8>
    5764:	480b883a 	mov	r5,r9
    5768:	6807883a 	mov	r3,r13
    576c:	288000cc 	andi	r2,r5,3
    5770:	18fffe04 	addi	r3,r3,-8
    5774:	297fffc4 	addi	r5,r5,-1
    5778:	10001526 	beq	r2,zero,57d0 <_malloc_r+0x70c>
    577c:	18800217 	ldw	r2,8(r3)
    5780:	10fffa26 	beq	r2,r3,576c <_malloc_r+0x6a8>
    5784:	2109883a 	add	r4,r4,r4
    5788:	393f1e36 	bltu	r7,r4,5404 <_malloc_r+0x340>
    578c:	203f1d26 	beq	r4,zero,5404 <_malloc_r+0x340>
    5790:	21c4703a 	and	r2,r4,r7
    5794:	10000226 	beq	r2,zero,57a0 <_malloc_r+0x6dc>
    5798:	6013883a 	mov	r9,r12
    579c:	003ee106 	br	5324 <_malloc_r+0x260>
    57a0:	2109883a 	add	r4,r4,r4
    57a4:	3904703a 	and	r2,r7,r4
    57a8:	63000104 	addi	r12,r12,4
    57ac:	103ffc26 	beq	r2,zero,57a0 <_malloc_r+0x6dc>
    57b0:	6013883a 	mov	r9,r12
    57b4:	003edb06 	br	5324 <_malloc_r+0x260>
    57b8:	00805504 	movi	r2,340
    57bc:	11000836 	bltu	r2,r4,57e0 <_malloc_r+0x71c>
    57c0:	2804d3fa 	srli	r2,r5,15
    57c4:	11001dc4 	addi	r4,r2,119
    57c8:	200690fa 	slli	r3,r4,3
    57cc:	003f7306 	br	559c <_malloc_r+0x4d8>
    57d0:	0104303a 	nor	r2,zero,r4
    57d4:	388e703a 	and	r7,r7,r2
    57d8:	e1c00115 	stw	r7,4(fp)
    57dc:	003fe906 	br	5784 <_malloc_r+0x6c0>
    57e0:	00815504 	movi	r2,1364
    57e4:	1100032e 	bgeu	r2,r4,57f4 <_malloc_r+0x730>
    57e8:	01001f84 	movi	r4,126
    57ec:	00c0fc04 	movi	r3,1008
    57f0:	003f6a06 	br	559c <_malloc_r+0x4d8>
    57f4:	2804d4ba 	srli	r2,r5,18
    57f8:	11001f04 	addi	r4,r2,124
    57fc:	200690fa 	slli	r3,r4,3
    5800:	003f6606 	br	559c <_malloc_r+0x4d8>

00005804 <memchr>:
    5804:	008000c4 	movi	r2,3
    5808:	29403fcc 	andi	r5,r5,255
    580c:	2007883a 	mov	r3,r4
    5810:	1180022e 	bgeu	r2,r6,581c <memchr+0x18>
    5814:	2084703a 	and	r2,r4,r2
    5818:	10000b26 	beq	r2,zero,5848 <memchr+0x44>
    581c:	313fffc4 	addi	r4,r6,-1
    5820:	3000051e 	bne	r6,zero,5838 <memchr+0x34>
    5824:	00002c06 	br	58d8 <memchr+0xd4>
    5828:	213fffc4 	addi	r4,r4,-1
    582c:	00bfffc4 	movi	r2,-1
    5830:	18c00044 	addi	r3,r3,1
    5834:	20802826 	beq	r4,r2,58d8 <memchr+0xd4>
    5838:	18800003 	ldbu	r2,0(r3)
    583c:	28bffa1e 	bne	r5,r2,5828 <memchr+0x24>
    5840:	1805883a 	mov	r2,r3
    5844:	f800283a 	ret
    5848:	0011883a 	mov	r8,zero
    584c:	0007883a 	mov	r3,zero
    5850:	01c00104 	movi	r7,4
    5854:	4004923a 	slli	r2,r8,8
    5858:	18c00044 	addi	r3,r3,1
    585c:	1151883a 	add	r8,r2,r5
    5860:	19fffc1e 	bne	r3,r7,5854 <memchr+0x50>
    5864:	02bfbff4 	movhi	r10,65279
    5868:	52bfbfc4 	addi	r10,r10,-257
    586c:	02602074 	movhi	r9,32897
    5870:	4a602004 	addi	r9,r9,-32640
    5874:	02c000c4 	movi	r11,3
    5878:	20800017 	ldw	r2,0(r4)
    587c:	31bfff04 	addi	r6,r6,-4
    5880:	200f883a 	mov	r7,r4
    5884:	1204f03a 	xor	r2,r2,r8
    5888:	1287883a 	add	r3,r2,r10
    588c:	1a46703a 	and	r3,r3,r9
    5890:	0084303a 	nor	r2,zero,r2
    5894:	10c4703a 	and	r2,r2,r3
    5898:	10000b26 	beq	r2,zero,58c8 <memchr+0xc4>
    589c:	20800003 	ldbu	r2,0(r4)
    58a0:	28800f26 	beq	r5,r2,58e0 <memchr+0xdc>
    58a4:	20800043 	ldbu	r2,1(r4)
    58a8:	21c00044 	addi	r7,r4,1
    58ac:	28800c26 	beq	r5,r2,58e0 <memchr+0xdc>
    58b0:	20800083 	ldbu	r2,2(r4)
    58b4:	21c00084 	addi	r7,r4,2
    58b8:	28800926 	beq	r5,r2,58e0 <memchr+0xdc>
    58bc:	208000c3 	ldbu	r2,3(r4)
    58c0:	21c000c4 	addi	r7,r4,3
    58c4:	28800626 	beq	r5,r2,58e0 <memchr+0xdc>
    58c8:	21000104 	addi	r4,r4,4
    58cc:	59bfea36 	bltu	r11,r6,5878 <memchr+0x74>
    58d0:	2007883a 	mov	r3,r4
    58d4:	003fd106 	br	581c <memchr+0x18>
    58d8:	0005883a 	mov	r2,zero
    58dc:	f800283a 	ret
    58e0:	3805883a 	mov	r2,r7
    58e4:	f800283a 	ret

000058e8 <memcpy>:
    58e8:	01c003c4 	movi	r7,15
    58ec:	2007883a 	mov	r3,r4
    58f0:	3980032e 	bgeu	r7,r6,5900 <memcpy+0x18>
    58f4:	2904b03a 	or	r2,r5,r4
    58f8:	108000cc 	andi	r2,r2,3
    58fc:	10000926 	beq	r2,zero,5924 <memcpy+0x3c>
    5900:	30000626 	beq	r6,zero,591c <memcpy+0x34>
    5904:	30cd883a 	add	r6,r6,r3
    5908:	28800003 	ldbu	r2,0(r5)
    590c:	29400044 	addi	r5,r5,1
    5910:	18800005 	stb	r2,0(r3)
    5914:	18c00044 	addi	r3,r3,1
    5918:	30fffb1e 	bne	r6,r3,5908 <memcpy+0x20>
    591c:	2005883a 	mov	r2,r4
    5920:	f800283a 	ret
    5924:	3811883a 	mov	r8,r7
    5928:	200f883a 	mov	r7,r4
    592c:	28c00017 	ldw	r3,0(r5)
    5930:	31bffc04 	addi	r6,r6,-16
    5934:	38c00015 	stw	r3,0(r7)
    5938:	28800117 	ldw	r2,4(r5)
    593c:	38800115 	stw	r2,4(r7)
    5940:	28c00217 	ldw	r3,8(r5)
    5944:	38c00215 	stw	r3,8(r7)
    5948:	28800317 	ldw	r2,12(r5)
    594c:	29400404 	addi	r5,r5,16
    5950:	38800315 	stw	r2,12(r7)
    5954:	39c00404 	addi	r7,r7,16
    5958:	41bff436 	bltu	r8,r6,592c <memcpy+0x44>
    595c:	008000c4 	movi	r2,3
    5960:	1180072e 	bgeu	r2,r6,5980 <memcpy+0x98>
    5964:	1007883a 	mov	r3,r2
    5968:	28800017 	ldw	r2,0(r5)
    596c:	31bfff04 	addi	r6,r6,-4
    5970:	29400104 	addi	r5,r5,4
    5974:	38800015 	stw	r2,0(r7)
    5978:	39c00104 	addi	r7,r7,4
    597c:	19bffa36 	bltu	r3,r6,5968 <memcpy+0x80>
    5980:	3807883a 	mov	r3,r7
    5984:	003fde06 	br	5900 <memcpy+0x18>

00005988 <memmove>:
    5988:	2807883a 	mov	r3,r5
    598c:	2011883a 	mov	r8,r4
    5990:	29000c2e 	bgeu	r5,r4,59c4 <memmove+0x3c>
    5994:	298f883a 	add	r7,r5,r6
    5998:	21c00a2e 	bgeu	r4,r7,59c4 <memmove+0x3c>
    599c:	30000726 	beq	r6,zero,59bc <memmove+0x34>
    59a0:	2187883a 	add	r3,r4,r6
    59a4:	198dc83a 	sub	r6,r3,r6
    59a8:	39ffffc4 	addi	r7,r7,-1
    59ac:	38800003 	ldbu	r2,0(r7)
    59b0:	18ffffc4 	addi	r3,r3,-1
    59b4:	18800005 	stb	r2,0(r3)
    59b8:	19bffb1e 	bne	r3,r6,59a8 <memmove+0x20>
    59bc:	2005883a 	mov	r2,r4
    59c0:	f800283a 	ret
    59c4:	01c003c4 	movi	r7,15
    59c8:	39800a36 	bltu	r7,r6,59f4 <memmove+0x6c>
    59cc:	303ffb26 	beq	r6,zero,59bc <memmove+0x34>
    59d0:	400f883a 	mov	r7,r8
    59d4:	320d883a 	add	r6,r6,r8
    59d8:	28800003 	ldbu	r2,0(r5)
    59dc:	29400044 	addi	r5,r5,1
    59e0:	38800005 	stb	r2,0(r7)
    59e4:	39c00044 	addi	r7,r7,1
    59e8:	39bffb1e 	bne	r7,r6,59d8 <memmove+0x50>
    59ec:	2005883a 	mov	r2,r4
    59f0:	f800283a 	ret
    59f4:	1904b03a 	or	r2,r3,r4
    59f8:	108000cc 	andi	r2,r2,3
    59fc:	103ff31e 	bne	r2,zero,59cc <memmove+0x44>
    5a00:	3811883a 	mov	r8,r7
    5a04:	180b883a 	mov	r5,r3
    5a08:	200f883a 	mov	r7,r4
    5a0c:	28c00017 	ldw	r3,0(r5)
    5a10:	31bffc04 	addi	r6,r6,-16
    5a14:	38c00015 	stw	r3,0(r7)
    5a18:	28800117 	ldw	r2,4(r5)
    5a1c:	38800115 	stw	r2,4(r7)
    5a20:	28c00217 	ldw	r3,8(r5)
    5a24:	38c00215 	stw	r3,8(r7)
    5a28:	28800317 	ldw	r2,12(r5)
    5a2c:	29400404 	addi	r5,r5,16
    5a30:	38800315 	stw	r2,12(r7)
    5a34:	39c00404 	addi	r7,r7,16
    5a38:	41bff436 	bltu	r8,r6,5a0c <memmove+0x84>
    5a3c:	008000c4 	movi	r2,3
    5a40:	1180072e 	bgeu	r2,r6,5a60 <memmove+0xd8>
    5a44:	1007883a 	mov	r3,r2
    5a48:	28800017 	ldw	r2,0(r5)
    5a4c:	31bfff04 	addi	r6,r6,-4
    5a50:	29400104 	addi	r5,r5,4
    5a54:	38800015 	stw	r2,0(r7)
    5a58:	39c00104 	addi	r7,r7,4
    5a5c:	19bffa36 	bltu	r3,r6,5a48 <memmove+0xc0>
    5a60:	3811883a 	mov	r8,r7
    5a64:	003fd906 	br	59cc <memmove+0x44>

00005a68 <memset>:
    5a68:	008000c4 	movi	r2,3
    5a6c:	29403fcc 	andi	r5,r5,255
    5a70:	2007883a 	mov	r3,r4
    5a74:	1180022e 	bgeu	r2,r6,5a80 <memset+0x18>
    5a78:	2084703a 	and	r2,r4,r2
    5a7c:	10000826 	beq	r2,zero,5aa0 <memset+0x38>
    5a80:	30000526 	beq	r6,zero,5a98 <memset+0x30>
    5a84:	2805883a 	mov	r2,r5
    5a88:	30cd883a 	add	r6,r6,r3
    5a8c:	18800005 	stb	r2,0(r3)
    5a90:	18c00044 	addi	r3,r3,1
    5a94:	19bffd1e 	bne	r3,r6,5a8c <memset+0x24>
    5a98:	2005883a 	mov	r2,r4
    5a9c:	f800283a 	ret
    5aa0:	2804923a 	slli	r2,r5,8
    5aa4:	020003c4 	movi	r8,15
    5aa8:	200f883a 	mov	r7,r4
    5aac:	2884b03a 	or	r2,r5,r2
    5ab0:	1006943a 	slli	r3,r2,16
    5ab4:	10c6b03a 	or	r3,r2,r3
    5ab8:	41800a2e 	bgeu	r8,r6,5ae4 <memset+0x7c>
    5abc:	4005883a 	mov	r2,r8
    5ac0:	31bffc04 	addi	r6,r6,-16
    5ac4:	38c00015 	stw	r3,0(r7)
    5ac8:	38c00115 	stw	r3,4(r7)
    5acc:	38c00215 	stw	r3,8(r7)
    5ad0:	38c00315 	stw	r3,12(r7)
    5ad4:	39c00404 	addi	r7,r7,16
    5ad8:	11bff936 	bltu	r2,r6,5ac0 <memset+0x58>
    5adc:	008000c4 	movi	r2,3
    5ae0:	1180052e 	bgeu	r2,r6,5af8 <memset+0x90>
    5ae4:	31bfff04 	addi	r6,r6,-4
    5ae8:	008000c4 	movi	r2,3
    5aec:	38c00015 	stw	r3,0(r7)
    5af0:	39c00104 	addi	r7,r7,4
    5af4:	11bffb36 	bltu	r2,r6,5ae4 <memset+0x7c>
    5af8:	3807883a 	mov	r3,r7
    5afc:	003fe006 	br	5a80 <memset+0x18>

00005b00 <_Bfree>:
    5b00:	28000826 	beq	r5,zero,5b24 <_Bfree+0x24>
    5b04:	28800117 	ldw	r2,4(r5)
    5b08:	21001317 	ldw	r4,76(r4)
    5b0c:	1085883a 	add	r2,r2,r2
    5b10:	1085883a 	add	r2,r2,r2
    5b14:	1105883a 	add	r2,r2,r4
    5b18:	10c00017 	ldw	r3,0(r2)
    5b1c:	28c00015 	stw	r3,0(r5)
    5b20:	11400015 	stw	r5,0(r2)
    5b24:	f800283a 	ret

00005b28 <__hi0bits>:
    5b28:	20bfffec 	andhi	r2,r4,65535
    5b2c:	10001426 	beq	r2,zero,5b80 <__hi0bits+0x58>
    5b30:	0007883a 	mov	r3,zero
    5b34:	20bfc02c 	andhi	r2,r4,65280
    5b38:	1000021e 	bne	r2,zero,5b44 <__hi0bits+0x1c>
    5b3c:	2008923a 	slli	r4,r4,8
    5b40:	18c00204 	addi	r3,r3,8
    5b44:	20bc002c 	andhi	r2,r4,61440
    5b48:	1000021e 	bne	r2,zero,5b54 <__hi0bits+0x2c>
    5b4c:	2008913a 	slli	r4,r4,4
    5b50:	18c00104 	addi	r3,r3,4
    5b54:	20b0002c 	andhi	r2,r4,49152
    5b58:	1000031e 	bne	r2,zero,5b68 <__hi0bits+0x40>
    5b5c:	2105883a 	add	r2,r4,r4
    5b60:	18c00084 	addi	r3,r3,2
    5b64:	1089883a 	add	r4,r2,r2
    5b68:	20000316 	blt	r4,zero,5b78 <__hi0bits+0x50>
    5b6c:	2090002c 	andhi	r2,r4,16384
    5b70:	10000626 	beq	r2,zero,5b8c <__hi0bits+0x64>
    5b74:	18c00044 	addi	r3,r3,1
    5b78:	1805883a 	mov	r2,r3
    5b7c:	f800283a 	ret
    5b80:	2008943a 	slli	r4,r4,16
    5b84:	00c00404 	movi	r3,16
    5b88:	003fea06 	br	5b34 <__hi0bits+0xc>
    5b8c:	00c00804 	movi	r3,32
    5b90:	1805883a 	mov	r2,r3
    5b94:	f800283a 	ret

00005b98 <__lo0bits>:
    5b98:	20c00017 	ldw	r3,0(r4)
    5b9c:	188001cc 	andi	r2,r3,7
    5ba0:	10000a26 	beq	r2,zero,5bcc <__lo0bits+0x34>
    5ba4:	1880004c 	andi	r2,r3,1
    5ba8:	1005003a 	cmpeq	r2,r2,zero
    5bac:	10002126 	beq	r2,zero,5c34 <__lo0bits+0x9c>
    5bb0:	1880008c 	andi	r2,r3,2
    5bb4:	1000251e 	bne	r2,zero,5c4c <__lo0bits+0xb4>
    5bb8:	1804d0ba 	srli	r2,r3,2
    5bbc:	01400084 	movi	r5,2
    5bc0:	20800015 	stw	r2,0(r4)
    5bc4:	2805883a 	mov	r2,r5
    5bc8:	f800283a 	ret
    5bcc:	18bfffcc 	andi	r2,r3,65535
    5bd0:	10001526 	beq	r2,zero,5c28 <__lo0bits+0x90>
    5bd4:	000b883a 	mov	r5,zero
    5bd8:	18803fcc 	andi	r2,r3,255
    5bdc:	1000021e 	bne	r2,zero,5be8 <__lo0bits+0x50>
    5be0:	1806d23a 	srli	r3,r3,8
    5be4:	29400204 	addi	r5,r5,8
    5be8:	188003cc 	andi	r2,r3,15
    5bec:	1000021e 	bne	r2,zero,5bf8 <__lo0bits+0x60>
    5bf0:	1806d13a 	srli	r3,r3,4
    5bf4:	29400104 	addi	r5,r5,4
    5bf8:	188000cc 	andi	r2,r3,3
    5bfc:	1000021e 	bne	r2,zero,5c08 <__lo0bits+0x70>
    5c00:	1806d0ba 	srli	r3,r3,2
    5c04:	29400084 	addi	r5,r5,2
    5c08:	1880004c 	andi	r2,r3,1
    5c0c:	1000031e 	bne	r2,zero,5c1c <__lo0bits+0x84>
    5c10:	1806d07a 	srli	r3,r3,1
    5c14:	18000a26 	beq	r3,zero,5c40 <__lo0bits+0xa8>
    5c18:	29400044 	addi	r5,r5,1
    5c1c:	2805883a 	mov	r2,r5
    5c20:	20c00015 	stw	r3,0(r4)
    5c24:	f800283a 	ret
    5c28:	1806d43a 	srli	r3,r3,16
    5c2c:	01400404 	movi	r5,16
    5c30:	003fe906 	br	5bd8 <__lo0bits+0x40>
    5c34:	000b883a 	mov	r5,zero
    5c38:	2805883a 	mov	r2,r5
    5c3c:	f800283a 	ret
    5c40:	01400804 	movi	r5,32
    5c44:	2805883a 	mov	r2,r5
    5c48:	f800283a 	ret
    5c4c:	1804d07a 	srli	r2,r3,1
    5c50:	01400044 	movi	r5,1
    5c54:	20800015 	stw	r2,0(r4)
    5c58:	003fda06 	br	5bc4 <__lo0bits+0x2c>

00005c5c <__mcmp>:
    5c5c:	20800417 	ldw	r2,16(r4)
    5c60:	28c00417 	ldw	r3,16(r5)
    5c64:	10cfc83a 	sub	r7,r2,r3
    5c68:	38000c1e 	bne	r7,zero,5c9c <__mcmp+0x40>
    5c6c:	18c5883a 	add	r2,r3,r3
    5c70:	1085883a 	add	r2,r2,r2
    5c74:	10c00504 	addi	r3,r2,20
    5c78:	21000504 	addi	r4,r4,20
    5c7c:	28cb883a 	add	r5,r5,r3
    5c80:	2085883a 	add	r2,r4,r2
    5c84:	10bfff04 	addi	r2,r2,-4
    5c88:	297fff04 	addi	r5,r5,-4
    5c8c:	11800017 	ldw	r6,0(r2)
    5c90:	28c00017 	ldw	r3,0(r5)
    5c94:	30c0031e 	bne	r6,r3,5ca4 <__mcmp+0x48>
    5c98:	20bffa36 	bltu	r4,r2,5c84 <__mcmp+0x28>
    5c9c:	3805883a 	mov	r2,r7
    5ca0:	f800283a 	ret
    5ca4:	30c00336 	bltu	r6,r3,5cb4 <__mcmp+0x58>
    5ca8:	01c00044 	movi	r7,1
    5cac:	3805883a 	mov	r2,r7
    5cb0:	f800283a 	ret
    5cb4:	01ffffc4 	movi	r7,-1
    5cb8:	003ff806 	br	5c9c <__mcmp+0x40>

00005cbc <__ulp>:
    5cbc:	295ffc2c 	andhi	r5,r5,32752
    5cc0:	013f3034 	movhi	r4,64704
    5cc4:	290b883a 	add	r5,r5,r4
    5cc8:	0145c83a 	sub	r2,zero,r5
    5ccc:	1007d53a 	srai	r3,r2,20
    5cd0:	000d883a 	mov	r6,zero
    5cd4:	0140040e 	bge	zero,r5,5ce8 <__ulp+0x2c>
    5cd8:	280f883a 	mov	r7,r5
    5cdc:	3807883a 	mov	r3,r7
    5ce0:	3005883a 	mov	r2,r6
    5ce4:	f800283a 	ret
    5ce8:	008004c4 	movi	r2,19
    5cec:	193ffb04 	addi	r4,r3,-20
    5cf0:	10c00c0e 	bge	r2,r3,5d24 <__ulp+0x68>
    5cf4:	008007c4 	movi	r2,31
    5cf8:	1107c83a 	sub	r3,r2,r4
    5cfc:	00800784 	movi	r2,30
    5d00:	01400044 	movi	r5,1
    5d04:	11000216 	blt	r2,r4,5d10 <__ulp+0x54>
    5d08:	00800044 	movi	r2,1
    5d0c:	10ca983a 	sll	r5,r2,r3
    5d10:	000f883a 	mov	r7,zero
    5d14:	280d883a 	mov	r6,r5
    5d18:	3807883a 	mov	r3,r7
    5d1c:	3005883a 	mov	r2,r6
    5d20:	f800283a 	ret
    5d24:	00800234 	movhi	r2,8
    5d28:	10cfd83a 	sra	r7,r2,r3
    5d2c:	000d883a 	mov	r6,zero
    5d30:	3005883a 	mov	r2,r6
    5d34:	3807883a 	mov	r3,r7
    5d38:	f800283a 	ret

00005d3c <__b2d>:
    5d3c:	20800417 	ldw	r2,16(r4)
    5d40:	defff904 	addi	sp,sp,-28
    5d44:	dd000415 	stw	r20,16(sp)
    5d48:	1085883a 	add	r2,r2,r2
    5d4c:	25000504 	addi	r20,r4,20
    5d50:	1085883a 	add	r2,r2,r2
    5d54:	dc000015 	stw	r16,0(sp)
    5d58:	a0a1883a 	add	r16,r20,r2
    5d5c:	dd400515 	stw	r21,20(sp)
    5d60:	857fff17 	ldw	r21,-4(r16)
    5d64:	dc400115 	stw	r17,4(sp)
    5d68:	dfc00615 	stw	ra,24(sp)
    5d6c:	a809883a 	mov	r4,r21
    5d70:	2823883a 	mov	r17,r5
    5d74:	dcc00315 	stw	r19,12(sp)
    5d78:	dc800215 	stw	r18,8(sp)
    5d7c:	0005b280 	call	5b28 <__hi0bits>
    5d80:	100b883a 	mov	r5,r2
    5d84:	00800804 	movi	r2,32
    5d88:	1145c83a 	sub	r2,r2,r5
    5d8c:	88800015 	stw	r2,0(r17)
    5d90:	00800284 	movi	r2,10
    5d94:	80ffff04 	addi	r3,r16,-4
    5d98:	11401416 	blt	r2,r5,5dec <__b2d+0xb0>
    5d9c:	008002c4 	movi	r2,11
    5da0:	1149c83a 	sub	r4,r2,r5
    5da4:	a0c02736 	bltu	r20,r3,5e44 <__b2d+0x108>
    5da8:	000d883a 	mov	r6,zero
    5dac:	28800544 	addi	r2,r5,21
    5db0:	a906d83a 	srl	r3,r21,r4
    5db4:	a884983a 	sll	r2,r21,r2
    5db8:	1ccffc34 	orhi	r19,r3,16368
    5dbc:	11a4b03a 	or	r18,r2,r6
    5dc0:	9005883a 	mov	r2,r18
    5dc4:	9807883a 	mov	r3,r19
    5dc8:	dfc00617 	ldw	ra,24(sp)
    5dcc:	dd400517 	ldw	r21,20(sp)
    5dd0:	dd000417 	ldw	r20,16(sp)
    5dd4:	dcc00317 	ldw	r19,12(sp)
    5dd8:	dc800217 	ldw	r18,8(sp)
    5ddc:	dc400117 	ldw	r17,4(sp)
    5de0:	dc000017 	ldw	r16,0(sp)
    5de4:	dec00704 	addi	sp,sp,28
    5de8:	f800283a 	ret
    5dec:	a0c00e36 	bltu	r20,r3,5e28 <__b2d+0xec>
    5df0:	293ffd44 	addi	r4,r5,-11
    5df4:	000d883a 	mov	r6,zero
    5df8:	20000f26 	beq	r4,zero,5e38 <__b2d+0xfc>
    5dfc:	00800804 	movi	r2,32
    5e00:	110bc83a 	sub	r5,r2,r4
    5e04:	a0c01236 	bltu	r20,r3,5e50 <__b2d+0x114>
    5e08:	000f883a 	mov	r7,zero
    5e0c:	a904983a 	sll	r2,r21,r4
    5e10:	3146d83a 	srl	r3,r6,r5
    5e14:	3108983a 	sll	r4,r6,r4
    5e18:	108ffc34 	orhi	r2,r2,16368
    5e1c:	18a6b03a 	or	r19,r3,r2
    5e20:	3924b03a 	or	r18,r7,r4
    5e24:	003fe606 	br	5dc0 <__b2d+0x84>
    5e28:	293ffd44 	addi	r4,r5,-11
    5e2c:	81bffe17 	ldw	r6,-8(r16)
    5e30:	80fffe04 	addi	r3,r16,-8
    5e34:	203ff11e 	bne	r4,zero,5dfc <__b2d+0xc0>
    5e38:	accffc34 	orhi	r19,r21,16368
    5e3c:	3025883a 	mov	r18,r6
    5e40:	003fdf06 	br	5dc0 <__b2d+0x84>
    5e44:	18bfff17 	ldw	r2,-4(r3)
    5e48:	110cd83a 	srl	r6,r2,r4
    5e4c:	003fd706 	br	5dac <__b2d+0x70>
    5e50:	18bfff17 	ldw	r2,-4(r3)
    5e54:	114ed83a 	srl	r7,r2,r5
    5e58:	003fec06 	br	5e0c <__b2d+0xd0>

00005e5c <__ratio>:
    5e5c:	defff904 	addi	sp,sp,-28
    5e60:	dc400215 	stw	r17,8(sp)
    5e64:	2823883a 	mov	r17,r5
    5e68:	d80b883a 	mov	r5,sp
    5e6c:	dfc00615 	stw	ra,24(sp)
    5e70:	dd000515 	stw	r20,20(sp)
    5e74:	dcc00415 	stw	r19,16(sp)
    5e78:	dc800315 	stw	r18,12(sp)
    5e7c:	2025883a 	mov	r18,r4
    5e80:	0005d3c0 	call	5d3c <__b2d>
    5e84:	8809883a 	mov	r4,r17
    5e88:	d9400104 	addi	r5,sp,4
    5e8c:	1027883a 	mov	r19,r2
    5e90:	1829883a 	mov	r20,r3
    5e94:	0005d3c0 	call	5d3c <__b2d>
    5e98:	89000417 	ldw	r4,16(r17)
    5e9c:	91c00417 	ldw	r7,16(r18)
    5ea0:	d9800117 	ldw	r6,4(sp)
    5ea4:	180b883a 	mov	r5,r3
    5ea8:	390fc83a 	sub	r7,r7,r4
    5eac:	1009883a 	mov	r4,r2
    5eb0:	d8800017 	ldw	r2,0(sp)
    5eb4:	380e917a 	slli	r7,r7,5
    5eb8:	2011883a 	mov	r8,r4
    5ebc:	1185c83a 	sub	r2,r2,r6
    5ec0:	11c5883a 	add	r2,r2,r7
    5ec4:	1006953a 	slli	r3,r2,20
    5ec8:	2813883a 	mov	r9,r5
    5ecc:	00800d0e 	bge	zero,r2,5f04 <__ratio+0xa8>
    5ed0:	1d29883a 	add	r20,r3,r20
    5ed4:	a00b883a 	mov	r5,r20
    5ed8:	480f883a 	mov	r7,r9
    5edc:	9809883a 	mov	r4,r19
    5ee0:	400d883a 	mov	r6,r8
    5ee4:	0008cb80 	call	8cb8 <__divdf3>
    5ee8:	dfc00617 	ldw	ra,24(sp)
    5eec:	dd000517 	ldw	r20,20(sp)
    5ef0:	dcc00417 	ldw	r19,16(sp)
    5ef4:	dc800317 	ldw	r18,12(sp)
    5ef8:	dc400217 	ldw	r17,8(sp)
    5efc:	dec00704 	addi	sp,sp,28
    5f00:	f800283a 	ret
    5f04:	28d3c83a 	sub	r9,r5,r3
    5f08:	003ff206 	br	5ed4 <__ratio+0x78>

00005f0c <_mprec_log10>:
    5f0c:	defffe04 	addi	sp,sp,-8
    5f10:	008005c4 	movi	r2,23
    5f14:	dc000015 	stw	r16,0(sp)
    5f18:	dfc00115 	stw	ra,4(sp)
    5f1c:	2021883a 	mov	r16,r4
    5f20:	11000c16 	blt	r2,r4,5f54 <_mprec_log10+0x48>
    5f24:	200490fa 	slli	r2,r4,3
    5f28:	00c00074 	movhi	r3,1
    5f2c:	18f45804 	addi	r3,r3,-11936
    5f30:	10c5883a 	add	r2,r2,r3
    5f34:	12400117 	ldw	r9,4(r2)
    5f38:	12000017 	ldw	r8,0(r2)
    5f3c:	4807883a 	mov	r3,r9
    5f40:	4005883a 	mov	r2,r8
    5f44:	dfc00117 	ldw	ra,4(sp)
    5f48:	dc000017 	ldw	r16,0(sp)
    5f4c:	dec00204 	addi	sp,sp,8
    5f50:	f800283a 	ret
    5f54:	0011883a 	mov	r8,zero
    5f58:	024ffc34 	movhi	r9,16368
    5f5c:	0005883a 	mov	r2,zero
    5f60:	00d00934 	movhi	r3,16420
    5f64:	480b883a 	mov	r5,r9
    5f68:	4009883a 	mov	r4,r8
    5f6c:	180f883a 	mov	r7,r3
    5f70:	100d883a 	mov	r6,r2
    5f74:	00088f40 	call	88f4 <__muldf3>
    5f78:	843fffc4 	addi	r16,r16,-1
    5f7c:	1011883a 	mov	r8,r2
    5f80:	1813883a 	mov	r9,r3
    5f84:	803ff51e 	bne	r16,zero,5f5c <_mprec_log10+0x50>
    5f88:	4005883a 	mov	r2,r8
    5f8c:	4807883a 	mov	r3,r9
    5f90:	dfc00117 	ldw	ra,4(sp)
    5f94:	dc000017 	ldw	r16,0(sp)
    5f98:	dec00204 	addi	sp,sp,8
    5f9c:	f800283a 	ret

00005fa0 <__copybits>:
    5fa0:	297fffc4 	addi	r5,r5,-1
    5fa4:	30800417 	ldw	r2,16(r6)
    5fa8:	280bd17a 	srai	r5,r5,5
    5fac:	31800504 	addi	r6,r6,20
    5fb0:	1085883a 	add	r2,r2,r2
    5fb4:	294b883a 	add	r5,r5,r5
    5fb8:	294b883a 	add	r5,r5,r5
    5fbc:	1085883a 	add	r2,r2,r2
    5fc0:	290b883a 	add	r5,r5,r4
    5fc4:	3087883a 	add	r3,r6,r2
    5fc8:	29400104 	addi	r5,r5,4
    5fcc:	30c0052e 	bgeu	r6,r3,5fe4 <__copybits+0x44>
    5fd0:	30800017 	ldw	r2,0(r6)
    5fd4:	31800104 	addi	r6,r6,4
    5fd8:	20800015 	stw	r2,0(r4)
    5fdc:	21000104 	addi	r4,r4,4
    5fe0:	30fffb36 	bltu	r6,r3,5fd0 <__copybits+0x30>
    5fe4:	2140032e 	bgeu	r4,r5,5ff4 <__copybits+0x54>
    5fe8:	20000015 	stw	zero,0(r4)
    5fec:	21000104 	addi	r4,r4,4
    5ff0:	217ffd36 	bltu	r4,r5,5fe8 <__copybits+0x48>
    5ff4:	f800283a 	ret

00005ff8 <__any_on>:
    5ff8:	20800417 	ldw	r2,16(r4)
    5ffc:	2807d17a 	srai	r3,r5,5
    6000:	21000504 	addi	r4,r4,20
    6004:	10c00d0e 	bge	r2,r3,603c <__any_on+0x44>
    6008:	1085883a 	add	r2,r2,r2
    600c:	1085883a 	add	r2,r2,r2
    6010:	208d883a 	add	r6,r4,r2
    6014:	2180182e 	bgeu	r4,r6,6078 <__any_on+0x80>
    6018:	30bfff17 	ldw	r2,-4(r6)
    601c:	30ffff04 	addi	r3,r6,-4
    6020:	1000041e 	bne	r2,zero,6034 <__any_on+0x3c>
    6024:	20c0142e 	bgeu	r4,r3,6078 <__any_on+0x80>
    6028:	18ffff04 	addi	r3,r3,-4
    602c:	18800017 	ldw	r2,0(r3)
    6030:	103ffc26 	beq	r2,zero,6024 <__any_on+0x2c>
    6034:	00800044 	movi	r2,1
    6038:	f800283a 	ret
    603c:	18800a0e 	bge	r3,r2,6068 <__any_on+0x70>
    6040:	294007cc 	andi	r5,r5,31
    6044:	28000826 	beq	r5,zero,6068 <__any_on+0x70>
    6048:	18c5883a 	add	r2,r3,r3
    604c:	1085883a 	add	r2,r2,r2
    6050:	208d883a 	add	r6,r4,r2
    6054:	30c00017 	ldw	r3,0(r6)
    6058:	1944d83a 	srl	r2,r3,r5
    605c:	1144983a 	sll	r2,r2,r5
    6060:	18bff41e 	bne	r3,r2,6034 <__any_on+0x3c>
    6064:	003feb06 	br	6014 <__any_on+0x1c>
    6068:	18c5883a 	add	r2,r3,r3
    606c:	1085883a 	add	r2,r2,r2
    6070:	208d883a 	add	r6,r4,r2
    6074:	003fe706 	br	6014 <__any_on+0x1c>
    6078:	0005883a 	mov	r2,zero
    607c:	f800283a 	ret

00006080 <_Balloc>:
    6080:	20c01317 	ldw	r3,76(r4)
    6084:	defffb04 	addi	sp,sp,-20
    6088:	dcc00315 	stw	r19,12(sp)
    608c:	dc800215 	stw	r18,8(sp)
    6090:	dfc00415 	stw	ra,16(sp)
    6094:	2825883a 	mov	r18,r5
    6098:	dc400115 	stw	r17,4(sp)
    609c:	dc000015 	stw	r16,0(sp)
    60a0:	2027883a 	mov	r19,r4
    60a4:	01800404 	movi	r6,16
    60a8:	01400104 	movi	r5,4
    60ac:	18001726 	beq	r3,zero,610c <_Balloc+0x8c>
    60b0:	01400044 	movi	r5,1
    60b4:	9485883a 	add	r2,r18,r18
    60b8:	2ca2983a 	sll	r17,r5,r18
    60bc:	1085883a 	add	r2,r2,r2
    60c0:	10c7883a 	add	r3,r2,r3
    60c4:	1c000017 	ldw	r16,0(r3)
    60c8:	8c4d883a 	add	r6,r17,r17
    60cc:	318d883a 	add	r6,r6,r6
    60d0:	9809883a 	mov	r4,r19
    60d4:	31800504 	addi	r6,r6,20
    60d8:	80001226 	beq	r16,zero,6124 <_Balloc+0xa4>
    60dc:	80800017 	ldw	r2,0(r16)
    60e0:	18800015 	stw	r2,0(r3)
    60e4:	80000415 	stw	zero,16(r16)
    60e8:	80000315 	stw	zero,12(r16)
    60ec:	8005883a 	mov	r2,r16
    60f0:	dfc00417 	ldw	ra,16(sp)
    60f4:	dcc00317 	ldw	r19,12(sp)
    60f8:	dc800217 	ldw	r18,8(sp)
    60fc:	dc400117 	ldw	r17,4(sp)
    6100:	dc000017 	ldw	r16,0(sp)
    6104:	dec00504 	addi	sp,sp,20
    6108:	f800283a 	ret
    610c:	00074480 	call	7448 <_calloc_r>
    6110:	1007883a 	mov	r3,r2
    6114:	0021883a 	mov	r16,zero
    6118:	98801315 	stw	r2,76(r19)
    611c:	103fe41e 	bne	r2,zero,60b0 <_Balloc+0x30>
    6120:	003ff206 	br	60ec <_Balloc+0x6c>
    6124:	00074480 	call	7448 <_calloc_r>
    6128:	103ff026 	beq	r2,zero,60ec <_Balloc+0x6c>
    612c:	1021883a 	mov	r16,r2
    6130:	14800115 	stw	r18,4(r2)
    6134:	14400215 	stw	r17,8(r2)
    6138:	003fea06 	br	60e4 <_Balloc+0x64>

0000613c <__d2b>:
    613c:	defff504 	addi	sp,sp,-44
    6140:	dcc00515 	stw	r19,20(sp)
    6144:	04c00044 	movi	r19,1
    6148:	dc000215 	stw	r16,8(sp)
    614c:	2821883a 	mov	r16,r5
    6150:	980b883a 	mov	r5,r19
    6154:	ddc00915 	stw	r23,36(sp)
    6158:	dd800815 	stw	r22,32(sp)
    615c:	dd400715 	stw	r21,28(sp)
    6160:	dd000615 	stw	r20,24(sp)
    6164:	dc800415 	stw	r18,16(sp)
    6168:	dc400315 	stw	r17,12(sp)
    616c:	dfc00a15 	stw	ra,40(sp)
    6170:	3023883a 	mov	r17,r6
    6174:	382d883a 	mov	r22,r7
    6178:	ddc00b17 	ldw	r23,44(sp)
    617c:	00060800 	call	6080 <_Balloc>
    6180:	1025883a 	mov	r18,r2
    6184:	00a00034 	movhi	r2,32768
    6188:	10bfffc4 	addi	r2,r2,-1
    618c:	8888703a 	and	r4,r17,r2
    6190:	202ad53a 	srli	r21,r4,20
    6194:	00800434 	movhi	r2,16
    6198:	10bfffc4 	addi	r2,r2,-1
    619c:	8886703a 	and	r3,r17,r2
    61a0:	a829003a 	cmpeq	r20,r21,zero
    61a4:	800b883a 	mov	r5,r16
    61a8:	d8c00115 	stw	r3,4(sp)
    61ac:	94000504 	addi	r16,r18,20
    61b0:	a000021e 	bne	r20,zero,61bc <__d2b+0x80>
    61b4:	18c00434 	orhi	r3,r3,16
    61b8:	d8c00115 	stw	r3,4(sp)
    61bc:	28002726 	beq	r5,zero,625c <__d2b+0x120>
    61c0:	d809883a 	mov	r4,sp
    61c4:	d9400015 	stw	r5,0(sp)
    61c8:	0005b980 	call	5b98 <__lo0bits>
    61cc:	100d883a 	mov	r6,r2
    61d0:	10003526 	beq	r2,zero,62a8 <__d2b+0x16c>
    61d4:	d8c00117 	ldw	r3,4(sp)
    61d8:	00800804 	movi	r2,32
    61dc:	1185c83a 	sub	r2,r2,r6
    61e0:	d9000017 	ldw	r4,0(sp)
    61e4:	1886983a 	sll	r3,r3,r2
    61e8:	1906b03a 	or	r3,r3,r4
    61ec:	90c00515 	stw	r3,20(r18)
    61f0:	d8c00117 	ldw	r3,4(sp)
    61f4:	1986d83a 	srl	r3,r3,r6
    61f8:	d8c00115 	stw	r3,4(sp)
    61fc:	180b003a 	cmpeq	r5,r3,zero
    6200:	00800084 	movi	r2,2
    6204:	114bc83a 	sub	r5,r2,r5
    6208:	80c00115 	stw	r3,4(r16)
    620c:	91400415 	stw	r5,16(r18)
    6210:	a0001a1e 	bne	r20,zero,627c <__d2b+0x140>
    6214:	3545883a 	add	r2,r6,r21
    6218:	10bef344 	addi	r2,r2,-1075
    621c:	00c00d44 	movi	r3,53
    6220:	b0800015 	stw	r2,0(r22)
    6224:	1987c83a 	sub	r3,r3,r6
    6228:	b8c00015 	stw	r3,0(r23)
    622c:	9005883a 	mov	r2,r18
    6230:	dfc00a17 	ldw	ra,40(sp)
    6234:	ddc00917 	ldw	r23,36(sp)
    6238:	dd800817 	ldw	r22,32(sp)
    623c:	dd400717 	ldw	r21,28(sp)
    6240:	dd000617 	ldw	r20,24(sp)
    6244:	dcc00517 	ldw	r19,20(sp)
    6248:	dc800417 	ldw	r18,16(sp)
    624c:	dc400317 	ldw	r17,12(sp)
    6250:	dc000217 	ldw	r16,8(sp)
    6254:	dec00b04 	addi	sp,sp,44
    6258:	f800283a 	ret
    625c:	d9000104 	addi	r4,sp,4
    6260:	0005b980 	call	5b98 <__lo0bits>
    6264:	11800804 	addi	r6,r2,32
    6268:	d8800117 	ldw	r2,4(sp)
    626c:	94c00415 	stw	r19,16(r18)
    6270:	980b883a 	mov	r5,r19
    6274:	90800515 	stw	r2,20(r18)
    6278:	a03fe626 	beq	r20,zero,6214 <__d2b+0xd8>
    627c:	2945883a 	add	r2,r5,r5
    6280:	1085883a 	add	r2,r2,r2
    6284:	1405883a 	add	r2,r2,r16
    6288:	113fff17 	ldw	r4,-4(r2)
    628c:	30fef384 	addi	r3,r6,-1074
    6290:	2820917a 	slli	r16,r5,5
    6294:	b0c00015 	stw	r3,0(r22)
    6298:	0005b280 	call	5b28 <__hi0bits>
    629c:	80a1c83a 	sub	r16,r16,r2
    62a0:	bc000015 	stw	r16,0(r23)
    62a4:	003fe106 	br	622c <__d2b+0xf0>
    62a8:	d8800017 	ldw	r2,0(sp)
    62ac:	90800515 	stw	r2,20(r18)
    62b0:	d8c00117 	ldw	r3,4(sp)
    62b4:	003fd106 	br	61fc <__d2b+0xc0>

000062b8 <__mdiff>:
    62b8:	defffb04 	addi	sp,sp,-20
    62bc:	dc000015 	stw	r16,0(sp)
    62c0:	2821883a 	mov	r16,r5
    62c4:	dc800215 	stw	r18,8(sp)
    62c8:	300b883a 	mov	r5,r6
    62cc:	2025883a 	mov	r18,r4
    62d0:	8009883a 	mov	r4,r16
    62d4:	dc400115 	stw	r17,4(sp)
    62d8:	dfc00415 	stw	ra,16(sp)
    62dc:	dcc00315 	stw	r19,12(sp)
    62e0:	3023883a 	mov	r17,r6
    62e4:	0005c5c0 	call	5c5c <__mcmp>
    62e8:	10004226 	beq	r2,zero,63f4 <__mdiff+0x13c>
    62ec:	10005016 	blt	r2,zero,6430 <__mdiff+0x178>
    62f0:	0027883a 	mov	r19,zero
    62f4:	81400117 	ldw	r5,4(r16)
    62f8:	9009883a 	mov	r4,r18
    62fc:	00060800 	call	6080 <_Balloc>
    6300:	1019883a 	mov	r12,r2
    6304:	82800417 	ldw	r10,16(r16)
    6308:	88800417 	ldw	r2,16(r17)
    630c:	81800504 	addi	r6,r16,20
    6310:	5287883a 	add	r3,r10,r10
    6314:	1085883a 	add	r2,r2,r2
    6318:	18c7883a 	add	r3,r3,r3
    631c:	1085883a 	add	r2,r2,r2
    6320:	8a000504 	addi	r8,r17,20
    6324:	64c00315 	stw	r19,12(r12)
    6328:	30db883a 	add	r13,r6,r3
    632c:	4097883a 	add	r11,r8,r2
    6330:	61c00504 	addi	r7,r12,20
    6334:	0013883a 	mov	r9,zero
    6338:	31000017 	ldw	r4,0(r6)
    633c:	41400017 	ldw	r5,0(r8)
    6340:	42000104 	addi	r8,r8,4
    6344:	20bfffcc 	andi	r2,r4,65535
    6348:	28ffffcc 	andi	r3,r5,65535
    634c:	10c5c83a 	sub	r2,r2,r3
    6350:	1245883a 	add	r2,r2,r9
    6354:	2008d43a 	srli	r4,r4,16
    6358:	280ad43a 	srli	r5,r5,16
    635c:	1007d43a 	srai	r3,r2,16
    6360:	3880000d 	sth	r2,0(r7)
    6364:	2149c83a 	sub	r4,r4,r5
    6368:	20c9883a 	add	r4,r4,r3
    636c:	3900008d 	sth	r4,2(r7)
    6370:	31800104 	addi	r6,r6,4
    6374:	39c00104 	addi	r7,r7,4
    6378:	2013d43a 	srai	r9,r4,16
    637c:	42ffee36 	bltu	r8,r11,6338 <__mdiff+0x80>
    6380:	33400c2e 	bgeu	r6,r13,63b4 <__mdiff+0xfc>
    6384:	30800017 	ldw	r2,0(r6)
    6388:	31800104 	addi	r6,r6,4
    638c:	10ffffcc 	andi	r3,r2,65535
    6390:	1a47883a 	add	r3,r3,r9
    6394:	1004d43a 	srli	r2,r2,16
    6398:	1809d43a 	srai	r4,r3,16
    639c:	38c0000d 	sth	r3,0(r7)
    63a0:	1105883a 	add	r2,r2,r4
    63a4:	3880008d 	sth	r2,2(r7)
    63a8:	1013d43a 	srai	r9,r2,16
    63ac:	39c00104 	addi	r7,r7,4
    63b0:	337ff436 	bltu	r6,r13,6384 <__mdiff+0xcc>
    63b4:	38bfff17 	ldw	r2,-4(r7)
    63b8:	38ffff04 	addi	r3,r7,-4
    63bc:	1000041e 	bne	r2,zero,63d0 <__mdiff+0x118>
    63c0:	18ffff04 	addi	r3,r3,-4
    63c4:	18800017 	ldw	r2,0(r3)
    63c8:	52bfffc4 	addi	r10,r10,-1
    63cc:	103ffc26 	beq	r2,zero,63c0 <__mdiff+0x108>
    63d0:	6005883a 	mov	r2,r12
    63d4:	62800415 	stw	r10,16(r12)
    63d8:	dfc00417 	ldw	ra,16(sp)
    63dc:	dcc00317 	ldw	r19,12(sp)
    63e0:	dc800217 	ldw	r18,8(sp)
    63e4:	dc400117 	ldw	r17,4(sp)
    63e8:	dc000017 	ldw	r16,0(sp)
    63ec:	dec00504 	addi	sp,sp,20
    63f0:	f800283a 	ret
    63f4:	9009883a 	mov	r4,r18
    63f8:	000b883a 	mov	r5,zero
    63fc:	00060800 	call	6080 <_Balloc>
    6400:	1019883a 	mov	r12,r2
    6404:	00800044 	movi	r2,1
    6408:	60800415 	stw	r2,16(r12)
    640c:	6005883a 	mov	r2,r12
    6410:	60000515 	stw	zero,20(r12)
    6414:	dfc00417 	ldw	ra,16(sp)
    6418:	dcc00317 	ldw	r19,12(sp)
    641c:	dc800217 	ldw	r18,8(sp)
    6420:	dc400117 	ldw	r17,4(sp)
    6424:	dc000017 	ldw	r16,0(sp)
    6428:	dec00504 	addi	sp,sp,20
    642c:	f800283a 	ret
    6430:	880d883a 	mov	r6,r17
    6434:	04c00044 	movi	r19,1
    6438:	8023883a 	mov	r17,r16
    643c:	3021883a 	mov	r16,r6
    6440:	003fac06 	br	62f4 <__mdiff+0x3c>

00006444 <__lshift>:
    6444:	defff904 	addi	sp,sp,-28
    6448:	28800417 	ldw	r2,16(r5)
    644c:	dc000015 	stw	r16,0(sp)
    6450:	3021d17a 	srai	r16,r6,5
    6454:	28c00217 	ldw	r3,8(r5)
    6458:	10800044 	addi	r2,r2,1
    645c:	dc400115 	stw	r17,4(sp)
    6460:	80a3883a 	add	r17,r16,r2
    6464:	dd400515 	stw	r21,20(sp)
    6468:	dd000415 	stw	r20,16(sp)
    646c:	dc800215 	stw	r18,8(sp)
    6470:	dfc00615 	stw	ra,24(sp)
    6474:	2825883a 	mov	r18,r5
    6478:	dcc00315 	stw	r19,12(sp)
    647c:	3029883a 	mov	r20,r6
    6480:	202b883a 	mov	r21,r4
    6484:	29400117 	ldw	r5,4(r5)
    6488:	1c40030e 	bge	r3,r17,6498 <__lshift+0x54>
    648c:	18c7883a 	add	r3,r3,r3
    6490:	29400044 	addi	r5,r5,1
    6494:	1c7ffd16 	blt	r3,r17,648c <__lshift+0x48>
    6498:	a809883a 	mov	r4,r21
    649c:	00060800 	call	6080 <_Balloc>
    64a0:	1027883a 	mov	r19,r2
    64a4:	11400504 	addi	r5,r2,20
    64a8:	0400090e 	bge	zero,r16,64d0 <__lshift+0x8c>
    64ac:	2805883a 	mov	r2,r5
    64b0:	0007883a 	mov	r3,zero
    64b4:	18c00044 	addi	r3,r3,1
    64b8:	10000015 	stw	zero,0(r2)
    64bc:	10800104 	addi	r2,r2,4
    64c0:	80fffc1e 	bne	r16,r3,64b4 <__lshift+0x70>
    64c4:	8405883a 	add	r2,r16,r16
    64c8:	1085883a 	add	r2,r2,r2
    64cc:	288b883a 	add	r5,r5,r2
    64d0:	90800417 	ldw	r2,16(r18)
    64d4:	91000504 	addi	r4,r18,20
    64d8:	a18007cc 	andi	r6,r20,31
    64dc:	1085883a 	add	r2,r2,r2
    64e0:	1085883a 	add	r2,r2,r2
    64e4:	208f883a 	add	r7,r4,r2
    64e8:	30001e26 	beq	r6,zero,6564 <__lshift+0x120>
    64ec:	00800804 	movi	r2,32
    64f0:	1191c83a 	sub	r8,r2,r6
    64f4:	0007883a 	mov	r3,zero
    64f8:	20800017 	ldw	r2,0(r4)
    64fc:	1184983a 	sll	r2,r2,r6
    6500:	1884b03a 	or	r2,r3,r2
    6504:	28800015 	stw	r2,0(r5)
    6508:	20c00017 	ldw	r3,0(r4)
    650c:	21000104 	addi	r4,r4,4
    6510:	29400104 	addi	r5,r5,4
    6514:	1a06d83a 	srl	r3,r3,r8
    6518:	21fff736 	bltu	r4,r7,64f8 <__lshift+0xb4>
    651c:	28c00015 	stw	r3,0(r5)
    6520:	18000126 	beq	r3,zero,6528 <__lshift+0xe4>
    6524:	8c400044 	addi	r17,r17,1
    6528:	88bfffc4 	addi	r2,r17,-1
    652c:	98800415 	stw	r2,16(r19)
    6530:	a809883a 	mov	r4,r21
    6534:	900b883a 	mov	r5,r18
    6538:	0005b000 	call	5b00 <_Bfree>
    653c:	9805883a 	mov	r2,r19
    6540:	dfc00617 	ldw	ra,24(sp)
    6544:	dd400517 	ldw	r21,20(sp)
    6548:	dd000417 	ldw	r20,16(sp)
    654c:	dcc00317 	ldw	r19,12(sp)
    6550:	dc800217 	ldw	r18,8(sp)
    6554:	dc400117 	ldw	r17,4(sp)
    6558:	dc000017 	ldw	r16,0(sp)
    655c:	dec00704 	addi	sp,sp,28
    6560:	f800283a 	ret
    6564:	20800017 	ldw	r2,0(r4)
    6568:	21000104 	addi	r4,r4,4
    656c:	28800015 	stw	r2,0(r5)
    6570:	29400104 	addi	r5,r5,4
    6574:	21ffec2e 	bgeu	r4,r7,6528 <__lshift+0xe4>
    6578:	20800017 	ldw	r2,0(r4)
    657c:	21000104 	addi	r4,r4,4
    6580:	28800015 	stw	r2,0(r5)
    6584:	29400104 	addi	r5,r5,4
    6588:	21fff636 	bltu	r4,r7,6564 <__lshift+0x120>
    658c:	003fe606 	br	6528 <__lshift+0xe4>

00006590 <__multiply>:
    6590:	defff904 	addi	sp,sp,-28
    6594:	dcc00315 	stw	r19,12(sp)
    6598:	dc800215 	stw	r18,8(sp)
    659c:	2cc00417 	ldw	r19,16(r5)
    65a0:	34800417 	ldw	r18,16(r6)
    65a4:	dd000415 	stw	r20,16(sp)
    65a8:	dc400115 	stw	r17,4(sp)
    65ac:	dfc00615 	stw	ra,24(sp)
    65b0:	dd400515 	stw	r21,20(sp)
    65b4:	dc000015 	stw	r16,0(sp)
    65b8:	2823883a 	mov	r17,r5
    65bc:	3029883a 	mov	r20,r6
    65c0:	9c80040e 	bge	r19,r18,65d4 <__multiply+0x44>
    65c4:	9027883a 	mov	r19,r18
    65c8:	2c800417 	ldw	r18,16(r5)
    65cc:	2829883a 	mov	r20,r5
    65d0:	3023883a 	mov	r17,r6
    65d4:	88800217 	ldw	r2,8(r17)
    65d8:	9ca1883a 	add	r16,r19,r18
    65dc:	89400117 	ldw	r5,4(r17)
    65e0:	1400010e 	bge	r2,r16,65e8 <__multiply+0x58>
    65e4:	29400044 	addi	r5,r5,1
    65e8:	00060800 	call	6080 <_Balloc>
    65ec:	102b883a 	mov	r21,r2
    65f0:	8405883a 	add	r2,r16,r16
    65f4:	1085883a 	add	r2,r2,r2
    65f8:	a9000504 	addi	r4,r21,20
    65fc:	209d883a 	add	r14,r4,r2
    6600:	2380042e 	bgeu	r4,r14,6614 <__multiply+0x84>
    6604:	2005883a 	mov	r2,r4
    6608:	10000015 	stw	zero,0(r2)
    660c:	10800104 	addi	r2,r2,4
    6610:	13bffd36 	bltu	r2,r14,6608 <__multiply+0x78>
    6614:	9485883a 	add	r2,r18,r18
    6618:	9cc7883a 	add	r3,r19,r19
    661c:	a1800504 	addi	r6,r20,20
    6620:	1085883a 	add	r2,r2,r2
    6624:	8b400504 	addi	r13,r17,20
    6628:	18c7883a 	add	r3,r3,r3
    662c:	309f883a 	add	r15,r6,r2
    6630:	68d7883a 	add	r11,r13,r3
    6634:	33c03b2e 	bgeu	r6,r15,6724 <__multiply+0x194>
    6638:	2019883a 	mov	r12,r4
    663c:	30800017 	ldw	r2,0(r6)
    6640:	127fffcc 	andi	r9,r2,65535
    6644:	48001826 	beq	r9,zero,66a8 <__multiply+0x118>
    6648:	6811883a 	mov	r8,r13
    664c:	600f883a 	mov	r7,r12
    6650:	0015883a 	mov	r10,zero
    6654:	40c00017 	ldw	r3,0(r8)
    6658:	39400017 	ldw	r5,0(r7)
    665c:	42000104 	addi	r8,r8,4
    6660:	193fffcc 	andi	r4,r3,65535
    6664:	4909383a 	mul	r4,r9,r4
    6668:	1806d43a 	srli	r3,r3,16
    666c:	28bfffcc 	andi	r2,r5,65535
    6670:	5085883a 	add	r2,r10,r2
    6674:	2089883a 	add	r4,r4,r2
    6678:	48c7383a 	mul	r3,r9,r3
    667c:	280ad43a 	srli	r5,r5,16
    6680:	2004d43a 	srli	r2,r4,16
    6684:	3900000d 	sth	r4,0(r7)
    6688:	1947883a 	add	r3,r3,r5
    668c:	10c5883a 	add	r2,r2,r3
    6690:	3880008d 	sth	r2,2(r7)
    6694:	1014d43a 	srli	r10,r2,16
    6698:	39c00104 	addi	r7,r7,4
    669c:	42ffed36 	bltu	r8,r11,6654 <__multiply+0xc4>
    66a0:	3a800015 	stw	r10,0(r7)
    66a4:	30800017 	ldw	r2,0(r6)
    66a8:	1012d43a 	srli	r9,r2,16
    66ac:	48001926 	beq	r9,zero,6714 <__multiply+0x184>
    66b0:	60800017 	ldw	r2,0(r12)
    66b4:	6811883a 	mov	r8,r13
    66b8:	600f883a 	mov	r7,r12
    66bc:	0015883a 	mov	r10,zero
    66c0:	100b883a 	mov	r5,r2
    66c4:	41000017 	ldw	r4,0(r8)
    66c8:	2806d43a 	srli	r3,r5,16
    66cc:	3880000d 	sth	r2,0(r7)
    66d0:	20bfffcc 	andi	r2,r4,65535
    66d4:	4885383a 	mul	r2,r9,r2
    66d8:	50c7883a 	add	r3,r10,r3
    66dc:	2008d43a 	srli	r4,r4,16
    66e0:	10c5883a 	add	r2,r2,r3
    66e4:	3880008d 	sth	r2,2(r7)
    66e8:	39c00104 	addi	r7,r7,4
    66ec:	39400017 	ldw	r5,0(r7)
    66f0:	4909383a 	mul	r4,r9,r4
    66f4:	1004d43a 	srli	r2,r2,16
    66f8:	28ffffcc 	andi	r3,r5,65535
    66fc:	20c9883a 	add	r4,r4,r3
    6700:	1105883a 	add	r2,r2,r4
    6704:	42000104 	addi	r8,r8,4
    6708:	1014d43a 	srli	r10,r2,16
    670c:	42ffed36 	bltu	r8,r11,66c4 <__multiply+0x134>
    6710:	38800015 	stw	r2,0(r7)
    6714:	31800104 	addi	r6,r6,4
    6718:	33c0022e 	bgeu	r6,r15,6724 <__multiply+0x194>
    671c:	63000104 	addi	r12,r12,4
    6720:	003fc606 	br	663c <__multiply+0xac>
    6724:	0400090e 	bge	zero,r16,674c <__multiply+0x1bc>
    6728:	70bfff17 	ldw	r2,-4(r14)
    672c:	70ffff04 	addi	r3,r14,-4
    6730:	10000326 	beq	r2,zero,6740 <__multiply+0x1b0>
    6734:	00000506 	br	674c <__multiply+0x1bc>
    6738:	18800017 	ldw	r2,0(r3)
    673c:	1000031e 	bne	r2,zero,674c <__multiply+0x1bc>
    6740:	843fffc4 	addi	r16,r16,-1
    6744:	18ffff04 	addi	r3,r3,-4
    6748:	803ffb1e 	bne	r16,zero,6738 <__multiply+0x1a8>
    674c:	a805883a 	mov	r2,r21
    6750:	ac000415 	stw	r16,16(r21)
    6754:	dfc00617 	ldw	ra,24(sp)
    6758:	dd400517 	ldw	r21,20(sp)
    675c:	dd000417 	ldw	r20,16(sp)
    6760:	dcc00317 	ldw	r19,12(sp)
    6764:	dc800217 	ldw	r18,8(sp)
    6768:	dc400117 	ldw	r17,4(sp)
    676c:	dc000017 	ldw	r16,0(sp)
    6770:	dec00704 	addi	sp,sp,28
    6774:	f800283a 	ret

00006778 <__i2b>:
    6778:	defffd04 	addi	sp,sp,-12
    677c:	dc000015 	stw	r16,0(sp)
    6780:	04000044 	movi	r16,1
    6784:	dc800115 	stw	r18,4(sp)
    6788:	2825883a 	mov	r18,r5
    678c:	800b883a 	mov	r5,r16
    6790:	dfc00215 	stw	ra,8(sp)
    6794:	00060800 	call	6080 <_Balloc>
    6798:	14000415 	stw	r16,16(r2)
    679c:	14800515 	stw	r18,20(r2)
    67a0:	dfc00217 	ldw	ra,8(sp)
    67a4:	dc800117 	ldw	r18,4(sp)
    67a8:	dc000017 	ldw	r16,0(sp)
    67ac:	dec00304 	addi	sp,sp,12
    67b0:	f800283a 	ret

000067b4 <__multadd>:
    67b4:	defffa04 	addi	sp,sp,-24
    67b8:	dc800215 	stw	r18,8(sp)
    67bc:	2c800417 	ldw	r18,16(r5)
    67c0:	dd000415 	stw	r20,16(sp)
    67c4:	dcc00315 	stw	r19,12(sp)
    67c8:	dc000015 	stw	r16,0(sp)
    67cc:	dfc00515 	stw	ra,20(sp)
    67d0:	3821883a 	mov	r16,r7
    67d4:	dc400115 	stw	r17,4(sp)
    67d8:	2827883a 	mov	r19,r5
    67dc:	2029883a 	mov	r20,r4
    67e0:	2a000504 	addi	r8,r5,20
    67e4:	000f883a 	mov	r7,zero
    67e8:	40800017 	ldw	r2,0(r8)
    67ec:	39c00044 	addi	r7,r7,1
    67f0:	10ffffcc 	andi	r3,r2,65535
    67f4:	1987383a 	mul	r3,r3,r6
    67f8:	1004d43a 	srli	r2,r2,16
    67fc:	1c07883a 	add	r3,r3,r16
    6800:	180ad43a 	srli	r5,r3,16
    6804:	1185383a 	mul	r2,r2,r6
    6808:	18ffffcc 	andi	r3,r3,65535
    680c:	1145883a 	add	r2,r2,r5
    6810:	1008943a 	slli	r4,r2,16
    6814:	1020d43a 	srli	r16,r2,16
    6818:	20c9883a 	add	r4,r4,r3
    681c:	41000015 	stw	r4,0(r8)
    6820:	42000104 	addi	r8,r8,4
    6824:	3cbff016 	blt	r7,r18,67e8 <__multadd+0x34>
    6828:	80000826 	beq	r16,zero,684c <__multadd+0x98>
    682c:	98800217 	ldw	r2,8(r19)
    6830:	90800f0e 	bge	r18,r2,6870 <__multadd+0xbc>
    6834:	9485883a 	add	r2,r18,r18
    6838:	1085883a 	add	r2,r2,r2
    683c:	14c5883a 	add	r2,r2,r19
    6840:	90c00044 	addi	r3,r18,1
    6844:	14000515 	stw	r16,20(r2)
    6848:	98c00415 	stw	r3,16(r19)
    684c:	9805883a 	mov	r2,r19
    6850:	dfc00517 	ldw	ra,20(sp)
    6854:	dd000417 	ldw	r20,16(sp)
    6858:	dcc00317 	ldw	r19,12(sp)
    685c:	dc800217 	ldw	r18,8(sp)
    6860:	dc400117 	ldw	r17,4(sp)
    6864:	dc000017 	ldw	r16,0(sp)
    6868:	dec00604 	addi	sp,sp,24
    686c:	f800283a 	ret
    6870:	99400117 	ldw	r5,4(r19)
    6874:	a009883a 	mov	r4,r20
    6878:	29400044 	addi	r5,r5,1
    687c:	00060800 	call	6080 <_Balloc>
    6880:	99800417 	ldw	r6,16(r19)
    6884:	99400304 	addi	r5,r19,12
    6888:	11000304 	addi	r4,r2,12
    688c:	318d883a 	add	r6,r6,r6
    6890:	318d883a 	add	r6,r6,r6
    6894:	31800204 	addi	r6,r6,8
    6898:	1023883a 	mov	r17,r2
    689c:	00058e80 	call	58e8 <memcpy>
    68a0:	980b883a 	mov	r5,r19
    68a4:	a009883a 	mov	r4,r20
    68a8:	0005b000 	call	5b00 <_Bfree>
    68ac:	8827883a 	mov	r19,r17
    68b0:	003fe006 	br	6834 <__multadd+0x80>

000068b4 <__pow5mult>:
    68b4:	defffa04 	addi	sp,sp,-24
    68b8:	308000cc 	andi	r2,r6,3
    68bc:	dd000415 	stw	r20,16(sp)
    68c0:	dcc00315 	stw	r19,12(sp)
    68c4:	dc000015 	stw	r16,0(sp)
    68c8:	dfc00515 	stw	ra,20(sp)
    68cc:	dc800215 	stw	r18,8(sp)
    68d0:	dc400115 	stw	r17,4(sp)
    68d4:	3021883a 	mov	r16,r6
    68d8:	2027883a 	mov	r19,r4
    68dc:	2829883a 	mov	r20,r5
    68e0:	10002b1e 	bne	r2,zero,6990 <__pow5mult+0xdc>
    68e4:	8025d0ba 	srai	r18,r16,2
    68e8:	90001b26 	beq	r18,zero,6958 <__pow5mult+0xa4>
    68ec:	9c001217 	ldw	r16,72(r19)
    68f0:	8000081e 	bne	r16,zero,6914 <__pow5mult+0x60>
    68f4:	00003006 	br	69b8 <__pow5mult+0x104>
    68f8:	800b883a 	mov	r5,r16
    68fc:	800d883a 	mov	r6,r16
    6900:	9809883a 	mov	r4,r19
    6904:	90001426 	beq	r18,zero,6958 <__pow5mult+0xa4>
    6908:	80800017 	ldw	r2,0(r16)
    690c:	10001b26 	beq	r2,zero,697c <__pow5mult+0xc8>
    6910:	1021883a 	mov	r16,r2
    6914:	9080004c 	andi	r2,r18,1
    6918:	1005003a 	cmpeq	r2,r2,zero
    691c:	9025d07a 	srai	r18,r18,1
    6920:	800d883a 	mov	r6,r16
    6924:	9809883a 	mov	r4,r19
    6928:	a00b883a 	mov	r5,r20
    692c:	103ff21e 	bne	r2,zero,68f8 <__pow5mult+0x44>
    6930:	00065900 	call	6590 <__multiply>
    6934:	a00b883a 	mov	r5,r20
    6938:	9809883a 	mov	r4,r19
    693c:	1023883a 	mov	r17,r2
    6940:	0005b000 	call	5b00 <_Bfree>
    6944:	8829883a 	mov	r20,r17
    6948:	800b883a 	mov	r5,r16
    694c:	800d883a 	mov	r6,r16
    6950:	9809883a 	mov	r4,r19
    6954:	903fec1e 	bne	r18,zero,6908 <__pow5mult+0x54>
    6958:	a005883a 	mov	r2,r20
    695c:	dfc00517 	ldw	ra,20(sp)
    6960:	dd000417 	ldw	r20,16(sp)
    6964:	dcc00317 	ldw	r19,12(sp)
    6968:	dc800217 	ldw	r18,8(sp)
    696c:	dc400117 	ldw	r17,4(sp)
    6970:	dc000017 	ldw	r16,0(sp)
    6974:	dec00604 	addi	sp,sp,24
    6978:	f800283a 	ret
    697c:	00065900 	call	6590 <__multiply>
    6980:	80800015 	stw	r2,0(r16)
    6984:	1021883a 	mov	r16,r2
    6988:	10000015 	stw	zero,0(r2)
    698c:	003fe106 	br	6914 <__pow5mult+0x60>
    6990:	1085883a 	add	r2,r2,r2
    6994:	00c00074 	movhi	r3,1
    6998:	18f49e04 	addi	r3,r3,-11656
    699c:	1085883a 	add	r2,r2,r2
    69a0:	10c5883a 	add	r2,r2,r3
    69a4:	11bfff17 	ldw	r6,-4(r2)
    69a8:	000f883a 	mov	r7,zero
    69ac:	00067b40 	call	67b4 <__multadd>
    69b0:	1029883a 	mov	r20,r2
    69b4:	003fcb06 	br	68e4 <__pow5mult+0x30>
    69b8:	9809883a 	mov	r4,r19
    69bc:	01409c44 	movi	r5,625
    69c0:	00067780 	call	6778 <__i2b>
    69c4:	98801215 	stw	r2,72(r19)
    69c8:	1021883a 	mov	r16,r2
    69cc:	10000015 	stw	zero,0(r2)
    69d0:	003fd006 	br	6914 <__pow5mult+0x60>

000069d4 <__s2b>:
    69d4:	defff904 	addi	sp,sp,-28
    69d8:	dcc00315 	stw	r19,12(sp)
    69dc:	dc800215 	stw	r18,8(sp)
    69e0:	2827883a 	mov	r19,r5
    69e4:	2025883a 	mov	r18,r4
    69e8:	01400244 	movi	r5,9
    69ec:	39000204 	addi	r4,r7,8
    69f0:	dd000415 	stw	r20,16(sp)
    69f4:	dc400115 	stw	r17,4(sp)
    69f8:	dfc00615 	stw	ra,24(sp)
    69fc:	dd400515 	stw	r21,20(sp)
    6a00:	dc000015 	stw	r16,0(sp)
    6a04:	3829883a 	mov	r20,r7
    6a08:	3023883a 	mov	r17,r6
    6a0c:	00095980 	call	9598 <__divsi3>
    6a10:	00c00044 	movi	r3,1
    6a14:	1880350e 	bge	r3,r2,6aec <__s2b+0x118>
    6a18:	000b883a 	mov	r5,zero
    6a1c:	18c7883a 	add	r3,r3,r3
    6a20:	29400044 	addi	r5,r5,1
    6a24:	18bffd16 	blt	r3,r2,6a1c <__s2b+0x48>
    6a28:	9009883a 	mov	r4,r18
    6a2c:	00060800 	call	6080 <_Balloc>
    6a30:	1011883a 	mov	r8,r2
    6a34:	d8800717 	ldw	r2,28(sp)
    6a38:	00c00044 	movi	r3,1
    6a3c:	01800244 	movi	r6,9
    6a40:	40800515 	stw	r2,20(r8)
    6a44:	40c00415 	stw	r3,16(r8)
    6a48:	3440260e 	bge	r6,r17,6ae4 <__s2b+0x110>
    6a4c:	3021883a 	mov	r16,r6
    6a50:	99ab883a 	add	r21,r19,r6
    6a54:	9c05883a 	add	r2,r19,r16
    6a58:	11c00007 	ldb	r7,0(r2)
    6a5c:	400b883a 	mov	r5,r8
    6a60:	9009883a 	mov	r4,r18
    6a64:	39fff404 	addi	r7,r7,-48
    6a68:	01800284 	movi	r6,10
    6a6c:	00067b40 	call	67b4 <__multadd>
    6a70:	84000044 	addi	r16,r16,1
    6a74:	1011883a 	mov	r8,r2
    6a78:	8c3ff61e 	bne	r17,r16,6a54 <__s2b+0x80>
    6a7c:	ac45883a 	add	r2,r21,r17
    6a80:	117ffe04 	addi	r5,r2,-8
    6a84:	880d883a 	mov	r6,r17
    6a88:	35000c0e 	bge	r6,r20,6abc <__s2b+0xe8>
    6a8c:	a185c83a 	sub	r2,r20,r6
    6a90:	2821883a 	mov	r16,r5
    6a94:	28a3883a 	add	r17,r5,r2
    6a98:	81c00007 	ldb	r7,0(r16)
    6a9c:	400b883a 	mov	r5,r8
    6aa0:	9009883a 	mov	r4,r18
    6aa4:	39fff404 	addi	r7,r7,-48
    6aa8:	01800284 	movi	r6,10
    6aac:	00067b40 	call	67b4 <__multadd>
    6ab0:	84000044 	addi	r16,r16,1
    6ab4:	1011883a 	mov	r8,r2
    6ab8:	847ff71e 	bne	r16,r17,6a98 <__s2b+0xc4>
    6abc:	4005883a 	mov	r2,r8
    6ac0:	dfc00617 	ldw	ra,24(sp)
    6ac4:	dd400517 	ldw	r21,20(sp)
    6ac8:	dd000417 	ldw	r20,16(sp)
    6acc:	dcc00317 	ldw	r19,12(sp)
    6ad0:	dc800217 	ldw	r18,8(sp)
    6ad4:	dc400117 	ldw	r17,4(sp)
    6ad8:	dc000017 	ldw	r16,0(sp)
    6adc:	dec00704 	addi	sp,sp,28
    6ae0:	f800283a 	ret
    6ae4:	99400284 	addi	r5,r19,10
    6ae8:	003fe706 	br	6a88 <__s2b+0xb4>
    6aec:	000b883a 	mov	r5,zero
    6af0:	003fcd06 	br	6a28 <__s2b+0x54>

00006af4 <_realloc_r>:
    6af4:	defff404 	addi	sp,sp,-48
    6af8:	dd800815 	stw	r22,32(sp)
    6afc:	dc800415 	stw	r18,16(sp)
    6b00:	dc400315 	stw	r17,12(sp)
    6b04:	dfc00b15 	stw	ra,44(sp)
    6b08:	df000a15 	stw	fp,40(sp)
    6b0c:	ddc00915 	stw	r23,36(sp)
    6b10:	dd400715 	stw	r21,28(sp)
    6b14:	dd000615 	stw	r20,24(sp)
    6b18:	dcc00515 	stw	r19,20(sp)
    6b1c:	dc000215 	stw	r16,8(sp)
    6b20:	2825883a 	mov	r18,r5
    6b24:	3023883a 	mov	r17,r6
    6b28:	202d883a 	mov	r22,r4
    6b2c:	2800c926 	beq	r5,zero,6e54 <_realloc_r+0x360>
    6b30:	000a3780 	call	a378 <__malloc_lock>
    6b34:	943ffe04 	addi	r16,r18,-8
    6b38:	88c002c4 	addi	r3,r17,11
    6b3c:	00800584 	movi	r2,22
    6b40:	82000117 	ldw	r8,4(r16)
    6b44:	10c01b2e 	bgeu	r2,r3,6bb4 <_realloc_r+0xc0>
    6b48:	00bffe04 	movi	r2,-8
    6b4c:	188e703a 	and	r7,r3,r2
    6b50:	3839883a 	mov	fp,r7
    6b54:	38001a16 	blt	r7,zero,6bc0 <_realloc_r+0xcc>
    6b58:	e4401936 	bltu	fp,r17,6bc0 <_realloc_r+0xcc>
    6b5c:	013fff04 	movi	r4,-4
    6b60:	4126703a 	and	r19,r8,r4
    6b64:	99c02616 	blt	r19,r7,6c00 <_realloc_r+0x10c>
    6b68:	802b883a 	mov	r21,r16
    6b6c:	9829883a 	mov	r20,r19
    6b70:	84000204 	addi	r16,r16,8
    6b74:	a80f883a 	mov	r7,r21
    6b78:	a70dc83a 	sub	r6,r20,fp
    6b7c:	008003c4 	movi	r2,15
    6b80:	1180c136 	bltu	r2,r6,6e88 <_realloc_r+0x394>
    6b84:	38800117 	ldw	r2,4(r7)
    6b88:	a549883a 	add	r4,r20,r21
    6b8c:	1080004c 	andi	r2,r2,1
    6b90:	a084b03a 	or	r2,r20,r2
    6b94:	38800115 	stw	r2,4(r7)
    6b98:	20c00117 	ldw	r3,4(r4)
    6b9c:	18c00054 	ori	r3,r3,1
    6ba0:	20c00115 	stw	r3,4(r4)
    6ba4:	b009883a 	mov	r4,r22
    6ba8:	000a3980 	call	a398 <__malloc_unlock>
    6bac:	8023883a 	mov	r17,r16
    6bb0:	00000606 	br	6bcc <_realloc_r+0xd8>
    6bb4:	01c00404 	movi	r7,16
    6bb8:	3839883a 	mov	fp,r7
    6bbc:	e47fe72e 	bgeu	fp,r17,6b5c <_realloc_r+0x68>
    6bc0:	00800304 	movi	r2,12
    6bc4:	0023883a 	mov	r17,zero
    6bc8:	b0800015 	stw	r2,0(r22)
    6bcc:	8805883a 	mov	r2,r17
    6bd0:	dfc00b17 	ldw	ra,44(sp)
    6bd4:	df000a17 	ldw	fp,40(sp)
    6bd8:	ddc00917 	ldw	r23,36(sp)
    6bdc:	dd800817 	ldw	r22,32(sp)
    6be0:	dd400717 	ldw	r21,28(sp)
    6be4:	dd000617 	ldw	r20,24(sp)
    6be8:	dcc00517 	ldw	r19,20(sp)
    6bec:	dc800417 	ldw	r18,16(sp)
    6bf0:	dc400317 	ldw	r17,12(sp)
    6bf4:	dc000217 	ldw	r16,8(sp)
    6bf8:	dec00c04 	addi	sp,sp,48
    6bfc:	f800283a 	ret
    6c00:	00800074 	movhi	r2,1
    6c04:	10b5fe04 	addi	r2,r2,-10248
    6c08:	12400217 	ldw	r9,8(r2)
    6c0c:	84cd883a 	add	r6,r16,r19
    6c10:	802b883a 	mov	r21,r16
    6c14:	3240b926 	beq	r6,r9,6efc <_realloc_r+0x408>
    6c18:	31400117 	ldw	r5,4(r6)
    6c1c:	00bfff84 	movi	r2,-2
    6c20:	2884703a 	and	r2,r5,r2
    6c24:	1185883a 	add	r2,r2,r6
    6c28:	10c00117 	ldw	r3,4(r2)
    6c2c:	18c0004c 	andi	r3,r3,1
    6c30:	1807003a 	cmpeq	r3,r3,zero
    6c34:	1800a326 	beq	r3,zero,6ec4 <_realloc_r+0x3d0>
    6c38:	2908703a 	and	r4,r5,r4
    6c3c:	9929883a 	add	r20,r19,r4
    6c40:	a1c0a30e 	bge	r20,r7,6ed0 <_realloc_r+0x3dc>
    6c44:	4080004c 	andi	r2,r8,1
    6c48:	1000551e 	bne	r2,zero,6da0 <_realloc_r+0x2ac>
    6c4c:	80800017 	ldw	r2,0(r16)
    6c50:	80afc83a 	sub	r23,r16,r2
    6c54:	b8c00117 	ldw	r3,4(r23)
    6c58:	00bfff04 	movi	r2,-4
    6c5c:	1884703a 	and	r2,r3,r2
    6c60:	30002e26 	beq	r6,zero,6d1c <_realloc_r+0x228>
    6c64:	3240b926 	beq	r6,r9,6f4c <_realloc_r+0x458>
    6c68:	98a9883a 	add	r20,r19,r2
    6c6c:	2509883a 	add	r4,r4,r20
    6c70:	d9000015 	stw	r4,0(sp)
    6c74:	21c02a16 	blt	r4,r7,6d20 <_realloc_r+0x22c>
    6c78:	30800317 	ldw	r2,12(r6)
    6c7c:	30c00217 	ldw	r3,8(r6)
    6c80:	01400904 	movi	r5,36
    6c84:	99bfff04 	addi	r6,r19,-4
    6c88:	18800315 	stw	r2,12(r3)
    6c8c:	10c00215 	stw	r3,8(r2)
    6c90:	b9000317 	ldw	r4,12(r23)
    6c94:	b8800217 	ldw	r2,8(r23)
    6c98:	b82b883a 	mov	r21,r23
    6c9c:	bc000204 	addi	r16,r23,8
    6ca0:	20800215 	stw	r2,8(r4)
    6ca4:	11000315 	stw	r4,12(r2)
    6ca8:	2980e436 	bltu	r5,r6,703c <_realloc_r+0x548>
    6cac:	008004c4 	movi	r2,19
    6cb0:	9009883a 	mov	r4,r18
    6cb4:	8011883a 	mov	r8,r16
    6cb8:	11800f2e 	bgeu	r2,r6,6cf8 <_realloc_r+0x204>
    6cbc:	90800017 	ldw	r2,0(r18)
    6cc0:	ba000404 	addi	r8,r23,16
    6cc4:	91000204 	addi	r4,r18,8
    6cc8:	b8800215 	stw	r2,8(r23)
    6ccc:	90c00117 	ldw	r3,4(r18)
    6cd0:	008006c4 	movi	r2,27
    6cd4:	b8c00315 	stw	r3,12(r23)
    6cd8:	1180072e 	bgeu	r2,r6,6cf8 <_realloc_r+0x204>
    6cdc:	90c00217 	ldw	r3,8(r18)
    6ce0:	ba000604 	addi	r8,r23,24
    6ce4:	91000404 	addi	r4,r18,16
    6ce8:	b8c00415 	stw	r3,16(r23)
    6cec:	90800317 	ldw	r2,12(r18)
    6cf0:	b8800515 	stw	r2,20(r23)
    6cf4:	3140e726 	beq	r6,r5,7094 <_realloc_r+0x5a0>
    6cf8:	20800017 	ldw	r2,0(r4)
    6cfc:	dd000017 	ldw	r20,0(sp)
    6d00:	b80f883a 	mov	r7,r23
    6d04:	40800015 	stw	r2,0(r8)
    6d08:	20c00117 	ldw	r3,4(r4)
    6d0c:	40c00115 	stw	r3,4(r8)
    6d10:	20800217 	ldw	r2,8(r4)
    6d14:	40800215 	stw	r2,8(r8)
    6d18:	003f9706 	br	6b78 <_realloc_r+0x84>
    6d1c:	98a9883a 	add	r20,r19,r2
    6d20:	a1c01f16 	blt	r20,r7,6da0 <_realloc_r+0x2ac>
    6d24:	b8c00317 	ldw	r3,12(r23)
    6d28:	b8800217 	ldw	r2,8(r23)
    6d2c:	99bfff04 	addi	r6,r19,-4
    6d30:	01400904 	movi	r5,36
    6d34:	b82b883a 	mov	r21,r23
    6d38:	18800215 	stw	r2,8(r3)
    6d3c:	10c00315 	stw	r3,12(r2)
    6d40:	bc000204 	addi	r16,r23,8
    6d44:	2980c336 	bltu	r5,r6,7054 <_realloc_r+0x560>
    6d48:	008004c4 	movi	r2,19
    6d4c:	9009883a 	mov	r4,r18
    6d50:	8011883a 	mov	r8,r16
    6d54:	11800f2e 	bgeu	r2,r6,6d94 <_realloc_r+0x2a0>
    6d58:	90800017 	ldw	r2,0(r18)
    6d5c:	ba000404 	addi	r8,r23,16
    6d60:	91000204 	addi	r4,r18,8
    6d64:	b8800215 	stw	r2,8(r23)
    6d68:	90c00117 	ldw	r3,4(r18)
    6d6c:	008006c4 	movi	r2,27
    6d70:	b8c00315 	stw	r3,12(r23)
    6d74:	1180072e 	bgeu	r2,r6,6d94 <_realloc_r+0x2a0>
    6d78:	90c00217 	ldw	r3,8(r18)
    6d7c:	ba000604 	addi	r8,r23,24
    6d80:	91000404 	addi	r4,r18,16
    6d84:	b8c00415 	stw	r3,16(r23)
    6d88:	90800317 	ldw	r2,12(r18)
    6d8c:	b8800515 	stw	r2,20(r23)
    6d90:	3140c726 	beq	r6,r5,70b0 <_realloc_r+0x5bc>
    6d94:	20800017 	ldw	r2,0(r4)
    6d98:	b80f883a 	mov	r7,r23
    6d9c:	003fd906 	br	6d04 <_realloc_r+0x210>
    6da0:	880b883a 	mov	r5,r17
    6da4:	b009883a 	mov	r4,r22
    6da8:	00050c40 	call	50c4 <_malloc_r>
    6dac:	1023883a 	mov	r17,r2
    6db0:	10002526 	beq	r2,zero,6e48 <_realloc_r+0x354>
    6db4:	80800117 	ldw	r2,4(r16)
    6db8:	00ffff84 	movi	r3,-2
    6dbc:	893ffe04 	addi	r4,r17,-8
    6dc0:	10c4703a 	and	r2,r2,r3
    6dc4:	8085883a 	add	r2,r16,r2
    6dc8:	20809526 	beq	r4,r2,7020 <_realloc_r+0x52c>
    6dcc:	99bfff04 	addi	r6,r19,-4
    6dd0:	01c00904 	movi	r7,36
    6dd4:	39804536 	bltu	r7,r6,6eec <_realloc_r+0x3f8>
    6dd8:	008004c4 	movi	r2,19
    6ddc:	9009883a 	mov	r4,r18
    6de0:	880b883a 	mov	r5,r17
    6de4:	11800f2e 	bgeu	r2,r6,6e24 <_realloc_r+0x330>
    6de8:	90800017 	ldw	r2,0(r18)
    6dec:	89400204 	addi	r5,r17,8
    6df0:	91000204 	addi	r4,r18,8
    6df4:	88800015 	stw	r2,0(r17)
    6df8:	90c00117 	ldw	r3,4(r18)
    6dfc:	008006c4 	movi	r2,27
    6e00:	88c00115 	stw	r3,4(r17)
    6e04:	1180072e 	bgeu	r2,r6,6e24 <_realloc_r+0x330>
    6e08:	90c00217 	ldw	r3,8(r18)
    6e0c:	89400404 	addi	r5,r17,16
    6e10:	91000404 	addi	r4,r18,16
    6e14:	88c00215 	stw	r3,8(r17)
    6e18:	90800317 	ldw	r2,12(r18)
    6e1c:	88800315 	stw	r2,12(r17)
    6e20:	31c09126 	beq	r6,r7,7068 <_realloc_r+0x574>
    6e24:	20800017 	ldw	r2,0(r4)
    6e28:	28800015 	stw	r2,0(r5)
    6e2c:	20c00117 	ldw	r3,4(r4)
    6e30:	28c00115 	stw	r3,4(r5)
    6e34:	20800217 	ldw	r2,8(r4)
    6e38:	28800215 	stw	r2,8(r5)
    6e3c:	900b883a 	mov	r5,r18
    6e40:	b009883a 	mov	r4,r22
    6e44:	000453c0 	call	453c <_free_r>
    6e48:	b009883a 	mov	r4,r22
    6e4c:	000a3980 	call	a398 <__malloc_unlock>
    6e50:	003f5e06 	br	6bcc <_realloc_r+0xd8>
    6e54:	300b883a 	mov	r5,r6
    6e58:	dfc00b17 	ldw	ra,44(sp)
    6e5c:	df000a17 	ldw	fp,40(sp)
    6e60:	ddc00917 	ldw	r23,36(sp)
    6e64:	dd800817 	ldw	r22,32(sp)
    6e68:	dd400717 	ldw	r21,28(sp)
    6e6c:	dd000617 	ldw	r20,24(sp)
    6e70:	dcc00517 	ldw	r19,20(sp)
    6e74:	dc800417 	ldw	r18,16(sp)
    6e78:	dc400317 	ldw	r17,12(sp)
    6e7c:	dc000217 	ldw	r16,8(sp)
    6e80:	dec00c04 	addi	sp,sp,48
    6e84:	00050c41 	jmpi	50c4 <_malloc_r>
    6e88:	38800117 	ldw	r2,4(r7)
    6e8c:	e54b883a 	add	r5,fp,r21
    6e90:	31000054 	ori	r4,r6,1
    6e94:	1080004c 	andi	r2,r2,1
    6e98:	1704b03a 	or	r2,r2,fp
    6e9c:	38800115 	stw	r2,4(r7)
    6ea0:	29000115 	stw	r4,4(r5)
    6ea4:	2987883a 	add	r3,r5,r6
    6ea8:	18800117 	ldw	r2,4(r3)
    6eac:	29400204 	addi	r5,r5,8
    6eb0:	b009883a 	mov	r4,r22
    6eb4:	10800054 	ori	r2,r2,1
    6eb8:	18800115 	stw	r2,4(r3)
    6ebc:	000453c0 	call	453c <_free_r>
    6ec0:	003f3806 	br	6ba4 <_realloc_r+0xb0>
    6ec4:	000d883a 	mov	r6,zero
    6ec8:	0009883a 	mov	r4,zero
    6ecc:	003f5d06 	br	6c44 <_realloc_r+0x150>
    6ed0:	30c00217 	ldw	r3,8(r6)
    6ed4:	30800317 	ldw	r2,12(r6)
    6ed8:	800f883a 	mov	r7,r16
    6edc:	84000204 	addi	r16,r16,8
    6ee0:	10c00215 	stw	r3,8(r2)
    6ee4:	18800315 	stw	r2,12(r3)
    6ee8:	003f2306 	br	6b78 <_realloc_r+0x84>
    6eec:	8809883a 	mov	r4,r17
    6ef0:	900b883a 	mov	r5,r18
    6ef4:	00059880 	call	5988 <memmove>
    6ef8:	003fd006 	br	6e3c <_realloc_r+0x348>
    6efc:	30800117 	ldw	r2,4(r6)
    6f00:	e0c00404 	addi	r3,fp,16
    6f04:	1108703a 	and	r4,r2,r4
    6f08:	9905883a 	add	r2,r19,r4
    6f0c:	10ff4d16 	blt	r2,r3,6c44 <_realloc_r+0x150>
    6f10:	1705c83a 	sub	r2,r2,fp
    6f14:	870b883a 	add	r5,r16,fp
    6f18:	10800054 	ori	r2,r2,1
    6f1c:	28800115 	stw	r2,4(r5)
    6f20:	80c00117 	ldw	r3,4(r16)
    6f24:	00800074 	movhi	r2,1
    6f28:	10b5fe04 	addi	r2,r2,-10248
    6f2c:	b009883a 	mov	r4,r22
    6f30:	18c0004c 	andi	r3,r3,1
    6f34:	e0c6b03a 	or	r3,fp,r3
    6f38:	11400215 	stw	r5,8(r2)
    6f3c:	80c00115 	stw	r3,4(r16)
    6f40:	000a3980 	call	a398 <__malloc_unlock>
    6f44:	84400204 	addi	r17,r16,8
    6f48:	003f2006 	br	6bcc <_realloc_r+0xd8>
    6f4c:	98a9883a 	add	r20,r19,r2
    6f50:	2509883a 	add	r4,r4,r20
    6f54:	e0800404 	addi	r2,fp,16
    6f58:	d9000115 	stw	r4,4(sp)
    6f5c:	20bf7016 	blt	r4,r2,6d20 <_realloc_r+0x22c>
    6f60:	b8c00317 	ldw	r3,12(r23)
    6f64:	b8800217 	ldw	r2,8(r23)
    6f68:	99bfff04 	addi	r6,r19,-4
    6f6c:	01400904 	movi	r5,36
    6f70:	18800215 	stw	r2,8(r3)
    6f74:	10c00315 	stw	r3,12(r2)
    6f78:	bc400204 	addi	r17,r23,8
    6f7c:	29804136 	bltu	r5,r6,7084 <_realloc_r+0x590>
    6f80:	008004c4 	movi	r2,19
    6f84:	9009883a 	mov	r4,r18
    6f88:	880f883a 	mov	r7,r17
    6f8c:	11800f2e 	bgeu	r2,r6,6fcc <_realloc_r+0x4d8>
    6f90:	90800017 	ldw	r2,0(r18)
    6f94:	b9c00404 	addi	r7,r23,16
    6f98:	91000204 	addi	r4,r18,8
    6f9c:	b8800215 	stw	r2,8(r23)
    6fa0:	90c00117 	ldw	r3,4(r18)
    6fa4:	008006c4 	movi	r2,27
    6fa8:	b8c00315 	stw	r3,12(r23)
    6fac:	1180072e 	bgeu	r2,r6,6fcc <_realloc_r+0x4d8>
    6fb0:	90c00217 	ldw	r3,8(r18)
    6fb4:	b9c00604 	addi	r7,r23,24
    6fb8:	91000404 	addi	r4,r18,16
    6fbc:	b8c00415 	stw	r3,16(r23)
    6fc0:	90800317 	ldw	r2,12(r18)
    6fc4:	b8800515 	stw	r2,20(r23)
    6fc8:	31404026 	beq	r6,r5,70cc <_realloc_r+0x5d8>
    6fcc:	20800017 	ldw	r2,0(r4)
    6fd0:	38800015 	stw	r2,0(r7)
    6fd4:	20c00117 	ldw	r3,4(r4)
    6fd8:	38c00115 	stw	r3,4(r7)
    6fdc:	20800217 	ldw	r2,8(r4)
    6fe0:	38800215 	stw	r2,8(r7)
    6fe4:	d8c00117 	ldw	r3,4(sp)
    6fe8:	bf0b883a 	add	r5,r23,fp
    6fec:	b009883a 	mov	r4,r22
    6ff0:	1f05c83a 	sub	r2,r3,fp
    6ff4:	10800054 	ori	r2,r2,1
    6ff8:	28800115 	stw	r2,4(r5)
    6ffc:	b8c00117 	ldw	r3,4(r23)
    7000:	00800074 	movhi	r2,1
    7004:	10b5fe04 	addi	r2,r2,-10248
    7008:	11400215 	stw	r5,8(r2)
    700c:	18c0004c 	andi	r3,r3,1
    7010:	e0c6b03a 	or	r3,fp,r3
    7014:	b8c00115 	stw	r3,4(r23)
    7018:	000a3980 	call	a398 <__malloc_unlock>
    701c:	003eeb06 	br	6bcc <_realloc_r+0xd8>
    7020:	20800117 	ldw	r2,4(r4)
    7024:	00ffff04 	movi	r3,-4
    7028:	800f883a 	mov	r7,r16
    702c:	10c4703a 	and	r2,r2,r3
    7030:	98a9883a 	add	r20,r19,r2
    7034:	84000204 	addi	r16,r16,8
    7038:	003ecf06 	br	6b78 <_realloc_r+0x84>
    703c:	900b883a 	mov	r5,r18
    7040:	8009883a 	mov	r4,r16
    7044:	00059880 	call	5988 <memmove>
    7048:	dd000017 	ldw	r20,0(sp)
    704c:	b80f883a 	mov	r7,r23
    7050:	003ec906 	br	6b78 <_realloc_r+0x84>
    7054:	900b883a 	mov	r5,r18
    7058:	8009883a 	mov	r4,r16
    705c:	00059880 	call	5988 <memmove>
    7060:	b80f883a 	mov	r7,r23
    7064:	003ec406 	br	6b78 <_realloc_r+0x84>
    7068:	90c00417 	ldw	r3,16(r18)
    706c:	89400604 	addi	r5,r17,24
    7070:	91000604 	addi	r4,r18,24
    7074:	88c00415 	stw	r3,16(r17)
    7078:	90800517 	ldw	r2,20(r18)
    707c:	88800515 	stw	r2,20(r17)
    7080:	003f6806 	br	6e24 <_realloc_r+0x330>
    7084:	900b883a 	mov	r5,r18
    7088:	8809883a 	mov	r4,r17
    708c:	00059880 	call	5988 <memmove>
    7090:	003fd406 	br	6fe4 <_realloc_r+0x4f0>
    7094:	90c00417 	ldw	r3,16(r18)
    7098:	91000604 	addi	r4,r18,24
    709c:	ba000804 	addi	r8,r23,32
    70a0:	b8c00615 	stw	r3,24(r23)
    70a4:	90800517 	ldw	r2,20(r18)
    70a8:	b8800715 	stw	r2,28(r23)
    70ac:	003f1206 	br	6cf8 <_realloc_r+0x204>
    70b0:	90c00417 	ldw	r3,16(r18)
    70b4:	91000604 	addi	r4,r18,24
    70b8:	ba000804 	addi	r8,r23,32
    70bc:	b8c00615 	stw	r3,24(r23)
    70c0:	90800517 	ldw	r2,20(r18)
    70c4:	b8800715 	stw	r2,28(r23)
    70c8:	003f3206 	br	6d94 <_realloc_r+0x2a0>
    70cc:	90c00417 	ldw	r3,16(r18)
    70d0:	91000604 	addi	r4,r18,24
    70d4:	b9c00804 	addi	r7,r23,32
    70d8:	b8c00615 	stw	r3,24(r23)
    70dc:	90800517 	ldw	r2,20(r18)
    70e0:	b8800715 	stw	r2,28(r23)
    70e4:	003fb906 	br	6fcc <_realloc_r+0x4d8>

000070e8 <__isinfd>:
    70e8:	200d883a 	mov	r6,r4
    70ec:	0109c83a 	sub	r4,zero,r4
    70f0:	2188b03a 	or	r4,r4,r6
    70f4:	2008d7fa 	srli	r4,r4,31
    70f8:	00a00034 	movhi	r2,32768
    70fc:	10bfffc4 	addi	r2,r2,-1
    7100:	1144703a 	and	r2,r2,r5
    7104:	2088b03a 	or	r4,r4,r2
    7108:	009ffc34 	movhi	r2,32752
    710c:	1105c83a 	sub	r2,r2,r4
    7110:	0087c83a 	sub	r3,zero,r2
    7114:	10c4b03a 	or	r2,r2,r3
    7118:	1004d7fa 	srli	r2,r2,31
    711c:	00c00044 	movi	r3,1
    7120:	1885c83a 	sub	r2,r3,r2
    7124:	f800283a 	ret

00007128 <__isnand>:
    7128:	200d883a 	mov	r6,r4
    712c:	0109c83a 	sub	r4,zero,r4
    7130:	2188b03a 	or	r4,r4,r6
    7134:	2008d7fa 	srli	r4,r4,31
    7138:	00a00034 	movhi	r2,32768
    713c:	10bfffc4 	addi	r2,r2,-1
    7140:	1144703a 	and	r2,r2,r5
    7144:	2088b03a 	or	r4,r4,r2
    7148:	009ffc34 	movhi	r2,32752
    714c:	1105c83a 	sub	r2,r2,r4
    7150:	1004d7fa 	srli	r2,r2,31
    7154:	f800283a 	ret

00007158 <_sbrk_r>:
    7158:	defffd04 	addi	sp,sp,-12
    715c:	dc000015 	stw	r16,0(sp)
    7160:	04000074 	movhi	r16,1
    7164:	8402f304 	addi	r16,r16,3020
    7168:	dc400115 	stw	r17,4(sp)
    716c:	80000015 	stw	zero,0(r16)
    7170:	2023883a 	mov	r17,r4
    7174:	2809883a 	mov	r4,r5
    7178:	dfc00215 	stw	ra,8(sp)
    717c:	000a5980 	call	a598 <sbrk>
    7180:	1007883a 	mov	r3,r2
    7184:	00bfffc4 	movi	r2,-1
    7188:	18800626 	beq	r3,r2,71a4 <_sbrk_r+0x4c>
    718c:	1805883a 	mov	r2,r3
    7190:	dfc00217 	ldw	ra,8(sp)
    7194:	dc400117 	ldw	r17,4(sp)
    7198:	dc000017 	ldw	r16,0(sp)
    719c:	dec00304 	addi	sp,sp,12
    71a0:	f800283a 	ret
    71a4:	80800017 	ldw	r2,0(r16)
    71a8:	103ff826 	beq	r2,zero,718c <_sbrk_r+0x34>
    71ac:	88800015 	stw	r2,0(r17)
    71b0:	1805883a 	mov	r2,r3
    71b4:	dfc00217 	ldw	ra,8(sp)
    71b8:	dc400117 	ldw	r17,4(sp)
    71bc:	dc000017 	ldw	r16,0(sp)
    71c0:	dec00304 	addi	sp,sp,12
    71c4:	f800283a 	ret

000071c8 <__sclose>:
    71c8:	2940038f 	ldh	r5,14(r5)
    71cc:	00074fc1 	jmpi	74fc <_close_r>

000071d0 <__sseek>:
    71d0:	defffe04 	addi	sp,sp,-8
    71d4:	dc000015 	stw	r16,0(sp)
    71d8:	2821883a 	mov	r16,r5
    71dc:	2940038f 	ldh	r5,14(r5)
    71e0:	dfc00115 	stw	ra,4(sp)
    71e4:	00077740 	call	7774 <_lseek_r>
    71e8:	1007883a 	mov	r3,r2
    71ec:	00bfffc4 	movi	r2,-1
    71f0:	18800926 	beq	r3,r2,7218 <__sseek+0x48>
    71f4:	8080030b 	ldhu	r2,12(r16)
    71f8:	80c01415 	stw	r3,80(r16)
    71fc:	10840014 	ori	r2,r2,4096
    7200:	8080030d 	sth	r2,12(r16)
    7204:	1805883a 	mov	r2,r3
    7208:	dfc00117 	ldw	ra,4(sp)
    720c:	dc000017 	ldw	r16,0(sp)
    7210:	dec00204 	addi	sp,sp,8
    7214:	f800283a 	ret
    7218:	8080030b 	ldhu	r2,12(r16)
    721c:	10bbffcc 	andi	r2,r2,61439
    7220:	8080030d 	sth	r2,12(r16)
    7224:	1805883a 	mov	r2,r3
    7228:	dfc00117 	ldw	ra,4(sp)
    722c:	dc000017 	ldw	r16,0(sp)
    7230:	dec00204 	addi	sp,sp,8
    7234:	f800283a 	ret

00007238 <__swrite>:
    7238:	2880030b 	ldhu	r2,12(r5)
    723c:	defffb04 	addi	sp,sp,-20
    7240:	dcc00315 	stw	r19,12(sp)
    7244:	1080400c 	andi	r2,r2,256
    7248:	dc800215 	stw	r18,8(sp)
    724c:	dc400115 	stw	r17,4(sp)
    7250:	dc000015 	stw	r16,0(sp)
    7254:	3027883a 	mov	r19,r6
    7258:	3825883a 	mov	r18,r7
    725c:	dfc00415 	stw	ra,16(sp)
    7260:	2821883a 	mov	r16,r5
    7264:	000d883a 	mov	r6,zero
    7268:	01c00084 	movi	r7,2
    726c:	2023883a 	mov	r17,r4
    7270:	10000226 	beq	r2,zero,727c <__swrite+0x44>
    7274:	2940038f 	ldh	r5,14(r5)
    7278:	00077740 	call	7774 <_lseek_r>
    727c:	8080030b 	ldhu	r2,12(r16)
    7280:	8140038f 	ldh	r5,14(r16)
    7284:	8809883a 	mov	r4,r17
    7288:	10bbffcc 	andi	r2,r2,61439
    728c:	980d883a 	mov	r6,r19
    7290:	900f883a 	mov	r7,r18
    7294:	8080030d 	sth	r2,12(r16)
    7298:	dfc00417 	ldw	ra,16(sp)
    729c:	dcc00317 	ldw	r19,12(sp)
    72a0:	dc800217 	ldw	r18,8(sp)
    72a4:	dc400117 	ldw	r17,4(sp)
    72a8:	dc000017 	ldw	r16,0(sp)
    72ac:	dec00504 	addi	sp,sp,20
    72b0:	00073d01 	jmpi	73d0 <_write_r>

000072b4 <__sread>:
    72b4:	defffe04 	addi	sp,sp,-8
    72b8:	dc000015 	stw	r16,0(sp)
    72bc:	2821883a 	mov	r16,r5
    72c0:	2940038f 	ldh	r5,14(r5)
    72c4:	dfc00115 	stw	ra,4(sp)
    72c8:	00077ec0 	call	77ec <_read_r>
    72cc:	1007883a 	mov	r3,r2
    72d0:	10000816 	blt	r2,zero,72f4 <__sread+0x40>
    72d4:	80801417 	ldw	r2,80(r16)
    72d8:	10c5883a 	add	r2,r2,r3
    72dc:	80801415 	stw	r2,80(r16)
    72e0:	1805883a 	mov	r2,r3
    72e4:	dfc00117 	ldw	ra,4(sp)
    72e8:	dc000017 	ldw	r16,0(sp)
    72ec:	dec00204 	addi	sp,sp,8
    72f0:	f800283a 	ret
    72f4:	8080030b 	ldhu	r2,12(r16)
    72f8:	10bbffcc 	andi	r2,r2,61439
    72fc:	8080030d 	sth	r2,12(r16)
    7300:	1805883a 	mov	r2,r3
    7304:	dfc00117 	ldw	ra,4(sp)
    7308:	dc000017 	ldw	r16,0(sp)
    730c:	dec00204 	addi	sp,sp,8
    7310:	f800283a 	ret

00007314 <strcmp>:
    7314:	2144b03a 	or	r2,r4,r5
    7318:	108000cc 	andi	r2,r2,3
    731c:	10001d1e 	bne	r2,zero,7394 <strcmp+0x80>
    7320:	200f883a 	mov	r7,r4
    7324:	28800017 	ldw	r2,0(r5)
    7328:	21000017 	ldw	r4,0(r4)
    732c:	280d883a 	mov	r6,r5
    7330:	2080161e 	bne	r4,r2,738c <strcmp+0x78>
    7334:	023fbff4 	movhi	r8,65279
    7338:	423fbfc4 	addi	r8,r8,-257
    733c:	2207883a 	add	r3,r4,r8
    7340:	01602074 	movhi	r5,32897
    7344:	29602004 	addi	r5,r5,-32640
    7348:	1946703a 	and	r3,r3,r5
    734c:	0104303a 	nor	r2,zero,r4
    7350:	10c4703a 	and	r2,r2,r3
    7354:	10001c1e 	bne	r2,zero,73c8 <strcmp+0xb4>
    7358:	4013883a 	mov	r9,r8
    735c:	2811883a 	mov	r8,r5
    7360:	00000106 	br	7368 <strcmp+0x54>
    7364:	1800181e 	bne	r3,zero,73c8 <strcmp+0xb4>
    7368:	39c00104 	addi	r7,r7,4
    736c:	39000017 	ldw	r4,0(r7)
    7370:	31800104 	addi	r6,r6,4
    7374:	31400017 	ldw	r5,0(r6)
    7378:	2245883a 	add	r2,r4,r9
    737c:	1204703a 	and	r2,r2,r8
    7380:	0106303a 	nor	r3,zero,r4
    7384:	1886703a 	and	r3,r3,r2
    7388:	217ff626 	beq	r4,r5,7364 <strcmp+0x50>
    738c:	3809883a 	mov	r4,r7
    7390:	300b883a 	mov	r5,r6
    7394:	20c00007 	ldb	r3,0(r4)
    7398:	1800051e 	bne	r3,zero,73b0 <strcmp+0x9c>
    739c:	00000606 	br	73b8 <strcmp+0xa4>
    73a0:	21000044 	addi	r4,r4,1
    73a4:	20c00007 	ldb	r3,0(r4)
    73a8:	29400044 	addi	r5,r5,1
    73ac:	18000226 	beq	r3,zero,73b8 <strcmp+0xa4>
    73b0:	28800007 	ldb	r2,0(r5)
    73b4:	18bffa26 	beq	r3,r2,73a0 <strcmp+0x8c>
    73b8:	20c00003 	ldbu	r3,0(r4)
    73bc:	28800003 	ldbu	r2,0(r5)
    73c0:	1885c83a 	sub	r2,r3,r2
    73c4:	f800283a 	ret
    73c8:	0005883a 	mov	r2,zero
    73cc:	f800283a 	ret

000073d0 <_write_r>:
    73d0:	defffd04 	addi	sp,sp,-12
    73d4:	dc000015 	stw	r16,0(sp)
    73d8:	04000074 	movhi	r16,1
    73dc:	8402f304 	addi	r16,r16,3020
    73e0:	dc400115 	stw	r17,4(sp)
    73e4:	80000015 	stw	zero,0(r16)
    73e8:	2023883a 	mov	r17,r4
    73ec:	2809883a 	mov	r4,r5
    73f0:	300b883a 	mov	r5,r6
    73f4:	380d883a 	mov	r6,r7
    73f8:	dfc00215 	stw	ra,8(sp)
    73fc:	000a6540 	call	a654 <write>
    7400:	1007883a 	mov	r3,r2
    7404:	00bfffc4 	movi	r2,-1
    7408:	18800626 	beq	r3,r2,7424 <_write_r+0x54>
    740c:	1805883a 	mov	r2,r3
    7410:	dfc00217 	ldw	ra,8(sp)
    7414:	dc400117 	ldw	r17,4(sp)
    7418:	dc000017 	ldw	r16,0(sp)
    741c:	dec00304 	addi	sp,sp,12
    7420:	f800283a 	ret
    7424:	80800017 	ldw	r2,0(r16)
    7428:	103ff826 	beq	r2,zero,740c <_write_r+0x3c>
    742c:	88800015 	stw	r2,0(r17)
    7430:	1805883a 	mov	r2,r3
    7434:	dfc00217 	ldw	ra,8(sp)
    7438:	dc400117 	ldw	r17,4(sp)
    743c:	dc000017 	ldw	r16,0(sp)
    7440:	dec00304 	addi	sp,sp,12
    7444:	f800283a 	ret

00007448 <_calloc_r>:
    7448:	298b383a 	mul	r5,r5,r6
    744c:	defffe04 	addi	sp,sp,-8
    7450:	dc000015 	stw	r16,0(sp)
    7454:	dfc00115 	stw	ra,4(sp)
    7458:	00050c40 	call	50c4 <_malloc_r>
    745c:	1021883a 	mov	r16,r2
    7460:	01c00904 	movi	r7,36
    7464:	10000d26 	beq	r2,zero,749c <_calloc_r+0x54>
    7468:	10ffff17 	ldw	r3,-4(r2)
    746c:	1009883a 	mov	r4,r2
    7470:	00bfff04 	movi	r2,-4
    7474:	1886703a 	and	r3,r3,r2
    7478:	1887883a 	add	r3,r3,r2
    747c:	180d883a 	mov	r6,r3
    7480:	000b883a 	mov	r5,zero
    7484:	38c01736 	bltu	r7,r3,74e4 <_calloc_r+0x9c>
    7488:	008004c4 	movi	r2,19
    748c:	10c00836 	bltu	r2,r3,74b0 <_calloc_r+0x68>
    7490:	20000215 	stw	zero,8(r4)
    7494:	20000015 	stw	zero,0(r4)
    7498:	20000115 	stw	zero,4(r4)
    749c:	8005883a 	mov	r2,r16
    74a0:	dfc00117 	ldw	ra,4(sp)
    74a4:	dc000017 	ldw	r16,0(sp)
    74a8:	dec00204 	addi	sp,sp,8
    74ac:	f800283a 	ret
    74b0:	008006c4 	movi	r2,27
    74b4:	80000015 	stw	zero,0(r16)
    74b8:	80000115 	stw	zero,4(r16)
    74bc:	81000204 	addi	r4,r16,8
    74c0:	10fff32e 	bgeu	r2,r3,7490 <_calloc_r+0x48>
    74c4:	80000215 	stw	zero,8(r16)
    74c8:	80000315 	stw	zero,12(r16)
    74cc:	81000404 	addi	r4,r16,16
    74d0:	19ffef1e 	bne	r3,r7,7490 <_calloc_r+0x48>
    74d4:	81000604 	addi	r4,r16,24
    74d8:	80000415 	stw	zero,16(r16)
    74dc:	80000515 	stw	zero,20(r16)
    74e0:	003feb06 	br	7490 <_calloc_r+0x48>
    74e4:	0005a680 	call	5a68 <memset>
    74e8:	8005883a 	mov	r2,r16
    74ec:	dfc00117 	ldw	ra,4(sp)
    74f0:	dc000017 	ldw	r16,0(sp)
    74f4:	dec00204 	addi	sp,sp,8
    74f8:	f800283a 	ret

000074fc <_close_r>:
    74fc:	defffd04 	addi	sp,sp,-12
    7500:	dc000015 	stw	r16,0(sp)
    7504:	04000074 	movhi	r16,1
    7508:	8402f304 	addi	r16,r16,3020
    750c:	dc400115 	stw	r17,4(sp)
    7510:	80000015 	stw	zero,0(r16)
    7514:	2023883a 	mov	r17,r4
    7518:	2809883a 	mov	r4,r5
    751c:	dfc00215 	stw	ra,8(sp)
    7520:	0009c940 	call	9c94 <close>
    7524:	1007883a 	mov	r3,r2
    7528:	00bfffc4 	movi	r2,-1
    752c:	18800626 	beq	r3,r2,7548 <_close_r+0x4c>
    7530:	1805883a 	mov	r2,r3
    7534:	dfc00217 	ldw	ra,8(sp)
    7538:	dc400117 	ldw	r17,4(sp)
    753c:	dc000017 	ldw	r16,0(sp)
    7540:	dec00304 	addi	sp,sp,12
    7544:	f800283a 	ret
    7548:	80800017 	ldw	r2,0(r16)
    754c:	103ff826 	beq	r2,zero,7530 <_close_r+0x34>
    7550:	88800015 	stw	r2,0(r17)
    7554:	1805883a 	mov	r2,r3
    7558:	dfc00217 	ldw	ra,8(sp)
    755c:	dc400117 	ldw	r17,4(sp)
    7560:	dc000017 	ldw	r16,0(sp)
    7564:	dec00304 	addi	sp,sp,12
    7568:	f800283a 	ret

0000756c <_fclose_r>:
    756c:	defffc04 	addi	sp,sp,-16
    7570:	dc400115 	stw	r17,4(sp)
    7574:	dc000015 	stw	r16,0(sp)
    7578:	dfc00315 	stw	ra,12(sp)
    757c:	dc800215 	stw	r18,8(sp)
    7580:	2821883a 	mov	r16,r5
    7584:	2023883a 	mov	r17,r4
    7588:	28002926 	beq	r5,zero,7630 <_fclose_r+0xc4>
    758c:	00041a80 	call	41a8 <__sfp_lock_acquire>
    7590:	88000226 	beq	r17,zero,759c <_fclose_r+0x30>
    7594:	88800e17 	ldw	r2,56(r17)
    7598:	10002d26 	beq	r2,zero,7650 <_fclose_r+0xe4>
    759c:	8080030f 	ldh	r2,12(r16)
    75a0:	10002226 	beq	r2,zero,762c <_fclose_r+0xc0>
    75a4:	8809883a 	mov	r4,r17
    75a8:	800b883a 	mov	r5,r16
    75ac:	0003f200 	call	3f20 <_fflush_r>
    75b0:	1025883a 	mov	r18,r2
    75b4:	80800b17 	ldw	r2,44(r16)
    75b8:	10000426 	beq	r2,zero,75cc <_fclose_r+0x60>
    75bc:	81400717 	ldw	r5,28(r16)
    75c0:	8809883a 	mov	r4,r17
    75c4:	103ee83a 	callr	r2
    75c8:	10002a16 	blt	r2,zero,7674 <_fclose_r+0x108>
    75cc:	8080030b 	ldhu	r2,12(r16)
    75d0:	1080200c 	andi	r2,r2,128
    75d4:	1000231e 	bne	r2,zero,7664 <_fclose_r+0xf8>
    75d8:	81400c17 	ldw	r5,48(r16)
    75dc:	28000526 	beq	r5,zero,75f4 <_fclose_r+0x88>
    75e0:	80801004 	addi	r2,r16,64
    75e4:	28800226 	beq	r5,r2,75f0 <_fclose_r+0x84>
    75e8:	8809883a 	mov	r4,r17
    75ec:	000453c0 	call	453c <_free_r>
    75f0:	80000c15 	stw	zero,48(r16)
    75f4:	81401117 	ldw	r5,68(r16)
    75f8:	28000326 	beq	r5,zero,7608 <_fclose_r+0x9c>
    75fc:	8809883a 	mov	r4,r17
    7600:	000453c0 	call	453c <_free_r>
    7604:	80001115 	stw	zero,68(r16)
    7608:	8000030d 	sth	zero,12(r16)
    760c:	00041ac0 	call	41ac <__sfp_lock_release>
    7610:	9005883a 	mov	r2,r18
    7614:	dfc00317 	ldw	ra,12(sp)
    7618:	dc800217 	ldw	r18,8(sp)
    761c:	dc400117 	ldw	r17,4(sp)
    7620:	dc000017 	ldw	r16,0(sp)
    7624:	dec00404 	addi	sp,sp,16
    7628:	f800283a 	ret
    762c:	00041ac0 	call	41ac <__sfp_lock_release>
    7630:	0025883a 	mov	r18,zero
    7634:	9005883a 	mov	r2,r18
    7638:	dfc00317 	ldw	ra,12(sp)
    763c:	dc800217 	ldw	r18,8(sp)
    7640:	dc400117 	ldw	r17,4(sp)
    7644:	dc000017 	ldw	r16,0(sp)
    7648:	dec00404 	addi	sp,sp,16
    764c:	f800283a 	ret
    7650:	8809883a 	mov	r4,r17
    7654:	00041b80 	call	41b8 <__sinit>
    7658:	8080030f 	ldh	r2,12(r16)
    765c:	103fd11e 	bne	r2,zero,75a4 <_fclose_r+0x38>
    7660:	003ff206 	br	762c <_fclose_r+0xc0>
    7664:	81400417 	ldw	r5,16(r16)
    7668:	8809883a 	mov	r4,r17
    766c:	000453c0 	call	453c <_free_r>
    7670:	003fd906 	br	75d8 <_fclose_r+0x6c>
    7674:	04bfffc4 	movi	r18,-1
    7678:	003fd406 	br	75cc <_fclose_r+0x60>

0000767c <fclose>:
    767c:	00800074 	movhi	r2,1
    7680:	10bbe404 	addi	r2,r2,-4208
    7684:	200b883a 	mov	r5,r4
    7688:	11000017 	ldw	r4,0(r2)
    768c:	000756c1 	jmpi	756c <_fclose_r>

00007690 <_fstat_r>:
    7690:	defffd04 	addi	sp,sp,-12
    7694:	dc000015 	stw	r16,0(sp)
    7698:	04000074 	movhi	r16,1
    769c:	8402f304 	addi	r16,r16,3020
    76a0:	dc400115 	stw	r17,4(sp)
    76a4:	80000015 	stw	zero,0(r16)
    76a8:	2023883a 	mov	r17,r4
    76ac:	2809883a 	mov	r4,r5
    76b0:	300b883a 	mov	r5,r6
    76b4:	dfc00215 	stw	ra,8(sp)
    76b8:	0009e7c0 	call	9e7c <fstat>
    76bc:	1007883a 	mov	r3,r2
    76c0:	00bfffc4 	movi	r2,-1
    76c4:	18800626 	beq	r3,r2,76e0 <_fstat_r+0x50>
    76c8:	1805883a 	mov	r2,r3
    76cc:	dfc00217 	ldw	ra,8(sp)
    76d0:	dc400117 	ldw	r17,4(sp)
    76d4:	dc000017 	ldw	r16,0(sp)
    76d8:	dec00304 	addi	sp,sp,12
    76dc:	f800283a 	ret
    76e0:	80800017 	ldw	r2,0(r16)
    76e4:	103ff826 	beq	r2,zero,76c8 <_fstat_r+0x38>
    76e8:	88800015 	stw	r2,0(r17)
    76ec:	1805883a 	mov	r2,r3
    76f0:	dfc00217 	ldw	ra,8(sp)
    76f4:	dc400117 	ldw	r17,4(sp)
    76f8:	dc000017 	ldw	r16,0(sp)
    76fc:	dec00304 	addi	sp,sp,12
    7700:	f800283a 	ret

00007704 <_isatty_r>:
    7704:	defffd04 	addi	sp,sp,-12
    7708:	dc000015 	stw	r16,0(sp)
    770c:	04000074 	movhi	r16,1
    7710:	8402f304 	addi	r16,r16,3020
    7714:	dc400115 	stw	r17,4(sp)
    7718:	80000015 	stw	zero,0(r16)
    771c:	2023883a 	mov	r17,r4
    7720:	2809883a 	mov	r4,r5
    7724:	dfc00215 	stw	ra,8(sp)
    7728:	0009fb00 	call	9fb0 <isatty>
    772c:	1007883a 	mov	r3,r2
    7730:	00bfffc4 	movi	r2,-1
    7734:	18800626 	beq	r3,r2,7750 <_isatty_r+0x4c>
    7738:	1805883a 	mov	r2,r3
    773c:	dfc00217 	ldw	ra,8(sp)
    7740:	dc400117 	ldw	r17,4(sp)
    7744:	dc000017 	ldw	r16,0(sp)
    7748:	dec00304 	addi	sp,sp,12
    774c:	f800283a 	ret
    7750:	80800017 	ldw	r2,0(r16)
    7754:	103ff826 	beq	r2,zero,7738 <_isatty_r+0x34>
    7758:	88800015 	stw	r2,0(r17)
    775c:	1805883a 	mov	r2,r3
    7760:	dfc00217 	ldw	ra,8(sp)
    7764:	dc400117 	ldw	r17,4(sp)
    7768:	dc000017 	ldw	r16,0(sp)
    776c:	dec00304 	addi	sp,sp,12
    7770:	f800283a 	ret

00007774 <_lseek_r>:
    7774:	defffd04 	addi	sp,sp,-12
    7778:	dc000015 	stw	r16,0(sp)
    777c:	04000074 	movhi	r16,1
    7780:	8402f304 	addi	r16,r16,3020
    7784:	dc400115 	stw	r17,4(sp)
    7788:	80000015 	stw	zero,0(r16)
    778c:	2023883a 	mov	r17,r4
    7790:	2809883a 	mov	r4,r5
    7794:	300b883a 	mov	r5,r6
    7798:	380d883a 	mov	r6,r7
    779c:	dfc00215 	stw	ra,8(sp)
    77a0:	000a1bc0 	call	a1bc <lseek>
    77a4:	1007883a 	mov	r3,r2
    77a8:	00bfffc4 	movi	r2,-1
    77ac:	18800626 	beq	r3,r2,77c8 <_lseek_r+0x54>
    77b0:	1805883a 	mov	r2,r3
    77b4:	dfc00217 	ldw	ra,8(sp)
    77b8:	dc400117 	ldw	r17,4(sp)
    77bc:	dc000017 	ldw	r16,0(sp)
    77c0:	dec00304 	addi	sp,sp,12
    77c4:	f800283a 	ret
    77c8:	80800017 	ldw	r2,0(r16)
    77cc:	103ff826 	beq	r2,zero,77b0 <_lseek_r+0x3c>
    77d0:	88800015 	stw	r2,0(r17)
    77d4:	1805883a 	mov	r2,r3
    77d8:	dfc00217 	ldw	ra,8(sp)
    77dc:	dc400117 	ldw	r17,4(sp)
    77e0:	dc000017 	ldw	r16,0(sp)
    77e4:	dec00304 	addi	sp,sp,12
    77e8:	f800283a 	ret

000077ec <_read_r>:
    77ec:	defffd04 	addi	sp,sp,-12
    77f0:	dc000015 	stw	r16,0(sp)
    77f4:	04000074 	movhi	r16,1
    77f8:	8402f304 	addi	r16,r16,3020
    77fc:	dc400115 	stw	r17,4(sp)
    7800:	80000015 	stw	zero,0(r16)
    7804:	2023883a 	mov	r17,r4
    7808:	2809883a 	mov	r4,r5
    780c:	300b883a 	mov	r5,r6
    7810:	380d883a 	mov	r6,r7
    7814:	dfc00215 	stw	ra,8(sp)
    7818:	000a3b80 	call	a3b8 <read>
    781c:	1007883a 	mov	r3,r2
    7820:	00bfffc4 	movi	r2,-1
    7824:	18800626 	beq	r3,r2,7840 <_read_r+0x54>
    7828:	1805883a 	mov	r2,r3
    782c:	dfc00217 	ldw	ra,8(sp)
    7830:	dc400117 	ldw	r17,4(sp)
    7834:	dc000017 	ldw	r16,0(sp)
    7838:	dec00304 	addi	sp,sp,12
    783c:	f800283a 	ret
    7840:	80800017 	ldw	r2,0(r16)
    7844:	103ff826 	beq	r2,zero,7828 <_read_r+0x3c>
    7848:	88800015 	stw	r2,0(r17)
    784c:	1805883a 	mov	r2,r3
    7850:	dfc00217 	ldw	ra,8(sp)
    7854:	dc400117 	ldw	r17,4(sp)
    7858:	dc000017 	ldw	r16,0(sp)
    785c:	dec00304 	addi	sp,sp,12
    7860:	f800283a 	ret

00007864 <__udivdi3>:
    7864:	defff004 	addi	sp,sp,-64
    7868:	2005883a 	mov	r2,r4
    786c:	3011883a 	mov	r8,r6
    7870:	df000e15 	stw	fp,56(sp)
    7874:	dd000a15 	stw	r20,40(sp)
    7878:	dc000615 	stw	r16,24(sp)
    787c:	dfc00f15 	stw	ra,60(sp)
    7880:	ddc00d15 	stw	r23,52(sp)
    7884:	dd800c15 	stw	r22,48(sp)
    7888:	dd400b15 	stw	r21,44(sp)
    788c:	dcc00915 	stw	r19,36(sp)
    7890:	dc800815 	stw	r18,32(sp)
    7894:	dc400715 	stw	r17,28(sp)
    7898:	4021883a 	mov	r16,r8
    789c:	1039883a 	mov	fp,r2
    78a0:	2829883a 	mov	r20,r5
    78a4:	38003b1e 	bne	r7,zero,7994 <__udivdi3+0x130>
    78a8:	2a005c36 	bltu	r5,r8,7a1c <__udivdi3+0x1b8>
    78ac:	4000a626 	beq	r8,zero,7b48 <__udivdi3+0x2e4>
    78b0:	00bfffd4 	movui	r2,65535
    78b4:	14009e36 	bltu	r2,r16,7b30 <__udivdi3+0x2cc>
    78b8:	00803fc4 	movi	r2,255
    78bc:	14013d36 	bltu	r2,r16,7db4 <__udivdi3+0x550>
    78c0:	000b883a 	mov	r5,zero
    78c4:	0005883a 	mov	r2,zero
    78c8:	8084d83a 	srl	r2,r16,r2
    78cc:	01000074 	movhi	r4,1
    78d0:	2134a604 	addi	r4,r4,-11624
    78d4:	01800804 	movi	r6,32
    78d8:	1105883a 	add	r2,r2,r4
    78dc:	10c00003 	ldbu	r3,0(r2)
    78e0:	28c7883a 	add	r3,r5,r3
    78e4:	30edc83a 	sub	r22,r6,r3
    78e8:	b000ee1e 	bne	r22,zero,7ca4 <__udivdi3+0x440>
    78ec:	802ad43a 	srli	r21,r16,16
    78f0:	00800044 	movi	r2,1
    78f4:	a423c83a 	sub	r17,r20,r16
    78f8:	85ffffcc 	andi	r23,r16,65535
    78fc:	d8800315 	stw	r2,12(sp)
    7900:	8809883a 	mov	r4,r17
    7904:	a80b883a 	mov	r5,r21
    7908:	00096580 	call	9658 <__udivsi3>
    790c:	8809883a 	mov	r4,r17
    7910:	a80b883a 	mov	r5,r21
    7914:	102d883a 	mov	r22,r2
    7918:	00096600 	call	9660 <__umodsi3>
    791c:	1004943a 	slli	r2,r2,16
    7920:	e006d43a 	srli	r3,fp,16
    7924:	bda3383a 	mul	r17,r23,r22
    7928:	10c4b03a 	or	r2,r2,r3
    792c:	1440042e 	bgeu	r2,r17,7940 <__udivdi3+0xdc>
    7930:	1405883a 	add	r2,r2,r16
    7934:	b5bfffc4 	addi	r22,r22,-1
    7938:	14000136 	bltu	r2,r16,7940 <__udivdi3+0xdc>
    793c:	14413d36 	bltu	r2,r17,7e34 <__udivdi3+0x5d0>
    7940:	1463c83a 	sub	r17,r2,r17
    7944:	8809883a 	mov	r4,r17
    7948:	a80b883a 	mov	r5,r21
    794c:	00096580 	call	9658 <__udivsi3>
    7950:	8809883a 	mov	r4,r17
    7954:	a80b883a 	mov	r5,r21
    7958:	1029883a 	mov	r20,r2
    795c:	00096600 	call	9660 <__umodsi3>
    7960:	1004943a 	slli	r2,r2,16
    7964:	bd09383a 	mul	r4,r23,r20
    7968:	e0ffffcc 	andi	r3,fp,65535
    796c:	10c4b03a 	or	r2,r2,r3
    7970:	1100042e 	bgeu	r2,r4,7984 <__udivdi3+0x120>
    7974:	8085883a 	add	r2,r16,r2
    7978:	a53fffc4 	addi	r20,r20,-1
    797c:	14000136 	bltu	r2,r16,7984 <__udivdi3+0x120>
    7980:	11012036 	bltu	r2,r4,7e04 <__udivdi3+0x5a0>
    7984:	b004943a 	slli	r2,r22,16
    7988:	d9000317 	ldw	r4,12(sp)
    798c:	a084b03a 	or	r2,r20,r2
    7990:	00001506 	br	79e8 <__udivdi3+0x184>
    7994:	380d883a 	mov	r6,r7
    7998:	29c06236 	bltu	r5,r7,7b24 <__udivdi3+0x2c0>
    799c:	00bfffd4 	movui	r2,65535
    79a0:	11c05a36 	bltu	r2,r7,7b0c <__udivdi3+0x2a8>
    79a4:	00803fc4 	movi	r2,255
    79a8:	11c0fc36 	bltu	r2,r7,7d9c <__udivdi3+0x538>
    79ac:	000b883a 	mov	r5,zero
    79b0:	0005883a 	mov	r2,zero
    79b4:	3084d83a 	srl	r2,r6,r2
    79b8:	01000074 	movhi	r4,1
    79bc:	2134a604 	addi	r4,r4,-11624
    79c0:	01c00804 	movi	r7,32
    79c4:	1105883a 	add	r2,r2,r4
    79c8:	10c00003 	ldbu	r3,0(r2)
    79cc:	28c7883a 	add	r3,r5,r3
    79d0:	38efc83a 	sub	r23,r7,r3
    79d4:	b800691e 	bne	r23,zero,7b7c <__udivdi3+0x318>
    79d8:	35000136 	bltu	r6,r20,79e0 <__udivdi3+0x17c>
    79dc:	e4005136 	bltu	fp,r16,7b24 <__udivdi3+0x2c0>
    79e0:	00800044 	movi	r2,1
    79e4:	0009883a 	mov	r4,zero
    79e8:	2007883a 	mov	r3,r4
    79ec:	dfc00f17 	ldw	ra,60(sp)
    79f0:	df000e17 	ldw	fp,56(sp)
    79f4:	ddc00d17 	ldw	r23,52(sp)
    79f8:	dd800c17 	ldw	r22,48(sp)
    79fc:	dd400b17 	ldw	r21,44(sp)
    7a00:	dd000a17 	ldw	r20,40(sp)
    7a04:	dcc00917 	ldw	r19,36(sp)
    7a08:	dc800817 	ldw	r18,32(sp)
    7a0c:	dc400717 	ldw	r17,28(sp)
    7a10:	dc000617 	ldw	r16,24(sp)
    7a14:	dec01004 	addi	sp,sp,64
    7a18:	f800283a 	ret
    7a1c:	00bfffd4 	movui	r2,65535
    7a20:	12005036 	bltu	r2,r8,7b64 <__udivdi3+0x300>
    7a24:	00803fc4 	movi	r2,255
    7a28:	1200e836 	bltu	r2,r8,7dcc <__udivdi3+0x568>
    7a2c:	000b883a 	mov	r5,zero
    7a30:	0005883a 	mov	r2,zero
    7a34:	8084d83a 	srl	r2,r16,r2
    7a38:	01000074 	movhi	r4,1
    7a3c:	2134a604 	addi	r4,r4,-11624
    7a40:	01800804 	movi	r6,32
    7a44:	1105883a 	add	r2,r2,r4
    7a48:	10c00003 	ldbu	r3,0(r2)
    7a4c:	28c7883a 	add	r3,r5,r3
    7a50:	30cbc83a 	sub	r5,r6,r3
    7a54:	28000626 	beq	r5,zero,7a70 <__udivdi3+0x20c>
    7a58:	3145c83a 	sub	r2,r6,r5
    7a5c:	e084d83a 	srl	r2,fp,r2
    7a60:	a146983a 	sll	r3,r20,r5
    7a64:	e178983a 	sll	fp,fp,r5
    7a68:	8160983a 	sll	r16,r16,r5
    7a6c:	18a8b03a 	or	r20,r3,r2
    7a70:	802ad43a 	srli	r21,r16,16
    7a74:	a009883a 	mov	r4,r20
    7a78:	85ffffcc 	andi	r23,r16,65535
    7a7c:	a80b883a 	mov	r5,r21
    7a80:	00096580 	call	9658 <__udivsi3>
    7a84:	a009883a 	mov	r4,r20
    7a88:	a80b883a 	mov	r5,r21
    7a8c:	102d883a 	mov	r22,r2
    7a90:	00096600 	call	9660 <__umodsi3>
    7a94:	1004943a 	slli	r2,r2,16
    7a98:	e006d43a 	srli	r3,fp,16
    7a9c:	bda3383a 	mul	r17,r23,r22
    7aa0:	10c4b03a 	or	r2,r2,r3
    7aa4:	1440042e 	bgeu	r2,r17,7ab8 <__udivdi3+0x254>
    7aa8:	1405883a 	add	r2,r2,r16
    7aac:	b5bfffc4 	addi	r22,r22,-1
    7ab0:	14000136 	bltu	r2,r16,7ab8 <__udivdi3+0x254>
    7ab4:	1440d536 	bltu	r2,r17,7e0c <__udivdi3+0x5a8>
    7ab8:	1463c83a 	sub	r17,r2,r17
    7abc:	8809883a 	mov	r4,r17
    7ac0:	a80b883a 	mov	r5,r21
    7ac4:	00096580 	call	9658 <__udivsi3>
    7ac8:	8809883a 	mov	r4,r17
    7acc:	a80b883a 	mov	r5,r21
    7ad0:	1029883a 	mov	r20,r2
    7ad4:	00096600 	call	9660 <__umodsi3>
    7ad8:	1004943a 	slli	r2,r2,16
    7adc:	bd09383a 	mul	r4,r23,r20
    7ae0:	e0ffffcc 	andi	r3,fp,65535
    7ae4:	10c4b03a 	or	r2,r2,r3
    7ae8:	1100042e 	bgeu	r2,r4,7afc <__udivdi3+0x298>
    7aec:	8085883a 	add	r2,r16,r2
    7af0:	a53fffc4 	addi	r20,r20,-1
    7af4:	14000136 	bltu	r2,r16,7afc <__udivdi3+0x298>
    7af8:	1100c736 	bltu	r2,r4,7e18 <__udivdi3+0x5b4>
    7afc:	b004943a 	slli	r2,r22,16
    7b00:	0009883a 	mov	r4,zero
    7b04:	a084b03a 	or	r2,r20,r2
    7b08:	003fb706 	br	79e8 <__udivdi3+0x184>
    7b0c:	00804034 	movhi	r2,256
    7b10:	10bfffc4 	addi	r2,r2,-1
    7b14:	11c0a436 	bltu	r2,r7,7da8 <__udivdi3+0x544>
    7b18:	01400404 	movi	r5,16
    7b1c:	2805883a 	mov	r2,r5
    7b20:	003fa406 	br	79b4 <__udivdi3+0x150>
    7b24:	0005883a 	mov	r2,zero
    7b28:	0009883a 	mov	r4,zero
    7b2c:	003fae06 	br	79e8 <__udivdi3+0x184>
    7b30:	00804034 	movhi	r2,256
    7b34:	10bfffc4 	addi	r2,r2,-1
    7b38:	1400a136 	bltu	r2,r16,7dc0 <__udivdi3+0x55c>
    7b3c:	01400404 	movi	r5,16
    7b40:	2805883a 	mov	r2,r5
    7b44:	003f6006 	br	78c8 <__udivdi3+0x64>
    7b48:	01000044 	movi	r4,1
    7b4c:	000b883a 	mov	r5,zero
    7b50:	00096580 	call	9658 <__udivsi3>
    7b54:	1021883a 	mov	r16,r2
    7b58:	00bfffd4 	movui	r2,65535
    7b5c:	143ff436 	bltu	r2,r16,7b30 <__udivdi3+0x2cc>
    7b60:	003f5506 	br	78b8 <__udivdi3+0x54>
    7b64:	00804034 	movhi	r2,256
    7b68:	10bfffc4 	addi	r2,r2,-1
    7b6c:	12009a36 	bltu	r2,r8,7dd8 <__udivdi3+0x574>
    7b70:	01400404 	movi	r5,16
    7b74:	2805883a 	mov	r2,r5
    7b78:	003fae06 	br	7a34 <__udivdi3+0x1d0>
    7b7c:	3dc5c83a 	sub	r2,r7,r23
    7b80:	35c8983a 	sll	r4,r6,r23
    7b84:	8086d83a 	srl	r3,r16,r2
    7b88:	a0a2d83a 	srl	r17,r20,r2
    7b8c:	e084d83a 	srl	r2,fp,r2
    7b90:	20eab03a 	or	r21,r4,r3
    7b94:	a82cd43a 	srli	r22,r21,16
    7b98:	a5c6983a 	sll	r3,r20,r23
    7b9c:	8809883a 	mov	r4,r17
    7ba0:	b00b883a 	mov	r5,r22
    7ba4:	1886b03a 	or	r3,r3,r2
    7ba8:	d8c00215 	stw	r3,8(sp)
    7bac:	00096580 	call	9658 <__udivsi3>
    7bb0:	8809883a 	mov	r4,r17
    7bb4:	b00b883a 	mov	r5,r22
    7bb8:	1029883a 	mov	r20,r2
    7bbc:	00096600 	call	9660 <__umodsi3>
    7bc0:	a8ffffcc 	andi	r3,r21,65535
    7bc4:	d8c00515 	stw	r3,20(sp)
    7bc8:	d9000217 	ldw	r4,8(sp)
    7bcc:	d9400517 	ldw	r5,20(sp)
    7bd0:	1004943a 	slli	r2,r2,16
    7bd4:	2006d43a 	srli	r3,r4,16
    7bd8:	85e0983a 	sll	r16,r16,r23
    7bdc:	2d23383a 	mul	r17,r5,r20
    7be0:	10c4b03a 	or	r2,r2,r3
    7be4:	dc000015 	stw	r16,0(sp)
    7be8:	1440032e 	bgeu	r2,r17,7bf8 <__udivdi3+0x394>
    7bec:	1545883a 	add	r2,r2,r21
    7bf0:	a53fffc4 	addi	r20,r20,-1
    7bf4:	15407f2e 	bgeu	r2,r21,7df4 <__udivdi3+0x590>
    7bf8:	1463c83a 	sub	r17,r2,r17
    7bfc:	8809883a 	mov	r4,r17
    7c00:	b00b883a 	mov	r5,r22
    7c04:	00096580 	call	9658 <__udivsi3>
    7c08:	8809883a 	mov	r4,r17
    7c0c:	b00b883a 	mov	r5,r22
    7c10:	1021883a 	mov	r16,r2
    7c14:	00096600 	call	9660 <__umodsi3>
    7c18:	d8c00517 	ldw	r3,20(sp)
    7c1c:	d9000217 	ldw	r4,8(sp)
    7c20:	1004943a 	slli	r2,r2,16
    7c24:	1c0f383a 	mul	r7,r3,r16
    7c28:	20ffffcc 	andi	r3,r4,65535
    7c2c:	10e2b03a 	or	r17,r2,r3
    7c30:	89c0032e 	bgeu	r17,r7,7c40 <__udivdi3+0x3dc>
    7c34:	8d63883a 	add	r17,r17,r21
    7c38:	843fffc4 	addi	r16,r16,-1
    7c3c:	8d40692e 	bgeu	r17,r21,7de4 <__udivdi3+0x580>
    7c40:	a008943a 	slli	r4,r20,16
    7c44:	d9400017 	ldw	r5,0(sp)
    7c48:	89e3c83a 	sub	r17,r17,r7
    7c4c:	8110b03a 	or	r8,r16,r4
    7c50:	280cd43a 	srli	r6,r5,16
    7c54:	28ffffcc 	andi	r3,r5,65535
    7c58:	40bfffcc 	andi	r2,r8,65535
    7c5c:	400ad43a 	srli	r5,r8,16
    7c60:	10d3383a 	mul	r9,r2,r3
    7c64:	1185383a 	mul	r2,r2,r6
    7c68:	28c7383a 	mul	r3,r5,r3
    7c6c:	4808d43a 	srli	r4,r9,16
    7c70:	298b383a 	mul	r5,r5,r6
    7c74:	10c5883a 	add	r2,r2,r3
    7c78:	2089883a 	add	r4,r4,r2
    7c7c:	20c0022e 	bgeu	r4,r3,7c88 <__udivdi3+0x424>
    7c80:	00800074 	movhi	r2,1
    7c84:	288b883a 	add	r5,r5,r2
    7c88:	2004d43a 	srli	r2,r4,16
    7c8c:	288b883a 	add	r5,r5,r2
    7c90:	89403f36 	bltu	r17,r5,7d90 <__udivdi3+0x52c>
    7c94:	89403926 	beq	r17,r5,7d7c <__udivdi3+0x518>
    7c98:	4005883a 	mov	r2,r8
    7c9c:	0009883a 	mov	r4,zero
    7ca0:	003f5106 	br	79e8 <__udivdi3+0x184>
    7ca4:	85a0983a 	sll	r16,r16,r22
    7ca8:	3585c83a 	sub	r2,r6,r22
    7cac:	a0a2d83a 	srl	r17,r20,r2
    7cb0:	802ad43a 	srli	r21,r16,16
    7cb4:	e084d83a 	srl	r2,fp,r2
    7cb8:	a586983a 	sll	r3,r20,r22
    7cbc:	8809883a 	mov	r4,r17
    7cc0:	a80b883a 	mov	r5,r21
    7cc4:	1886b03a 	or	r3,r3,r2
    7cc8:	d8c00115 	stw	r3,4(sp)
    7ccc:	00096580 	call	9658 <__udivsi3>
    7cd0:	8809883a 	mov	r4,r17
    7cd4:	a80b883a 	mov	r5,r21
    7cd8:	d8800415 	stw	r2,16(sp)
    7cdc:	00096600 	call	9660 <__umodsi3>
    7ce0:	d9000117 	ldw	r4,4(sp)
    7ce4:	d9400417 	ldw	r5,16(sp)
    7ce8:	1004943a 	slli	r2,r2,16
    7cec:	85ffffcc 	andi	r23,r16,65535
    7cf0:	2006d43a 	srli	r3,r4,16
    7cf4:	b963383a 	mul	r17,r23,r5
    7cf8:	10c4b03a 	or	r2,r2,r3
    7cfc:	1440042e 	bgeu	r2,r17,7d10 <__udivdi3+0x4ac>
    7d00:	297fffc4 	addi	r5,r5,-1
    7d04:	1405883a 	add	r2,r2,r16
    7d08:	d9400415 	stw	r5,16(sp)
    7d0c:	1400442e 	bgeu	r2,r16,7e20 <__udivdi3+0x5bc>
    7d10:	1463c83a 	sub	r17,r2,r17
    7d14:	8809883a 	mov	r4,r17
    7d18:	a80b883a 	mov	r5,r21
    7d1c:	00096580 	call	9658 <__udivsi3>
    7d20:	8809883a 	mov	r4,r17
    7d24:	a80b883a 	mov	r5,r21
    7d28:	1029883a 	mov	r20,r2
    7d2c:	00096600 	call	9660 <__umodsi3>
    7d30:	d9400117 	ldw	r5,4(sp)
    7d34:	1004943a 	slli	r2,r2,16
    7d38:	bd09383a 	mul	r4,r23,r20
    7d3c:	28ffffcc 	andi	r3,r5,65535
    7d40:	10c6b03a 	or	r3,r2,r3
    7d44:	1900062e 	bgeu	r3,r4,7d60 <__udivdi3+0x4fc>
    7d48:	1c07883a 	add	r3,r3,r16
    7d4c:	a53fffc4 	addi	r20,r20,-1
    7d50:	1c000336 	bltu	r3,r16,7d60 <__udivdi3+0x4fc>
    7d54:	1900022e 	bgeu	r3,r4,7d60 <__udivdi3+0x4fc>
    7d58:	a53fffc4 	addi	r20,r20,-1
    7d5c:	1c07883a 	add	r3,r3,r16
    7d60:	d9400417 	ldw	r5,16(sp)
    7d64:	e5b8983a 	sll	fp,fp,r22
    7d68:	1923c83a 	sub	r17,r3,r4
    7d6c:	2804943a 	slli	r2,r5,16
    7d70:	a0a8b03a 	or	r20,r20,r2
    7d74:	dd000315 	stw	r20,12(sp)
    7d78:	003ee106 	br	7900 <__udivdi3+0x9c>
    7d7c:	2004943a 	slli	r2,r4,16
    7d80:	e5c8983a 	sll	r4,fp,r23
    7d84:	48ffffcc 	andi	r3,r9,65535
    7d88:	10c5883a 	add	r2,r2,r3
    7d8c:	20bfc22e 	bgeu	r4,r2,7c98 <__udivdi3+0x434>
    7d90:	40bfffc4 	addi	r2,r8,-1
    7d94:	0009883a 	mov	r4,zero
    7d98:	003f1306 	br	79e8 <__udivdi3+0x184>
    7d9c:	01400204 	movi	r5,8
    7da0:	2805883a 	mov	r2,r5
    7da4:	003f0306 	br	79b4 <__udivdi3+0x150>
    7da8:	01400604 	movi	r5,24
    7dac:	2805883a 	mov	r2,r5
    7db0:	003f0006 	br	79b4 <__udivdi3+0x150>
    7db4:	01400204 	movi	r5,8
    7db8:	2805883a 	mov	r2,r5
    7dbc:	003ec206 	br	78c8 <__udivdi3+0x64>
    7dc0:	01400604 	movi	r5,24
    7dc4:	2805883a 	mov	r2,r5
    7dc8:	003ebf06 	br	78c8 <__udivdi3+0x64>
    7dcc:	01400204 	movi	r5,8
    7dd0:	2805883a 	mov	r2,r5
    7dd4:	003f1706 	br	7a34 <__udivdi3+0x1d0>
    7dd8:	01400604 	movi	r5,24
    7ddc:	2805883a 	mov	r2,r5
    7de0:	003f1406 	br	7a34 <__udivdi3+0x1d0>
    7de4:	89ff962e 	bgeu	r17,r7,7c40 <__udivdi3+0x3dc>
    7de8:	8d63883a 	add	r17,r17,r21
    7dec:	843fffc4 	addi	r16,r16,-1
    7df0:	003f9306 	br	7c40 <__udivdi3+0x3dc>
    7df4:	147f802e 	bgeu	r2,r17,7bf8 <__udivdi3+0x394>
    7df8:	a53fffc4 	addi	r20,r20,-1
    7dfc:	1545883a 	add	r2,r2,r21
    7e00:	003f7d06 	br	7bf8 <__udivdi3+0x394>
    7e04:	a53fffc4 	addi	r20,r20,-1
    7e08:	003ede06 	br	7984 <__udivdi3+0x120>
    7e0c:	b5bfffc4 	addi	r22,r22,-1
    7e10:	1405883a 	add	r2,r2,r16
    7e14:	003f2806 	br	7ab8 <__udivdi3+0x254>
    7e18:	a53fffc4 	addi	r20,r20,-1
    7e1c:	003f3706 	br	7afc <__udivdi3+0x298>
    7e20:	147fbb2e 	bgeu	r2,r17,7d10 <__udivdi3+0x4ac>
    7e24:	297fffc4 	addi	r5,r5,-1
    7e28:	1405883a 	add	r2,r2,r16
    7e2c:	d9400415 	stw	r5,16(sp)
    7e30:	003fb706 	br	7d10 <__udivdi3+0x4ac>
    7e34:	b5bfffc4 	addi	r22,r22,-1
    7e38:	1405883a 	add	r2,r2,r16
    7e3c:	003ec006 	br	7940 <__udivdi3+0xdc>

00007e40 <__umoddi3>:
    7e40:	defff104 	addi	sp,sp,-60
    7e44:	dd800b15 	stw	r22,44(sp)
    7e48:	dd000915 	stw	r20,36(sp)
    7e4c:	dc000515 	stw	r16,20(sp)
    7e50:	dfc00e15 	stw	ra,56(sp)
    7e54:	df000d15 	stw	fp,52(sp)
    7e58:	ddc00c15 	stw	r23,48(sp)
    7e5c:	dd400a15 	stw	r21,40(sp)
    7e60:	dcc00815 	stw	r19,32(sp)
    7e64:	dc800715 	stw	r18,28(sp)
    7e68:	dc400615 	stw	r17,24(sp)
    7e6c:	3021883a 	mov	r16,r6
    7e70:	202d883a 	mov	r22,r4
    7e74:	2829883a 	mov	r20,r5
    7e78:	38002b1e 	bne	r7,zero,7f28 <__umoddi3+0xe8>
    7e7c:	29805036 	bltu	r5,r6,7fc0 <__umoddi3+0x180>
    7e80:	30008a26 	beq	r6,zero,80ac <__umoddi3+0x26c>
    7e84:	00bfffd4 	movui	r2,65535
    7e88:	14008236 	bltu	r2,r16,8094 <__umoddi3+0x254>
    7e8c:	00803fc4 	movi	r2,255
    7e90:	14013636 	bltu	r2,r16,836c <__umoddi3+0x52c>
    7e94:	000b883a 	mov	r5,zero
    7e98:	0005883a 	mov	r2,zero
    7e9c:	8084d83a 	srl	r2,r16,r2
    7ea0:	01000074 	movhi	r4,1
    7ea4:	2134a604 	addi	r4,r4,-11624
    7ea8:	01800804 	movi	r6,32
    7eac:	1105883a 	add	r2,r2,r4
    7eb0:	10c00003 	ldbu	r3,0(r2)
    7eb4:	28c7883a 	add	r3,r5,r3
    7eb8:	30efc83a 	sub	r23,r6,r3
    7ebc:	b800941e 	bne	r23,zero,8110 <__umoddi3+0x2d0>
    7ec0:	802ad43a 	srli	r21,r16,16
    7ec4:	a423c83a 	sub	r17,r20,r16
    7ec8:	0039883a 	mov	fp,zero
    7ecc:	853fffcc 	andi	r20,r16,65535
    7ed0:	8809883a 	mov	r4,r17
    7ed4:	a80b883a 	mov	r5,r21
    7ed8:	00096580 	call	9658 <__udivsi3>
    7edc:	8809883a 	mov	r4,r17
    7ee0:	a80b883a 	mov	r5,r21
    7ee4:	a0a3383a 	mul	r17,r20,r2
    7ee8:	00096600 	call	9660 <__umodsi3>
    7eec:	1004943a 	slli	r2,r2,16
    7ef0:	b006d43a 	srli	r3,r22,16
    7ef4:	10c4b03a 	or	r2,r2,r3
    7ef8:	1440032e 	bgeu	r2,r17,7f08 <__umoddi3+0xc8>
    7efc:	1405883a 	add	r2,r2,r16
    7f00:	14000136 	bltu	r2,r16,7f08 <__umoddi3+0xc8>
    7f04:	14413536 	bltu	r2,r17,83dc <__umoddi3+0x59c>
    7f08:	1463c83a 	sub	r17,r2,r17
    7f0c:	8809883a 	mov	r4,r17
    7f10:	a80b883a 	mov	r5,r21
    7f14:	00096580 	call	9658 <__udivsi3>
    7f18:	8809883a 	mov	r4,r17
    7f1c:	a0a3383a 	mul	r17,r20,r2
    7f20:	a80b883a 	mov	r5,r21
    7f24:	00004d06 	br	805c <__umoddi3+0x21c>
    7f28:	380d883a 	mov	r6,r7
    7f2c:	29c0102e 	bgeu	r5,r7,7f70 <__umoddi3+0x130>
    7f30:	2011883a 	mov	r8,r4
    7f34:	2813883a 	mov	r9,r5
    7f38:	4005883a 	mov	r2,r8
    7f3c:	4807883a 	mov	r3,r9
    7f40:	dfc00e17 	ldw	ra,56(sp)
    7f44:	df000d17 	ldw	fp,52(sp)
    7f48:	ddc00c17 	ldw	r23,48(sp)
    7f4c:	dd800b17 	ldw	r22,44(sp)
    7f50:	dd400a17 	ldw	r21,40(sp)
    7f54:	dd000917 	ldw	r20,36(sp)
    7f58:	dcc00817 	ldw	r19,32(sp)
    7f5c:	dc800717 	ldw	r18,28(sp)
    7f60:	dc400617 	ldw	r17,24(sp)
    7f64:	dc000517 	ldw	r16,20(sp)
    7f68:	dec00f04 	addi	sp,sp,60
    7f6c:	f800283a 	ret
    7f70:	00bfffd4 	movui	r2,65535
    7f74:	11c05a36 	bltu	r2,r7,80e0 <__umoddi3+0x2a0>
    7f78:	00803fc4 	movi	r2,255
    7f7c:	11c0fe36 	bltu	r2,r7,8378 <__umoddi3+0x538>
    7f80:	000b883a 	mov	r5,zero
    7f84:	0005883a 	mov	r2,zero
    7f88:	3084d83a 	srl	r2,r6,r2
    7f8c:	01000074 	movhi	r4,1
    7f90:	2134a604 	addi	r4,r4,-11624
    7f94:	01c00804 	movi	r7,32
    7f98:	1105883a 	add	r2,r2,r4
    7f9c:	10c00003 	ldbu	r3,0(r2)
    7fa0:	28c7883a 	add	r3,r5,r3
    7fa4:	38ebc83a 	sub	r21,r7,r3
    7fa8:	a800851e 	bne	r21,zero,81c0 <__umoddi3+0x380>
    7fac:	35005236 	bltu	r6,r20,80f8 <__umoddi3+0x2b8>
    7fb0:	b400512e 	bgeu	r22,r16,80f8 <__umoddi3+0x2b8>
    7fb4:	b011883a 	mov	r8,r22
    7fb8:	a013883a 	mov	r9,r20
    7fbc:	003fde06 	br	7f38 <__umoddi3+0xf8>
    7fc0:	00bfffd4 	movui	r2,65535
    7fc4:	11804036 	bltu	r2,r6,80c8 <__umoddi3+0x288>
    7fc8:	00803fc4 	movi	r2,255
    7fcc:	1180ed36 	bltu	r2,r6,8384 <__umoddi3+0x544>
    7fd0:	000b883a 	mov	r5,zero
    7fd4:	0005883a 	mov	r2,zero
    7fd8:	8084d83a 	srl	r2,r16,r2
    7fdc:	01000074 	movhi	r4,1
    7fe0:	2134a604 	addi	r4,r4,-11624
    7fe4:	01800804 	movi	r6,32
    7fe8:	1105883a 	add	r2,r2,r4
    7fec:	10c00003 	ldbu	r3,0(r2)
    7ff0:	28c7883a 	add	r3,r5,r3
    7ff4:	30c7c83a 	sub	r3,r6,r3
    7ff8:	1800bf1e 	bne	r3,zero,82f8 <__umoddi3+0x4b8>
    7ffc:	0039883a 	mov	fp,zero
    8000:	802ad43a 	srli	r21,r16,16
    8004:	a009883a 	mov	r4,r20
    8008:	85ffffcc 	andi	r23,r16,65535
    800c:	a80b883a 	mov	r5,r21
    8010:	00096580 	call	9658 <__udivsi3>
    8014:	a009883a 	mov	r4,r20
    8018:	a80b883a 	mov	r5,r21
    801c:	b8a3383a 	mul	r17,r23,r2
    8020:	00096600 	call	9660 <__umodsi3>
    8024:	1004943a 	slli	r2,r2,16
    8028:	b006d43a 	srli	r3,r22,16
    802c:	10c4b03a 	or	r2,r2,r3
    8030:	1440032e 	bgeu	r2,r17,8040 <__umoddi3+0x200>
    8034:	1405883a 	add	r2,r2,r16
    8038:	14000136 	bltu	r2,r16,8040 <__umoddi3+0x200>
    803c:	1440e536 	bltu	r2,r17,83d4 <__umoddi3+0x594>
    8040:	1463c83a 	sub	r17,r2,r17
    8044:	8809883a 	mov	r4,r17
    8048:	a80b883a 	mov	r5,r21
    804c:	00096580 	call	9658 <__udivsi3>
    8050:	8809883a 	mov	r4,r17
    8054:	b8a3383a 	mul	r17,r23,r2
    8058:	a80b883a 	mov	r5,r21
    805c:	00096600 	call	9660 <__umodsi3>
    8060:	1004943a 	slli	r2,r2,16
    8064:	b0ffffcc 	andi	r3,r22,65535
    8068:	10c4b03a 	or	r2,r2,r3
    806c:	1440042e 	bgeu	r2,r17,8080 <__umoddi3+0x240>
    8070:	1405883a 	add	r2,r2,r16
    8074:	14000236 	bltu	r2,r16,8080 <__umoddi3+0x240>
    8078:	1440012e 	bgeu	r2,r17,8080 <__umoddi3+0x240>
    807c:	1405883a 	add	r2,r2,r16
    8080:	1445c83a 	sub	r2,r2,r17
    8084:	1724d83a 	srl	r18,r2,fp
    8088:	0013883a 	mov	r9,zero
    808c:	9011883a 	mov	r8,r18
    8090:	003fa906 	br	7f38 <__umoddi3+0xf8>
    8094:	00804034 	movhi	r2,256
    8098:	10bfffc4 	addi	r2,r2,-1
    809c:	1400b036 	bltu	r2,r16,8360 <__umoddi3+0x520>
    80a0:	01400404 	movi	r5,16
    80a4:	2805883a 	mov	r2,r5
    80a8:	003f7c06 	br	7e9c <__umoddi3+0x5c>
    80ac:	01000044 	movi	r4,1
    80b0:	000b883a 	mov	r5,zero
    80b4:	00096580 	call	9658 <__udivsi3>
    80b8:	1021883a 	mov	r16,r2
    80bc:	00bfffd4 	movui	r2,65535
    80c0:	143ff436 	bltu	r2,r16,8094 <__umoddi3+0x254>
    80c4:	003f7106 	br	7e8c <__umoddi3+0x4c>
    80c8:	00804034 	movhi	r2,256
    80cc:	10bfffc4 	addi	r2,r2,-1
    80d0:	1180af36 	bltu	r2,r6,8390 <__umoddi3+0x550>
    80d4:	01400404 	movi	r5,16
    80d8:	2805883a 	mov	r2,r5
    80dc:	003fbe06 	br	7fd8 <__umoddi3+0x198>
    80e0:	00804034 	movhi	r2,256
    80e4:	10bfffc4 	addi	r2,r2,-1
    80e8:	11c0ac36 	bltu	r2,r7,839c <__umoddi3+0x55c>
    80ec:	01400404 	movi	r5,16
    80f0:	2805883a 	mov	r2,r5
    80f4:	003fa406 	br	7f88 <__umoddi3+0x148>
    80f8:	b409c83a 	sub	r4,r22,r16
    80fc:	b105803a 	cmpltu	r2,r22,r4
    8100:	a187c83a 	sub	r3,r20,r6
    8104:	18a9c83a 	sub	r20,r3,r2
    8108:	202d883a 	mov	r22,r4
    810c:	003fa906 	br	7fb4 <__umoddi3+0x174>
    8110:	85e0983a 	sll	r16,r16,r23
    8114:	35c5c83a 	sub	r2,r6,r23
    8118:	a0a2d83a 	srl	r17,r20,r2
    811c:	802ad43a 	srli	r21,r16,16
    8120:	b084d83a 	srl	r2,r22,r2
    8124:	a5c6983a 	sll	r3,r20,r23
    8128:	8809883a 	mov	r4,r17
    812c:	a80b883a 	mov	r5,r21
    8130:	1886b03a 	or	r3,r3,r2
    8134:	d8c00115 	stw	r3,4(sp)
    8138:	853fffcc 	andi	r20,r16,65535
    813c:	00096580 	call	9658 <__udivsi3>
    8140:	8809883a 	mov	r4,r17
    8144:	a80b883a 	mov	r5,r21
    8148:	a0a3383a 	mul	r17,r20,r2
    814c:	00096600 	call	9660 <__umodsi3>
    8150:	d9000117 	ldw	r4,4(sp)
    8154:	1004943a 	slli	r2,r2,16
    8158:	b839883a 	mov	fp,r23
    815c:	2006d43a 	srli	r3,r4,16
    8160:	10c4b03a 	or	r2,r2,r3
    8164:	1440022e 	bgeu	r2,r17,8170 <__umoddi3+0x330>
    8168:	1405883a 	add	r2,r2,r16
    816c:	1400962e 	bgeu	r2,r16,83c8 <__umoddi3+0x588>
    8170:	1463c83a 	sub	r17,r2,r17
    8174:	8809883a 	mov	r4,r17
    8178:	a80b883a 	mov	r5,r21
    817c:	00096580 	call	9658 <__udivsi3>
    8180:	8809883a 	mov	r4,r17
    8184:	a80b883a 	mov	r5,r21
    8188:	a0a3383a 	mul	r17,r20,r2
    818c:	00096600 	call	9660 <__umodsi3>
    8190:	d9400117 	ldw	r5,4(sp)
    8194:	1004943a 	slli	r2,r2,16
    8198:	28ffffcc 	andi	r3,r5,65535
    819c:	10c4b03a 	or	r2,r2,r3
    81a0:	1440042e 	bgeu	r2,r17,81b4 <__umoddi3+0x374>
    81a4:	1405883a 	add	r2,r2,r16
    81a8:	14000236 	bltu	r2,r16,81b4 <__umoddi3+0x374>
    81ac:	1440012e 	bgeu	r2,r17,81b4 <__umoddi3+0x374>
    81b0:	1405883a 	add	r2,r2,r16
    81b4:	b5ec983a 	sll	r22,r22,r23
    81b8:	1463c83a 	sub	r17,r2,r17
    81bc:	003f4406 	br	7ed0 <__umoddi3+0x90>
    81c0:	3d4fc83a 	sub	r7,r7,r21
    81c4:	3546983a 	sll	r3,r6,r21
    81c8:	81c4d83a 	srl	r2,r16,r7
    81cc:	a1e2d83a 	srl	r17,r20,r7
    81d0:	a54c983a 	sll	r6,r20,r21
    81d4:	18aeb03a 	or	r23,r3,r2
    81d8:	b828d43a 	srli	r20,r23,16
    81dc:	b1c4d83a 	srl	r2,r22,r7
    81e0:	8809883a 	mov	r4,r17
    81e4:	a00b883a 	mov	r5,r20
    81e8:	308cb03a 	or	r6,r6,r2
    81ec:	d9c00315 	stw	r7,12(sp)
    81f0:	d9800215 	stw	r6,8(sp)
    81f4:	00096580 	call	9658 <__udivsi3>
    81f8:	8809883a 	mov	r4,r17
    81fc:	a00b883a 	mov	r5,r20
    8200:	1039883a 	mov	fp,r2
    8204:	00096600 	call	9660 <__umodsi3>
    8208:	b8ffffcc 	andi	r3,r23,65535
    820c:	d8c00415 	stw	r3,16(sp)
    8210:	d9000217 	ldw	r4,8(sp)
    8214:	d9400417 	ldw	r5,16(sp)
    8218:	1004943a 	slli	r2,r2,16
    821c:	2006d43a 	srli	r3,r4,16
    8220:	8560983a 	sll	r16,r16,r21
    8224:	2f23383a 	mul	r17,r5,fp
    8228:	10c4b03a 	or	r2,r2,r3
    822c:	dc000015 	stw	r16,0(sp)
    8230:	b56c983a 	sll	r22,r22,r21
    8234:	1440032e 	bgeu	r2,r17,8244 <__umoddi3+0x404>
    8238:	15c5883a 	add	r2,r2,r23
    823c:	e73fffc4 	addi	fp,fp,-1
    8240:	15c05d2e 	bgeu	r2,r23,83b8 <__umoddi3+0x578>
    8244:	1463c83a 	sub	r17,r2,r17
    8248:	8809883a 	mov	r4,r17
    824c:	a00b883a 	mov	r5,r20
    8250:	00096580 	call	9658 <__udivsi3>
    8254:	8809883a 	mov	r4,r17
    8258:	a00b883a 	mov	r5,r20
    825c:	1021883a 	mov	r16,r2
    8260:	00096600 	call	9660 <__umodsi3>
    8264:	d8c00417 	ldw	r3,16(sp)
    8268:	d9000217 	ldw	r4,8(sp)
    826c:	1004943a 	slli	r2,r2,16
    8270:	1c23383a 	mul	r17,r3,r16
    8274:	20ffffcc 	andi	r3,r4,65535
    8278:	10ceb03a 	or	r7,r2,r3
    827c:	3c40032e 	bgeu	r7,r17,828c <__umoddi3+0x44c>
    8280:	3dcf883a 	add	r7,r7,r23
    8284:	843fffc4 	addi	r16,r16,-1
    8288:	3dc0472e 	bgeu	r7,r23,83a8 <__umoddi3+0x568>
    828c:	e004943a 	slli	r2,fp,16
    8290:	d9400017 	ldw	r5,0(sp)
    8294:	3c4fc83a 	sub	r7,r7,r17
    8298:	8084b03a 	or	r2,r16,r2
    829c:	28ffffcc 	andi	r3,r5,65535
    82a0:	280cd43a 	srli	r6,r5,16
    82a4:	100ad43a 	srli	r5,r2,16
    82a8:	10bfffcc 	andi	r2,r2,65535
    82ac:	10d1383a 	mul	r8,r2,r3
    82b0:	28c7383a 	mul	r3,r5,r3
    82b4:	1185383a 	mul	r2,r2,r6
    82b8:	4008d43a 	srli	r4,r8,16
    82bc:	298b383a 	mul	r5,r5,r6
    82c0:	10c5883a 	add	r2,r2,r3
    82c4:	2089883a 	add	r4,r4,r2
    82c8:	20c0022e 	bgeu	r4,r3,82d4 <__umoddi3+0x494>
    82cc:	00800074 	movhi	r2,1
    82d0:	288b883a 	add	r5,r5,r2
    82d4:	2004d43a 	srli	r2,r4,16
    82d8:	2008943a 	slli	r4,r4,16
    82dc:	40ffffcc 	andi	r3,r8,65535
    82e0:	288b883a 	add	r5,r5,r2
    82e4:	20c9883a 	add	r4,r4,r3
    82e8:	39400b36 	bltu	r7,r5,8318 <__umoddi3+0x4d8>
    82ec:	39403d26 	beq	r7,r5,83e4 <__umoddi3+0x5a4>
    82f0:	394bc83a 	sub	r5,r7,r5
    82f4:	00000f06 	br	8334 <__umoddi3+0x4f4>
    82f8:	30c5c83a 	sub	r2,r6,r3
    82fc:	1839883a 	mov	fp,r3
    8300:	b084d83a 	srl	r2,r22,r2
    8304:	a0c6983a 	sll	r3,r20,r3
    8308:	8720983a 	sll	r16,r16,fp
    830c:	b72c983a 	sll	r22,r22,fp
    8310:	18a8b03a 	or	r20,r3,r2
    8314:	003f3a06 	br	8000 <__umoddi3+0x1c0>
    8318:	d8c00017 	ldw	r3,0(sp)
    831c:	20c5c83a 	sub	r2,r4,r3
    8320:	2089803a 	cmpltu	r4,r4,r2
    8324:	2dc7c83a 	sub	r3,r5,r23
    8328:	1907c83a 	sub	r3,r3,r4
    832c:	38cbc83a 	sub	r5,r7,r3
    8330:	1009883a 	mov	r4,r2
    8334:	b105c83a 	sub	r2,r22,r4
    8338:	b087803a 	cmpltu	r3,r22,r2
    833c:	28c7c83a 	sub	r3,r5,r3
    8340:	d9400317 	ldw	r5,12(sp)
    8344:	1544d83a 	srl	r2,r2,r21
    8348:	1948983a 	sll	r4,r3,r5
    834c:	1d46d83a 	srl	r3,r3,r21
    8350:	20a4b03a 	or	r18,r4,r2
    8354:	9011883a 	mov	r8,r18
    8358:	1813883a 	mov	r9,r3
    835c:	003ef606 	br	7f38 <__umoddi3+0xf8>
    8360:	01400604 	movi	r5,24
    8364:	2805883a 	mov	r2,r5
    8368:	003ecc06 	br	7e9c <__umoddi3+0x5c>
    836c:	01400204 	movi	r5,8
    8370:	2805883a 	mov	r2,r5
    8374:	003ec906 	br	7e9c <__umoddi3+0x5c>
    8378:	01400204 	movi	r5,8
    837c:	2805883a 	mov	r2,r5
    8380:	003f0106 	br	7f88 <__umoddi3+0x148>
    8384:	01400204 	movi	r5,8
    8388:	2805883a 	mov	r2,r5
    838c:	003f1206 	br	7fd8 <__umoddi3+0x198>
    8390:	01400604 	movi	r5,24
    8394:	2805883a 	mov	r2,r5
    8398:	003f0f06 	br	7fd8 <__umoddi3+0x198>
    839c:	01400604 	movi	r5,24
    83a0:	2805883a 	mov	r2,r5
    83a4:	003ef806 	br	7f88 <__umoddi3+0x148>
    83a8:	3c7fb82e 	bgeu	r7,r17,828c <__umoddi3+0x44c>
    83ac:	843fffc4 	addi	r16,r16,-1
    83b0:	3dcf883a 	add	r7,r7,r23
    83b4:	003fb506 	br	828c <__umoddi3+0x44c>
    83b8:	147fa22e 	bgeu	r2,r17,8244 <__umoddi3+0x404>
    83bc:	e73fffc4 	addi	fp,fp,-1
    83c0:	15c5883a 	add	r2,r2,r23
    83c4:	003f9f06 	br	8244 <__umoddi3+0x404>
    83c8:	147f692e 	bgeu	r2,r17,8170 <__umoddi3+0x330>
    83cc:	1405883a 	add	r2,r2,r16
    83d0:	003f6706 	br	8170 <__umoddi3+0x330>
    83d4:	1405883a 	add	r2,r2,r16
    83d8:	003f1906 	br	8040 <__umoddi3+0x200>
    83dc:	1405883a 	add	r2,r2,r16
    83e0:	003ec906 	br	7f08 <__umoddi3+0xc8>
    83e4:	b13fcc36 	bltu	r22,r4,8318 <__umoddi3+0x4d8>
    83e8:	000b883a 	mov	r5,zero
    83ec:	003fd106 	br	8334 <__umoddi3+0x4f4>

000083f0 <_fpadd_parts>:
    83f0:	defff804 	addi	sp,sp,-32
    83f4:	dcc00315 	stw	r19,12(sp)
    83f8:	2027883a 	mov	r19,r4
    83fc:	21000017 	ldw	r4,0(r4)
    8400:	00c00044 	movi	r3,1
    8404:	dd400515 	stw	r21,20(sp)
    8408:	dd000415 	stw	r20,16(sp)
    840c:	ddc00715 	stw	r23,28(sp)
    8410:	dd800615 	stw	r22,24(sp)
    8414:	dc800215 	stw	r18,8(sp)
    8418:	dc400115 	stw	r17,4(sp)
    841c:	dc000015 	stw	r16,0(sp)
    8420:	282b883a 	mov	r21,r5
    8424:	3029883a 	mov	r20,r6
    8428:	1900632e 	bgeu	r3,r4,85b8 <_fpadd_parts+0x1c8>
    842c:	28800017 	ldw	r2,0(r5)
    8430:	1880812e 	bgeu	r3,r2,8638 <_fpadd_parts+0x248>
    8434:	00c00104 	movi	r3,4
    8438:	20c0dc26 	beq	r4,r3,87ac <_fpadd_parts+0x3bc>
    843c:	10c07e26 	beq	r2,r3,8638 <_fpadd_parts+0x248>
    8440:	00c00084 	movi	r3,2
    8444:	10c06726 	beq	r2,r3,85e4 <_fpadd_parts+0x1f4>
    8448:	20c07b26 	beq	r4,r3,8638 <_fpadd_parts+0x248>
    844c:	9dc00217 	ldw	r23,8(r19)
    8450:	28c00217 	ldw	r3,8(r5)
    8454:	9c400317 	ldw	r17,12(r19)
    8458:	2bc00317 	ldw	r15,12(r5)
    845c:	b8cdc83a 	sub	r6,r23,r3
    8460:	9c800417 	ldw	r18,16(r19)
    8464:	2c000417 	ldw	r16,16(r5)
    8468:	3009883a 	mov	r4,r6
    846c:	30009716 	blt	r6,zero,86cc <_fpadd_parts+0x2dc>
    8470:	00800fc4 	movi	r2,63
    8474:	11806b16 	blt	r2,r6,8624 <_fpadd_parts+0x234>
    8478:	0100a40e 	bge	zero,r4,870c <_fpadd_parts+0x31c>
    847c:	35bff804 	addi	r22,r6,-32
    8480:	b000bc16 	blt	r22,zero,8774 <_fpadd_parts+0x384>
    8484:	8596d83a 	srl	r11,r16,r22
    8488:	0019883a 	mov	r12,zero
    848c:	0013883a 	mov	r9,zero
    8490:	01000044 	movi	r4,1
    8494:	0015883a 	mov	r10,zero
    8498:	b000be16 	blt	r22,zero,8794 <_fpadd_parts+0x3a4>
    849c:	2590983a 	sll	r8,r4,r22
    84a0:	000f883a 	mov	r7,zero
    84a4:	00bfffc4 	movi	r2,-1
    84a8:	3889883a 	add	r4,r7,r2
    84ac:	408b883a 	add	r5,r8,r2
    84b0:	21cd803a 	cmpltu	r6,r4,r7
    84b4:	314b883a 	add	r5,r6,r5
    84b8:	7904703a 	and	r2,r15,r4
    84bc:	8146703a 	and	r3,r16,r5
    84c0:	10c4b03a 	or	r2,r2,r3
    84c4:	10000226 	beq	r2,zero,84d0 <_fpadd_parts+0xe0>
    84c8:	02400044 	movi	r9,1
    84cc:	0015883a 	mov	r10,zero
    84d0:	5a5eb03a 	or	r15,r11,r9
    84d4:	62a0b03a 	or	r16,r12,r10
    84d8:	99400117 	ldw	r5,4(r19)
    84dc:	a8800117 	ldw	r2,4(r21)
    84e0:	28806e26 	beq	r5,r2,869c <_fpadd_parts+0x2ac>
    84e4:	28006626 	beq	r5,zero,8680 <_fpadd_parts+0x290>
    84e8:	7c45c83a 	sub	r2,r15,r17
    84ec:	7889803a 	cmpltu	r4,r15,r2
    84f0:	8487c83a 	sub	r3,r16,r18
    84f4:	1909c83a 	sub	r4,r3,r4
    84f8:	100d883a 	mov	r6,r2
    84fc:	200f883a 	mov	r7,r4
    8500:	38007716 	blt	r7,zero,86e0 <_fpadd_parts+0x2f0>
    8504:	a5c00215 	stw	r23,8(r20)
    8508:	a1c00415 	stw	r7,16(r20)
    850c:	a0000115 	stw	zero,4(r20)
    8510:	a1800315 	stw	r6,12(r20)
    8514:	a2000317 	ldw	r8,12(r20)
    8518:	a2400417 	ldw	r9,16(r20)
    851c:	00bfffc4 	movi	r2,-1
    8520:	408b883a 	add	r5,r8,r2
    8524:	2a09803a 	cmpltu	r4,r5,r8
    8528:	488d883a 	add	r6,r9,r2
    852c:	01c40034 	movhi	r7,4096
    8530:	39ffffc4 	addi	r7,r7,-1
    8534:	218d883a 	add	r6,r4,r6
    8538:	39801736 	bltu	r7,r6,8598 <_fpadd_parts+0x1a8>
    853c:	31c06526 	beq	r6,r7,86d4 <_fpadd_parts+0x2e4>
    8540:	a3000217 	ldw	r12,8(r20)
    8544:	4209883a 	add	r4,r8,r8
    8548:	00bfffc4 	movi	r2,-1
    854c:	220f803a 	cmpltu	r7,r4,r8
    8550:	4a4b883a 	add	r5,r9,r9
    8554:	394f883a 	add	r7,r7,r5
    8558:	2095883a 	add	r10,r4,r2
    855c:	3897883a 	add	r11,r7,r2
    8560:	510d803a 	cmpltu	r6,r10,r4
    8564:	6099883a 	add	r12,r12,r2
    8568:	32d7883a 	add	r11,r6,r11
    856c:	00840034 	movhi	r2,4096
    8570:	10bfffc4 	addi	r2,r2,-1
    8574:	2011883a 	mov	r8,r4
    8578:	3813883a 	mov	r9,r7
    857c:	a1000315 	stw	r4,12(r20)
    8580:	a1c00415 	stw	r7,16(r20)
    8584:	a3000215 	stw	r12,8(r20)
    8588:	12c00336 	bltu	r2,r11,8598 <_fpadd_parts+0x1a8>
    858c:	58bfed1e 	bne	r11,r2,8544 <_fpadd_parts+0x154>
    8590:	00bfff84 	movi	r2,-2
    8594:	12bfeb2e 	bgeu	r2,r10,8544 <_fpadd_parts+0x154>
    8598:	a2800417 	ldw	r10,16(r20)
    859c:	008000c4 	movi	r2,3
    85a0:	00c80034 	movhi	r3,8192
    85a4:	18ffffc4 	addi	r3,r3,-1
    85a8:	a2400317 	ldw	r9,12(r20)
    85ac:	a0800015 	stw	r2,0(r20)
    85b0:	1a802336 	bltu	r3,r10,8640 <_fpadd_parts+0x250>
    85b4:	a027883a 	mov	r19,r20
    85b8:	9805883a 	mov	r2,r19
    85bc:	ddc00717 	ldw	r23,28(sp)
    85c0:	dd800617 	ldw	r22,24(sp)
    85c4:	dd400517 	ldw	r21,20(sp)
    85c8:	dd000417 	ldw	r20,16(sp)
    85cc:	dcc00317 	ldw	r19,12(sp)
    85d0:	dc800217 	ldw	r18,8(sp)
    85d4:	dc400117 	ldw	r17,4(sp)
    85d8:	dc000017 	ldw	r16,0(sp)
    85dc:	dec00804 	addi	sp,sp,32
    85e0:	f800283a 	ret
    85e4:	20fff41e 	bne	r4,r3,85b8 <_fpadd_parts+0x1c8>
    85e8:	31000015 	stw	r4,0(r6)
    85ec:	98800117 	ldw	r2,4(r19)
    85f0:	30800115 	stw	r2,4(r6)
    85f4:	98c00217 	ldw	r3,8(r19)
    85f8:	30c00215 	stw	r3,8(r6)
    85fc:	98800317 	ldw	r2,12(r19)
    8600:	30800315 	stw	r2,12(r6)
    8604:	98c00417 	ldw	r3,16(r19)
    8608:	30c00415 	stw	r3,16(r6)
    860c:	98800117 	ldw	r2,4(r19)
    8610:	28c00117 	ldw	r3,4(r5)
    8614:	3027883a 	mov	r19,r6
    8618:	10c4703a 	and	r2,r2,r3
    861c:	30800115 	stw	r2,4(r6)
    8620:	003fe506 	br	85b8 <_fpadd_parts+0x1c8>
    8624:	1dc02616 	blt	r3,r23,86c0 <_fpadd_parts+0x2d0>
    8628:	0023883a 	mov	r17,zero
    862c:	182f883a 	mov	r23,r3
    8630:	0025883a 	mov	r18,zero
    8634:	003fa806 	br	84d8 <_fpadd_parts+0xe8>
    8638:	a827883a 	mov	r19,r21
    863c:	003fde06 	br	85b8 <_fpadd_parts+0x1c8>
    8640:	01800044 	movi	r6,1
    8644:	500497fa 	slli	r2,r10,31
    8648:	4808d07a 	srli	r4,r9,1
    864c:	518ad83a 	srl	r5,r10,r6
    8650:	a2000217 	ldw	r8,8(r20)
    8654:	1108b03a 	or	r4,r2,r4
    8658:	0007883a 	mov	r3,zero
    865c:	4984703a 	and	r2,r9,r6
    8660:	208cb03a 	or	r6,r4,r2
    8664:	28ceb03a 	or	r7,r5,r3
    8668:	42000044 	addi	r8,r8,1
    866c:	a027883a 	mov	r19,r20
    8670:	a1c00415 	stw	r7,16(r20)
    8674:	a2000215 	stw	r8,8(r20)
    8678:	a1800315 	stw	r6,12(r20)
    867c:	003fce06 	br	85b8 <_fpadd_parts+0x1c8>
    8680:	8bc5c83a 	sub	r2,r17,r15
    8684:	8889803a 	cmpltu	r4,r17,r2
    8688:	9407c83a 	sub	r3,r18,r16
    868c:	1909c83a 	sub	r4,r3,r4
    8690:	100d883a 	mov	r6,r2
    8694:	200f883a 	mov	r7,r4
    8698:	003f9906 	br	8500 <_fpadd_parts+0x110>
    869c:	7c45883a 	add	r2,r15,r17
    86a0:	13c9803a 	cmpltu	r4,r2,r15
    86a4:	8487883a 	add	r3,r16,r18
    86a8:	20c9883a 	add	r4,r4,r3
    86ac:	a1400115 	stw	r5,4(r20)
    86b0:	a5c00215 	stw	r23,8(r20)
    86b4:	a0800315 	stw	r2,12(r20)
    86b8:	a1000415 	stw	r4,16(r20)
    86bc:	003fb606 	br	8598 <_fpadd_parts+0x1a8>
    86c0:	001f883a 	mov	r15,zero
    86c4:	0021883a 	mov	r16,zero
    86c8:	003f8306 	br	84d8 <_fpadd_parts+0xe8>
    86cc:	018dc83a 	sub	r6,zero,r6
    86d0:	003f6706 	br	8470 <_fpadd_parts+0x80>
    86d4:	00bfff84 	movi	r2,-2
    86d8:	117faf36 	bltu	r2,r5,8598 <_fpadd_parts+0x1a8>
    86dc:	003f9806 	br	8540 <_fpadd_parts+0x150>
    86e0:	0005883a 	mov	r2,zero
    86e4:	1189c83a 	sub	r4,r2,r6
    86e8:	1105803a 	cmpltu	r2,r2,r4
    86ec:	01cbc83a 	sub	r5,zero,r7
    86f0:	2885c83a 	sub	r2,r5,r2
    86f4:	01800044 	movi	r6,1
    86f8:	a1800115 	stw	r6,4(r20)
    86fc:	a5c00215 	stw	r23,8(r20)
    8700:	a1000315 	stw	r4,12(r20)
    8704:	a0800415 	stw	r2,16(r20)
    8708:	003f8206 	br	8514 <_fpadd_parts+0x124>
    870c:	203f7226 	beq	r4,zero,84d8 <_fpadd_parts+0xe8>
    8710:	35bff804 	addi	r22,r6,-32
    8714:	b9af883a 	add	r23,r23,r6
    8718:	b0003116 	blt	r22,zero,87e0 <_fpadd_parts+0x3f0>
    871c:	959ad83a 	srl	r13,r18,r22
    8720:	001d883a 	mov	r14,zero
    8724:	000f883a 	mov	r7,zero
    8728:	01000044 	movi	r4,1
    872c:	0011883a 	mov	r8,zero
    8730:	b0002516 	blt	r22,zero,87c8 <_fpadd_parts+0x3d8>
    8734:	2594983a 	sll	r10,r4,r22
    8738:	0013883a 	mov	r9,zero
    873c:	00bfffc4 	movi	r2,-1
    8740:	4889883a 	add	r4,r9,r2
    8744:	508b883a 	add	r5,r10,r2
    8748:	224d803a 	cmpltu	r6,r4,r9
    874c:	314b883a 	add	r5,r6,r5
    8750:	8904703a 	and	r2,r17,r4
    8754:	9146703a 	and	r3,r18,r5
    8758:	10c4b03a 	or	r2,r2,r3
    875c:	10000226 	beq	r2,zero,8768 <_fpadd_parts+0x378>
    8760:	01c00044 	movi	r7,1
    8764:	0011883a 	mov	r8,zero
    8768:	69e2b03a 	or	r17,r13,r7
    876c:	7224b03a 	or	r18,r14,r8
    8770:	003f5906 	br	84d8 <_fpadd_parts+0xe8>
    8774:	8407883a 	add	r3,r16,r16
    8778:	008007c4 	movi	r2,31
    877c:	1185c83a 	sub	r2,r2,r6
    8780:	1886983a 	sll	r3,r3,r2
    8784:	7996d83a 	srl	r11,r15,r6
    8788:	8198d83a 	srl	r12,r16,r6
    878c:	1ad6b03a 	or	r11,r3,r11
    8790:	003f3e06 	br	848c <_fpadd_parts+0x9c>
    8794:	2006d07a 	srli	r3,r4,1
    8798:	008007c4 	movi	r2,31
    879c:	1185c83a 	sub	r2,r2,r6
    87a0:	1890d83a 	srl	r8,r3,r2
    87a4:	218e983a 	sll	r7,r4,r6
    87a8:	003f3e06 	br	84a4 <_fpadd_parts+0xb4>
    87ac:	113f821e 	bne	r2,r4,85b8 <_fpadd_parts+0x1c8>
    87b0:	28c00117 	ldw	r3,4(r5)
    87b4:	98800117 	ldw	r2,4(r19)
    87b8:	10ff7f26 	beq	r2,r3,85b8 <_fpadd_parts+0x1c8>
    87bc:	04c00074 	movhi	r19,1
    87c0:	9cf4a104 	addi	r19,r19,-11644
    87c4:	003f7c06 	br	85b8 <_fpadd_parts+0x1c8>
    87c8:	2006d07a 	srli	r3,r4,1
    87cc:	008007c4 	movi	r2,31
    87d0:	1185c83a 	sub	r2,r2,r6
    87d4:	1894d83a 	srl	r10,r3,r2
    87d8:	2192983a 	sll	r9,r4,r6
    87dc:	003fd706 	br	873c <_fpadd_parts+0x34c>
    87e0:	9487883a 	add	r3,r18,r18
    87e4:	008007c4 	movi	r2,31
    87e8:	1185c83a 	sub	r2,r2,r6
    87ec:	1886983a 	sll	r3,r3,r2
    87f0:	899ad83a 	srl	r13,r17,r6
    87f4:	919cd83a 	srl	r14,r18,r6
    87f8:	1b5ab03a 	or	r13,r3,r13
    87fc:	003fc906 	br	8724 <_fpadd_parts+0x334>

00008800 <__subdf3>:
    8800:	deffea04 	addi	sp,sp,-88
    8804:	dcc01415 	stw	r19,80(sp)
    8808:	dcc00404 	addi	r19,sp,16
    880c:	2011883a 	mov	r8,r4
    8810:	2813883a 	mov	r9,r5
    8814:	dc401315 	stw	r17,76(sp)
    8818:	d809883a 	mov	r4,sp
    881c:	980b883a 	mov	r5,r19
    8820:	dc400904 	addi	r17,sp,36
    8824:	dfc01515 	stw	ra,84(sp)
    8828:	da400115 	stw	r9,4(sp)
    882c:	d9c00315 	stw	r7,12(sp)
    8830:	da000015 	stw	r8,0(sp)
    8834:	d9800215 	stw	r6,8(sp)
    8838:	0009a940 	call	9a94 <__unpack_d>
    883c:	d9000204 	addi	r4,sp,8
    8840:	880b883a 	mov	r5,r17
    8844:	0009a940 	call	9a94 <__unpack_d>
    8848:	d8800a17 	ldw	r2,40(sp)
    884c:	880b883a 	mov	r5,r17
    8850:	9809883a 	mov	r4,r19
    8854:	d9800e04 	addi	r6,sp,56
    8858:	1080005c 	xori	r2,r2,1
    885c:	d8800a15 	stw	r2,40(sp)
    8860:	00083f00 	call	83f0 <_fpadd_parts>
    8864:	1009883a 	mov	r4,r2
    8868:	00097800 	call	9780 <__pack_d>
    886c:	dfc01517 	ldw	ra,84(sp)
    8870:	dcc01417 	ldw	r19,80(sp)
    8874:	dc401317 	ldw	r17,76(sp)
    8878:	dec01604 	addi	sp,sp,88
    887c:	f800283a 	ret

00008880 <__adddf3>:
    8880:	deffea04 	addi	sp,sp,-88
    8884:	dcc01415 	stw	r19,80(sp)
    8888:	dcc00404 	addi	r19,sp,16
    888c:	2011883a 	mov	r8,r4
    8890:	2813883a 	mov	r9,r5
    8894:	dc401315 	stw	r17,76(sp)
    8898:	d809883a 	mov	r4,sp
    889c:	980b883a 	mov	r5,r19
    88a0:	dc400904 	addi	r17,sp,36
    88a4:	dfc01515 	stw	ra,84(sp)
    88a8:	da400115 	stw	r9,4(sp)
    88ac:	d9c00315 	stw	r7,12(sp)
    88b0:	da000015 	stw	r8,0(sp)
    88b4:	d9800215 	stw	r6,8(sp)
    88b8:	0009a940 	call	9a94 <__unpack_d>
    88bc:	d9000204 	addi	r4,sp,8
    88c0:	880b883a 	mov	r5,r17
    88c4:	0009a940 	call	9a94 <__unpack_d>
    88c8:	d9800e04 	addi	r6,sp,56
    88cc:	9809883a 	mov	r4,r19
    88d0:	880b883a 	mov	r5,r17
    88d4:	00083f00 	call	83f0 <_fpadd_parts>
    88d8:	1009883a 	mov	r4,r2
    88dc:	00097800 	call	9780 <__pack_d>
    88e0:	dfc01517 	ldw	ra,84(sp)
    88e4:	dcc01417 	ldw	r19,80(sp)
    88e8:	dc401317 	ldw	r17,76(sp)
    88ec:	dec01604 	addi	sp,sp,88
    88f0:	f800283a 	ret

000088f4 <__muldf3>:
    88f4:	deffe004 	addi	sp,sp,-128
    88f8:	dc401815 	stw	r17,96(sp)
    88fc:	dc400404 	addi	r17,sp,16
    8900:	2011883a 	mov	r8,r4
    8904:	2813883a 	mov	r9,r5
    8908:	dc001715 	stw	r16,92(sp)
    890c:	d809883a 	mov	r4,sp
    8910:	880b883a 	mov	r5,r17
    8914:	dc000904 	addi	r16,sp,36
    8918:	dfc01f15 	stw	ra,124(sp)
    891c:	da400115 	stw	r9,4(sp)
    8920:	d9c00315 	stw	r7,12(sp)
    8924:	da000015 	stw	r8,0(sp)
    8928:	d9800215 	stw	r6,8(sp)
    892c:	ddc01e15 	stw	r23,120(sp)
    8930:	dd801d15 	stw	r22,116(sp)
    8934:	dd401c15 	stw	r21,112(sp)
    8938:	dd001b15 	stw	r20,108(sp)
    893c:	dcc01a15 	stw	r19,104(sp)
    8940:	dc801915 	stw	r18,100(sp)
    8944:	0009a940 	call	9a94 <__unpack_d>
    8948:	d9000204 	addi	r4,sp,8
    894c:	800b883a 	mov	r5,r16
    8950:	0009a940 	call	9a94 <__unpack_d>
    8954:	d9000417 	ldw	r4,16(sp)
    8958:	00800044 	movi	r2,1
    895c:	1100102e 	bgeu	r2,r4,89a0 <__muldf3+0xac>
    8960:	d8c00917 	ldw	r3,36(sp)
    8964:	10c0062e 	bgeu	r2,r3,8980 <__muldf3+0x8c>
    8968:	00800104 	movi	r2,4
    896c:	20800a26 	beq	r4,r2,8998 <__muldf3+0xa4>
    8970:	1880cc26 	beq	r3,r2,8ca4 <__muldf3+0x3b0>
    8974:	00800084 	movi	r2,2
    8978:	20800926 	beq	r4,r2,89a0 <__muldf3+0xac>
    897c:	1880191e 	bne	r3,r2,89e4 <__muldf3+0xf0>
    8980:	d8c00a17 	ldw	r3,40(sp)
    8984:	d8800517 	ldw	r2,20(sp)
    8988:	8009883a 	mov	r4,r16
    898c:	10c4c03a 	cmpne	r2,r2,r3
    8990:	d8800a15 	stw	r2,40(sp)
    8994:	00000706 	br	89b4 <__muldf3+0xc0>
    8998:	00800084 	movi	r2,2
    899c:	1880c326 	beq	r3,r2,8cac <__muldf3+0x3b8>
    89a0:	d8800517 	ldw	r2,20(sp)
    89a4:	d8c00a17 	ldw	r3,40(sp)
    89a8:	8809883a 	mov	r4,r17
    89ac:	10c4c03a 	cmpne	r2,r2,r3
    89b0:	d8800515 	stw	r2,20(sp)
    89b4:	00097800 	call	9780 <__pack_d>
    89b8:	dfc01f17 	ldw	ra,124(sp)
    89bc:	ddc01e17 	ldw	r23,120(sp)
    89c0:	dd801d17 	ldw	r22,116(sp)
    89c4:	dd401c17 	ldw	r21,112(sp)
    89c8:	dd001b17 	ldw	r20,108(sp)
    89cc:	dcc01a17 	ldw	r19,104(sp)
    89d0:	dc801917 	ldw	r18,100(sp)
    89d4:	dc401817 	ldw	r17,96(sp)
    89d8:	dc001717 	ldw	r16,92(sp)
    89dc:	dec02004 	addi	sp,sp,128
    89e0:	f800283a 	ret
    89e4:	dd800717 	ldw	r22,28(sp)
    89e8:	dc800c17 	ldw	r18,48(sp)
    89ec:	002b883a 	mov	r21,zero
    89f0:	0023883a 	mov	r17,zero
    89f4:	a80b883a 	mov	r5,r21
    89f8:	b00d883a 	mov	r6,r22
    89fc:	880f883a 	mov	r7,r17
    8a00:	ddc00817 	ldw	r23,32(sp)
    8a04:	dcc00d17 	ldw	r19,52(sp)
    8a08:	9009883a 	mov	r4,r18
    8a0c:	00096680 	call	9668 <__muldi3>
    8a10:	001b883a 	mov	r13,zero
    8a14:	680f883a 	mov	r7,r13
    8a18:	b009883a 	mov	r4,r22
    8a1c:	000b883a 	mov	r5,zero
    8a20:	980d883a 	mov	r6,r19
    8a24:	b82d883a 	mov	r22,r23
    8a28:	002f883a 	mov	r23,zero
    8a2c:	db401615 	stw	r13,88(sp)
    8a30:	d8801315 	stw	r2,76(sp)
    8a34:	d8c01415 	stw	r3,80(sp)
    8a38:	dcc01515 	stw	r19,84(sp)
    8a3c:	00096680 	call	9668 <__muldi3>
    8a40:	b00d883a 	mov	r6,r22
    8a44:	000b883a 	mov	r5,zero
    8a48:	9009883a 	mov	r4,r18
    8a4c:	b80f883a 	mov	r7,r23
    8a50:	1021883a 	mov	r16,r2
    8a54:	1823883a 	mov	r17,r3
    8a58:	00096680 	call	9668 <__muldi3>
    8a5c:	8085883a 	add	r2,r16,r2
    8a60:	140d803a 	cmpltu	r6,r2,r16
    8a64:	88c7883a 	add	r3,r17,r3
    8a68:	30cd883a 	add	r6,r6,r3
    8a6c:	1029883a 	mov	r20,r2
    8a70:	302b883a 	mov	r21,r6
    8a74:	da801317 	ldw	r10,76(sp)
    8a78:	dac01417 	ldw	r11,80(sp)
    8a7c:	db001517 	ldw	r12,84(sp)
    8a80:	db401617 	ldw	r13,88(sp)
    8a84:	3440612e 	bgeu	r6,r17,8c0c <__muldf3+0x318>
    8a88:	0009883a 	mov	r4,zero
    8a8c:	5105883a 	add	r2,r10,r4
    8a90:	128d803a 	cmpltu	r6,r2,r10
    8a94:	5d07883a 	add	r3,r11,r20
    8a98:	30cd883a 	add	r6,r6,r3
    8a9c:	0021883a 	mov	r16,zero
    8aa0:	04400044 	movi	r17,1
    8aa4:	1025883a 	mov	r18,r2
    8aa8:	3027883a 	mov	r19,r6
    8aac:	32c06236 	bltu	r6,r11,8c38 <__muldf3+0x344>
    8ab0:	59807a26 	beq	r11,r6,8c9c <__muldf3+0x3a8>
    8ab4:	680b883a 	mov	r5,r13
    8ab8:	b80f883a 	mov	r7,r23
    8abc:	6009883a 	mov	r4,r12
    8ac0:	b00d883a 	mov	r6,r22
    8ac4:	00096680 	call	9668 <__muldi3>
    8ac8:	1009883a 	mov	r4,r2
    8acc:	000f883a 	mov	r7,zero
    8ad0:	1545883a 	add	r2,r2,r21
    8ad4:	1111803a 	cmpltu	r8,r2,r4
    8ad8:	19c7883a 	add	r3,r3,r7
    8adc:	40c7883a 	add	r3,r8,r3
    8ae0:	88cb883a 	add	r5,r17,r3
    8ae4:	d8c00617 	ldw	r3,24(sp)
    8ae8:	8089883a 	add	r4,r16,r2
    8aec:	d8800b17 	ldw	r2,44(sp)
    8af0:	18c00104 	addi	r3,r3,4
    8af4:	240d803a 	cmpltu	r6,r4,r16
    8af8:	10c7883a 	add	r3,r2,r3
    8afc:	2013883a 	mov	r9,r4
    8b00:	d8800a17 	ldw	r2,40(sp)
    8b04:	d9000517 	ldw	r4,20(sp)
    8b08:	314d883a 	add	r6,r6,r5
    8b0c:	3015883a 	mov	r10,r6
    8b10:	2088c03a 	cmpne	r4,r4,r2
    8b14:	00880034 	movhi	r2,8192
    8b18:	10bfffc4 	addi	r2,r2,-1
    8b1c:	d9000f15 	stw	r4,60(sp)
    8b20:	d8c01015 	stw	r3,64(sp)
    8b24:	1180162e 	bgeu	r2,r6,8b80 <__muldf3+0x28c>
    8b28:	1811883a 	mov	r8,r3
    8b2c:	101f883a 	mov	r15,r2
    8b30:	980497fa 	slli	r2,r19,31
    8b34:	9016d07a 	srli	r11,r18,1
    8b38:	500697fa 	slli	r3,r10,31
    8b3c:	480cd07a 	srli	r6,r9,1
    8b40:	500ed07a 	srli	r7,r10,1
    8b44:	12d6b03a 	or	r11,r2,r11
    8b48:	00800044 	movi	r2,1
    8b4c:	198cb03a 	or	r6,r3,r6
    8b50:	4888703a 	and	r4,r9,r2
    8b54:	9818d07a 	srli	r12,r19,1
    8b58:	001b883a 	mov	r13,zero
    8b5c:	03a00034 	movhi	r14,32768
    8b60:	3013883a 	mov	r9,r6
    8b64:	3815883a 	mov	r10,r7
    8b68:	4091883a 	add	r8,r8,r2
    8b6c:	20000226 	beq	r4,zero,8b78 <__muldf3+0x284>
    8b70:	5b64b03a 	or	r18,r11,r13
    8b74:	63a6b03a 	or	r19,r12,r14
    8b78:	7abfed36 	bltu	r15,r10,8b30 <__muldf3+0x23c>
    8b7c:	da001015 	stw	r8,64(sp)
    8b80:	00840034 	movhi	r2,4096
    8b84:	10bfffc4 	addi	r2,r2,-1
    8b88:	12801436 	bltu	r2,r10,8bdc <__muldf3+0x2e8>
    8b8c:	da001017 	ldw	r8,64(sp)
    8b90:	101f883a 	mov	r15,r2
    8b94:	4a45883a 	add	r2,r9,r9
    8b98:	124d803a 	cmpltu	r6,r2,r9
    8b9c:	5287883a 	add	r3,r10,r10
    8ba0:	9497883a 	add	r11,r18,r18
    8ba4:	5c8f803a 	cmpltu	r7,r11,r18
    8ba8:	9cd9883a 	add	r12,r19,r19
    8bac:	01000044 	movi	r4,1
    8bb0:	30cd883a 	add	r6,r6,r3
    8bb4:	3b0f883a 	add	r7,r7,r12
    8bb8:	423fffc4 	addi	r8,r8,-1
    8bbc:	1013883a 	mov	r9,r2
    8bc0:	3015883a 	mov	r10,r6
    8bc4:	111ab03a 	or	r13,r2,r4
    8bc8:	98003016 	blt	r19,zero,8c8c <__muldf3+0x398>
    8bcc:	5825883a 	mov	r18,r11
    8bd0:	3827883a 	mov	r19,r7
    8bd4:	7abfef2e 	bgeu	r15,r10,8b94 <__muldf3+0x2a0>
    8bd8:	da001015 	stw	r8,64(sp)
    8bdc:	00803fc4 	movi	r2,255
    8be0:	488e703a 	and	r7,r9,r2
    8be4:	00802004 	movi	r2,128
    8be8:	0007883a 	mov	r3,zero
    8bec:	0011883a 	mov	r8,zero
    8bf0:	38801826 	beq	r7,r2,8c54 <__muldf3+0x360>
    8bf4:	008000c4 	movi	r2,3
    8bf8:	d9000e04 	addi	r4,sp,56
    8bfc:	da801215 	stw	r10,72(sp)
    8c00:	d8800e15 	stw	r2,56(sp)
    8c04:	da401115 	stw	r9,68(sp)
    8c08:	003f6a06 	br	89b4 <__muldf3+0xc0>
    8c0c:	89802126 	beq	r17,r6,8c94 <__muldf3+0x3a0>
    8c10:	0009883a 	mov	r4,zero
    8c14:	5105883a 	add	r2,r10,r4
    8c18:	128d803a 	cmpltu	r6,r2,r10
    8c1c:	5d07883a 	add	r3,r11,r20
    8c20:	30cd883a 	add	r6,r6,r3
    8c24:	0021883a 	mov	r16,zero
    8c28:	0023883a 	mov	r17,zero
    8c2c:	1025883a 	mov	r18,r2
    8c30:	3027883a 	mov	r19,r6
    8c34:	32ff9e2e 	bgeu	r6,r11,8ab0 <__muldf3+0x1bc>
    8c38:	00800044 	movi	r2,1
    8c3c:	8089883a 	add	r4,r16,r2
    8c40:	240d803a 	cmpltu	r6,r4,r16
    8c44:	344d883a 	add	r6,r6,r17
    8c48:	2021883a 	mov	r16,r4
    8c4c:	3023883a 	mov	r17,r6
    8c50:	003f9806 	br	8ab4 <__muldf3+0x1c0>
    8c54:	403fe71e 	bne	r8,zero,8bf4 <__muldf3+0x300>
    8c58:	01004004 	movi	r4,256
    8c5c:	4904703a 	and	r2,r9,r4
    8c60:	10c4b03a 	or	r2,r2,r3
    8c64:	103fe31e 	bne	r2,zero,8bf4 <__muldf3+0x300>
    8c68:	94c4b03a 	or	r2,r18,r19
    8c6c:	103fe126 	beq	r2,zero,8bf4 <__muldf3+0x300>
    8c70:	49c5883a 	add	r2,r9,r7
    8c74:	1251803a 	cmpltu	r8,r2,r9
    8c78:	4291883a 	add	r8,r8,r10
    8c7c:	013fc004 	movi	r4,-256
    8c80:	1112703a 	and	r9,r2,r4
    8c84:	4015883a 	mov	r10,r8
    8c88:	003fda06 	br	8bf4 <__muldf3+0x300>
    8c8c:	6813883a 	mov	r9,r13
    8c90:	003fce06 	br	8bcc <__muldf3+0x2d8>
    8c94:	143f7c36 	bltu	r2,r16,8a88 <__muldf3+0x194>
    8c98:	003fdd06 	br	8c10 <__muldf3+0x31c>
    8c9c:	12bf852e 	bgeu	r2,r10,8ab4 <__muldf3+0x1c0>
    8ca0:	003fe506 	br	8c38 <__muldf3+0x344>
    8ca4:	00800084 	movi	r2,2
    8ca8:	20bf351e 	bne	r4,r2,8980 <__muldf3+0x8c>
    8cac:	01000074 	movhi	r4,1
    8cb0:	2134a104 	addi	r4,r4,-11644
    8cb4:	003f3f06 	br	89b4 <__muldf3+0xc0>

00008cb8 <__divdf3>:
    8cb8:	deffed04 	addi	sp,sp,-76
    8cbc:	dcc01115 	stw	r19,68(sp)
    8cc0:	dcc00404 	addi	r19,sp,16
    8cc4:	2011883a 	mov	r8,r4
    8cc8:	2813883a 	mov	r9,r5
    8ccc:	dc000e15 	stw	r16,56(sp)
    8cd0:	d809883a 	mov	r4,sp
    8cd4:	980b883a 	mov	r5,r19
    8cd8:	dc000904 	addi	r16,sp,36
    8cdc:	dfc01215 	stw	ra,72(sp)
    8ce0:	da400115 	stw	r9,4(sp)
    8ce4:	d9c00315 	stw	r7,12(sp)
    8ce8:	da000015 	stw	r8,0(sp)
    8cec:	d9800215 	stw	r6,8(sp)
    8cf0:	dc801015 	stw	r18,64(sp)
    8cf4:	dc400f15 	stw	r17,60(sp)
    8cf8:	0009a940 	call	9a94 <__unpack_d>
    8cfc:	d9000204 	addi	r4,sp,8
    8d00:	800b883a 	mov	r5,r16
    8d04:	0009a940 	call	9a94 <__unpack_d>
    8d08:	d9000417 	ldw	r4,16(sp)
    8d0c:	00800044 	movi	r2,1
    8d10:	11000b2e 	bgeu	r2,r4,8d40 <__divdf3+0x88>
    8d14:	d9400917 	ldw	r5,36(sp)
    8d18:	1140762e 	bgeu	r2,r5,8ef4 <__divdf3+0x23c>
    8d1c:	d8800517 	ldw	r2,20(sp)
    8d20:	d8c00a17 	ldw	r3,40(sp)
    8d24:	01800104 	movi	r6,4
    8d28:	10c4f03a 	xor	r2,r2,r3
    8d2c:	d8800515 	stw	r2,20(sp)
    8d30:	21800226 	beq	r4,r6,8d3c <__divdf3+0x84>
    8d34:	00800084 	movi	r2,2
    8d38:	2080141e 	bne	r4,r2,8d8c <__divdf3+0xd4>
    8d3c:	29000926 	beq	r5,r4,8d64 <__divdf3+0xac>
    8d40:	9809883a 	mov	r4,r19
    8d44:	00097800 	call	9780 <__pack_d>
    8d48:	dfc01217 	ldw	ra,72(sp)
    8d4c:	dcc01117 	ldw	r19,68(sp)
    8d50:	dc801017 	ldw	r18,64(sp)
    8d54:	dc400f17 	ldw	r17,60(sp)
    8d58:	dc000e17 	ldw	r16,56(sp)
    8d5c:	dec01304 	addi	sp,sp,76
    8d60:	f800283a 	ret
    8d64:	01000074 	movhi	r4,1
    8d68:	2134a104 	addi	r4,r4,-11644
    8d6c:	00097800 	call	9780 <__pack_d>
    8d70:	dfc01217 	ldw	ra,72(sp)
    8d74:	dcc01117 	ldw	r19,68(sp)
    8d78:	dc801017 	ldw	r18,64(sp)
    8d7c:	dc400f17 	ldw	r17,60(sp)
    8d80:	dc000e17 	ldw	r16,56(sp)
    8d84:	dec01304 	addi	sp,sp,76
    8d88:	f800283a 	ret
    8d8c:	29805b26 	beq	r5,r6,8efc <__divdf3+0x244>
    8d90:	28802d26 	beq	r5,r2,8e48 <__divdf3+0x190>
    8d94:	d8c00617 	ldw	r3,24(sp)
    8d98:	d8800b17 	ldw	r2,44(sp)
    8d9c:	d9c00817 	ldw	r7,32(sp)
    8da0:	dc400d17 	ldw	r17,52(sp)
    8da4:	188bc83a 	sub	r5,r3,r2
    8da8:	d9800717 	ldw	r6,28(sp)
    8dac:	dc000c17 	ldw	r16,48(sp)
    8db0:	d9400615 	stw	r5,24(sp)
    8db4:	3c403836 	bltu	r7,r17,8e98 <__divdf3+0x1e0>
    8db8:	89c03626 	beq	r17,r7,8e94 <__divdf3+0x1dc>
    8dbc:	0015883a 	mov	r10,zero
    8dc0:	001d883a 	mov	r14,zero
    8dc4:	02c40034 	movhi	r11,4096
    8dc8:	001f883a 	mov	r15,zero
    8dcc:	003f883a 	mov	ra,zero
    8dd0:	04800f44 	movi	r18,61
    8dd4:	00000f06 	br	8e14 <__divdf3+0x15c>
    8dd8:	601d883a 	mov	r14,r12
    8ddc:	681f883a 	mov	r15,r13
    8de0:	400d883a 	mov	r6,r8
    8de4:	100f883a 	mov	r7,r2
    8de8:	3191883a 	add	r8,r6,r6
    8dec:	5808d07a 	srli	r4,r11,1
    8df0:	4185803a 	cmpltu	r2,r8,r6
    8df4:	39d3883a 	add	r9,r7,r7
    8df8:	28c6b03a 	or	r3,r5,r3
    8dfc:	1245883a 	add	r2,r2,r9
    8e00:	1815883a 	mov	r10,r3
    8e04:	2017883a 	mov	r11,r4
    8e08:	400d883a 	mov	r6,r8
    8e0c:	100f883a 	mov	r7,r2
    8e10:	fc801726 	beq	ra,r18,8e70 <__divdf3+0x1b8>
    8e14:	580a97fa 	slli	r5,r11,31
    8e18:	5006d07a 	srli	r3,r10,1
    8e1c:	ffc00044 	addi	ra,ra,1
    8e20:	3c7ff136 	bltu	r7,r17,8de8 <__divdf3+0x130>
    8e24:	3411c83a 	sub	r8,r6,r16
    8e28:	3205803a 	cmpltu	r2,r6,r8
    8e2c:	3c53c83a 	sub	r9,r7,r17
    8e30:	7298b03a 	or	r12,r14,r10
    8e34:	7adab03a 	or	r13,r15,r11
    8e38:	4885c83a 	sub	r2,r9,r2
    8e3c:	89ffe61e 	bne	r17,r7,8dd8 <__divdf3+0x120>
    8e40:	343fe936 	bltu	r6,r16,8de8 <__divdf3+0x130>
    8e44:	003fe406 	br	8dd8 <__divdf3+0x120>
    8e48:	9809883a 	mov	r4,r19
    8e4c:	d9800415 	stw	r6,16(sp)
    8e50:	00097800 	call	9780 <__pack_d>
    8e54:	dfc01217 	ldw	ra,72(sp)
    8e58:	dcc01117 	ldw	r19,68(sp)
    8e5c:	dc801017 	ldw	r18,64(sp)
    8e60:	dc400f17 	ldw	r17,60(sp)
    8e64:	dc000e17 	ldw	r16,56(sp)
    8e68:	dec01304 	addi	sp,sp,76
    8e6c:	f800283a 	ret
    8e70:	00803fc4 	movi	r2,255
    8e74:	7090703a 	and	r8,r14,r2
    8e78:	00802004 	movi	r2,128
    8e7c:	0007883a 	mov	r3,zero
    8e80:	0013883a 	mov	r9,zero
    8e84:	40800d26 	beq	r8,r2,8ebc <__divdf3+0x204>
    8e88:	dbc00815 	stw	r15,32(sp)
    8e8c:	db800715 	stw	r14,28(sp)
    8e90:	003fab06 	br	8d40 <__divdf3+0x88>
    8e94:	343fc92e 	bgeu	r6,r16,8dbc <__divdf3+0x104>
    8e98:	3185883a 	add	r2,r6,r6
    8e9c:	1189803a 	cmpltu	r4,r2,r6
    8ea0:	39c7883a 	add	r3,r7,r7
    8ea4:	20c9883a 	add	r4,r4,r3
    8ea8:	297fffc4 	addi	r5,r5,-1
    8eac:	100d883a 	mov	r6,r2
    8eb0:	200f883a 	mov	r7,r4
    8eb4:	d9400615 	stw	r5,24(sp)
    8eb8:	003fc006 	br	8dbc <__divdf3+0x104>
    8ebc:	483ff21e 	bne	r9,zero,8e88 <__divdf3+0x1d0>
    8ec0:	01004004 	movi	r4,256
    8ec4:	7104703a 	and	r2,r14,r4
    8ec8:	10c4b03a 	or	r2,r2,r3
    8ecc:	103fee1e 	bne	r2,zero,8e88 <__divdf3+0x1d0>
    8ed0:	31c4b03a 	or	r2,r6,r7
    8ed4:	103fec26 	beq	r2,zero,8e88 <__divdf3+0x1d0>
    8ed8:	7205883a 	add	r2,r14,r8
    8edc:	1391803a 	cmpltu	r8,r2,r14
    8ee0:	43d1883a 	add	r8,r8,r15
    8ee4:	013fc004 	movi	r4,-256
    8ee8:	111c703a 	and	r14,r2,r4
    8eec:	401f883a 	mov	r15,r8
    8ef0:	003fe506 	br	8e88 <__divdf3+0x1d0>
    8ef4:	8009883a 	mov	r4,r16
    8ef8:	003f9206 	br	8d44 <__divdf3+0x8c>
    8efc:	9809883a 	mov	r4,r19
    8f00:	d8000715 	stw	zero,28(sp)
    8f04:	d8000815 	stw	zero,32(sp)
    8f08:	d8000615 	stw	zero,24(sp)
    8f0c:	003f8d06 	br	8d44 <__divdf3+0x8c>

00008f10 <__eqdf2>:
    8f10:	deffef04 	addi	sp,sp,-68
    8f14:	dc400f15 	stw	r17,60(sp)
    8f18:	dc400404 	addi	r17,sp,16
    8f1c:	2005883a 	mov	r2,r4
    8f20:	2807883a 	mov	r3,r5
    8f24:	dc000e15 	stw	r16,56(sp)
    8f28:	d809883a 	mov	r4,sp
    8f2c:	880b883a 	mov	r5,r17
    8f30:	dc000904 	addi	r16,sp,36
    8f34:	d8c00115 	stw	r3,4(sp)
    8f38:	d8800015 	stw	r2,0(sp)
    8f3c:	d9800215 	stw	r6,8(sp)
    8f40:	dfc01015 	stw	ra,64(sp)
    8f44:	d9c00315 	stw	r7,12(sp)
    8f48:	0009a940 	call	9a94 <__unpack_d>
    8f4c:	d9000204 	addi	r4,sp,8
    8f50:	800b883a 	mov	r5,r16
    8f54:	0009a940 	call	9a94 <__unpack_d>
    8f58:	d8800417 	ldw	r2,16(sp)
    8f5c:	00c00044 	movi	r3,1
    8f60:	180d883a 	mov	r6,r3
    8f64:	1880062e 	bgeu	r3,r2,8f80 <__eqdf2+0x70>
    8f68:	d8800917 	ldw	r2,36(sp)
    8f6c:	8809883a 	mov	r4,r17
    8f70:	800b883a 	mov	r5,r16
    8f74:	1880022e 	bgeu	r3,r2,8f80 <__eqdf2+0x70>
    8f78:	0009bcc0 	call	9bcc <__fpcmp_parts_d>
    8f7c:	100d883a 	mov	r6,r2
    8f80:	3005883a 	mov	r2,r6
    8f84:	dfc01017 	ldw	ra,64(sp)
    8f88:	dc400f17 	ldw	r17,60(sp)
    8f8c:	dc000e17 	ldw	r16,56(sp)
    8f90:	dec01104 	addi	sp,sp,68
    8f94:	f800283a 	ret

00008f98 <__nedf2>:
    8f98:	deffef04 	addi	sp,sp,-68
    8f9c:	dc400f15 	stw	r17,60(sp)
    8fa0:	dc400404 	addi	r17,sp,16
    8fa4:	2005883a 	mov	r2,r4
    8fa8:	2807883a 	mov	r3,r5
    8fac:	dc000e15 	stw	r16,56(sp)
    8fb0:	d809883a 	mov	r4,sp
    8fb4:	880b883a 	mov	r5,r17
    8fb8:	dc000904 	addi	r16,sp,36
    8fbc:	d8c00115 	stw	r3,4(sp)
    8fc0:	d8800015 	stw	r2,0(sp)
    8fc4:	d9800215 	stw	r6,8(sp)
    8fc8:	dfc01015 	stw	ra,64(sp)
    8fcc:	d9c00315 	stw	r7,12(sp)
    8fd0:	0009a940 	call	9a94 <__unpack_d>
    8fd4:	d9000204 	addi	r4,sp,8
    8fd8:	800b883a 	mov	r5,r16
    8fdc:	0009a940 	call	9a94 <__unpack_d>
    8fe0:	d8800417 	ldw	r2,16(sp)
    8fe4:	00c00044 	movi	r3,1
    8fe8:	180d883a 	mov	r6,r3
    8fec:	1880062e 	bgeu	r3,r2,9008 <__nedf2+0x70>
    8ff0:	d8800917 	ldw	r2,36(sp)
    8ff4:	8809883a 	mov	r4,r17
    8ff8:	800b883a 	mov	r5,r16
    8ffc:	1880022e 	bgeu	r3,r2,9008 <__nedf2+0x70>
    9000:	0009bcc0 	call	9bcc <__fpcmp_parts_d>
    9004:	100d883a 	mov	r6,r2
    9008:	3005883a 	mov	r2,r6
    900c:	dfc01017 	ldw	ra,64(sp)
    9010:	dc400f17 	ldw	r17,60(sp)
    9014:	dc000e17 	ldw	r16,56(sp)
    9018:	dec01104 	addi	sp,sp,68
    901c:	f800283a 	ret

00009020 <__gtdf2>:
    9020:	deffef04 	addi	sp,sp,-68
    9024:	dc400f15 	stw	r17,60(sp)
    9028:	dc400404 	addi	r17,sp,16
    902c:	2005883a 	mov	r2,r4
    9030:	2807883a 	mov	r3,r5
    9034:	dc000e15 	stw	r16,56(sp)
    9038:	d809883a 	mov	r4,sp
    903c:	880b883a 	mov	r5,r17
    9040:	dc000904 	addi	r16,sp,36
    9044:	d8c00115 	stw	r3,4(sp)
    9048:	d8800015 	stw	r2,0(sp)
    904c:	d9800215 	stw	r6,8(sp)
    9050:	dfc01015 	stw	ra,64(sp)
    9054:	d9c00315 	stw	r7,12(sp)
    9058:	0009a940 	call	9a94 <__unpack_d>
    905c:	d9000204 	addi	r4,sp,8
    9060:	800b883a 	mov	r5,r16
    9064:	0009a940 	call	9a94 <__unpack_d>
    9068:	d8800417 	ldw	r2,16(sp)
    906c:	00c00044 	movi	r3,1
    9070:	01bfffc4 	movi	r6,-1
    9074:	1880062e 	bgeu	r3,r2,9090 <__gtdf2+0x70>
    9078:	d8800917 	ldw	r2,36(sp)
    907c:	8809883a 	mov	r4,r17
    9080:	800b883a 	mov	r5,r16
    9084:	1880022e 	bgeu	r3,r2,9090 <__gtdf2+0x70>
    9088:	0009bcc0 	call	9bcc <__fpcmp_parts_d>
    908c:	100d883a 	mov	r6,r2
    9090:	3005883a 	mov	r2,r6
    9094:	dfc01017 	ldw	ra,64(sp)
    9098:	dc400f17 	ldw	r17,60(sp)
    909c:	dc000e17 	ldw	r16,56(sp)
    90a0:	dec01104 	addi	sp,sp,68
    90a4:	f800283a 	ret

000090a8 <__gedf2>:
    90a8:	deffef04 	addi	sp,sp,-68
    90ac:	dc400f15 	stw	r17,60(sp)
    90b0:	dc400404 	addi	r17,sp,16
    90b4:	2005883a 	mov	r2,r4
    90b8:	2807883a 	mov	r3,r5
    90bc:	dc000e15 	stw	r16,56(sp)
    90c0:	d809883a 	mov	r4,sp
    90c4:	880b883a 	mov	r5,r17
    90c8:	dc000904 	addi	r16,sp,36
    90cc:	d8c00115 	stw	r3,4(sp)
    90d0:	d8800015 	stw	r2,0(sp)
    90d4:	d9800215 	stw	r6,8(sp)
    90d8:	dfc01015 	stw	ra,64(sp)
    90dc:	d9c00315 	stw	r7,12(sp)
    90e0:	0009a940 	call	9a94 <__unpack_d>
    90e4:	d9000204 	addi	r4,sp,8
    90e8:	800b883a 	mov	r5,r16
    90ec:	0009a940 	call	9a94 <__unpack_d>
    90f0:	d8800417 	ldw	r2,16(sp)
    90f4:	00c00044 	movi	r3,1
    90f8:	01bfffc4 	movi	r6,-1
    90fc:	1880062e 	bgeu	r3,r2,9118 <__gedf2+0x70>
    9100:	d8800917 	ldw	r2,36(sp)
    9104:	8809883a 	mov	r4,r17
    9108:	800b883a 	mov	r5,r16
    910c:	1880022e 	bgeu	r3,r2,9118 <__gedf2+0x70>
    9110:	0009bcc0 	call	9bcc <__fpcmp_parts_d>
    9114:	100d883a 	mov	r6,r2
    9118:	3005883a 	mov	r2,r6
    911c:	dfc01017 	ldw	ra,64(sp)
    9120:	dc400f17 	ldw	r17,60(sp)
    9124:	dc000e17 	ldw	r16,56(sp)
    9128:	dec01104 	addi	sp,sp,68
    912c:	f800283a 	ret

00009130 <__ltdf2>:
    9130:	deffef04 	addi	sp,sp,-68
    9134:	dc400f15 	stw	r17,60(sp)
    9138:	dc400404 	addi	r17,sp,16
    913c:	2005883a 	mov	r2,r4
    9140:	2807883a 	mov	r3,r5
    9144:	dc000e15 	stw	r16,56(sp)
    9148:	d809883a 	mov	r4,sp
    914c:	880b883a 	mov	r5,r17
    9150:	dc000904 	addi	r16,sp,36
    9154:	d8c00115 	stw	r3,4(sp)
    9158:	d8800015 	stw	r2,0(sp)
    915c:	d9800215 	stw	r6,8(sp)
    9160:	dfc01015 	stw	ra,64(sp)
    9164:	d9c00315 	stw	r7,12(sp)
    9168:	0009a940 	call	9a94 <__unpack_d>
    916c:	d9000204 	addi	r4,sp,8
    9170:	800b883a 	mov	r5,r16
    9174:	0009a940 	call	9a94 <__unpack_d>
    9178:	d8800417 	ldw	r2,16(sp)
    917c:	00c00044 	movi	r3,1
    9180:	180d883a 	mov	r6,r3
    9184:	1880062e 	bgeu	r3,r2,91a0 <__ltdf2+0x70>
    9188:	d8800917 	ldw	r2,36(sp)
    918c:	8809883a 	mov	r4,r17
    9190:	800b883a 	mov	r5,r16
    9194:	1880022e 	bgeu	r3,r2,91a0 <__ltdf2+0x70>
    9198:	0009bcc0 	call	9bcc <__fpcmp_parts_d>
    919c:	100d883a 	mov	r6,r2
    91a0:	3005883a 	mov	r2,r6
    91a4:	dfc01017 	ldw	ra,64(sp)
    91a8:	dc400f17 	ldw	r17,60(sp)
    91ac:	dc000e17 	ldw	r16,56(sp)
    91b0:	dec01104 	addi	sp,sp,68
    91b4:	f800283a 	ret

000091b8 <__floatsidf>:
    91b8:	2006d7fa 	srli	r3,r4,31
    91bc:	defff604 	addi	sp,sp,-40
    91c0:	008000c4 	movi	r2,3
    91c4:	dfc00915 	stw	ra,36(sp)
    91c8:	dcc00815 	stw	r19,32(sp)
    91cc:	dc800715 	stw	r18,28(sp)
    91d0:	dc400615 	stw	r17,24(sp)
    91d4:	dc000515 	stw	r16,20(sp)
    91d8:	d8800015 	stw	r2,0(sp)
    91dc:	d8c00115 	stw	r3,4(sp)
    91e0:	20000f1e 	bne	r4,zero,9220 <__floatsidf+0x68>
    91e4:	00800084 	movi	r2,2
    91e8:	d8800015 	stw	r2,0(sp)
    91ec:	d809883a 	mov	r4,sp
    91f0:	00097800 	call	9780 <__pack_d>
    91f4:	1009883a 	mov	r4,r2
    91f8:	180b883a 	mov	r5,r3
    91fc:	2005883a 	mov	r2,r4
    9200:	2807883a 	mov	r3,r5
    9204:	dfc00917 	ldw	ra,36(sp)
    9208:	dcc00817 	ldw	r19,32(sp)
    920c:	dc800717 	ldw	r18,28(sp)
    9210:	dc400617 	ldw	r17,24(sp)
    9214:	dc000517 	ldw	r16,20(sp)
    9218:	dec00a04 	addi	sp,sp,40
    921c:	f800283a 	ret
    9220:	00800f04 	movi	r2,60
    9224:	1807003a 	cmpeq	r3,r3,zero
    9228:	d8800215 	stw	r2,8(sp)
    922c:	18001126 	beq	r3,zero,9274 <__floatsidf+0xbc>
    9230:	0027883a 	mov	r19,zero
    9234:	2025883a 	mov	r18,r4
    9238:	d9000315 	stw	r4,12(sp)
    923c:	dcc00415 	stw	r19,16(sp)
    9240:	00097000 	call	9700 <__clzsi2>
    9244:	11000744 	addi	r4,r2,29
    9248:	013fe80e 	bge	zero,r4,91ec <__floatsidf+0x34>
    924c:	10bfff44 	addi	r2,r2,-3
    9250:	10000c16 	blt	r2,zero,9284 <__floatsidf+0xcc>
    9254:	90a2983a 	sll	r17,r18,r2
    9258:	0021883a 	mov	r16,zero
    925c:	d8800217 	ldw	r2,8(sp)
    9260:	dc400415 	stw	r17,16(sp)
    9264:	dc000315 	stw	r16,12(sp)
    9268:	1105c83a 	sub	r2,r2,r4
    926c:	d8800215 	stw	r2,8(sp)
    9270:	003fde06 	br	91ec <__floatsidf+0x34>
    9274:	00a00034 	movhi	r2,32768
    9278:	20800a26 	beq	r4,r2,92a4 <__floatsidf+0xec>
    927c:	0109c83a 	sub	r4,zero,r4
    9280:	003feb06 	br	9230 <__floatsidf+0x78>
    9284:	9006d07a 	srli	r3,r18,1
    9288:	008007c4 	movi	r2,31
    928c:	1105c83a 	sub	r2,r2,r4
    9290:	1886d83a 	srl	r3,r3,r2
    9294:	9922983a 	sll	r17,r19,r4
    9298:	9120983a 	sll	r16,r18,r4
    929c:	1c62b03a 	or	r17,r3,r17
    92a0:	003fee06 	br	925c <__floatsidf+0xa4>
    92a4:	0009883a 	mov	r4,zero
    92a8:	01707834 	movhi	r5,49632
    92ac:	003fd306 	br	91fc <__floatsidf+0x44>

000092b0 <__fixdfsi>:
    92b0:	defff804 	addi	sp,sp,-32
    92b4:	2005883a 	mov	r2,r4
    92b8:	2807883a 	mov	r3,r5
    92bc:	d809883a 	mov	r4,sp
    92c0:	d9400204 	addi	r5,sp,8
    92c4:	d8c00115 	stw	r3,4(sp)
    92c8:	d8800015 	stw	r2,0(sp)
    92cc:	dfc00715 	stw	ra,28(sp)
    92d0:	0009a940 	call	9a94 <__unpack_d>
    92d4:	d8c00217 	ldw	r3,8(sp)
    92d8:	00800084 	movi	r2,2
    92dc:	1880051e 	bne	r3,r2,92f4 <__fixdfsi+0x44>
    92e0:	0007883a 	mov	r3,zero
    92e4:	1805883a 	mov	r2,r3
    92e8:	dfc00717 	ldw	ra,28(sp)
    92ec:	dec00804 	addi	sp,sp,32
    92f0:	f800283a 	ret
    92f4:	00800044 	movi	r2,1
    92f8:	10fff92e 	bgeu	r2,r3,92e0 <__fixdfsi+0x30>
    92fc:	00800104 	movi	r2,4
    9300:	18800426 	beq	r3,r2,9314 <__fixdfsi+0x64>
    9304:	d8c00417 	ldw	r3,16(sp)
    9308:	183ff516 	blt	r3,zero,92e0 <__fixdfsi+0x30>
    930c:	00800784 	movi	r2,30
    9310:	10c0080e 	bge	r2,r3,9334 <__fixdfsi+0x84>
    9314:	d8800317 	ldw	r2,12(sp)
    9318:	1000121e 	bne	r2,zero,9364 <__fixdfsi+0xb4>
    931c:	00e00034 	movhi	r3,32768
    9320:	18ffffc4 	addi	r3,r3,-1
    9324:	1805883a 	mov	r2,r3
    9328:	dfc00717 	ldw	ra,28(sp)
    932c:	dec00804 	addi	sp,sp,32
    9330:	f800283a 	ret
    9334:	00800f04 	movi	r2,60
    9338:	10d1c83a 	sub	r8,r2,r3
    933c:	40bff804 	addi	r2,r8,-32
    9340:	d9800517 	ldw	r6,20(sp)
    9344:	d9c00617 	ldw	r7,24(sp)
    9348:	10000816 	blt	r2,zero,936c <__fixdfsi+0xbc>
    934c:	3888d83a 	srl	r4,r7,r2
    9350:	d8800317 	ldw	r2,12(sp)
    9354:	2007883a 	mov	r3,r4
    9358:	103fe226 	beq	r2,zero,92e4 <__fixdfsi+0x34>
    935c:	0107c83a 	sub	r3,zero,r4
    9360:	003fe006 	br	92e4 <__fixdfsi+0x34>
    9364:	00e00034 	movhi	r3,32768
    9368:	003fde06 	br	92e4 <__fixdfsi+0x34>
    936c:	39c7883a 	add	r3,r7,r7
    9370:	008007c4 	movi	r2,31
    9374:	1205c83a 	sub	r2,r2,r8
    9378:	1886983a 	sll	r3,r3,r2
    937c:	3208d83a 	srl	r4,r6,r8
    9380:	1908b03a 	or	r4,r3,r4
    9384:	003ff206 	br	9350 <__fixdfsi+0xa0>

00009388 <__floatunsidf>:
    9388:	defff204 	addi	sp,sp,-56
    938c:	dfc00d15 	stw	ra,52(sp)
    9390:	ddc00c15 	stw	r23,48(sp)
    9394:	dd800b15 	stw	r22,44(sp)
    9398:	dd400a15 	stw	r21,40(sp)
    939c:	dd000915 	stw	r20,36(sp)
    93a0:	dcc00815 	stw	r19,32(sp)
    93a4:	dc800715 	stw	r18,28(sp)
    93a8:	dc400615 	stw	r17,24(sp)
    93ac:	dc000515 	stw	r16,20(sp)
    93b0:	d8000115 	stw	zero,4(sp)
    93b4:	20000f1e 	bne	r4,zero,93f4 <__floatunsidf+0x6c>
    93b8:	00800084 	movi	r2,2
    93bc:	d8800015 	stw	r2,0(sp)
    93c0:	d809883a 	mov	r4,sp
    93c4:	00097800 	call	9780 <__pack_d>
    93c8:	dfc00d17 	ldw	ra,52(sp)
    93cc:	ddc00c17 	ldw	r23,48(sp)
    93d0:	dd800b17 	ldw	r22,44(sp)
    93d4:	dd400a17 	ldw	r21,40(sp)
    93d8:	dd000917 	ldw	r20,36(sp)
    93dc:	dcc00817 	ldw	r19,32(sp)
    93e0:	dc800717 	ldw	r18,28(sp)
    93e4:	dc400617 	ldw	r17,24(sp)
    93e8:	dc000517 	ldw	r16,20(sp)
    93ec:	dec00e04 	addi	sp,sp,56
    93f0:	f800283a 	ret
    93f4:	008000c4 	movi	r2,3
    93f8:	00c00f04 	movi	r3,60
    93fc:	002f883a 	mov	r23,zero
    9400:	202d883a 	mov	r22,r4
    9404:	d8800015 	stw	r2,0(sp)
    9408:	d8c00215 	stw	r3,8(sp)
    940c:	d9000315 	stw	r4,12(sp)
    9410:	ddc00415 	stw	r23,16(sp)
    9414:	00097000 	call	9700 <__clzsi2>
    9418:	12400744 	addi	r9,r2,29
    941c:	48000b16 	blt	r9,zero,944c <__floatunsidf+0xc4>
    9420:	483fe726 	beq	r9,zero,93c0 <__floatunsidf+0x38>
    9424:	10bfff44 	addi	r2,r2,-3
    9428:	10002e16 	blt	r2,zero,94e4 <__floatunsidf+0x15c>
    942c:	b0a2983a 	sll	r17,r22,r2
    9430:	0021883a 	mov	r16,zero
    9434:	d8800217 	ldw	r2,8(sp)
    9438:	dc400415 	stw	r17,16(sp)
    943c:	dc000315 	stw	r16,12(sp)
    9440:	1245c83a 	sub	r2,r2,r9
    9444:	d8800215 	stw	r2,8(sp)
    9448:	003fdd06 	br	93c0 <__floatunsidf+0x38>
    944c:	0255c83a 	sub	r10,zero,r9
    9450:	51bff804 	addi	r6,r10,-32
    9454:	30001b16 	blt	r6,zero,94c4 <__floatunsidf+0x13c>
    9458:	b9a8d83a 	srl	r20,r23,r6
    945c:	002b883a 	mov	r21,zero
    9460:	000f883a 	mov	r7,zero
    9464:	01000044 	movi	r4,1
    9468:	0011883a 	mov	r8,zero
    946c:	30002516 	blt	r6,zero,9504 <__floatunsidf+0x17c>
    9470:	21a6983a 	sll	r19,r4,r6
    9474:	0025883a 	mov	r18,zero
    9478:	00bfffc4 	movi	r2,-1
    947c:	9089883a 	add	r4,r18,r2
    9480:	988b883a 	add	r5,r19,r2
    9484:	248d803a 	cmpltu	r6,r4,r18
    9488:	314b883a 	add	r5,r6,r5
    948c:	b104703a 	and	r2,r22,r4
    9490:	b946703a 	and	r3,r23,r5
    9494:	10c4b03a 	or	r2,r2,r3
    9498:	10000226 	beq	r2,zero,94a4 <__floatunsidf+0x11c>
    949c:	01c00044 	movi	r7,1
    94a0:	0011883a 	mov	r8,zero
    94a4:	d9000217 	ldw	r4,8(sp)
    94a8:	a1c4b03a 	or	r2,r20,r7
    94ac:	aa06b03a 	or	r3,r21,r8
    94b0:	2249c83a 	sub	r4,r4,r9
    94b4:	d8c00415 	stw	r3,16(sp)
    94b8:	d9000215 	stw	r4,8(sp)
    94bc:	d8800315 	stw	r2,12(sp)
    94c0:	003fbf06 	br	93c0 <__floatunsidf+0x38>
    94c4:	bdc7883a 	add	r3,r23,r23
    94c8:	008007c4 	movi	r2,31
    94cc:	1285c83a 	sub	r2,r2,r10
    94d0:	1886983a 	sll	r3,r3,r2
    94d4:	b2a8d83a 	srl	r20,r22,r10
    94d8:	baaad83a 	srl	r21,r23,r10
    94dc:	1d28b03a 	or	r20,r3,r20
    94e0:	003fdf06 	br	9460 <__floatunsidf+0xd8>
    94e4:	b006d07a 	srli	r3,r22,1
    94e8:	008007c4 	movi	r2,31
    94ec:	1245c83a 	sub	r2,r2,r9
    94f0:	1886d83a 	srl	r3,r3,r2
    94f4:	ba62983a 	sll	r17,r23,r9
    94f8:	b260983a 	sll	r16,r22,r9
    94fc:	1c62b03a 	or	r17,r3,r17
    9500:	003fcc06 	br	9434 <__floatunsidf+0xac>
    9504:	2006d07a 	srli	r3,r4,1
    9508:	008007c4 	movi	r2,31
    950c:	1285c83a 	sub	r2,r2,r10
    9510:	18a6d83a 	srl	r19,r3,r2
    9514:	22a4983a 	sll	r18,r4,r10
    9518:	003fd706 	br	9478 <__floatunsidf+0xf0>

0000951c <udivmodsi4>:
    951c:	29001b2e 	bgeu	r5,r4,958c <udivmodsi4+0x70>
    9520:	28001a16 	blt	r5,zero,958c <udivmodsi4+0x70>
    9524:	00800044 	movi	r2,1
    9528:	0007883a 	mov	r3,zero
    952c:	01c007c4 	movi	r7,31
    9530:	00000306 	br	9540 <udivmodsi4+0x24>
    9534:	19c01326 	beq	r3,r7,9584 <udivmodsi4+0x68>
    9538:	18c00044 	addi	r3,r3,1
    953c:	28000416 	blt	r5,zero,9550 <udivmodsi4+0x34>
    9540:	294b883a 	add	r5,r5,r5
    9544:	1085883a 	add	r2,r2,r2
    9548:	293ffa36 	bltu	r5,r4,9534 <udivmodsi4+0x18>
    954c:	10000d26 	beq	r2,zero,9584 <udivmodsi4+0x68>
    9550:	0007883a 	mov	r3,zero
    9554:	21400236 	bltu	r4,r5,9560 <udivmodsi4+0x44>
    9558:	2149c83a 	sub	r4,r4,r5
    955c:	1886b03a 	or	r3,r3,r2
    9560:	1004d07a 	srli	r2,r2,1
    9564:	280ad07a 	srli	r5,r5,1
    9568:	103ffa1e 	bne	r2,zero,9554 <udivmodsi4+0x38>
    956c:	30000226 	beq	r6,zero,9578 <udivmodsi4+0x5c>
    9570:	2005883a 	mov	r2,r4
    9574:	f800283a 	ret
    9578:	1809883a 	mov	r4,r3
    957c:	2005883a 	mov	r2,r4
    9580:	f800283a 	ret
    9584:	0007883a 	mov	r3,zero
    9588:	003ff806 	br	956c <udivmodsi4+0x50>
    958c:	00800044 	movi	r2,1
    9590:	0007883a 	mov	r3,zero
    9594:	003fef06 	br	9554 <udivmodsi4+0x38>

00009598 <__divsi3>:
    9598:	defffe04 	addi	sp,sp,-8
    959c:	dc000015 	stw	r16,0(sp)
    95a0:	dfc00115 	stw	ra,4(sp)
    95a4:	0021883a 	mov	r16,zero
    95a8:	20000c16 	blt	r4,zero,95dc <__divsi3+0x44>
    95ac:	000d883a 	mov	r6,zero
    95b0:	28000e16 	blt	r5,zero,95ec <__divsi3+0x54>
    95b4:	000951c0 	call	951c <udivmodsi4>
    95b8:	1007883a 	mov	r3,r2
    95bc:	8005003a 	cmpeq	r2,r16,zero
    95c0:	1000011e 	bne	r2,zero,95c8 <__divsi3+0x30>
    95c4:	00c7c83a 	sub	r3,zero,r3
    95c8:	1805883a 	mov	r2,r3
    95cc:	dfc00117 	ldw	ra,4(sp)
    95d0:	dc000017 	ldw	r16,0(sp)
    95d4:	dec00204 	addi	sp,sp,8
    95d8:	f800283a 	ret
    95dc:	0109c83a 	sub	r4,zero,r4
    95e0:	04000044 	movi	r16,1
    95e4:	000d883a 	mov	r6,zero
    95e8:	283ff20e 	bge	r5,zero,95b4 <__divsi3+0x1c>
    95ec:	014bc83a 	sub	r5,zero,r5
    95f0:	8021003a 	cmpeq	r16,r16,zero
    95f4:	003fef06 	br	95b4 <__divsi3+0x1c>

000095f8 <__modsi3>:
    95f8:	deffff04 	addi	sp,sp,-4
    95fc:	dfc00015 	stw	ra,0(sp)
    9600:	01800044 	movi	r6,1
    9604:	2807883a 	mov	r3,r5
    9608:	20000416 	blt	r4,zero,961c <__modsi3+0x24>
    960c:	28000c16 	blt	r5,zero,9640 <__modsi3+0x48>
    9610:	dfc00017 	ldw	ra,0(sp)
    9614:	dec00104 	addi	sp,sp,4
    9618:	000951c1 	jmpi	951c <udivmodsi4>
    961c:	0109c83a 	sub	r4,zero,r4
    9620:	28000b16 	blt	r5,zero,9650 <__modsi3+0x58>
    9624:	180b883a 	mov	r5,r3
    9628:	01800044 	movi	r6,1
    962c:	000951c0 	call	951c <udivmodsi4>
    9630:	0085c83a 	sub	r2,zero,r2
    9634:	dfc00017 	ldw	ra,0(sp)
    9638:	dec00104 	addi	sp,sp,4
    963c:	f800283a 	ret
    9640:	014bc83a 	sub	r5,zero,r5
    9644:	dfc00017 	ldw	ra,0(sp)
    9648:	dec00104 	addi	sp,sp,4
    964c:	000951c1 	jmpi	951c <udivmodsi4>
    9650:	0147c83a 	sub	r3,zero,r5
    9654:	003ff306 	br	9624 <__modsi3+0x2c>

00009658 <__udivsi3>:
    9658:	000d883a 	mov	r6,zero
    965c:	000951c1 	jmpi	951c <udivmodsi4>

00009660 <__umodsi3>:
    9660:	01800044 	movi	r6,1
    9664:	000951c1 	jmpi	951c <udivmodsi4>

00009668 <__muldi3>:
    9668:	2011883a 	mov	r8,r4
    966c:	427fffcc 	andi	r9,r8,65535
    9670:	4018d43a 	srli	r12,r8,16
    9674:	32bfffcc 	andi	r10,r6,65535
    9678:	3016d43a 	srli	r11,r6,16
    967c:	4a85383a 	mul	r2,r9,r10
    9680:	6295383a 	mul	r10,r12,r10
    9684:	4ad3383a 	mul	r9,r9,r11
    9688:	113fffcc 	andi	r4,r2,65535
    968c:	1004d43a 	srli	r2,r2,16
    9690:	4a93883a 	add	r9,r9,r10
    9694:	3807883a 	mov	r3,r7
    9698:	1245883a 	add	r2,r2,r9
    969c:	280f883a 	mov	r7,r5
    96a0:	180b883a 	mov	r5,r3
    96a4:	1006943a 	slli	r3,r2,16
    96a8:	defffd04 	addi	sp,sp,-12
    96ac:	dc800215 	stw	r18,8(sp)
    96b0:	1907883a 	add	r3,r3,r4
    96b4:	dc400115 	stw	r17,4(sp)
    96b8:	dc000015 	stw	r16,0(sp)
    96bc:	4165383a 	mul	r18,r8,r5
    96c0:	31e3383a 	mul	r17,r6,r7
    96c4:	1012d43a 	srli	r9,r2,16
    96c8:	62d9383a 	mul	r12,r12,r11
    96cc:	181f883a 	mov	r15,r3
    96d0:	1280022e 	bgeu	r2,r10,96dc <__muldi3+0x74>
    96d4:	00800074 	movhi	r2,1
    96d8:	6099883a 	add	r12,r12,r2
    96dc:	624d883a 	add	r6,r12,r9
    96e0:	9187883a 	add	r3,r18,r6
    96e4:	88c7883a 	add	r3,r17,r3
    96e8:	7805883a 	mov	r2,r15
    96ec:	dc800217 	ldw	r18,8(sp)
    96f0:	dc400117 	ldw	r17,4(sp)
    96f4:	dc000017 	ldw	r16,0(sp)
    96f8:	dec00304 	addi	sp,sp,12
    96fc:	f800283a 	ret

00009700 <__clzsi2>:
    9700:	00bfffd4 	movui	r2,65535
    9704:	11000e36 	bltu	r2,r4,9740 <__clzsi2+0x40>
    9708:	00803fc4 	movi	r2,255
    970c:	01400204 	movi	r5,8
    9710:	0007883a 	mov	r3,zero
    9714:	11001036 	bltu	r2,r4,9758 <__clzsi2+0x58>
    9718:	000b883a 	mov	r5,zero
    971c:	20c6d83a 	srl	r3,r4,r3
    9720:	00800074 	movhi	r2,1
    9724:	10b4a604 	addi	r2,r2,-11624
    9728:	1887883a 	add	r3,r3,r2
    972c:	18800003 	ldbu	r2,0(r3)
    9730:	00c00804 	movi	r3,32
    9734:	2885883a 	add	r2,r5,r2
    9738:	1885c83a 	sub	r2,r3,r2
    973c:	f800283a 	ret
    9740:	01400404 	movi	r5,16
    9744:	00804034 	movhi	r2,256
    9748:	10bfffc4 	addi	r2,r2,-1
    974c:	2807883a 	mov	r3,r5
    9750:	113ff22e 	bgeu	r2,r4,971c <__clzsi2+0x1c>
    9754:	01400604 	movi	r5,24
    9758:	2807883a 	mov	r3,r5
    975c:	20c6d83a 	srl	r3,r4,r3
    9760:	00800074 	movhi	r2,1
    9764:	10b4a604 	addi	r2,r2,-11624
    9768:	1887883a 	add	r3,r3,r2
    976c:	18800003 	ldbu	r2,0(r3)
    9770:	00c00804 	movi	r3,32
    9774:	2885883a 	add	r2,r5,r2
    9778:	1885c83a 	sub	r2,r3,r2
    977c:	f800283a 	ret

00009780 <__pack_d>:
    9780:	20c00017 	ldw	r3,0(r4)
    9784:	defffd04 	addi	sp,sp,-12
    9788:	dc000015 	stw	r16,0(sp)
    978c:	dc800215 	stw	r18,8(sp)
    9790:	dc400115 	stw	r17,4(sp)
    9794:	00800044 	movi	r2,1
    9798:	22000317 	ldw	r8,12(r4)
    979c:	001f883a 	mov	r15,zero
    97a0:	22400417 	ldw	r9,16(r4)
    97a4:	24000117 	ldw	r16,4(r4)
    97a8:	10c0552e 	bgeu	r2,r3,9900 <__pack_d+0x180>
    97ac:	00800104 	movi	r2,4
    97b0:	18804f26 	beq	r3,r2,98f0 <__pack_d+0x170>
    97b4:	00800084 	movi	r2,2
    97b8:	18800226 	beq	r3,r2,97c4 <__pack_d+0x44>
    97bc:	4244b03a 	or	r2,r8,r9
    97c0:	10001a1e 	bne	r2,zero,982c <__pack_d+0xac>
    97c4:	000d883a 	mov	r6,zero
    97c8:	000f883a 	mov	r7,zero
    97cc:	0011883a 	mov	r8,zero
    97d0:	00800434 	movhi	r2,16
    97d4:	10bfffc4 	addi	r2,r2,-1
    97d8:	301d883a 	mov	r14,r6
    97dc:	3884703a 	and	r2,r7,r2
    97e0:	400a953a 	slli	r5,r8,20
    97e4:	79bffc2c 	andhi	r6,r15,65520
    97e8:	308cb03a 	or	r6,r6,r2
    97ec:	00e00434 	movhi	r3,32784
    97f0:	18ffffc4 	addi	r3,r3,-1
    97f4:	800497fa 	slli	r2,r16,31
    97f8:	30c6703a 	and	r3,r6,r3
    97fc:	1946b03a 	or	r3,r3,r5
    9800:	01600034 	movhi	r5,32768
    9804:	297fffc4 	addi	r5,r5,-1
    9808:	194a703a 	and	r5,r3,r5
    980c:	288ab03a 	or	r5,r5,r2
    9810:	2807883a 	mov	r3,r5
    9814:	7005883a 	mov	r2,r14
    9818:	dc800217 	ldw	r18,8(sp)
    981c:	dc400117 	ldw	r17,4(sp)
    9820:	dc000017 	ldw	r16,0(sp)
    9824:	dec00304 	addi	sp,sp,12
    9828:	f800283a 	ret
    982c:	21000217 	ldw	r4,8(r4)
    9830:	00bf0084 	movi	r2,-1022
    9834:	20803f16 	blt	r4,r2,9934 <__pack_d+0x1b4>
    9838:	0080ffc4 	movi	r2,1023
    983c:	11002c16 	blt	r2,r4,98f0 <__pack_d+0x170>
    9840:	00803fc4 	movi	r2,255
    9844:	408c703a 	and	r6,r8,r2
    9848:	00802004 	movi	r2,128
    984c:	0007883a 	mov	r3,zero
    9850:	000f883a 	mov	r7,zero
    9854:	2280ffc4 	addi	r10,r4,1023
    9858:	30801e26 	beq	r6,r2,98d4 <__pack_d+0x154>
    985c:	00801fc4 	movi	r2,127
    9860:	4089883a 	add	r4,r8,r2
    9864:	220d803a 	cmpltu	r6,r4,r8
    9868:	324d883a 	add	r6,r6,r9
    986c:	2011883a 	mov	r8,r4
    9870:	3013883a 	mov	r9,r6
    9874:	00880034 	movhi	r2,8192
    9878:	10bfffc4 	addi	r2,r2,-1
    987c:	12400d36 	bltu	r2,r9,98b4 <__pack_d+0x134>
    9880:	4804963a 	slli	r2,r9,24
    9884:	400cd23a 	srli	r6,r8,8
    9888:	480ed23a 	srli	r7,r9,8
    988c:	013fffc4 	movi	r4,-1
    9890:	118cb03a 	or	r6,r2,r6
    9894:	01400434 	movhi	r5,16
    9898:	297fffc4 	addi	r5,r5,-1
    989c:	3104703a 	and	r2,r6,r4
    98a0:	3946703a 	and	r3,r7,r5
    98a4:	5201ffcc 	andi	r8,r10,2047
    98a8:	100d883a 	mov	r6,r2
    98ac:	180f883a 	mov	r7,r3
    98b0:	003fc706 	br	97d0 <__pack_d+0x50>
    98b4:	480897fa 	slli	r4,r9,31
    98b8:	4004d07a 	srli	r2,r8,1
    98bc:	4806d07a 	srli	r3,r9,1
    98c0:	52800044 	addi	r10,r10,1
    98c4:	2084b03a 	or	r2,r4,r2
    98c8:	1011883a 	mov	r8,r2
    98cc:	1813883a 	mov	r9,r3
    98d0:	003feb06 	br	9880 <__pack_d+0x100>
    98d4:	383fe11e 	bne	r7,zero,985c <__pack_d+0xdc>
    98d8:	01004004 	movi	r4,256
    98dc:	4104703a 	and	r2,r8,r4
    98e0:	10c4b03a 	or	r2,r2,r3
    98e4:	103fe326 	beq	r2,zero,9874 <__pack_d+0xf4>
    98e8:	3005883a 	mov	r2,r6
    98ec:	003fdc06 	br	9860 <__pack_d+0xe0>
    98f0:	000d883a 	mov	r6,zero
    98f4:	000f883a 	mov	r7,zero
    98f8:	0201ffc4 	movi	r8,2047
    98fc:	003fb406 	br	97d0 <__pack_d+0x50>
    9900:	0005883a 	mov	r2,zero
    9904:	00c00234 	movhi	r3,8
    9908:	408cb03a 	or	r6,r8,r2
    990c:	48ceb03a 	or	r7,r9,r3
    9910:	013fffc4 	movi	r4,-1
    9914:	01400434 	movhi	r5,16
    9918:	297fffc4 	addi	r5,r5,-1
    991c:	3104703a 	and	r2,r6,r4
    9920:	3946703a 	and	r3,r7,r5
    9924:	100d883a 	mov	r6,r2
    9928:	180f883a 	mov	r7,r3
    992c:	0201ffc4 	movi	r8,2047
    9930:	003fa706 	br	97d0 <__pack_d+0x50>
    9934:	1109c83a 	sub	r4,r2,r4
    9938:	00800e04 	movi	r2,56
    993c:	11004316 	blt	r2,r4,9a4c <__pack_d+0x2cc>
    9940:	21fff804 	addi	r7,r4,-32
    9944:	38004516 	blt	r7,zero,9a5c <__pack_d+0x2dc>
    9948:	49d8d83a 	srl	r12,r9,r7
    994c:	001b883a 	mov	r13,zero
    9950:	0023883a 	mov	r17,zero
    9954:	01400044 	movi	r5,1
    9958:	0025883a 	mov	r18,zero
    995c:	38004716 	blt	r7,zero,9a7c <__pack_d+0x2fc>
    9960:	29d6983a 	sll	r11,r5,r7
    9964:	0015883a 	mov	r10,zero
    9968:	00bfffc4 	movi	r2,-1
    996c:	5089883a 	add	r4,r10,r2
    9970:	588b883a 	add	r5,r11,r2
    9974:	228d803a 	cmpltu	r6,r4,r10
    9978:	314b883a 	add	r5,r6,r5
    997c:	4104703a 	and	r2,r8,r4
    9980:	4946703a 	and	r3,r9,r5
    9984:	10c4b03a 	or	r2,r2,r3
    9988:	10000226 	beq	r2,zero,9994 <__pack_d+0x214>
    998c:	04400044 	movi	r17,1
    9990:	0025883a 	mov	r18,zero
    9994:	00803fc4 	movi	r2,255
    9998:	644eb03a 	or	r7,r12,r17
    999c:	3892703a 	and	r9,r7,r2
    99a0:	00802004 	movi	r2,128
    99a4:	6c90b03a 	or	r8,r13,r18
    99a8:	0015883a 	mov	r10,zero
    99ac:	48801626 	beq	r9,r2,9a08 <__pack_d+0x288>
    99b0:	01001fc4 	movi	r4,127
    99b4:	3905883a 	add	r2,r7,r4
    99b8:	11cd803a 	cmpltu	r6,r2,r7
    99bc:	320d883a 	add	r6,r6,r8
    99c0:	100f883a 	mov	r7,r2
    99c4:	00840034 	movhi	r2,4096
    99c8:	10bfffc4 	addi	r2,r2,-1
    99cc:	3011883a 	mov	r8,r6
    99d0:	0007883a 	mov	r3,zero
    99d4:	11801b36 	bltu	r2,r6,9a44 <__pack_d+0x2c4>
    99d8:	4004963a 	slli	r2,r8,24
    99dc:	3808d23a 	srli	r4,r7,8
    99e0:	400ad23a 	srli	r5,r8,8
    99e4:	1813883a 	mov	r9,r3
    99e8:	1108b03a 	or	r4,r2,r4
    99ec:	00bfffc4 	movi	r2,-1
    99f0:	00c00434 	movhi	r3,16
    99f4:	18ffffc4 	addi	r3,r3,-1
    99f8:	208c703a 	and	r6,r4,r2
    99fc:	28ce703a 	and	r7,r5,r3
    9a00:	4a01ffcc 	andi	r8,r9,2047
    9a04:	003f7206 	br	97d0 <__pack_d+0x50>
    9a08:	503fe91e 	bne	r10,zero,99b0 <__pack_d+0x230>
    9a0c:	01004004 	movi	r4,256
    9a10:	3904703a 	and	r2,r7,r4
    9a14:	0007883a 	mov	r3,zero
    9a18:	10c4b03a 	or	r2,r2,r3
    9a1c:	10000626 	beq	r2,zero,9a38 <__pack_d+0x2b8>
    9a20:	3a45883a 	add	r2,r7,r9
    9a24:	11cd803a 	cmpltu	r6,r2,r7
    9a28:	320d883a 	add	r6,r6,r8
    9a2c:	100f883a 	mov	r7,r2
    9a30:	3011883a 	mov	r8,r6
    9a34:	0007883a 	mov	r3,zero
    9a38:	00840034 	movhi	r2,4096
    9a3c:	10bfffc4 	addi	r2,r2,-1
    9a40:	123fe52e 	bgeu	r2,r8,99d8 <__pack_d+0x258>
    9a44:	00c00044 	movi	r3,1
    9a48:	003fe306 	br	99d8 <__pack_d+0x258>
    9a4c:	0009883a 	mov	r4,zero
    9a50:	0013883a 	mov	r9,zero
    9a54:	000b883a 	mov	r5,zero
    9a58:	003fe406 	br	99ec <__pack_d+0x26c>
    9a5c:	4a47883a 	add	r3,r9,r9
    9a60:	008007c4 	movi	r2,31
    9a64:	1105c83a 	sub	r2,r2,r4
    9a68:	1886983a 	sll	r3,r3,r2
    9a6c:	4118d83a 	srl	r12,r8,r4
    9a70:	491ad83a 	srl	r13,r9,r4
    9a74:	1b18b03a 	or	r12,r3,r12
    9a78:	003fb506 	br	9950 <__pack_d+0x1d0>
    9a7c:	2806d07a 	srli	r3,r5,1
    9a80:	008007c4 	movi	r2,31
    9a84:	1105c83a 	sub	r2,r2,r4
    9a88:	1896d83a 	srl	r11,r3,r2
    9a8c:	2914983a 	sll	r10,r5,r4
    9a90:	003fb506 	br	9968 <__pack_d+0x1e8>

00009a94 <__unpack_d>:
    9a94:	20c00117 	ldw	r3,4(r4)
    9a98:	22400017 	ldw	r9,0(r4)
    9a9c:	00800434 	movhi	r2,16
    9aa0:	10bfffc4 	addi	r2,r2,-1
    9aa4:	1808d53a 	srli	r4,r3,20
    9aa8:	180cd7fa 	srli	r6,r3,31
    9aac:	1894703a 	and	r10,r3,r2
    9ab0:	2201ffcc 	andi	r8,r4,2047
    9ab4:	281b883a 	mov	r13,r5
    9ab8:	4817883a 	mov	r11,r9
    9abc:	29800115 	stw	r6,4(r5)
    9ac0:	5019883a 	mov	r12,r10
    9ac4:	40001e1e 	bne	r8,zero,9b40 <__unpack_d+0xac>
    9ac8:	4a84b03a 	or	r2,r9,r10
    9acc:	10001926 	beq	r2,zero,9b34 <__unpack_d+0xa0>
    9ad0:	4804d63a 	srli	r2,r9,24
    9ad4:	500c923a 	slli	r6,r10,8
    9ad8:	013f0084 	movi	r4,-1022
    9adc:	00c40034 	movhi	r3,4096
    9ae0:	18ffffc4 	addi	r3,r3,-1
    9ae4:	118cb03a 	or	r6,r2,r6
    9ae8:	008000c4 	movi	r2,3
    9aec:	480a923a 	slli	r5,r9,8
    9af0:	68800015 	stw	r2,0(r13)
    9af4:	69000215 	stw	r4,8(r13)
    9af8:	19800b36 	bltu	r3,r6,9b28 <__unpack_d+0x94>
    9afc:	200f883a 	mov	r7,r4
    9b00:	1811883a 	mov	r8,r3
    9b04:	2945883a 	add	r2,r5,r5
    9b08:	1149803a 	cmpltu	r4,r2,r5
    9b0c:	3187883a 	add	r3,r6,r6
    9b10:	20c9883a 	add	r4,r4,r3
    9b14:	100b883a 	mov	r5,r2
    9b18:	200d883a 	mov	r6,r4
    9b1c:	39ffffc4 	addi	r7,r7,-1
    9b20:	413ff82e 	bgeu	r8,r4,9b04 <__unpack_d+0x70>
    9b24:	69c00215 	stw	r7,8(r13)
    9b28:	69800415 	stw	r6,16(r13)
    9b2c:	69400315 	stw	r5,12(r13)
    9b30:	f800283a 	ret
    9b34:	00800084 	movi	r2,2
    9b38:	28800015 	stw	r2,0(r5)
    9b3c:	f800283a 	ret
    9b40:	0081ffc4 	movi	r2,2047
    9b44:	40800f26 	beq	r8,r2,9b84 <__unpack_d+0xf0>
    9b48:	480cd63a 	srli	r6,r9,24
    9b4c:	5006923a 	slli	r3,r10,8
    9b50:	4804923a 	slli	r2,r9,8
    9b54:	0009883a 	mov	r4,zero
    9b58:	30c6b03a 	or	r3,r6,r3
    9b5c:	01440034 	movhi	r5,4096
    9b60:	110cb03a 	or	r6,r2,r4
    9b64:	423f0044 	addi	r8,r8,-1023
    9b68:	194eb03a 	or	r7,r3,r5
    9b6c:	008000c4 	movi	r2,3
    9b70:	69c00415 	stw	r7,16(r13)
    9b74:	6a000215 	stw	r8,8(r13)
    9b78:	68800015 	stw	r2,0(r13)
    9b7c:	69800315 	stw	r6,12(r13)
    9b80:	f800283a 	ret
    9b84:	4a84b03a 	or	r2,r9,r10
    9b88:	1000031e 	bne	r2,zero,9b98 <__unpack_d+0x104>
    9b8c:	00800104 	movi	r2,4
    9b90:	28800015 	stw	r2,0(r5)
    9b94:	f800283a 	ret
    9b98:	0009883a 	mov	r4,zero
    9b9c:	01400234 	movhi	r5,8
    9ba0:	4904703a 	and	r2,r9,r4
    9ba4:	5146703a 	and	r3,r10,r5
    9ba8:	10c4b03a 	or	r2,r2,r3
    9bac:	10000526 	beq	r2,zero,9bc4 <__unpack_d+0x130>
    9bb0:	00800044 	movi	r2,1
    9bb4:	68800015 	stw	r2,0(r13)
    9bb8:	6b000415 	stw	r12,16(r13)
    9bbc:	6ac00315 	stw	r11,12(r13)
    9bc0:	f800283a 	ret
    9bc4:	68000015 	stw	zero,0(r13)
    9bc8:	003ffb06 	br	9bb8 <__unpack_d+0x124>

00009bcc <__fpcmp_parts_d>:
    9bcc:	21800017 	ldw	r6,0(r4)
    9bd0:	00c00044 	movi	r3,1
    9bd4:	19800a2e 	bgeu	r3,r6,9c00 <__fpcmp_parts_d+0x34>
    9bd8:	28800017 	ldw	r2,0(r5)
    9bdc:	1880082e 	bgeu	r3,r2,9c00 <__fpcmp_parts_d+0x34>
    9be0:	00c00104 	movi	r3,4
    9be4:	30c02626 	beq	r6,r3,9c80 <__fpcmp_parts_d+0xb4>
    9be8:	10c02226 	beq	r2,r3,9c74 <__fpcmp_parts_d+0xa8>
    9bec:	00c00084 	movi	r3,2
    9bf0:	30c00526 	beq	r6,r3,9c08 <__fpcmp_parts_d+0x3c>
    9bf4:	10c0071e 	bne	r2,r3,9c14 <__fpcmp_parts_d+0x48>
    9bf8:	20800117 	ldw	r2,4(r4)
    9bfc:	1000091e 	bne	r2,zero,9c24 <__fpcmp_parts_d+0x58>
    9c00:	00800044 	movi	r2,1
    9c04:	f800283a 	ret
    9c08:	10c01a1e 	bne	r2,r3,9c74 <__fpcmp_parts_d+0xa8>
    9c0c:	0005883a 	mov	r2,zero
    9c10:	f800283a 	ret
    9c14:	22000117 	ldw	r8,4(r4)
    9c18:	28800117 	ldw	r2,4(r5)
    9c1c:	40800326 	beq	r8,r2,9c2c <__fpcmp_parts_d+0x60>
    9c20:	403ff726 	beq	r8,zero,9c00 <__fpcmp_parts_d+0x34>
    9c24:	00bfffc4 	movi	r2,-1
    9c28:	f800283a 	ret
    9c2c:	20c00217 	ldw	r3,8(r4)
    9c30:	28800217 	ldw	r2,8(r5)
    9c34:	10fffa16 	blt	r2,r3,9c20 <__fpcmp_parts_d+0x54>
    9c38:	18800916 	blt	r3,r2,9c60 <__fpcmp_parts_d+0x94>
    9c3c:	21c00417 	ldw	r7,16(r4)
    9c40:	28c00417 	ldw	r3,16(r5)
    9c44:	21800317 	ldw	r6,12(r4)
    9c48:	28800317 	ldw	r2,12(r5)
    9c4c:	19fff436 	bltu	r3,r7,9c20 <__fpcmp_parts_d+0x54>
    9c50:	38c00526 	beq	r7,r3,9c68 <__fpcmp_parts_d+0x9c>
    9c54:	38c00236 	bltu	r7,r3,9c60 <__fpcmp_parts_d+0x94>
    9c58:	19ffec1e 	bne	r3,r7,9c0c <__fpcmp_parts_d+0x40>
    9c5c:	30bfeb2e 	bgeu	r6,r2,9c0c <__fpcmp_parts_d+0x40>
    9c60:	403fe71e 	bne	r8,zero,9c00 <__fpcmp_parts_d+0x34>
    9c64:	003fef06 	br	9c24 <__fpcmp_parts_d+0x58>
    9c68:	11bffa2e 	bgeu	r2,r6,9c54 <__fpcmp_parts_d+0x88>
    9c6c:	403fe426 	beq	r8,zero,9c00 <__fpcmp_parts_d+0x34>
    9c70:	003fec06 	br	9c24 <__fpcmp_parts_d+0x58>
    9c74:	28800117 	ldw	r2,4(r5)
    9c78:	103fe11e 	bne	r2,zero,9c00 <__fpcmp_parts_d+0x34>
    9c7c:	003fe906 	br	9c24 <__fpcmp_parts_d+0x58>
    9c80:	11bfdd1e 	bne	r2,r6,9bf8 <__fpcmp_parts_d+0x2c>
    9c84:	28c00117 	ldw	r3,4(r5)
    9c88:	20800117 	ldw	r2,4(r4)
    9c8c:	1885c83a 	sub	r2,r3,r2
    9c90:	f800283a 	ret

00009c94 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    9c94:	defff804 	addi	sp,sp,-32
    9c98:	dfc00715 	stw	ra,28(sp)
    9c9c:	df000615 	stw	fp,24(sp)
    9ca0:	df000604 	addi	fp,sp,24
    9ca4:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    9ca8:	e0bffc17 	ldw	r2,-16(fp)
    9cac:	1004803a 	cmplt	r2,r2,zero
    9cb0:	1000081e 	bne	r2,zero,9cd4 <close+0x40>
    9cb4:	e0bffc17 	ldw	r2,-16(fp)
    9cb8:	10800324 	muli	r2,r2,12
    9cbc:	1007883a 	mov	r3,r2
    9cc0:	00800074 	movhi	r2,1
    9cc4:	10b70a04 	addi	r2,r2,-9176
    9cc8:	1887883a 	add	r3,r3,r2
    9ccc:	e0ffff15 	stw	r3,-4(fp)
    9cd0:	00000106 	br	9cd8 <close+0x44>
    9cd4:	e03fff15 	stw	zero,-4(fp)
    9cd8:	e0bfff17 	ldw	r2,-4(fp)
    9cdc:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
    9ce0:	e0bffb17 	ldw	r2,-20(fp)
    9ce4:	1005003a 	cmpeq	r2,r2,zero
    9ce8:	10001d1e 	bne	r2,zero,9d60 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    9cec:	e0bffb17 	ldw	r2,-20(fp)
    9cf0:	10800017 	ldw	r2,0(r2)
    9cf4:	10800417 	ldw	r2,16(r2)
    9cf8:	1005003a 	cmpeq	r2,r2,zero
    9cfc:	1000071e 	bne	r2,zero,9d1c <close+0x88>
    9d00:	e0bffb17 	ldw	r2,-20(fp)
    9d04:	10800017 	ldw	r2,0(r2)
    9d08:	10800417 	ldw	r2,16(r2)
    9d0c:	e13ffb17 	ldw	r4,-20(fp)
    9d10:	103ee83a 	callr	r2
    9d14:	e0bffe15 	stw	r2,-8(fp)
    9d18:	00000106 	br	9d20 <close+0x8c>
    9d1c:	e03ffe15 	stw	zero,-8(fp)
    9d20:	e0bffe17 	ldw	r2,-8(fp)
    9d24:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    9d28:	e13ffc17 	ldw	r4,-16(fp)
    9d2c:	000a5380 	call	a538 <alt_release_fd>
    if (rval < 0)
    9d30:	e0bffa17 	ldw	r2,-24(fp)
    9d34:	1004403a 	cmpge	r2,r2,zero
    9d38:	1000071e 	bne	r2,zero,9d58 <close+0xc4>
    {
      ALT_ERRNO = -rval;
    9d3c:	0009d900 	call	9d90 <alt_get_errno>
    9d40:	e0fffa17 	ldw	r3,-24(fp)
    9d44:	00c7c83a 	sub	r3,zero,r3
    9d48:	10c00015 	stw	r3,0(r2)
      return -1;
    9d4c:	00bfffc4 	movi	r2,-1
    9d50:	e0bffd15 	stw	r2,-12(fp)
    9d54:	00000806 	br	9d78 <close+0xe4>
    }
    return 0;
    9d58:	e03ffd15 	stw	zero,-12(fp)
    9d5c:	00000606 	br	9d78 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    9d60:	0009d900 	call	9d90 <alt_get_errno>
    9d64:	1007883a 	mov	r3,r2
    9d68:	00801444 	movi	r2,81
    9d6c:	18800015 	stw	r2,0(r3)
    return -1;
    9d70:	00bfffc4 	movi	r2,-1
    9d74:	e0bffd15 	stw	r2,-12(fp)
    9d78:	e0bffd17 	ldw	r2,-12(fp)
  }
}
    9d7c:	e037883a 	mov	sp,fp
    9d80:	dfc00117 	ldw	ra,4(sp)
    9d84:	df000017 	ldw	fp,0(sp)
    9d88:	dec00204 	addi	sp,sp,8
    9d8c:	f800283a 	ret

00009d90 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9d90:	defffd04 	addi	sp,sp,-12
    9d94:	dfc00215 	stw	ra,8(sp)
    9d98:	df000115 	stw	fp,4(sp)
    9d9c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    9da0:	00800074 	movhi	r2,1
    9da4:	10bbef04 	addi	r2,r2,-4164
    9da8:	10800017 	ldw	r2,0(r2)
    9dac:	1005003a 	cmpeq	r2,r2,zero
    9db0:	1000061e 	bne	r2,zero,9dcc <alt_get_errno+0x3c>
    9db4:	00800074 	movhi	r2,1
    9db8:	10bbef04 	addi	r2,r2,-4164
    9dbc:	10800017 	ldw	r2,0(r2)
    9dc0:	103ee83a 	callr	r2
    9dc4:	e0bfff15 	stw	r2,-4(fp)
    9dc8:	00000306 	br	9dd8 <alt_get_errno+0x48>
    9dcc:	00800074 	movhi	r2,1
    9dd0:	1082f304 	addi	r2,r2,3020
    9dd4:	e0bfff15 	stw	r2,-4(fp)
    9dd8:	e0bfff17 	ldw	r2,-4(fp)
}
    9ddc:	e037883a 	mov	sp,fp
    9de0:	dfc00117 	ldw	ra,4(sp)
    9de4:	df000017 	ldw	fp,0(sp)
    9de8:	dec00204 	addi	sp,sp,8
    9dec:	f800283a 	ret

00009df0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    9df0:	defffc04 	addi	sp,sp,-16
    9df4:	df000315 	stw	fp,12(sp)
    9df8:	df000304 	addi	fp,sp,12
    9dfc:	e13ffd15 	stw	r4,-12(fp)
    9e00:	e17ffe15 	stw	r5,-8(fp)
    9e04:	e1bfff15 	stw	r6,-4(fp)
  return len;
    9e08:	e0bfff17 	ldw	r2,-4(fp)
}
    9e0c:	e037883a 	mov	sp,fp
    9e10:	df000017 	ldw	fp,0(sp)
    9e14:	dec00104 	addi	sp,sp,4
    9e18:	f800283a 	ret

00009e1c <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
    9e1c:	defffd04 	addi	sp,sp,-12
    9e20:	df000215 	stw	fp,8(sp)
    9e24:	df000204 	addi	fp,sp,8
    9e28:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
    9e2c:	e0bfff17 	ldw	r2,-4(fp)
    9e30:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    9e34:	e0bffe17 	ldw	r2,-8(fp)
    9e38:	1005003a 	cmpeq	r2,r2,zero
    9e3c:	1000021e 	bne	r2,zero,9e48 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
    9e40:	002af070 	cmpltui	zero,zero,43969
    9e44:	00000106 	br	9e4c <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
    9e48:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
    9e4c:	e037883a 	mov	sp,fp
    9e50:	df000017 	ldw	fp,0(sp)
    9e54:	dec00104 	addi	sp,sp,4
    9e58:	f800283a 	ret

00009e5c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    9e5c:	defffd04 	addi	sp,sp,-12
    9e60:	dfc00215 	stw	ra,8(sp)
    9e64:	df000115 	stw	fp,4(sp)
    9e68:	df000104 	addi	fp,sp,4
    9e6c:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
    9e70:	e13fff17 	ldw	r4,-4(fp)
    9e74:	0009e1c0 	call	9e1c <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    9e78:	003fff06 	br	9e78 <_exit+0x1c>

00009e7c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    9e7c:	defff904 	addi	sp,sp,-28
    9e80:	dfc00615 	stw	ra,24(sp)
    9e84:	df000515 	stw	fp,20(sp)
    9e88:	df000504 	addi	fp,sp,20
    9e8c:	e13ffc15 	stw	r4,-16(fp)
    9e90:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    9e94:	e0bffc17 	ldw	r2,-16(fp)
    9e98:	1004803a 	cmplt	r2,r2,zero
    9e9c:	1000081e 	bne	r2,zero,9ec0 <fstat+0x44>
    9ea0:	e0bffc17 	ldw	r2,-16(fp)
    9ea4:	10800324 	muli	r2,r2,12
    9ea8:	1007883a 	mov	r3,r2
    9eac:	00800074 	movhi	r2,1
    9eb0:	10b70a04 	addi	r2,r2,-9176
    9eb4:	1887883a 	add	r3,r3,r2
    9eb8:	e0ffff15 	stw	r3,-4(fp)
    9ebc:	00000106 	br	9ec4 <fstat+0x48>
    9ec0:	e03fff15 	stw	zero,-4(fp)
    9ec4:	e0bfff17 	ldw	r2,-4(fp)
    9ec8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    9ecc:	e0bffb17 	ldw	r2,-20(fp)
    9ed0:	1005003a 	cmpeq	r2,r2,zero
    9ed4:	1000121e 	bne	r2,zero,9f20 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    9ed8:	e0bffb17 	ldw	r2,-20(fp)
    9edc:	10800017 	ldw	r2,0(r2)
    9ee0:	10800817 	ldw	r2,32(r2)
    9ee4:	1005003a 	cmpeq	r2,r2,zero
    9ee8:	1000081e 	bne	r2,zero,9f0c <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
    9eec:	e0bffb17 	ldw	r2,-20(fp)
    9ef0:	10800017 	ldw	r2,0(r2)
    9ef4:	10800817 	ldw	r2,32(r2)
    9ef8:	e13ffb17 	ldw	r4,-20(fp)
    9efc:	e17ffd17 	ldw	r5,-12(fp)
    9f00:	103ee83a 	callr	r2
    9f04:	e0bffe15 	stw	r2,-8(fp)
    9f08:	00000b06 	br	9f38 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    9f0c:	e0fffd17 	ldw	r3,-12(fp)
    9f10:	00880004 	movi	r2,8192
    9f14:	18800115 	stw	r2,4(r3)
      return 0;
    9f18:	e03ffe15 	stw	zero,-8(fp)
    9f1c:	00000606 	br	9f38 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    9f20:	0009f500 	call	9f50 <alt_get_errno>
    9f24:	1007883a 	mov	r3,r2
    9f28:	00801444 	movi	r2,81
    9f2c:	18800015 	stw	r2,0(r3)
    return -1;
    9f30:	00bfffc4 	movi	r2,-1
    9f34:	e0bffe15 	stw	r2,-8(fp)
    9f38:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    9f3c:	e037883a 	mov	sp,fp
    9f40:	dfc00117 	ldw	ra,4(sp)
    9f44:	df000017 	ldw	fp,0(sp)
    9f48:	dec00204 	addi	sp,sp,8
    9f4c:	f800283a 	ret

00009f50 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9f50:	defffd04 	addi	sp,sp,-12
    9f54:	dfc00215 	stw	ra,8(sp)
    9f58:	df000115 	stw	fp,4(sp)
    9f5c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    9f60:	00800074 	movhi	r2,1
    9f64:	10bbef04 	addi	r2,r2,-4164
    9f68:	10800017 	ldw	r2,0(r2)
    9f6c:	1005003a 	cmpeq	r2,r2,zero
    9f70:	1000061e 	bne	r2,zero,9f8c <alt_get_errno+0x3c>
    9f74:	00800074 	movhi	r2,1
    9f78:	10bbef04 	addi	r2,r2,-4164
    9f7c:	10800017 	ldw	r2,0(r2)
    9f80:	103ee83a 	callr	r2
    9f84:	e0bfff15 	stw	r2,-4(fp)
    9f88:	00000306 	br	9f98 <alt_get_errno+0x48>
    9f8c:	00800074 	movhi	r2,1
    9f90:	1082f304 	addi	r2,r2,3020
    9f94:	e0bfff15 	stw	r2,-4(fp)
    9f98:	e0bfff17 	ldw	r2,-4(fp)
}
    9f9c:	e037883a 	mov	sp,fp
    9fa0:	dfc00117 	ldw	ra,4(sp)
    9fa4:	df000017 	ldw	fp,0(sp)
    9fa8:	dec00204 	addi	sp,sp,8
    9fac:	f800283a 	ret

00009fb0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    9fb0:	deffeb04 	addi	sp,sp,-84
    9fb4:	dfc01415 	stw	ra,80(sp)
    9fb8:	df001315 	stw	fp,76(sp)
    9fbc:	df001304 	addi	fp,sp,76
    9fc0:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    9fc4:	e0bffd17 	ldw	r2,-12(fp)
    9fc8:	1004803a 	cmplt	r2,r2,zero
    9fcc:	1000081e 	bne	r2,zero,9ff0 <isatty+0x40>
    9fd0:	e0bffd17 	ldw	r2,-12(fp)
    9fd4:	10800324 	muli	r2,r2,12
    9fd8:	1007883a 	mov	r3,r2
    9fdc:	00800074 	movhi	r2,1
    9fe0:	10b70a04 	addi	r2,r2,-9176
    9fe4:	1887883a 	add	r3,r3,r2
    9fe8:	e0ffff15 	stw	r3,-4(fp)
    9fec:	00000106 	br	9ff4 <isatty+0x44>
    9ff0:	e03fff15 	stw	zero,-4(fp)
    9ff4:	e0bfff17 	ldw	r2,-4(fp)
    9ff8:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
    9ffc:	e0bfed17 	ldw	r2,-76(fp)
    a000:	1005003a 	cmpeq	r2,r2,zero
    a004:	10000f1e 	bne	r2,zero,a044 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    a008:	e0bfed17 	ldw	r2,-76(fp)
    a00c:	10800017 	ldw	r2,0(r2)
    a010:	10800817 	ldw	r2,32(r2)
    a014:	1004c03a 	cmpne	r2,r2,zero
    a018:	1000031e 	bne	r2,zero,a028 <isatty+0x78>
    {
      return 1;
    a01c:	00800044 	movi	r2,1
    a020:	e0bffe15 	stw	r2,-8(fp)
    a024:	00000c06 	br	a058 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    a028:	e17fee04 	addi	r5,fp,-72
    a02c:	e13ffd17 	ldw	r4,-12(fp)
    a030:	0009e7c0 	call	9e7c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    a034:	e0bfef17 	ldw	r2,-68(fp)
    a038:	10880020 	cmpeqi	r2,r2,8192
    a03c:	e0bffe15 	stw	r2,-8(fp)
    a040:	00000506 	br	a058 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    a044:	000a0700 	call	a070 <alt_get_errno>
    a048:	1007883a 	mov	r3,r2
    a04c:	00801444 	movi	r2,81
    a050:	18800015 	stw	r2,0(r3)
    return 0;
    a054:	e03ffe15 	stw	zero,-8(fp)
    a058:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    a05c:	e037883a 	mov	sp,fp
    a060:	dfc00117 	ldw	ra,4(sp)
    a064:	df000017 	ldw	fp,0(sp)
    a068:	dec00204 	addi	sp,sp,8
    a06c:	f800283a 	ret

0000a070 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    a070:	defffd04 	addi	sp,sp,-12
    a074:	dfc00215 	stw	ra,8(sp)
    a078:	df000115 	stw	fp,4(sp)
    a07c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    a080:	00800074 	movhi	r2,1
    a084:	10bbef04 	addi	r2,r2,-4164
    a088:	10800017 	ldw	r2,0(r2)
    a08c:	1005003a 	cmpeq	r2,r2,zero
    a090:	1000061e 	bne	r2,zero,a0ac <alt_get_errno+0x3c>
    a094:	00800074 	movhi	r2,1
    a098:	10bbef04 	addi	r2,r2,-4164
    a09c:	10800017 	ldw	r2,0(r2)
    a0a0:	103ee83a 	callr	r2
    a0a4:	e0bfff15 	stw	r2,-4(fp)
    a0a8:	00000306 	br	a0b8 <alt_get_errno+0x48>
    a0ac:	00800074 	movhi	r2,1
    a0b0:	1082f304 	addi	r2,r2,3020
    a0b4:	e0bfff15 	stw	r2,-4(fp)
    a0b8:	e0bfff17 	ldw	r2,-4(fp)
}
    a0bc:	e037883a 	mov	sp,fp
    a0c0:	dfc00117 	ldw	ra,4(sp)
    a0c4:	df000017 	ldw	fp,0(sp)
    a0c8:	dec00204 	addi	sp,sp,8
    a0cc:	f800283a 	ret

0000a0d0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    a0d0:	defffe04 	addi	sp,sp,-8
    a0d4:	dfc00115 	stw	ra,4(sp)
    a0d8:	df000015 	stw	fp,0(sp)
    a0dc:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    a0e0:	01000074 	movhi	r4,1
    a0e4:	213bf404 	addi	r4,r4,-4144
    a0e8:	01400074 	movhi	r5,1
    a0ec:	2974fb04 	addi	r5,r5,-11284
    a0f0:	01800074 	movhi	r6,1
    a0f4:	31bbf404 	addi	r6,r6,-4144
    a0f8:	000a1500 	call	a150 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    a0fc:	01000034 	movhi	r4,0
    a100:	21000804 	addi	r4,r4,32
    a104:	01400034 	movhi	r5,0
    a108:	29400804 	addi	r5,r5,32
    a10c:	01800034 	movhi	r6,0
    a110:	31806d04 	addi	r6,r6,436
    a114:	000a1500 	call	a150 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    a118:	01000074 	movhi	r4,1
    a11c:	2133db04 	addi	r4,r4,-12436
    a120:	01400074 	movhi	r5,1
    a124:	2973db04 	addi	r5,r5,-12436
    a128:	01800074 	movhi	r6,1
    a12c:	31b4fb04 	addi	r6,r6,-11284
    a130:	000a1500 	call	a150 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    a134:	000bf8c0 	call	bf8c <alt_dcache_flush_all>
  alt_icache_flush_all();
    a138:	000c1840 	call	c184 <alt_icache_flush_all>
}
    a13c:	e037883a 	mov	sp,fp
    a140:	dfc00117 	ldw	ra,4(sp)
    a144:	df000017 	ldw	fp,0(sp)
    a148:	dec00204 	addi	sp,sp,8
    a14c:	f800283a 	ret

0000a150 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    a150:	defffc04 	addi	sp,sp,-16
    a154:	df000315 	stw	fp,12(sp)
    a158:	df000304 	addi	fp,sp,12
    a15c:	e13ffd15 	stw	r4,-12(fp)
    a160:	e17ffe15 	stw	r5,-8(fp)
    a164:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    a168:	e0fffe17 	ldw	r3,-8(fp)
    a16c:	e0bffd17 	ldw	r2,-12(fp)
    a170:	18800e26 	beq	r3,r2,a1ac <alt_load_section+0x5c>
  {
    while( to != end )
    a174:	00000a06 	br	a1a0 <alt_load_section+0x50>
    {
      *to++ = *from++;
    a178:	e0bffd17 	ldw	r2,-12(fp)
    a17c:	10c00017 	ldw	r3,0(r2)
    a180:	e0bffe17 	ldw	r2,-8(fp)
    a184:	10c00015 	stw	r3,0(r2)
    a188:	e0bffe17 	ldw	r2,-8(fp)
    a18c:	10800104 	addi	r2,r2,4
    a190:	e0bffe15 	stw	r2,-8(fp)
    a194:	e0bffd17 	ldw	r2,-12(fp)
    a198:	10800104 	addi	r2,r2,4
    a19c:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    a1a0:	e0fffe17 	ldw	r3,-8(fp)
    a1a4:	e0bfff17 	ldw	r2,-4(fp)
    a1a8:	18bff31e 	bne	r3,r2,a178 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    a1ac:	e037883a 	mov	sp,fp
    a1b0:	df000017 	ldw	fp,0(sp)
    a1b4:	dec00104 	addi	sp,sp,4
    a1b8:	f800283a 	ret

0000a1bc <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    a1bc:	defff804 	addi	sp,sp,-32
    a1c0:	dfc00715 	stw	ra,28(sp)
    a1c4:	df000615 	stw	fp,24(sp)
    a1c8:	df000604 	addi	fp,sp,24
    a1cc:	e13ffc15 	stw	r4,-16(fp)
    a1d0:	e17ffd15 	stw	r5,-12(fp)
    a1d4:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    a1d8:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    a1dc:	e0bffc17 	ldw	r2,-16(fp)
    a1e0:	1004803a 	cmplt	r2,r2,zero
    a1e4:	1000081e 	bne	r2,zero,a208 <lseek+0x4c>
    a1e8:	e0bffc17 	ldw	r2,-16(fp)
    a1ec:	10800324 	muli	r2,r2,12
    a1f0:	1007883a 	mov	r3,r2
    a1f4:	00800074 	movhi	r2,1
    a1f8:	10b70a04 	addi	r2,r2,-9176
    a1fc:	1887883a 	add	r3,r3,r2
    a200:	e0ffff15 	stw	r3,-4(fp)
    a204:	00000106 	br	a20c <lseek+0x50>
    a208:	e03fff15 	stw	zero,-4(fp)
    a20c:	e0bfff17 	ldw	r2,-4(fp)
    a210:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
    a214:	e0bffb17 	ldw	r2,-20(fp)
    a218:	1005003a 	cmpeq	r2,r2,zero
    a21c:	1000111e 	bne	r2,zero,a264 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    a220:	e0bffb17 	ldw	r2,-20(fp)
    a224:	10800017 	ldw	r2,0(r2)
    a228:	10800717 	ldw	r2,28(r2)
    a22c:	1005003a 	cmpeq	r2,r2,zero
    a230:	1000091e 	bne	r2,zero,a258 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    a234:	e0bffb17 	ldw	r2,-20(fp)
    a238:	10800017 	ldw	r2,0(r2)
    a23c:	10800717 	ldw	r2,28(r2)
    a240:	e13ffb17 	ldw	r4,-20(fp)
    a244:	e17ffd17 	ldw	r5,-12(fp)
    a248:	e1bffe17 	ldw	r6,-8(fp)
    a24c:	103ee83a 	callr	r2
    a250:	e0bffa15 	stw	r2,-24(fp)
    a254:	00000506 	br	a26c <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    a258:	00bfde84 	movi	r2,-134
    a25c:	e0bffa15 	stw	r2,-24(fp)
    a260:	00000206 	br	a26c <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
    a264:	00bfebc4 	movi	r2,-81
    a268:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
    a26c:	e0bffa17 	ldw	r2,-24(fp)
    a270:	1004403a 	cmpge	r2,r2,zero
    a274:	1000071e 	bne	r2,zero,a294 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
    a278:	000a2ac0 	call	a2ac <alt_get_errno>
    a27c:	1007883a 	mov	r3,r2
    a280:	e0bffa17 	ldw	r2,-24(fp)
    a284:	0085c83a 	sub	r2,zero,r2
    a288:	18800015 	stw	r2,0(r3)
    rc = -1;
    a28c:	00bfffc4 	movi	r2,-1
    a290:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
    a294:	e0bffa17 	ldw	r2,-24(fp)
}
    a298:	e037883a 	mov	sp,fp
    a29c:	dfc00117 	ldw	ra,4(sp)
    a2a0:	df000017 	ldw	fp,0(sp)
    a2a4:	dec00204 	addi	sp,sp,8
    a2a8:	f800283a 	ret

0000a2ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    a2ac:	defffd04 	addi	sp,sp,-12
    a2b0:	dfc00215 	stw	ra,8(sp)
    a2b4:	df000115 	stw	fp,4(sp)
    a2b8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    a2bc:	00800074 	movhi	r2,1
    a2c0:	10bbef04 	addi	r2,r2,-4164
    a2c4:	10800017 	ldw	r2,0(r2)
    a2c8:	1005003a 	cmpeq	r2,r2,zero
    a2cc:	1000061e 	bne	r2,zero,a2e8 <alt_get_errno+0x3c>
    a2d0:	00800074 	movhi	r2,1
    a2d4:	10bbef04 	addi	r2,r2,-4164
    a2d8:	10800017 	ldw	r2,0(r2)
    a2dc:	103ee83a 	callr	r2
    a2e0:	e0bfff15 	stw	r2,-4(fp)
    a2e4:	00000306 	br	a2f4 <alt_get_errno+0x48>
    a2e8:	00800074 	movhi	r2,1
    a2ec:	1082f304 	addi	r2,r2,3020
    a2f0:	e0bfff15 	stw	r2,-4(fp)
    a2f4:	e0bfff17 	ldw	r2,-4(fp)
}
    a2f8:	e037883a 	mov	sp,fp
    a2fc:	dfc00117 	ldw	ra,4(sp)
    a300:	df000017 	ldw	fp,0(sp)
    a304:	dec00204 	addi	sp,sp,8
    a308:	f800283a 	ret

0000a30c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    a30c:	defffd04 	addi	sp,sp,-12
    a310:	dfc00215 	stw	ra,8(sp)
    a314:	df000115 	stw	fp,4(sp)
    a318:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    a31c:	0009883a 	mov	r4,zero
    a320:	000a7d40 	call	a7d4 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    a324:	000a8080 	call	a808 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    a328:	01000074 	movhi	r4,1
    a32c:	2134e904 	addi	r4,r4,-11356
    a330:	01400074 	movhi	r5,1
    a334:	2974e904 	addi	r5,r5,-11356
    a338:	01800074 	movhi	r6,1
    a33c:	31b4e904 	addi	r6,r6,-11356
    a340:	000c5440 	call	c544 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    a344:	000c0bc0 	call	c0bc <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    a348:	01000074 	movhi	r4,1
    a34c:	21304804 	addi	r4,r4,-16096
    a350:	000cd400 	call	cd40 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    a354:	d1271017 	ldw	r4,-25536(gp)
    a358:	d1671117 	ldw	r5,-25532(gp)
    a35c:	d1a71217 	ldw	r6,-25528(gp)
    a360:	00001f00 	call	1f0 <main>
    a364:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    a368:	01000044 	movi	r4,1
    a36c:	0009c940 	call	9c94 <close>
  exit (result);
    a370:	e13fff17 	ldw	r4,-4(fp)
    a374:	00003640 	call	364 <exit>

0000a378 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    a378:	defffe04 	addi	sp,sp,-8
    a37c:	df000115 	stw	fp,4(sp)
    a380:	df000104 	addi	fp,sp,4
    a384:	e13fff15 	stw	r4,-4(fp)
}
    a388:	e037883a 	mov	sp,fp
    a38c:	df000017 	ldw	fp,0(sp)
    a390:	dec00104 	addi	sp,sp,4
    a394:	f800283a 	ret

0000a398 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    a398:	defffe04 	addi	sp,sp,-8
    a39c:	df000115 	stw	fp,4(sp)
    a3a0:	df000104 	addi	fp,sp,4
    a3a4:	e13fff15 	stw	r4,-4(fp)
}
    a3a8:	e037883a 	mov	sp,fp
    a3ac:	df000017 	ldw	fp,0(sp)
    a3b0:	dec00104 	addi	sp,sp,4
    a3b4:	f800283a 	ret

0000a3b8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    a3b8:	defff704 	addi	sp,sp,-36
    a3bc:	dfc00815 	stw	ra,32(sp)
    a3c0:	df000715 	stw	fp,28(sp)
    a3c4:	df000704 	addi	fp,sp,28
    a3c8:	e13ffb15 	stw	r4,-20(fp)
    a3cc:	e17ffc15 	stw	r5,-16(fp)
    a3d0:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    a3d4:	e0bffb17 	ldw	r2,-20(fp)
    a3d8:	1004803a 	cmplt	r2,r2,zero
    a3dc:	1000081e 	bne	r2,zero,a400 <read+0x48>
    a3e0:	e0bffb17 	ldw	r2,-20(fp)
    a3e4:	10800324 	muli	r2,r2,12
    a3e8:	1007883a 	mov	r3,r2
    a3ec:	00800074 	movhi	r2,1
    a3f0:	10b70a04 	addi	r2,r2,-9176
    a3f4:	1887883a 	add	r3,r3,r2
    a3f8:	e0ffff15 	stw	r3,-4(fp)
    a3fc:	00000106 	br	a404 <read+0x4c>
    a400:	e03fff15 	stw	zero,-4(fp)
    a404:	e0bfff17 	ldw	r2,-4(fp)
    a408:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    a40c:	e0bffa17 	ldw	r2,-24(fp)
    a410:	1005003a 	cmpeq	r2,r2,zero
    a414:	1000241e 	bne	r2,zero,a4a8 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    a418:	e0bffa17 	ldw	r2,-24(fp)
    a41c:	10800217 	ldw	r2,8(r2)
    a420:	108000cc 	andi	r2,r2,3
    a424:	10800060 	cmpeqi	r2,r2,1
    a428:	10001a1e 	bne	r2,zero,a494 <read+0xdc>
    a42c:	e0bffa17 	ldw	r2,-24(fp)
    a430:	10800017 	ldw	r2,0(r2)
    a434:	10800517 	ldw	r2,20(r2)
    a438:	1005003a 	cmpeq	r2,r2,zero
    a43c:	1000151e 	bne	r2,zero,a494 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    a440:	e0bffa17 	ldw	r2,-24(fp)
    a444:	10800017 	ldw	r2,0(r2)
    a448:	10800517 	ldw	r2,20(r2)
    a44c:	e17ffc17 	ldw	r5,-16(fp)
    a450:	e1bffd17 	ldw	r6,-12(fp)
    a454:	e13ffa17 	ldw	r4,-24(fp)
    a458:	103ee83a 	callr	r2
    a45c:	e0bff915 	stw	r2,-28(fp)
    a460:	e0bff917 	ldw	r2,-28(fp)
    a464:	1004403a 	cmpge	r2,r2,zero
    a468:	1000071e 	bne	r2,zero,a488 <read+0xd0>
        {
          ALT_ERRNO = -rval;
    a46c:	000a4d80 	call	a4d8 <alt_get_errno>
    a470:	e0fff917 	ldw	r3,-28(fp)
    a474:	00c7c83a 	sub	r3,zero,r3
    a478:	10c00015 	stw	r3,0(r2)
          return -1;
    a47c:	00bfffc4 	movi	r2,-1
    a480:	e0bffe15 	stw	r2,-8(fp)
    a484:	00000e06 	br	a4c0 <read+0x108>
        }
        return rval;
    a488:	e0bff917 	ldw	r2,-28(fp)
    a48c:	e0bffe15 	stw	r2,-8(fp)
    a490:	00000b06 	br	a4c0 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
    a494:	000a4d80 	call	a4d8 <alt_get_errno>
    a498:	1007883a 	mov	r3,r2
    a49c:	00800344 	movi	r2,13
    a4a0:	18800015 	stw	r2,0(r3)
    a4a4:	00000406 	br	a4b8 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    a4a8:	000a4d80 	call	a4d8 <alt_get_errno>
    a4ac:	1007883a 	mov	r3,r2
    a4b0:	00801444 	movi	r2,81
    a4b4:	18800015 	stw	r2,0(r3)
  }
  return -1;
    a4b8:	00bfffc4 	movi	r2,-1
    a4bc:	e0bffe15 	stw	r2,-8(fp)
    a4c0:	e0bffe17 	ldw	r2,-8(fp)
}
    a4c4:	e037883a 	mov	sp,fp
    a4c8:	dfc00117 	ldw	ra,4(sp)
    a4cc:	df000017 	ldw	fp,0(sp)
    a4d0:	dec00204 	addi	sp,sp,8
    a4d4:	f800283a 	ret

0000a4d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    a4d8:	defffd04 	addi	sp,sp,-12
    a4dc:	dfc00215 	stw	ra,8(sp)
    a4e0:	df000115 	stw	fp,4(sp)
    a4e4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    a4e8:	00800074 	movhi	r2,1
    a4ec:	10bbef04 	addi	r2,r2,-4164
    a4f0:	10800017 	ldw	r2,0(r2)
    a4f4:	1005003a 	cmpeq	r2,r2,zero
    a4f8:	1000061e 	bne	r2,zero,a514 <alt_get_errno+0x3c>
    a4fc:	00800074 	movhi	r2,1
    a500:	10bbef04 	addi	r2,r2,-4164
    a504:	10800017 	ldw	r2,0(r2)
    a508:	103ee83a 	callr	r2
    a50c:	e0bfff15 	stw	r2,-4(fp)
    a510:	00000306 	br	a520 <alt_get_errno+0x48>
    a514:	00800074 	movhi	r2,1
    a518:	1082f304 	addi	r2,r2,3020
    a51c:	e0bfff15 	stw	r2,-4(fp)
    a520:	e0bfff17 	ldw	r2,-4(fp)
}
    a524:	e037883a 	mov	sp,fp
    a528:	dfc00117 	ldw	ra,4(sp)
    a52c:	df000017 	ldw	fp,0(sp)
    a530:	dec00204 	addi	sp,sp,8
    a534:	f800283a 	ret

0000a538 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    a538:	defffe04 	addi	sp,sp,-8
    a53c:	df000115 	stw	fp,4(sp)
    a540:	df000104 	addi	fp,sp,4
    a544:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    a548:	e0bfff17 	ldw	r2,-4(fp)
    a54c:	108000d0 	cmplti	r2,r2,3
    a550:	10000d1e 	bne	r2,zero,a588 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    a554:	e0bfff17 	ldw	r2,-4(fp)
    a558:	00c00074 	movhi	r3,1
    a55c:	18f70a04 	addi	r3,r3,-9176
    a560:	10800324 	muli	r2,r2,12
    a564:	10c5883a 	add	r2,r2,r3
    a568:	10800204 	addi	r2,r2,8
    a56c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    a570:	e0bfff17 	ldw	r2,-4(fp)
    a574:	00c00074 	movhi	r3,1
    a578:	18f70a04 	addi	r3,r3,-9176
    a57c:	10800324 	muli	r2,r2,12
    a580:	10c5883a 	add	r2,r2,r3
    a584:	10000015 	stw	zero,0(r2)
  }
}
    a588:	e037883a 	mov	sp,fp
    a58c:	df000017 	ldw	fp,0(sp)
    a590:	dec00104 	addi	sp,sp,4
    a594:	f800283a 	ret

0000a598 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    a598:	defff804 	addi	sp,sp,-32
    a59c:	df000715 	stw	fp,28(sp)
    a5a0:	df000704 	addi	fp,sp,28
    a5a4:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a5a8:	0005303a 	rdctl	r2,status
    a5ac:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a5b0:	e0fffb17 	ldw	r3,-20(fp)
    a5b4:	00bfff84 	movi	r2,-2
    a5b8:	1884703a 	and	r2,r3,r2
    a5bc:	1001703a 	wrctl	status,r2
  
  return context;
    a5c0:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    a5c4:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    a5c8:	d0a00c17 	ldw	r2,-32720(gp)
    a5cc:	10c000c4 	addi	r3,r2,3
    a5d0:	00bfff04 	movi	r2,-4
    a5d4:	1884703a 	and	r2,r3,r2
    a5d8:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    a5dc:	d0e00c17 	ldw	r3,-32720(gp)
    a5e0:	e0bffe17 	ldw	r2,-8(fp)
    a5e4:	1887883a 	add	r3,r3,r2
    a5e8:	00802034 	movhi	r2,128
    a5ec:	10800004 	addi	r2,r2,0
    a5f0:	10c0072e 	bgeu	r2,r3,a610 <sbrk+0x78>
    a5f4:	e0bffd17 	ldw	r2,-12(fp)
    a5f8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a5fc:	e0bffa17 	ldw	r2,-24(fp)
    a600:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    a604:	00bfffc4 	movi	r2,-1
    a608:	e0bfff15 	stw	r2,-4(fp)
    a60c:	00000c06 	br	a640 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
    a610:	d0a00c17 	ldw	r2,-32720(gp)
    a614:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
    a618:	d0e00c17 	ldw	r3,-32720(gp)
    a61c:	e0bffe17 	ldw	r2,-8(fp)
    a620:	1885883a 	add	r2,r3,r2
    a624:	d0a00c15 	stw	r2,-32720(gp)
    a628:	e0bffd17 	ldw	r2,-12(fp)
    a62c:	e0bff915 	stw	r2,-28(fp)
    a630:	e0bff917 	ldw	r2,-28(fp)
    a634:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    a638:	e0bffc17 	ldw	r2,-16(fp)
    a63c:	e0bfff15 	stw	r2,-4(fp)
    a640:	e0bfff17 	ldw	r2,-4(fp)
} 
    a644:	e037883a 	mov	sp,fp
    a648:	df000017 	ldw	fp,0(sp)
    a64c:	dec00104 	addi	sp,sp,4
    a650:	f800283a 	ret

0000a654 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    a654:	defff704 	addi	sp,sp,-36
    a658:	dfc00815 	stw	ra,32(sp)
    a65c:	df000715 	stw	fp,28(sp)
    a660:	df000704 	addi	fp,sp,28
    a664:	e13ffb15 	stw	r4,-20(fp)
    a668:	e17ffc15 	stw	r5,-16(fp)
    a66c:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    a670:	e0bffb17 	ldw	r2,-20(fp)
    a674:	1004803a 	cmplt	r2,r2,zero
    a678:	1000081e 	bne	r2,zero,a69c <write+0x48>
    a67c:	e0bffb17 	ldw	r2,-20(fp)
    a680:	10800324 	muli	r2,r2,12
    a684:	1007883a 	mov	r3,r2
    a688:	00800074 	movhi	r2,1
    a68c:	10b70a04 	addi	r2,r2,-9176
    a690:	1887883a 	add	r3,r3,r2
    a694:	e0ffff15 	stw	r3,-4(fp)
    a698:	00000106 	br	a6a0 <write+0x4c>
    a69c:	e03fff15 	stw	zero,-4(fp)
    a6a0:	e0bfff17 	ldw	r2,-4(fp)
    a6a4:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    a6a8:	e0bffa17 	ldw	r2,-24(fp)
    a6ac:	1005003a 	cmpeq	r2,r2,zero
    a6b0:	1000241e 	bne	r2,zero,a744 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    a6b4:	e0bffa17 	ldw	r2,-24(fp)
    a6b8:	10800217 	ldw	r2,8(r2)
    a6bc:	108000cc 	andi	r2,r2,3
    a6c0:	1005003a 	cmpeq	r2,r2,zero
    a6c4:	10001a1e 	bne	r2,zero,a730 <write+0xdc>
    a6c8:	e0bffa17 	ldw	r2,-24(fp)
    a6cc:	10800017 	ldw	r2,0(r2)
    a6d0:	10800617 	ldw	r2,24(r2)
    a6d4:	1005003a 	cmpeq	r2,r2,zero
    a6d8:	1000151e 	bne	r2,zero,a730 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    a6dc:	e0bffa17 	ldw	r2,-24(fp)
    a6e0:	10800017 	ldw	r2,0(r2)
    a6e4:	10800617 	ldw	r2,24(r2)
    a6e8:	e17ffc17 	ldw	r5,-16(fp)
    a6ec:	e1bffd17 	ldw	r6,-12(fp)
    a6f0:	e13ffa17 	ldw	r4,-24(fp)
    a6f4:	103ee83a 	callr	r2
    a6f8:	e0bff915 	stw	r2,-28(fp)
    a6fc:	e0bff917 	ldw	r2,-28(fp)
    a700:	1004403a 	cmpge	r2,r2,zero
    a704:	1000071e 	bne	r2,zero,a724 <write+0xd0>
      {
        ALT_ERRNO = -rval;
    a708:	000a7740 	call	a774 <alt_get_errno>
    a70c:	e0fff917 	ldw	r3,-28(fp)
    a710:	00c7c83a 	sub	r3,zero,r3
    a714:	10c00015 	stw	r3,0(r2)
        return -1;
    a718:	00bfffc4 	movi	r2,-1
    a71c:	e0bffe15 	stw	r2,-8(fp)
    a720:	00000e06 	br	a75c <write+0x108>
      }
      return rval;
    a724:	e0bff917 	ldw	r2,-28(fp)
    a728:	e0bffe15 	stw	r2,-8(fp)
    a72c:	00000b06 	br	a75c <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
    a730:	000a7740 	call	a774 <alt_get_errno>
    a734:	1007883a 	mov	r3,r2
    a738:	00800344 	movi	r2,13
    a73c:	18800015 	stw	r2,0(r3)
    a740:	00000406 	br	a754 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    a744:	000a7740 	call	a774 <alt_get_errno>
    a748:	1007883a 	mov	r3,r2
    a74c:	00801444 	movi	r2,81
    a750:	18800015 	stw	r2,0(r3)
  }
  return -1;
    a754:	00bfffc4 	movi	r2,-1
    a758:	e0bffe15 	stw	r2,-8(fp)
    a75c:	e0bffe17 	ldw	r2,-8(fp)
}
    a760:	e037883a 	mov	sp,fp
    a764:	dfc00117 	ldw	ra,4(sp)
    a768:	df000017 	ldw	fp,0(sp)
    a76c:	dec00204 	addi	sp,sp,8
    a770:	f800283a 	ret

0000a774 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    a774:	defffd04 	addi	sp,sp,-12
    a778:	dfc00215 	stw	ra,8(sp)
    a77c:	df000115 	stw	fp,4(sp)
    a780:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    a784:	00800074 	movhi	r2,1
    a788:	10bbef04 	addi	r2,r2,-4164
    a78c:	10800017 	ldw	r2,0(r2)
    a790:	1005003a 	cmpeq	r2,r2,zero
    a794:	1000061e 	bne	r2,zero,a7b0 <alt_get_errno+0x3c>
    a798:	00800074 	movhi	r2,1
    a79c:	10bbef04 	addi	r2,r2,-4164
    a7a0:	10800017 	ldw	r2,0(r2)
    a7a4:	103ee83a 	callr	r2
    a7a8:	e0bfff15 	stw	r2,-4(fp)
    a7ac:	00000306 	br	a7bc <alt_get_errno+0x48>
    a7b0:	00800074 	movhi	r2,1
    a7b4:	1082f304 	addi	r2,r2,3020
    a7b8:	e0bfff15 	stw	r2,-4(fp)
    a7bc:	e0bfff17 	ldw	r2,-4(fp)
}
    a7c0:	e037883a 	mov	sp,fp
    a7c4:	dfc00117 	ldw	ra,4(sp)
    a7c8:	df000017 	ldw	fp,0(sp)
    a7cc:	dec00204 	addi	sp,sp,8
    a7d0:	f800283a 	ret

0000a7d4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    a7d4:	defffd04 	addi	sp,sp,-12
    a7d8:	dfc00215 	stw	ra,8(sp)
    a7dc:	df000115 	stw	fp,4(sp)
    a7e0:	df000104 	addi	fp,sp,4
    a7e4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
    a7e8:	000ca240 	call	ca24 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    a7ec:	00800044 	movi	r2,1
    a7f0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    a7f4:	e037883a 	mov	sp,fp
    a7f8:	dfc00117 	ldw	ra,4(sp)
    a7fc:	df000017 	ldw	fp,0(sp)
    a800:	dec00204 	addi	sp,sp,8
    a804:	f800283a 	ret

0000a808 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    a808:	defffe04 	addi	sp,sp,-8
    a80c:	dfc00115 	stw	ra,4(sp)
    a810:	df000015 	stw	fp,0(sp)
    a814:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER0, timer0);
    a818:	01040034 	movhi	r4,4096
    a81c:	21002004 	addi	r4,r4,128
    a820:	000b883a 	mov	r5,zero
    a824:	01800044 	movi	r6,1
    a828:	01c00044 	movi	r7,1
    a82c:	000b3f80 	call	b3f8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER1, timer1);
    ALTERA_AVALON_TIMER_INIT ( TIMER2, timer2);
    ALTERA_AVALON_TIMER_INIT ( TIMER3, timer3);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    a830:	01000074 	movhi	r4,1
    a834:	21377404 	addi	r4,r4,-8752
    a838:	000b883a 	mov	r5,zero
    a83c:	000d883a 	mov	r6,zero
    a840:	000aa240 	call	aa24 <altera_avalon_jtag_uart_init>
    a844:	01000074 	movhi	r4,1
    a848:	21376a04 	addi	r4,r4,-8792
    a84c:	000a8a40 	call	a8a4 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_PORT0, SPI_port0);
    ALTERA_AVALON_SPI_INIT ( SPI_PORT1, SPI_port1);
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    ALTERA_AVALON_UART_INIT ( SERIAL_PORT0, Serial_port0);
    a850:	01000074 	movhi	r4,1
    a854:	213b8c04 	addi	r4,r4,-4560
    a858:	000b883a 	mov	r5,zero
    a85c:	01800144 	movi	r6,5
    a860:	000b5800 	call	b580 <altera_avalon_uart_init>
    a864:	01000074 	movhi	r4,1
    a868:	213b8204 	addi	r4,r4,-4600
    a86c:	000a8a40 	call	a8a4 <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( SERIAL_PORT1, Serial_port1);
    a870:	01000074 	movhi	r4,1
    a874:	213bbd04 	addi	r4,r4,-4364
    a878:	000b883a 	mov	r5,zero
    a87c:	01800184 	movi	r6,6
    a880:	000b5800 	call	b580 <altera_avalon_uart_init>
    a884:	01000074 	movhi	r4,1
    a888:	213bb304 	addi	r4,r4,-4404
    a88c:	000a8a40 	call	a8a4 <alt_dev_reg>
}
    a890:	e037883a 	mov	sp,fp
    a894:	dfc00117 	ldw	ra,4(sp)
    a898:	df000017 	ldw	fp,0(sp)
    a89c:	dec00204 	addi	sp,sp,8
    a8a0:	f800283a 	ret

0000a8a4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    a8a4:	defffd04 	addi	sp,sp,-12
    a8a8:	dfc00215 	stw	ra,8(sp)
    a8ac:	df000115 	stw	fp,4(sp)
    a8b0:	df000104 	addi	fp,sp,4
    a8b4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    a8b8:	e13fff17 	ldw	r4,-4(fp)
    a8bc:	01400074 	movhi	r5,1
    a8c0:	297bec04 	addi	r5,r5,-4176
    a8c4:	000bfa80 	call	bfa8 <alt_dev_llist_insert>
}
    a8c8:	e037883a 	mov	sp,fp
    a8cc:	dfc00117 	ldw	ra,4(sp)
    a8d0:	df000017 	ldw	fp,0(sp)
    a8d4:	dec00204 	addi	sp,sp,8
    a8d8:	f800283a 	ret

0000a8dc <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    a8dc:	defffa04 	addi	sp,sp,-24
    a8e0:	dfc00515 	stw	ra,20(sp)
    a8e4:	df000415 	stw	fp,16(sp)
    a8e8:	df000404 	addi	fp,sp,16
    a8ec:	e13ffd15 	stw	r4,-12(fp)
    a8f0:	e17ffe15 	stw	r5,-8(fp)
    a8f4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    a8f8:	e0bffd17 	ldw	r2,-12(fp)
    a8fc:	10800017 	ldw	r2,0(r2)
    a900:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    a904:	e0bffc17 	ldw	r2,-16(fp)
    a908:	11000a04 	addi	r4,r2,40
    a90c:	e0bffd17 	ldw	r2,-12(fp)
    a910:	11c00217 	ldw	r7,8(r2)
    a914:	e17ffe17 	ldw	r5,-8(fp)
    a918:	e1bfff17 	ldw	r6,-4(fp)
    a91c:	000af240 	call	af24 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    a920:	e037883a 	mov	sp,fp
    a924:	dfc00117 	ldw	ra,4(sp)
    a928:	df000017 	ldw	fp,0(sp)
    a92c:	dec00204 	addi	sp,sp,8
    a930:	f800283a 	ret

0000a934 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    a934:	defffa04 	addi	sp,sp,-24
    a938:	dfc00515 	stw	ra,20(sp)
    a93c:	df000415 	stw	fp,16(sp)
    a940:	df000404 	addi	fp,sp,16
    a944:	e13ffd15 	stw	r4,-12(fp)
    a948:	e17ffe15 	stw	r5,-8(fp)
    a94c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    a950:	e0bffd17 	ldw	r2,-12(fp)
    a954:	10800017 	ldw	r2,0(r2)
    a958:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    a95c:	e0bffc17 	ldw	r2,-16(fp)
    a960:	11000a04 	addi	r4,r2,40
    a964:	e0bffd17 	ldw	r2,-12(fp)
    a968:	11c00217 	ldw	r7,8(r2)
    a96c:	e17ffe17 	ldw	r5,-8(fp)
    a970:	e1bfff17 	ldw	r6,-4(fp)
    a974:	000b1480 	call	b148 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    a978:	e037883a 	mov	sp,fp
    a97c:	dfc00117 	ldw	ra,4(sp)
    a980:	df000017 	ldw	fp,0(sp)
    a984:	dec00204 	addi	sp,sp,8
    a988:	f800283a 	ret

0000a98c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    a98c:	defffc04 	addi	sp,sp,-16
    a990:	dfc00315 	stw	ra,12(sp)
    a994:	df000215 	stw	fp,8(sp)
    a998:	df000204 	addi	fp,sp,8
    a99c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    a9a0:	e0bfff17 	ldw	r2,-4(fp)
    a9a4:	10800017 	ldw	r2,0(r2)
    a9a8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    a9ac:	e0bffe17 	ldw	r2,-8(fp)
    a9b0:	11000a04 	addi	r4,r2,40
    a9b4:	e0bfff17 	ldw	r2,-4(fp)
    a9b8:	11400217 	ldw	r5,8(r2)
    a9bc:	000adbc0 	call	adbc <altera_avalon_jtag_uart_close>
}
    a9c0:	e037883a 	mov	sp,fp
    a9c4:	dfc00117 	ldw	ra,4(sp)
    a9c8:	df000017 	ldw	fp,0(sp)
    a9cc:	dec00204 	addi	sp,sp,8
    a9d0:	f800283a 	ret

0000a9d4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    a9d4:	defffa04 	addi	sp,sp,-24
    a9d8:	dfc00515 	stw	ra,20(sp)
    a9dc:	df000415 	stw	fp,16(sp)
    a9e0:	df000404 	addi	fp,sp,16
    a9e4:	e13ffd15 	stw	r4,-12(fp)
    a9e8:	e17ffe15 	stw	r5,-8(fp)
    a9ec:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    a9f0:	e0bffd17 	ldw	r2,-12(fp)
    a9f4:	10800017 	ldw	r2,0(r2)
    a9f8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    a9fc:	e0bffc17 	ldw	r2,-16(fp)
    aa00:	11000a04 	addi	r4,r2,40
    aa04:	e17ffe17 	ldw	r5,-8(fp)
    aa08:	e1bfff17 	ldw	r6,-4(fp)
    aa0c:	000ae300 	call	ae30 <altera_avalon_jtag_uart_ioctl>
}
    aa10:	e037883a 	mov	sp,fp
    aa14:	dfc00117 	ldw	ra,4(sp)
    aa18:	df000017 	ldw	fp,0(sp)
    aa1c:	dec00204 	addi	sp,sp,8
    aa20:	f800283a 	ret

0000aa24 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    aa24:	defffa04 	addi	sp,sp,-24
    aa28:	dfc00515 	stw	ra,20(sp)
    aa2c:	df000415 	stw	fp,16(sp)
    aa30:	df000404 	addi	fp,sp,16
    aa34:	e13ffd15 	stw	r4,-12(fp)
    aa38:	e17ffe15 	stw	r5,-8(fp)
    aa3c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    aa40:	e0fffd17 	ldw	r3,-12(fp)
    aa44:	00800044 	movi	r2,1
    aa48:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    aa4c:	e0bffd17 	ldw	r2,-12(fp)
    aa50:	10800017 	ldw	r2,0(r2)
    aa54:	11000104 	addi	r4,r2,4
    aa58:	e0bffd17 	ldw	r2,-12(fp)
    aa5c:	10800817 	ldw	r2,32(r2)
    aa60:	1007883a 	mov	r3,r2
    aa64:	2005883a 	mov	r2,r4
    aa68:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    aa6c:	e13ffe17 	ldw	r4,-8(fp)
    aa70:	e17fff17 	ldw	r5,-4(fp)
    aa74:	d8000015 	stw	zero,0(sp)
    aa78:	01800074 	movhi	r6,1
    aa7c:	31aab904 	addi	r6,r6,-21788
    aa80:	e1fffd17 	ldw	r7,-12(fp)
    aa84:	000c1b40 	call	c1b4 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    aa88:	e0bffd17 	ldw	r2,-12(fp)
    aa8c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    aa90:	e0bffd17 	ldw	r2,-12(fp)
    aa94:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    aa98:	00800074 	movhi	r2,1
    aa9c:	1082f804 	addi	r2,r2,3040
    aaa0:	10800017 	ldw	r2,0(r2)
    aaa4:	100b883a 	mov	r5,r2
    aaa8:	01800074 	movhi	r6,1
    aaac:	31ab4304 	addi	r6,r6,-21236
    aab0:	e1fffd17 	ldw	r7,-12(fp)
    aab4:	000be380 	call	be38 <alt_alarm_start>
    aab8:	1004403a 	cmpge	r2,r2,zero
    aabc:	1000041e 	bne	r2,zero,aad0 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    aac0:	e0fffd17 	ldw	r3,-12(fp)
    aac4:	00a00034 	movhi	r2,32768
    aac8:	10bfffc4 	addi	r2,r2,-1
    aacc:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    aad0:	e037883a 	mov	sp,fp
    aad4:	dfc00117 	ldw	ra,4(sp)
    aad8:	df000017 	ldw	fp,0(sp)
    aadc:	dec00204 	addi	sp,sp,8
    aae0:	f800283a 	ret

0000aae4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    aae4:	defff804 	addi	sp,sp,-32
    aae8:	df000715 	stw	fp,28(sp)
    aaec:	df000704 	addi	fp,sp,28
    aaf0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    aaf4:	e0bfff17 	ldw	r2,-4(fp)
    aaf8:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
    aafc:	e0bffe17 	ldw	r2,-8(fp)
    ab00:	10800017 	ldw	r2,0(r2)
    ab04:	e0bffd15 	stw	r2,-12(fp)
    ab08:	00000006 	br	ab0c <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    ab0c:	e0bffd17 	ldw	r2,-12(fp)
    ab10:	10800104 	addi	r2,r2,4
    ab14:	10800037 	ldwio	r2,0(r2)
    ab18:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    ab1c:	e0bffc17 	ldw	r2,-16(fp)
    ab20:	1080c00c 	andi	r2,r2,768
    ab24:	1005003a 	cmpeq	r2,r2,zero
    ab28:	1000741e 	bne	r2,zero,acfc <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    ab2c:	e0bffc17 	ldw	r2,-16(fp)
    ab30:	1080400c 	andi	r2,r2,256
    ab34:	1005003a 	cmpeq	r2,r2,zero
    ab38:	1000351e 	bne	r2,zero,ac10 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    ab3c:	00800074 	movhi	r2,1
    ab40:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ab44:	e0bffe17 	ldw	r2,-8(fp)
    ab48:	10800a17 	ldw	r2,40(r2)
    ab4c:	10800044 	addi	r2,r2,1
    ab50:	1081ffcc 	andi	r2,r2,2047
    ab54:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
    ab58:	e0bffe17 	ldw	r2,-8(fp)
    ab5c:	10c00b17 	ldw	r3,44(r2)
    ab60:	e0bffa17 	ldw	r2,-24(fp)
    ab64:	18801626 	beq	r3,r2,abc0 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    ab68:	e0bffd17 	ldw	r2,-12(fp)
    ab6c:	10800037 	ldwio	r2,0(r2)
    ab70:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    ab74:	e0bffb17 	ldw	r2,-20(fp)
    ab78:	10a0000c 	andi	r2,r2,32768
    ab7c:	1005003a 	cmpeq	r2,r2,zero
    ab80:	10000f1e 	bne	r2,zero,abc0 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    ab84:	e0bffe17 	ldw	r2,-8(fp)
    ab88:	10c00a17 	ldw	r3,40(r2)
    ab8c:	e0bffb17 	ldw	r2,-20(fp)
    ab90:	1009883a 	mov	r4,r2
    ab94:	e0bffe17 	ldw	r2,-8(fp)
    ab98:	1885883a 	add	r2,r3,r2
    ab9c:	10800e04 	addi	r2,r2,56
    aba0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    aba4:	e0bffe17 	ldw	r2,-8(fp)
    aba8:	10800a17 	ldw	r2,40(r2)
    abac:	10800044 	addi	r2,r2,1
    abb0:	10c1ffcc 	andi	r3,r2,2047
    abb4:	e0bffe17 	ldw	r2,-8(fp)
    abb8:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    abbc:	003fe106 	br	ab44 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    abc0:	e0bffb17 	ldw	r2,-20(fp)
    abc4:	10bfffec 	andhi	r2,r2,65535
    abc8:	1005003a 	cmpeq	r2,r2,zero
    abcc:	1000101e 	bne	r2,zero,ac10 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    abd0:	e0bffe17 	ldw	r2,-8(fp)
    abd4:	10c00817 	ldw	r3,32(r2)
    abd8:	00bfff84 	movi	r2,-2
    abdc:	1886703a 	and	r3,r3,r2
    abe0:	e0bffe17 	ldw	r2,-8(fp)
    abe4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    abe8:	e0bffd17 	ldw	r2,-12(fp)
    abec:	11000104 	addi	r4,r2,4
    abf0:	e0bffe17 	ldw	r2,-8(fp)
    abf4:	10800817 	ldw	r2,32(r2)
    abf8:	1007883a 	mov	r3,r2
    abfc:	2005883a 	mov	r2,r4
    ac00:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    ac04:	e0bffd17 	ldw	r2,-12(fp)
    ac08:	10800104 	addi	r2,r2,4
    ac0c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    ac10:	e0bffc17 	ldw	r2,-16(fp)
    ac14:	1080800c 	andi	r2,r2,512
    ac18:	1005003a 	cmpeq	r2,r2,zero
    ac1c:	103fbb1e 	bne	r2,zero,ab0c <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    ac20:	e0bffc17 	ldw	r2,-16(fp)
    ac24:	10bfffec 	andhi	r2,r2,65535
    ac28:	1004d43a 	srli	r2,r2,16
    ac2c:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    ac30:	00001506 	br	ac88 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    ac34:	e13ffd17 	ldw	r4,-12(fp)
    ac38:	e0bffe17 	ldw	r2,-8(fp)
    ac3c:	10c00d17 	ldw	r3,52(r2)
    ac40:	e0bffe17 	ldw	r2,-8(fp)
    ac44:	1885883a 	add	r2,r3,r2
    ac48:	10820e04 	addi	r2,r2,2104
    ac4c:	10800003 	ldbu	r2,0(r2)
    ac50:	10c03fcc 	andi	r3,r2,255
    ac54:	18c0201c 	xori	r3,r3,128
    ac58:	18ffe004 	addi	r3,r3,-128
    ac5c:	2005883a 	mov	r2,r4
    ac60:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ac64:	e0bffe17 	ldw	r2,-8(fp)
    ac68:	10800d17 	ldw	r2,52(r2)
    ac6c:	10800044 	addi	r2,r2,1
    ac70:	10c1ffcc 	andi	r3,r2,2047
    ac74:	e0bffe17 	ldw	r2,-8(fp)
    ac78:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    ac7c:	e0bff917 	ldw	r2,-28(fp)
    ac80:	10bfffc4 	addi	r2,r2,-1
    ac84:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    ac88:	e0bff917 	ldw	r2,-28(fp)
    ac8c:	1005003a 	cmpeq	r2,r2,zero
    ac90:	1000051e 	bne	r2,zero,aca8 <altera_avalon_jtag_uart_irq+0x1c4>
    ac94:	e0bffe17 	ldw	r2,-8(fp)
    ac98:	10c00d17 	ldw	r3,52(r2)
    ac9c:	e0bffe17 	ldw	r2,-8(fp)
    aca0:	10800c17 	ldw	r2,48(r2)
    aca4:	18bfe31e 	bne	r3,r2,ac34 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    aca8:	e0bff917 	ldw	r2,-28(fp)
    acac:	1005003a 	cmpeq	r2,r2,zero
    acb0:	103f961e 	bne	r2,zero,ab0c <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    acb4:	e0bffe17 	ldw	r2,-8(fp)
    acb8:	10c00817 	ldw	r3,32(r2)
    acbc:	00bfff44 	movi	r2,-3
    acc0:	1886703a 	and	r3,r3,r2
    acc4:	e0bffe17 	ldw	r2,-8(fp)
    acc8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    accc:	e0bffe17 	ldw	r2,-8(fp)
    acd0:	10800017 	ldw	r2,0(r2)
    acd4:	11000104 	addi	r4,r2,4
    acd8:	e0bffe17 	ldw	r2,-8(fp)
    acdc:	10800817 	ldw	r2,32(r2)
    ace0:	1007883a 	mov	r3,r2
    ace4:	2005883a 	mov	r2,r4
    ace8:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    acec:	e0bffd17 	ldw	r2,-12(fp)
    acf0:	10800104 	addi	r2,r2,4
    acf4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    acf8:	003f8406 	br	ab0c <altera_avalon_jtag_uart_irq+0x28>
}
    acfc:	e037883a 	mov	sp,fp
    ad00:	df000017 	ldw	fp,0(sp)
    ad04:	dec00104 	addi	sp,sp,4
    ad08:	f800283a 	ret

0000ad0c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    ad0c:	defffc04 	addi	sp,sp,-16
    ad10:	df000315 	stw	fp,12(sp)
    ad14:	df000304 	addi	fp,sp,12
    ad18:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    ad1c:	e0bfff17 	ldw	r2,-4(fp)
    ad20:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    ad24:	e0bffe17 	ldw	r2,-8(fp)
    ad28:	10800017 	ldw	r2,0(r2)
    ad2c:	10800104 	addi	r2,r2,4
    ad30:	10800037 	ldwio	r2,0(r2)
    ad34:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    ad38:	e0bffd17 	ldw	r2,-12(fp)
    ad3c:	1081000c 	andi	r2,r2,1024
    ad40:	1005003a 	cmpeq	r2,r2,zero
    ad44:	10000c1e 	bne	r2,zero,ad78 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    ad48:	e0bffe17 	ldw	r2,-8(fp)
    ad4c:	10800017 	ldw	r2,0(r2)
    ad50:	11000104 	addi	r4,r2,4
    ad54:	e0bffe17 	ldw	r2,-8(fp)
    ad58:	10800817 	ldw	r2,32(r2)
    ad5c:	10810014 	ori	r2,r2,1024
    ad60:	1007883a 	mov	r3,r2
    ad64:	2005883a 	mov	r2,r4
    ad68:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
    ad6c:	e0bffe17 	ldw	r2,-8(fp)
    ad70:	10000915 	stw	zero,36(r2)
    ad74:	00000a06 	br	ada0 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    ad78:	e0bffe17 	ldw	r2,-8(fp)
    ad7c:	10c00917 	ldw	r3,36(r2)
    ad80:	00a00034 	movhi	r2,32768
    ad84:	10bfff04 	addi	r2,r2,-4
    ad88:	10c00536 	bltu	r2,r3,ada0 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
    ad8c:	e0bffe17 	ldw	r2,-8(fp)
    ad90:	10800917 	ldw	r2,36(r2)
    ad94:	10c00044 	addi	r3,r2,1
    ad98:	e0bffe17 	ldw	r2,-8(fp)
    ad9c:	10c00915 	stw	r3,36(r2)
    ada0:	00800074 	movhi	r2,1
    ada4:	1082f804 	addi	r2,r2,3040
    ada8:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    adac:	e037883a 	mov	sp,fp
    adb0:	df000017 	ldw	fp,0(sp)
    adb4:	dec00104 	addi	sp,sp,4
    adb8:	f800283a 	ret

0000adbc <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    adbc:	defffc04 	addi	sp,sp,-16
    adc0:	df000315 	stw	fp,12(sp)
    adc4:	df000304 	addi	fp,sp,12
    adc8:	e13ffd15 	stw	r4,-12(fp)
    adcc:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    add0:	00000706 	br	adf0 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
    add4:	e0bffe17 	ldw	r2,-8(fp)
    add8:	1090000c 	andi	r2,r2,16384
    addc:	1005003a 	cmpeq	r2,r2,zero
    ade0:	1000031e 	bne	r2,zero,adf0 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
    ade4:	00bffd44 	movi	r2,-11
    ade8:	e0bfff15 	stw	r2,-4(fp)
    adec:	00000b06 	br	ae1c <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    adf0:	e0bffd17 	ldw	r2,-12(fp)
    adf4:	10c00d17 	ldw	r3,52(r2)
    adf8:	e0bffd17 	ldw	r2,-12(fp)
    adfc:	10800c17 	ldw	r2,48(r2)
    ae00:	18800526 	beq	r3,r2,ae18 <altera_avalon_jtag_uart_close+0x5c>
    ae04:	e0bffd17 	ldw	r2,-12(fp)
    ae08:	10c00917 	ldw	r3,36(r2)
    ae0c:	e0bffd17 	ldw	r2,-12(fp)
    ae10:	10800117 	ldw	r2,4(r2)
    ae14:	18bfef36 	bltu	r3,r2,add4 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    ae18:	e03fff15 	stw	zero,-4(fp)
    ae1c:	e0bfff17 	ldw	r2,-4(fp)
}
    ae20:	e037883a 	mov	sp,fp
    ae24:	df000017 	ldw	fp,0(sp)
    ae28:	dec00104 	addi	sp,sp,4
    ae2c:	f800283a 	ret

0000ae30 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    ae30:	defff804 	addi	sp,sp,-32
    ae34:	df000715 	stw	fp,28(sp)
    ae38:	df000704 	addi	fp,sp,28
    ae3c:	e13ffb15 	stw	r4,-20(fp)
    ae40:	e17ffc15 	stw	r5,-16(fp)
    ae44:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
    ae48:	00bff9c4 	movi	r2,-25
    ae4c:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
    ae50:	e0bffc17 	ldw	r2,-16(fp)
    ae54:	e0bfff15 	stw	r2,-4(fp)
    ae58:	e0ffff17 	ldw	r3,-4(fp)
    ae5c:	189a8060 	cmpeqi	r2,r3,27137
    ae60:	1000041e 	bne	r2,zero,ae74 <altera_avalon_jtag_uart_ioctl+0x44>
    ae64:	e0ffff17 	ldw	r3,-4(fp)
    ae68:	189a80a0 	cmpeqi	r2,r3,27138
    ae6c:	10001b1e 	bne	r2,zero,aedc <altera_avalon_jtag_uart_ioctl+0xac>
    ae70:	00002706 	br	af10 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    ae74:	e0bffb17 	ldw	r2,-20(fp)
    ae78:	10c00117 	ldw	r3,4(r2)
    ae7c:	00a00034 	movhi	r2,32768
    ae80:	10bfffc4 	addi	r2,r2,-1
    ae84:	18802226 	beq	r3,r2,af10 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
    ae88:	e0bffd17 	ldw	r2,-12(fp)
    ae8c:	10800017 	ldw	r2,0(r2)
    ae90:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    ae94:	e0bff917 	ldw	r2,-28(fp)
    ae98:	10800090 	cmplti	r2,r2,2
    ae9c:	1000071e 	bne	r2,zero,aebc <altera_avalon_jtag_uart_ioctl+0x8c>
    aea0:	e0fff917 	ldw	r3,-28(fp)
    aea4:	00a00034 	movhi	r2,32768
    aea8:	10bfffc4 	addi	r2,r2,-1
    aeac:	18800326 	beq	r3,r2,aebc <altera_avalon_jtag_uart_ioctl+0x8c>
    aeb0:	e0bff917 	ldw	r2,-28(fp)
    aeb4:	e0bffe15 	stw	r2,-8(fp)
    aeb8:	00000306 	br	aec8 <altera_avalon_jtag_uart_ioctl+0x98>
    aebc:	00e00034 	movhi	r3,32768
    aec0:	18ffff84 	addi	r3,r3,-2
    aec4:	e0fffe15 	stw	r3,-8(fp)
    aec8:	e0bffb17 	ldw	r2,-20(fp)
    aecc:	e0fffe17 	ldw	r3,-8(fp)
    aed0:	10c00115 	stw	r3,4(r2)
      rc = 0;
    aed4:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
    aed8:	00000d06 	br	af10 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    aedc:	e0bffb17 	ldw	r2,-20(fp)
    aee0:	10c00117 	ldw	r3,4(r2)
    aee4:	00a00034 	movhi	r2,32768
    aee8:	10bfffc4 	addi	r2,r2,-1
    aeec:	18800826 	beq	r3,r2,af10 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    aef0:	e13ffd17 	ldw	r4,-12(fp)
    aef4:	e0bffb17 	ldw	r2,-20(fp)
    aef8:	10c00917 	ldw	r3,36(r2)
    aefc:	e0bffb17 	ldw	r2,-20(fp)
    af00:	10800117 	ldw	r2,4(r2)
    af04:	1885803a 	cmpltu	r2,r3,r2
    af08:	20800015 	stw	r2,0(r4)
      rc = 0;
    af0c:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
    af10:	e0bffa17 	ldw	r2,-24(fp)
}
    af14:	e037883a 	mov	sp,fp
    af18:	df000017 	ldw	fp,0(sp)
    af1c:	dec00104 	addi	sp,sp,4
    af20:	f800283a 	ret

0000af24 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    af24:	defff204 	addi	sp,sp,-56
    af28:	dfc00d15 	stw	ra,52(sp)
    af2c:	df000c15 	stw	fp,48(sp)
    af30:	df000c04 	addi	fp,sp,48
    af34:	e13ffb15 	stw	r4,-20(fp)
    af38:	e17ffc15 	stw	r5,-16(fp)
    af3c:	e1bffd15 	stw	r6,-12(fp)
    af40:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
    af44:	e0bffc17 	ldw	r2,-16(fp)
    af48:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    af4c:	00004806 	br	b070 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    af50:	e0bffb17 	ldw	r2,-20(fp)
    af54:	10800a17 	ldw	r2,40(r2)
    af58:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    af5c:	e0bffb17 	ldw	r2,-20(fp)
    af60:	10800b17 	ldw	r2,44(r2)
    af64:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
    af68:	e0fff717 	ldw	r3,-36(fp)
    af6c:	e0bff617 	ldw	r2,-40(fp)
    af70:	18800536 	bltu	r3,r2,af88 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    af74:	e0bff717 	ldw	r2,-36(fp)
    af78:	e0fff617 	ldw	r3,-40(fp)
    af7c:	10c5c83a 	sub	r2,r2,r3
    af80:	e0bff815 	stw	r2,-32(fp)
    af84:	00000406 	br	af98 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    af88:	00820004 	movi	r2,2048
    af8c:	e0fff617 	ldw	r3,-40(fp)
    af90:	10c5c83a 	sub	r2,r2,r3
    af94:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    af98:	e0bff817 	ldw	r2,-32(fp)
    af9c:	1005003a 	cmpeq	r2,r2,zero
    afa0:	10001f1e 	bne	r2,zero,b020 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
    afa4:	e0fffd17 	ldw	r3,-12(fp)
    afa8:	e0bff817 	ldw	r2,-32(fp)
    afac:	1880022e 	bgeu	r3,r2,afb8 <altera_avalon_jtag_uart_read+0x94>
        n = space;
    afb0:	e0bffd17 	ldw	r2,-12(fp)
    afb4:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    afb8:	e0bffb17 	ldw	r2,-20(fp)
    afbc:	10c00e04 	addi	r3,r2,56
    afc0:	e0bff617 	ldw	r2,-40(fp)
    afc4:	1887883a 	add	r3,r3,r2
    afc8:	e0bffa17 	ldw	r2,-24(fp)
    afcc:	1009883a 	mov	r4,r2
    afd0:	180b883a 	mov	r5,r3
    afd4:	e1bff817 	ldw	r6,-32(fp)
    afd8:	00058e80 	call	58e8 <memcpy>
      ptr   += n;
    afdc:	e0fff817 	ldw	r3,-32(fp)
    afe0:	e0bffa17 	ldw	r2,-24(fp)
    afe4:	10c5883a 	add	r2,r2,r3
    afe8:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
    afec:	e0fffd17 	ldw	r3,-12(fp)
    aff0:	e0bff817 	ldw	r2,-32(fp)
    aff4:	1885c83a 	sub	r2,r3,r2
    aff8:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    affc:	e0fff617 	ldw	r3,-40(fp)
    b000:	e0bff817 	ldw	r2,-32(fp)
    b004:	1885883a 	add	r2,r3,r2
    b008:	10c1ffcc 	andi	r3,r2,2047
    b00c:	e0bffb17 	ldw	r2,-20(fp)
    b010:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    b014:	e0bffd17 	ldw	r2,-12(fp)
    b018:	10800048 	cmpgei	r2,r2,1
    b01c:	103fcc1e 	bne	r2,zero,af50 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
    b020:	e0fffa17 	ldw	r3,-24(fp)
    b024:	e0bffc17 	ldw	r2,-16(fp)
    b028:	1880141e 	bne	r3,r2,b07c <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    b02c:	e0bffe17 	ldw	r2,-8(fp)
    b030:	1090000c 	andi	r2,r2,16384
    b034:	1004c03a 	cmpne	r2,r2,zero
    b038:	1000101e 	bne	r2,zero,b07c <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    b03c:	e0bffb17 	ldw	r2,-20(fp)
    b040:	10c00a17 	ldw	r3,40(r2)
    b044:	e0bff717 	ldw	r2,-36(fp)
    b048:	1880051e 	bne	r3,r2,b060 <altera_avalon_jtag_uart_read+0x13c>
    b04c:	e0bffb17 	ldw	r2,-20(fp)
    b050:	10c00917 	ldw	r3,36(r2)
    b054:	e0bffb17 	ldw	r2,-20(fp)
    b058:	10800117 	ldw	r2,4(r2)
    b05c:	18bff736 	bltu	r3,r2,b03c <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    b060:	e0bffb17 	ldw	r2,-20(fp)
    b064:	10c00a17 	ldw	r3,40(r2)
    b068:	e0bff717 	ldw	r2,-36(fp)
    b06c:	18800326 	beq	r3,r2,b07c <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    b070:	e0bffd17 	ldw	r2,-12(fp)
    b074:	10800048 	cmpgei	r2,r2,1
    b078:	103fb51e 	bne	r2,zero,af50 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    b07c:	e0fffa17 	ldw	r3,-24(fp)
    b080:	e0bffc17 	ldw	r2,-16(fp)
    b084:	18801926 	beq	r3,r2,b0ec <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b088:	0005303a 	rdctl	r2,status
    b08c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b090:	e0fff517 	ldw	r3,-44(fp)
    b094:	00bfff84 	movi	r2,-2
    b098:	1884703a 	and	r2,r3,r2
    b09c:	1001703a 	wrctl	status,r2
  
  return context;
    b0a0:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    b0a4:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    b0a8:	e0bffb17 	ldw	r2,-20(fp)
    b0ac:	10800817 	ldw	r2,32(r2)
    b0b0:	10c00054 	ori	r3,r2,1
    b0b4:	e0bffb17 	ldw	r2,-20(fp)
    b0b8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    b0bc:	e0bffb17 	ldw	r2,-20(fp)
    b0c0:	10800017 	ldw	r2,0(r2)
    b0c4:	11000104 	addi	r4,r2,4
    b0c8:	e0bffb17 	ldw	r2,-20(fp)
    b0cc:	10800817 	ldw	r2,32(r2)
    b0d0:	1007883a 	mov	r3,r2
    b0d4:	2005883a 	mov	r2,r4
    b0d8:	10c00035 	stwio	r3,0(r2)
    b0dc:	e0bff917 	ldw	r2,-28(fp)
    b0e0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b0e4:	e0bff417 	ldw	r2,-48(fp)
    b0e8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    b0ec:	e0fffa17 	ldw	r3,-24(fp)
    b0f0:	e0bffc17 	ldw	r2,-16(fp)
    b0f4:	18800526 	beq	r3,r2,b10c <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
    b0f8:	e0fffa17 	ldw	r3,-24(fp)
    b0fc:	e0bffc17 	ldw	r2,-16(fp)
    b100:	1887c83a 	sub	r3,r3,r2
    b104:	e0ffff15 	stw	r3,-4(fp)
    b108:	00000906 	br	b130 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
    b10c:	e0bffe17 	ldw	r2,-8(fp)
    b110:	1090000c 	andi	r2,r2,16384
    b114:	1005003a 	cmpeq	r2,r2,zero
    b118:	1000031e 	bne	r2,zero,b128 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    b11c:	00bffd44 	movi	r2,-11
    b120:	e0bfff15 	stw	r2,-4(fp)
    b124:	00000206 	br	b130 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
    b128:	00bffec4 	movi	r2,-5
    b12c:	e0bfff15 	stw	r2,-4(fp)
    b130:	e0bfff17 	ldw	r2,-4(fp)
}
    b134:	e037883a 	mov	sp,fp
    b138:	dfc00117 	ldw	ra,4(sp)
    b13c:	df000017 	ldw	fp,0(sp)
    b140:	dec00204 	addi	sp,sp,8
    b144:	f800283a 	ret

0000b148 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    b148:	defff204 	addi	sp,sp,-56
    b14c:	dfc00d15 	stw	ra,52(sp)
    b150:	df000c15 	stw	fp,48(sp)
    b154:	df000c04 	addi	fp,sp,48
    b158:	e13ffb15 	stw	r4,-20(fp)
    b15c:	e17ffc15 	stw	r5,-16(fp)
    b160:	e1bffd15 	stw	r6,-12(fp)
    b164:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    b168:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    b16c:	e0bffc17 	ldw	r2,-16(fp)
    b170:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    b174:	00003a06 	br	b260 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    b178:	e0bffb17 	ldw	r2,-20(fp)
    b17c:	10800c17 	ldw	r2,48(r2)
    b180:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
    b184:	e0bffb17 	ldw	r2,-20(fp)
    b188:	10800d17 	ldw	r2,52(r2)
    b18c:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
    b190:	e0fffa17 	ldw	r3,-24(fp)
    b194:	e0bff917 	ldw	r2,-28(fp)
    b198:	1880062e 	bgeu	r3,r2,b1b4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    b19c:	e0fff917 	ldw	r3,-28(fp)
    b1a0:	e0bffa17 	ldw	r2,-24(fp)
    b1a4:	1885c83a 	sub	r2,r3,r2
    b1a8:	10bfffc4 	addi	r2,r2,-1
    b1ac:	e0bff815 	stw	r2,-32(fp)
    b1b0:	00000c06 	br	b1e4 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
    b1b4:	e0bff917 	ldw	r2,-28(fp)
    b1b8:	1005003a 	cmpeq	r2,r2,zero
    b1bc:	1000051e 	bne	r2,zero,b1d4 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    b1c0:	00820004 	movi	r2,2048
    b1c4:	e0fffa17 	ldw	r3,-24(fp)
    b1c8:	10c5c83a 	sub	r2,r2,r3
    b1cc:	e0bff815 	stw	r2,-32(fp)
    b1d0:	00000406 	br	b1e4 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    b1d4:	0081ffc4 	movi	r2,2047
    b1d8:	e0fffa17 	ldw	r3,-24(fp)
    b1dc:	10c5c83a 	sub	r2,r2,r3
    b1e0:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    b1e4:	e0bff817 	ldw	r2,-32(fp)
    b1e8:	1005003a 	cmpeq	r2,r2,zero
    b1ec:	10001f1e 	bne	r2,zero,b26c <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
    b1f0:	e0fffd17 	ldw	r3,-12(fp)
    b1f4:	e0bff817 	ldw	r2,-32(fp)
    b1f8:	1880022e 	bgeu	r3,r2,b204 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
    b1fc:	e0bffd17 	ldw	r2,-12(fp)
    b200:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    b204:	e0bffb17 	ldw	r2,-20(fp)
    b208:	10c20e04 	addi	r3,r2,2104
    b20c:	e0bffa17 	ldw	r2,-24(fp)
    b210:	1885883a 	add	r2,r3,r2
    b214:	e0fffc17 	ldw	r3,-16(fp)
    b218:	1009883a 	mov	r4,r2
    b21c:	180b883a 	mov	r5,r3
    b220:	e1bff817 	ldw	r6,-32(fp)
    b224:	00058e80 	call	58e8 <memcpy>
      ptr   += n;
    b228:	e0fff817 	ldw	r3,-32(fp)
    b22c:	e0bffc17 	ldw	r2,-16(fp)
    b230:	10c5883a 	add	r2,r2,r3
    b234:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
    b238:	e0fffd17 	ldw	r3,-12(fp)
    b23c:	e0bff817 	ldw	r2,-32(fp)
    b240:	1885c83a 	sub	r2,r3,r2
    b244:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    b248:	e0fffa17 	ldw	r3,-24(fp)
    b24c:	e0bff817 	ldw	r2,-32(fp)
    b250:	1885883a 	add	r2,r3,r2
    b254:	10c1ffcc 	andi	r3,r2,2047
    b258:	e0bffb17 	ldw	r2,-20(fp)
    b25c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    b260:	e0bffd17 	ldw	r2,-12(fp)
    b264:	10800048 	cmpgei	r2,r2,1
    b268:	103fc31e 	bne	r2,zero,b178 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b26c:	0005303a 	rdctl	r2,status
    b270:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b274:	e0fff517 	ldw	r3,-44(fp)
    b278:	00bfff84 	movi	r2,-2
    b27c:	1884703a 	and	r2,r3,r2
    b280:	1001703a 	wrctl	status,r2
  
  return context;
    b284:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    b288:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    b28c:	e0bffb17 	ldw	r2,-20(fp)
    b290:	10800817 	ldw	r2,32(r2)
    b294:	10c00094 	ori	r3,r2,2
    b298:	e0bffb17 	ldw	r2,-20(fp)
    b29c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    b2a0:	e0bffb17 	ldw	r2,-20(fp)
    b2a4:	10800017 	ldw	r2,0(r2)
    b2a8:	11000104 	addi	r4,r2,4
    b2ac:	e0bffb17 	ldw	r2,-20(fp)
    b2b0:	10800817 	ldw	r2,32(r2)
    b2b4:	1007883a 	mov	r3,r2
    b2b8:	2005883a 	mov	r2,r4
    b2bc:	10c00035 	stwio	r3,0(r2)
    b2c0:	e0bff717 	ldw	r2,-36(fp)
    b2c4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b2c8:	e0bff417 	ldw	r2,-48(fp)
    b2cc:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    b2d0:	e0bffd17 	ldw	r2,-12(fp)
    b2d4:	10800050 	cmplti	r2,r2,1
    b2d8:	1000111e 	bne	r2,zero,b320 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
    b2dc:	e0bffe17 	ldw	r2,-8(fp)
    b2e0:	1090000c 	andi	r2,r2,16384
    b2e4:	1004c03a 	cmpne	r2,r2,zero
    b2e8:	1000101e 	bne	r2,zero,b32c <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    b2ec:	e0bffb17 	ldw	r2,-20(fp)
    b2f0:	10c00d17 	ldw	r3,52(r2)
    b2f4:	e0bff917 	ldw	r2,-28(fp)
    b2f8:	1880051e 	bne	r3,r2,b310 <altera_avalon_jtag_uart_write+0x1c8>
    b2fc:	e0bffb17 	ldw	r2,-20(fp)
    b300:	10c00917 	ldw	r3,36(r2)
    b304:	e0bffb17 	ldw	r2,-20(fp)
    b308:	10800117 	ldw	r2,4(r2)
    b30c:	18bff736 	bltu	r3,r2,b2ec <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
    b310:	e0bffb17 	ldw	r2,-20(fp)
    b314:	10c00d17 	ldw	r3,52(r2)
    b318:	e0bff917 	ldw	r2,-28(fp)
    b31c:	18800326 	beq	r3,r2,b32c <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
    b320:	e0bffd17 	ldw	r2,-12(fp)
    b324:	10800048 	cmpgei	r2,r2,1
    b328:	103fcd1e 	bne	r2,zero,b260 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    b32c:	e0fffc17 	ldw	r3,-16(fp)
    b330:	e0bff617 	ldw	r2,-40(fp)
    b334:	18800526 	beq	r3,r2,b34c <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
    b338:	e0fffc17 	ldw	r3,-16(fp)
    b33c:	e0bff617 	ldw	r2,-40(fp)
    b340:	1887c83a 	sub	r3,r3,r2
    b344:	e0ffff15 	stw	r3,-4(fp)
    b348:	00000906 	br	b370 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
    b34c:	e0bffe17 	ldw	r2,-8(fp)
    b350:	1090000c 	andi	r2,r2,16384
    b354:	1005003a 	cmpeq	r2,r2,zero
    b358:	1000031e 	bne	r2,zero,b368 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
    b35c:	00bffd44 	movi	r2,-11
    b360:	e0bfff15 	stw	r2,-4(fp)
    b364:	00000206 	br	b370 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
    b368:	00bffec4 	movi	r2,-5
    b36c:	e0bfff15 	stw	r2,-4(fp)
    b370:	e0bfff17 	ldw	r2,-4(fp)
}
    b374:	e037883a 	mov	sp,fp
    b378:	dfc00117 	ldw	ra,4(sp)
    b37c:	df000017 	ldw	fp,0(sp)
    b380:	dec00204 	addi	sp,sp,8
    b384:	f800283a 	ret

0000b388 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    b388:	defffa04 	addi	sp,sp,-24
    b38c:	dfc00515 	stw	ra,20(sp)
    b390:	df000415 	stw	fp,16(sp)
    b394:	df000404 	addi	fp,sp,16
    b398:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    b39c:	e0bfff17 	ldw	r2,-4(fp)
    b3a0:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    b3a4:	e0bfff17 	ldw	r2,-4(fp)
    b3a8:	10800104 	addi	r2,r2,4
    b3ac:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b3b0:	0005303a 	rdctl	r2,status
    b3b4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b3b8:	e0fffd17 	ldw	r3,-12(fp)
    b3bc:	00bfff84 	movi	r2,-2
    b3c0:	1884703a 	and	r2,r3,r2
    b3c4:	1001703a 	wrctl	status,r2
  
  return context;
    b3c8:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    b3cc:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
    b3d0:	000c9180 	call	c918 <alt_tick>
    b3d4:	e0bffe17 	ldw	r2,-8(fp)
    b3d8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b3dc:	e0bffc17 	ldw	r2,-16(fp)
    b3e0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    b3e4:	e037883a 	mov	sp,fp
    b3e8:	dfc00117 	ldw	ra,4(sp)
    b3ec:	df000017 	ldw	fp,0(sp)
    b3f0:	dec00204 	addi	sp,sp,8
    b3f4:	f800283a 	ret

0000b3f8 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    b3f8:	defff804 	addi	sp,sp,-32
    b3fc:	dfc00715 	stw	ra,28(sp)
    b400:	df000615 	stw	fp,24(sp)
    b404:	df000604 	addi	fp,sp,24
    b408:	e13ffc15 	stw	r4,-16(fp)
    b40c:	e17ffd15 	stw	r5,-12(fp)
    b410:	e1bffe15 	stw	r6,-8(fp)
    b414:	e1ffff15 	stw	r7,-4(fp)
    b418:	e0bfff17 	ldw	r2,-4(fp)
    b41c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    b420:	00800074 	movhi	r2,1
    b424:	1082f804 	addi	r2,r2,3040
    b428:	10800017 	ldw	r2,0(r2)
    b42c:	1004c03a 	cmpne	r2,r2,zero
    b430:	1000041e 	bne	r2,zero,b444 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
    b434:	00c00074 	movhi	r3,1
    b438:	18c2f804 	addi	r3,r3,3040
    b43c:	e0bffb17 	ldw	r2,-20(fp)
    b440:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    b444:	e0bffc17 	ldw	r2,-16(fp)
    b448:	10800104 	addi	r2,r2,4
    b44c:	1007883a 	mov	r3,r2
    b450:	008001c4 	movi	r2,7
    b454:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    b458:	d8000015 	stw	zero,0(sp)
    b45c:	e13ffd17 	ldw	r4,-12(fp)
    b460:	e17ffe17 	ldw	r5,-8(fp)
    b464:	01800074 	movhi	r6,1
    b468:	31ace204 	addi	r6,r6,-19576
    b46c:	e1fffc17 	ldw	r7,-16(fp)
    b470:	000c1b40 	call	c1b4 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    b474:	e037883a 	mov	sp,fp
    b478:	dfc00117 	ldw	ra,4(sp)
    b47c:	df000017 	ldw	fp,0(sp)
    b480:	dec00204 	addi	sp,sp,8
    b484:	f800283a 	ret

0000b488 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    b488:	defffa04 	addi	sp,sp,-24
    b48c:	dfc00515 	stw	ra,20(sp)
    b490:	df000415 	stw	fp,16(sp)
    b494:	df000404 	addi	fp,sp,16
    b498:	e13ffd15 	stw	r4,-12(fp)
    b49c:	e17ffe15 	stw	r5,-8(fp)
    b4a0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    b4a4:	e0bffd17 	ldw	r2,-12(fp)
    b4a8:	10800017 	ldw	r2,0(r2)
    b4ac:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
    b4b0:	e0bffc17 	ldw	r2,-16(fp)
    b4b4:	11000a04 	addi	r4,r2,40
    b4b8:	e0bffd17 	ldw	r2,-12(fp)
    b4bc:	11c00217 	ldw	r7,8(r2)
    b4c0:	e17ffe17 	ldw	r5,-8(fp)
    b4c4:	e1bfff17 	ldw	r6,-4(fp)
    b4c8:	000b9800 	call	b980 <altera_avalon_uart_read>
      fd->fd_flags);
}
    b4cc:	e037883a 	mov	sp,fp
    b4d0:	dfc00117 	ldw	ra,4(sp)
    b4d4:	df000017 	ldw	fp,0(sp)
    b4d8:	dec00204 	addi	sp,sp,8
    b4dc:	f800283a 	ret

0000b4e0 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    b4e0:	defffa04 	addi	sp,sp,-24
    b4e4:	dfc00515 	stw	ra,20(sp)
    b4e8:	df000415 	stw	fp,16(sp)
    b4ec:	df000404 	addi	fp,sp,16
    b4f0:	e13ffd15 	stw	r4,-12(fp)
    b4f4:	e17ffe15 	stw	r5,-8(fp)
    b4f8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    b4fc:	e0bffd17 	ldw	r2,-12(fp)
    b500:	10800017 	ldw	r2,0(r2)
    b504:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
    b508:	e0bffc17 	ldw	r2,-16(fp)
    b50c:	11000a04 	addi	r4,r2,40
    b510:	e0bffd17 	ldw	r2,-12(fp)
    b514:	11c00217 	ldw	r7,8(r2)
    b518:	e17ffe17 	ldw	r5,-8(fp)
    b51c:	e1bfff17 	ldw	r6,-4(fp)
    b520:	000bc100 	call	bc10 <altera_avalon_uart_write>
      fd->fd_flags);
}
    b524:	e037883a 	mov	sp,fp
    b528:	dfc00117 	ldw	ra,4(sp)
    b52c:	df000017 	ldw	fp,0(sp)
    b530:	dec00204 	addi	sp,sp,8
    b534:	f800283a 	ret

0000b538 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
    b538:	defffc04 	addi	sp,sp,-16
    b53c:	dfc00315 	stw	ra,12(sp)
    b540:	df000215 	stw	fp,8(sp)
    b544:	df000204 	addi	fp,sp,8
    b548:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    b54c:	e0bfff17 	ldw	r2,-4(fp)
    b550:	10800017 	ldw	r2,0(r2)
    b554:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
    b558:	e0bffe17 	ldw	r2,-8(fp)
    b55c:	11000a04 	addi	r4,r2,40
    b560:	e0bfff17 	ldw	r2,-4(fp)
    b564:	11400217 	ldw	r5,8(r2)
    b568:	000b9200 	call	b920 <altera_avalon_uart_close>
}
    b56c:	e037883a 	mov	sp,fp
    b570:	dfc00117 	ldw	ra,4(sp)
    b574:	df000017 	ldw	fp,0(sp)
    b578:	dec00204 	addi	sp,sp,8
    b57c:	f800283a 	ret

0000b580 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
    b580:	defff704 	addi	sp,sp,-36
    b584:	dfc00815 	stw	ra,32(sp)
    b588:	df000715 	stw	fp,28(sp)
    b58c:	df000704 	addi	fp,sp,28
    b590:	e13ffc15 	stw	r4,-16(fp)
    b594:	e17ffd15 	stw	r5,-12(fp)
    b598:	e1bffe15 	stw	r6,-8(fp)
  void* base = sp->base;
    b59c:	e0bffc17 	ldw	r2,-16(fp)
    b5a0:	10800017 	ldw	r2,0(r2)
    b5a4:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
    b5a8:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
    b5ac:	1004c03a 	cmpne	r2,r2,zero
    b5b0:	1000061e 	bne	r2,zero,b5cc <altera_avalon_uart_init+0x4c>
    b5b4:	0005883a 	mov	r2,zero
    b5b8:	1004c03a 	cmpne	r2,r2,zero
    b5bc:	1000031e 	bne	r2,zero,b5cc <altera_avalon_uart_init+0x4c>
    b5c0:	0005883a 	mov	r2,zero
    b5c4:	1005003a 	cmpeq	r2,r2,zero
    b5c8:	1000031e 	bne	r2,zero,b5d8 <altera_avalon_uart_init+0x58>
    b5cc:	00800044 	movi	r2,1
    b5d0:	e0bfff15 	stw	r2,-4(fp)
    b5d4:	00000106 	br	b5dc <altera_avalon_uart_init+0x5c>
    b5d8:	e03fff15 	stw	zero,-4(fp)
    b5dc:	e0bfff17 	ldw	r2,-4(fp)
    b5e0:	e0bffa15 	stw	r2,-24(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
    b5e4:	e0bffa17 	ldw	r2,-24(fp)
    b5e8:	1004c03a 	cmpne	r2,r2,zero
    b5ec:	1000111e 	bne	r2,zero,b634 <altera_avalon_uart_init+0xb4>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
    b5f0:	e0fffc17 	ldw	r3,-16(fp)
    b5f4:	00832004 	movi	r2,3200
    b5f8:	18800115 	stw	r2,4(r3)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
    b5fc:	e0bffb17 	ldw	r2,-20(fp)
    b600:	11000304 	addi	r4,r2,12
    b604:	e0bffc17 	ldw	r2,-16(fp)
    b608:	10800117 	ldw	r2,4(r2)
    b60c:	1007883a 	mov	r3,r2
    b610:	2005883a 	mov	r2,r4
    b614:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
    b618:	d8000015 	stw	zero,0(sp)
    b61c:	e13ffd17 	ldw	r4,-12(fp)
    b620:	e17ffe17 	ldw	r5,-8(fp)
    b624:	01800074 	movhi	r6,1
    b628:	31ad9204 	addi	r6,r6,-18872
    b62c:	e1fffc17 	ldw	r7,-16(fp)
    b630:	000c1b40 	call	c1b4 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
    b634:	e037883a 	mov	sp,fp
    b638:	dfc00117 	ldw	ra,4(sp)
    b63c:	df000017 	ldw	fp,0(sp)
    b640:	dec00204 	addi	sp,sp,8
    b644:	f800283a 	ret

0000b648 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
    b648:	defffa04 	addi	sp,sp,-24
    b64c:	dfc00515 	stw	ra,20(sp)
    b650:	df000415 	stw	fp,16(sp)
    b654:	df000404 	addi	fp,sp,16
    b658:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
    b65c:	e0bfff17 	ldw	r2,-4(fp)
    b660:	e0bffd15 	stw	r2,-12(fp)
  void* base               = sp->base;
    b664:	e0bffd17 	ldw	r2,-12(fp)
    b668:	10800017 	ldw	r2,0(r2)
    b66c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
    b670:	e0bffc17 	ldw	r2,-16(fp)
    b674:	10800204 	addi	r2,r2,8
    b678:	10800037 	ldwio	r2,0(r2)
    b67c:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
    b680:	e0bffc17 	ldw	r2,-16(fp)
    b684:	10800204 	addi	r2,r2,8
    b688:	10000035 	stwio	zero,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
    b68c:	e0bffc17 	ldw	r2,-16(fp)
    b690:	10800204 	addi	r2,r2,8
    b694:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
    b698:	e0bffe17 	ldw	r2,-8(fp)
    b69c:	1080200c 	andi	r2,r2,128
    b6a0:	1005003a 	cmpeq	r2,r2,zero
    b6a4:	1000031e 	bne	r2,zero,b6b4 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
    b6a8:	e13ffd17 	ldw	r4,-12(fp)
    b6ac:	e17ffe17 	ldw	r5,-8(fp)
    b6b0:	000b6e40 	call	b6e4 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
    b6b4:	e0bffe17 	ldw	r2,-8(fp)
    b6b8:	1081100c 	andi	r2,r2,1088
    b6bc:	1005003a 	cmpeq	r2,r2,zero
    b6c0:	1000031e 	bne	r2,zero,b6d0 <altera_avalon_uart_irq+0x88>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
    b6c4:	e13ffd17 	ldw	r4,-12(fp)
    b6c8:	e17ffe17 	ldw	r5,-8(fp)
    b6cc:	000b7c40 	call	b7c4 <altera_avalon_uart_txirq>
  }
  

}
    b6d0:	e037883a 	mov	sp,fp
    b6d4:	dfc00117 	ldw	ra,4(sp)
    b6d8:	df000017 	ldw	fp,0(sp)
    b6dc:	dec00204 	addi	sp,sp,8
    b6e0:	f800283a 	ret

0000b6e4 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
    b6e4:	defffc04 	addi	sp,sp,-16
    b6e8:	df000315 	stw	fp,12(sp)
    b6ec:	df000304 	addi	fp,sp,12
    b6f0:	e13ffe15 	stw	r4,-8(fp)
    b6f4:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
    b6f8:	e0bfff17 	ldw	r2,-4(fp)
    b6fc:	108000cc 	andi	r2,r2,3
    b700:	1004c03a 	cmpne	r2,r2,zero
    b704:	10002b1e 	bne	r2,zero,b7b4 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
    b708:	e0bffe17 	ldw	r2,-8(fp)
    b70c:	10800317 	ldw	r2,12(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
    b710:	e0bffe17 	ldw	r2,-8(fp)
    b714:	10800317 	ldw	r2,12(r2)
    b718:	10800044 	addi	r2,r2,1
    b71c:	10800fcc 	andi	r2,r2,63
    b720:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
    b724:	e0bffe17 	ldw	r2,-8(fp)
    b728:	11000317 	ldw	r4,12(r2)
    b72c:	e0bffe17 	ldw	r2,-8(fp)
    b730:	10800017 	ldw	r2,0(r2)
    b734:	10800037 	ldwio	r2,0(r2)
    b738:	1007883a 	mov	r3,r2
    b73c:	e0bffe17 	ldw	r2,-8(fp)
    b740:	2085883a 	add	r2,r4,r2
    b744:	10800704 	addi	r2,r2,28
    b748:	10c00005 	stb	r3,0(r2)

  sp->rx_end = next;
    b74c:	e0fffe17 	ldw	r3,-8(fp)
    b750:	e0bffd17 	ldw	r2,-12(fp)
    b754:	18800315 	stw	r2,12(r3)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
    b758:	e0bffe17 	ldw	r2,-8(fp)
    b75c:	10800317 	ldw	r2,12(r2)
    b760:	10800044 	addi	r2,r2,1
    b764:	10800fcc 	andi	r2,r2,63
    b768:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
    b76c:	e0bffe17 	ldw	r2,-8(fp)
    b770:	10c00217 	ldw	r3,8(r2)
    b774:	e0bffd17 	ldw	r2,-12(fp)
    b778:	18800e1e 	bne	r3,r2,b7b4 <altera_avalon_uart_rxirq+0xd0>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    b77c:	e0bffe17 	ldw	r2,-8(fp)
    b780:	10c00117 	ldw	r3,4(r2)
    b784:	00bfdfc4 	movi	r2,-129
    b788:	1886703a 	and	r3,r3,r2
    b78c:	e0bffe17 	ldw	r2,-8(fp)
    b790:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
    b794:	e0bffe17 	ldw	r2,-8(fp)
    b798:	10800017 	ldw	r2,0(r2)
    b79c:	11000304 	addi	r4,r2,12
    b7a0:	e0bffe17 	ldw	r2,-8(fp)
    b7a4:	10800117 	ldw	r2,4(r2)
    b7a8:	1007883a 	mov	r3,r2
    b7ac:	2005883a 	mov	r2,r4
    b7b0:	10c00035 	stwio	r3,0(r2)
  }   
}
    b7b4:	e037883a 	mov	sp,fp
    b7b8:	df000017 	ldw	fp,0(sp)
    b7bc:	dec00104 	addi	sp,sp,4
    b7c0:	f800283a 	ret

0000b7c4 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
    b7c4:	defffd04 	addi	sp,sp,-12
    b7c8:	df000215 	stw	fp,8(sp)
    b7cc:	df000204 	addi	fp,sp,8
    b7d0:	e13ffe15 	stw	r4,-8(fp)
    b7d4:	e17fff15 	stw	r5,-4(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
    b7d8:	e0bffe17 	ldw	r2,-8(fp)
    b7dc:	10c00417 	ldw	r3,16(r2)
    b7e0:	e0bffe17 	ldw	r2,-8(fp)
    b7e4:	10800517 	ldw	r2,20(r2)
    b7e8:	18803626 	beq	r3,r2,b8c4 <altera_avalon_uart_txirq+0x100>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
    b7ec:	e0bffe17 	ldw	r2,-8(fp)
    b7f0:	10800617 	ldw	r2,24(r2)
    b7f4:	1080008c 	andi	r2,r2,2
    b7f8:	1005003a 	cmpeq	r2,r2,zero
    b7fc:	1000041e 	bne	r2,zero,b810 <altera_avalon_uart_txirq+0x4c>
    b800:	e0bfff17 	ldw	r2,-4(fp)
    b804:	1082000c 	andi	r2,r2,2048
    b808:	1005003a 	cmpeq	r2,r2,zero
    b80c:	10001e1e 	bne	r2,zero,b888 <altera_avalon_uart_txirq+0xc4>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
    b810:	e0bffe17 	ldw	r2,-8(fp)
    b814:	10800417 	ldw	r2,16(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
    b818:	e0bffe17 	ldw	r2,-8(fp)
    b81c:	10800017 	ldw	r2,0(r2)
    b820:	11000104 	addi	r4,r2,4
    b824:	e0bffe17 	ldw	r2,-8(fp)
    b828:	10c00417 	ldw	r3,16(r2)
    b82c:	e0bffe17 	ldw	r2,-8(fp)
    b830:	1885883a 	add	r2,r3,r2
    b834:	10801704 	addi	r2,r2,92
    b838:	10800003 	ldbu	r2,0(r2)
    b83c:	10c03fcc 	andi	r3,r2,255
    b840:	2005883a 	mov	r2,r4
    b844:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
    b848:	e0bffe17 	ldw	r2,-8(fp)
    b84c:	10800417 	ldw	r2,16(r2)
    b850:	10c00044 	addi	r3,r2,1
    b854:	e0bffe17 	ldw	r2,-8(fp)
    b858:	10c00415 	stw	r3,16(r2)
    b85c:	e0bffe17 	ldw	r2,-8(fp)
    b860:	10800417 	ldw	r2,16(r2)
    b864:	10c00fcc 	andi	r3,r2,63
    b868:	e0bffe17 	ldw	r2,-8(fp)
    b86c:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
    b870:	e0bffe17 	ldw	r2,-8(fp)
    b874:	10800117 	ldw	r2,4(r2)
    b878:	10c01014 	ori	r3,r2,64
    b87c:	e0bffe17 	ldw	r2,-8(fp)
    b880:	10c00115 	stw	r3,4(r2)
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
    b884:	00000f06 	br	b8c4 <altera_avalon_uart_txirq+0x100>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
    b888:	e0bffe17 	ldw	r2,-8(fp)
    b88c:	10800017 	ldw	r2,0(r2)
    b890:	10800204 	addi	r2,r2,8
    b894:	10800037 	ldwio	r2,0(r2)
    b898:	e0bfff15 	stw	r2,-4(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
    b89c:	e0bfff17 	ldw	r2,-4(fp)
    b8a0:	1082000c 	andi	r2,r2,2048
    b8a4:	1004c03a 	cmpne	r2,r2,zero
    b8a8:	1000061e 	bne	r2,zero,b8c4 <altera_avalon_uart_txirq+0x100>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
    b8ac:	e0bffe17 	ldw	r2,-8(fp)
    b8b0:	10c00117 	ldw	r3,4(r2)
    b8b4:	00bfefc4 	movi	r2,-65
    b8b8:	1886703a 	and	r3,r3,r2
    b8bc:	e0bffe17 	ldw	r2,-8(fp)
    b8c0:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
    b8c4:	e0bffe17 	ldw	r2,-8(fp)
    b8c8:	10c00417 	ldw	r3,16(r2)
    b8cc:	e0bffe17 	ldw	r2,-8(fp)
    b8d0:	10800517 	ldw	r2,20(r2)
    b8d4:	1880061e 	bne	r3,r2,b8f0 <altera_avalon_uart_txirq+0x12c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
    b8d8:	e0bffe17 	ldw	r2,-8(fp)
    b8dc:	10c00117 	ldw	r3,4(r2)
    b8e0:	00beefc4 	movi	r2,-1089
    b8e4:	1886703a 	and	r3,r3,r2
    b8e8:	e0bffe17 	ldw	r2,-8(fp)
    b8ec:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    b8f0:	e0bffe17 	ldw	r2,-8(fp)
    b8f4:	10800017 	ldw	r2,0(r2)
    b8f8:	11000304 	addi	r4,r2,12
    b8fc:	e0bffe17 	ldw	r2,-8(fp)
    b900:	10800117 	ldw	r2,4(r2)
    b904:	1007883a 	mov	r3,r2
    b908:	2005883a 	mov	r2,r4
    b90c:	10c00035 	stwio	r3,0(r2)
}
    b910:	e037883a 	mov	sp,fp
    b914:	df000017 	ldw	fp,0(sp)
    b918:	dec00104 	addi	sp,sp,4
    b91c:	f800283a 	ret

0000b920 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
    b920:	defffc04 	addi	sp,sp,-16
    b924:	df000315 	stw	fp,12(sp)
    b928:	df000304 	addi	fp,sp,12
    b92c:	e13ffd15 	stw	r4,-12(fp)
    b930:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
    b934:	00000706 	br	b954 <altera_avalon_uart_close+0x34>
    if (flags & O_NONBLOCK) {
    b938:	e0bffe17 	ldw	r2,-8(fp)
    b93c:	1090000c 	andi	r2,r2,16384
    b940:	1005003a 	cmpeq	r2,r2,zero
    b944:	1000031e 	bne	r2,zero,b954 <altera_avalon_uart_close+0x34>
      return -EWOULDBLOCK; 
    b948:	00bffd44 	movi	r2,-11
    b94c:	e0bfff15 	stw	r2,-4(fp)
    b950:	00000606 	br	b96c <altera_avalon_uart_close+0x4c>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
    b954:	e0bffd17 	ldw	r2,-12(fp)
    b958:	10c00417 	ldw	r3,16(r2)
    b95c:	e0bffd17 	ldw	r2,-12(fp)
    b960:	10800517 	ldw	r2,20(r2)
    b964:	18bff41e 	bne	r3,r2,b938 <altera_avalon_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    b968:	e03fff15 	stw	zero,-4(fp)
    b96c:	e0bfff17 	ldw	r2,-4(fp)
}
    b970:	e037883a 	mov	sp,fp
    b974:	df000017 	ldw	fp,0(sp)
    b978:	dec00104 	addi	sp,sp,4
    b97c:	f800283a 	ret

0000b980 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
    b980:	defff004 	addi	sp,sp,-64
    b984:	dfc00f15 	stw	ra,60(sp)
    b988:	df000e15 	stw	fp,56(sp)
    b98c:	df000e04 	addi	fp,sp,56
    b990:	e13ffb15 	stw	r4,-20(fp)
    b994:	e17ffc15 	stw	r5,-16(fp)
    b998:	e1bffd15 	stw	r6,-12(fp)
    b99c:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context context;
  int             block;
  alt_u32         next;
  alt_u8          read_would_block = 0;
    b9a0:	e03ff705 	stb	zero,-36(fp)
  int             count = 0;
    b9a4:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
    b9a8:	e0bffe17 	ldw	r2,-8(fp)
    b9ac:	1090000c 	andi	r2,r2,16384
    b9b0:	1005003a 	cmpeq	r2,r2,zero
    b9b4:	e0bff915 	stw	r2,-28(fp)
  /*
   * Calculate which slot in the circular buffer is the next one to read
   * data from.
   */

  next = (sp->rx_start + 1) & ALT_AVALON_UART_BUF_MSK;
    b9b8:	e0bffb17 	ldw	r2,-20(fp)
    b9bc:	10800217 	ldw	r2,8(r2)
    b9c0:	10800044 	addi	r2,r2,1
    b9c4:	10800fcc 	andi	r2,r2,63
    b9c8:	e0bff815 	stw	r2,-32(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
    b9cc:	00001906 	br	ba34 <altera_avalon_uart_read+0xb4>
    {
      count++;
    b9d0:	e0bff617 	ldw	r2,-40(fp)
    b9d4:	10800044 	addi	r2,r2,1
    b9d8:	e0bff615 	stw	r2,-40(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
    b9dc:	e0bffb17 	ldw	r2,-20(fp)
    b9e0:	10c00217 	ldw	r3,8(r2)
    b9e4:	e0bffb17 	ldw	r2,-20(fp)
    b9e8:	1885883a 	add	r2,r3,r2
    b9ec:	10800704 	addi	r2,r2,28
    b9f0:	10800003 	ldbu	r2,0(r2)
    b9f4:	1007883a 	mov	r3,r2
    b9f8:	e0bffc17 	ldw	r2,-16(fp)
    b9fc:	10c00005 	stb	r3,0(r2)
    ba00:	e0bffc17 	ldw	r2,-16(fp)
    ba04:	10800044 	addi	r2,r2,1
    ba08:	e0bffc15 	stw	r2,-16(fp)
      
      sp->rx_start = (++sp->rx_start) & ALT_AVALON_UART_BUF_MSK;
    ba0c:	e0bffb17 	ldw	r2,-20(fp)
    ba10:	10800217 	ldw	r2,8(r2)
    ba14:	10c00044 	addi	r3,r2,1
    ba18:	e0bffb17 	ldw	r2,-20(fp)
    ba1c:	10c00215 	stw	r3,8(r2)
    ba20:	e0bffb17 	ldw	r2,-20(fp)
    ba24:	10800217 	ldw	r2,8(r2)
    ba28:	10c00fcc 	andi	r3,r2,63
    ba2c:	e0bffb17 	ldw	r2,-20(fp)
    ba30:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
    ba34:	e0fff617 	ldw	r3,-40(fp)
    ba38:	e0bffd17 	ldw	r2,-12(fp)
    ba3c:	1880050e 	bge	r3,r2,ba54 <altera_avalon_uart_read+0xd4>
    ba40:	e0bffb17 	ldw	r2,-20(fp)
    ba44:	10c00217 	ldw	r3,8(r2)
    ba48:	e0bffb17 	ldw	r2,-20(fp)
    ba4c:	10800317 	ldw	r2,12(r2)
    ba50:	18bfdf1e 	bne	r3,r2,b9d0 <altera_avalon_uart_read+0x50>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
    ba54:	e0bff617 	ldw	r2,-40(fp)
    ba58:	1004c03a 	cmpne	r2,r2,zero
    ba5c:	1000271e 	bne	r2,zero,bafc <altera_avalon_uart_read+0x17c>
    ba60:	e0bffb17 	ldw	r2,-20(fp)
    ba64:	10c00217 	ldw	r3,8(r2)
    ba68:	e0bffb17 	ldw	r2,-20(fp)
    ba6c:	10800317 	ldw	r2,12(r2)
    ba70:	1880221e 	bne	r3,r2,bafc <altera_avalon_uart_read+0x17c>
    {
      if (!block)
    ba74:	e0bff917 	ldw	r2,-28(fp)
    ba78:	1004c03a 	cmpne	r2,r2,zero
    ba7c:	1000061e 	bne	r2,zero,ba98 <altera_avalon_uart_read+0x118>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
    ba80:	000bbb00 	call	bbb0 <alt_get_errno>
    ba84:	00c002c4 	movi	r3,11
    ba88:	10c00015 	stw	r3,0(r2)
        read_would_block = 1;
    ba8c:	00800044 	movi	r2,1
    ba90:	e0bff705 	stb	r2,-36(fp)
        break;
    ba94:	00001f06 	br	bb14 <altera_avalon_uart_read+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ba98:	0005303a 	rdctl	r2,status
    ba9c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    baa0:	e0fff517 	ldw	r3,-44(fp)
    baa4:	00bfff84 	movi	r2,-2
    baa8:	1884703a 	and	r2,r3,r2
    baac:	1001703a 	wrctl	status,r2
  
  return context;
    bab0:	e0bff517 	ldw	r2,-44(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
    bab4:	e0bffa15 	stw	r2,-24(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    bab8:	e0bffb17 	ldw	r2,-20(fp)
    babc:	10800117 	ldw	r2,4(r2)
    bac0:	10c02014 	ori	r3,r2,128
    bac4:	e0bffb17 	ldw	r2,-20(fp)
    bac8:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    bacc:	e0bffb17 	ldw	r2,-20(fp)
    bad0:	10800017 	ldw	r2,0(r2)
    bad4:	11000304 	addi	r4,r2,12
    bad8:	e0bffb17 	ldw	r2,-20(fp)
    badc:	10800117 	ldw	r2,4(r2)
    bae0:	1007883a 	mov	r3,r2
    bae4:	2005883a 	mov	r2,r4
    bae8:	10c00035 	stwio	r3,0(r2)
    baec:	e0bffa17 	ldw	r2,-24(fp)
    baf0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    baf4:	e0bff417 	ldw	r2,-48(fp)
    baf8:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
    bafc:	e0bff617 	ldw	r2,-40(fp)
    bb00:	1004c03a 	cmpne	r2,r2,zero
    bb04:	1000031e 	bne	r2,zero,bb14 <altera_avalon_uart_read+0x194>
    bb08:	e0bffd17 	ldw	r2,-12(fp)
    bb0c:	1004c03a 	cmpne	r2,r2,zero
    bb10:	103fc81e 	bne	r2,zero,ba34 <altera_avalon_uart_read+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    bb14:	0005303a 	rdctl	r2,status
    bb18:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    bb1c:	e0fff317 	ldw	r3,-52(fp)
    bb20:	00bfff84 	movi	r2,-2
    bb24:	1884703a 	and	r2,r3,r2
    bb28:	1001703a 	wrctl	status,r2
  
  return context;
    bb2c:	e0bff317 	ldw	r2,-52(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
    bb30:	e0bffa15 	stw	r2,-24(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    bb34:	e0bffb17 	ldw	r2,-20(fp)
    bb38:	10800117 	ldw	r2,4(r2)
    bb3c:	10c02014 	ori	r3,r2,128
    bb40:	e0bffb17 	ldw	r2,-20(fp)
    bb44:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    bb48:	e0bffb17 	ldw	r2,-20(fp)
    bb4c:	10800017 	ldw	r2,0(r2)
    bb50:	11000304 	addi	r4,r2,12
    bb54:	e0bffb17 	ldw	r2,-20(fp)
    bb58:	10800117 	ldw	r2,4(r2)
    bb5c:	1007883a 	mov	r3,r2
    bb60:	2005883a 	mov	r2,r4
    bb64:	10c00035 	stwio	r3,0(r2)
    bb68:	e0bffa17 	ldw	r2,-24(fp)
    bb6c:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    bb70:	e0bff217 	ldw	r2,-56(fp)
    bb74:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
    bb78:	e0bff703 	ldbu	r2,-36(fp)
    bb7c:	1005003a 	cmpeq	r2,r2,zero
    bb80:	1000031e 	bne	r2,zero,bb90 <altera_avalon_uart_read+0x210>
    return ~EWOULDBLOCK;
    bb84:	00bffd04 	movi	r2,-12
    bb88:	e0bfff15 	stw	r2,-4(fp)
    bb8c:	00000206 	br	bb98 <altera_avalon_uart_read+0x218>
  }
  else {
    return count;
    bb90:	e0bff617 	ldw	r2,-40(fp)
    bb94:	e0bfff15 	stw	r2,-4(fp)
    bb98:	e0bfff17 	ldw	r2,-4(fp)
  }
}
    bb9c:	e037883a 	mov	sp,fp
    bba0:	dfc00117 	ldw	ra,4(sp)
    bba4:	df000017 	ldw	fp,0(sp)
    bba8:	dec00204 	addi	sp,sp,8
    bbac:	f800283a 	ret

0000bbb0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    bbb0:	defffd04 	addi	sp,sp,-12
    bbb4:	dfc00215 	stw	ra,8(sp)
    bbb8:	df000115 	stw	fp,4(sp)
    bbbc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    bbc0:	00800074 	movhi	r2,1
    bbc4:	10bbef04 	addi	r2,r2,-4164
    bbc8:	10800017 	ldw	r2,0(r2)
    bbcc:	1005003a 	cmpeq	r2,r2,zero
    bbd0:	1000061e 	bne	r2,zero,bbec <alt_get_errno+0x3c>
    bbd4:	00800074 	movhi	r2,1
    bbd8:	10bbef04 	addi	r2,r2,-4164
    bbdc:	10800017 	ldw	r2,0(r2)
    bbe0:	103ee83a 	callr	r2
    bbe4:	e0bfff15 	stw	r2,-4(fp)
    bbe8:	00000306 	br	bbf8 <alt_get_errno+0x48>
    bbec:	00800074 	movhi	r2,1
    bbf0:	1082f304 	addi	r2,r2,3020
    bbf4:	e0bfff15 	stw	r2,-4(fp)
    bbf8:	e0bfff17 	ldw	r2,-4(fp)
}
    bbfc:	e037883a 	mov	sp,fp
    bc00:	dfc00117 	ldw	ra,4(sp)
    bc04:	df000017 	ldw	fp,0(sp)
    bc08:	dec00204 	addi	sp,sp,8
    bc0c:	f800283a 	ret

0000bc10 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
    bc10:	defff204 	addi	sp,sp,-56
    bc14:	dfc00d15 	stw	ra,52(sp)
    bc18:	df000c15 	stw	fp,48(sp)
    bc1c:	df000c04 	addi	fp,sp,48
    bc20:	e13ffc15 	stw	r4,-16(fp)
    bc24:	e17ffd15 	stw	r5,-12(fp)
    bc28:	e1bffe15 	stw	r6,-8(fp)
    bc2c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
    bc30:	e0bffe17 	ldw	r2,-8(fp)
    bc34:	e0bff815 	stw	r2,-32(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
    bc38:	e0bfff17 	ldw	r2,-4(fp)
    bc3c:	1090000c 	andi	r2,r2,16384
    bc40:	e0bffa15 	stw	r2,-24(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
    bc44:	00004006 	br	bd48 <altera_avalon_uart_write+0x138>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
    bc48:	e0bffc17 	ldw	r2,-16(fp)
    bc4c:	10800517 	ldw	r2,20(r2)
    bc50:	10800044 	addi	r2,r2,1
    bc54:	10800fcc 	andi	r2,r2,63
    bc58:	e0bff915 	stw	r2,-28(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
    bc5c:	e0bffc17 	ldw	r2,-16(fp)
    bc60:	10c00417 	ldw	r3,16(r2)
    bc64:	e0bff917 	ldw	r2,-28(fp)
    bc68:	1880251e 	bne	r3,r2,bd00 <altera_avalon_uart_write+0xf0>
    {
      if (no_block)
    bc6c:	e0bffa17 	ldw	r2,-24(fp)
    bc70:	1005003a 	cmpeq	r2,r2,zero
    bc74:	1000051e 	bne	r2,zero,bc8c <altera_avalon_uart_write+0x7c>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
    bc78:	000bdd80 	call	bdd8 <alt_get_errno>
    bc7c:	1007883a 	mov	r3,r2
    bc80:	008002c4 	movi	r2,11
    bc84:	18800015 	stw	r2,0(r3)
        break;
    bc88:	00003206 	br	bd54 <altera_avalon_uart_write+0x144>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    bc8c:	0005303a 	rdctl	r2,status
    bc90:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    bc94:	e0fff717 	ldw	r3,-36(fp)
    bc98:	00bfff84 	movi	r2,-2
    bc9c:	1884703a 	and	r2,r3,r2
    bca0:	1001703a 	wrctl	status,r2
  
  return context;
    bca4:	e0bff717 	ldw	r2,-36(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
    bca8:	e0bffb15 	stw	r2,-20(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
    bcac:	e0bffc17 	ldw	r2,-16(fp)
    bcb0:	10800117 	ldw	r2,4(r2)
    bcb4:	10c11014 	ori	r3,r2,1088
    bcb8:	e0bffc17 	ldw	r2,-16(fp)
    bcbc:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    bcc0:	e0bffc17 	ldw	r2,-16(fp)
    bcc4:	10800017 	ldw	r2,0(r2)
    bcc8:	11000304 	addi	r4,r2,12
    bccc:	e0bffc17 	ldw	r2,-16(fp)
    bcd0:	10800117 	ldw	r2,4(r2)
    bcd4:	1007883a 	mov	r3,r2
    bcd8:	2005883a 	mov	r2,r4
    bcdc:	10c00035 	stwio	r3,0(r2)
    bce0:	e0bffb17 	ldw	r2,-20(fp)
    bce4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    bce8:	e0bff617 	ldw	r2,-40(fp)
    bcec:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
    bcf0:	e0bffc17 	ldw	r2,-16(fp)
    bcf4:	10c00417 	ldw	r3,16(r2)
    bcf8:	e0bff917 	ldw	r2,-28(fp)
    bcfc:	18bffc26 	beq	r3,r2,bcf0 <altera_avalon_uart_write+0xe0>
      }
    }

    count--;
    bd00:	e0bff817 	ldw	r2,-32(fp)
    bd04:	10bfffc4 	addi	r2,r2,-1
    bd08:	e0bff815 	stw	r2,-32(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
    bd0c:	e0bffc17 	ldw	r2,-16(fp)
    bd10:	10c00517 	ldw	r3,20(r2)
    bd14:	e0bffd17 	ldw	r2,-12(fp)
    bd18:	10800003 	ldbu	r2,0(r2)
    bd1c:	1009883a 	mov	r4,r2
    bd20:	e0bffc17 	ldw	r2,-16(fp)
    bd24:	1885883a 	add	r2,r3,r2
    bd28:	10801704 	addi	r2,r2,92
    bd2c:	11000005 	stb	r4,0(r2)
    bd30:	e0bffd17 	ldw	r2,-12(fp)
    bd34:	10800044 	addi	r2,r2,1
    bd38:	e0bffd15 	stw	r2,-12(fp)
    sp->tx_end = next;
    bd3c:	e0fffc17 	ldw	r3,-16(fp)
    bd40:	e0bff917 	ldw	r2,-28(fp)
    bd44:	18800515 	stw	r2,20(r3)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
    bd48:	e0bff817 	ldw	r2,-32(fp)
    bd4c:	1004c03a 	cmpne	r2,r2,zero
    bd50:	103fbd1e 	bne	r2,zero,bc48 <altera_avalon_uart_write+0x38>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    bd54:	0005303a 	rdctl	r2,status
    bd58:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    bd5c:	e0fff517 	ldw	r3,-44(fp)
    bd60:	00bfff84 	movi	r2,-2
    bd64:	1884703a 	and	r2,r3,r2
    bd68:	1001703a 	wrctl	status,r2
  
  return context;
    bd6c:	e0bff517 	ldw	r2,-44(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
    bd70:	e0bffb15 	stw	r2,-20(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
    bd74:	e0bffc17 	ldw	r2,-16(fp)
    bd78:	10800117 	ldw	r2,4(r2)
    bd7c:	10c11014 	ori	r3,r2,1088
    bd80:	e0bffc17 	ldw	r2,-16(fp)
    bd84:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    bd88:	e0bffc17 	ldw	r2,-16(fp)
    bd8c:	10800017 	ldw	r2,0(r2)
    bd90:	11000304 	addi	r4,r2,12
    bd94:	e0bffc17 	ldw	r2,-16(fp)
    bd98:	10800117 	ldw	r2,4(r2)
    bd9c:	1007883a 	mov	r3,r2
    bda0:	2005883a 	mov	r2,r4
    bda4:	10c00035 	stwio	r3,0(r2)
    bda8:	e0bffb17 	ldw	r2,-20(fp)
    bdac:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    bdb0:	e0bff417 	ldw	r2,-48(fp)
    bdb4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
    bdb8:	e0fffe17 	ldw	r3,-8(fp)
    bdbc:	e0bff817 	ldw	r2,-32(fp)
    bdc0:	1885c83a 	sub	r2,r3,r2
}
    bdc4:	e037883a 	mov	sp,fp
    bdc8:	dfc00117 	ldw	ra,4(sp)
    bdcc:	df000017 	ldw	fp,0(sp)
    bdd0:	dec00204 	addi	sp,sp,8
    bdd4:	f800283a 	ret

0000bdd8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    bdd8:	defffd04 	addi	sp,sp,-12
    bddc:	dfc00215 	stw	ra,8(sp)
    bde0:	df000115 	stw	fp,4(sp)
    bde4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    bde8:	00800074 	movhi	r2,1
    bdec:	10bbef04 	addi	r2,r2,-4164
    bdf0:	10800017 	ldw	r2,0(r2)
    bdf4:	1005003a 	cmpeq	r2,r2,zero
    bdf8:	1000061e 	bne	r2,zero,be14 <alt_get_errno+0x3c>
    bdfc:	00800074 	movhi	r2,1
    be00:	10bbef04 	addi	r2,r2,-4164
    be04:	10800017 	ldw	r2,0(r2)
    be08:	103ee83a 	callr	r2
    be0c:	e0bfff15 	stw	r2,-4(fp)
    be10:	00000306 	br	be20 <alt_get_errno+0x48>
    be14:	00800074 	movhi	r2,1
    be18:	1082f304 	addi	r2,r2,3020
    be1c:	e0bfff15 	stw	r2,-4(fp)
    be20:	e0bfff17 	ldw	r2,-4(fp)
}
    be24:	e037883a 	mov	sp,fp
    be28:	dfc00117 	ldw	ra,4(sp)
    be2c:	df000017 	ldw	fp,0(sp)
    be30:	dec00204 	addi	sp,sp,8
    be34:	f800283a 	ret

0000be38 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    be38:	defff404 	addi	sp,sp,-48
    be3c:	df000b15 	stw	fp,44(sp)
    be40:	df000b04 	addi	fp,sp,44
    be44:	e13ffb15 	stw	r4,-20(fp)
    be48:	e17ffc15 	stw	r5,-16(fp)
    be4c:	e1bffd15 	stw	r6,-12(fp)
    be50:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    be54:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    be58:	00800074 	movhi	r2,1
    be5c:	1082f804 	addi	r2,r2,3040
    be60:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
    be64:	1005003a 	cmpeq	r2,r2,zero
    be68:	1000411e 	bne	r2,zero,bf70 <alt_alarm_start+0x138>
  {
    if (alarm)
    be6c:	e0bffb17 	ldw	r2,-20(fp)
    be70:	1005003a 	cmpeq	r2,r2,zero
    be74:	10003b1e 	bne	r2,zero,bf64 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
    be78:	e0fffb17 	ldw	r3,-20(fp)
    be7c:	e0bffd17 	ldw	r2,-12(fp)
    be80:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
    be84:	e0fffb17 	ldw	r3,-20(fp)
    be88:	e0bffe17 	ldw	r2,-8(fp)
    be8c:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    be90:	0005303a 	rdctl	r2,status
    be94:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    be98:	e0fff817 	ldw	r3,-32(fp)
    be9c:	00bfff84 	movi	r2,-2
    bea0:	1884703a 	and	r2,r3,r2
    bea4:	1001703a 	wrctl	status,r2
  
  return context;
    bea8:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
    beac:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    beb0:	00800074 	movhi	r2,1
    beb4:	1082f904 	addi	r2,r2,3044
    beb8:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
    bebc:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    bec0:	e0fffc17 	ldw	r3,-16(fp)
    bec4:	e0bff917 	ldw	r2,-28(fp)
    bec8:	1885883a 	add	r2,r3,r2
    becc:	10c00044 	addi	r3,r2,1
    bed0:	e0bffb17 	ldw	r2,-20(fp)
    bed4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    bed8:	e0bffb17 	ldw	r2,-20(fp)
    bedc:	10c00217 	ldw	r3,8(r2)
    bee0:	e0bff917 	ldw	r2,-28(fp)
    bee4:	1880042e 	bgeu	r3,r2,bef8 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
    bee8:	e0fffb17 	ldw	r3,-20(fp)
    beec:	00800044 	movi	r2,1
    bef0:	18800405 	stb	r2,16(r3)
    bef4:	00000206 	br	bf00 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
    bef8:	e0bffb17 	ldw	r2,-20(fp)
    befc:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    bf00:	e0fffb17 	ldw	r3,-20(fp)
    bf04:	00800074 	movhi	r2,1
    bf08:	10bbf204 	addi	r2,r2,-4152
    bf0c:	e0bff615 	stw	r2,-40(fp)
    bf10:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    bf14:	e0fff717 	ldw	r3,-36(fp)
    bf18:	e0bff617 	ldw	r2,-40(fp)
    bf1c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    bf20:	e0bff617 	ldw	r2,-40(fp)
    bf24:	10c00017 	ldw	r3,0(r2)
    bf28:	e0bff717 	ldw	r2,-36(fp)
    bf2c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    bf30:	e0bff617 	ldw	r2,-40(fp)
    bf34:	10c00017 	ldw	r3,0(r2)
    bf38:	e0bff717 	ldw	r2,-36(fp)
    bf3c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    bf40:	e0fff617 	ldw	r3,-40(fp)
    bf44:	e0bff717 	ldw	r2,-36(fp)
    bf48:	18800015 	stw	r2,0(r3)
    bf4c:	e0bffa17 	ldw	r2,-24(fp)
    bf50:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    bf54:	e0bff517 	ldw	r2,-44(fp)
    bf58:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    bf5c:	e03fff15 	stw	zero,-4(fp)
    bf60:	00000506 	br	bf78 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
    bf64:	00bffa84 	movi	r2,-22
    bf68:	e0bfff15 	stw	r2,-4(fp)
    bf6c:	00000206 	br	bf78 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
    bf70:	00bfde84 	movi	r2,-134
    bf74:	e0bfff15 	stw	r2,-4(fp)
    bf78:	e0bfff17 	ldw	r2,-4(fp)
  }
}
    bf7c:	e037883a 	mov	sp,fp
    bf80:	df000017 	ldw	fp,0(sp)
    bf84:	dec00104 	addi	sp,sp,4
    bf88:	f800283a 	ret

0000bf8c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    bf8c:	deffff04 	addi	sp,sp,-4
    bf90:	df000015 	stw	fp,0(sp)
    bf94:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    bf98:	e037883a 	mov	sp,fp
    bf9c:	df000017 	ldw	fp,0(sp)
    bfa0:	dec00104 	addi	sp,sp,4
    bfa4:	f800283a 	ret

0000bfa8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    bfa8:	defff904 	addi	sp,sp,-28
    bfac:	dfc00615 	stw	ra,24(sp)
    bfb0:	df000515 	stw	fp,20(sp)
    bfb4:	df000504 	addi	fp,sp,20
    bfb8:	e13ffd15 	stw	r4,-12(fp)
    bfbc:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    bfc0:	e0bffd17 	ldw	r2,-12(fp)
    bfc4:	1005003a 	cmpeq	r2,r2,zero
    bfc8:	1000041e 	bne	r2,zero,bfdc <alt_dev_llist_insert+0x34>
    bfcc:	e0bffd17 	ldw	r2,-12(fp)
    bfd0:	10800217 	ldw	r2,8(r2)
    bfd4:	1004c03a 	cmpne	r2,r2,zero
    bfd8:	1000071e 	bne	r2,zero,bff8 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
    bfdc:	000c05c0 	call	c05c <alt_get_errno>
    bfe0:	1007883a 	mov	r3,r2
    bfe4:	00800584 	movi	r2,22
    bfe8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    bfec:	00bffa84 	movi	r2,-22
    bff0:	e0bfff15 	stw	r2,-4(fp)
    bff4:	00001306 	br	c044 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    bff8:	e0fffd17 	ldw	r3,-12(fp)
    bffc:	e0bffe17 	ldw	r2,-8(fp)
    c000:	e0bffb15 	stw	r2,-20(fp)
    c004:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    c008:	e0fffc17 	ldw	r3,-16(fp)
    c00c:	e0bffb17 	ldw	r2,-20(fp)
    c010:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    c014:	e0bffb17 	ldw	r2,-20(fp)
    c018:	10c00017 	ldw	r3,0(r2)
    c01c:	e0bffc17 	ldw	r2,-16(fp)
    c020:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    c024:	e0bffb17 	ldw	r2,-20(fp)
    c028:	10c00017 	ldw	r3,0(r2)
    c02c:	e0bffc17 	ldw	r2,-16(fp)
    c030:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    c034:	e0fffb17 	ldw	r3,-20(fp)
    c038:	e0bffc17 	ldw	r2,-16(fp)
    c03c:	18800015 	stw	r2,0(r3)

  return 0;  
    c040:	e03fff15 	stw	zero,-4(fp)
    c044:	e0bfff17 	ldw	r2,-4(fp)
}
    c048:	e037883a 	mov	sp,fp
    c04c:	dfc00117 	ldw	ra,4(sp)
    c050:	df000017 	ldw	fp,0(sp)
    c054:	dec00204 	addi	sp,sp,8
    c058:	f800283a 	ret

0000c05c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    c05c:	defffd04 	addi	sp,sp,-12
    c060:	dfc00215 	stw	ra,8(sp)
    c064:	df000115 	stw	fp,4(sp)
    c068:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    c06c:	00800074 	movhi	r2,1
    c070:	10bbef04 	addi	r2,r2,-4164
    c074:	10800017 	ldw	r2,0(r2)
    c078:	1005003a 	cmpeq	r2,r2,zero
    c07c:	1000061e 	bne	r2,zero,c098 <alt_get_errno+0x3c>
    c080:	00800074 	movhi	r2,1
    c084:	10bbef04 	addi	r2,r2,-4164
    c088:	10800017 	ldw	r2,0(r2)
    c08c:	103ee83a 	callr	r2
    c090:	e0bfff15 	stw	r2,-4(fp)
    c094:	00000306 	br	c0a4 <alt_get_errno+0x48>
    c098:	00800074 	movhi	r2,1
    c09c:	1082f304 	addi	r2,r2,3020
    c0a0:	e0bfff15 	stw	r2,-4(fp)
    c0a4:	e0bfff17 	ldw	r2,-4(fp)
}
    c0a8:	e037883a 	mov	sp,fp
    c0ac:	dfc00117 	ldw	ra,4(sp)
    c0b0:	df000017 	ldw	fp,0(sp)
    c0b4:	dec00204 	addi	sp,sp,8
    c0b8:	f800283a 	ret

0000c0bc <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    c0bc:	defffd04 	addi	sp,sp,-12
    c0c0:	dfc00215 	stw	ra,8(sp)
    c0c4:	df000115 	stw	fp,4(sp)
    c0c8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    c0cc:	00bfff04 	movi	r2,-4
    c0d0:	00c00074 	movhi	r3,1
    c0d4:	18f3db04 	addi	r3,r3,-12436
    c0d8:	1885883a 	add	r2,r3,r2
    c0dc:	e0bfff15 	stw	r2,-4(fp)
    c0e0:	00000606 	br	c0fc <_do_ctors+0x40>
        (*ctor) (); 
    c0e4:	e0bfff17 	ldw	r2,-4(fp)
    c0e8:	10800017 	ldw	r2,0(r2)
    c0ec:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    c0f0:	e0bfff17 	ldw	r2,-4(fp)
    c0f4:	10bfff04 	addi	r2,r2,-4
    c0f8:	e0bfff15 	stw	r2,-4(fp)
    c0fc:	e0ffff17 	ldw	r3,-4(fp)
    c100:	00800074 	movhi	r2,1
    c104:	10b3da04 	addi	r2,r2,-12440
    c108:	18bff62e 	bgeu	r3,r2,c0e4 <_do_ctors+0x28>
        (*ctor) (); 
}
    c10c:	e037883a 	mov	sp,fp
    c110:	dfc00117 	ldw	ra,4(sp)
    c114:	df000017 	ldw	fp,0(sp)
    c118:	dec00204 	addi	sp,sp,8
    c11c:	f800283a 	ret

0000c120 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    c120:	defffd04 	addi	sp,sp,-12
    c124:	dfc00215 	stw	ra,8(sp)
    c128:	df000115 	stw	fp,4(sp)
    c12c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    c130:	00bfff04 	movi	r2,-4
    c134:	00c00074 	movhi	r3,1
    c138:	18f3db04 	addi	r3,r3,-12436
    c13c:	1885883a 	add	r2,r3,r2
    c140:	e0bfff15 	stw	r2,-4(fp)
    c144:	00000606 	br	c160 <_do_dtors+0x40>
        (*dtor) (); 
    c148:	e0bfff17 	ldw	r2,-4(fp)
    c14c:	10800017 	ldw	r2,0(r2)
    c150:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    c154:	e0bfff17 	ldw	r2,-4(fp)
    c158:	10bfff04 	addi	r2,r2,-4
    c15c:	e0bfff15 	stw	r2,-4(fp)
    c160:	e0ffff17 	ldw	r3,-4(fp)
    c164:	00800074 	movhi	r2,1
    c168:	10b3db04 	addi	r2,r2,-12436
    c16c:	18bff62e 	bgeu	r3,r2,c148 <_do_dtors+0x28>
        (*dtor) (); 
}
    c170:	e037883a 	mov	sp,fp
    c174:	dfc00117 	ldw	ra,4(sp)
    c178:	df000017 	ldw	fp,0(sp)
    c17c:	dec00204 	addi	sp,sp,8
    c180:	f800283a 	ret

0000c184 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    c184:	defffe04 	addi	sp,sp,-8
    c188:	dfc00115 	stw	ra,4(sp)
    c18c:	df000015 	stw	fp,0(sp)
    c190:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    c194:	0009883a 	mov	r4,zero
    c198:	01480004 	movi	r5,8192
    c19c:	000ccb00 	call	ccb0 <alt_icache_flush>
#endif
}
    c1a0:	e037883a 	mov	sp,fp
    c1a4:	dfc00117 	ldw	ra,4(sp)
    c1a8:	df000017 	ldw	fp,0(sp)
    c1ac:	dec00204 	addi	sp,sp,8
    c1b0:	f800283a 	ret

0000c1b4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    c1b4:	defff904 	addi	sp,sp,-28
    c1b8:	dfc00615 	stw	ra,24(sp)
    c1bc:	df000515 	stw	fp,20(sp)
    c1c0:	df000504 	addi	fp,sp,20
    c1c4:	e13ffc15 	stw	r4,-16(fp)
    c1c8:	e17ffd15 	stw	r5,-12(fp)
    c1cc:	e1bffe15 	stw	r6,-8(fp)
    c1d0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    c1d4:	e0800217 	ldw	r2,8(fp)
    c1d8:	d8800015 	stw	r2,0(sp)
    c1dc:	e13ffc17 	ldw	r4,-16(fp)
    c1e0:	e17ffd17 	ldw	r5,-12(fp)
    c1e4:	e1bffe17 	ldw	r6,-8(fp)
    c1e8:	e1ffff17 	ldw	r7,-4(fp)
    c1ec:	000c3880 	call	c388 <alt_iic_isr_register>
}  
    c1f0:	e037883a 	mov	sp,fp
    c1f4:	dfc00117 	ldw	ra,4(sp)
    c1f8:	df000017 	ldw	fp,0(sp)
    c1fc:	dec00204 	addi	sp,sp,8
    c200:	f800283a 	ret

0000c204 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    c204:	defff904 	addi	sp,sp,-28
    c208:	df000615 	stw	fp,24(sp)
    c20c:	df000604 	addi	fp,sp,24
    c210:	e13ffe15 	stw	r4,-8(fp)
    c214:	e17fff15 	stw	r5,-4(fp)
    c218:	e0bfff17 	ldw	r2,-4(fp)
    c21c:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c220:	0005303a 	rdctl	r2,status
    c224:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c228:	e0fffb17 	ldw	r3,-20(fp)
    c22c:	00bfff84 	movi	r2,-2
    c230:	1884703a 	and	r2,r3,r2
    c234:	1001703a 	wrctl	status,r2
  
  return context;
    c238:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    c23c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
    c240:	e0fffc17 	ldw	r3,-16(fp)
    c244:	00800044 	movi	r2,1
    c248:	10c4983a 	sll	r2,r2,r3
    c24c:	1007883a 	mov	r3,r2
    c250:	00800074 	movhi	r2,1
    c254:	1082f704 	addi	r2,r2,3036
    c258:	10800017 	ldw	r2,0(r2)
    c25c:	1886b03a 	or	r3,r3,r2
    c260:	00800074 	movhi	r2,1
    c264:	1082f704 	addi	r2,r2,3036
    c268:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    c26c:	00800074 	movhi	r2,1
    c270:	1082f704 	addi	r2,r2,3036
    c274:	10800017 	ldw	r2,0(r2)
    c278:	100170fa 	wrctl	ienable,r2
    c27c:	e0bffd17 	ldw	r2,-12(fp)
    c280:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c284:	e0bffa17 	ldw	r2,-24(fp)
    c288:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    c28c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
    c290:	e037883a 	mov	sp,fp
    c294:	df000017 	ldw	fp,0(sp)
    c298:	dec00104 	addi	sp,sp,4
    c29c:	f800283a 	ret

0000c2a0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    c2a0:	defff904 	addi	sp,sp,-28
    c2a4:	df000615 	stw	fp,24(sp)
    c2a8:	df000604 	addi	fp,sp,24
    c2ac:	e13ffe15 	stw	r4,-8(fp)
    c2b0:	e17fff15 	stw	r5,-4(fp)
    c2b4:	e0bfff17 	ldw	r2,-4(fp)
    c2b8:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c2bc:	0005303a 	rdctl	r2,status
    c2c0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c2c4:	e0fffb17 	ldw	r3,-20(fp)
    c2c8:	00bfff84 	movi	r2,-2
    c2cc:	1884703a 	and	r2,r3,r2
    c2d0:	1001703a 	wrctl	status,r2
  
  return context;
    c2d4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    c2d8:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
    c2dc:	e0fffc17 	ldw	r3,-16(fp)
    c2e0:	00800044 	movi	r2,1
    c2e4:	10c4983a 	sll	r2,r2,r3
    c2e8:	0084303a 	nor	r2,zero,r2
    c2ec:	1007883a 	mov	r3,r2
    c2f0:	00800074 	movhi	r2,1
    c2f4:	1082f704 	addi	r2,r2,3036
    c2f8:	10800017 	ldw	r2,0(r2)
    c2fc:	1886703a 	and	r3,r3,r2
    c300:	00800074 	movhi	r2,1
    c304:	1082f704 	addi	r2,r2,3036
    c308:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    c30c:	00800074 	movhi	r2,1
    c310:	1082f704 	addi	r2,r2,3036
    c314:	10800017 	ldw	r2,0(r2)
    c318:	100170fa 	wrctl	ienable,r2
    c31c:	e0bffd17 	ldw	r2,-12(fp)
    c320:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c324:	e0bffa17 	ldw	r2,-24(fp)
    c328:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    c32c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
    c330:	e037883a 	mov	sp,fp
    c334:	df000017 	ldw	fp,0(sp)
    c338:	dec00104 	addi	sp,sp,4
    c33c:	f800283a 	ret

0000c340 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    c340:	defffc04 	addi	sp,sp,-16
    c344:	df000315 	stw	fp,12(sp)
    c348:	df000304 	addi	fp,sp,12
    c34c:	e13ffe15 	stw	r4,-8(fp)
    c350:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    c354:	000530fa 	rdctl	r2,ienable
    c358:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    c35c:	e0ffff17 	ldw	r3,-4(fp)
    c360:	00800044 	movi	r2,1
    c364:	10c4983a 	sll	r2,r2,r3
    c368:	1007883a 	mov	r3,r2
    c36c:	e0bffd17 	ldw	r2,-12(fp)
    c370:	1884703a 	and	r2,r3,r2
    c374:	1004c03a 	cmpne	r2,r2,zero
}
    c378:	e037883a 	mov	sp,fp
    c37c:	df000017 	ldw	fp,0(sp)
    c380:	dec00104 	addi	sp,sp,4
    c384:	f800283a 	ret

0000c388 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    c388:	defff404 	addi	sp,sp,-48
    c38c:	dfc00b15 	stw	ra,44(sp)
    c390:	df000a15 	stw	fp,40(sp)
    c394:	df000a04 	addi	fp,sp,40
    c398:	e13ffb15 	stw	r4,-20(fp)
    c39c:	e17ffc15 	stw	r5,-16(fp)
    c3a0:	e1bffd15 	stw	r6,-12(fp)
    c3a4:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
    c3a8:	00bffa84 	movi	r2,-22
    c3ac:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    c3b0:	e0bffc17 	ldw	r2,-16(fp)
    c3b4:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    c3b8:	e0bff917 	ldw	r2,-28(fp)
    c3bc:	10800808 	cmpgei	r2,r2,32
    c3c0:	1000291e 	bne	r2,zero,c468 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c3c4:	0005303a 	rdctl	r2,status
    c3c8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c3cc:	e0fff717 	ldw	r3,-36(fp)
    c3d0:	00bfff84 	movi	r2,-2
    c3d4:	1884703a 	and	r2,r3,r2
    c3d8:	1001703a 	wrctl	status,r2
  
  return context;
    c3dc:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    c3e0:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
    c3e4:	e0bff917 	ldw	r2,-28(fp)
    c3e8:	00c00074 	movhi	r3,1
    c3ec:	18c30404 	addi	r3,r3,3088
    c3f0:	100490fa 	slli	r2,r2,3
    c3f4:	10c7883a 	add	r3,r2,r3
    c3f8:	e0bffd17 	ldw	r2,-12(fp)
    c3fc:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
    c400:	e0bff917 	ldw	r2,-28(fp)
    c404:	00c00074 	movhi	r3,1
    c408:	18c30404 	addi	r3,r3,3088
    c40c:	100490fa 	slli	r2,r2,3
    c410:	10c5883a 	add	r2,r2,r3
    c414:	10c00104 	addi	r3,r2,4
    c418:	e0bffe17 	ldw	r2,-8(fp)
    c41c:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    c420:	e0bffd17 	ldw	r2,-12(fp)
    c424:	1005003a 	cmpeq	r2,r2,zero
    c428:	1000051e 	bne	r2,zero,c440 <alt_iic_isr_register+0xb8>
    c42c:	e17ff917 	ldw	r5,-28(fp)
    c430:	e13ffb17 	ldw	r4,-20(fp)
    c434:	000c2040 	call	c204 <alt_ic_irq_enable>
    c438:	e0bfff15 	stw	r2,-4(fp)
    c43c:	00000406 	br	c450 <alt_iic_isr_register+0xc8>
    c440:	e17ff917 	ldw	r5,-28(fp)
    c444:	e13ffb17 	ldw	r4,-20(fp)
    c448:	000c2a00 	call	c2a0 <alt_ic_irq_disable>
    c44c:	e0bfff15 	stw	r2,-4(fp)
    c450:	e0bfff17 	ldw	r2,-4(fp)
    c454:	e0bffa15 	stw	r2,-24(fp)
    c458:	e0bff817 	ldw	r2,-32(fp)
    c45c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c460:	e0bff617 	ldw	r2,-40(fp)
    c464:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    c468:	e0bffa17 	ldw	r2,-24(fp)
}
    c46c:	e037883a 	mov	sp,fp
    c470:	dfc00117 	ldw	ra,4(sp)
    c474:	df000017 	ldw	fp,0(sp)
    c478:	dec00204 	addi	sp,sp,8
    c47c:	f800283a 	ret

0000c480 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    c480:	defff904 	addi	sp,sp,-28
    c484:	dfc00615 	stw	ra,24(sp)
    c488:	df000515 	stw	fp,20(sp)
    c48c:	df000504 	addi	fp,sp,20
    c490:	e13ffc15 	stw	r4,-16(fp)
    c494:	e17ffd15 	stw	r5,-12(fp)
    c498:	e1bffe15 	stw	r6,-8(fp)
    c49c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    c4a0:	e13ffd17 	ldw	r4,-12(fp)
    c4a4:	e17ffe17 	ldw	r5,-8(fp)
    c4a8:	e1bfff17 	ldw	r6,-4(fp)
    c4ac:	000c6980 	call	c698 <open>
    c4b0:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    c4b4:	e0bffb17 	ldw	r2,-20(fp)
    c4b8:	1004803a 	cmplt	r2,r2,zero
    c4bc:	10001c1e 	bne	r2,zero,c530 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
    c4c0:	e0bffb17 	ldw	r2,-20(fp)
    c4c4:	00c00074 	movhi	r3,1
    c4c8:	18f70a04 	addi	r3,r3,-9176
    c4cc:	10800324 	muli	r2,r2,12
    c4d0:	10c5883a 	add	r2,r2,r3
    c4d4:	10c00017 	ldw	r3,0(r2)
    c4d8:	e0bffc17 	ldw	r2,-16(fp)
    c4dc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    c4e0:	e0bffb17 	ldw	r2,-20(fp)
    c4e4:	00c00074 	movhi	r3,1
    c4e8:	18f70a04 	addi	r3,r3,-9176
    c4ec:	10800324 	muli	r2,r2,12
    c4f0:	10c5883a 	add	r2,r2,r3
    c4f4:	10800104 	addi	r2,r2,4
    c4f8:	10c00017 	ldw	r3,0(r2)
    c4fc:	e0bffc17 	ldw	r2,-16(fp)
    c500:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    c504:	e0bffb17 	ldw	r2,-20(fp)
    c508:	00c00074 	movhi	r3,1
    c50c:	18f70a04 	addi	r3,r3,-9176
    c510:	10800324 	muli	r2,r2,12
    c514:	10c5883a 	add	r2,r2,r3
    c518:	10800204 	addi	r2,r2,8
    c51c:	10c00017 	ldw	r3,0(r2)
    c520:	e0bffc17 	ldw	r2,-16(fp)
    c524:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    c528:	e13ffb17 	ldw	r4,-20(fp)
    c52c:	000a5380 	call	a538 <alt_release_fd>
  }
} 
    c530:	e037883a 	mov	sp,fp
    c534:	dfc00117 	ldw	ra,4(sp)
    c538:	df000017 	ldw	fp,0(sp)
    c53c:	dec00204 	addi	sp,sp,8
    c540:	f800283a 	ret

0000c544 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    c544:	defffb04 	addi	sp,sp,-20
    c548:	dfc00415 	stw	ra,16(sp)
    c54c:	df000315 	stw	fp,12(sp)
    c550:	df000304 	addi	fp,sp,12
    c554:	e13ffd15 	stw	r4,-12(fp)
    c558:	e17ffe15 	stw	r5,-8(fp)
    c55c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    c560:	01000074 	movhi	r4,1
    c564:	21370d04 	addi	r4,r4,-9164
    c568:	e17ffd17 	ldw	r5,-12(fp)
    c56c:	01800044 	movi	r6,1
    c570:	01c07fc4 	movi	r7,511
    c574:	000c4800 	call	c480 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    c578:	01000074 	movhi	r4,1
    c57c:	21370a04 	addi	r4,r4,-9176
    c580:	e17ffe17 	ldw	r5,-8(fp)
    c584:	000d883a 	mov	r6,zero
    c588:	01c07fc4 	movi	r7,511
    c58c:	000c4800 	call	c480 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    c590:	01000074 	movhi	r4,1
    c594:	21371004 	addi	r4,r4,-9152
    c598:	e17fff17 	ldw	r5,-4(fp)
    c59c:	01800044 	movi	r6,1
    c5a0:	01c07fc4 	movi	r7,511
    c5a4:	000c4800 	call	c480 <alt_open_fd>
}  
    c5a8:	e037883a 	mov	sp,fp
    c5ac:	dfc00117 	ldw	ra,4(sp)
    c5b0:	df000017 	ldw	fp,0(sp)
    c5b4:	dec00204 	addi	sp,sp,8
    c5b8:	f800283a 	ret

0000c5bc <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    c5bc:	defffc04 	addi	sp,sp,-16
    c5c0:	df000315 	stw	fp,12(sp)
    c5c4:	df000304 	addi	fp,sp,12
    c5c8:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    c5cc:	e0bffe17 	ldw	r2,-8(fp)
    c5d0:	10800217 	ldw	r2,8(r2)
    c5d4:	10d00034 	orhi	r3,r2,16384
    c5d8:	e0bffe17 	ldw	r2,-8(fp)
    c5dc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    c5e0:	e03ffd15 	stw	zero,-12(fp)
    c5e4:	00002006 	br	c668 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    c5e8:	e0bffd17 	ldw	r2,-12(fp)
    c5ec:	00c00074 	movhi	r3,1
    c5f0:	18f70a04 	addi	r3,r3,-9176
    c5f4:	10800324 	muli	r2,r2,12
    c5f8:	10c5883a 	add	r2,r2,r3
    c5fc:	10c00017 	ldw	r3,0(r2)
    c600:	e0bffe17 	ldw	r2,-8(fp)
    c604:	10800017 	ldw	r2,0(r2)
    c608:	1880141e 	bne	r3,r2,c65c <alt_file_locked+0xa0>
    c60c:	e0bffd17 	ldw	r2,-12(fp)
    c610:	00c00074 	movhi	r3,1
    c614:	18f70a04 	addi	r3,r3,-9176
    c618:	10800324 	muli	r2,r2,12
    c61c:	10c5883a 	add	r2,r2,r3
    c620:	10800204 	addi	r2,r2,8
    c624:	10800017 	ldw	r2,0(r2)
    c628:	1004403a 	cmpge	r2,r2,zero
    c62c:	10000b1e 	bne	r2,zero,c65c <alt_file_locked+0xa0>
    c630:	e0bffd17 	ldw	r2,-12(fp)
    c634:	10800324 	muli	r2,r2,12
    c638:	1007883a 	mov	r3,r2
    c63c:	00800074 	movhi	r2,1
    c640:	10b70a04 	addi	r2,r2,-9176
    c644:	1887883a 	add	r3,r3,r2
    c648:	e0bffe17 	ldw	r2,-8(fp)
    c64c:	18800326 	beq	r3,r2,c65c <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    c650:	00bffcc4 	movi	r2,-13
    c654:	e0bfff15 	stw	r2,-4(fp)
    c658:	00000a06 	br	c684 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    c65c:	e0bffd17 	ldw	r2,-12(fp)
    c660:	10800044 	addi	r2,r2,1
    c664:	e0bffd15 	stw	r2,-12(fp)
    c668:	00800074 	movhi	r2,1
    c66c:	10bbee04 	addi	r2,r2,-4168
    c670:	10800017 	ldw	r2,0(r2)
    c674:	1007883a 	mov	r3,r2
    c678:	e0bffd17 	ldw	r2,-12(fp)
    c67c:	18bfda2e 	bgeu	r3,r2,c5e8 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    c680:	e03fff15 	stw	zero,-4(fp)
    c684:	e0bfff17 	ldw	r2,-4(fp)
}
    c688:	e037883a 	mov	sp,fp
    c68c:	df000017 	ldw	fp,0(sp)
    c690:	dec00104 	addi	sp,sp,4
    c694:	f800283a 	ret

0000c698 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    c698:	defff404 	addi	sp,sp,-48
    c69c:	dfc00b15 	stw	ra,44(sp)
    c6a0:	df000a15 	stw	fp,40(sp)
    c6a4:	df000a04 	addi	fp,sp,40
    c6a8:	e13ffb15 	stw	r4,-20(fp)
    c6ac:	e17ffc15 	stw	r5,-16(fp)
    c6b0:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    c6b4:	00bfffc4 	movi	r2,-1
    c6b8:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
    c6bc:	00bffb44 	movi	r2,-19
    c6c0:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
    c6c4:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    c6c8:	e13ffb17 	ldw	r4,-20(fp)
    c6cc:	01400074 	movhi	r5,1
    c6d0:	297bec04 	addi	r5,r5,-4176
    c6d4:	000ca440 	call	ca44 <alt_find_dev>
    c6d8:	e0bffa15 	stw	r2,-24(fp)
    c6dc:	e0bffa17 	ldw	r2,-24(fp)
    c6e0:	1004c03a 	cmpne	r2,r2,zero
    c6e4:	1000051e 	bne	r2,zero,c6fc <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    c6e8:	e13ffb17 	ldw	r4,-20(fp)
    c6ec:	000cad80 	call	cad8 <alt_find_file>
    c6f0:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
    c6f4:	00800044 	movi	r2,1
    c6f8:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    c6fc:	e0bffa17 	ldw	r2,-24(fp)
    c700:	1005003a 	cmpeq	r2,r2,zero
    c704:	1000301e 	bne	r2,zero,c7c8 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
    c708:	e13ffa17 	ldw	r4,-24(fp)
    c70c:	000cbf80 	call	cbf8 <alt_get_fd>
    c710:	e0bff815 	stw	r2,-32(fp)
    c714:	e0bff817 	ldw	r2,-32(fp)
    c718:	1004403a 	cmpge	r2,r2,zero
    c71c:	1000031e 	bne	r2,zero,c72c <open+0x94>
    {
      status = index;
    c720:	e0bff817 	ldw	r2,-32(fp)
    c724:	e0bff715 	stw	r2,-36(fp)
    c728:	00002906 	br	c7d0 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
    c72c:	e0bff817 	ldw	r2,-32(fp)
    c730:	10800324 	muli	r2,r2,12
    c734:	1007883a 	mov	r3,r2
    c738:	00800074 	movhi	r2,1
    c73c:	10b70a04 	addi	r2,r2,-9176
    c740:	1885883a 	add	r2,r3,r2
    c744:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    c748:	e0fffc17 	ldw	r3,-16(fp)
    c74c:	00900034 	movhi	r2,16384
    c750:	10bfffc4 	addi	r2,r2,-1
    c754:	1886703a 	and	r3,r3,r2
    c758:	e0bff917 	ldw	r2,-28(fp)
    c75c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    c760:	e0bff617 	ldw	r2,-40(fp)
    c764:	1004c03a 	cmpne	r2,r2,zero
    c768:	1000061e 	bne	r2,zero,c784 <open+0xec>
    c76c:	e13ff917 	ldw	r4,-28(fp)
    c770:	000c5bc0 	call	c5bc <alt_file_locked>
    c774:	e0bff715 	stw	r2,-36(fp)
    c778:	e0bff717 	ldw	r2,-36(fp)
    c77c:	1004803a 	cmplt	r2,r2,zero
    c780:	1000131e 	bne	r2,zero,c7d0 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    c784:	e0bffa17 	ldw	r2,-24(fp)
    c788:	10800317 	ldw	r2,12(r2)
    c78c:	1005003a 	cmpeq	r2,r2,zero
    c790:	1000091e 	bne	r2,zero,c7b8 <open+0x120>
    c794:	e0bffa17 	ldw	r2,-24(fp)
    c798:	10800317 	ldw	r2,12(r2)
    c79c:	e13ff917 	ldw	r4,-28(fp)
    c7a0:	e17ffb17 	ldw	r5,-20(fp)
    c7a4:	e1bffc17 	ldw	r6,-16(fp)
    c7a8:	e1fffd17 	ldw	r7,-12(fp)
    c7ac:	103ee83a 	callr	r2
    c7b0:	e0bfff15 	stw	r2,-4(fp)
    c7b4:	00000106 	br	c7bc <open+0x124>
    c7b8:	e03fff15 	stw	zero,-4(fp)
    c7bc:	e0bfff17 	ldw	r2,-4(fp)
    c7c0:	e0bff715 	stw	r2,-36(fp)
    c7c4:	00000206 	br	c7d0 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
    c7c8:	00bffb44 	movi	r2,-19
    c7cc:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    c7d0:	e0bff717 	ldw	r2,-36(fp)
    c7d4:	1004403a 	cmpge	r2,r2,zero
    c7d8:	1000091e 	bne	r2,zero,c800 <open+0x168>
  {
    alt_release_fd (index);  
    c7dc:	e13ff817 	ldw	r4,-32(fp)
    c7e0:	000a5380 	call	a538 <alt_release_fd>
    ALT_ERRNO = -status;
    c7e4:	000c8200 	call	c820 <alt_get_errno>
    c7e8:	e0fff717 	ldw	r3,-36(fp)
    c7ec:	00c7c83a 	sub	r3,zero,r3
    c7f0:	10c00015 	stw	r3,0(r2)
    return -1;
    c7f4:	00bfffc4 	movi	r2,-1
    c7f8:	e0bffe15 	stw	r2,-8(fp)
    c7fc:	00000206 	br	c808 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
    c800:	e0bff817 	ldw	r2,-32(fp)
    c804:	e0bffe15 	stw	r2,-8(fp)
    c808:	e0bffe17 	ldw	r2,-8(fp)
}
    c80c:	e037883a 	mov	sp,fp
    c810:	dfc00117 	ldw	ra,4(sp)
    c814:	df000017 	ldw	fp,0(sp)
    c818:	dec00204 	addi	sp,sp,8
    c81c:	f800283a 	ret

0000c820 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    c820:	defffd04 	addi	sp,sp,-12
    c824:	dfc00215 	stw	ra,8(sp)
    c828:	df000115 	stw	fp,4(sp)
    c82c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    c830:	00800074 	movhi	r2,1
    c834:	10bbef04 	addi	r2,r2,-4164
    c838:	10800017 	ldw	r2,0(r2)
    c83c:	1005003a 	cmpeq	r2,r2,zero
    c840:	1000061e 	bne	r2,zero,c85c <alt_get_errno+0x3c>
    c844:	00800074 	movhi	r2,1
    c848:	10bbef04 	addi	r2,r2,-4164
    c84c:	10800017 	ldw	r2,0(r2)
    c850:	103ee83a 	callr	r2
    c854:	e0bfff15 	stw	r2,-4(fp)
    c858:	00000306 	br	c868 <alt_get_errno+0x48>
    c85c:	00800074 	movhi	r2,1
    c860:	1082f304 	addi	r2,r2,3020
    c864:	e0bfff15 	stw	r2,-4(fp)
    c868:	e0bfff17 	ldw	r2,-4(fp)
}
    c86c:	e037883a 	mov	sp,fp
    c870:	dfc00117 	ldw	ra,4(sp)
    c874:	df000017 	ldw	fp,0(sp)
    c878:	dec00204 	addi	sp,sp,8
    c87c:	f800283a 	ret

0000c880 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    c880:	defffa04 	addi	sp,sp,-24
    c884:	df000515 	stw	fp,20(sp)
    c888:	df000504 	addi	fp,sp,20
    c88c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c890:	0005303a 	rdctl	r2,status
    c894:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c898:	e0fffd17 	ldw	r3,-12(fp)
    c89c:	00bfff84 	movi	r2,-2
    c8a0:	1884703a 	and	r2,r3,r2
    c8a4:	1001703a 	wrctl	status,r2
  
  return context;
    c8a8:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    c8ac:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
    c8b0:	e0bfff17 	ldw	r2,-4(fp)
    c8b4:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    c8b8:	e0bffc17 	ldw	r2,-16(fp)
    c8bc:	10c00017 	ldw	r3,0(r2)
    c8c0:	e0bffc17 	ldw	r2,-16(fp)
    c8c4:	10800117 	ldw	r2,4(r2)
    c8c8:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
    c8cc:	e0bffc17 	ldw	r2,-16(fp)
    c8d0:	10c00117 	ldw	r3,4(r2)
    c8d4:	e0bffc17 	ldw	r2,-16(fp)
    c8d8:	10800017 	ldw	r2,0(r2)
    c8dc:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    c8e0:	e0fffc17 	ldw	r3,-16(fp)
    c8e4:	e0bffc17 	ldw	r2,-16(fp)
    c8e8:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
    c8ec:	e0fffc17 	ldw	r3,-16(fp)
    c8f0:	e0bffc17 	ldw	r2,-16(fp)
    c8f4:	18800015 	stw	r2,0(r3)
    c8f8:	e0bffe17 	ldw	r2,-8(fp)
    c8fc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c900:	e0bffb17 	ldw	r2,-20(fp)
    c904:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    c908:	e037883a 	mov	sp,fp
    c90c:	df000017 	ldw	fp,0(sp)
    c910:	dec00104 	addi	sp,sp,4
    c914:	f800283a 	ret

0000c918 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    c918:	defffb04 	addi	sp,sp,-20
    c91c:	dfc00415 	stw	ra,16(sp)
    c920:	df000315 	stw	fp,12(sp)
    c924:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    c928:	d0a00e17 	ldw	r2,-32712(gp)
    c92c:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    c930:	d0a71517 	ldw	r2,-25516(gp)
    c934:	10800044 	addi	r2,r2,1
    c938:	d0a71515 	stw	r2,-25516(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    c93c:	00003106 	br	ca04 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
    c940:	e0bffe17 	ldw	r2,-8(fp)
    c944:	10800017 	ldw	r2,0(r2)
    c948:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    c94c:	e0bffe17 	ldw	r2,-8(fp)
    c950:	10800403 	ldbu	r2,16(r2)
    c954:	10803fcc 	andi	r2,r2,255
    c958:	1005003a 	cmpeq	r2,r2,zero
    c95c:	1000051e 	bne	r2,zero,c974 <alt_tick+0x5c>
    c960:	d0a71517 	ldw	r2,-25516(gp)
    c964:	1004c03a 	cmpne	r2,r2,zero
    c968:	1000021e 	bne	r2,zero,c974 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
    c96c:	e0bffe17 	ldw	r2,-8(fp)
    c970:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    c974:	e0bffe17 	ldw	r2,-8(fp)
    c978:	10c00217 	ldw	r3,8(r2)
    c97c:	d0a71517 	ldw	r2,-25516(gp)
    c980:	10c01e36 	bltu	r2,r3,c9fc <alt_tick+0xe4>
    c984:	e0bffe17 	ldw	r2,-8(fp)
    c988:	10800403 	ldbu	r2,16(r2)
    c98c:	10803fcc 	andi	r2,r2,255
    c990:	1004c03a 	cmpne	r2,r2,zero
    c994:	1000191e 	bne	r2,zero,c9fc <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
    c998:	e0bffe17 	ldw	r2,-8(fp)
    c99c:	10c00317 	ldw	r3,12(r2)
    c9a0:	e0bffe17 	ldw	r2,-8(fp)
    c9a4:	11000517 	ldw	r4,20(r2)
    c9a8:	183ee83a 	callr	r3
    c9ac:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    c9b0:	e0bffd17 	ldw	r2,-12(fp)
    c9b4:	1004c03a 	cmpne	r2,r2,zero
    c9b8:	1000031e 	bne	r2,zero,c9c8 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
    c9bc:	e13ffe17 	ldw	r4,-8(fp)
    c9c0:	000c8800 	call	c880 <alt_alarm_stop>
    c9c4:	00000d06 	br	c9fc <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
    c9c8:	e0bffe17 	ldw	r2,-8(fp)
    c9cc:	10c00217 	ldw	r3,8(r2)
    c9d0:	e0bffd17 	ldw	r2,-12(fp)
    c9d4:	1887883a 	add	r3,r3,r2
    c9d8:	e0bffe17 	ldw	r2,-8(fp)
    c9dc:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    c9e0:	e0bffe17 	ldw	r2,-8(fp)
    c9e4:	10c00217 	ldw	r3,8(r2)
    c9e8:	d0a71517 	ldw	r2,-25516(gp)
    c9ec:	1880032e 	bgeu	r3,r2,c9fc <alt_tick+0xe4>
        {
          alarm->rollover = 1;
    c9f0:	e0fffe17 	ldw	r3,-8(fp)
    c9f4:	00800044 	movi	r2,1
    c9f8:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
    c9fc:	e0bfff17 	ldw	r2,-4(fp)
    ca00:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    ca04:	d0e00e04 	addi	r3,gp,-32712
    ca08:	e0bffe17 	ldw	r2,-8(fp)
    ca0c:	10ffcc1e 	bne	r2,r3,c940 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    ca10:	e037883a 	mov	sp,fp
    ca14:	dfc00117 	ldw	ra,4(sp)
    ca18:	df000017 	ldw	fp,0(sp)
    ca1c:	dec00204 	addi	sp,sp,8
    ca20:	f800283a 	ret

0000ca24 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    ca24:	deffff04 	addi	sp,sp,-4
    ca28:	df000015 	stw	fp,0(sp)
    ca2c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    ca30:	000170fa 	wrctl	ienable,zero
}
    ca34:	e037883a 	mov	sp,fp
    ca38:	df000017 	ldw	fp,0(sp)
    ca3c:	dec00104 	addi	sp,sp,4
    ca40:	f800283a 	ret

0000ca44 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    ca44:	defff904 	addi	sp,sp,-28
    ca48:	dfc00615 	stw	ra,24(sp)
    ca4c:	df000515 	stw	fp,20(sp)
    ca50:	df000504 	addi	fp,sp,20
    ca54:	e13ffd15 	stw	r4,-12(fp)
    ca58:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
    ca5c:	e0bffe17 	ldw	r2,-8(fp)
    ca60:	10800017 	ldw	r2,0(r2)
    ca64:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    ca68:	e13ffd17 	ldw	r4,-12(fp)
    ca6c:	00004c80 	call	4c8 <strlen>
    ca70:	10800044 	addi	r2,r2,1
    ca74:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    ca78:	00000d06 	br	cab0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    ca7c:	e0bffc17 	ldw	r2,-16(fp)
    ca80:	11000217 	ldw	r4,8(r2)
    ca84:	e1bffb17 	ldw	r6,-20(fp)
    ca88:	e17ffd17 	ldw	r5,-12(fp)
    ca8c:	000cd540 	call	cd54 <memcmp>
    ca90:	1004c03a 	cmpne	r2,r2,zero
    ca94:	1000031e 	bne	r2,zero,caa4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    ca98:	e0bffc17 	ldw	r2,-16(fp)
    ca9c:	e0bfff15 	stw	r2,-4(fp)
    caa0:	00000706 	br	cac0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    caa4:	e0bffc17 	ldw	r2,-16(fp)
    caa8:	10800017 	ldw	r2,0(r2)
    caac:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    cab0:	e0fffe17 	ldw	r3,-8(fp)
    cab4:	e0bffc17 	ldw	r2,-16(fp)
    cab8:	10fff01e 	bne	r2,r3,ca7c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    cabc:	e03fff15 	stw	zero,-4(fp)
    cac0:	e0bfff17 	ldw	r2,-4(fp)
}
    cac4:	e037883a 	mov	sp,fp
    cac8:	dfc00117 	ldw	ra,4(sp)
    cacc:	df000017 	ldw	fp,0(sp)
    cad0:	dec00204 	addi	sp,sp,8
    cad4:	f800283a 	ret

0000cad8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    cad8:	defffa04 	addi	sp,sp,-24
    cadc:	dfc00515 	stw	ra,20(sp)
    cae0:	df000415 	stw	fp,16(sp)
    cae4:	df000404 	addi	fp,sp,16
    cae8:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    caec:	00800074 	movhi	r2,1
    caf0:	10bbea04 	addi	r2,r2,-4184
    caf4:	10800017 	ldw	r2,0(r2)
    caf8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    cafc:	00003306 	br	cbcc <alt_find_file+0xf4>
  {
    len = strlen(next->name);
    cb00:	e0bffd17 	ldw	r2,-12(fp)
    cb04:	11000217 	ldw	r4,8(r2)
    cb08:	00004c80 	call	4c8 <strlen>
    cb0c:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
    cb10:	e0bffd17 	ldw	r2,-12(fp)
    cb14:	10c00217 	ldw	r3,8(r2)
    cb18:	e0bffc17 	ldw	r2,-16(fp)
    cb1c:	1885883a 	add	r2,r3,r2
    cb20:	10bfffc4 	addi	r2,r2,-1
    cb24:	10800003 	ldbu	r2,0(r2)
    cb28:	10803fcc 	andi	r2,r2,255
    cb2c:	1080201c 	xori	r2,r2,128
    cb30:	10bfe004 	addi	r2,r2,-128
    cb34:	10800bd8 	cmpnei	r2,r2,47
    cb38:	1000031e 	bne	r2,zero,cb48 <alt_find_file+0x70>
    {
      len -= 1;
    cb3c:	e0bffc17 	ldw	r2,-16(fp)
    cb40:	10bfffc4 	addi	r2,r2,-1
    cb44:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    cb48:	e0bffc17 	ldw	r2,-16(fp)
    cb4c:	1007883a 	mov	r3,r2
    cb50:	e0bffe17 	ldw	r2,-8(fp)
    cb54:	1885883a 	add	r2,r3,r2
    cb58:	10800003 	ldbu	r2,0(r2)
    cb5c:	10803fcc 	andi	r2,r2,255
    cb60:	1080201c 	xori	r2,r2,128
    cb64:	10bfe004 	addi	r2,r2,-128
    cb68:	10800be0 	cmpeqi	r2,r2,47
    cb6c:	10000a1e 	bne	r2,zero,cb98 <alt_find_file+0xc0>
    cb70:	e0bffc17 	ldw	r2,-16(fp)
    cb74:	1007883a 	mov	r3,r2
    cb78:	e0bffe17 	ldw	r2,-8(fp)
    cb7c:	1885883a 	add	r2,r3,r2
    cb80:	10800003 	ldbu	r2,0(r2)
    cb84:	10803fcc 	andi	r2,r2,255
    cb88:	1080201c 	xori	r2,r2,128
    cb8c:	10bfe004 	addi	r2,r2,-128
    cb90:	1004c03a 	cmpne	r2,r2,zero
    cb94:	10000a1e 	bne	r2,zero,cbc0 <alt_find_file+0xe8>
    cb98:	e0bffd17 	ldw	r2,-12(fp)
    cb9c:	11000217 	ldw	r4,8(r2)
    cba0:	e1bffc17 	ldw	r6,-16(fp)
    cba4:	e17ffe17 	ldw	r5,-8(fp)
    cba8:	000cd540 	call	cd54 <memcmp>
    cbac:	1004c03a 	cmpne	r2,r2,zero
    cbb0:	1000031e 	bne	r2,zero,cbc0 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    cbb4:	e0bffd17 	ldw	r2,-12(fp)
    cbb8:	e0bfff15 	stw	r2,-4(fp)
    cbbc:	00000806 	br	cbe0 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
    cbc0:	e0bffd17 	ldw	r2,-12(fp)
    cbc4:	10800017 	ldw	r2,0(r2)
    cbc8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    cbcc:	00c00074 	movhi	r3,1
    cbd0:	18fbea04 	addi	r3,r3,-4184
    cbd4:	e0bffd17 	ldw	r2,-12(fp)
    cbd8:	10ffc91e 	bne	r2,r3,cb00 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    cbdc:	e03fff15 	stw	zero,-4(fp)
    cbe0:	e0bfff17 	ldw	r2,-4(fp)
}
    cbe4:	e037883a 	mov	sp,fp
    cbe8:	dfc00117 	ldw	ra,4(sp)
    cbec:	df000017 	ldw	fp,0(sp)
    cbf0:	dec00204 	addi	sp,sp,8
    cbf4:	f800283a 	ret

0000cbf8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    cbf8:	defffc04 	addi	sp,sp,-16
    cbfc:	df000315 	stw	fp,12(sp)
    cc00:	df000304 	addi	fp,sp,12
    cc04:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    cc08:	00bffa04 	movi	r2,-24
    cc0c:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    cc10:	e03ffe15 	stw	zero,-8(fp)
    cc14:	00001e06 	br	cc90 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
    cc18:	e0bffe17 	ldw	r2,-8(fp)
    cc1c:	00c00074 	movhi	r3,1
    cc20:	18f70a04 	addi	r3,r3,-9176
    cc24:	10800324 	muli	r2,r2,12
    cc28:	10c5883a 	add	r2,r2,r3
    cc2c:	10800017 	ldw	r2,0(r2)
    cc30:	1004c03a 	cmpne	r2,r2,zero
    cc34:	1000131e 	bne	r2,zero,cc84 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
    cc38:	e0bffe17 	ldw	r2,-8(fp)
    cc3c:	00c00074 	movhi	r3,1
    cc40:	18f70a04 	addi	r3,r3,-9176
    cc44:	10800324 	muli	r2,r2,12
    cc48:	10c7883a 	add	r3,r2,r3
    cc4c:	e0bfff17 	ldw	r2,-4(fp)
    cc50:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
    cc54:	00800074 	movhi	r2,1
    cc58:	10bbee04 	addi	r2,r2,-4168
    cc5c:	10c00017 	ldw	r3,0(r2)
    cc60:	e0bffe17 	ldw	r2,-8(fp)
    cc64:	1880040e 	bge	r3,r2,cc78 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
    cc68:	00c00074 	movhi	r3,1
    cc6c:	18fbee04 	addi	r3,r3,-4168
    cc70:	e0bffe17 	ldw	r2,-8(fp)
    cc74:	18800015 	stw	r2,0(r3)
      }
      rc = i;
    cc78:	e0bffe17 	ldw	r2,-8(fp)
    cc7c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    cc80:	00000606 	br	cc9c <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    cc84:	e0bffe17 	ldw	r2,-8(fp)
    cc88:	10800044 	addi	r2,r2,1
    cc8c:	e0bffe15 	stw	r2,-8(fp)
    cc90:	e0bffe17 	ldw	r2,-8(fp)
    cc94:	10800810 	cmplti	r2,r2,32
    cc98:	103fdf1e 	bne	r2,zero,cc18 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    cc9c:	e0bffd17 	ldw	r2,-12(fp)
}
    cca0:	e037883a 	mov	sp,fp
    cca4:	df000017 	ldw	fp,0(sp)
    cca8:	dec00104 	addi	sp,sp,4
    ccac:	f800283a 	ret

0000ccb0 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    ccb0:	defffb04 	addi	sp,sp,-20
    ccb4:	df000415 	stw	fp,16(sp)
    ccb8:	df000404 	addi	fp,sp,16
    ccbc:	e13ffe15 	stw	r4,-8(fp)
    ccc0:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    ccc4:	e0bfff17 	ldw	r2,-4(fp)
    ccc8:	10880070 	cmpltui	r2,r2,8193
    cccc:	1000021e 	bne	r2,zero,ccd8 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    ccd0:	00880004 	movi	r2,8192
    ccd4:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    ccd8:	e0fffe17 	ldw	r3,-8(fp)
    ccdc:	e0bfff17 	ldw	r2,-4(fp)
    cce0:	1885883a 	add	r2,r3,r2
    cce4:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    cce8:	e0bffe17 	ldw	r2,-8(fp)
    ccec:	e0bffd15 	stw	r2,-12(fp)
    ccf0:	00000506 	br	cd08 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    ccf4:	e0bffd17 	ldw	r2,-12(fp)
    ccf8:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    ccfc:	e0bffd17 	ldw	r2,-12(fp)
    cd00:	10800804 	addi	r2,r2,32
    cd04:	e0bffd15 	stw	r2,-12(fp)
    cd08:	e0fffd17 	ldw	r3,-12(fp)
    cd0c:	e0bffc17 	ldw	r2,-16(fp)
    cd10:	18bff836 	bltu	r3,r2,ccf4 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    cd14:	e0bffe17 	ldw	r2,-8(fp)
    cd18:	108007cc 	andi	r2,r2,31
    cd1c:	1005003a 	cmpeq	r2,r2,zero
    cd20:	1000021e 	bne	r2,zero,cd2c <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    cd24:	e0bffd17 	ldw	r2,-12(fp)
    cd28:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    cd2c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    cd30:	e037883a 	mov	sp,fp
    cd34:	df000017 	ldw	fp,0(sp)
    cd38:	dec00104 	addi	sp,sp,4
    cd3c:	f800283a 	ret

0000cd40 <atexit>:
    cd40:	200b883a 	mov	r5,r4
    cd44:	000d883a 	mov	r6,zero
    cd48:	0009883a 	mov	r4,zero
    cd4c:	000f883a 	mov	r7,zero
    cd50:	000cdc81 	jmpi	cdc8 <__register_exitproc>

0000cd54 <memcmp>:
    cd54:	00c000c4 	movi	r3,3
    cd58:	1980032e 	bgeu	r3,r6,cd68 <memcmp+0x14>
    cd5c:	2144b03a 	or	r2,r4,r5
    cd60:	10c4703a 	and	r2,r2,r3
    cd64:	10000f26 	beq	r2,zero,cda4 <memcmp+0x50>
    cd68:	31ffffc4 	addi	r7,r6,-1
    cd6c:	3000061e 	bne	r6,zero,cd88 <memcmp+0x34>
    cd70:	00000a06 	br	cd9c <memcmp+0x48>
    cd74:	39ffffc4 	addi	r7,r7,-1
    cd78:	00bfffc4 	movi	r2,-1
    cd7c:	21000044 	addi	r4,r4,1
    cd80:	29400044 	addi	r5,r5,1
    cd84:	38800526 	beq	r7,r2,cd9c <memcmp+0x48>
    cd88:	20c00003 	ldbu	r3,0(r4)
    cd8c:	28800003 	ldbu	r2,0(r5)
    cd90:	18bff826 	beq	r3,r2,cd74 <memcmp+0x20>
    cd94:	1885c83a 	sub	r2,r3,r2
    cd98:	f800283a 	ret
    cd9c:	0005883a 	mov	r2,zero
    cda0:	f800283a 	ret
    cda4:	180f883a 	mov	r7,r3
    cda8:	20c00017 	ldw	r3,0(r4)
    cdac:	28800017 	ldw	r2,0(r5)
    cdb0:	18bfed1e 	bne	r3,r2,cd68 <memcmp+0x14>
    cdb4:	31bfff04 	addi	r6,r6,-4
    cdb8:	21000104 	addi	r4,r4,4
    cdbc:	29400104 	addi	r5,r5,4
    cdc0:	39bff936 	bltu	r7,r6,cda8 <memcmp+0x54>
    cdc4:	003fe806 	br	cd68 <memcmp+0x14>

0000cdc8 <__register_exitproc>:
    cdc8:	defffa04 	addi	sp,sp,-24
    cdcc:	00800074 	movhi	r2,1
    cdd0:	10bbe504 	addi	r2,r2,-4204
    cdd4:	dc000015 	stw	r16,0(sp)
    cdd8:	14000017 	ldw	r16,0(r2)
    cddc:	dd000415 	stw	r20,16(sp)
    cde0:	2829883a 	mov	r20,r5
    cde4:	81405217 	ldw	r5,328(r16)
    cde8:	dcc00315 	stw	r19,12(sp)
    cdec:	dc800215 	stw	r18,8(sp)
    cdf0:	dc400115 	stw	r17,4(sp)
    cdf4:	dfc00515 	stw	ra,20(sp)
    cdf8:	2023883a 	mov	r17,r4
    cdfc:	3027883a 	mov	r19,r6
    ce00:	3825883a 	mov	r18,r7
    ce04:	28002526 	beq	r5,zero,ce9c <__register_exitproc+0xd4>
    ce08:	29000117 	ldw	r4,4(r5)
    ce0c:	008007c4 	movi	r2,31
    ce10:	11002716 	blt	r2,r4,ceb0 <__register_exitproc+0xe8>
    ce14:	8800101e 	bne	r17,zero,ce58 <__register_exitproc+0x90>
    ce18:	2105883a 	add	r2,r4,r4
    ce1c:	1085883a 	add	r2,r2,r2
    ce20:	20c00044 	addi	r3,r4,1
    ce24:	1145883a 	add	r2,r2,r5
    ce28:	0009883a 	mov	r4,zero
    ce2c:	15000215 	stw	r20,8(r2)
    ce30:	28c00115 	stw	r3,4(r5)
    ce34:	2005883a 	mov	r2,r4
    ce38:	dfc00517 	ldw	ra,20(sp)
    ce3c:	dd000417 	ldw	r20,16(sp)
    ce40:	dcc00317 	ldw	r19,12(sp)
    ce44:	dc800217 	ldw	r18,8(sp)
    ce48:	dc400117 	ldw	r17,4(sp)
    ce4c:	dc000017 	ldw	r16,0(sp)
    ce50:	dec00604 	addi	sp,sp,24
    ce54:	f800283a 	ret
    ce58:	29802204 	addi	r6,r5,136
    ce5c:	00800044 	movi	r2,1
    ce60:	110e983a 	sll	r7,r2,r4
    ce64:	30c04017 	ldw	r3,256(r6)
    ce68:	2105883a 	add	r2,r4,r4
    ce6c:	1085883a 	add	r2,r2,r2
    ce70:	1185883a 	add	r2,r2,r6
    ce74:	19c6b03a 	or	r3,r3,r7
    ce78:	14802015 	stw	r18,128(r2)
    ce7c:	14c00015 	stw	r19,0(r2)
    ce80:	00800084 	movi	r2,2
    ce84:	30c04015 	stw	r3,256(r6)
    ce88:	88bfe31e 	bne	r17,r2,ce18 <__register_exitproc+0x50>
    ce8c:	30804117 	ldw	r2,260(r6)
    ce90:	11c4b03a 	or	r2,r2,r7
    ce94:	30804115 	stw	r2,260(r6)
    ce98:	003fdf06 	br	ce18 <__register_exitproc+0x50>
    ce9c:	00800074 	movhi	r2,1
    cea0:	10834404 	addi	r2,r2,3344
    cea4:	100b883a 	mov	r5,r2
    cea8:	80805215 	stw	r2,328(r16)
    ceac:	003fd606 	br	ce08 <__register_exitproc+0x40>
    ceb0:	00800034 	movhi	r2,0
    ceb4:	10800004 	addi	r2,r2,0
    ceb8:	1000021e 	bne	r2,zero,cec4 <__register_exitproc+0xfc>
    cebc:	013fffc4 	movi	r4,-1
    cec0:	003fdc06 	br	ce34 <__register_exitproc+0x6c>
    cec4:	01006404 	movi	r4,400
    cec8:	103ee83a 	callr	r2
    cecc:	1007883a 	mov	r3,r2
    ced0:	103ffa26 	beq	r2,zero,cebc <__register_exitproc+0xf4>
    ced4:	80805217 	ldw	r2,328(r16)
    ced8:	180b883a 	mov	r5,r3
    cedc:	18000115 	stw	zero,4(r3)
    cee0:	18800015 	stw	r2,0(r3)
    cee4:	80c05215 	stw	r3,328(r16)
    cee8:	18006215 	stw	zero,392(r3)
    ceec:	18006315 	stw	zero,396(r3)
    cef0:	0009883a 	mov	r4,zero
    cef4:	883fc826 	beq	r17,zero,ce18 <__register_exitproc+0x50>
    cef8:	003fd706 	br	ce58 <__register_exitproc+0x90>
    cefc:	00000010 	cmplti	zero,zero,0
    cf00:	00000000 	call	0 <__reset>
    cf04:	00527a01 	jmpi	527a0 <_gp+0x3b810>
    cf08:	011f7c01 	jmpi	11f7c0 <_gp+0x108830>
    cf0c:	001b0c0b 	ldhu	zero,27696(zero)
    cf10:	00000028 	cmpgeui	zero,zero,0
    cf14:	00000018 	cmpnei	zero,zero,0
    cf18:	00007864 	muli	zero,zero,481
    cf1c:	000005dc 	xori	zero,zero,23
    cf20:	400e4400 	call	400e440 <__alt_data_end+0x380e440>
    cf24:	92099170 	cmpltui	r8,r18,9797
    cf28:	95079308 	cmpgei	r20,r18,7756
    cf2c:	97049605 	stb	fp,4696(r18)
    cf30:	90019f03 	ldbu	zero,1660(r18)
    cf34:	9c06940a 	0x9c06940a
    cf38:	00000002 	0x2
    cf3c:	00000028 	cmpgeui	zero,zero,0
    cf40:	00000044 	movi	zero,1
    cf44:	00007e40 	call	7e4 <___vfprintf_internal_r+0x250>
    cf48:	000005b0 	cmpltui	zero,zero,22
    cf4c:	3c0e4400 	call	3c0e440 <__alt_data_end+0x340e440>
    cf50:	92099168 	cmpgeui	r8,r18,9797
    cf54:	95079308 	cmpgei	r20,r18,7756
    cf58:	9c039705 	stb	r16,3676(r19)
    cf5c:	90019f02 	0x90019f02
    cf60:	9606940a 	0x9606940a
    cf64:	00000004 	movi	zero,0
    cf68:	000025a0 	cmpeqi	zero,zero,150
