
lab5.elf:     file format elf32-littlenios2
lab5.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x000030a4 memsz 0x000030a4 flags r-x
    LOAD off    0x000040c4 vaddr 0x000030c4 paddr 0x00004888 align 2**12
         filesz 0x000017c4 memsz 0x000017c4 flags rw-
    LOAD off    0x0000604c vaddr 0x0000604c paddr 0x0000604c align 2**12
         filesz 0x00000000 memsz 0x000002ac flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00002eb8  000001b4  000001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000058  0000306c  0000306c  0000406c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000017c4  000030c4  00004888  000040c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002ac  0000604c  0000604c  0000604c  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00005888  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000005d8  00000000  00000000  000058b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000008ee  00000000  00000000  00005e88  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000b379  00000000  00000000  00006776  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002a45  00000000  00000000  00011aef  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00007000  00000000  00000000  00014534  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000a10  00000000  00000000  0001b534  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000b00  00000000  00000000  0001bf44  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000fcb  00000000  00000000  0001ca44  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  0001da10  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000090  00000000  00000000  0001da30  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0001f90e  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0001f911  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0001f914  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0001f915  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0001f916  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0001f91a  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0001f91e  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0001f922  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0001f92b  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0001f934  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000008  00000000  00000000  0001f93d  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000001c  00000000  00000000  0001f945  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     000b989e  00000000  00000000  0001f961  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001b4 l    d  .text	00000000 .text
0000306c l    d  .rodata	00000000 .rodata
000030c4 l    d  .rwdata	00000000 .rwdata
0000604c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000001ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
10000700 l       *ABS*	00000000 EXPANSION
10000020 l       *ABS*	00000000 BUTTONS
10000030 l       *ABS*	00000000 SWITCHES
000030c4 l       .rwdata	00000000 pattern
000030c8 l       .rwdata	00000000 reserved
00000224 l       .text	00000000 loop
00000224 l       .text	00000000 wait1
00000248 l       .text	00000000 wait2
0000025c l       .text	00000000 loop1
00000274 l       .text	00000000 time
10000010 l       *ABS*	00000000 RED_LEDS
0000029c l       .text	00000000 end
00000000 l    df *ABS*	00000000 alt_load.c
00000320 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
000030cc l     O .rwdata	00001060 jtag_uart
0000412c l     O .rwdata	000000c4 Serial_port0
000041f0 l     O .rwdata	000000c4 Serial_port1
000004c8 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00000708 l     F .text	00000228 altera_avalon_jtag_uart_irq
00000930 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00000fac l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
0000126c l     F .text	0000009c altera_avalon_uart_irq
00001308 l     F .text	000000e0 altera_avalon_uart_rxirq
000013e8 l     F .text	0000015c altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
000017d4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
000019fc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00001cac l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00001d28 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00001e08 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000222c l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00002368 l     F .text	000000dc alt_file_locked
000025cc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
0000445c l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00002e54 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
00003008 l     F .text	00000040 alt_sim_halt
0000038c g     F .text	0000006c alt_main
00006068 g     O .bss	00000100 alt_irq
00004888 g       *ABS*	00000000 __flash_rwdata_start
00000000  w      *UND*	00000000 __errno
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00006064 g     O .bss	00000004 errno
00006050 g     O .bss	00000004 alt_argv
0000c85c g       *ABS*	00000000 _gp
000042dc g     O .rwdata	00000180 alt_fd_list
00002850 g     F .text	00000094 alt_find_dev
00002c0c g     F .text	000000a0 memcpy
000022f0 g     F .text	00000078 alt_io_redirect
0000306c g       *ABS*	00000000 __DTOR_END__
00000b48 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00002abc g     F .text	00000090 alt_icache_flush
0000486c g     O .rwdata	00000004 alt_max_fd
00004884 g     O .rwdata	00000004 _global_impure_ptr
000062f8 g       *ABS*	00000000 __bss_end
00002134 g     F .text	000000f8 alt_iic_isr_register
00002724 g     F .text	0000010c alt_tick
000011a4 g     F .text	000000c8 altera_avalon_uart_init
000020ec g     F .text	00000048 alt_ic_irq_enabled
0000268c g     F .text	00000098 alt_alarm_stop
00006058 g     O .bss	00000004 alt_irq_active
000000ec g     F .exceptions	000000c8 alt_irq_handler
000042b4 g     O .rwdata	00000028 alt_dev_null
00001d0c g     F .text	0000001c alt_dcache_flush_all
00004888 g       *ABS*	00000000 __ram_rwdata_end
00004864 g     O .rwdata	00000008 alt_dev_list
000030c4 g       *ABS*	00000000 __ram_rodata_end
000062f8 g       *ABS*	00000000 end
00001834 g     F .text	000001c8 altera_avalon_uart_write
00000648 g     F .text	000000c0 altera_avalon_jtag_uart_init
00003068 g       *ABS*	00000000 __CTOR_LIST__
00800000 g       *ABS*	00000000 __alt_stack_pointer
0000101c g     F .text	00000090 alt_avalon_timer_sc_init
00001104 g     F .text	00000058 altera_avalon_uart_write_fd
0000115c g     F .text	00000048 altera_avalon_uart_close_fd
00000d6c g     F .text	00000240 altera_avalon_jtag_uart_write
00002e58 g     F .text	000001b0 __call_exitprocs
000001b4 g     F .text	0000003c _start
0000605c g     O .bss	00000004 _alt_tick_rate
00006060 g     O .bss	00000004 _alt_nticks
0000042c g     F .text	0000009c alt_sys_init
00002d20 g     F .text	00000134 __register_exitproc
000009e0 g     F .text	00000074 altera_avalon_jtag_uart_close
000030c4 g       *ABS*	00000000 __ram_rwdata_start
0000306c g       *ABS*	00000000 __ram_rodata_start
00000500 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
00002a04 g     F .text	000000b8 alt_get_fd
00002b98 g     F .text	00000074 memcmp
000005b0 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
000062f8 g       *ABS*	00000000 __alt_stack_base
000005f8 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
000028e4 g     F .text	00000120 alt_find_file
00001d54 g     F .text	000000b4 alt_dev_llist_insert
0000604c g       *ABS*	00000000 __bss_start
000001f0 g       .text	00000000 main
00006054 g     O .bss	00000004 alt_envp
00000558 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00006168 g     O .bss	00000190 _atexit0
00004870 g     O .rwdata	00000004 alt_errno
0000306c g       *ABS*	00000000 __CTOR_END__
0000306c g       *ABS*	00000000 __flash_rodata_start
0000306c g       *ABS*	00000000 __DTOR_LIST__
000003f8 g     F .text	00000034 alt_irq_init
0000262c g     F .text	00000060 alt_release_fd
00002b4c g     F .text	00000014 atexit
00004880 g     O .rwdata	00000004 _impure_ptr
0000604c g     O .bss	00000004 alt_argc
00001ecc g     F .text	00000064 _do_dtors
00000020 g       .exceptions	00000000 alt_irq_entry
0000485c g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
00001f60 g     F .text	00000050 alt_ic_isr_register
00004888 g       *ABS*	00000000 _edata
000010ac g     F .text	00000058 altera_avalon_uart_read_fd
000062f8 g       *ABS*	00000000 _end
000001b4 g       *ABS*	00000000 __ram_exceptions_end
00000a54 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0000204c g     F .text	000000a0 alt_ic_irq_disable
00002830 g     F .text	00000020 altera_nios2_qsys_irq_init
00002b60 g     F .text	00000038 exit
00800000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00000000 g       *ABS*	00000000 __alt_mem_sdram
00001544 g     F .text	00000060 altera_avalon_uart_close
00003048 g     F .text	00000020 _exit
00001a5c g     F .text	00000154 alt_alarm_start
00002cac g     F .text	00000074 strlen
00002444 g     F .text	00000188 open
00001f30 g     F .text	00000030 alt_icache_flush_all
00004874 g     O .rwdata	00000004 alt_priority_mask
00001fb0 g     F .text	0000009c alt_ic_irq_enable
000015a4 g     F .text	00000230 altera_avalon_uart_read
00004878 g     O .rwdata	00000008 alt_alarm_list
00001e68 g     F .text	00000064 _do_ctors
00001bb0 g     F .text	000000fc close
000002a0 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00880014 	movui	r2,8192
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08406d14 	ori	at,at,436
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  44:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  fc:	0005313a 	rdctl	r2,ipending
 100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 10c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 110:	00800044 	movi	r2,1
 114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 118:	e0ffff17 	ldw	r3,-4(fp)
 11c:	e0bffe17 	ldw	r2,-8(fp)
 120:	1884703a 	and	r2,r3,r2
 124:	1005003a 	cmpeq	r2,r2,zero
 128:	1000161e 	bne	r2,zero,184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 12c:	e0bffd17 	ldw	r2,-12(fp)
 130:	00c00034 	movhi	r3,0
 134:	18d81a04 	addi	r3,r3,24680
 138:	100490fa 	slli	r2,r2,3
 13c:	10c5883a 	add	r2,r2,r3
 140:	11400017 	ldw	r5,0(r2)
 144:	e0bffd17 	ldw	r2,-12(fp)
 148:	00c00034 	movhi	r3,0
 14c:	18d81a04 	addi	r3,r3,24680
 150:	100490fa 	slli	r2,r2,3
 154:	10c5883a 	add	r2,r2,r3
 158:	10800104 	addi	r2,r2,4
 15c:	11000017 	ldw	r4,0(r2)
 160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 164:	0005313a 	rdctl	r2,ipending
 168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 16c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 174:	e0bfff17 	ldw	r2,-4(fp)
 178:	1004c03a 	cmpne	r2,r2,zero
 17c:	103fe31e 	bne	r2,zero,10c <alt_irq_handler+0x20>
 180:	00000706 	br	1a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 184:	e0bffe17 	ldw	r2,-8(fp)
 188:	1085883a 	add	r2,r2,r2
 18c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 190:	e0bffd17 	ldw	r2,-12(fp)
 194:	10800044 	addi	r2,r2,1
 198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 19c:	003fde06 	br	118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 1a0:	e037883a 	mov	sp,fp
 1a4:	dfc00117 	ldw	ra,4(sp)
 1a8:	df000017 	ldw	fp,0(sp)
 1ac:	dec00204 	addi	sp,sp,8
 1b0:	f800283a 	ret

Disassembly of section .text:

000001b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1b4:	06c02034 	movhi	sp,128
    ori sp, sp, %lo(__alt_stack_pointer)
     1b8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     1bc:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
     1c0:	d6b21714 	ori	gp,gp,51292
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1c4:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
     1c8:	10981314 	ori	r2,r2,24652

    movhi r3, %hi(__bss_end)
     1cc:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
     1d0:	18d8be14 	ori	r3,r3,25336

    beq r2, r3, 1f
     1d4:	10c00326 	beq	r2,r3,1e4 <_start+0x30>

0:
    stw zero, (r2)
     1d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1e0:	10fffd36 	bltu	r2,r3,1d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1e4:	00002a00 	call	2a0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1e8:	000038c0 	call	38c <alt_main>

000001ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1ec:	003fff06 	br	1ec <alt_after_alt_main>

000001f0 <main>:
     1f0:	05400034 	movhi	r21,0

			.text			# This region hold instructions
			.global main

main:
			movia r21,pattern		# Load the address of the reserved memory location 'pattern'
     1f4:	ad4c3104 	addi	r21,r21,12484
     1f8:	05800034 	movhi	r22,0
			movia r22,reserved
     1fc:	b58c3204 	addi	r22,r22,12488
			ldw	r14,0(r21)			# Load the 32-bit word at the location of 'pattern' into r14
     200:	ab800017 	ldw	r14,0(r21)
     204:	05040034 	movhi	r20,4096

			movia r20, BUTTONS		# Initialize the other addresses we will need
     208:	a5000804 	addi	r20,r20,32
     20c:	04c40034 	movhi	r19,4096
			movia r19, EXPANSION	#
     210:	9cc1c004 	addi	r19,r19,1792
     214:	04840034 	movhi	r18,4096
			movia r18, SWITCHES		#
     218:	94800c04 	addi	r18,r18,48


			movi  r6,0x0F			# Load the value 0b00001111
     21c:	018003c4 	movi	r6,15
			stw	r6,4(r19)			# Store 0x0F into EXPANSION's base address + 1
     220:	99800115 	stw	r6,4(r19)

00000224 <loop>:
									# an output. Otherwise the pins default to input

loop:


wait1:		ldw	r10,0(r20)		#
     224:	a2800017 	ldw	r10,0(r20)
			andi r10,r10,0b0011 #
     228:	528000cc 	andi	r10,r10,3
			beq	r10,r0,wait1	# WAIT FOR BUTTON PRESS
     22c:	503ffd26 	beq	r10,zero,224 <loop>

			andi r12,r10,0b0001 # KEY_0 IS PRESSED
     230:	5300004c 	andi	r12,r10,1
			beq r12, r0, 1	#
     234:	603f7266 	beq	r12,zero,1 <__reset+0x1>
			movi r13,31			# make r13 = 31
     238:	034007c4 	movi	r13,31
1:
			andi r12,r10,0b0010 # KEY_1 IS PRESSED
     23c:	5300008c 	andi	r12,r10,2
			beq r12, r0, 2	#
     240:	603f6fa6 	beq	r12,zero,2 <__reset+0x2>
			movi r13,1			# make r13 = 1
     244:	03400044 	movi	r13,1

00000248 <wait2>:
2:


wait2:		ldw r10,0(r20)		#
     248:	a2800017 	ldw	r10,0(r20)
			andi r10,r10,0b0011 #
     24c:	528000cc 	andi	r10,r10,3
			bne r10,r0,wait2	# WAIT FOR BUTTON RELEASE
     250:	503ffd1e 	bne	r10,zero,248 <wait2>

			ldw r10,0(r18)		# Step 1: Read the slider switches and setup your loop variables
     254:	92800017 	ldw	r10,0(r18)
			mov r9,r0			# S1: count variable
     258:	0013883a 	mov	r9,zero

0000025c <loop1>:

loop1:		nop					# Step 1: Start the loop and perform your loop count test
     25c:	0001883a 	nop


			rol r14,r14,r13		# rotate the step pattern 1 bit to left or right(step once)
     260:	735c183a 	rol	r14,r14,r13
			stw r14,0(r19)		# output the pattern to the Expansion port
     264:	9b800015 	stw	r14,0(r19)
     268:	044000f4 	movhi	r17,3

			movia r17,200000	#	<- Increase the value to slow down the motor...
     26c:	8c435004 	addi	r17,r17,3392
			mov  r16,r0			# These instructions form a small time delay loop, since
     270:	0021883a 	mov	r16,zero

00000274 <time>:
time:		addi r16,r16,1		# the motor cannot spin nearly as fast as the CPU can run
     274:	84000044 	addi	r16,r16,1
			blt	r16,r17,time	#
     278:	847ffe16 	blt	r16,r17,274 <time>
     27c:	05c40034 	movhi	r23,4096

			.equ	RED_LEDS, 0x10000010 	# DEBUGGER LEDS
			movia r23, RED_LEDS				# DEBUGGER LEDS
     280:	bdc00404 	addi	r23,r23,16
			stw r13,0(r23)					# DEBUGGER LEDS
     284:	bb400015 	stw	r13,0(r23)

			addi r9,r9,1		# Step 1: Increment your loop variable and branch back to loop
     288:	4a400044 	addi	r9,r9,1
			blt r9,r10,loop1	#
     28c:	4abff316 	blt	r9,r10,25c <loop1>

			ldw	r11,0(r22)		# Step 2: Load the total step count from memory
     290:	b2c00017 	ldw	r11,0(r22)
			add r11,r11,r10		# Step 2: Then increment it by the number of steps
     294:	5a97883a 	add	r11,r11,r10
			stw r11,0(r22)		# Step 2: And save back into memory
     298:	b2c00015 	stw	r11,0(r22)

0000029c <end>:

end:
			br loop
     29c:	003fe106 	br	224 <loop>

000002a0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
     2a0:	defffe04 	addi	sp,sp,-8
     2a4:	dfc00115 	stw	ra,4(sp)
     2a8:	df000015 	stw	fp,0(sp)
     2ac:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
     2b0:	01000034 	movhi	r4,0
     2b4:	21122204 	addi	r4,r4,18568
     2b8:	01400034 	movhi	r5,0
     2bc:	294c3104 	addi	r5,r5,12484
     2c0:	01800034 	movhi	r6,0
     2c4:	31922204 	addi	r6,r6,18568
     2c8:	00003200 	call	320 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
     2cc:	01000034 	movhi	r4,0
     2d0:	21000804 	addi	r4,r4,32
     2d4:	01400034 	movhi	r5,0
     2d8:	29400804 	addi	r5,r5,32
     2dc:	01800034 	movhi	r6,0
     2e0:	31806d04 	addi	r6,r6,436
     2e4:	00003200 	call	320 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
     2e8:	01000034 	movhi	r4,0
     2ec:	210c1b04 	addi	r4,r4,12396
     2f0:	01400034 	movhi	r5,0
     2f4:	294c1b04 	addi	r5,r5,12396
     2f8:	01800034 	movhi	r6,0
     2fc:	318c3104 	addi	r6,r6,12484
     300:	00003200 	call	320 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
     304:	0001d0c0 	call	1d0c <alt_dcache_flush_all>
  alt_icache_flush_all();
     308:	0001f300 	call	1f30 <alt_icache_flush_all>
}
     30c:	e037883a 	mov	sp,fp
     310:	dfc00117 	ldw	ra,4(sp)
     314:	df000017 	ldw	fp,0(sp)
     318:	dec00204 	addi	sp,sp,8
     31c:	f800283a 	ret

00000320 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
     320:	defffc04 	addi	sp,sp,-16
     324:	df000315 	stw	fp,12(sp)
     328:	df000304 	addi	fp,sp,12
     32c:	e13ffd15 	stw	r4,-12(fp)
     330:	e17ffe15 	stw	r5,-8(fp)
     334:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
     338:	e0fffe17 	ldw	r3,-8(fp)
     33c:	e0bffd17 	ldw	r2,-12(fp)
     340:	18800e26 	beq	r3,r2,37c <alt_load_section+0x5c>
  {
    while( to != end )
     344:	00000a06 	br	370 <alt_load_section+0x50>
    {
      *to++ = *from++;
     348:	e0bffd17 	ldw	r2,-12(fp)
     34c:	10c00017 	ldw	r3,0(r2)
     350:	e0bffe17 	ldw	r2,-8(fp)
     354:	10c00015 	stw	r3,0(r2)
     358:	e0bffe17 	ldw	r2,-8(fp)
     35c:	10800104 	addi	r2,r2,4
     360:	e0bffe15 	stw	r2,-8(fp)
     364:	e0bffd17 	ldw	r2,-12(fp)
     368:	10800104 	addi	r2,r2,4
     36c:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
     370:	e0fffe17 	ldw	r3,-8(fp)
     374:	e0bfff17 	ldw	r2,-4(fp)
     378:	18bff31e 	bne	r3,r2,348 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
     37c:	e037883a 	mov	sp,fp
     380:	df000017 	ldw	fp,0(sp)
     384:	dec00104 	addi	sp,sp,4
     388:	f800283a 	ret

0000038c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
     38c:	defffd04 	addi	sp,sp,-12
     390:	dfc00215 	stw	ra,8(sp)
     394:	df000115 	stw	fp,4(sp)
     398:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
     39c:	0009883a 	mov	r4,zero
     3a0:	00003f80 	call	3f8 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
     3a4:	000042c0 	call	42c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
     3a8:	01000034 	movhi	r4,0
     3ac:	210c1b04 	addi	r4,r4,12396
     3b0:	01400034 	movhi	r5,0
     3b4:	294c1b04 	addi	r5,r5,12396
     3b8:	01800034 	movhi	r6,0
     3bc:	318c1b04 	addi	r6,r6,12396
     3c0:	00022f00 	call	22f0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
     3c4:	0001e680 	call	1e68 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
     3c8:	01000034 	movhi	r4,0
     3cc:	2107b304 	addi	r4,r4,7884
     3d0:	0002b4c0 	call	2b4c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
     3d4:	d125fc17 	ldw	r4,-26640(gp)
     3d8:	d165fd17 	ldw	r5,-26636(gp)
     3dc:	d1a5fe17 	ldw	r6,-26632(gp)
     3e0:	00001f00 	call	1f0 <main>
     3e4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
     3e8:	01000044 	movi	r4,1
     3ec:	0001bb00 	call	1bb0 <close>
  exit (result);
     3f0:	e13fff17 	ldw	r4,-4(fp)
     3f4:	0002b600 	call	2b60 <exit>

000003f8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
     3f8:	defffd04 	addi	sp,sp,-12
     3fc:	dfc00215 	stw	ra,8(sp)
     400:	df000115 	stw	fp,4(sp)
     404:	df000104 	addi	fp,sp,4
     408:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
     40c:	00028300 	call	2830 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
     410:	00800044 	movi	r2,1
     414:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
     418:	e037883a 	mov	sp,fp
     41c:	dfc00117 	ldw	ra,4(sp)
     420:	df000017 	ldw	fp,0(sp)
     424:	dec00204 	addi	sp,sp,8
     428:	f800283a 	ret

0000042c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
     42c:	defffe04 	addi	sp,sp,-8
     430:	dfc00115 	stw	ra,4(sp)
     434:	df000015 	stw	fp,0(sp)
     438:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER0, timer0);
     43c:	01040034 	movhi	r4,4096
     440:	21002004 	addi	r4,r4,128
     444:	000b883a 	mov	r5,zero
     448:	01800044 	movi	r6,1
     44c:	01c00044 	movi	r7,1
     450:	000101c0 	call	101c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER1, timer1);
    ALTERA_AVALON_TIMER_INIT ( TIMER2, timer2);
    ALTERA_AVALON_TIMER_INIT ( TIMER3, timer3);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
     454:	01000034 	movhi	r4,0
     458:	210c3d04 	addi	r4,r4,12532
     45c:	000b883a 	mov	r5,zero
     460:	000d883a 	mov	r6,zero
     464:	00006480 	call	648 <altera_avalon_jtag_uart_init>
     468:	01000034 	movhi	r4,0
     46c:	210c3304 	addi	r4,r4,12492
     470:	00004c80 	call	4c8 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_PORT0, SPI_port0);
    ALTERA_AVALON_SPI_INIT ( SPI_PORT1, SPI_port1);
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    ALTERA_AVALON_UART_INIT ( SERIAL_PORT0, Serial_port0);
     474:	01000034 	movhi	r4,0
     478:	21105504 	addi	r4,r4,16724
     47c:	000b883a 	mov	r5,zero
     480:	01800144 	movi	r6,5
     484:	00011a40 	call	11a4 <altera_avalon_uart_init>
     488:	01000034 	movhi	r4,0
     48c:	21104b04 	addi	r4,r4,16684
     490:	00004c80 	call	4c8 <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( SERIAL_PORT1, Serial_port1);
     494:	01000034 	movhi	r4,0
     498:	21108604 	addi	r4,r4,16920
     49c:	000b883a 	mov	r5,zero
     4a0:	01800184 	movi	r6,6
     4a4:	00011a40 	call	11a4 <altera_avalon_uart_init>
     4a8:	01000034 	movhi	r4,0
     4ac:	21107c04 	addi	r4,r4,16880
     4b0:	00004c80 	call	4c8 <alt_dev_reg>
}
     4b4:	e037883a 	mov	sp,fp
     4b8:	dfc00117 	ldw	ra,4(sp)
     4bc:	df000017 	ldw	fp,0(sp)
     4c0:	dec00204 	addi	sp,sp,8
     4c4:	f800283a 	ret

000004c8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
     4c8:	defffd04 	addi	sp,sp,-12
     4cc:	dfc00215 	stw	ra,8(sp)
     4d0:	df000115 	stw	fp,4(sp)
     4d4:	df000104 	addi	fp,sp,4
     4d8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
     4dc:	e13fff17 	ldw	r4,-4(fp)
     4e0:	01400034 	movhi	r5,0
     4e4:	29521904 	addi	r5,r5,18532
     4e8:	0001d540 	call	1d54 <alt_dev_llist_insert>
}
     4ec:	e037883a 	mov	sp,fp
     4f0:	dfc00117 	ldw	ra,4(sp)
     4f4:	df000017 	ldw	fp,0(sp)
     4f8:	dec00204 	addi	sp,sp,8
     4fc:	f800283a 	ret

00000500 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
     500:	defffa04 	addi	sp,sp,-24
     504:	dfc00515 	stw	ra,20(sp)
     508:	df000415 	stw	fp,16(sp)
     50c:	df000404 	addi	fp,sp,16
     510:	e13ffd15 	stw	r4,-12(fp)
     514:	e17ffe15 	stw	r5,-8(fp)
     518:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
     51c:	e0bffd17 	ldw	r2,-12(fp)
     520:	10800017 	ldw	r2,0(r2)
     524:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
     528:	e0bffc17 	ldw	r2,-16(fp)
     52c:	11000a04 	addi	r4,r2,40
     530:	e0bffd17 	ldw	r2,-12(fp)
     534:	11c00217 	ldw	r7,8(r2)
     538:	e17ffe17 	ldw	r5,-8(fp)
     53c:	e1bfff17 	ldw	r6,-4(fp)
     540:	0000b480 	call	b48 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
     544:	e037883a 	mov	sp,fp
     548:	dfc00117 	ldw	ra,4(sp)
     54c:	df000017 	ldw	fp,0(sp)
     550:	dec00204 	addi	sp,sp,8
     554:	f800283a 	ret

00000558 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
     558:	defffa04 	addi	sp,sp,-24
     55c:	dfc00515 	stw	ra,20(sp)
     560:	df000415 	stw	fp,16(sp)
     564:	df000404 	addi	fp,sp,16
     568:	e13ffd15 	stw	r4,-12(fp)
     56c:	e17ffe15 	stw	r5,-8(fp)
     570:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
     574:	e0bffd17 	ldw	r2,-12(fp)
     578:	10800017 	ldw	r2,0(r2)
     57c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
     580:	e0bffc17 	ldw	r2,-16(fp)
     584:	11000a04 	addi	r4,r2,40
     588:	e0bffd17 	ldw	r2,-12(fp)
     58c:	11c00217 	ldw	r7,8(r2)
     590:	e17ffe17 	ldw	r5,-8(fp)
     594:	e1bfff17 	ldw	r6,-4(fp)
     598:	0000d6c0 	call	d6c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
     59c:	e037883a 	mov	sp,fp
     5a0:	dfc00117 	ldw	ra,4(sp)
     5a4:	df000017 	ldw	fp,0(sp)
     5a8:	dec00204 	addi	sp,sp,8
     5ac:	f800283a 	ret

000005b0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
     5b0:	defffc04 	addi	sp,sp,-16
     5b4:	dfc00315 	stw	ra,12(sp)
     5b8:	df000215 	stw	fp,8(sp)
     5bc:	df000204 	addi	fp,sp,8
     5c0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
     5c4:	e0bfff17 	ldw	r2,-4(fp)
     5c8:	10800017 	ldw	r2,0(r2)
     5cc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
     5d0:	e0bffe17 	ldw	r2,-8(fp)
     5d4:	11000a04 	addi	r4,r2,40
     5d8:	e0bfff17 	ldw	r2,-4(fp)
     5dc:	11400217 	ldw	r5,8(r2)
     5e0:	00009e00 	call	9e0 <altera_avalon_jtag_uart_close>
}
     5e4:	e037883a 	mov	sp,fp
     5e8:	dfc00117 	ldw	ra,4(sp)
     5ec:	df000017 	ldw	fp,0(sp)
     5f0:	dec00204 	addi	sp,sp,8
     5f4:	f800283a 	ret

000005f8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
     5f8:	defffa04 	addi	sp,sp,-24
     5fc:	dfc00515 	stw	ra,20(sp)
     600:	df000415 	stw	fp,16(sp)
     604:	df000404 	addi	fp,sp,16
     608:	e13ffd15 	stw	r4,-12(fp)
     60c:	e17ffe15 	stw	r5,-8(fp)
     610:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
     614:	e0bffd17 	ldw	r2,-12(fp)
     618:	10800017 	ldw	r2,0(r2)
     61c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
     620:	e0bffc17 	ldw	r2,-16(fp)
     624:	11000a04 	addi	r4,r2,40
     628:	e17ffe17 	ldw	r5,-8(fp)
     62c:	e1bfff17 	ldw	r6,-4(fp)
     630:	0000a540 	call	a54 <altera_avalon_jtag_uart_ioctl>
}
     634:	e037883a 	mov	sp,fp
     638:	dfc00117 	ldw	ra,4(sp)
     63c:	df000017 	ldw	fp,0(sp)
     640:	dec00204 	addi	sp,sp,8
     644:	f800283a 	ret

00000648 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
     648:	defffa04 	addi	sp,sp,-24
     64c:	dfc00515 	stw	ra,20(sp)
     650:	df000415 	stw	fp,16(sp)
     654:	df000404 	addi	fp,sp,16
     658:	e13ffd15 	stw	r4,-12(fp)
     65c:	e17ffe15 	stw	r5,-8(fp)
     660:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
     664:	e0fffd17 	ldw	r3,-12(fp)
     668:	00800044 	movi	r2,1
     66c:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
     670:	e0bffd17 	ldw	r2,-12(fp)
     674:	10800017 	ldw	r2,0(r2)
     678:	11000104 	addi	r4,r2,4
     67c:	e0bffd17 	ldw	r2,-12(fp)
     680:	10800817 	ldw	r2,32(r2)
     684:	1007883a 	mov	r3,r2
     688:	2005883a 	mov	r2,r4
     68c:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
     690:	e13ffe17 	ldw	r4,-8(fp)
     694:	e17fff17 	ldw	r5,-4(fp)
     698:	d8000015 	stw	zero,0(sp)
     69c:	01800034 	movhi	r6,0
     6a0:	3181c204 	addi	r6,r6,1800
     6a4:	e1fffd17 	ldw	r7,-12(fp)
     6a8:	0001f600 	call	1f60 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
     6ac:	e0bffd17 	ldw	r2,-12(fp)
     6b0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
     6b4:	e0bffd17 	ldw	r2,-12(fp)
     6b8:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
     6bc:	00800034 	movhi	r2,0
     6c0:	10981704 	addi	r2,r2,24668
     6c4:	10800017 	ldw	r2,0(r2)
     6c8:	100b883a 	mov	r5,r2
     6cc:	01800034 	movhi	r6,0
     6d0:	31824c04 	addi	r6,r6,2352
     6d4:	e1fffd17 	ldw	r7,-12(fp)
     6d8:	0001a5c0 	call	1a5c <alt_alarm_start>
     6dc:	1004403a 	cmpge	r2,r2,zero
     6e0:	1000041e 	bne	r2,zero,6f4 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
     6e4:	e0fffd17 	ldw	r3,-12(fp)
     6e8:	00a00034 	movhi	r2,32768
     6ec:	10bfffc4 	addi	r2,r2,-1
     6f0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
     6f4:	e037883a 	mov	sp,fp
     6f8:	dfc00117 	ldw	ra,4(sp)
     6fc:	df000017 	ldw	fp,0(sp)
     700:	dec00204 	addi	sp,sp,8
     704:	f800283a 	ret

00000708 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
     708:	defff804 	addi	sp,sp,-32
     70c:	df000715 	stw	fp,28(sp)
     710:	df000704 	addi	fp,sp,28
     714:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
     718:	e0bfff17 	ldw	r2,-4(fp)
     71c:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
     720:	e0bffe17 	ldw	r2,-8(fp)
     724:	10800017 	ldw	r2,0(r2)
     728:	e0bffd15 	stw	r2,-12(fp)
     72c:	00000006 	br	730 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
     730:	e0bffd17 	ldw	r2,-12(fp)
     734:	10800104 	addi	r2,r2,4
     738:	10800037 	ldwio	r2,0(r2)
     73c:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
     740:	e0bffc17 	ldw	r2,-16(fp)
     744:	1080c00c 	andi	r2,r2,768
     748:	1005003a 	cmpeq	r2,r2,zero
     74c:	1000741e 	bne	r2,zero,920 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
     750:	e0bffc17 	ldw	r2,-16(fp)
     754:	1080400c 	andi	r2,r2,256
     758:	1005003a 	cmpeq	r2,r2,zero
     75c:	1000351e 	bne	r2,zero,834 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
     760:	00800074 	movhi	r2,1
     764:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     768:	e0bffe17 	ldw	r2,-8(fp)
     76c:	10800a17 	ldw	r2,40(r2)
     770:	10800044 	addi	r2,r2,1
     774:	1081ffcc 	andi	r2,r2,2047
     778:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
     77c:	e0bffe17 	ldw	r2,-8(fp)
     780:	10c00b17 	ldw	r3,44(r2)
     784:	e0bffa17 	ldw	r2,-24(fp)
     788:	18801626 	beq	r3,r2,7e4 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
     78c:	e0bffd17 	ldw	r2,-12(fp)
     790:	10800037 	ldwio	r2,0(r2)
     794:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
     798:	e0bffb17 	ldw	r2,-20(fp)
     79c:	10a0000c 	andi	r2,r2,32768
     7a0:	1005003a 	cmpeq	r2,r2,zero
     7a4:	10000f1e 	bne	r2,zero,7e4 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
     7a8:	e0bffe17 	ldw	r2,-8(fp)
     7ac:	10c00a17 	ldw	r3,40(r2)
     7b0:	e0bffb17 	ldw	r2,-20(fp)
     7b4:	1009883a 	mov	r4,r2
     7b8:	e0bffe17 	ldw	r2,-8(fp)
     7bc:	1885883a 	add	r2,r3,r2
     7c0:	10800e04 	addi	r2,r2,56
     7c4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     7c8:	e0bffe17 	ldw	r2,-8(fp)
     7cc:	10800a17 	ldw	r2,40(r2)
     7d0:	10800044 	addi	r2,r2,1
     7d4:	10c1ffcc 	andi	r3,r2,2047
     7d8:	e0bffe17 	ldw	r2,-8(fp)
     7dc:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
     7e0:	003fe106 	br	768 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
     7e4:	e0bffb17 	ldw	r2,-20(fp)
     7e8:	10bfffec 	andhi	r2,r2,65535
     7ec:	1005003a 	cmpeq	r2,r2,zero
     7f0:	1000101e 	bne	r2,zero,834 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
     7f4:	e0bffe17 	ldw	r2,-8(fp)
     7f8:	10c00817 	ldw	r3,32(r2)
     7fc:	00bfff84 	movi	r2,-2
     800:	1886703a 	and	r3,r3,r2
     804:	e0bffe17 	ldw	r2,-8(fp)
     808:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
     80c:	e0bffd17 	ldw	r2,-12(fp)
     810:	11000104 	addi	r4,r2,4
     814:	e0bffe17 	ldw	r2,-8(fp)
     818:	10800817 	ldw	r2,32(r2)
     81c:	1007883a 	mov	r3,r2
     820:	2005883a 	mov	r2,r4
     824:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
     828:	e0bffd17 	ldw	r2,-12(fp)
     82c:	10800104 	addi	r2,r2,4
     830:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
     834:	e0bffc17 	ldw	r2,-16(fp)
     838:	1080800c 	andi	r2,r2,512
     83c:	1005003a 	cmpeq	r2,r2,zero
     840:	103fbb1e 	bne	r2,zero,730 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
     844:	e0bffc17 	ldw	r2,-16(fp)
     848:	10bfffec 	andhi	r2,r2,65535
     84c:	1004d43a 	srli	r2,r2,16
     850:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
     854:	00001506 	br	8ac <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
     858:	e13ffd17 	ldw	r4,-12(fp)
     85c:	e0bffe17 	ldw	r2,-8(fp)
     860:	10c00d17 	ldw	r3,52(r2)
     864:	e0bffe17 	ldw	r2,-8(fp)
     868:	1885883a 	add	r2,r3,r2
     86c:	10820e04 	addi	r2,r2,2104
     870:	10800003 	ldbu	r2,0(r2)
     874:	10c03fcc 	andi	r3,r2,255
     878:	18c0201c 	xori	r3,r3,128
     87c:	18ffe004 	addi	r3,r3,-128
     880:	2005883a 	mov	r2,r4
     884:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     888:	e0bffe17 	ldw	r2,-8(fp)
     88c:	10800d17 	ldw	r2,52(r2)
     890:	10800044 	addi	r2,r2,1
     894:	10c1ffcc 	andi	r3,r2,2047
     898:	e0bffe17 	ldw	r2,-8(fp)
     89c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
     8a0:	e0bff917 	ldw	r2,-28(fp)
     8a4:	10bfffc4 	addi	r2,r2,-1
     8a8:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
     8ac:	e0bff917 	ldw	r2,-28(fp)
     8b0:	1005003a 	cmpeq	r2,r2,zero
     8b4:	1000051e 	bne	r2,zero,8cc <altera_avalon_jtag_uart_irq+0x1c4>
     8b8:	e0bffe17 	ldw	r2,-8(fp)
     8bc:	10c00d17 	ldw	r3,52(r2)
     8c0:	e0bffe17 	ldw	r2,-8(fp)
     8c4:	10800c17 	ldw	r2,48(r2)
     8c8:	18bfe31e 	bne	r3,r2,858 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
     8cc:	e0bff917 	ldw	r2,-28(fp)
     8d0:	1005003a 	cmpeq	r2,r2,zero
     8d4:	103f961e 	bne	r2,zero,730 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
     8d8:	e0bffe17 	ldw	r2,-8(fp)
     8dc:	10c00817 	ldw	r3,32(r2)
     8e0:	00bfff44 	movi	r2,-3
     8e4:	1886703a 	and	r3,r3,r2
     8e8:	e0bffe17 	ldw	r2,-8(fp)
     8ec:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
     8f0:	e0bffe17 	ldw	r2,-8(fp)
     8f4:	10800017 	ldw	r2,0(r2)
     8f8:	11000104 	addi	r4,r2,4
     8fc:	e0bffe17 	ldw	r2,-8(fp)
     900:	10800817 	ldw	r2,32(r2)
     904:	1007883a 	mov	r3,r2
     908:	2005883a 	mov	r2,r4
     90c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
     910:	e0bffd17 	ldw	r2,-12(fp)
     914:	10800104 	addi	r2,r2,4
     918:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
     91c:	003f8406 	br	730 <altera_avalon_jtag_uart_irq+0x28>
}
     920:	e037883a 	mov	sp,fp
     924:	df000017 	ldw	fp,0(sp)
     928:	dec00104 	addi	sp,sp,4
     92c:	f800283a 	ret

00000930 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
     930:	defffc04 	addi	sp,sp,-16
     934:	df000315 	stw	fp,12(sp)
     938:	df000304 	addi	fp,sp,12
     93c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
     940:	e0bfff17 	ldw	r2,-4(fp)
     944:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
     948:	e0bffe17 	ldw	r2,-8(fp)
     94c:	10800017 	ldw	r2,0(r2)
     950:	10800104 	addi	r2,r2,4
     954:	10800037 	ldwio	r2,0(r2)
     958:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
     95c:	e0bffd17 	ldw	r2,-12(fp)
     960:	1081000c 	andi	r2,r2,1024
     964:	1005003a 	cmpeq	r2,r2,zero
     968:	10000c1e 	bne	r2,zero,99c <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
     96c:	e0bffe17 	ldw	r2,-8(fp)
     970:	10800017 	ldw	r2,0(r2)
     974:	11000104 	addi	r4,r2,4
     978:	e0bffe17 	ldw	r2,-8(fp)
     97c:	10800817 	ldw	r2,32(r2)
     980:	10810014 	ori	r2,r2,1024
     984:	1007883a 	mov	r3,r2
     988:	2005883a 	mov	r2,r4
     98c:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
     990:	e0bffe17 	ldw	r2,-8(fp)
     994:	10000915 	stw	zero,36(r2)
     998:	00000a06 	br	9c4 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
     99c:	e0bffe17 	ldw	r2,-8(fp)
     9a0:	10c00917 	ldw	r3,36(r2)
     9a4:	00a00034 	movhi	r2,32768
     9a8:	10bfff04 	addi	r2,r2,-4
     9ac:	10c00536 	bltu	r2,r3,9c4 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
     9b0:	e0bffe17 	ldw	r2,-8(fp)
     9b4:	10800917 	ldw	r2,36(r2)
     9b8:	10c00044 	addi	r3,r2,1
     9bc:	e0bffe17 	ldw	r2,-8(fp)
     9c0:	10c00915 	stw	r3,36(r2)
     9c4:	00800034 	movhi	r2,0
     9c8:	10981704 	addi	r2,r2,24668
     9cc:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
     9d0:	e037883a 	mov	sp,fp
     9d4:	df000017 	ldw	fp,0(sp)
     9d8:	dec00104 	addi	sp,sp,4
     9dc:	f800283a 	ret

000009e0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
     9e0:	defffc04 	addi	sp,sp,-16
     9e4:	df000315 	stw	fp,12(sp)
     9e8:	df000304 	addi	fp,sp,12
     9ec:	e13ffd15 	stw	r4,-12(fp)
     9f0:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
     9f4:	00000706 	br	a14 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
     9f8:	e0bffe17 	ldw	r2,-8(fp)
     9fc:	1090000c 	andi	r2,r2,16384
     a00:	1005003a 	cmpeq	r2,r2,zero
     a04:	1000031e 	bne	r2,zero,a14 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
     a08:	00bffd44 	movi	r2,-11
     a0c:	e0bfff15 	stw	r2,-4(fp)
     a10:	00000b06 	br	a40 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
     a14:	e0bffd17 	ldw	r2,-12(fp)
     a18:	10c00d17 	ldw	r3,52(r2)
     a1c:	e0bffd17 	ldw	r2,-12(fp)
     a20:	10800c17 	ldw	r2,48(r2)
     a24:	18800526 	beq	r3,r2,a3c <altera_avalon_jtag_uart_close+0x5c>
     a28:	e0bffd17 	ldw	r2,-12(fp)
     a2c:	10c00917 	ldw	r3,36(r2)
     a30:	e0bffd17 	ldw	r2,-12(fp)
     a34:	10800117 	ldw	r2,4(r2)
     a38:	18bfef36 	bltu	r3,r2,9f8 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
     a3c:	e03fff15 	stw	zero,-4(fp)
     a40:	e0bfff17 	ldw	r2,-4(fp)
}
     a44:	e037883a 	mov	sp,fp
     a48:	df000017 	ldw	fp,0(sp)
     a4c:	dec00104 	addi	sp,sp,4
     a50:	f800283a 	ret

00000a54 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
     a54:	defff804 	addi	sp,sp,-32
     a58:	df000715 	stw	fp,28(sp)
     a5c:	df000704 	addi	fp,sp,28
     a60:	e13ffb15 	stw	r4,-20(fp)
     a64:	e17ffc15 	stw	r5,-16(fp)
     a68:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
     a6c:	00bff9c4 	movi	r2,-25
     a70:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
     a74:	e0bffc17 	ldw	r2,-16(fp)
     a78:	e0bfff15 	stw	r2,-4(fp)
     a7c:	e0ffff17 	ldw	r3,-4(fp)
     a80:	189a8060 	cmpeqi	r2,r3,27137
     a84:	1000041e 	bne	r2,zero,a98 <altera_avalon_jtag_uart_ioctl+0x44>
     a88:	e0ffff17 	ldw	r3,-4(fp)
     a8c:	189a80a0 	cmpeqi	r2,r3,27138
     a90:	10001b1e 	bne	r2,zero,b00 <altera_avalon_jtag_uart_ioctl+0xac>
     a94:	00002706 	br	b34 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
     a98:	e0bffb17 	ldw	r2,-20(fp)
     a9c:	10c00117 	ldw	r3,4(r2)
     aa0:	00a00034 	movhi	r2,32768
     aa4:	10bfffc4 	addi	r2,r2,-1
     aa8:	18802226 	beq	r3,r2,b34 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
     aac:	e0bffd17 	ldw	r2,-12(fp)
     ab0:	10800017 	ldw	r2,0(r2)
     ab4:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
     ab8:	e0bff917 	ldw	r2,-28(fp)
     abc:	10800090 	cmplti	r2,r2,2
     ac0:	1000071e 	bne	r2,zero,ae0 <altera_avalon_jtag_uart_ioctl+0x8c>
     ac4:	e0fff917 	ldw	r3,-28(fp)
     ac8:	00a00034 	movhi	r2,32768
     acc:	10bfffc4 	addi	r2,r2,-1
     ad0:	18800326 	beq	r3,r2,ae0 <altera_avalon_jtag_uart_ioctl+0x8c>
     ad4:	e0bff917 	ldw	r2,-28(fp)
     ad8:	e0bffe15 	stw	r2,-8(fp)
     adc:	00000306 	br	aec <altera_avalon_jtag_uart_ioctl+0x98>
     ae0:	00e00034 	movhi	r3,32768
     ae4:	18ffff84 	addi	r3,r3,-2
     ae8:	e0fffe15 	stw	r3,-8(fp)
     aec:	e0bffb17 	ldw	r2,-20(fp)
     af0:	e0fffe17 	ldw	r3,-8(fp)
     af4:	10c00115 	stw	r3,4(r2)
      rc = 0;
     af8:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
     afc:	00000d06 	br	b34 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
     b00:	e0bffb17 	ldw	r2,-20(fp)
     b04:	10c00117 	ldw	r3,4(r2)
     b08:	00a00034 	movhi	r2,32768
     b0c:	10bfffc4 	addi	r2,r2,-1
     b10:	18800826 	beq	r3,r2,b34 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
     b14:	e13ffd17 	ldw	r4,-12(fp)
     b18:	e0bffb17 	ldw	r2,-20(fp)
     b1c:	10c00917 	ldw	r3,36(r2)
     b20:	e0bffb17 	ldw	r2,-20(fp)
     b24:	10800117 	ldw	r2,4(r2)
     b28:	1885803a 	cmpltu	r2,r3,r2
     b2c:	20800015 	stw	r2,0(r4)
      rc = 0;
     b30:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
     b34:	e0bffa17 	ldw	r2,-24(fp)
}
     b38:	e037883a 	mov	sp,fp
     b3c:	df000017 	ldw	fp,0(sp)
     b40:	dec00104 	addi	sp,sp,4
     b44:	f800283a 	ret

00000b48 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
     b48:	defff204 	addi	sp,sp,-56
     b4c:	dfc00d15 	stw	ra,52(sp)
     b50:	df000c15 	stw	fp,48(sp)
     b54:	df000c04 	addi	fp,sp,48
     b58:	e13ffb15 	stw	r4,-20(fp)
     b5c:	e17ffc15 	stw	r5,-16(fp)
     b60:	e1bffd15 	stw	r6,-12(fp)
     b64:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
     b68:	e0bffc17 	ldw	r2,-16(fp)
     b6c:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
     b70:	00004806 	br	c94 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
     b74:	e0bffb17 	ldw	r2,-20(fp)
     b78:	10800a17 	ldw	r2,40(r2)
     b7c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
     b80:	e0bffb17 	ldw	r2,-20(fp)
     b84:	10800b17 	ldw	r2,44(r2)
     b88:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
     b8c:	e0fff717 	ldw	r3,-36(fp)
     b90:	e0bff617 	ldw	r2,-40(fp)
     b94:	18800536 	bltu	r3,r2,bac <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
     b98:	e0bff717 	ldw	r2,-36(fp)
     b9c:	e0fff617 	ldw	r3,-40(fp)
     ba0:	10c5c83a 	sub	r2,r2,r3
     ba4:	e0bff815 	stw	r2,-32(fp)
     ba8:	00000406 	br	bbc <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
     bac:	00820004 	movi	r2,2048
     bb0:	e0fff617 	ldw	r3,-40(fp)
     bb4:	10c5c83a 	sub	r2,r2,r3
     bb8:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
     bbc:	e0bff817 	ldw	r2,-32(fp)
     bc0:	1005003a 	cmpeq	r2,r2,zero
     bc4:	10001f1e 	bne	r2,zero,c44 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
     bc8:	e0fffd17 	ldw	r3,-12(fp)
     bcc:	e0bff817 	ldw	r2,-32(fp)
     bd0:	1880022e 	bgeu	r3,r2,bdc <altera_avalon_jtag_uart_read+0x94>
        n = space;
     bd4:	e0bffd17 	ldw	r2,-12(fp)
     bd8:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
     bdc:	e0bffb17 	ldw	r2,-20(fp)
     be0:	10c00e04 	addi	r3,r2,56
     be4:	e0bff617 	ldw	r2,-40(fp)
     be8:	1887883a 	add	r3,r3,r2
     bec:	e0bffa17 	ldw	r2,-24(fp)
     bf0:	1009883a 	mov	r4,r2
     bf4:	180b883a 	mov	r5,r3
     bf8:	e1bff817 	ldw	r6,-32(fp)
     bfc:	0002c0c0 	call	2c0c <memcpy>
      ptr   += n;
     c00:	e0fff817 	ldw	r3,-32(fp)
     c04:	e0bffa17 	ldw	r2,-24(fp)
     c08:	10c5883a 	add	r2,r2,r3
     c0c:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
     c10:	e0fffd17 	ldw	r3,-12(fp)
     c14:	e0bff817 	ldw	r2,-32(fp)
     c18:	1885c83a 	sub	r2,r3,r2
     c1c:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     c20:	e0fff617 	ldw	r3,-40(fp)
     c24:	e0bff817 	ldw	r2,-32(fp)
     c28:	1885883a 	add	r2,r3,r2
     c2c:	10c1ffcc 	andi	r3,r2,2047
     c30:	e0bffb17 	ldw	r2,-20(fp)
     c34:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
     c38:	e0bffd17 	ldw	r2,-12(fp)
     c3c:	10800048 	cmpgei	r2,r2,1
     c40:	103fcc1e 	bne	r2,zero,b74 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
     c44:	e0fffa17 	ldw	r3,-24(fp)
     c48:	e0bffc17 	ldw	r2,-16(fp)
     c4c:	1880141e 	bne	r3,r2,ca0 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
     c50:	e0bffe17 	ldw	r2,-8(fp)
     c54:	1090000c 	andi	r2,r2,16384
     c58:	1004c03a 	cmpne	r2,r2,zero
     c5c:	1000101e 	bne	r2,zero,ca0 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
     c60:	e0bffb17 	ldw	r2,-20(fp)
     c64:	10c00a17 	ldw	r3,40(r2)
     c68:	e0bff717 	ldw	r2,-36(fp)
     c6c:	1880051e 	bne	r3,r2,c84 <altera_avalon_jtag_uart_read+0x13c>
     c70:	e0bffb17 	ldw	r2,-20(fp)
     c74:	10c00917 	ldw	r3,36(r2)
     c78:	e0bffb17 	ldw	r2,-20(fp)
     c7c:	10800117 	ldw	r2,4(r2)
     c80:	18bff736 	bltu	r3,r2,c60 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
     c84:	e0bffb17 	ldw	r2,-20(fp)
     c88:	10c00a17 	ldw	r3,40(r2)
     c8c:	e0bff717 	ldw	r2,-36(fp)
     c90:	18800326 	beq	r3,r2,ca0 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
     c94:	e0bffd17 	ldw	r2,-12(fp)
     c98:	10800048 	cmpgei	r2,r2,1
     c9c:	103fb51e 	bne	r2,zero,b74 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
     ca0:	e0fffa17 	ldw	r3,-24(fp)
     ca4:	e0bffc17 	ldw	r2,-16(fp)
     ca8:	18801926 	beq	r3,r2,d10 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     cac:	0005303a 	rdctl	r2,status
     cb0:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     cb4:	e0fff517 	ldw	r3,-44(fp)
     cb8:	00bfff84 	movi	r2,-2
     cbc:	1884703a 	and	r2,r3,r2
     cc0:	1001703a 	wrctl	status,r2
  
  return context;
     cc4:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
     cc8:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
     ccc:	e0bffb17 	ldw	r2,-20(fp)
     cd0:	10800817 	ldw	r2,32(r2)
     cd4:	10c00054 	ori	r3,r2,1
     cd8:	e0bffb17 	ldw	r2,-20(fp)
     cdc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
     ce0:	e0bffb17 	ldw	r2,-20(fp)
     ce4:	10800017 	ldw	r2,0(r2)
     ce8:	11000104 	addi	r4,r2,4
     cec:	e0bffb17 	ldw	r2,-20(fp)
     cf0:	10800817 	ldw	r2,32(r2)
     cf4:	1007883a 	mov	r3,r2
     cf8:	2005883a 	mov	r2,r4
     cfc:	10c00035 	stwio	r3,0(r2)
     d00:	e0bff917 	ldw	r2,-28(fp)
     d04:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
     d08:	e0bff417 	ldw	r2,-48(fp)
     d0c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
     d10:	e0fffa17 	ldw	r3,-24(fp)
     d14:	e0bffc17 	ldw	r2,-16(fp)
     d18:	18800526 	beq	r3,r2,d30 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
     d1c:	e0fffa17 	ldw	r3,-24(fp)
     d20:	e0bffc17 	ldw	r2,-16(fp)
     d24:	1887c83a 	sub	r3,r3,r2
     d28:	e0ffff15 	stw	r3,-4(fp)
     d2c:	00000906 	br	d54 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
     d30:	e0bffe17 	ldw	r2,-8(fp)
     d34:	1090000c 	andi	r2,r2,16384
     d38:	1005003a 	cmpeq	r2,r2,zero
     d3c:	1000031e 	bne	r2,zero,d4c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
     d40:	00bffd44 	movi	r2,-11
     d44:	e0bfff15 	stw	r2,-4(fp)
     d48:	00000206 	br	d54 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
     d4c:	00bffec4 	movi	r2,-5
     d50:	e0bfff15 	stw	r2,-4(fp)
     d54:	e0bfff17 	ldw	r2,-4(fp)
}
     d58:	e037883a 	mov	sp,fp
     d5c:	dfc00117 	ldw	ra,4(sp)
     d60:	df000017 	ldw	fp,0(sp)
     d64:	dec00204 	addi	sp,sp,8
     d68:	f800283a 	ret

00000d6c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
     d6c:	defff204 	addi	sp,sp,-56
     d70:	dfc00d15 	stw	ra,52(sp)
     d74:	df000c15 	stw	fp,48(sp)
     d78:	df000c04 	addi	fp,sp,48
     d7c:	e13ffb15 	stw	r4,-20(fp)
     d80:	e17ffc15 	stw	r5,-16(fp)
     d84:	e1bffd15 	stw	r6,-12(fp)
     d88:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
     d8c:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
     d90:	e0bffc17 	ldw	r2,-16(fp)
     d94:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
     d98:	00003a06 	br	e84 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
     d9c:	e0bffb17 	ldw	r2,-20(fp)
     da0:	10800c17 	ldw	r2,48(r2)
     da4:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
     da8:	e0bffb17 	ldw	r2,-20(fp)
     dac:	10800d17 	ldw	r2,52(r2)
     db0:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
     db4:	e0fffa17 	ldw	r3,-24(fp)
     db8:	e0bff917 	ldw	r2,-28(fp)
     dbc:	1880062e 	bgeu	r3,r2,dd8 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
     dc0:	e0fff917 	ldw	r3,-28(fp)
     dc4:	e0bffa17 	ldw	r2,-24(fp)
     dc8:	1885c83a 	sub	r2,r3,r2
     dcc:	10bfffc4 	addi	r2,r2,-1
     dd0:	e0bff815 	stw	r2,-32(fp)
     dd4:	00000c06 	br	e08 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
     dd8:	e0bff917 	ldw	r2,-28(fp)
     ddc:	1005003a 	cmpeq	r2,r2,zero
     de0:	1000051e 	bne	r2,zero,df8 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
     de4:	00820004 	movi	r2,2048
     de8:	e0fffa17 	ldw	r3,-24(fp)
     dec:	10c5c83a 	sub	r2,r2,r3
     df0:	e0bff815 	stw	r2,-32(fp)
     df4:	00000406 	br	e08 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
     df8:	0081ffc4 	movi	r2,2047
     dfc:	e0fffa17 	ldw	r3,-24(fp)
     e00:	10c5c83a 	sub	r2,r2,r3
     e04:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
     e08:	e0bff817 	ldw	r2,-32(fp)
     e0c:	1005003a 	cmpeq	r2,r2,zero
     e10:	10001f1e 	bne	r2,zero,e90 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
     e14:	e0fffd17 	ldw	r3,-12(fp)
     e18:	e0bff817 	ldw	r2,-32(fp)
     e1c:	1880022e 	bgeu	r3,r2,e28 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
     e20:	e0bffd17 	ldw	r2,-12(fp)
     e24:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
     e28:	e0bffb17 	ldw	r2,-20(fp)
     e2c:	10c20e04 	addi	r3,r2,2104
     e30:	e0bffa17 	ldw	r2,-24(fp)
     e34:	1885883a 	add	r2,r3,r2
     e38:	e0fffc17 	ldw	r3,-16(fp)
     e3c:	1009883a 	mov	r4,r2
     e40:	180b883a 	mov	r5,r3
     e44:	e1bff817 	ldw	r6,-32(fp)
     e48:	0002c0c0 	call	2c0c <memcpy>
      ptr   += n;
     e4c:	e0fff817 	ldw	r3,-32(fp)
     e50:	e0bffc17 	ldw	r2,-16(fp)
     e54:	10c5883a 	add	r2,r2,r3
     e58:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
     e5c:	e0fffd17 	ldw	r3,-12(fp)
     e60:	e0bff817 	ldw	r2,-32(fp)
     e64:	1885c83a 	sub	r2,r3,r2
     e68:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     e6c:	e0fffa17 	ldw	r3,-24(fp)
     e70:	e0bff817 	ldw	r2,-32(fp)
     e74:	1885883a 	add	r2,r3,r2
     e78:	10c1ffcc 	andi	r3,r2,2047
     e7c:	e0bffb17 	ldw	r2,-20(fp)
     e80:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
     e84:	e0bffd17 	ldw	r2,-12(fp)
     e88:	10800048 	cmpgei	r2,r2,1
     e8c:	103fc31e 	bne	r2,zero,d9c <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     e90:	0005303a 	rdctl	r2,status
     e94:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     e98:	e0fff517 	ldw	r3,-44(fp)
     e9c:	00bfff84 	movi	r2,-2
     ea0:	1884703a 	and	r2,r3,r2
     ea4:	1001703a 	wrctl	status,r2
  
  return context;
     ea8:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
     eac:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
     eb0:	e0bffb17 	ldw	r2,-20(fp)
     eb4:	10800817 	ldw	r2,32(r2)
     eb8:	10c00094 	ori	r3,r2,2
     ebc:	e0bffb17 	ldw	r2,-20(fp)
     ec0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
     ec4:	e0bffb17 	ldw	r2,-20(fp)
     ec8:	10800017 	ldw	r2,0(r2)
     ecc:	11000104 	addi	r4,r2,4
     ed0:	e0bffb17 	ldw	r2,-20(fp)
     ed4:	10800817 	ldw	r2,32(r2)
     ed8:	1007883a 	mov	r3,r2
     edc:	2005883a 	mov	r2,r4
     ee0:	10c00035 	stwio	r3,0(r2)
     ee4:	e0bff717 	ldw	r2,-36(fp)
     ee8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
     eec:	e0bff417 	ldw	r2,-48(fp)
     ef0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
     ef4:	e0bffd17 	ldw	r2,-12(fp)
     ef8:	10800050 	cmplti	r2,r2,1
     efc:	1000111e 	bne	r2,zero,f44 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
     f00:	e0bffe17 	ldw	r2,-8(fp)
     f04:	1090000c 	andi	r2,r2,16384
     f08:	1004c03a 	cmpne	r2,r2,zero
     f0c:	1000101e 	bne	r2,zero,f50 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
     f10:	e0bffb17 	ldw	r2,-20(fp)
     f14:	10c00d17 	ldw	r3,52(r2)
     f18:	e0bff917 	ldw	r2,-28(fp)
     f1c:	1880051e 	bne	r3,r2,f34 <altera_avalon_jtag_uart_write+0x1c8>
     f20:	e0bffb17 	ldw	r2,-20(fp)
     f24:	10c00917 	ldw	r3,36(r2)
     f28:	e0bffb17 	ldw	r2,-20(fp)
     f2c:	10800117 	ldw	r2,4(r2)
     f30:	18bff736 	bltu	r3,r2,f10 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
     f34:	e0bffb17 	ldw	r2,-20(fp)
     f38:	10c00d17 	ldw	r3,52(r2)
     f3c:	e0bff917 	ldw	r2,-28(fp)
     f40:	18800326 	beq	r3,r2,f50 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
     f44:	e0bffd17 	ldw	r2,-12(fp)
     f48:	10800048 	cmpgei	r2,r2,1
     f4c:	103fcd1e 	bne	r2,zero,e84 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
     f50:	e0fffc17 	ldw	r3,-16(fp)
     f54:	e0bff617 	ldw	r2,-40(fp)
     f58:	18800526 	beq	r3,r2,f70 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
     f5c:	e0fffc17 	ldw	r3,-16(fp)
     f60:	e0bff617 	ldw	r2,-40(fp)
     f64:	1887c83a 	sub	r3,r3,r2
     f68:	e0ffff15 	stw	r3,-4(fp)
     f6c:	00000906 	br	f94 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
     f70:	e0bffe17 	ldw	r2,-8(fp)
     f74:	1090000c 	andi	r2,r2,16384
     f78:	1005003a 	cmpeq	r2,r2,zero
     f7c:	1000031e 	bne	r2,zero,f8c <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
     f80:	00bffd44 	movi	r2,-11
     f84:	e0bfff15 	stw	r2,-4(fp)
     f88:	00000206 	br	f94 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
     f8c:	00bffec4 	movi	r2,-5
     f90:	e0bfff15 	stw	r2,-4(fp)
     f94:	e0bfff17 	ldw	r2,-4(fp)
}
     f98:	e037883a 	mov	sp,fp
     f9c:	dfc00117 	ldw	ra,4(sp)
     fa0:	df000017 	ldw	fp,0(sp)
     fa4:	dec00204 	addi	sp,sp,8
     fa8:	f800283a 	ret

00000fac <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
     fac:	defffa04 	addi	sp,sp,-24
     fb0:	dfc00515 	stw	ra,20(sp)
     fb4:	df000415 	stw	fp,16(sp)
     fb8:	df000404 	addi	fp,sp,16
     fbc:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
     fc0:	e0bfff17 	ldw	r2,-4(fp)
     fc4:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
     fc8:	e0bfff17 	ldw	r2,-4(fp)
     fcc:	10800104 	addi	r2,r2,4
     fd0:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     fd4:	0005303a 	rdctl	r2,status
     fd8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     fdc:	e0fffd17 	ldw	r3,-12(fp)
     fe0:	00bfff84 	movi	r2,-2
     fe4:	1884703a 	and	r2,r3,r2
     fe8:	1001703a 	wrctl	status,r2
  
  return context;
     fec:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
     ff0:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
     ff4:	00027240 	call	2724 <alt_tick>
     ff8:	e0bffe17 	ldw	r2,-8(fp)
     ffc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1000:	e0bffc17 	ldw	r2,-16(fp)
    1004:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    1008:	e037883a 	mov	sp,fp
    100c:	dfc00117 	ldw	ra,4(sp)
    1010:	df000017 	ldw	fp,0(sp)
    1014:	dec00204 	addi	sp,sp,8
    1018:	f800283a 	ret

0000101c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    101c:	defff804 	addi	sp,sp,-32
    1020:	dfc00715 	stw	ra,28(sp)
    1024:	df000615 	stw	fp,24(sp)
    1028:	df000604 	addi	fp,sp,24
    102c:	e13ffc15 	stw	r4,-16(fp)
    1030:	e17ffd15 	stw	r5,-12(fp)
    1034:	e1bffe15 	stw	r6,-8(fp)
    1038:	e1ffff15 	stw	r7,-4(fp)
    103c:	e0bfff17 	ldw	r2,-4(fp)
    1040:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    1044:	00800034 	movhi	r2,0
    1048:	10981704 	addi	r2,r2,24668
    104c:	10800017 	ldw	r2,0(r2)
    1050:	1004c03a 	cmpne	r2,r2,zero
    1054:	1000041e 	bne	r2,zero,1068 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
    1058:	00c00034 	movhi	r3,0
    105c:	18d81704 	addi	r3,r3,24668
    1060:	e0bffb17 	ldw	r2,-20(fp)
    1064:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    1068:	e0bffc17 	ldw	r2,-16(fp)
    106c:	10800104 	addi	r2,r2,4
    1070:	1007883a 	mov	r3,r2
    1074:	008001c4 	movi	r2,7
    1078:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    107c:	d8000015 	stw	zero,0(sp)
    1080:	e13ffd17 	ldw	r4,-12(fp)
    1084:	e17ffe17 	ldw	r5,-8(fp)
    1088:	01800034 	movhi	r6,0
    108c:	3183eb04 	addi	r6,r6,4012
    1090:	e1fffc17 	ldw	r7,-16(fp)
    1094:	0001f600 	call	1f60 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    1098:	e037883a 	mov	sp,fp
    109c:	dfc00117 	ldw	ra,4(sp)
    10a0:	df000017 	ldw	fp,0(sp)
    10a4:	dec00204 	addi	sp,sp,8
    10a8:	f800283a 	ret

000010ac <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    10ac:	defffa04 	addi	sp,sp,-24
    10b0:	dfc00515 	stw	ra,20(sp)
    10b4:	df000415 	stw	fp,16(sp)
    10b8:	df000404 	addi	fp,sp,16
    10bc:	e13ffd15 	stw	r4,-12(fp)
    10c0:	e17ffe15 	stw	r5,-8(fp)
    10c4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    10c8:	e0bffd17 	ldw	r2,-12(fp)
    10cc:	10800017 	ldw	r2,0(r2)
    10d0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
    10d4:	e0bffc17 	ldw	r2,-16(fp)
    10d8:	11000a04 	addi	r4,r2,40
    10dc:	e0bffd17 	ldw	r2,-12(fp)
    10e0:	11c00217 	ldw	r7,8(r2)
    10e4:	e17ffe17 	ldw	r5,-8(fp)
    10e8:	e1bfff17 	ldw	r6,-4(fp)
    10ec:	00015a40 	call	15a4 <altera_avalon_uart_read>
      fd->fd_flags);
}
    10f0:	e037883a 	mov	sp,fp
    10f4:	dfc00117 	ldw	ra,4(sp)
    10f8:	df000017 	ldw	fp,0(sp)
    10fc:	dec00204 	addi	sp,sp,8
    1100:	f800283a 	ret

00001104 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    1104:	defffa04 	addi	sp,sp,-24
    1108:	dfc00515 	stw	ra,20(sp)
    110c:	df000415 	stw	fp,16(sp)
    1110:	df000404 	addi	fp,sp,16
    1114:	e13ffd15 	stw	r4,-12(fp)
    1118:	e17ffe15 	stw	r5,-8(fp)
    111c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    1120:	e0bffd17 	ldw	r2,-12(fp)
    1124:	10800017 	ldw	r2,0(r2)
    1128:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
    112c:	e0bffc17 	ldw	r2,-16(fp)
    1130:	11000a04 	addi	r4,r2,40
    1134:	e0bffd17 	ldw	r2,-12(fp)
    1138:	11c00217 	ldw	r7,8(r2)
    113c:	e17ffe17 	ldw	r5,-8(fp)
    1140:	e1bfff17 	ldw	r6,-4(fp)
    1144:	00018340 	call	1834 <altera_avalon_uart_write>
      fd->fd_flags);
}
    1148:	e037883a 	mov	sp,fp
    114c:	dfc00117 	ldw	ra,4(sp)
    1150:	df000017 	ldw	fp,0(sp)
    1154:	dec00204 	addi	sp,sp,8
    1158:	f800283a 	ret

0000115c <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
    115c:	defffc04 	addi	sp,sp,-16
    1160:	dfc00315 	stw	ra,12(sp)
    1164:	df000215 	stw	fp,8(sp)
    1168:	df000204 	addi	fp,sp,8
    116c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    1170:	e0bfff17 	ldw	r2,-4(fp)
    1174:	10800017 	ldw	r2,0(r2)
    1178:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
    117c:	e0bffe17 	ldw	r2,-8(fp)
    1180:	11000a04 	addi	r4,r2,40
    1184:	e0bfff17 	ldw	r2,-4(fp)
    1188:	11400217 	ldw	r5,8(r2)
    118c:	00015440 	call	1544 <altera_avalon_uart_close>
}
    1190:	e037883a 	mov	sp,fp
    1194:	dfc00117 	ldw	ra,4(sp)
    1198:	df000017 	ldw	fp,0(sp)
    119c:	dec00204 	addi	sp,sp,8
    11a0:	f800283a 	ret

000011a4 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
    11a4:	defff704 	addi	sp,sp,-36
    11a8:	dfc00815 	stw	ra,32(sp)
    11ac:	df000715 	stw	fp,28(sp)
    11b0:	df000704 	addi	fp,sp,28
    11b4:	e13ffc15 	stw	r4,-16(fp)
    11b8:	e17ffd15 	stw	r5,-12(fp)
    11bc:	e1bffe15 	stw	r6,-8(fp)
  void* base = sp->base;
    11c0:	e0bffc17 	ldw	r2,-16(fp)
    11c4:	10800017 	ldw	r2,0(r2)
    11c8:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
    11cc:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
    11d0:	1004c03a 	cmpne	r2,r2,zero
    11d4:	1000061e 	bne	r2,zero,11f0 <altera_avalon_uart_init+0x4c>
    11d8:	0005883a 	mov	r2,zero
    11dc:	1004c03a 	cmpne	r2,r2,zero
    11e0:	1000031e 	bne	r2,zero,11f0 <altera_avalon_uart_init+0x4c>
    11e4:	0005883a 	mov	r2,zero
    11e8:	1005003a 	cmpeq	r2,r2,zero
    11ec:	1000031e 	bne	r2,zero,11fc <altera_avalon_uart_init+0x58>
    11f0:	00800044 	movi	r2,1
    11f4:	e0bfff15 	stw	r2,-4(fp)
    11f8:	00000106 	br	1200 <altera_avalon_uart_init+0x5c>
    11fc:	e03fff15 	stw	zero,-4(fp)
    1200:	e0bfff17 	ldw	r2,-4(fp)
    1204:	e0bffa15 	stw	r2,-24(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
    1208:	e0bffa17 	ldw	r2,-24(fp)
    120c:	1004c03a 	cmpne	r2,r2,zero
    1210:	1000111e 	bne	r2,zero,1258 <altera_avalon_uart_init+0xb4>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
    1214:	e0fffc17 	ldw	r3,-16(fp)
    1218:	00832004 	movi	r2,3200
    121c:	18800115 	stw	r2,4(r3)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
    1220:	e0bffb17 	ldw	r2,-20(fp)
    1224:	11000304 	addi	r4,r2,12
    1228:	e0bffc17 	ldw	r2,-16(fp)
    122c:	10800117 	ldw	r2,4(r2)
    1230:	1007883a 	mov	r3,r2
    1234:	2005883a 	mov	r2,r4
    1238:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
    123c:	d8000015 	stw	zero,0(sp)
    1240:	e13ffd17 	ldw	r4,-12(fp)
    1244:	e17ffe17 	ldw	r5,-8(fp)
    1248:	01800034 	movhi	r6,0
    124c:	31849b04 	addi	r6,r6,4716
    1250:	e1fffc17 	ldw	r7,-16(fp)
    1254:	0001f600 	call	1f60 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
    1258:	e037883a 	mov	sp,fp
    125c:	dfc00117 	ldw	ra,4(sp)
    1260:	df000017 	ldw	fp,0(sp)
    1264:	dec00204 	addi	sp,sp,8
    1268:	f800283a 	ret

0000126c <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
    126c:	defffa04 	addi	sp,sp,-24
    1270:	dfc00515 	stw	ra,20(sp)
    1274:	df000415 	stw	fp,16(sp)
    1278:	df000404 	addi	fp,sp,16
    127c:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
    1280:	e0bfff17 	ldw	r2,-4(fp)
    1284:	e0bffd15 	stw	r2,-12(fp)
  void* base               = sp->base;
    1288:	e0bffd17 	ldw	r2,-12(fp)
    128c:	10800017 	ldw	r2,0(r2)
    1290:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
    1294:	e0bffc17 	ldw	r2,-16(fp)
    1298:	10800204 	addi	r2,r2,8
    129c:	10800037 	ldwio	r2,0(r2)
    12a0:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
    12a4:	e0bffc17 	ldw	r2,-16(fp)
    12a8:	10800204 	addi	r2,r2,8
    12ac:	10000035 	stwio	zero,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
    12b0:	e0bffc17 	ldw	r2,-16(fp)
    12b4:	10800204 	addi	r2,r2,8
    12b8:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
    12bc:	e0bffe17 	ldw	r2,-8(fp)
    12c0:	1080200c 	andi	r2,r2,128
    12c4:	1005003a 	cmpeq	r2,r2,zero
    12c8:	1000031e 	bne	r2,zero,12d8 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
    12cc:	e13ffd17 	ldw	r4,-12(fp)
    12d0:	e17ffe17 	ldw	r5,-8(fp)
    12d4:	00013080 	call	1308 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
    12d8:	e0bffe17 	ldw	r2,-8(fp)
    12dc:	1081100c 	andi	r2,r2,1088
    12e0:	1005003a 	cmpeq	r2,r2,zero
    12e4:	1000031e 	bne	r2,zero,12f4 <altera_avalon_uart_irq+0x88>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
    12e8:	e13ffd17 	ldw	r4,-12(fp)
    12ec:	e17ffe17 	ldw	r5,-8(fp)
    12f0:	00013e80 	call	13e8 <altera_avalon_uart_txirq>
  }
  

}
    12f4:	e037883a 	mov	sp,fp
    12f8:	dfc00117 	ldw	ra,4(sp)
    12fc:	df000017 	ldw	fp,0(sp)
    1300:	dec00204 	addi	sp,sp,8
    1304:	f800283a 	ret

00001308 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
    1308:	defffc04 	addi	sp,sp,-16
    130c:	df000315 	stw	fp,12(sp)
    1310:	df000304 	addi	fp,sp,12
    1314:	e13ffe15 	stw	r4,-8(fp)
    1318:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
    131c:	e0bfff17 	ldw	r2,-4(fp)
    1320:	108000cc 	andi	r2,r2,3
    1324:	1004c03a 	cmpne	r2,r2,zero
    1328:	10002b1e 	bne	r2,zero,13d8 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
    132c:	e0bffe17 	ldw	r2,-8(fp)
    1330:	10800317 	ldw	r2,12(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
    1334:	e0bffe17 	ldw	r2,-8(fp)
    1338:	10800317 	ldw	r2,12(r2)
    133c:	10800044 	addi	r2,r2,1
    1340:	10800fcc 	andi	r2,r2,63
    1344:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
    1348:	e0bffe17 	ldw	r2,-8(fp)
    134c:	11000317 	ldw	r4,12(r2)
    1350:	e0bffe17 	ldw	r2,-8(fp)
    1354:	10800017 	ldw	r2,0(r2)
    1358:	10800037 	ldwio	r2,0(r2)
    135c:	1007883a 	mov	r3,r2
    1360:	e0bffe17 	ldw	r2,-8(fp)
    1364:	2085883a 	add	r2,r4,r2
    1368:	10800704 	addi	r2,r2,28
    136c:	10c00005 	stb	r3,0(r2)

  sp->rx_end = next;
    1370:	e0fffe17 	ldw	r3,-8(fp)
    1374:	e0bffd17 	ldw	r2,-12(fp)
    1378:	18800315 	stw	r2,12(r3)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
    137c:	e0bffe17 	ldw	r2,-8(fp)
    1380:	10800317 	ldw	r2,12(r2)
    1384:	10800044 	addi	r2,r2,1
    1388:	10800fcc 	andi	r2,r2,63
    138c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
    1390:	e0bffe17 	ldw	r2,-8(fp)
    1394:	10c00217 	ldw	r3,8(r2)
    1398:	e0bffd17 	ldw	r2,-12(fp)
    139c:	18800e1e 	bne	r3,r2,13d8 <altera_avalon_uart_rxirq+0xd0>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    13a0:	e0bffe17 	ldw	r2,-8(fp)
    13a4:	10c00117 	ldw	r3,4(r2)
    13a8:	00bfdfc4 	movi	r2,-129
    13ac:	1886703a 	and	r3,r3,r2
    13b0:	e0bffe17 	ldw	r2,-8(fp)
    13b4:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
    13b8:	e0bffe17 	ldw	r2,-8(fp)
    13bc:	10800017 	ldw	r2,0(r2)
    13c0:	11000304 	addi	r4,r2,12
    13c4:	e0bffe17 	ldw	r2,-8(fp)
    13c8:	10800117 	ldw	r2,4(r2)
    13cc:	1007883a 	mov	r3,r2
    13d0:	2005883a 	mov	r2,r4
    13d4:	10c00035 	stwio	r3,0(r2)
  }   
}
    13d8:	e037883a 	mov	sp,fp
    13dc:	df000017 	ldw	fp,0(sp)
    13e0:	dec00104 	addi	sp,sp,4
    13e4:	f800283a 	ret

000013e8 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
    13e8:	defffd04 	addi	sp,sp,-12
    13ec:	df000215 	stw	fp,8(sp)
    13f0:	df000204 	addi	fp,sp,8
    13f4:	e13ffe15 	stw	r4,-8(fp)
    13f8:	e17fff15 	stw	r5,-4(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
    13fc:	e0bffe17 	ldw	r2,-8(fp)
    1400:	10c00417 	ldw	r3,16(r2)
    1404:	e0bffe17 	ldw	r2,-8(fp)
    1408:	10800517 	ldw	r2,20(r2)
    140c:	18803626 	beq	r3,r2,14e8 <altera_avalon_uart_txirq+0x100>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
    1410:	e0bffe17 	ldw	r2,-8(fp)
    1414:	10800617 	ldw	r2,24(r2)
    1418:	1080008c 	andi	r2,r2,2
    141c:	1005003a 	cmpeq	r2,r2,zero
    1420:	1000041e 	bne	r2,zero,1434 <altera_avalon_uart_txirq+0x4c>
    1424:	e0bfff17 	ldw	r2,-4(fp)
    1428:	1082000c 	andi	r2,r2,2048
    142c:	1005003a 	cmpeq	r2,r2,zero
    1430:	10001e1e 	bne	r2,zero,14ac <altera_avalon_uart_txirq+0xc4>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
    1434:	e0bffe17 	ldw	r2,-8(fp)
    1438:	10800417 	ldw	r2,16(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
    143c:	e0bffe17 	ldw	r2,-8(fp)
    1440:	10800017 	ldw	r2,0(r2)
    1444:	11000104 	addi	r4,r2,4
    1448:	e0bffe17 	ldw	r2,-8(fp)
    144c:	10c00417 	ldw	r3,16(r2)
    1450:	e0bffe17 	ldw	r2,-8(fp)
    1454:	1885883a 	add	r2,r3,r2
    1458:	10801704 	addi	r2,r2,92
    145c:	10800003 	ldbu	r2,0(r2)
    1460:	10c03fcc 	andi	r3,r2,255
    1464:	2005883a 	mov	r2,r4
    1468:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
    146c:	e0bffe17 	ldw	r2,-8(fp)
    1470:	10800417 	ldw	r2,16(r2)
    1474:	10c00044 	addi	r3,r2,1
    1478:	e0bffe17 	ldw	r2,-8(fp)
    147c:	10c00415 	stw	r3,16(r2)
    1480:	e0bffe17 	ldw	r2,-8(fp)
    1484:	10800417 	ldw	r2,16(r2)
    1488:	10c00fcc 	andi	r3,r2,63
    148c:	e0bffe17 	ldw	r2,-8(fp)
    1490:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
    1494:	e0bffe17 	ldw	r2,-8(fp)
    1498:	10800117 	ldw	r2,4(r2)
    149c:	10c01014 	ori	r3,r2,64
    14a0:	e0bffe17 	ldw	r2,-8(fp)
    14a4:	10c00115 	stw	r3,4(r2)
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
    14a8:	00000f06 	br	14e8 <altera_avalon_uart_txirq+0x100>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
    14ac:	e0bffe17 	ldw	r2,-8(fp)
    14b0:	10800017 	ldw	r2,0(r2)
    14b4:	10800204 	addi	r2,r2,8
    14b8:	10800037 	ldwio	r2,0(r2)
    14bc:	e0bfff15 	stw	r2,-4(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
    14c0:	e0bfff17 	ldw	r2,-4(fp)
    14c4:	1082000c 	andi	r2,r2,2048
    14c8:	1004c03a 	cmpne	r2,r2,zero
    14cc:	1000061e 	bne	r2,zero,14e8 <altera_avalon_uart_txirq+0x100>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
    14d0:	e0bffe17 	ldw	r2,-8(fp)
    14d4:	10c00117 	ldw	r3,4(r2)
    14d8:	00bfefc4 	movi	r2,-65
    14dc:	1886703a 	and	r3,r3,r2
    14e0:	e0bffe17 	ldw	r2,-8(fp)
    14e4:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
    14e8:	e0bffe17 	ldw	r2,-8(fp)
    14ec:	10c00417 	ldw	r3,16(r2)
    14f0:	e0bffe17 	ldw	r2,-8(fp)
    14f4:	10800517 	ldw	r2,20(r2)
    14f8:	1880061e 	bne	r3,r2,1514 <altera_avalon_uart_txirq+0x12c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
    14fc:	e0bffe17 	ldw	r2,-8(fp)
    1500:	10c00117 	ldw	r3,4(r2)
    1504:	00beefc4 	movi	r2,-1089
    1508:	1886703a 	and	r3,r3,r2
    150c:	e0bffe17 	ldw	r2,-8(fp)
    1510:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    1514:	e0bffe17 	ldw	r2,-8(fp)
    1518:	10800017 	ldw	r2,0(r2)
    151c:	11000304 	addi	r4,r2,12
    1520:	e0bffe17 	ldw	r2,-8(fp)
    1524:	10800117 	ldw	r2,4(r2)
    1528:	1007883a 	mov	r3,r2
    152c:	2005883a 	mov	r2,r4
    1530:	10c00035 	stwio	r3,0(r2)
}
    1534:	e037883a 	mov	sp,fp
    1538:	df000017 	ldw	fp,0(sp)
    153c:	dec00104 	addi	sp,sp,4
    1540:	f800283a 	ret

00001544 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
    1544:	defffc04 	addi	sp,sp,-16
    1548:	df000315 	stw	fp,12(sp)
    154c:	df000304 	addi	fp,sp,12
    1550:	e13ffd15 	stw	r4,-12(fp)
    1554:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
    1558:	00000706 	br	1578 <altera_avalon_uart_close+0x34>
    if (flags & O_NONBLOCK) {
    155c:	e0bffe17 	ldw	r2,-8(fp)
    1560:	1090000c 	andi	r2,r2,16384
    1564:	1005003a 	cmpeq	r2,r2,zero
    1568:	1000031e 	bne	r2,zero,1578 <altera_avalon_uart_close+0x34>
      return -EWOULDBLOCK; 
    156c:	00bffd44 	movi	r2,-11
    1570:	e0bfff15 	stw	r2,-4(fp)
    1574:	00000606 	br	1590 <altera_avalon_uart_close+0x4c>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
    1578:	e0bffd17 	ldw	r2,-12(fp)
    157c:	10c00417 	ldw	r3,16(r2)
    1580:	e0bffd17 	ldw	r2,-12(fp)
    1584:	10800517 	ldw	r2,20(r2)
    1588:	18bff41e 	bne	r3,r2,155c <altera_avalon_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    158c:	e03fff15 	stw	zero,-4(fp)
    1590:	e0bfff17 	ldw	r2,-4(fp)
}
    1594:	e037883a 	mov	sp,fp
    1598:	df000017 	ldw	fp,0(sp)
    159c:	dec00104 	addi	sp,sp,4
    15a0:	f800283a 	ret

000015a4 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
    15a4:	defff004 	addi	sp,sp,-64
    15a8:	dfc00f15 	stw	ra,60(sp)
    15ac:	df000e15 	stw	fp,56(sp)
    15b0:	df000e04 	addi	fp,sp,56
    15b4:	e13ffb15 	stw	r4,-20(fp)
    15b8:	e17ffc15 	stw	r5,-16(fp)
    15bc:	e1bffd15 	stw	r6,-12(fp)
    15c0:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context context;
  int             block;
  alt_u32         next;
  alt_u8          read_would_block = 0;
    15c4:	e03ff705 	stb	zero,-36(fp)
  int             count = 0;
    15c8:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
    15cc:	e0bffe17 	ldw	r2,-8(fp)
    15d0:	1090000c 	andi	r2,r2,16384
    15d4:	1005003a 	cmpeq	r2,r2,zero
    15d8:	e0bff915 	stw	r2,-28(fp)
  /*
   * Calculate which slot in the circular buffer is the next one to read
   * data from.
   */

  next = (sp->rx_start + 1) & ALT_AVALON_UART_BUF_MSK;
    15dc:	e0bffb17 	ldw	r2,-20(fp)
    15e0:	10800217 	ldw	r2,8(r2)
    15e4:	10800044 	addi	r2,r2,1
    15e8:	10800fcc 	andi	r2,r2,63
    15ec:	e0bff815 	stw	r2,-32(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
    15f0:	00001906 	br	1658 <altera_avalon_uart_read+0xb4>
    {
      count++;
    15f4:	e0bff617 	ldw	r2,-40(fp)
    15f8:	10800044 	addi	r2,r2,1
    15fc:	e0bff615 	stw	r2,-40(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
    1600:	e0bffb17 	ldw	r2,-20(fp)
    1604:	10c00217 	ldw	r3,8(r2)
    1608:	e0bffb17 	ldw	r2,-20(fp)
    160c:	1885883a 	add	r2,r3,r2
    1610:	10800704 	addi	r2,r2,28
    1614:	10800003 	ldbu	r2,0(r2)
    1618:	1007883a 	mov	r3,r2
    161c:	e0bffc17 	ldw	r2,-16(fp)
    1620:	10c00005 	stb	r3,0(r2)
    1624:	e0bffc17 	ldw	r2,-16(fp)
    1628:	10800044 	addi	r2,r2,1
    162c:	e0bffc15 	stw	r2,-16(fp)
      
      sp->rx_start = (++sp->rx_start) & ALT_AVALON_UART_BUF_MSK;
    1630:	e0bffb17 	ldw	r2,-20(fp)
    1634:	10800217 	ldw	r2,8(r2)
    1638:	10c00044 	addi	r3,r2,1
    163c:	e0bffb17 	ldw	r2,-20(fp)
    1640:	10c00215 	stw	r3,8(r2)
    1644:	e0bffb17 	ldw	r2,-20(fp)
    1648:	10800217 	ldw	r2,8(r2)
    164c:	10c00fcc 	andi	r3,r2,63
    1650:	e0bffb17 	ldw	r2,-20(fp)
    1654:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
    1658:	e0fff617 	ldw	r3,-40(fp)
    165c:	e0bffd17 	ldw	r2,-12(fp)
    1660:	1880050e 	bge	r3,r2,1678 <altera_avalon_uart_read+0xd4>
    1664:	e0bffb17 	ldw	r2,-20(fp)
    1668:	10c00217 	ldw	r3,8(r2)
    166c:	e0bffb17 	ldw	r2,-20(fp)
    1670:	10800317 	ldw	r2,12(r2)
    1674:	18bfdf1e 	bne	r3,r2,15f4 <altera_avalon_uart_read+0x50>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
    1678:	e0bff617 	ldw	r2,-40(fp)
    167c:	1004c03a 	cmpne	r2,r2,zero
    1680:	1000271e 	bne	r2,zero,1720 <altera_avalon_uart_read+0x17c>
    1684:	e0bffb17 	ldw	r2,-20(fp)
    1688:	10c00217 	ldw	r3,8(r2)
    168c:	e0bffb17 	ldw	r2,-20(fp)
    1690:	10800317 	ldw	r2,12(r2)
    1694:	1880221e 	bne	r3,r2,1720 <altera_avalon_uart_read+0x17c>
    {
      if (!block)
    1698:	e0bff917 	ldw	r2,-28(fp)
    169c:	1004c03a 	cmpne	r2,r2,zero
    16a0:	1000061e 	bne	r2,zero,16bc <altera_avalon_uart_read+0x118>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
    16a4:	00017d40 	call	17d4 <alt_get_errno>
    16a8:	00c002c4 	movi	r3,11
    16ac:	10c00015 	stw	r3,0(r2)
        read_would_block = 1;
    16b0:	00800044 	movi	r2,1
    16b4:	e0bff705 	stb	r2,-36(fp)
        break;
    16b8:	00001f06 	br	1738 <altera_avalon_uart_read+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    16bc:	0005303a 	rdctl	r2,status
    16c0:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    16c4:	e0fff517 	ldw	r3,-44(fp)
    16c8:	00bfff84 	movi	r2,-2
    16cc:	1884703a 	and	r2,r3,r2
    16d0:	1001703a 	wrctl	status,r2
  
  return context;
    16d4:	e0bff517 	ldw	r2,-44(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
    16d8:	e0bffa15 	stw	r2,-24(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    16dc:	e0bffb17 	ldw	r2,-20(fp)
    16e0:	10800117 	ldw	r2,4(r2)
    16e4:	10c02014 	ori	r3,r2,128
    16e8:	e0bffb17 	ldw	r2,-20(fp)
    16ec:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    16f0:	e0bffb17 	ldw	r2,-20(fp)
    16f4:	10800017 	ldw	r2,0(r2)
    16f8:	11000304 	addi	r4,r2,12
    16fc:	e0bffb17 	ldw	r2,-20(fp)
    1700:	10800117 	ldw	r2,4(r2)
    1704:	1007883a 	mov	r3,r2
    1708:	2005883a 	mov	r2,r4
    170c:	10c00035 	stwio	r3,0(r2)
    1710:	e0bffa17 	ldw	r2,-24(fp)
    1714:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1718:	e0bff417 	ldw	r2,-48(fp)
    171c:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
    1720:	e0bff617 	ldw	r2,-40(fp)
    1724:	1004c03a 	cmpne	r2,r2,zero
    1728:	1000031e 	bne	r2,zero,1738 <altera_avalon_uart_read+0x194>
    172c:	e0bffd17 	ldw	r2,-12(fp)
    1730:	1004c03a 	cmpne	r2,r2,zero
    1734:	103fc81e 	bne	r2,zero,1658 <altera_avalon_uart_read+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1738:	0005303a 	rdctl	r2,status
    173c:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1740:	e0fff317 	ldw	r3,-52(fp)
    1744:	00bfff84 	movi	r2,-2
    1748:	1884703a 	and	r2,r3,r2
    174c:	1001703a 	wrctl	status,r2
  
  return context;
    1750:	e0bff317 	ldw	r2,-52(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
    1754:	e0bffa15 	stw	r2,-24(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    1758:	e0bffb17 	ldw	r2,-20(fp)
    175c:	10800117 	ldw	r2,4(r2)
    1760:	10c02014 	ori	r3,r2,128
    1764:	e0bffb17 	ldw	r2,-20(fp)
    1768:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    176c:	e0bffb17 	ldw	r2,-20(fp)
    1770:	10800017 	ldw	r2,0(r2)
    1774:	11000304 	addi	r4,r2,12
    1778:	e0bffb17 	ldw	r2,-20(fp)
    177c:	10800117 	ldw	r2,4(r2)
    1780:	1007883a 	mov	r3,r2
    1784:	2005883a 	mov	r2,r4
    1788:	10c00035 	stwio	r3,0(r2)
    178c:	e0bffa17 	ldw	r2,-24(fp)
    1790:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1794:	e0bff217 	ldw	r2,-56(fp)
    1798:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
    179c:	e0bff703 	ldbu	r2,-36(fp)
    17a0:	1005003a 	cmpeq	r2,r2,zero
    17a4:	1000031e 	bne	r2,zero,17b4 <altera_avalon_uart_read+0x210>
    return ~EWOULDBLOCK;
    17a8:	00bffd04 	movi	r2,-12
    17ac:	e0bfff15 	stw	r2,-4(fp)
    17b0:	00000206 	br	17bc <altera_avalon_uart_read+0x218>
  }
  else {
    return count;
    17b4:	e0bff617 	ldw	r2,-40(fp)
    17b8:	e0bfff15 	stw	r2,-4(fp)
    17bc:	e0bfff17 	ldw	r2,-4(fp)
  }
}
    17c0:	e037883a 	mov	sp,fp
    17c4:	dfc00117 	ldw	ra,4(sp)
    17c8:	df000017 	ldw	fp,0(sp)
    17cc:	dec00204 	addi	sp,sp,8
    17d0:	f800283a 	ret

000017d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    17d4:	defffd04 	addi	sp,sp,-12
    17d8:	dfc00215 	stw	ra,8(sp)
    17dc:	df000115 	stw	fp,4(sp)
    17e0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    17e4:	00800034 	movhi	r2,0
    17e8:	10921c04 	addi	r2,r2,18544
    17ec:	10800017 	ldw	r2,0(r2)
    17f0:	1005003a 	cmpeq	r2,r2,zero
    17f4:	1000061e 	bne	r2,zero,1810 <alt_get_errno+0x3c>
    17f8:	00800034 	movhi	r2,0
    17fc:	10921c04 	addi	r2,r2,18544
    1800:	10800017 	ldw	r2,0(r2)
    1804:	103ee83a 	callr	r2
    1808:	e0bfff15 	stw	r2,-4(fp)
    180c:	00000306 	br	181c <alt_get_errno+0x48>
    1810:	00800034 	movhi	r2,0
    1814:	10981904 	addi	r2,r2,24676
    1818:	e0bfff15 	stw	r2,-4(fp)
    181c:	e0bfff17 	ldw	r2,-4(fp)
}
    1820:	e037883a 	mov	sp,fp
    1824:	dfc00117 	ldw	ra,4(sp)
    1828:	df000017 	ldw	fp,0(sp)
    182c:	dec00204 	addi	sp,sp,8
    1830:	f800283a 	ret

00001834 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
    1834:	defff204 	addi	sp,sp,-56
    1838:	dfc00d15 	stw	ra,52(sp)
    183c:	df000c15 	stw	fp,48(sp)
    1840:	df000c04 	addi	fp,sp,48
    1844:	e13ffc15 	stw	r4,-16(fp)
    1848:	e17ffd15 	stw	r5,-12(fp)
    184c:	e1bffe15 	stw	r6,-8(fp)
    1850:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
    1854:	e0bffe17 	ldw	r2,-8(fp)
    1858:	e0bff815 	stw	r2,-32(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
    185c:	e0bfff17 	ldw	r2,-4(fp)
    1860:	1090000c 	andi	r2,r2,16384
    1864:	e0bffa15 	stw	r2,-24(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
    1868:	00004006 	br	196c <altera_avalon_uart_write+0x138>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
    186c:	e0bffc17 	ldw	r2,-16(fp)
    1870:	10800517 	ldw	r2,20(r2)
    1874:	10800044 	addi	r2,r2,1
    1878:	10800fcc 	andi	r2,r2,63
    187c:	e0bff915 	stw	r2,-28(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
    1880:	e0bffc17 	ldw	r2,-16(fp)
    1884:	10c00417 	ldw	r3,16(r2)
    1888:	e0bff917 	ldw	r2,-28(fp)
    188c:	1880251e 	bne	r3,r2,1924 <altera_avalon_uart_write+0xf0>
    {
      if (no_block)
    1890:	e0bffa17 	ldw	r2,-24(fp)
    1894:	1005003a 	cmpeq	r2,r2,zero
    1898:	1000051e 	bne	r2,zero,18b0 <altera_avalon_uart_write+0x7c>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
    189c:	00019fc0 	call	19fc <alt_get_errno>
    18a0:	1007883a 	mov	r3,r2
    18a4:	008002c4 	movi	r2,11
    18a8:	18800015 	stw	r2,0(r3)
        break;
    18ac:	00003206 	br	1978 <altera_avalon_uart_write+0x144>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    18b0:	0005303a 	rdctl	r2,status
    18b4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    18b8:	e0fff717 	ldw	r3,-36(fp)
    18bc:	00bfff84 	movi	r2,-2
    18c0:	1884703a 	and	r2,r3,r2
    18c4:	1001703a 	wrctl	status,r2
  
  return context;
    18c8:	e0bff717 	ldw	r2,-36(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
    18cc:	e0bffb15 	stw	r2,-20(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
    18d0:	e0bffc17 	ldw	r2,-16(fp)
    18d4:	10800117 	ldw	r2,4(r2)
    18d8:	10c11014 	ori	r3,r2,1088
    18dc:	e0bffc17 	ldw	r2,-16(fp)
    18e0:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    18e4:	e0bffc17 	ldw	r2,-16(fp)
    18e8:	10800017 	ldw	r2,0(r2)
    18ec:	11000304 	addi	r4,r2,12
    18f0:	e0bffc17 	ldw	r2,-16(fp)
    18f4:	10800117 	ldw	r2,4(r2)
    18f8:	1007883a 	mov	r3,r2
    18fc:	2005883a 	mov	r2,r4
    1900:	10c00035 	stwio	r3,0(r2)
    1904:	e0bffb17 	ldw	r2,-20(fp)
    1908:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    190c:	e0bff617 	ldw	r2,-40(fp)
    1910:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
    1914:	e0bffc17 	ldw	r2,-16(fp)
    1918:	10c00417 	ldw	r3,16(r2)
    191c:	e0bff917 	ldw	r2,-28(fp)
    1920:	18bffc26 	beq	r3,r2,1914 <altera_avalon_uart_write+0xe0>
      }
    }

    count--;
    1924:	e0bff817 	ldw	r2,-32(fp)
    1928:	10bfffc4 	addi	r2,r2,-1
    192c:	e0bff815 	stw	r2,-32(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
    1930:	e0bffc17 	ldw	r2,-16(fp)
    1934:	10c00517 	ldw	r3,20(r2)
    1938:	e0bffd17 	ldw	r2,-12(fp)
    193c:	10800003 	ldbu	r2,0(r2)
    1940:	1009883a 	mov	r4,r2
    1944:	e0bffc17 	ldw	r2,-16(fp)
    1948:	1885883a 	add	r2,r3,r2
    194c:	10801704 	addi	r2,r2,92
    1950:	11000005 	stb	r4,0(r2)
    1954:	e0bffd17 	ldw	r2,-12(fp)
    1958:	10800044 	addi	r2,r2,1
    195c:	e0bffd15 	stw	r2,-12(fp)
    sp->tx_end = next;
    1960:	e0fffc17 	ldw	r3,-16(fp)
    1964:	e0bff917 	ldw	r2,-28(fp)
    1968:	18800515 	stw	r2,20(r3)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
    196c:	e0bff817 	ldw	r2,-32(fp)
    1970:	1004c03a 	cmpne	r2,r2,zero
    1974:	103fbd1e 	bne	r2,zero,186c <altera_avalon_uart_write+0x38>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1978:	0005303a 	rdctl	r2,status
    197c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1980:	e0fff517 	ldw	r3,-44(fp)
    1984:	00bfff84 	movi	r2,-2
    1988:	1884703a 	and	r2,r3,r2
    198c:	1001703a 	wrctl	status,r2
  
  return context;
    1990:	e0bff517 	ldw	r2,-44(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
    1994:	e0bffb15 	stw	r2,-20(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
    1998:	e0bffc17 	ldw	r2,-16(fp)
    199c:	10800117 	ldw	r2,4(r2)
    19a0:	10c11014 	ori	r3,r2,1088
    19a4:	e0bffc17 	ldw	r2,-16(fp)
    19a8:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    19ac:	e0bffc17 	ldw	r2,-16(fp)
    19b0:	10800017 	ldw	r2,0(r2)
    19b4:	11000304 	addi	r4,r2,12
    19b8:	e0bffc17 	ldw	r2,-16(fp)
    19bc:	10800117 	ldw	r2,4(r2)
    19c0:	1007883a 	mov	r3,r2
    19c4:	2005883a 	mov	r2,r4
    19c8:	10c00035 	stwio	r3,0(r2)
    19cc:	e0bffb17 	ldw	r2,-20(fp)
    19d0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    19d4:	e0bff417 	ldw	r2,-48(fp)
    19d8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
    19dc:	e0fffe17 	ldw	r3,-8(fp)
    19e0:	e0bff817 	ldw	r2,-32(fp)
    19e4:	1885c83a 	sub	r2,r3,r2
}
    19e8:	e037883a 	mov	sp,fp
    19ec:	dfc00117 	ldw	ra,4(sp)
    19f0:	df000017 	ldw	fp,0(sp)
    19f4:	dec00204 	addi	sp,sp,8
    19f8:	f800283a 	ret

000019fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    19fc:	defffd04 	addi	sp,sp,-12
    1a00:	dfc00215 	stw	ra,8(sp)
    1a04:	df000115 	stw	fp,4(sp)
    1a08:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    1a0c:	00800034 	movhi	r2,0
    1a10:	10921c04 	addi	r2,r2,18544
    1a14:	10800017 	ldw	r2,0(r2)
    1a18:	1005003a 	cmpeq	r2,r2,zero
    1a1c:	1000061e 	bne	r2,zero,1a38 <alt_get_errno+0x3c>
    1a20:	00800034 	movhi	r2,0
    1a24:	10921c04 	addi	r2,r2,18544
    1a28:	10800017 	ldw	r2,0(r2)
    1a2c:	103ee83a 	callr	r2
    1a30:	e0bfff15 	stw	r2,-4(fp)
    1a34:	00000306 	br	1a44 <alt_get_errno+0x48>
    1a38:	00800034 	movhi	r2,0
    1a3c:	10981904 	addi	r2,r2,24676
    1a40:	e0bfff15 	stw	r2,-4(fp)
    1a44:	e0bfff17 	ldw	r2,-4(fp)
}
    1a48:	e037883a 	mov	sp,fp
    1a4c:	dfc00117 	ldw	ra,4(sp)
    1a50:	df000017 	ldw	fp,0(sp)
    1a54:	dec00204 	addi	sp,sp,8
    1a58:	f800283a 	ret

00001a5c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    1a5c:	defff404 	addi	sp,sp,-48
    1a60:	df000b15 	stw	fp,44(sp)
    1a64:	df000b04 	addi	fp,sp,44
    1a68:	e13ffb15 	stw	r4,-20(fp)
    1a6c:	e17ffc15 	stw	r5,-16(fp)
    1a70:	e1bffd15 	stw	r6,-12(fp)
    1a74:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    1a78:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    1a7c:	00800034 	movhi	r2,0
    1a80:	10981704 	addi	r2,r2,24668
    1a84:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
    1a88:	1005003a 	cmpeq	r2,r2,zero
    1a8c:	1000411e 	bne	r2,zero,1b94 <alt_alarm_start+0x138>
  {
    if (alarm)
    1a90:	e0bffb17 	ldw	r2,-20(fp)
    1a94:	1005003a 	cmpeq	r2,r2,zero
    1a98:	10003b1e 	bne	r2,zero,1b88 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
    1a9c:	e0fffb17 	ldw	r3,-20(fp)
    1aa0:	e0bffd17 	ldw	r2,-12(fp)
    1aa4:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
    1aa8:	e0fffb17 	ldw	r3,-20(fp)
    1aac:	e0bffe17 	ldw	r2,-8(fp)
    1ab0:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1ab4:	0005303a 	rdctl	r2,status
    1ab8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1abc:	e0fff817 	ldw	r3,-32(fp)
    1ac0:	00bfff84 	movi	r2,-2
    1ac4:	1884703a 	and	r2,r3,r2
    1ac8:	1001703a 	wrctl	status,r2
  
  return context;
    1acc:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
    1ad0:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    1ad4:	00800034 	movhi	r2,0
    1ad8:	10981804 	addi	r2,r2,24672
    1adc:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
    1ae0:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    1ae4:	e0fffc17 	ldw	r3,-16(fp)
    1ae8:	e0bff917 	ldw	r2,-28(fp)
    1aec:	1885883a 	add	r2,r3,r2
    1af0:	10c00044 	addi	r3,r2,1
    1af4:	e0bffb17 	ldw	r2,-20(fp)
    1af8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    1afc:	e0bffb17 	ldw	r2,-20(fp)
    1b00:	10c00217 	ldw	r3,8(r2)
    1b04:	e0bff917 	ldw	r2,-28(fp)
    1b08:	1880042e 	bgeu	r3,r2,1b1c <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
    1b0c:	e0fffb17 	ldw	r3,-20(fp)
    1b10:	00800044 	movi	r2,1
    1b14:	18800405 	stb	r2,16(r3)
    1b18:	00000206 	br	1b24 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
    1b1c:	e0bffb17 	ldw	r2,-20(fp)
    1b20:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    1b24:	e0fffb17 	ldw	r3,-20(fp)
    1b28:	00800034 	movhi	r2,0
    1b2c:	10921e04 	addi	r2,r2,18552
    1b30:	e0bff615 	stw	r2,-40(fp)
    1b34:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    1b38:	e0fff717 	ldw	r3,-36(fp)
    1b3c:	e0bff617 	ldw	r2,-40(fp)
    1b40:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    1b44:	e0bff617 	ldw	r2,-40(fp)
    1b48:	10c00017 	ldw	r3,0(r2)
    1b4c:	e0bff717 	ldw	r2,-36(fp)
    1b50:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    1b54:	e0bff617 	ldw	r2,-40(fp)
    1b58:	10c00017 	ldw	r3,0(r2)
    1b5c:	e0bff717 	ldw	r2,-36(fp)
    1b60:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    1b64:	e0fff617 	ldw	r3,-40(fp)
    1b68:	e0bff717 	ldw	r2,-36(fp)
    1b6c:	18800015 	stw	r2,0(r3)
    1b70:	e0bffa17 	ldw	r2,-24(fp)
    1b74:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1b78:	e0bff517 	ldw	r2,-44(fp)
    1b7c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    1b80:	e03fff15 	stw	zero,-4(fp)
    1b84:	00000506 	br	1b9c <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
    1b88:	00bffa84 	movi	r2,-22
    1b8c:	e0bfff15 	stw	r2,-4(fp)
    1b90:	00000206 	br	1b9c <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
    1b94:	00bfde84 	movi	r2,-134
    1b98:	e0bfff15 	stw	r2,-4(fp)
    1b9c:	e0bfff17 	ldw	r2,-4(fp)
  }
}
    1ba0:	e037883a 	mov	sp,fp
    1ba4:	df000017 	ldw	fp,0(sp)
    1ba8:	dec00104 	addi	sp,sp,4
    1bac:	f800283a 	ret

00001bb0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    1bb0:	defff804 	addi	sp,sp,-32
    1bb4:	dfc00715 	stw	ra,28(sp)
    1bb8:	df000615 	stw	fp,24(sp)
    1bbc:	df000604 	addi	fp,sp,24
    1bc0:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    1bc4:	e0bffc17 	ldw	r2,-16(fp)
    1bc8:	1004803a 	cmplt	r2,r2,zero
    1bcc:	1000081e 	bne	r2,zero,1bf0 <close+0x40>
    1bd0:	e0bffc17 	ldw	r2,-16(fp)
    1bd4:	10800324 	muli	r2,r2,12
    1bd8:	1007883a 	mov	r3,r2
    1bdc:	00800034 	movhi	r2,0
    1be0:	1090b704 	addi	r2,r2,17116
    1be4:	1887883a 	add	r3,r3,r2
    1be8:	e0ffff15 	stw	r3,-4(fp)
    1bec:	00000106 	br	1bf4 <close+0x44>
    1bf0:	e03fff15 	stw	zero,-4(fp)
    1bf4:	e0bfff17 	ldw	r2,-4(fp)
    1bf8:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
    1bfc:	e0bffb17 	ldw	r2,-20(fp)
    1c00:	1005003a 	cmpeq	r2,r2,zero
    1c04:	10001d1e 	bne	r2,zero,1c7c <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    1c08:	e0bffb17 	ldw	r2,-20(fp)
    1c0c:	10800017 	ldw	r2,0(r2)
    1c10:	10800417 	ldw	r2,16(r2)
    1c14:	1005003a 	cmpeq	r2,r2,zero
    1c18:	1000071e 	bne	r2,zero,1c38 <close+0x88>
    1c1c:	e0bffb17 	ldw	r2,-20(fp)
    1c20:	10800017 	ldw	r2,0(r2)
    1c24:	10800417 	ldw	r2,16(r2)
    1c28:	e13ffb17 	ldw	r4,-20(fp)
    1c2c:	103ee83a 	callr	r2
    1c30:	e0bffe15 	stw	r2,-8(fp)
    1c34:	00000106 	br	1c3c <close+0x8c>
    1c38:	e03ffe15 	stw	zero,-8(fp)
    1c3c:	e0bffe17 	ldw	r2,-8(fp)
    1c40:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    1c44:	e13ffc17 	ldw	r4,-16(fp)
    1c48:	000262c0 	call	262c <alt_release_fd>
    if (rval < 0)
    1c4c:	e0bffa17 	ldw	r2,-24(fp)
    1c50:	1004403a 	cmpge	r2,r2,zero
    1c54:	1000071e 	bne	r2,zero,1c74 <close+0xc4>
    {
      ALT_ERRNO = -rval;
    1c58:	0001cac0 	call	1cac <alt_get_errno>
    1c5c:	e0fffa17 	ldw	r3,-24(fp)
    1c60:	00c7c83a 	sub	r3,zero,r3
    1c64:	10c00015 	stw	r3,0(r2)
      return -1;
    1c68:	00bfffc4 	movi	r2,-1
    1c6c:	e0bffd15 	stw	r2,-12(fp)
    1c70:	00000806 	br	1c94 <close+0xe4>
    }
    return 0;
    1c74:	e03ffd15 	stw	zero,-12(fp)
    1c78:	00000606 	br	1c94 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    1c7c:	0001cac0 	call	1cac <alt_get_errno>
    1c80:	1007883a 	mov	r3,r2
    1c84:	00801444 	movi	r2,81
    1c88:	18800015 	stw	r2,0(r3)
    return -1;
    1c8c:	00bfffc4 	movi	r2,-1
    1c90:	e0bffd15 	stw	r2,-12(fp)
    1c94:	e0bffd17 	ldw	r2,-12(fp)
  }
}
    1c98:	e037883a 	mov	sp,fp
    1c9c:	dfc00117 	ldw	ra,4(sp)
    1ca0:	df000017 	ldw	fp,0(sp)
    1ca4:	dec00204 	addi	sp,sp,8
    1ca8:	f800283a 	ret

00001cac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    1cac:	defffd04 	addi	sp,sp,-12
    1cb0:	dfc00215 	stw	ra,8(sp)
    1cb4:	df000115 	stw	fp,4(sp)
    1cb8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    1cbc:	00800034 	movhi	r2,0
    1cc0:	10921c04 	addi	r2,r2,18544
    1cc4:	10800017 	ldw	r2,0(r2)
    1cc8:	1005003a 	cmpeq	r2,r2,zero
    1ccc:	1000061e 	bne	r2,zero,1ce8 <alt_get_errno+0x3c>
    1cd0:	00800034 	movhi	r2,0
    1cd4:	10921c04 	addi	r2,r2,18544
    1cd8:	10800017 	ldw	r2,0(r2)
    1cdc:	103ee83a 	callr	r2
    1ce0:	e0bfff15 	stw	r2,-4(fp)
    1ce4:	00000306 	br	1cf4 <alt_get_errno+0x48>
    1ce8:	00800034 	movhi	r2,0
    1cec:	10981904 	addi	r2,r2,24676
    1cf0:	e0bfff15 	stw	r2,-4(fp)
    1cf4:	e0bfff17 	ldw	r2,-4(fp)
}
    1cf8:	e037883a 	mov	sp,fp
    1cfc:	dfc00117 	ldw	ra,4(sp)
    1d00:	df000017 	ldw	fp,0(sp)
    1d04:	dec00204 	addi	sp,sp,8
    1d08:	f800283a 	ret

00001d0c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    1d0c:	deffff04 	addi	sp,sp,-4
    1d10:	df000015 	stw	fp,0(sp)
    1d14:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    1d18:	e037883a 	mov	sp,fp
    1d1c:	df000017 	ldw	fp,0(sp)
    1d20:	dec00104 	addi	sp,sp,4
    1d24:	f800283a 	ret

00001d28 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    1d28:	defffc04 	addi	sp,sp,-16
    1d2c:	df000315 	stw	fp,12(sp)
    1d30:	df000304 	addi	fp,sp,12
    1d34:	e13ffd15 	stw	r4,-12(fp)
    1d38:	e17ffe15 	stw	r5,-8(fp)
    1d3c:	e1bfff15 	stw	r6,-4(fp)
  return len;
    1d40:	e0bfff17 	ldw	r2,-4(fp)
}
    1d44:	e037883a 	mov	sp,fp
    1d48:	df000017 	ldw	fp,0(sp)
    1d4c:	dec00104 	addi	sp,sp,4
    1d50:	f800283a 	ret

00001d54 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    1d54:	defff904 	addi	sp,sp,-28
    1d58:	dfc00615 	stw	ra,24(sp)
    1d5c:	df000515 	stw	fp,20(sp)
    1d60:	df000504 	addi	fp,sp,20
    1d64:	e13ffd15 	stw	r4,-12(fp)
    1d68:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    1d6c:	e0bffd17 	ldw	r2,-12(fp)
    1d70:	1005003a 	cmpeq	r2,r2,zero
    1d74:	1000041e 	bne	r2,zero,1d88 <alt_dev_llist_insert+0x34>
    1d78:	e0bffd17 	ldw	r2,-12(fp)
    1d7c:	10800217 	ldw	r2,8(r2)
    1d80:	1004c03a 	cmpne	r2,r2,zero
    1d84:	1000071e 	bne	r2,zero,1da4 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
    1d88:	0001e080 	call	1e08 <alt_get_errno>
    1d8c:	1007883a 	mov	r3,r2
    1d90:	00800584 	movi	r2,22
    1d94:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    1d98:	00bffa84 	movi	r2,-22
    1d9c:	e0bfff15 	stw	r2,-4(fp)
    1da0:	00001306 	br	1df0 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    1da4:	e0fffd17 	ldw	r3,-12(fp)
    1da8:	e0bffe17 	ldw	r2,-8(fp)
    1dac:	e0bffb15 	stw	r2,-20(fp)
    1db0:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    1db4:	e0fffc17 	ldw	r3,-16(fp)
    1db8:	e0bffb17 	ldw	r2,-20(fp)
    1dbc:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    1dc0:	e0bffb17 	ldw	r2,-20(fp)
    1dc4:	10c00017 	ldw	r3,0(r2)
    1dc8:	e0bffc17 	ldw	r2,-16(fp)
    1dcc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    1dd0:	e0bffb17 	ldw	r2,-20(fp)
    1dd4:	10c00017 	ldw	r3,0(r2)
    1dd8:	e0bffc17 	ldw	r2,-16(fp)
    1ddc:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    1de0:	e0fffb17 	ldw	r3,-20(fp)
    1de4:	e0bffc17 	ldw	r2,-16(fp)
    1de8:	18800015 	stw	r2,0(r3)

  return 0;  
    1dec:	e03fff15 	stw	zero,-4(fp)
    1df0:	e0bfff17 	ldw	r2,-4(fp)
}
    1df4:	e037883a 	mov	sp,fp
    1df8:	dfc00117 	ldw	ra,4(sp)
    1dfc:	df000017 	ldw	fp,0(sp)
    1e00:	dec00204 	addi	sp,sp,8
    1e04:	f800283a 	ret

00001e08 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    1e08:	defffd04 	addi	sp,sp,-12
    1e0c:	dfc00215 	stw	ra,8(sp)
    1e10:	df000115 	stw	fp,4(sp)
    1e14:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    1e18:	00800034 	movhi	r2,0
    1e1c:	10921c04 	addi	r2,r2,18544
    1e20:	10800017 	ldw	r2,0(r2)
    1e24:	1005003a 	cmpeq	r2,r2,zero
    1e28:	1000061e 	bne	r2,zero,1e44 <alt_get_errno+0x3c>
    1e2c:	00800034 	movhi	r2,0
    1e30:	10921c04 	addi	r2,r2,18544
    1e34:	10800017 	ldw	r2,0(r2)
    1e38:	103ee83a 	callr	r2
    1e3c:	e0bfff15 	stw	r2,-4(fp)
    1e40:	00000306 	br	1e50 <alt_get_errno+0x48>
    1e44:	00800034 	movhi	r2,0
    1e48:	10981904 	addi	r2,r2,24676
    1e4c:	e0bfff15 	stw	r2,-4(fp)
    1e50:	e0bfff17 	ldw	r2,-4(fp)
}
    1e54:	e037883a 	mov	sp,fp
    1e58:	dfc00117 	ldw	ra,4(sp)
    1e5c:	df000017 	ldw	fp,0(sp)
    1e60:	dec00204 	addi	sp,sp,8
    1e64:	f800283a 	ret

00001e68 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    1e68:	defffd04 	addi	sp,sp,-12
    1e6c:	dfc00215 	stw	ra,8(sp)
    1e70:	df000115 	stw	fp,4(sp)
    1e74:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    1e78:	00bfff04 	movi	r2,-4
    1e7c:	00c00034 	movhi	r3,0
    1e80:	18cc1b04 	addi	r3,r3,12396
    1e84:	1885883a 	add	r2,r3,r2
    1e88:	e0bfff15 	stw	r2,-4(fp)
    1e8c:	00000606 	br	1ea8 <_do_ctors+0x40>
        (*ctor) (); 
    1e90:	e0bfff17 	ldw	r2,-4(fp)
    1e94:	10800017 	ldw	r2,0(r2)
    1e98:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    1e9c:	e0bfff17 	ldw	r2,-4(fp)
    1ea0:	10bfff04 	addi	r2,r2,-4
    1ea4:	e0bfff15 	stw	r2,-4(fp)
    1ea8:	e0ffff17 	ldw	r3,-4(fp)
    1eac:	00800034 	movhi	r2,0
    1eb0:	108c1a04 	addi	r2,r2,12392
    1eb4:	18bff62e 	bgeu	r3,r2,1e90 <_do_ctors+0x28>
        (*ctor) (); 
}
    1eb8:	e037883a 	mov	sp,fp
    1ebc:	dfc00117 	ldw	ra,4(sp)
    1ec0:	df000017 	ldw	fp,0(sp)
    1ec4:	dec00204 	addi	sp,sp,8
    1ec8:	f800283a 	ret

00001ecc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    1ecc:	defffd04 	addi	sp,sp,-12
    1ed0:	dfc00215 	stw	ra,8(sp)
    1ed4:	df000115 	stw	fp,4(sp)
    1ed8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    1edc:	00bfff04 	movi	r2,-4
    1ee0:	00c00034 	movhi	r3,0
    1ee4:	18cc1b04 	addi	r3,r3,12396
    1ee8:	1885883a 	add	r2,r3,r2
    1eec:	e0bfff15 	stw	r2,-4(fp)
    1ef0:	00000606 	br	1f0c <_do_dtors+0x40>
        (*dtor) (); 
    1ef4:	e0bfff17 	ldw	r2,-4(fp)
    1ef8:	10800017 	ldw	r2,0(r2)
    1efc:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    1f00:	e0bfff17 	ldw	r2,-4(fp)
    1f04:	10bfff04 	addi	r2,r2,-4
    1f08:	e0bfff15 	stw	r2,-4(fp)
    1f0c:	e0ffff17 	ldw	r3,-4(fp)
    1f10:	00800034 	movhi	r2,0
    1f14:	108c1b04 	addi	r2,r2,12396
    1f18:	18bff62e 	bgeu	r3,r2,1ef4 <_do_dtors+0x28>
        (*dtor) (); 
}
    1f1c:	e037883a 	mov	sp,fp
    1f20:	dfc00117 	ldw	ra,4(sp)
    1f24:	df000017 	ldw	fp,0(sp)
    1f28:	dec00204 	addi	sp,sp,8
    1f2c:	f800283a 	ret

00001f30 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    1f30:	defffe04 	addi	sp,sp,-8
    1f34:	dfc00115 	stw	ra,4(sp)
    1f38:	df000015 	stw	fp,0(sp)
    1f3c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    1f40:	0009883a 	mov	r4,zero
    1f44:	01480004 	movi	r5,8192
    1f48:	0002abc0 	call	2abc <alt_icache_flush>
#endif
}
    1f4c:	e037883a 	mov	sp,fp
    1f50:	dfc00117 	ldw	ra,4(sp)
    1f54:	df000017 	ldw	fp,0(sp)
    1f58:	dec00204 	addi	sp,sp,8
    1f5c:	f800283a 	ret

00001f60 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    1f60:	defff904 	addi	sp,sp,-28
    1f64:	dfc00615 	stw	ra,24(sp)
    1f68:	df000515 	stw	fp,20(sp)
    1f6c:	df000504 	addi	fp,sp,20
    1f70:	e13ffc15 	stw	r4,-16(fp)
    1f74:	e17ffd15 	stw	r5,-12(fp)
    1f78:	e1bffe15 	stw	r6,-8(fp)
    1f7c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    1f80:	e0800217 	ldw	r2,8(fp)
    1f84:	d8800015 	stw	r2,0(sp)
    1f88:	e13ffc17 	ldw	r4,-16(fp)
    1f8c:	e17ffd17 	ldw	r5,-12(fp)
    1f90:	e1bffe17 	ldw	r6,-8(fp)
    1f94:	e1ffff17 	ldw	r7,-4(fp)
    1f98:	00021340 	call	2134 <alt_iic_isr_register>
}  
    1f9c:	e037883a 	mov	sp,fp
    1fa0:	dfc00117 	ldw	ra,4(sp)
    1fa4:	df000017 	ldw	fp,0(sp)
    1fa8:	dec00204 	addi	sp,sp,8
    1fac:	f800283a 	ret

00001fb0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    1fb0:	defff904 	addi	sp,sp,-28
    1fb4:	df000615 	stw	fp,24(sp)
    1fb8:	df000604 	addi	fp,sp,24
    1fbc:	e13ffe15 	stw	r4,-8(fp)
    1fc0:	e17fff15 	stw	r5,-4(fp)
    1fc4:	e0bfff17 	ldw	r2,-4(fp)
    1fc8:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1fcc:	0005303a 	rdctl	r2,status
    1fd0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1fd4:	e0fffb17 	ldw	r3,-20(fp)
    1fd8:	00bfff84 	movi	r2,-2
    1fdc:	1884703a 	and	r2,r3,r2
    1fe0:	1001703a 	wrctl	status,r2
  
  return context;
    1fe4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    1fe8:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
    1fec:	e0fffc17 	ldw	r3,-16(fp)
    1ff0:	00800044 	movi	r2,1
    1ff4:	10c4983a 	sll	r2,r2,r3
    1ff8:	1007883a 	mov	r3,r2
    1ffc:	00800034 	movhi	r2,0
    2000:	10981604 	addi	r2,r2,24664
    2004:	10800017 	ldw	r2,0(r2)
    2008:	1886b03a 	or	r3,r3,r2
    200c:	00800034 	movhi	r2,0
    2010:	10981604 	addi	r2,r2,24664
    2014:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    2018:	00800034 	movhi	r2,0
    201c:	10981604 	addi	r2,r2,24664
    2020:	10800017 	ldw	r2,0(r2)
    2024:	100170fa 	wrctl	ienable,r2
    2028:	e0bffd17 	ldw	r2,-12(fp)
    202c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2030:	e0bffa17 	ldw	r2,-24(fp)
    2034:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    2038:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
    203c:	e037883a 	mov	sp,fp
    2040:	df000017 	ldw	fp,0(sp)
    2044:	dec00104 	addi	sp,sp,4
    2048:	f800283a 	ret

0000204c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    204c:	defff904 	addi	sp,sp,-28
    2050:	df000615 	stw	fp,24(sp)
    2054:	df000604 	addi	fp,sp,24
    2058:	e13ffe15 	stw	r4,-8(fp)
    205c:	e17fff15 	stw	r5,-4(fp)
    2060:	e0bfff17 	ldw	r2,-4(fp)
    2064:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2068:	0005303a 	rdctl	r2,status
    206c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2070:	e0fffb17 	ldw	r3,-20(fp)
    2074:	00bfff84 	movi	r2,-2
    2078:	1884703a 	and	r2,r3,r2
    207c:	1001703a 	wrctl	status,r2
  
  return context;
    2080:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    2084:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
    2088:	e0fffc17 	ldw	r3,-16(fp)
    208c:	00800044 	movi	r2,1
    2090:	10c4983a 	sll	r2,r2,r3
    2094:	0084303a 	nor	r2,zero,r2
    2098:	1007883a 	mov	r3,r2
    209c:	00800034 	movhi	r2,0
    20a0:	10981604 	addi	r2,r2,24664
    20a4:	10800017 	ldw	r2,0(r2)
    20a8:	1886703a 	and	r3,r3,r2
    20ac:	00800034 	movhi	r2,0
    20b0:	10981604 	addi	r2,r2,24664
    20b4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    20b8:	00800034 	movhi	r2,0
    20bc:	10981604 	addi	r2,r2,24664
    20c0:	10800017 	ldw	r2,0(r2)
    20c4:	100170fa 	wrctl	ienable,r2
    20c8:	e0bffd17 	ldw	r2,-12(fp)
    20cc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    20d0:	e0bffa17 	ldw	r2,-24(fp)
    20d4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    20d8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
    20dc:	e037883a 	mov	sp,fp
    20e0:	df000017 	ldw	fp,0(sp)
    20e4:	dec00104 	addi	sp,sp,4
    20e8:	f800283a 	ret

000020ec <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    20ec:	defffc04 	addi	sp,sp,-16
    20f0:	df000315 	stw	fp,12(sp)
    20f4:	df000304 	addi	fp,sp,12
    20f8:	e13ffe15 	stw	r4,-8(fp)
    20fc:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    2100:	000530fa 	rdctl	r2,ienable
    2104:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    2108:	e0ffff17 	ldw	r3,-4(fp)
    210c:	00800044 	movi	r2,1
    2110:	10c4983a 	sll	r2,r2,r3
    2114:	1007883a 	mov	r3,r2
    2118:	e0bffd17 	ldw	r2,-12(fp)
    211c:	1884703a 	and	r2,r3,r2
    2120:	1004c03a 	cmpne	r2,r2,zero
}
    2124:	e037883a 	mov	sp,fp
    2128:	df000017 	ldw	fp,0(sp)
    212c:	dec00104 	addi	sp,sp,4
    2130:	f800283a 	ret

00002134 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    2134:	defff404 	addi	sp,sp,-48
    2138:	dfc00b15 	stw	ra,44(sp)
    213c:	df000a15 	stw	fp,40(sp)
    2140:	df000a04 	addi	fp,sp,40
    2144:	e13ffb15 	stw	r4,-20(fp)
    2148:	e17ffc15 	stw	r5,-16(fp)
    214c:	e1bffd15 	stw	r6,-12(fp)
    2150:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
    2154:	00bffa84 	movi	r2,-22
    2158:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    215c:	e0bffc17 	ldw	r2,-16(fp)
    2160:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    2164:	e0bff917 	ldw	r2,-28(fp)
    2168:	10800808 	cmpgei	r2,r2,32
    216c:	1000291e 	bne	r2,zero,2214 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2170:	0005303a 	rdctl	r2,status
    2174:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2178:	e0fff717 	ldw	r3,-36(fp)
    217c:	00bfff84 	movi	r2,-2
    2180:	1884703a 	and	r2,r3,r2
    2184:	1001703a 	wrctl	status,r2
  
  return context;
    2188:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    218c:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
    2190:	e0bff917 	ldw	r2,-28(fp)
    2194:	00c00034 	movhi	r3,0
    2198:	18d81a04 	addi	r3,r3,24680
    219c:	100490fa 	slli	r2,r2,3
    21a0:	10c7883a 	add	r3,r2,r3
    21a4:	e0bffd17 	ldw	r2,-12(fp)
    21a8:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
    21ac:	e0bff917 	ldw	r2,-28(fp)
    21b0:	00c00034 	movhi	r3,0
    21b4:	18d81a04 	addi	r3,r3,24680
    21b8:	100490fa 	slli	r2,r2,3
    21bc:	10c5883a 	add	r2,r2,r3
    21c0:	10c00104 	addi	r3,r2,4
    21c4:	e0bffe17 	ldw	r2,-8(fp)
    21c8:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    21cc:	e0bffd17 	ldw	r2,-12(fp)
    21d0:	1005003a 	cmpeq	r2,r2,zero
    21d4:	1000051e 	bne	r2,zero,21ec <alt_iic_isr_register+0xb8>
    21d8:	e17ff917 	ldw	r5,-28(fp)
    21dc:	e13ffb17 	ldw	r4,-20(fp)
    21e0:	0001fb00 	call	1fb0 <alt_ic_irq_enable>
    21e4:	e0bfff15 	stw	r2,-4(fp)
    21e8:	00000406 	br	21fc <alt_iic_isr_register+0xc8>
    21ec:	e17ff917 	ldw	r5,-28(fp)
    21f0:	e13ffb17 	ldw	r4,-20(fp)
    21f4:	000204c0 	call	204c <alt_ic_irq_disable>
    21f8:	e0bfff15 	stw	r2,-4(fp)
    21fc:	e0bfff17 	ldw	r2,-4(fp)
    2200:	e0bffa15 	stw	r2,-24(fp)
    2204:	e0bff817 	ldw	r2,-32(fp)
    2208:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    220c:	e0bff617 	ldw	r2,-40(fp)
    2210:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    2214:	e0bffa17 	ldw	r2,-24(fp)
}
    2218:	e037883a 	mov	sp,fp
    221c:	dfc00117 	ldw	ra,4(sp)
    2220:	df000017 	ldw	fp,0(sp)
    2224:	dec00204 	addi	sp,sp,8
    2228:	f800283a 	ret

0000222c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    222c:	defff904 	addi	sp,sp,-28
    2230:	dfc00615 	stw	ra,24(sp)
    2234:	df000515 	stw	fp,20(sp)
    2238:	df000504 	addi	fp,sp,20
    223c:	e13ffc15 	stw	r4,-16(fp)
    2240:	e17ffd15 	stw	r5,-12(fp)
    2244:	e1bffe15 	stw	r6,-8(fp)
    2248:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    224c:	e13ffd17 	ldw	r4,-12(fp)
    2250:	e17ffe17 	ldw	r5,-8(fp)
    2254:	e1bfff17 	ldw	r6,-4(fp)
    2258:	00024440 	call	2444 <open>
    225c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    2260:	e0bffb17 	ldw	r2,-20(fp)
    2264:	1004803a 	cmplt	r2,r2,zero
    2268:	10001c1e 	bne	r2,zero,22dc <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
    226c:	e0bffb17 	ldw	r2,-20(fp)
    2270:	00c00034 	movhi	r3,0
    2274:	18d0b704 	addi	r3,r3,17116
    2278:	10800324 	muli	r2,r2,12
    227c:	10c5883a 	add	r2,r2,r3
    2280:	10c00017 	ldw	r3,0(r2)
    2284:	e0bffc17 	ldw	r2,-16(fp)
    2288:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    228c:	e0bffb17 	ldw	r2,-20(fp)
    2290:	00c00034 	movhi	r3,0
    2294:	18d0b704 	addi	r3,r3,17116
    2298:	10800324 	muli	r2,r2,12
    229c:	10c5883a 	add	r2,r2,r3
    22a0:	10800104 	addi	r2,r2,4
    22a4:	10c00017 	ldw	r3,0(r2)
    22a8:	e0bffc17 	ldw	r2,-16(fp)
    22ac:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    22b0:	e0bffb17 	ldw	r2,-20(fp)
    22b4:	00c00034 	movhi	r3,0
    22b8:	18d0b704 	addi	r3,r3,17116
    22bc:	10800324 	muli	r2,r2,12
    22c0:	10c5883a 	add	r2,r2,r3
    22c4:	10800204 	addi	r2,r2,8
    22c8:	10c00017 	ldw	r3,0(r2)
    22cc:	e0bffc17 	ldw	r2,-16(fp)
    22d0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    22d4:	e13ffb17 	ldw	r4,-20(fp)
    22d8:	000262c0 	call	262c <alt_release_fd>
  }
} 
    22dc:	e037883a 	mov	sp,fp
    22e0:	dfc00117 	ldw	ra,4(sp)
    22e4:	df000017 	ldw	fp,0(sp)
    22e8:	dec00204 	addi	sp,sp,8
    22ec:	f800283a 	ret

000022f0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    22f0:	defffb04 	addi	sp,sp,-20
    22f4:	dfc00415 	stw	ra,16(sp)
    22f8:	df000315 	stw	fp,12(sp)
    22fc:	df000304 	addi	fp,sp,12
    2300:	e13ffd15 	stw	r4,-12(fp)
    2304:	e17ffe15 	stw	r5,-8(fp)
    2308:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    230c:	01000034 	movhi	r4,0
    2310:	2110ba04 	addi	r4,r4,17128
    2314:	e17ffd17 	ldw	r5,-12(fp)
    2318:	01800044 	movi	r6,1
    231c:	01c07fc4 	movi	r7,511
    2320:	000222c0 	call	222c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    2324:	01000034 	movhi	r4,0
    2328:	2110b704 	addi	r4,r4,17116
    232c:	e17ffe17 	ldw	r5,-8(fp)
    2330:	000d883a 	mov	r6,zero
    2334:	01c07fc4 	movi	r7,511
    2338:	000222c0 	call	222c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    233c:	01000034 	movhi	r4,0
    2340:	2110bd04 	addi	r4,r4,17140
    2344:	e17fff17 	ldw	r5,-4(fp)
    2348:	01800044 	movi	r6,1
    234c:	01c07fc4 	movi	r7,511
    2350:	000222c0 	call	222c <alt_open_fd>
}  
    2354:	e037883a 	mov	sp,fp
    2358:	dfc00117 	ldw	ra,4(sp)
    235c:	df000017 	ldw	fp,0(sp)
    2360:	dec00204 	addi	sp,sp,8
    2364:	f800283a 	ret

00002368 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    2368:	defffc04 	addi	sp,sp,-16
    236c:	df000315 	stw	fp,12(sp)
    2370:	df000304 	addi	fp,sp,12
    2374:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    2378:	e0bffe17 	ldw	r2,-8(fp)
    237c:	10800217 	ldw	r2,8(r2)
    2380:	10d00034 	orhi	r3,r2,16384
    2384:	e0bffe17 	ldw	r2,-8(fp)
    2388:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    238c:	e03ffd15 	stw	zero,-12(fp)
    2390:	00002006 	br	2414 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    2394:	e0bffd17 	ldw	r2,-12(fp)
    2398:	00c00034 	movhi	r3,0
    239c:	18d0b704 	addi	r3,r3,17116
    23a0:	10800324 	muli	r2,r2,12
    23a4:	10c5883a 	add	r2,r2,r3
    23a8:	10c00017 	ldw	r3,0(r2)
    23ac:	e0bffe17 	ldw	r2,-8(fp)
    23b0:	10800017 	ldw	r2,0(r2)
    23b4:	1880141e 	bne	r3,r2,2408 <alt_file_locked+0xa0>
    23b8:	e0bffd17 	ldw	r2,-12(fp)
    23bc:	00c00034 	movhi	r3,0
    23c0:	18d0b704 	addi	r3,r3,17116
    23c4:	10800324 	muli	r2,r2,12
    23c8:	10c5883a 	add	r2,r2,r3
    23cc:	10800204 	addi	r2,r2,8
    23d0:	10800017 	ldw	r2,0(r2)
    23d4:	1004403a 	cmpge	r2,r2,zero
    23d8:	10000b1e 	bne	r2,zero,2408 <alt_file_locked+0xa0>
    23dc:	e0bffd17 	ldw	r2,-12(fp)
    23e0:	10800324 	muli	r2,r2,12
    23e4:	1007883a 	mov	r3,r2
    23e8:	00800034 	movhi	r2,0
    23ec:	1090b704 	addi	r2,r2,17116
    23f0:	1887883a 	add	r3,r3,r2
    23f4:	e0bffe17 	ldw	r2,-8(fp)
    23f8:	18800326 	beq	r3,r2,2408 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    23fc:	00bffcc4 	movi	r2,-13
    2400:	e0bfff15 	stw	r2,-4(fp)
    2404:	00000a06 	br	2430 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    2408:	e0bffd17 	ldw	r2,-12(fp)
    240c:	10800044 	addi	r2,r2,1
    2410:	e0bffd15 	stw	r2,-12(fp)
    2414:	00800034 	movhi	r2,0
    2418:	10921b04 	addi	r2,r2,18540
    241c:	10800017 	ldw	r2,0(r2)
    2420:	1007883a 	mov	r3,r2
    2424:	e0bffd17 	ldw	r2,-12(fp)
    2428:	18bfda2e 	bgeu	r3,r2,2394 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    242c:	e03fff15 	stw	zero,-4(fp)
    2430:	e0bfff17 	ldw	r2,-4(fp)
}
    2434:	e037883a 	mov	sp,fp
    2438:	df000017 	ldw	fp,0(sp)
    243c:	dec00104 	addi	sp,sp,4
    2440:	f800283a 	ret

00002444 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    2444:	defff404 	addi	sp,sp,-48
    2448:	dfc00b15 	stw	ra,44(sp)
    244c:	df000a15 	stw	fp,40(sp)
    2450:	df000a04 	addi	fp,sp,40
    2454:	e13ffb15 	stw	r4,-20(fp)
    2458:	e17ffc15 	stw	r5,-16(fp)
    245c:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    2460:	00bfffc4 	movi	r2,-1
    2464:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
    2468:	00bffb44 	movi	r2,-19
    246c:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
    2470:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    2474:	e13ffb17 	ldw	r4,-20(fp)
    2478:	01400034 	movhi	r5,0
    247c:	29521904 	addi	r5,r5,18532
    2480:	00028500 	call	2850 <alt_find_dev>
    2484:	e0bffa15 	stw	r2,-24(fp)
    2488:	e0bffa17 	ldw	r2,-24(fp)
    248c:	1004c03a 	cmpne	r2,r2,zero
    2490:	1000051e 	bne	r2,zero,24a8 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    2494:	e13ffb17 	ldw	r4,-20(fp)
    2498:	00028e40 	call	28e4 <alt_find_file>
    249c:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
    24a0:	00800044 	movi	r2,1
    24a4:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    24a8:	e0bffa17 	ldw	r2,-24(fp)
    24ac:	1005003a 	cmpeq	r2,r2,zero
    24b0:	1000301e 	bne	r2,zero,2574 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
    24b4:	e13ffa17 	ldw	r4,-24(fp)
    24b8:	0002a040 	call	2a04 <alt_get_fd>
    24bc:	e0bff815 	stw	r2,-32(fp)
    24c0:	e0bff817 	ldw	r2,-32(fp)
    24c4:	1004403a 	cmpge	r2,r2,zero
    24c8:	1000031e 	bne	r2,zero,24d8 <open+0x94>
    {
      status = index;
    24cc:	e0bff817 	ldw	r2,-32(fp)
    24d0:	e0bff715 	stw	r2,-36(fp)
    24d4:	00002906 	br	257c <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
    24d8:	e0bff817 	ldw	r2,-32(fp)
    24dc:	10800324 	muli	r2,r2,12
    24e0:	1007883a 	mov	r3,r2
    24e4:	00800034 	movhi	r2,0
    24e8:	1090b704 	addi	r2,r2,17116
    24ec:	1885883a 	add	r2,r3,r2
    24f0:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    24f4:	e0fffc17 	ldw	r3,-16(fp)
    24f8:	00900034 	movhi	r2,16384
    24fc:	10bfffc4 	addi	r2,r2,-1
    2500:	1886703a 	and	r3,r3,r2
    2504:	e0bff917 	ldw	r2,-28(fp)
    2508:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    250c:	e0bff617 	ldw	r2,-40(fp)
    2510:	1004c03a 	cmpne	r2,r2,zero
    2514:	1000061e 	bne	r2,zero,2530 <open+0xec>
    2518:	e13ff917 	ldw	r4,-28(fp)
    251c:	00023680 	call	2368 <alt_file_locked>
    2520:	e0bff715 	stw	r2,-36(fp)
    2524:	e0bff717 	ldw	r2,-36(fp)
    2528:	1004803a 	cmplt	r2,r2,zero
    252c:	1000131e 	bne	r2,zero,257c <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    2530:	e0bffa17 	ldw	r2,-24(fp)
    2534:	10800317 	ldw	r2,12(r2)
    2538:	1005003a 	cmpeq	r2,r2,zero
    253c:	1000091e 	bne	r2,zero,2564 <open+0x120>
    2540:	e0bffa17 	ldw	r2,-24(fp)
    2544:	10800317 	ldw	r2,12(r2)
    2548:	e13ff917 	ldw	r4,-28(fp)
    254c:	e17ffb17 	ldw	r5,-20(fp)
    2550:	e1bffc17 	ldw	r6,-16(fp)
    2554:	e1fffd17 	ldw	r7,-12(fp)
    2558:	103ee83a 	callr	r2
    255c:	e0bfff15 	stw	r2,-4(fp)
    2560:	00000106 	br	2568 <open+0x124>
    2564:	e03fff15 	stw	zero,-4(fp)
    2568:	e0bfff17 	ldw	r2,-4(fp)
    256c:	e0bff715 	stw	r2,-36(fp)
    2570:	00000206 	br	257c <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
    2574:	00bffb44 	movi	r2,-19
    2578:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    257c:	e0bff717 	ldw	r2,-36(fp)
    2580:	1004403a 	cmpge	r2,r2,zero
    2584:	1000091e 	bne	r2,zero,25ac <open+0x168>
  {
    alt_release_fd (index);  
    2588:	e13ff817 	ldw	r4,-32(fp)
    258c:	000262c0 	call	262c <alt_release_fd>
    ALT_ERRNO = -status;
    2590:	00025cc0 	call	25cc <alt_get_errno>
    2594:	e0fff717 	ldw	r3,-36(fp)
    2598:	00c7c83a 	sub	r3,zero,r3
    259c:	10c00015 	stw	r3,0(r2)
    return -1;
    25a0:	00bfffc4 	movi	r2,-1
    25a4:	e0bffe15 	stw	r2,-8(fp)
    25a8:	00000206 	br	25b4 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
    25ac:	e0bff817 	ldw	r2,-32(fp)
    25b0:	e0bffe15 	stw	r2,-8(fp)
    25b4:	e0bffe17 	ldw	r2,-8(fp)
}
    25b8:	e037883a 	mov	sp,fp
    25bc:	dfc00117 	ldw	ra,4(sp)
    25c0:	df000017 	ldw	fp,0(sp)
    25c4:	dec00204 	addi	sp,sp,8
    25c8:	f800283a 	ret

000025cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    25cc:	defffd04 	addi	sp,sp,-12
    25d0:	dfc00215 	stw	ra,8(sp)
    25d4:	df000115 	stw	fp,4(sp)
    25d8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    25dc:	00800034 	movhi	r2,0
    25e0:	10921c04 	addi	r2,r2,18544
    25e4:	10800017 	ldw	r2,0(r2)
    25e8:	1005003a 	cmpeq	r2,r2,zero
    25ec:	1000061e 	bne	r2,zero,2608 <alt_get_errno+0x3c>
    25f0:	00800034 	movhi	r2,0
    25f4:	10921c04 	addi	r2,r2,18544
    25f8:	10800017 	ldw	r2,0(r2)
    25fc:	103ee83a 	callr	r2
    2600:	e0bfff15 	stw	r2,-4(fp)
    2604:	00000306 	br	2614 <alt_get_errno+0x48>
    2608:	00800034 	movhi	r2,0
    260c:	10981904 	addi	r2,r2,24676
    2610:	e0bfff15 	stw	r2,-4(fp)
    2614:	e0bfff17 	ldw	r2,-4(fp)
}
    2618:	e037883a 	mov	sp,fp
    261c:	dfc00117 	ldw	ra,4(sp)
    2620:	df000017 	ldw	fp,0(sp)
    2624:	dec00204 	addi	sp,sp,8
    2628:	f800283a 	ret

0000262c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    262c:	defffe04 	addi	sp,sp,-8
    2630:	df000115 	stw	fp,4(sp)
    2634:	df000104 	addi	fp,sp,4
    2638:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    263c:	e0bfff17 	ldw	r2,-4(fp)
    2640:	108000d0 	cmplti	r2,r2,3
    2644:	10000d1e 	bne	r2,zero,267c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    2648:	e0bfff17 	ldw	r2,-4(fp)
    264c:	00c00034 	movhi	r3,0
    2650:	18d0b704 	addi	r3,r3,17116
    2654:	10800324 	muli	r2,r2,12
    2658:	10c5883a 	add	r2,r2,r3
    265c:	10800204 	addi	r2,r2,8
    2660:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    2664:	e0bfff17 	ldw	r2,-4(fp)
    2668:	00c00034 	movhi	r3,0
    266c:	18d0b704 	addi	r3,r3,17116
    2670:	10800324 	muli	r2,r2,12
    2674:	10c5883a 	add	r2,r2,r3
    2678:	10000015 	stw	zero,0(r2)
  }
}
    267c:	e037883a 	mov	sp,fp
    2680:	df000017 	ldw	fp,0(sp)
    2684:	dec00104 	addi	sp,sp,4
    2688:	f800283a 	ret

0000268c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    268c:	defffa04 	addi	sp,sp,-24
    2690:	df000515 	stw	fp,20(sp)
    2694:	df000504 	addi	fp,sp,20
    2698:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    269c:	0005303a 	rdctl	r2,status
    26a0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    26a4:	e0fffd17 	ldw	r3,-12(fp)
    26a8:	00bfff84 	movi	r2,-2
    26ac:	1884703a 	and	r2,r3,r2
    26b0:	1001703a 	wrctl	status,r2
  
  return context;
    26b4:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    26b8:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
    26bc:	e0bfff17 	ldw	r2,-4(fp)
    26c0:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    26c4:	e0bffc17 	ldw	r2,-16(fp)
    26c8:	10c00017 	ldw	r3,0(r2)
    26cc:	e0bffc17 	ldw	r2,-16(fp)
    26d0:	10800117 	ldw	r2,4(r2)
    26d4:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
    26d8:	e0bffc17 	ldw	r2,-16(fp)
    26dc:	10c00117 	ldw	r3,4(r2)
    26e0:	e0bffc17 	ldw	r2,-16(fp)
    26e4:	10800017 	ldw	r2,0(r2)
    26e8:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    26ec:	e0fffc17 	ldw	r3,-16(fp)
    26f0:	e0bffc17 	ldw	r2,-16(fp)
    26f4:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
    26f8:	e0fffc17 	ldw	r3,-16(fp)
    26fc:	e0bffc17 	ldw	r2,-16(fp)
    2700:	18800015 	stw	r2,0(r3)
    2704:	e0bffe17 	ldw	r2,-8(fp)
    2708:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    270c:	e0bffb17 	ldw	r2,-20(fp)
    2710:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    2714:	e037883a 	mov	sp,fp
    2718:	df000017 	ldw	fp,0(sp)
    271c:	dec00104 	addi	sp,sp,4
    2720:	f800283a 	ret

00002724 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    2724:	defffb04 	addi	sp,sp,-20
    2728:	dfc00415 	stw	ra,16(sp)
    272c:	df000315 	stw	fp,12(sp)
    2730:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    2734:	d0a00717 	ldw	r2,-32740(gp)
    2738:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    273c:	d0a60117 	ldw	r2,-26620(gp)
    2740:	10800044 	addi	r2,r2,1
    2744:	d0a60115 	stw	r2,-26620(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    2748:	00003106 	br	2810 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
    274c:	e0bffe17 	ldw	r2,-8(fp)
    2750:	10800017 	ldw	r2,0(r2)
    2754:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    2758:	e0bffe17 	ldw	r2,-8(fp)
    275c:	10800403 	ldbu	r2,16(r2)
    2760:	10803fcc 	andi	r2,r2,255
    2764:	1005003a 	cmpeq	r2,r2,zero
    2768:	1000051e 	bne	r2,zero,2780 <alt_tick+0x5c>
    276c:	d0a60117 	ldw	r2,-26620(gp)
    2770:	1004c03a 	cmpne	r2,r2,zero
    2774:	1000021e 	bne	r2,zero,2780 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
    2778:	e0bffe17 	ldw	r2,-8(fp)
    277c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    2780:	e0bffe17 	ldw	r2,-8(fp)
    2784:	10c00217 	ldw	r3,8(r2)
    2788:	d0a60117 	ldw	r2,-26620(gp)
    278c:	10c01e36 	bltu	r2,r3,2808 <alt_tick+0xe4>
    2790:	e0bffe17 	ldw	r2,-8(fp)
    2794:	10800403 	ldbu	r2,16(r2)
    2798:	10803fcc 	andi	r2,r2,255
    279c:	1004c03a 	cmpne	r2,r2,zero
    27a0:	1000191e 	bne	r2,zero,2808 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
    27a4:	e0bffe17 	ldw	r2,-8(fp)
    27a8:	10c00317 	ldw	r3,12(r2)
    27ac:	e0bffe17 	ldw	r2,-8(fp)
    27b0:	11000517 	ldw	r4,20(r2)
    27b4:	183ee83a 	callr	r3
    27b8:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    27bc:	e0bffd17 	ldw	r2,-12(fp)
    27c0:	1004c03a 	cmpne	r2,r2,zero
    27c4:	1000031e 	bne	r2,zero,27d4 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
    27c8:	e13ffe17 	ldw	r4,-8(fp)
    27cc:	000268c0 	call	268c <alt_alarm_stop>
    27d0:	00000d06 	br	2808 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
    27d4:	e0bffe17 	ldw	r2,-8(fp)
    27d8:	10c00217 	ldw	r3,8(r2)
    27dc:	e0bffd17 	ldw	r2,-12(fp)
    27e0:	1887883a 	add	r3,r3,r2
    27e4:	e0bffe17 	ldw	r2,-8(fp)
    27e8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    27ec:	e0bffe17 	ldw	r2,-8(fp)
    27f0:	10c00217 	ldw	r3,8(r2)
    27f4:	d0a60117 	ldw	r2,-26620(gp)
    27f8:	1880032e 	bgeu	r3,r2,2808 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
    27fc:	e0fffe17 	ldw	r3,-8(fp)
    2800:	00800044 	movi	r2,1
    2804:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
    2808:	e0bfff17 	ldw	r2,-4(fp)
    280c:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    2810:	d0e00704 	addi	r3,gp,-32740
    2814:	e0bffe17 	ldw	r2,-8(fp)
    2818:	10ffcc1e 	bne	r2,r3,274c <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    281c:	e037883a 	mov	sp,fp
    2820:	dfc00117 	ldw	ra,4(sp)
    2824:	df000017 	ldw	fp,0(sp)
    2828:	dec00204 	addi	sp,sp,8
    282c:	f800283a 	ret

00002830 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    2830:	deffff04 	addi	sp,sp,-4
    2834:	df000015 	stw	fp,0(sp)
    2838:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    283c:	000170fa 	wrctl	ienable,zero
}
    2840:	e037883a 	mov	sp,fp
    2844:	df000017 	ldw	fp,0(sp)
    2848:	dec00104 	addi	sp,sp,4
    284c:	f800283a 	ret

00002850 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    2850:	defff904 	addi	sp,sp,-28
    2854:	dfc00615 	stw	ra,24(sp)
    2858:	df000515 	stw	fp,20(sp)
    285c:	df000504 	addi	fp,sp,20
    2860:	e13ffd15 	stw	r4,-12(fp)
    2864:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
    2868:	e0bffe17 	ldw	r2,-8(fp)
    286c:	10800017 	ldw	r2,0(r2)
    2870:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    2874:	e13ffd17 	ldw	r4,-12(fp)
    2878:	0002cac0 	call	2cac <strlen>
    287c:	10800044 	addi	r2,r2,1
    2880:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    2884:	00000d06 	br	28bc <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    2888:	e0bffc17 	ldw	r2,-16(fp)
    288c:	11000217 	ldw	r4,8(r2)
    2890:	e1bffb17 	ldw	r6,-20(fp)
    2894:	e17ffd17 	ldw	r5,-12(fp)
    2898:	0002b980 	call	2b98 <memcmp>
    289c:	1004c03a 	cmpne	r2,r2,zero
    28a0:	1000031e 	bne	r2,zero,28b0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    28a4:	e0bffc17 	ldw	r2,-16(fp)
    28a8:	e0bfff15 	stw	r2,-4(fp)
    28ac:	00000706 	br	28cc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    28b0:	e0bffc17 	ldw	r2,-16(fp)
    28b4:	10800017 	ldw	r2,0(r2)
    28b8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    28bc:	e0fffe17 	ldw	r3,-8(fp)
    28c0:	e0bffc17 	ldw	r2,-16(fp)
    28c4:	10fff01e 	bne	r2,r3,2888 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    28c8:	e03fff15 	stw	zero,-4(fp)
    28cc:	e0bfff17 	ldw	r2,-4(fp)
}
    28d0:	e037883a 	mov	sp,fp
    28d4:	dfc00117 	ldw	ra,4(sp)
    28d8:	df000017 	ldw	fp,0(sp)
    28dc:	dec00204 	addi	sp,sp,8
    28e0:	f800283a 	ret

000028e4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    28e4:	defffa04 	addi	sp,sp,-24
    28e8:	dfc00515 	stw	ra,20(sp)
    28ec:	df000415 	stw	fp,16(sp)
    28f0:	df000404 	addi	fp,sp,16
    28f4:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    28f8:	00800034 	movhi	r2,0
    28fc:	10921704 	addi	r2,r2,18524
    2900:	10800017 	ldw	r2,0(r2)
    2904:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    2908:	00003306 	br	29d8 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
    290c:	e0bffd17 	ldw	r2,-12(fp)
    2910:	11000217 	ldw	r4,8(r2)
    2914:	0002cac0 	call	2cac <strlen>
    2918:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
    291c:	e0bffd17 	ldw	r2,-12(fp)
    2920:	10c00217 	ldw	r3,8(r2)
    2924:	e0bffc17 	ldw	r2,-16(fp)
    2928:	1885883a 	add	r2,r3,r2
    292c:	10bfffc4 	addi	r2,r2,-1
    2930:	10800003 	ldbu	r2,0(r2)
    2934:	10803fcc 	andi	r2,r2,255
    2938:	1080201c 	xori	r2,r2,128
    293c:	10bfe004 	addi	r2,r2,-128
    2940:	10800bd8 	cmpnei	r2,r2,47
    2944:	1000031e 	bne	r2,zero,2954 <alt_find_file+0x70>
    {
      len -= 1;
    2948:	e0bffc17 	ldw	r2,-16(fp)
    294c:	10bfffc4 	addi	r2,r2,-1
    2950:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    2954:	e0bffc17 	ldw	r2,-16(fp)
    2958:	1007883a 	mov	r3,r2
    295c:	e0bffe17 	ldw	r2,-8(fp)
    2960:	1885883a 	add	r2,r3,r2
    2964:	10800003 	ldbu	r2,0(r2)
    2968:	10803fcc 	andi	r2,r2,255
    296c:	1080201c 	xori	r2,r2,128
    2970:	10bfe004 	addi	r2,r2,-128
    2974:	10800be0 	cmpeqi	r2,r2,47
    2978:	10000a1e 	bne	r2,zero,29a4 <alt_find_file+0xc0>
    297c:	e0bffc17 	ldw	r2,-16(fp)
    2980:	1007883a 	mov	r3,r2
    2984:	e0bffe17 	ldw	r2,-8(fp)
    2988:	1885883a 	add	r2,r3,r2
    298c:	10800003 	ldbu	r2,0(r2)
    2990:	10803fcc 	andi	r2,r2,255
    2994:	1080201c 	xori	r2,r2,128
    2998:	10bfe004 	addi	r2,r2,-128
    299c:	1004c03a 	cmpne	r2,r2,zero
    29a0:	10000a1e 	bne	r2,zero,29cc <alt_find_file+0xe8>
    29a4:	e0bffd17 	ldw	r2,-12(fp)
    29a8:	11000217 	ldw	r4,8(r2)
    29ac:	e1bffc17 	ldw	r6,-16(fp)
    29b0:	e17ffe17 	ldw	r5,-8(fp)
    29b4:	0002b980 	call	2b98 <memcmp>
    29b8:	1004c03a 	cmpne	r2,r2,zero
    29bc:	1000031e 	bne	r2,zero,29cc <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    29c0:	e0bffd17 	ldw	r2,-12(fp)
    29c4:	e0bfff15 	stw	r2,-4(fp)
    29c8:	00000806 	br	29ec <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
    29cc:	e0bffd17 	ldw	r2,-12(fp)
    29d0:	10800017 	ldw	r2,0(r2)
    29d4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    29d8:	00c00034 	movhi	r3,0
    29dc:	18d21704 	addi	r3,r3,18524
    29e0:	e0bffd17 	ldw	r2,-12(fp)
    29e4:	10ffc91e 	bne	r2,r3,290c <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    29e8:	e03fff15 	stw	zero,-4(fp)
    29ec:	e0bfff17 	ldw	r2,-4(fp)
}
    29f0:	e037883a 	mov	sp,fp
    29f4:	dfc00117 	ldw	ra,4(sp)
    29f8:	df000017 	ldw	fp,0(sp)
    29fc:	dec00204 	addi	sp,sp,8
    2a00:	f800283a 	ret

00002a04 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    2a04:	defffc04 	addi	sp,sp,-16
    2a08:	df000315 	stw	fp,12(sp)
    2a0c:	df000304 	addi	fp,sp,12
    2a10:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    2a14:	00bffa04 	movi	r2,-24
    2a18:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    2a1c:	e03ffe15 	stw	zero,-8(fp)
    2a20:	00001e06 	br	2a9c <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
    2a24:	e0bffe17 	ldw	r2,-8(fp)
    2a28:	00c00034 	movhi	r3,0
    2a2c:	18d0b704 	addi	r3,r3,17116
    2a30:	10800324 	muli	r2,r2,12
    2a34:	10c5883a 	add	r2,r2,r3
    2a38:	10800017 	ldw	r2,0(r2)
    2a3c:	1004c03a 	cmpne	r2,r2,zero
    2a40:	1000131e 	bne	r2,zero,2a90 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
    2a44:	e0bffe17 	ldw	r2,-8(fp)
    2a48:	00c00034 	movhi	r3,0
    2a4c:	18d0b704 	addi	r3,r3,17116
    2a50:	10800324 	muli	r2,r2,12
    2a54:	10c7883a 	add	r3,r2,r3
    2a58:	e0bfff17 	ldw	r2,-4(fp)
    2a5c:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
    2a60:	00800034 	movhi	r2,0
    2a64:	10921b04 	addi	r2,r2,18540
    2a68:	10c00017 	ldw	r3,0(r2)
    2a6c:	e0bffe17 	ldw	r2,-8(fp)
    2a70:	1880040e 	bge	r3,r2,2a84 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
    2a74:	00c00034 	movhi	r3,0
    2a78:	18d21b04 	addi	r3,r3,18540
    2a7c:	e0bffe17 	ldw	r2,-8(fp)
    2a80:	18800015 	stw	r2,0(r3)
      }
      rc = i;
    2a84:	e0bffe17 	ldw	r2,-8(fp)
    2a88:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    2a8c:	00000606 	br	2aa8 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    2a90:	e0bffe17 	ldw	r2,-8(fp)
    2a94:	10800044 	addi	r2,r2,1
    2a98:	e0bffe15 	stw	r2,-8(fp)
    2a9c:	e0bffe17 	ldw	r2,-8(fp)
    2aa0:	10800810 	cmplti	r2,r2,32
    2aa4:	103fdf1e 	bne	r2,zero,2a24 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    2aa8:	e0bffd17 	ldw	r2,-12(fp)
}
    2aac:	e037883a 	mov	sp,fp
    2ab0:	df000017 	ldw	fp,0(sp)
    2ab4:	dec00104 	addi	sp,sp,4
    2ab8:	f800283a 	ret

00002abc <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    2abc:	defffb04 	addi	sp,sp,-20
    2ac0:	df000415 	stw	fp,16(sp)
    2ac4:	df000404 	addi	fp,sp,16
    2ac8:	e13ffe15 	stw	r4,-8(fp)
    2acc:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    2ad0:	e0bfff17 	ldw	r2,-4(fp)
    2ad4:	10880070 	cmpltui	r2,r2,8193
    2ad8:	1000021e 	bne	r2,zero,2ae4 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    2adc:	00880004 	movi	r2,8192
    2ae0:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    2ae4:	e0fffe17 	ldw	r3,-8(fp)
    2ae8:	e0bfff17 	ldw	r2,-4(fp)
    2aec:	1885883a 	add	r2,r3,r2
    2af0:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    2af4:	e0bffe17 	ldw	r2,-8(fp)
    2af8:	e0bffd15 	stw	r2,-12(fp)
    2afc:	00000506 	br	2b14 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    2b00:	e0bffd17 	ldw	r2,-12(fp)
    2b04:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    2b08:	e0bffd17 	ldw	r2,-12(fp)
    2b0c:	10800804 	addi	r2,r2,32
    2b10:	e0bffd15 	stw	r2,-12(fp)
    2b14:	e0fffd17 	ldw	r3,-12(fp)
    2b18:	e0bffc17 	ldw	r2,-16(fp)
    2b1c:	18bff836 	bltu	r3,r2,2b00 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    2b20:	e0bffe17 	ldw	r2,-8(fp)
    2b24:	108007cc 	andi	r2,r2,31
    2b28:	1005003a 	cmpeq	r2,r2,zero
    2b2c:	1000021e 	bne	r2,zero,2b38 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    2b30:	e0bffd17 	ldw	r2,-12(fp)
    2b34:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    2b38:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    2b3c:	e037883a 	mov	sp,fp
    2b40:	df000017 	ldw	fp,0(sp)
    2b44:	dec00104 	addi	sp,sp,4
    2b48:	f800283a 	ret

00002b4c <atexit>:
    2b4c:	200b883a 	mov	r5,r4
    2b50:	000d883a 	mov	r6,zero
    2b54:	0009883a 	mov	r4,zero
    2b58:	000f883a 	mov	r7,zero
    2b5c:	0002d201 	jmpi	2d20 <__register_exitproc>

00002b60 <exit>:
    2b60:	defffe04 	addi	sp,sp,-8
    2b64:	000b883a 	mov	r5,zero
    2b68:	dc000015 	stw	r16,0(sp)
    2b6c:	dfc00115 	stw	ra,4(sp)
    2b70:	2021883a 	mov	r16,r4
    2b74:	0002e580 	call	2e58 <__call_exitprocs>
    2b78:	00800034 	movhi	r2,0
    2b7c:	10922104 	addi	r2,r2,18564
    2b80:	11000017 	ldw	r4,0(r2)
    2b84:	20800f17 	ldw	r2,60(r4)
    2b88:	10000126 	beq	r2,zero,2b90 <exit+0x30>
    2b8c:	103ee83a 	callr	r2
    2b90:	8009883a 	mov	r4,r16
    2b94:	00030480 	call	3048 <_exit>

00002b98 <memcmp>:
    2b98:	00c000c4 	movi	r3,3
    2b9c:	1980032e 	bgeu	r3,r6,2bac <memcmp+0x14>
    2ba0:	2144b03a 	or	r2,r4,r5
    2ba4:	10c4703a 	and	r2,r2,r3
    2ba8:	10000f26 	beq	r2,zero,2be8 <memcmp+0x50>
    2bac:	31ffffc4 	addi	r7,r6,-1
    2bb0:	3000061e 	bne	r6,zero,2bcc <memcmp+0x34>
    2bb4:	00000a06 	br	2be0 <memcmp+0x48>
    2bb8:	39ffffc4 	addi	r7,r7,-1
    2bbc:	00bfffc4 	movi	r2,-1
    2bc0:	21000044 	addi	r4,r4,1
    2bc4:	29400044 	addi	r5,r5,1
    2bc8:	38800526 	beq	r7,r2,2be0 <memcmp+0x48>
    2bcc:	20c00003 	ldbu	r3,0(r4)
    2bd0:	28800003 	ldbu	r2,0(r5)
    2bd4:	18bff826 	beq	r3,r2,2bb8 <memcmp+0x20>
    2bd8:	1885c83a 	sub	r2,r3,r2
    2bdc:	f800283a 	ret
    2be0:	0005883a 	mov	r2,zero
    2be4:	f800283a 	ret
    2be8:	180f883a 	mov	r7,r3
    2bec:	20c00017 	ldw	r3,0(r4)
    2bf0:	28800017 	ldw	r2,0(r5)
    2bf4:	18bfed1e 	bne	r3,r2,2bac <memcmp+0x14>
    2bf8:	31bfff04 	addi	r6,r6,-4
    2bfc:	21000104 	addi	r4,r4,4
    2c00:	29400104 	addi	r5,r5,4
    2c04:	39bff936 	bltu	r7,r6,2bec <memcmp+0x54>
    2c08:	003fe806 	br	2bac <memcmp+0x14>

00002c0c <memcpy>:
    2c0c:	01c003c4 	movi	r7,15
    2c10:	2007883a 	mov	r3,r4
    2c14:	3980032e 	bgeu	r7,r6,2c24 <memcpy+0x18>
    2c18:	2904b03a 	or	r2,r5,r4
    2c1c:	108000cc 	andi	r2,r2,3
    2c20:	10000926 	beq	r2,zero,2c48 <memcpy+0x3c>
    2c24:	30000626 	beq	r6,zero,2c40 <memcpy+0x34>
    2c28:	30cd883a 	add	r6,r6,r3
    2c2c:	28800003 	ldbu	r2,0(r5)
    2c30:	29400044 	addi	r5,r5,1
    2c34:	18800005 	stb	r2,0(r3)
    2c38:	18c00044 	addi	r3,r3,1
    2c3c:	30fffb1e 	bne	r6,r3,2c2c <memcpy+0x20>
    2c40:	2005883a 	mov	r2,r4
    2c44:	f800283a 	ret
    2c48:	3811883a 	mov	r8,r7
    2c4c:	200f883a 	mov	r7,r4
    2c50:	28c00017 	ldw	r3,0(r5)
    2c54:	31bffc04 	addi	r6,r6,-16
    2c58:	38c00015 	stw	r3,0(r7)
    2c5c:	28800117 	ldw	r2,4(r5)
    2c60:	38800115 	stw	r2,4(r7)
    2c64:	28c00217 	ldw	r3,8(r5)
    2c68:	38c00215 	stw	r3,8(r7)
    2c6c:	28800317 	ldw	r2,12(r5)
    2c70:	29400404 	addi	r5,r5,16
    2c74:	38800315 	stw	r2,12(r7)
    2c78:	39c00404 	addi	r7,r7,16
    2c7c:	41bff436 	bltu	r8,r6,2c50 <memcpy+0x44>
    2c80:	008000c4 	movi	r2,3
    2c84:	1180072e 	bgeu	r2,r6,2ca4 <memcpy+0x98>
    2c88:	1007883a 	mov	r3,r2
    2c8c:	28800017 	ldw	r2,0(r5)
    2c90:	31bfff04 	addi	r6,r6,-4
    2c94:	29400104 	addi	r5,r5,4
    2c98:	38800015 	stw	r2,0(r7)
    2c9c:	39c00104 	addi	r7,r7,4
    2ca0:	19bffa36 	bltu	r3,r6,2c8c <memcpy+0x80>
    2ca4:	3807883a 	mov	r3,r7
    2ca8:	003fde06 	br	2c24 <memcpy+0x18>

00002cac <strlen>:
    2cac:	208000cc 	andi	r2,r4,3
    2cb0:	2011883a 	mov	r8,r4
    2cb4:	1000161e 	bne	r2,zero,2d10 <strlen+0x64>
    2cb8:	20c00017 	ldw	r3,0(r4)
    2cbc:	017fbff4 	movhi	r5,65279
    2cc0:	297fbfc4 	addi	r5,r5,-257
    2cc4:	01e02074 	movhi	r7,32897
    2cc8:	39e02004 	addi	r7,r7,-32640
    2ccc:	1945883a 	add	r2,r3,r5
    2cd0:	11c4703a 	and	r2,r2,r7
    2cd4:	00c6303a 	nor	r3,zero,r3
    2cd8:	1886703a 	and	r3,r3,r2
    2cdc:	18000c1e 	bne	r3,zero,2d10 <strlen+0x64>
    2ce0:	280d883a 	mov	r6,r5
    2ce4:	380b883a 	mov	r5,r7
    2ce8:	21000104 	addi	r4,r4,4
    2cec:	20800017 	ldw	r2,0(r4)
    2cf0:	1187883a 	add	r3,r2,r6
    2cf4:	1946703a 	and	r3,r3,r5
    2cf8:	0084303a 	nor	r2,zero,r2
    2cfc:	10c4703a 	and	r2,r2,r3
    2d00:	103ff926 	beq	r2,zero,2ce8 <strlen+0x3c>
    2d04:	20800007 	ldb	r2,0(r4)
    2d08:	10000326 	beq	r2,zero,2d18 <strlen+0x6c>
    2d0c:	21000044 	addi	r4,r4,1
    2d10:	20800007 	ldb	r2,0(r4)
    2d14:	103ffd1e 	bne	r2,zero,2d0c <strlen+0x60>
    2d18:	2205c83a 	sub	r2,r4,r8
    2d1c:	f800283a 	ret

00002d20 <__register_exitproc>:
    2d20:	defffa04 	addi	sp,sp,-24
    2d24:	00800034 	movhi	r2,0
    2d28:	10922104 	addi	r2,r2,18564
    2d2c:	dc000015 	stw	r16,0(sp)
    2d30:	14000017 	ldw	r16,0(r2)
    2d34:	dd000415 	stw	r20,16(sp)
    2d38:	2829883a 	mov	r20,r5
    2d3c:	81405217 	ldw	r5,328(r16)
    2d40:	dcc00315 	stw	r19,12(sp)
    2d44:	dc800215 	stw	r18,8(sp)
    2d48:	dc400115 	stw	r17,4(sp)
    2d4c:	dfc00515 	stw	ra,20(sp)
    2d50:	2023883a 	mov	r17,r4
    2d54:	3027883a 	mov	r19,r6
    2d58:	3825883a 	mov	r18,r7
    2d5c:	28002526 	beq	r5,zero,2df4 <__register_exitproc+0xd4>
    2d60:	29000117 	ldw	r4,4(r5)
    2d64:	008007c4 	movi	r2,31
    2d68:	11002716 	blt	r2,r4,2e08 <__register_exitproc+0xe8>
    2d6c:	8800101e 	bne	r17,zero,2db0 <__register_exitproc+0x90>
    2d70:	2105883a 	add	r2,r4,r4
    2d74:	1085883a 	add	r2,r2,r2
    2d78:	20c00044 	addi	r3,r4,1
    2d7c:	1145883a 	add	r2,r2,r5
    2d80:	0009883a 	mov	r4,zero
    2d84:	15000215 	stw	r20,8(r2)
    2d88:	28c00115 	stw	r3,4(r5)
    2d8c:	2005883a 	mov	r2,r4
    2d90:	dfc00517 	ldw	ra,20(sp)
    2d94:	dd000417 	ldw	r20,16(sp)
    2d98:	dcc00317 	ldw	r19,12(sp)
    2d9c:	dc800217 	ldw	r18,8(sp)
    2da0:	dc400117 	ldw	r17,4(sp)
    2da4:	dc000017 	ldw	r16,0(sp)
    2da8:	dec00604 	addi	sp,sp,24
    2dac:	f800283a 	ret
    2db0:	29802204 	addi	r6,r5,136
    2db4:	00800044 	movi	r2,1
    2db8:	110e983a 	sll	r7,r2,r4
    2dbc:	30c04017 	ldw	r3,256(r6)
    2dc0:	2105883a 	add	r2,r4,r4
    2dc4:	1085883a 	add	r2,r2,r2
    2dc8:	1185883a 	add	r2,r2,r6
    2dcc:	19c6b03a 	or	r3,r3,r7
    2dd0:	14802015 	stw	r18,128(r2)
    2dd4:	14c00015 	stw	r19,0(r2)
    2dd8:	00800084 	movi	r2,2
    2ddc:	30c04015 	stw	r3,256(r6)
    2de0:	88bfe31e 	bne	r17,r2,2d70 <__register_exitproc+0x50>
    2de4:	30804117 	ldw	r2,260(r6)
    2de8:	11c4b03a 	or	r2,r2,r7
    2dec:	30804115 	stw	r2,260(r6)
    2df0:	003fdf06 	br	2d70 <__register_exitproc+0x50>
    2df4:	00800034 	movhi	r2,0
    2df8:	10985a04 	addi	r2,r2,24936
    2dfc:	100b883a 	mov	r5,r2
    2e00:	80805215 	stw	r2,328(r16)
    2e04:	003fd606 	br	2d60 <__register_exitproc+0x40>
    2e08:	00800034 	movhi	r2,0
    2e0c:	10800004 	addi	r2,r2,0
    2e10:	1000021e 	bne	r2,zero,2e1c <__register_exitproc+0xfc>
    2e14:	013fffc4 	movi	r4,-1
    2e18:	003fdc06 	br	2d8c <__register_exitproc+0x6c>
    2e1c:	01006404 	movi	r4,400
    2e20:	103ee83a 	callr	r2
    2e24:	1007883a 	mov	r3,r2
    2e28:	103ffa26 	beq	r2,zero,2e14 <__register_exitproc+0xf4>
    2e2c:	80805217 	ldw	r2,328(r16)
    2e30:	180b883a 	mov	r5,r3
    2e34:	18000115 	stw	zero,4(r3)
    2e38:	18800015 	stw	r2,0(r3)
    2e3c:	80c05215 	stw	r3,328(r16)
    2e40:	18006215 	stw	zero,392(r3)
    2e44:	18006315 	stw	zero,396(r3)
    2e48:	0009883a 	mov	r4,zero
    2e4c:	883fc826 	beq	r17,zero,2d70 <__register_exitproc+0x50>
    2e50:	003fd706 	br	2db0 <__register_exitproc+0x90>

00002e54 <register_fini>:
    2e54:	f800283a 	ret

00002e58 <__call_exitprocs>:
    2e58:	00800034 	movhi	r2,0
    2e5c:	10922104 	addi	r2,r2,18564
    2e60:	10800017 	ldw	r2,0(r2)
    2e64:	defff304 	addi	sp,sp,-52
    2e68:	df000b15 	stw	fp,44(sp)
    2e6c:	d8800115 	stw	r2,4(sp)
    2e70:	00800034 	movhi	r2,0
    2e74:	10800004 	addi	r2,r2,0
    2e78:	1005003a 	cmpeq	r2,r2,zero
    2e7c:	d8800215 	stw	r2,8(sp)
    2e80:	d8800117 	ldw	r2,4(sp)
    2e84:	dd400815 	stw	r21,32(sp)
    2e88:	dd000715 	stw	r20,28(sp)
    2e8c:	10805204 	addi	r2,r2,328
    2e90:	dfc00c15 	stw	ra,48(sp)
    2e94:	ddc00a15 	stw	r23,40(sp)
    2e98:	dd800915 	stw	r22,36(sp)
    2e9c:	dcc00615 	stw	r19,24(sp)
    2ea0:	dc800515 	stw	r18,20(sp)
    2ea4:	dc400415 	stw	r17,16(sp)
    2ea8:	dc000315 	stw	r16,12(sp)
    2eac:	282b883a 	mov	r21,r5
    2eb0:	2039883a 	mov	fp,r4
    2eb4:	d8800015 	stw	r2,0(sp)
    2eb8:	2829003a 	cmpeq	r20,r5,zero
    2ebc:	d8800117 	ldw	r2,4(sp)
    2ec0:	14405217 	ldw	r17,328(r2)
    2ec4:	88001026 	beq	r17,zero,2f08 <__call_exitprocs+0xb0>
    2ec8:	ddc00017 	ldw	r23,0(sp)
    2ecc:	88800117 	ldw	r2,4(r17)
    2ed0:	8c802204 	addi	r18,r17,136
    2ed4:	143fffc4 	addi	r16,r2,-1
    2ed8:	80000916 	blt	r16,zero,2f00 <__call_exitprocs+0xa8>
    2edc:	05bfffc4 	movi	r22,-1
    2ee0:	a000151e 	bne	r20,zero,2f38 <__call_exitprocs+0xe0>
    2ee4:	8409883a 	add	r4,r16,r16
    2ee8:	2105883a 	add	r2,r4,r4
    2eec:	1485883a 	add	r2,r2,r18
    2ef0:	10c02017 	ldw	r3,128(r2)
    2ef4:	a8c01126 	beq	r21,r3,2f3c <__call_exitprocs+0xe4>
    2ef8:	843fffc4 	addi	r16,r16,-1
    2efc:	85bff81e 	bne	r16,r22,2ee0 <__call_exitprocs+0x88>
    2f00:	d8800217 	ldw	r2,8(sp)
    2f04:	10003126 	beq	r2,zero,2fcc <__call_exitprocs+0x174>
    2f08:	dfc00c17 	ldw	ra,48(sp)
    2f0c:	df000b17 	ldw	fp,44(sp)
    2f10:	ddc00a17 	ldw	r23,40(sp)
    2f14:	dd800917 	ldw	r22,36(sp)
    2f18:	dd400817 	ldw	r21,32(sp)
    2f1c:	dd000717 	ldw	r20,28(sp)
    2f20:	dcc00617 	ldw	r19,24(sp)
    2f24:	dc800517 	ldw	r18,20(sp)
    2f28:	dc400417 	ldw	r17,16(sp)
    2f2c:	dc000317 	ldw	r16,12(sp)
    2f30:	dec00d04 	addi	sp,sp,52
    2f34:	f800283a 	ret
    2f38:	8409883a 	add	r4,r16,r16
    2f3c:	88c00117 	ldw	r3,4(r17)
    2f40:	2105883a 	add	r2,r4,r4
    2f44:	1445883a 	add	r2,r2,r17
    2f48:	18ffffc4 	addi	r3,r3,-1
    2f4c:	11800217 	ldw	r6,8(r2)
    2f50:	1c001526 	beq	r3,r16,2fa8 <__call_exitprocs+0x150>
    2f54:	10000215 	stw	zero,8(r2)
    2f58:	303fe726 	beq	r6,zero,2ef8 <__call_exitprocs+0xa0>
    2f5c:	00c00044 	movi	r3,1
    2f60:	1c06983a 	sll	r3,r3,r16
    2f64:	90804017 	ldw	r2,256(r18)
    2f68:	8cc00117 	ldw	r19,4(r17)
    2f6c:	1884703a 	and	r2,r3,r2
    2f70:	10001426 	beq	r2,zero,2fc4 <__call_exitprocs+0x16c>
    2f74:	90804117 	ldw	r2,260(r18)
    2f78:	1884703a 	and	r2,r3,r2
    2f7c:	10000c1e 	bne	r2,zero,2fb0 <__call_exitprocs+0x158>
    2f80:	2105883a 	add	r2,r4,r4
    2f84:	1485883a 	add	r2,r2,r18
    2f88:	11400017 	ldw	r5,0(r2)
    2f8c:	e009883a 	mov	r4,fp
    2f90:	303ee83a 	callr	r6
    2f94:	88800117 	ldw	r2,4(r17)
    2f98:	98bfc81e 	bne	r19,r2,2ebc <__call_exitprocs+0x64>
    2f9c:	b8800017 	ldw	r2,0(r23)
    2fa0:	147fd526 	beq	r2,r17,2ef8 <__call_exitprocs+0xa0>
    2fa4:	003fc506 	br	2ebc <__call_exitprocs+0x64>
    2fa8:	8c000115 	stw	r16,4(r17)
    2fac:	003fea06 	br	2f58 <__call_exitprocs+0x100>
    2fb0:	2105883a 	add	r2,r4,r4
    2fb4:	1485883a 	add	r2,r2,r18
    2fb8:	11000017 	ldw	r4,0(r2)
    2fbc:	303ee83a 	callr	r6
    2fc0:	003ff406 	br	2f94 <__call_exitprocs+0x13c>
    2fc4:	303ee83a 	callr	r6
    2fc8:	003ff206 	br	2f94 <__call_exitprocs+0x13c>
    2fcc:	88800117 	ldw	r2,4(r17)
    2fd0:	1000081e 	bne	r2,zero,2ff4 <__call_exitprocs+0x19c>
    2fd4:	89000017 	ldw	r4,0(r17)
    2fd8:	20000726 	beq	r4,zero,2ff8 <__call_exitprocs+0x1a0>
    2fdc:	b9000015 	stw	r4,0(r23)
    2fe0:	8809883a 	mov	r4,r17
    2fe4:	00000000 	call	0 <__reset>
    2fe8:	bc400017 	ldw	r17,0(r23)
    2fec:	883fb71e 	bne	r17,zero,2ecc <__call_exitprocs+0x74>
    2ff0:	003fc506 	br	2f08 <__call_exitprocs+0xb0>
    2ff4:	89000017 	ldw	r4,0(r17)
    2ff8:	882f883a 	mov	r23,r17
    2ffc:	2023883a 	mov	r17,r4
    3000:	883fb21e 	bne	r17,zero,2ecc <__call_exitprocs+0x74>
    3004:	003fc006 	br	2f08 <__call_exitprocs+0xb0>

00003008 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
    3008:	defffd04 	addi	sp,sp,-12
    300c:	df000215 	stw	fp,8(sp)
    3010:	df000204 	addi	fp,sp,8
    3014:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
    3018:	e0bfff17 	ldw	r2,-4(fp)
    301c:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    3020:	e0bffe17 	ldw	r2,-8(fp)
    3024:	1005003a 	cmpeq	r2,r2,zero
    3028:	1000021e 	bne	r2,zero,3034 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
    302c:	002af070 	cmpltui	zero,zero,43969
    3030:	00000106 	br	3038 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
    3034:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
    3038:	e037883a 	mov	sp,fp
    303c:	df000017 	ldw	fp,0(sp)
    3040:	dec00104 	addi	sp,sp,4
    3044:	f800283a 	ret

00003048 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    3048:	defffd04 	addi	sp,sp,-12
    304c:	dfc00215 	stw	ra,8(sp)
    3050:	df000115 	stw	fp,4(sp)
    3054:	df000104 	addi	fp,sp,4
    3058:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
    305c:	e13fff17 	ldw	r4,-4(fp)
    3060:	00030080 	call	3008 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    3064:	003fff06 	br	3064 <_exit+0x1c>
    3068:	00002e54 	movui	zero,185
